var Alf = Alf || {};
if (!Alf.data) {
    Alf.data = {}
}
if (!Alf.data.proxy) {
    Alf.data.proxy = {}
}
if (!Alf.form) {
    Alf.form = {}
}
if (!Alf.form.field) {
    Alf.form.field = {}
}
if (!Alf.meta) {
    Alf.meta = {}
}
var EXTJS_23846 = EXTJS_23846 || {};
var ExSch = ExSch || {};
if (!ExSch.data) {
    ExSch.data = {}
}
if (!ExSch.eventlayout) {
    ExSch.eventlayout = {}
}
if (!ExSch.panel) {
    ExSch.panel = {}
}
if (!ExSch.view) {
    ExSch.view = {}
}
var Ext = Ext || {};
if (!Ext.classic) {
    Ext.classic = {}
}
if (!Ext.classic.toolbar) {
    Ext.classic.toolbar = {}
}
if (!Ext.theme) {
    Ext.theme = {}
}
if (!Ext.theme.classic) {
    Ext.theme.classic = {}
}
if (!Ext.theme.classic.grid) {
    Ext.theme.classic.grid = {}
}
if (!Ext.theme.classic.grid.column) {
    Ext.theme.classic.grid.column = {}
}
if (!Ext.theme.classic.grid.plugin) {
    Ext.theme.classic.grid.plugin = {}
}
if (!Ext.theme.classic.toolbar) {
    Ext.theme.classic.toolbar = {}
}
var Gnt = Gnt || {};
if (!Gnt.feature) {
    Gnt.feature = {}
}
var Inspector = Inspector || {};
var Robo = Robo || {};
if (!Robo.data) {
    Robo.data = {}
}
var Sch = Sch || {};
if (!Sch.column) {
    Sch.column = {}
}
if (!Sch.column.timeAxis) {
    Sch.column.timeAxis = {}
}
if (!Sch.crud) {
    Sch.crud = {}
}
if (!Sch.data) {
    Sch.data = {}
}
if (!Sch.data.mixin) {
    Sch.data.mixin = {}
}
if (!Sch.data.util) {
    Sch.data.util = {}
}
if (!Sch.eventlayout) {
    Sch.eventlayout = {}
}
if (!Sch.feature) {
    Sch.feature = {}
}
if (!Sch.layout) {
    Sch.layout = {}
}
if (!Sch.locale) {
    Sch.locale = {}
}
if (!Sch.mixin) {
    Sch.mixin = {}
}
if (!Sch.model) {
    Sch.model = {}
}
if (!Sch.panel) {
    Sch.panel = {}
}
if (!Sch.patches) {
    Sch.patches = {}
}
if (!Sch.plugin) {
    Sch.plugin = {}
}
if (!Sch.preset) {
    Sch.preset = {}
}
if (!Sch.selection) {
    Sch.selection = {}
}
if (!Sch.template) {
    Sch.template = {}
}
if (!Sch.tooltip) {
    Sch.tooltip = {}
}
if (!Sch.util) {
    Sch.util = {}
}
if (!Sch.view) {
    Sch.view = {}
}
if (!Sch.view.dependency) {
    Sch.view.dependency = {}
}
if (!Sch.view.dependency.renderingstrategy) {
    Sch.view.dependency.renderingstrategy = {}
}
if (!Sch.view.model) {
    Sch.view.model = {}
}
var TimesSquare = TimesSquare || {};
if (!TimesSquare.classes) {
    TimesSquare.classes = {}
}
if (!TimesSquare.controller) {
    TimesSquare.controller = {}
}
if (!TimesSquare.controller.details) {
    TimesSquare.controller.details = {}
}
if (!TimesSquare.controller.gantt) {
    TimesSquare.controller.gantt = {}
}
if (!TimesSquare.data) {
    TimesSquare.data = {}
}
if (!TimesSquare.data.field) {
    TimesSquare.data.field = {}
}
if (!TimesSquare.mixin) {
    TimesSquare.mixin = {}
}
if (!TimesSquare.model) {
    TimesSquare.model = {}
}
if (!TimesSquare.model.details) {
    TimesSquare.model.details = {}
}
if (!TimesSquare.model.gantt) {
    TimesSquare.model.gantt = {}
}
if (!TimesSquare.model.searchleg) {
    TimesSquare.model.searchleg = {}
}
if (!TimesSquare.overrides) {
    TimesSquare.overrides = {}
}
if (!TimesSquare.plugin) {
    TimesSquare.plugin = {}
}
if (!TimesSquare.plugin.tooltipable) {
    TimesSquare.plugin.tooltipable = {}
}
if (!TimesSquare.store) {
    TimesSquare.store = {}
}
if (!TimesSquare.store.common) {
    TimesSquare.store.common = {}
}
if (!TimesSquare.store.details) {
    TimesSquare.store.details = {}
}
if (!TimesSquare.store.gantt) {
    TimesSquare.store.gantt = {}
}
if (!TimesSquare.store.searchleg) {
    TimesSquare.store.searchleg = {}
}
if (!TimesSquare.util) {
    TimesSquare.util = {}
}
if (!TimesSquare.view) {
    TimesSquare.view = {}
}
if (!TimesSquare.view.common) {
    TimesSquare.view.common = {}
}
if (!TimesSquare.view.details) {
    TimesSquare.view.details = {}
}
if (!TimesSquare.view.details.aircraft) {
    TimesSquare.view.details.aircraft = {}
}
if (!TimesSquare.view.details.check) {
    TimesSquare.view.details.check = {}
}
if (!TimesSquare.view.details.leg) {
    TimesSquare.view.details.leg = {}
}
if (!TimesSquare.view.gantt) {
    TimesSquare.view.gantt = {}
}
if (!TimesSquare.view.searchleg) {
    TimesSquare.view.searchleg = {}
}
var Wuis = Wuis || {};
if (!Wuis.ajax) {
    Wuis.ajax = {}
}
if (!Wuis.controller) {
    Wuis.controller = {}
}
if (!Wuis.util) {
    Wuis.util = {}
}
var WuisLogin = WuisLogin || {};
if (!WuisLogin.controller) {
    WuisLogin.controller = {}
}
if (!WuisLogin.util) {
    WuisLogin.util = {}
}
if (!WuisLogin.view) {
    WuisLogin.view = {}
}
var messaging = messaging || {};
var overrides = overrides || {};
if (!overrides.Ext) {
    overrides.Ext = {}
}
if (!overrides.Ext.button) {
    overrides.Ext.button = {}
}
if (!overrides.Ext.dom) {
    overrides.Ext.dom = {}
}
if (!overrides.Ext.form) {
    overrides.Ext.form = {}
}
if (!overrides.Ext.form.field) {
    overrides.Ext.form.field = {}
}
if (!overrides.Ext.grid) {
    overrides.Ext.grid = {}
}
if (!overrides.Ext.grid.column) {
    overrides.Ext.grid.column = {}
}
if (!overrides.Ext.panel) {
    overrides.Ext.panel = {}
}
Ext.define('TimesSquare.overrides.Connection', {
    override: 'Ext.data.Connection',
    onComplete: function(b) {
        var a = !0;
        switch (b.xhr.status) {
            case 401:
                a = Ext.globalEvents.fireEvent('unauthorizedstatus');
                break;
            default:
        }
        if (a) {
            return this.callParent(arguments)
        }
    }
});
Ext.cmd.derive('Sch.util.Patch', Ext.Base, {
    target: null,
    minVersion: null,
    maxVersion: null,
    reportUrl: null,
    obsoleteTestName: null,
    description: null,
    applyFn: null,
    ieOnly: !1,
    macOnly: !1,
    overrides: null,
    onClassExtended: function(b, a) {
        if (Sch.disableOverrides) {
            return
        }
        if (a.ieOnly && !Ext.isIE) {
            return
        }
        if (a.macOnly && !Ext.isMac) {
            return
        }
        if ((!a.minVersion || Ext.versions.extjs.equals(a.minVersion) || Ext.versions.extjs.isGreaterThan(a.minVersion)) && (!a.maxVersion || Ext.versions.extjs.equals(a.maxVersion) || Ext.versions.extjs.isLessThan(a.maxVersion))) {
            Ext.require(a.target, function() {
                if (a.applyFn) {
                    a.applyFn()
                } else {
                    if (a.overrides) {
                        Ext.ClassManager.get(a.target).override(a.overrides)
                    }
                }
            })
        }
    }
}, 0, 0, 0, 0, 0, 0, [Sch.util, 'Patch'], 0);
Ext.cmd.derive('Sch.patches.EXTJS_23846', Sch.util.Patch, {
    target: ['Ext.dom.Element', 'Ext.event.publisher.Gesture'],
    maxVersion: '6.2.2',
    applyFn: function() {
        if (Ext.firefoxVersion < 51) {
            return
        }
        Ext.define('EXTJS_23846.Element', {
            override: 'Ext.dom.Element'
        }, function(e) {
            var c = Ext.supports,
                d = e.prototype,
                b = d.eventMap,
                a = d.additiveEvents;
            if (Ext.os.is.Desktop && c.TouchEvents && !c.PointerEvents) {
                b.touchstart = 'mousedown';
                b.touchmove = 'mousemove';
                b.touchend = 'mouseup';
                b.touchcancel = 'mouseup';
                a.mousedown = 'mousedown';
                a.mousemove = 'mousemove';
                a.mouseup = 'mouseup';
                a.touchstart = 'touchstart';
                a.touchmove = 'touchmove';
                a.touchend = 'touchend';
                a.touchcancel = 'touchcancel';
                a.pointerdown = 'mousedown';
                a.pointermove = 'mousemove';
                a.pointerup = 'mouseup';
                a.pointercancel = 'mouseup'
            }
        });
        Ext.define('EXTJS_23846.Gesture', {
            override: 'Ext.event.publisher.Gesture'
        }, function(b) {
            var a = b.instance;
            if (Ext.supports.TouchEvents && !Ext.isWebKit && Ext.os.is.Desktop) {
                a.handledDomEvents.push('mousedown', 'mousemove', 'mouseup');
                a.registerEvents()
            }
        })
    }
}, 0, 0, 0, 0, 0, 0, [Sch.patches, 'EXTJS_23846'], 0);
Ext.cmd.derive('Inspector.Config', Ext.Base, {
    singleton: !0,
    skipAttr: 'skipInspect',
    prefix: null,
    attr: 'inspect',
    separator: '-',
    commonCls: '__test-inspect-selector__'
}, 0, 0, 0, 0, 0, 0, [Inspector, 'Config'], 0);
Ext.define('TimesSquare.overrides.InspectorConfig', {
    override: 'Inspector.Config',
    separator: '/'
});
Ext.define('overrides.Ext.dom.Element', {
    override: 'Ext.dom.Element',
    getInspectionChain: function() {
        var b = [this],
            a = this,
            c;
        do {
            c = a;
            a = a.up('[data-inspectioncls]');
            if (a) {
                b.unshift(a)
            }
        } while (a && a !== c);
        return b
    },
    getInspectionSelector: function() {
        return this.getAttribute('data-inspectioncls')
    }
});
Ext.define('TimesSquare.overrides.Element', {
    override: 'Ext.dom.Element',
    focus: function(c, a) {
        var b = this;
        a = a || b.dom;
        if (Number(c)) {
            Ext.defer(b.focus, c, b, [null, a])
        } else {
            Ext.GlobalEvents.fireEvent('beforefocus', a);
            if (a) {
                a.focus()
            }
        }
        return b
    }
});
Ext.define('TimesSquare.overrides.FormatRenderer', {
    override: 'Ext.util.Format',
    objToString: function(c, d, a) {
        var b = [];
        a = a || ', ';
        if (!c || !c.length) {
            return ''
        }
        Ext.Array.each(c, function(e) {
            if (e[d]) {
                b.push(e[d])
            }
        });
        if (b.length) {
            return b.join(a)
        }
        return ''
    },
    delayDurationRenderer: function(a) {
        if (!Ext.isNumeric(a)) {
            return ''
        }
        var b = '';
        if (a < 0) {
            b += '-';
            a *= -1
        }
        return b + Ext.String.leftPad(Math.floor(a / 60), 2, '0') + ':' + Ext.String.leftPad(a % 60, 2, '0')
    },
    durationRenderer: function(a) {
        if (a) {
            return Ext.String.leftPad(a.hours, 2, '0') + ':' + Ext.String.leftPad(a.minutes, 2, '0')
        }
        return a
    },
    booleanToString: function(a) {
        if (Ext.isBoolean(a)) {
            return a ? 'Y' : 'N'
        }
        return a
    },
    crewAddressRenderer: function(h) {
        var f, c, g, b, d, a, e = [];
        if (!h.length) {
            return ''
        }
        f = this.sortObjects(h, 'priority');
        Ext.Array.each(f, function(f) {
            g = f.street || '';
            b = f.cityName || '';
            d = f.zipCode || '';
            a = f.postalCountryCode || '';
            c = [g, b, d, a].join(' ');
            e.push(c)
        });
        return e.join(', ')
    },
    crewPhoneRenderer: function(d) {
        var c, a, b = [];
        if (!d.length) {
            return ''
        }
        c = this.sortObjects(d, 'priority');
        Ext.Array.each(c, function(c) {
            a = c.telephoneNumber || '';
            b.push(a)
        });
        return b.join(', ')
    },
    sortObjects: function(b, a) {
        b.sort(function(c, d) {
            if (c[a] === d[a]) {
                return 0
            }
            return c[a] < d[a] ? -1 : 1
        });
        return b
    },
    crewLegRenderer: function(b) {
        if (!b || !b.legId) {
            return ''
        }
        var c = b.legId,
            d = b.connectionTime,
            a = TimesSquare.model.IdFactory.getLegName(c.flight);
        a += '/';
        a += Ext.Date.format(Ext.Date.parse(c.dayOfOrigin, 'c'), 'dMy');
        a += '/';
        a += this.formatTime(d);
        return a
    },
    formatTime: function(a) {
        var c = Math.abs(a.hours),
            b = Math.abs(a.minutes),
            d = a.hours < 0 || a.minutes < 0 ? '-' : '';
        return d + Ext.String.leftPad(c, 2, '0') + ':' + Ext.String.leftPad(b, 2, '0')
    },
    concatRecordFields: function(e, c, d) {
        var b = [],
            a;
        Ext.Array.each(c, function(f) {
            a = e.get(f);
            if (a) {
                b.push(a)
            }
        });
        if (!b.length) {
            return ''
        }
        return b.join(d)
    }
});
Ext.define('Ext.theme.classic.Component', {
    override: 'Ext.Component'
}, function() {
    Ext.namespace('Ext.theme.is').Classic = !0;
    Ext.theme.name = 'Classic'
});
Ext.define('overrides.Ext.Component', {
    override: 'Ext.Component',
    initComponent: function() {
        this.initInspectionData();
        this.callParent()
    },
    skipInspection: function() {
        return this[Inspector.Config.skipAttr]
    },
    getInspectionAttr: function() {
        return this[Inspector.Config.attr]
    },
    initInspectionData: function() {
        var c = Inspector.Config.prefix || '',
            a = this.getInspectionSelector(),
            d = this.skipInspection(),
            b = a && c + a;
        if (d || !a) {
            return
        }
        this.inspectionData = {
            cls: b
        };
        this.addCls(b)
    },
    getInspectionSelector: function() {
        var b = this.getInspectionSelectorPieces(),
            c = this.buildInspectionSelectorChain(b),
            a = Inspector.Config.separator;
        return c.filter(function(a) {
            return !!a
        }).join(a).replace(/\s+/g, '').replace(/[&_+\.\-]+/g, '-').toLowerCase()
    },
    getInspectionSelectorPieces: function() {
        var b = this.initialConfig.id,
            c = this.xtype.replace('.', '-'),
            e = this.getReference(),
            a = this.cls,
            d = this.getInspectionAttr();
        if (Ext.isArray(a)) {
            a = a[a.length - 1]
        }
        a = a && a.replace(/((^\s+)|(\s+$))/g, '').split(' ');
        a = a && a[a.length - 1];
        if (a && a.match(/^x-/)) {
            a = null
        }
        if (b && b.match(/-\d/)) {
            b = null
        }
        return {
            id: b,
            ref: e,
            cls: a,
            xtype: c,
            inspect: d
        }
    },
    buildInspectionSelectorChain: function(a) {
        if (a.id) {
            return [a.xtype, a.id]
        }
        return [a.xtype, a.inspect || a.ref || a.cls]
    },
    afterRender: function() {
        this.callParent()
    }
});
Ext.define('Alf.data.ModelOverride', {
    override: 'Ext.data.Model',
    statics: {
        dataWriter: null
    },
    getWriteData: function(d) {
        var c = Ext.data.Model,
            a = c.dataWriter,
            b;
        if (!a) {
            a = c.dataWriter = Ext.create('Ext.data.writer.Json')
        }
        b = a.getRecordData(this);
        if (d !== !1) {
            a.getExpandedData([b])
        }
        return b
    }
});
Ext.define('Alf.meta.ContainerOverride', {
    override: 'Ext.container.Container',
    initItems: function() {
        var a = this;
        if (a.metaItems) {
            Alf.MetaManager.useFieldGenerator(a)
        }
        return arguments.callee.$previous.apply(this, arguments)
    }
});
Ext.define('overrides.Ext.panel.Tool', {
    override: 'Ext.panel.Tool',
    getInspectionSelectorPieces: function() {
        var a = (arguments.callee.$previous || Ext.Component.prototype.getInspectionSelectorPieces).call(this),
            b = this.type;
        Ext.apply(a, {
            type: b
        });
        return a
    },
    buildInspectionSelectorChain: function(a) {
        if (a.id) {
            return (arguments.callee.$previous || Ext.Component.prototype.buildInspectionSelectorChain).apply(this, arguments)
        }
        return [a.xtype, a.inspect || a.type || a.ref || a.cls]
    }
});
Ext.define('Ext.classic.toolbar.Toolbar', {
    override: 'Ext.toolbar.Toolbar',
    defaultFieldUI: 'toolbar'
});
Ext.define('TimesSquare.overrides.PanelFix', {
    override: 'Ext.panel.Panel',
    placeholderExpand: function(d) {
        var a = this,
            g = a.collapsed,
            c = 'x-border-region-slide-in',
            f, b, e = a.ownerLayout ? a.ownerLayout.centerRegion : null;
        if (Ext.AbstractComponent.layoutSuspendCount) {
            d = !1
        }
        if (a.floatedFromCollapse) {
            b = a.getPosition(!0);
            a.slideOutFloatedPanelBegin();
            a.slideOutFloatedPanelEnd();
            a.floated = !1
        }
        if (d) {
            Ext.suspendLayouts();
            a.placeholder.hide();
            a.el.show();
            a.collapsed = !1;
            a.setHiddenState(!1);
            if (e && !b) {
                e.hidden = !0
            }
            Ext.resumeLayouts(!0);
            if (e) {
                e.hidden = !1
            }
            a.el.addCls(c);
            a.isCollapsingOrExpanding = 2;
            if (b) {
                f = a.getXY();
                a.setLocalXY(b[0], b[1]);
                a.setXY([f[0], f[1]], {
                    duration: Ext.Number.from(d, Ext.fx.Anim.prototype.duration),
                    listeners: {
                        afteranimate: function() {
                            a.el.removeCls(c);
                            a.isCollapsingOrExpanding = 0;
                            a.fireEvent('expand', a)
                        }
                    }
                })
            } else {
                a.el.hide();
                a.placeholder.el.show();
                a.placeholder.hidden = !1;
                a.setHiddenState(!1);
                a.el.slideIn(a.convertCollapseDir(g), {
                    preserveScroll: !0,
                    duration: Ext.Number.from(d, Ext.fx.Anim.prototype.duration),
                    listeners: {
                        afteranimate: function() {
                            a.el.removeCls(c);
                            a.placeholder.hide();
                            a.updateLayout();
                            a.isCollapsingOrExpanding = 0;
                            a.fireEvent('expand', a)
                        }
                    }
                })
            }
        } else {
            a.floated = a.collapsed = !1;
            a.el.removeCls(c);
            Ext.suspendLayouts();
            a.placeholder.hide();
            a.show();
            Ext.resumeLayouts(!0);
            a.fireEvent('expand', a)
        }
        return a
    }
});
Ext.define('overrides.Ext.form.field.Base', {
    override: 'Ext.form.field.Base',
    getInspectionSelectorPieces: function() {
        var a = (arguments.callee.$previous || Ext.Component.prototype.getInspectionSelectorPieces).call(this),
            b = this.name;
        Ext.apply(a, {
            name: b
        });
        return a
    },
    buildInspectionSelectorChain: function(a) {
        if (a.id) {
            return (arguments.callee.$previous || Ext.Component.prototype.buildInspectionSelectorChain).apply(this, arguments)
        }
        return [a.xtype, a.inspect || a.name || a.ref || a.cls]
    }
});
Ext.define('TimesSquare.overrides.UpperCaseFieldOverride', {
    override: 'Ext.form.field.Base',
    initComponent: function() {
        (arguments.callee.$previous || Ext.Component.prototype.initComponent).call(this);
        this.setUpperCase(this.upperCase)
    },
    getUpperCase: function() {
        return this.upperCase
    },
    setUpperCase: function(a) {
        this.upperCase = a;
        this[a ? 'addCls' : 'removeCls']('x-form-uppercase')
    },
    getRawValue: function() {
        var a = arguments.callee.$previous.apply(this, arguments);
        return this.valueToRaw(a)
    },
    valueToRaw: function(a) {
        if (this.upperCase && Ext.isString(a)) {
            a = a.toUpperCase()
        }
        return a
    }
});
Ext.define('WuisLogin.util.VTypes', {
    override: 'Ext.form.field.VTypes',
    wuisPassword: function(c, e) {
        var d = e.next('#pwStrength'),
            a = !0,
            b = '';
        if (!c) {
            a = !1
        }
        if (a && c.length < 8) {
            b = 'Invalid password. Must be min. 8 characters!';
            a = !1
        }
        if (a && !/^(?=.*[a-z].*[a-z].*[a-z])/.test(c)) {
            b = 'Must contain at least 3 lower case characters!';
            a = !1
        }
        if (a && !/^(?=.*[A-Z])/.test(c)) {
            b = 'Must contain at least 1 upper case character!';
            a = !1
        }
        if (a && !/^(?=.*[0-9])/.test(c)) {
            b = 'Must contain at least 1 digit!';
            a = !1
        }
        if (a && !/^(?=.*[!@#\$%\^&\*])(?=.{8,})/.test(c)) {
            b = 'Must contain at least 1 symbol (!@#$%^&*)!';
            a = !1
        }
        this.wuisPasswordText = b;
        if (d) {
            if (!a) {
                d.setValue(b)
            } else {
                d.setValue('Valid password.')
            }
        }
        return a
    },
    wuisPasswordText: 'Invalid password. Must be min. 8 characters and must contain at least 1 upper case character, 3 lower case character,1 digit or digit character in the middle and 1 symbol character!'
});
Ext.define('TimesSquare.overrides.VTypes', {
    override: 'Ext.form.field.VTypes',
    searchLegDate: function(c, b) {
        var a;
        if (!b.sisterFieldName || !b.getSisterField) {
            return !0
        }
        a = b.getSisterField();
        if (!a || !a.getValue()) {
            return !0
        }
        return b.getValue() - a.getValue() <= 0
    },
    searchLegDateText: 'The date has to be equal or smaller than the second date!'
});
Ext.define('overrides.Ext.button.Button', {
    override: 'Ext.button.Button',
    getInspectionSelectorPieces: function() {
        var a = (arguments.callee.$previous || Ext.Component.prototype.getInspectionSelectorPieces).call(this),
            c = this.text,
            b = this.action;
        Ext.apply(a, {
            text: c,
            action: b
        });
        return a
    },
    buildInspectionSelectorChain: function(a) {
        if (a.id) {
            return (arguments.callee.$previous || Ext.Component.prototype.buildInspectionSelectorChain).apply(this, arguments)
        }
        return [a.xtype, a.inspect || a.action || a.text || a.ref || a.cls]
    }
});
Ext.define('TimesSquare.overrides.Controller', {
    override: 'Ext.app.Controller'
}, function() {
    Ext.Msg = Ext.apply(Ext.Msg || {}, {
        ERROR: 'x-message-box-error',
        WARNING: 'x-message-box-warning',
        INFO: 'x-message-box-info'
    })
});
Ext.define('TimesSquare.overrides.Rest', {
    override: 'Ext.data.proxy.Rest',
    buildRequest: function() {
        var a = (arguments.callee.$previous || Ext.data.proxy.Ajax.prototype.buildRequest).apply(this, arguments),
            b = a.getParams();
        if (a.getAction() === 'read' && !this.getAppendId()) {
            delete b[this.getIdParam()];
            a.setParams(b)
        }
        return a
    }
});
Ext.define('overrides.Ext.Component', {
    override: 'Ext.container.Viewport',
    skipInspection: function() {
        return !0
    }
});
Ext.define('TimesSquare.overrides.NumberField', {
    override: 'Ext.form.field.Number',
    hideTrigger: !0
});
Ext.define('TimesSquare.overrides.DateField', {
    override: 'Ext.form.field.Date',
    format: 'dMy',
    altFormats: 'dmy',
    width: 86,
    invalidText: '{0} is not a valid date - it must be in the format DDMonYY'
});
Ext.define('Alf.form.field.DateFieldOverride', {
    override: 'Ext.form.field.Date',
    getTimeField: function() {
        var a = this,
            b;
        if (a.timeFieldName && !a.timeField) {
            b = a.up('form') || a.up('panel');
            a.timeField = b && b.rendered && b.down('[name=' + a.timeFieldName + ']')
        }
        return a.timeField
    },
    mergeDateWithTime: function(a, b) {
        if (!a) {
            return null
        }
        if (!b) {
            return a
        }
        a.setHours(b.getHours());
        a.setMinutes(b.getMinutes());
        a.setSeconds(b.getSeconds());
        a.setMilliseconds(b.getMilliseconds());
        return a
    },
    setValue: function(a) {
        var e = a ? new Date(a) : a,
            f = (arguments.callee.$previous || Ext.form.field.Picker.prototype.setValue).apply(this, arguments),
            b = this.getTimeField();
        if (b) {
            var d = arguments.callee && arguments.callee.caller;
            var c = [Ext.form.field.Date.prototype.onSelect, Ext.form.field.Date.prototype.beforeBlur, Ext.form.field.Date.prototype.onBlur];
            if (!Ext.Array.contains(c, d)) {
                b.setValue(e)
            }
        }
        return f
    },
    parseDate: function() {
        var a = arguments.callee.$previous.apply(this, arguments),
            b = this.getTimeField();
        if (b) {
            a = this.mergeDateWithTime(a, b.getValue())
        }
        return a
    }
});
Ext.define('TimesSquare.overrides.ToolTip', {
    override: 'Ext.tip.ToolTip',
    dismissDelay: 0,
    manageHeight: !1,
    minWidth: 140,
    hasTarget: function() {
        var a = this.currentTarget,
            b = this._cachedTarget,
            c = this._altTarget;
        return a && a.dom || b && b.dom || c && c.dom
    },
    getAlignRegion: function() {
        var a = this,
            c = a.anchorEl,
            e = a.getAnchorAlign(),
            g, f, d, b = a.mouseOffset;
        if (!a.anchorSize) {
            c.addCls('x-tip-anchor-top');
            c.show();
            a.anchorSize = new Ext.util.Offset(c.getWidth(!1, !0), c.getHeight(!1, !0));
            c.removeCls('x-tip-anchor-top');
            c.hide()
        }
        if ((a.anchor || a.align) && a.anchorToTarget && !a.trackMouse) {
            if (a.currentTarget.dom) {
                d = a.currentTarget.getRegion()
            } else {
                if (a._cachedTarget) {
                    d = a._cachedTarget.getRegion()
                } else {
                    if (a._altTarget) {
                        d = a._altTarget.getRegion()
                    }
                }
            }
        } else {
            d = a.pointerEvent ? a.pointerEvent.getPoint().adjust(-Math.abs(b[1]), Math.abs(b[0]), Math.abs(b[1]), -Math.abs(b[0])) : new Ext.util.Point();
            if (!a.anchor) {
                g = !0;
                if (b[0] > 0) {
                    if (b[1] > 0) {
                        e = 'tl-br'
                    } else {
                        e = 'bl-tr'
                    }
                } else {
                    if (b[1] > 0) {
                        e = 'tr-bl'
                    } else {
                        e = 'br-tl'
                    }
                }
            }
        }
        f = {
            align: a.convertPositionSpec(e),
            axisLock: a.axisLock,
            target: d,
            overlap: g,
            offset: a.targetOffset,
            inside: a.constrainPosition ? a.constrainTo || Ext.getBody().getRegion().adjust(5, -5, -5, 5) : null
        };
        if (a.anchor) {
            f.anchorSize = a.anchorSize
        }
        return a.getRegion().alignTo(f)
    },
    showData: function(d, e, b) {
        var a = this,
            c = e.apply(d);
        a.update(c, !1, function() {
            a.fireEvent('contentloaded', a)
        });
        a._altTarget = b;
        if (!a.hidden && a.hasTarget()) {
            a.realignToTarget();
            a.removeCls('tip-hidden');
            a.removeCls('tooltip-under-loading')
        } else {
            a.addCls('tip-hidden')
        }
    },
    beforeDataFetch: function() {
        this.addCls('tooltip-under-loading')
    },
    setMaxHeight: function(a) {
        this.callParent(arguments);
        if (this.body) {
            this.body.setMaxHeight(a)
        }
    },
    afterRender: function() {
        (arguments.callee.$previous || Ext.tip.Tip.prototype.afterRender).apply(this, arguments);
        this.body.setMaxHeight(this.getMaxHeight())
    }
});
Ext.define('TimesSquare.overrides.TimeField', {
    override: 'Ext.form.field.Time',
    format: 'H:i',
    hideTrigger: !0,
    width: 40
});
Ext.define('TimesSquare.overrides.Table', {
    override: 'Ext.view.Table',
    onFocusEnter: function(c) {
        var a = this,
            g = c.fromComponent,
            f = a.getNavigationModel(),
            d, e, b;
        if (a.containsFocus) {
            return Ext.Component.prototype.onFocusEnter.call(a, c)
        }
        if (a.actionableMode) {
            if (a.actionPosition) {
                a.el.dom.setAttribute('tabIndex', '-1');
                a.cellFocused = !0;
                return
            }
            a.ownerGrid.setActionableMode(!1)
        }
        c = c.event;
        if (!a.cellFocused && a.all.getCount() && a.dataSource.getCount()) {
            b = c.getTarget();
            if (b === a.el.dom) {
                if (a.lastFocused === 'scrollbar') {
                    if (c.relatedTarget && !Ext.Object.isEmpty(c.relatedTarget)) {
                        c.relatedTarget.focus()
                    }
                    return
                }
                d = a.getDefaultFocusPosition(g);
                if (!d) {
                    c.stopEvent();
                    a.el.focus();
                    return
                }
                b = null
            } else {
                if (b === a.tabGuardEl) {
                    d = (new Ext.grid.CellContext(a)).setPosition(a.all.endIndex, a.getVisibleColumnManager().getColumns().length - 1);
                    b = null
                } else {
                    if (e = c.getTarget(a.getCellSelector())) {
                        if (b === e) {
                            d = (new Ext.grid.CellContext(a)).setPosition(a.getRecord(b), a.getHeaderByCell(e));
                            b = null
                        } else {
                            if (b && Ext.fly(b).isFocusable() && a.el.contains(b)) {
                                d = (new Ext.grid.CellContext(a)).setPosition(a.getRecord(b), a.getHeaderByCell(e))
                            }
                        }
                    }
                }
            }
        }
        if (d) {
            a.toggleChildrenTabbability(!1);
            if (b) {
                d.target = b;
                if (a.ownerGrid.setActionableMode(!0, d)) {
                    d = null
                }
            }
            if (d) {
                f.setPosition(d, null, c, null, !0)
            }
            a.cellFocused = a.el.contains(Ext.Element.getActiveElement());
            if (a.cellFocused) {
                a.el.dom.setAttribute('tabIndex', '-1')
            }
        }
        Ext.Component.prototype.onFocusEnter.call(a, c)
    }
});
Ext.define('Alf.meta.GridOverride', {
    override: 'Ext.grid.Panel',
    initComponent: function() {
        var a = this;
        if (a.metaColumns) {
            Alf.MetaManager.useColumnGenerator(a)
        }
        return (arguments.callee.$previous || Ext.panel.Table.prototype.initComponent).apply(this, arguments)
    }
});
Ext.define('overrides.Ext.grid.column.Column', {
    override: 'Ext.grid.column.Column',
    getInspectionSelectorPieces: function() {
        var a = (arguments.callee.$previous || Ext.grid.header.Container.prototype.getInspectionSelectorPieces).call(this),
            b = this.dataIndex;
        Ext.apply(a, {
            dataIndex: b
        });
        return a
    },
    buildInspectionSelectorChain: function(a) {
        if (a.id) {
            return (arguments.callee.$previous || Ext.grid.header.Container.prototype.buildInspectionSelectorChain).apply(this, arguments)
        }
        return [a.xtype, a.inspect || a.dataIndex || a.ref || a.cls]
    }
});
Ext.define('Ext.theme.classic.grid.column.Widget', {
    override: 'Ext.grid.column.Widget',
    config: {
        defaultWidgetUI: {
            button: 'grid-cell',
            splitbutton: 'grid-cell',
            cyclebutton: 'grid-cell',
            textfield: 'grid-cell',
            pickerfield: 'grid-cell',
            combobox: 'grid-cell',
            combo: 'grid-cell',
            datefield: 'grid-cell',
            timefield: 'grid-cell',
            filefield: 'grid-cell',
            fileuploadfield: 'grid-cell',
            sliderwidget: 'grid-cell'
        }
    }
});
Ext.define('TimesSquare.overrides.LockingView', {
    override: 'Ext.grid.locking.View',
    destroy: function() {
        var a = this,
            b;
        arguments.callee.$previous.apply(this, arguments);
        if (a.normalView && a.normalView.store) {
            a.unbindStoreListeners(a.normalView.store)
        }
        b = a.normalView ? a.getSelectionModel() : a.selModel;
        if (b && b.store) {
            b.unbindStoreListeners(b.store)
        }
        if (a.loadMask) {
            a.loadMask.destroy()
        }
    }
});
Ext.define('Ext.theme.classic.grid.plugin.Editing', {
    override: 'Ext.grid.plugin.Editing',
    defaultFieldUI: 'grid-cell'
});
Ext.define('Ext.theme.classic.toolbar.Breadcrumb', {
    override: 'Ext.toolbar.Breadcrumb',
    config: {
        buttonUI: 'default-toolbar'
    }
});
Ext.cmd.derive('Inspector.Controller', Ext.app.Controller, {
    target: null,
    enable: function() {
        this.setListeners(!0);
        this.setOverlay(!0)
    },
    disable: function() {
        this.setListeners(!1);
        this.setOverlay(!1)
    },
    setListeners: function(a) {
        var b = a ? 'on' : 'un';
        Ext.getBody()[b]('mousemove', this.onMouseMove, this)
    },
    setOverlay: function(c) {
        var a = this.overlay,
            b = this.highlightEl;
        if (!a) {
            this.overlay = a = Ext.getBody().appendChild(document.createElement('div'));
            this.highlightEl = b = a.appendChild(document.createElement('div'));
            a.addCls('inspector-overlay');
            b.addCls('inspector-highlight')
        }
        a[c ? 'show' : 'hide']()
    },
    onMouseMove: function(b, c) {
        var a = this.getDeepestTarget(c, b.getXY());
        if (a && (!this.target || this.target !== a)) {
            this.setTarget(a)
        }
    },
    highlight: function(a) {
        this.highlightEl.setBox(a.getBox())
    },
    setTarget: function(a) {
        this.target = a;
        this.publishTarget()
    },
    publishTarget: function() {
        this.highlight(this.target)
    },
    getDeepestTarget: function(f, d) {
        var e = new Ext.util.Point(d[0], d[1]),
            a = Ext.get(f),
            c, b;
        a = a.up('[data-inspectioncls]') || a;
        b = a.select('[data-inspectioncls]').elements.filter(function(a) {
            return e.isContainedBy(a)
        });
        if (a.getAttribute('data-inspectioncls')) {
            b.push(a)
        }
        c = b.map(function(c) {
            var b = Ext.get(c),
                a = b;
            b.depth = 0;
            do {
                a = a.parent('[data-inspectioncls]');
                if (a === b) {
                    a = null
                } else {
                    b.depth++
                }
            } while (a);
            return b
        }).sort(function(a, b) {
            return a.depth > b.depth ? -1 : 1
        })[0];
        return c
    }
}, 0, 0, 0, 0, 0, 0, [Inspector, 'Controller'], 0);
Ext.cmd.derive('Robo.data.Model', Ext.Mixin, {
    modelName: null,
    editMementoFix: null,
    mixinConfig: {
        before: {
            endEdit: 'onBeforeEndEdit'
        },
        after: {
            endEdit: 'onAfterEndEdit'
        }
    },
    onBeforeEndEdit: function(c, b) {
        var a = this.editMemento;
        if (a) {
            this.editMementoFix = a;
            if (!b) {
                b = this.getModifiedFieldNames(a.data)
            }
            if (!a.previousValues) {
                a.previousValues = {}
            }
            Ext.Array.each(b, function(d) {
                a.previousValues[d] = a.data[d]
            })
        }
    },
    onAfterEndEdit: function(b, a) {
        delete this.editMementoFix
    },
    getTitle: function() {
        return ''
    }
}, 0, 0, 0, 0, 0, 0, [Robo.data, 'Model'], 0);
Ext.cmd.derive('Robo.data.Store', Ext.Mixin, {
    undoRedoPostponed: null,
    inUndoRedoTransaction: !1,
    undoRedoEventBus: null,
    mixinConfig: {
        before: {
            constructor: 'constructor',
            destroy: 'destroy',
            fireEventArgs: 'fireEventArgs',
            setRoot: 'beforeSetRoot',
            fillNode: 'beforeFillNode'
        },
        after: {
            setRoot: 'afterSetRoot',
            fillNode: 'afterFillNode'
        }
    },
    constructor: function() {
        var a = this;
        a.undoRedoEventBus = new Ext.util.Observable()
    },
    destroy: function() {
        Ext.destroy(this.undoRedoEventBus)
    },
    fireEventArgs: function(b, a) {
        var c = this;
        if (!a.hasOwnProperty('$undoRedoEventBusFired')) {
            a.$undoRedoEventBusFired = {}
        }
        if (!a.$undoRedoEventBusFired[b]) {
            a.$undoRedoEventBusFired[b] = !0;
            c.undoRedoEventBus.hasListener(b) && c.undoRedoEventBus.fireEventArgs(b, a)
        }
    },
    isInUndoRedoTransaction: function() {
        return this.inUndoRedoTransaction
    },
    onUndoRedoTransactionStart: function(b, a) {
        this.inUndoRedoTransaction = !0
    },
    onUndoRedoTransactionEnd: function(b, a) {
        this.inUndoRedoTransaction = !1
    },
    isUndoingOrRedoing: function() {
        return !!this.undoRedoPostponed
    },
    beforeUndoRedo: function(a) {
        this.undoRedoPostponed = []
    },
    afterUndoRedo: function(b) {
        var a = this;
        if (a.undoRedoPostponed) {
            Ext.Array.forEach(a.undoRedoPostponed, function(a) {
                a()
            })
        }
        a.undoRedoPostponed = null
    },
    postponeAfterUndoRedo: function(a) {
        this.undoRedoPostponed.push(a)
    },
    beforeSetRoot: function() {
        this.__isSettingRoot = !0
    },
    afterSetRoot: function() {
        this.__isSettingRoot = !1;
        if (!this.getRoot()) {
            this.fireEvent('clear', this)
        }
    },
    beforeFillNode: function(a) {
        if (a.isRoot()) {
            this.beforeSetRoot()
        }
    },
    afterFillNode: function(a) {
        if (a.isRoot()) {
            this.afterSetRoot()
        }
    },
    isRootSettingOrLoading: function() {
        return this.isLoading() || this.isTreeStore && this.__isSettingRoot
    }
}, 1, 0, 0, 0, 0, 0, [Robo.data, 'Store'], 0);
Ext.cmd.derive('Sch.crud.AbstractManager', Ext.Base, {
    isCrudManager: !0,
    revision: null,
    stores: null,
    storeIdProperty: 'storeId',
    filterParam: 'filter',
    storesIndex: null,
    activeRequests: null,
    delayedSyncs: null,
    transport: null,
    trackResponseType: !1,
    phantomIdField: '$PhantomId',
    autoLoad: !1,
    autoSyncTimeout: 100,
    autoSync: !1,
    resetIdsBeforeSync: !0,
    syncApplySequence: null,
    writeAllFields: !1,
    destroyed: !1,
    ignoreUpdates: 0,
    loaded: !1,
    createMissingRecords: !1,
    autoSyncTimerId: null,
    applyingLoadResponse: !1,
    applyingSyncResponse: !1,
    constructor: function(a) {
        a = a || {};
        this.mixins.observable.constructor.call(this, a);
        this.activeRequests = {};
        this.delayedSyncs = [];
        this.transport = a.transport || this.transport || {};
        var c = a.stores || this.stores;
        this.stores = [];
        this.addStore(c);
        var b = a.syncApplySequence || this.syncApplySequence;
        if (b) {
            this.syncApplySequence = null;
            this.addStoreToApplySequence(b)
        }
        if (this.autoLoad) {
            this.load()
        }
    },
    updateStoreIndex: function() {
        var b = {};
        for (var a = 0, d = this.stores.length; a < d; a++) {
            var c = this.stores[a];
            if (c.storeId) {
                b[c.storeId] = this.stores[a]
            }
        }
        this.storesIndex = b
    },
    getStoreDescriptor: function(a) {
        if (!a) {
            return
        }
        if (a.isStore) {
            for (var b = 0, c = this.stores.length; b < c; b++) {
                if (this.stores[b].store === a) {
                    return this.stores[b]
                }
            }
        } else {
            if (typeof a == 'object') {
                return this.storesIndex[a.storeId]
            } else {
                return this.storesIndex[a] || this.getStoreDescriptor(Ext.data.StoreManager.get(a))
            }
        }
    },
    getStore: function(b) {
        var a = this.getStoreDescriptor(b);
        return a && a.store
    },
    forEachStore: function(c, d) {
        if (!c) {
            return
        }
        var b = this.stores;
        for (var a = 0, e = b.length; a < e; a++) {
            if (c.call(d || this, b[a].store, b[a].storeId, b[a]) === !1) {
                break
            }
        }
    },
    addStore: function(c, i, b) {
        if (!c) {
            return
        }
        if (!Ext.isArray(c)) {
            c = [c]
        }
        var g = [];
        for (var h = 0, k = c.length; h < k; h++) {
            var a = c[h];
            if (a.isStore) {
                a = {
                    store: a
                }
            } else {
                if (typeof a == 'object') {
                    if (a.stores) {
                        if (!Ext.isArray(a.stores)) {
                            a.stores = [a.stores]
                        }
                        for (var d = 0, l = a.stores.length; d < l; d++) {
                            var f = a.stores[d],
                                e = f;
                            if ('string' === typeof f) {
                                e = {
                                    storeId: f
                                }
                            }
                            e.masterStoreInfo = a;
                            a.stores[d] = e
                        }
                    }
                } else {
                    a = {
                        store: Ext.data.StoreManager.get(a)
                    }
                }
            }
            g.push(this.fillStoreDescriptor(a));
            if (a.store.setCrudManager) {
                a.store.setCrudManager(this)
            } else {
                a.store.crudManager = this
            }
            if (a.store.isTreeStore) {
                a.store.setProxy({
                    type: 'memory'
                })
            }
            a.store.setAsynchronousLoad(!1);
            this.bindStoreListeners(a.store)
        }
        if (typeof i === 'undefined') {
            this.stores.push.apply(this.stores, g)
        } else {
            var j = i;
            if (b) {
                if (b.isStore || typeof b !== 'object') {
                    b = this.getStoreDescriptor(b)
                }
                j += Ext.Array.indexOf(this.stores, b)
            }
            this.stores.splice.apply(this.stores, [].concat([j, 0], g))
        }
        this.updateStoreIndex()
    },
    bindStoreListeners: function(b, c) {
        var a = {
            update: this.onStoreUpdate,
            clear: this.onStoreChange,
            scope: this
        };
        if (b.isTreeStore) {
            Ext.apply(a, {
                nodeappend: this.onTreeStoreInsertOrAppend,
                nodeinsert: this.onTreeStoreInsertOrAppend,
                noderemove: this.onNodeRemove
            })
        } else {
            Ext.apply(a, {
                add: this.onStoreChange,
                remove: this.onStoreChange
            })
        }
        if (c) {
            this.mun(b, a)
        } else {
            this.mon(b, a)
        }
    },
    unbindStoreListeners: function(a) {
        this.bindStoreListeners(a, !0)
    },
    fillStoreDescriptor: function(c) {
        var b = c.store,
            d = b.storeIdProperty || this.storeIdProperty,
            a = b.getModel && b.getModel() || b.model;
        a = a && a.prototype;
        Ext.applyIf(c, {
            storeId: b[d],
            phantomIdField: a && a.phantomIdField,
            idProperty: a && a.idProperty,
            writeAllFields: b.writeAllFields
        });
        return c
    },
    removeStore: function(b) {
        for (var c = 0, d = this.stores.length; c < d; c++) {
            var a = this.stores[c];
            if (a === b || a.store === b || a.storeId === b) {
                this.unbindStoreListeners(a.store);
                delete this.storesIndex[a.storeId];
                this.stores.splice(c, 1);
                if (this.syncApplySequence) {
                    this.removeStoreFromApplySequence(b)
                }
                break
            }
        }
    },
    addStoreToApplySequence: function(b, e, a) {
        if (!b) {
            return
        }
        if (!Ext.isArray(b)) {
            b = [b]
        }
        var c = [];
        for (var d = 0, h = b.length; d < h; d++) {
            var g = this.getStoreDescriptor(b[d]);
            if (g) {
                c.push(g)
            }
        }
        if (!this.syncApplySequence) {
            this.syncApplySequence = []
        }
        if (typeof e === 'undefined') {
            this.syncApplySequence.push.apply(this.syncApplySequence, c)
        } else {
            var f = e;
            if (a) {
                if (a.isStore || typeof a !== 'object') {
                    a = this.getStoreDescriptor(a)
                }
                f += Ext.Array.indexOf(this.syncApplySequence, a)
            }
            this.syncApplySequence.splice.apply(this.syncApplySequence, [].concat([f, 0], c))
        }
    },
    removeStoreFromApplySequence: function(b) {
        for (var a = 0, d = this.syncApplySequence.length; a < d; a++) {
            var c = this.syncApplySequence[a];
            if (c === b || c.store === b || c.storeId === b) {
                this.syncApplySequence.splice(a, 1);
                break
            }
        }
    },
    onNodeRemove: function(a) {
        var b = a && a.getTreeStore();
        b && b.on('endupdate', this.onStoreChange, this, {
            single: !0
        })
    },
    onStoreUpdate: function(c, b, e, a) {
        if (!c.isTreeStore || b !== c.getRoot()) {
            var d = a && a.length === 1 && b.getField(a[0]) && !b.getField(a[0]).persist;
            if (!d) {
                this.onStoreChange()
            }
        }
    },
    onTreeStoreInsertOrAppend: function(b, a) {
        if (!a.isRoot()) {
            this.onStoreChange()
        }
    },
    suspendChangesTracking: function() {
        this.ignoreUpdates++
    },
    resumeChangesTracking: function(a) {
        this.ignoreUpdates--;
        a && this.onStoreChange()
    },
    onStoreChange: function() {
        if (this.ignoreUpdates) {
            return
        }
        var a = this;
        if (this.hasChanges()) {
            this.fireEvent('haschanges', this);
            if (this.autoSync) {
                if (!this.autoSyncTimerId) {
                    this.autoSyncTimerId = setTimeout(function() {
                        a.autoSyncTimerId = null;
                        a.sync()
                    }, this.autoSyncTimeout)
                }
            }
        } else {
            this.fireEvent('nochanges', this)
        }
    },
    hasChanges: function(c) {
        var a;
        if (c) {
            a = this.getStore(c);
            if (!a) {
                return !1
            }
            return this.isStoreDirty(a)
        }
        for (var b = 0, d = this.stores.length; b < d; b++) {
            if (this.isStoreDirty(this.stores[b].store)) {
                return !0
            }
        }
        return !1
    },
    isStoreDirty: function(b) {
        if (b.getRemovedRecords().length) {
            return !0
        }
        if (b.isTreeStore) {
            for (var f in b.byIdMap) {
                var a = b.byIdMap[f];
                if (a.dirty === !0 && (!a.get('root') || Ext.Object.getKeys(a.modified).length !== 1 || !('expanded' in a.modified))) {
                    return !0
                } else {
                    if (!a.get('root') && a.phantom && a.isValid()) {
                        return !0
                    }
                }
            }
        } else {
            var d = b.getData().items;
            for (var c = 0, e = d.length; c < e; c++) {
                if (d[c].dirty || d[c].phantom) {
                    return !0
                }
            }
        }
        return !1
    },
    getLoadPackage: function(i) {
        var k = {
            type: 'load',
            requestId: this.getRequestId(),
            stores: []
        };
        var d = this.stores,
            f = k.stores;
        for (var c = 0, l = d.length; c < l; c++) {
            var a = d[c],
                e = a.filterParam || a.store.filterParam || this.filterParam,
                b = i && i[a.storeId],
                g = a.pageSize || a.store.pageSize;
            if (a.store.remoteFilter && e) {
                b = b || {};
                var h = [];
                a.store.getFilters().each(function(a) {
                    h.push(a.serialize())
                });
                b[e] = h
            }
            if (b || g) {
                var j = Ext.apply({
                    storeId: a.storeId,
                    page: 1,
                    pageSize: g
                }, b);
                d[c].currentPage = j.page;
                f.push(j)
            } else {
                f.push(a.storeId)
            }
        }
        return k
    },
    prepareAdded: function(j, f, i) {
        var h = [];
        for (var e = 0, l = j.length; e < l; e++) {
            var b = j[e],
                c = {},
                g = b.getFields();
            if (!c.hasOwnProperty(f)) {
                c[f] = b.getId()
            }
            for (var d = 0, k = g.length; d < k; d++) {
                var a = g[d];
                if (a) {
                    if (a.persist && (b.data.hasOwnProperty(a.name) || a.critical)) {
                        if (a.serialize) {
                            c[a.name] = a.serialize(b.data[a.name], b)
                        } else {
                            c[a.name] = b.data[a.name]
                        }
                    }
                }
            }
            if (this.resetIdsBeforeSync) {
                delete c[b.idProperty]
            }
            if (i) {
                this.processSubStores(b, c, i)
            }
            h.push(c)
        }
        return h
    },
    prepareUpdated: function(k, j, h) {
        var i = [],
            l = h.writeAllFields || h.writeAllFields !== !1 && this.writeAllFields,
            b, a;
        for (var e = 0, m = k.length; e < m; e++) {
            var c = k[e],
                d;
            if (l) {
                b = c.getData();
                b[c.idProperty] = c.getId();
                for (d in b) {
                    a = c.getField(d);
                    if (!a || !a.persist && !a.critical) {
                        delete b[d]
                    } else {
                        if (a.serialize) {
                            b[d] = a.serialize(b[d], c)
                        } else {
                            b[d] = c.get(d)
                        }
                    }
                }
            } else {
                b = c.getChanges();
                b[c.idProperty] = c.getId();
                for (d in b) {
                    a = c.getField(d);
                    if (!a || !a.persist) {
                        delete b[d]
                    } else {
                        if (a.serialize) {
                            b[d] = a.serialize(b[d], c)
                        } else {
                            b[d] = c.get(d)
                        }
                    }
                }
                var g = c.getCriticalFields();
                for (var f = 0; f < g.length; f++) {
                    a = g[f];
                    if (a.serialize) {
                        b[a.getName()] = a.serialize(c.get(a.getName()), c)
                    } else {
                        b[a.getName()] = c.get(a.getName())
                    }
                }
            }
            if (j) {
                this.processSubStores(c, b, j)
            }
            i.push(b)
        }
        return i
    },
    prepareRemoved: function(c) {
        var d = [],
            b;
        for (var a = 0, e = c.length; a < e; a++) {
            b = {};
            b[c[a].idProperty] = c[a].getId();
            d.push(b)
        }
        return d
    },
    processSubStores: function(g, d, c) {
        for (var b = 0, h = c.length; b < h; b++) {
            var a = c[b].storeId,
                f = g.get(a);
            if (f) {
                var e = this.getStoreChanges(Ext.apply({
                    store: f
                }, c[b]));
                if (e) {
                    d[a] = Ext.apply(e, {
                        $store: !0
                    })
                } else {
                    delete d[a]
                }
            } else {
                delete d[a]
            }
        }
    },
    getStoreChanges: function(e, f) {
        f = f || e.phantomIdField || this.phantomIdField;
        var g = e.store,
            c = g.getNewRecords(),
            b = g.getUpdatedRecords(),
            a = g.getRemovedRecords(),
            h = e.stores;
        var d;
        if (c.length) {
            c = this.prepareAdded(c, f, h)
        }
        if (b.length) {
            b = this.prepareUpdated(b, h, e)
        }
        if (a.length) {
            a = this.prepareRemoved(a)
        }
        if (c.length || b.length || a.length) {
            d = {};
            if (c.length) {
                d.added = c
            }
            if (b.length) {
                d.updated = b
            }
            if (a.length) {
                d.removed = a
            }
        }
        return d
    },
    getChangeSetPackage: function() {
        var f = {
            type: 'sync',
            requestId: this.getRequestId(),
            revision: this.revision
        };
        var d = this.stores,
            e = 0;
        for (var b = 0, i = d.length; b < i; b++) {
            var a = d[b],
                g = a.phantomIdField || this.phantomIdField,
                h = a.storeId;
            var c = this.getStoreChanges(a, g);
            if (c) {
                e++;
                f[h] = c
            }
        }
        return e ? f : null
    },
    getSubStoresData: function(b, d, f, i) {
        if (!b) {
            return
        }
        var c = [];
        var g = function(a, g) {
            for (var e = 0, j = g.length; e < j; e++) {
                var h = g[e].storeId;
                if (a[h]) {
                    c.push({
                        id: a[f],
                        storeDesc: g[e],
                        data: a[h]
                    });
                    delete a[h]
                }
            }
        };
        var a = 0,
            h = b.length;
        if (i) {
            for (; a < h; a++) {
                g(b[a], d);
                var e = this.getSubStoresData(b[a].children, d, f, !0);
                if (e) {
                    c = c.concat(e)
                }
            }
        } else {
            for (; a < h; a++) {
                g(b[a], d)
            }
        }
        return c
    },
    loadDataToTreeStore: function(a, c, f, e) {
        var d = c && c.rows;
        var b = a.getRoot();
        if (b) {
            b.modified = null;
            b.reject()
        }
        a.proxy.data = d;
        a.load()
    },
    loadDataToFlatStore: function(a, b, c, e) {
        var f = b && b.rows;
        a.totalCount = b.total;
        a.currentPage = e.currentPage;
        var d = Ext.Array.map(f, function(d) {
            return new a.model(d)
        });
        a.loadData(d, c && c.append || b.append);
        a.fireEvent('load', a, d, !0)
    },
    loadDataToStore: function(c, b, n) {
        var a = c.store,
            h = a.getModel(),
            j = c.stores,
            l = c.idProperty || h && h.prototype && h.prototype.idProperty || 'id',
            g = a.isTreeStore,
            e;
        a.__loading = !0;
        var k = b && b.rows,
            f = b && b.metaData;
        if (f) {
            if (a.applyMetaData) {
                a.applyMetaData(f)
            } else {
                a.metaData = f
            }
        }
        if (k) {
            if (j) {
                e = this.getSubStoresData(k, j, l, g)
            }
            var m = g ? this.loadDataToTreeStore : this.loadDataToFlatStore;
            m.call(this, a, b, n, c);
            if (e) {
                for (var i = 0, o = e.length; i < o; i++) {
                    var d = e[i];
                    this.loadDataToStore(Ext.apply({
                        store: a[g ? 'getNodeById' : 'getById'](d.id).get(d.storeDesc.storeId)
                    }, d.storeDesc), d.data)
                }
            }
        }
        a.__loading = !1
    },
    loadData: function(f, a) {
        a = a || {};
        this.suspendChangesTracking();
        for (var b = 0, g = this.stores.length; b < g; b++) {
            var c = this.stores[b],
                d = c.storeId,
                e = f[d];
            if (e) {
                this.loadDataToStore(c, e, a[d])
            }
        }
        this.resumeChangesTracking()
    },
    applyChangesToRecord: function(b, c, e, h) {
        var l = b.data,
            j = {},
            g = !1,
            a;
        if (e) {
            for (var f = 0, m = e.length; f < m; f++) {
                a = e[f].storeId;
                if (c.hasOwnProperty(a)) {
                    j[a] = !0;
                    var i = b.get(a);
                    if (i) {
                        this.applyChangesToStore(Ext.apply({
                            store: i
                        }, e[f]), c[a])
                    } else {
                        Ext.log("Can't find store for the response sub-package")
                    }
                }
            }
        }
        for (a in c) {
            if (c.hasOwnProperty(a) && !j[a]) {
                var d = c[a];
                if (!b.isEqual(l[a], d)) {
                    if (!g) {
                        g = !0;
                        b.beginEdit()
                    }
                    if (a === b.idProperty) {
                        b.setId(d)
                    } else {
                        if (a == 'parentId' && h.isTreeStore) {
                            var k = d && h.getNodeById(d) || h.getRoot();
                            k.appendChild(b)
                        } else {
                            if (b.getField(a)) {
                                b.set(a, d)
                            }
                        }
                    }
                }
            }
        }
        if (g) {
            b.endEdit()
        }
        b.commit()
    },
    applyRemovals: function(f, h, d) {
        var m = d.idProperty,
            a = f.isTreeStore ? f.removedNodes : f.removed,
            l = d.findByIdFn,
            k = d.removeRecordFn,
            c = 0;
        for (var g = 0, o = h.length; g < o; g++) {
            var i = !1;
            var j = h[g][m];
            for (var b = 0, n = a.length; b < n; b++) {
                if (a[b].getId() == j) {
                    a.splice(b, 1);
                    i = !0;
                    c++;
                    break
                }
            }
            if (!i) {
                var e = l(j);
                if (e) {
                    this.suspendChangesTracking();
                    k(e);
                    Ext.Array.remove(a, e);
                    c++;
                    this.resumeChangesTracking()
                } else {
                    Ext.log("Can't find record to remove from the response package")
                }
            }
        }
        return c
    },
    getApplyChangesToStoreHelpers: function(a) {
        if (a.isTreeStore) {
            var b = function(b) {
                return a.getNodeById(b)
            };
            return {
                findByPhantomFn: b,
                findByIdFn: b,
                addRecordFn: function(b) {
                    var c = b.parentId && a.getNodeById(b.parentId) || a.getRoot();
                    return c.appendChild(b)
                },
                removeRecordFn: function(b) {
                    return b.parentNode.removeChild(b)
                }
            }
        } else {
            return {
                findByPhantomFn: function(b) {
                    return a.data.getByKey(b)
                },
                findByIdFn: function(b) {
                    return a.getById(b)
                },
                addRecordFn: function(b) {
                    return a.add(b)[0]
                },
                removeRecordFn: function(b) {
                    return a.remove(b)
                }
            }
        }
    },
    applyChangesToStore: function(g, n) {
        var j = this,
            r = g.phantomIdField || j.phantomIdField,
            e = g.idProperty,
            a = g.store;
        if (!e) {
            var c = a.getModel && a.getModel() || a.model;
            c = c && c.prototype;
            e = c && c.idProperty || 'id'
        }
        var h = j.getApplyChangesToStoreHelpers(a),
            q = h.findByPhantomFn,
            o = h.findByIdFn,
            t = h.addRecordFn,
            s = h.removeRecordFn,
            k = n.rows,
            m = n.removed,
            p = 0,
            b;
        if (m) {
            p = j.applyRemovals(a, m, {
                idProperty: e,
                findByIdFn: o,
                removeRecordFn: s
            })
        }
        if (k) {
            var d, i, f, u = g.stores;
            for (var l = 0, v = k.length; l < v; l++) {
                d = k[l];
                f = d[r];
                i = d[e];
                b = null;
                if (f != null && f !== '') {
                    b = q(f)
                } else {
                    if (i != null && i !== '') {
                        b = o(i)
                    }
                }
                if (b) {
                    j.applyChangesToRecord(b, d, u, a)
                } else {
                    b = t(d);
                    b.commit()
                }
            }
        }
        if (p > 0) {
            a.fireEvent('datachanged', a);
            a.fireEvent('commit', a)
        }
    },
    applySyncResponse: function(d) {
        this.applyingSyncResponse = !0;
        this.suspendChangesTracking();
        var b = this.syncApplySequence || this.stores;
        for (var a = 0, e = b.length; a < e; a++) {
            var c = d[b[a].storeId];
            if (c) {
                this.applyChangesToStore(b[a], c)
            }
        }
        this.applyingSyncResponse = !1;
        this.resumeChangesTracking()
    },
    applyLoadResponse: function(a, b) {
        this.applyingLoadResponse = !0;
        this.loadData(a, b);
        this.applyingLoadResponse = !1
    },
    applyResponse: function(a, b, c) {
        if (this.trackResponseType) {
            a = b.type || a
        }
        switch (a) {
            case 'load':
                this.applyLoadResponse(b, c);
                break;
            case 'sync':
                this.applySyncResponse(b);
                break;
        }
    },
    getRequestId: function() {
        return Ext.Date.now()
    },
    onResponse: function(b, d, c, e) {
        this.activeRequests[b] = null;
        var a = this.decode(d);
        if (!a || !a.success) {
            this.fireEvent('requestfail', this, b, a, c);
            this.fireEvent(b + 'fail', this, a, c, e);
            if ('string' != typeof d) {
                d = '' + d
            }
            this.warn('CrudManager: ' + b + ' failed, please inspect the server response', d.length < 1024 * 1024 && d || '')
        } else {
            this.fireEvent('requestsuccess', this, b, a, c);
            this.fireEvent(b + 'success', this, a, c, e);
            if (this.fireEvent('beforeresponseapply', this, b, a) !== !1 && this.fireEvent('before' + b + 'apply', this, a, e) !== !1) {
                this.revision = a.revision;
                this.applyResponse(b, a, e);
                this.fireEvent('requestdone', this, b, a, c);
                this.fireEvent(b, this, a, c, e);
                if (b === 'load' || !this.hasChanges()) {
                    this.fireEvent('nochanges', this)
                }
            }
        }
        return a
    },
    onLoad: function(b, a, c) {
        this.loaded = !0;
        return this.onResponse('load', b, a, c)
    },
    onSync: function(b, a, c) {
        return this.onResponse('sync', b, a, c)
    },
    load: function(c, b, a) {
        var d;
        if (typeof c === 'object') {
            d = c;
            c = b;
            b = a;
            a = arguments[3]
        }
        var e = this.getLoadPackage(d);
        if (this.fireEvent('beforeload', this, e) !== !1) {
            a = a || this;
            if (this.activeRequests.load) {
                this.cancelRequest(this.activeRequests.load.desc);
                this.fireEvent('loadcanceled', this, e)
            }
            this.activeRequests.load = {
                id: e.requestId
            };
            this.activeRequests.load.desc = this.sendRequest({
                data: this.encode(e),
                type: 'load',
                success: function(f, g) {
                    var e = this.onLoad(f, g, d);
                    if (b && (!e || !e.success)) {
                        b.call(a, e, f, d)
                    } else {
                        if (c) {
                            c.call(a, e, f, d)
                        }
                    }
                },
                failure: function(e, d) {
                    this.onLoad(e, d);
                    if (b) {
                        b.apply(a, arguments)
                    }
                },
                scope: this
            })
        } else {
            this.fireEvent('loadcanceled', this, e)
        }
    },
    sync: function(c, d, a) {
        if (this.activeRequests.sync) {
            this.delayedSyncs.push(arguments);
            this.fireEvent('syncdelayed', this, arguments);
            return
        }
        var b = this.getChangeSetPackage();
        a = a || this;
        if (!b) {
            if (c) {
                c.call(a, null, null)
            }
            return
        }
        if (this.fireEvent('beforesync', this, b) === !1) {
            this.fireEvent('synccanceled', this, b);
            return
        }
        this.activeRequests.sync = {
            id: b.requestId
        };
        this.activeRequests.sync.desc = this.sendRequest({
            data: this.encode(b),
            type: 'sync',
            success: function(e, g) {
                var f = this.activeRequests.sync;
                var b = this.onSync(e, g);
                if (d && (!b || !b.success)) {
                    d.call(a, b, e, f)
                } else {
                    if (c) {
                        c.call(a, b, e, f)
                    }
                }
                this.runDelayedSync()
            },
            failure: function(b, e) {
                this.onSync(b, e);
                if (d) {
                    d.apply(a, arguments)
                }
                this.runDelayedSync()
            },
            scope: this
        })
    },
    runDelayedSync: function() {
        var a = this.delayedSyncs.shift();
        if (!a) {
            return
        }
        this.sync.apply(this, a)
    },
    commit: function() {
        for (var b = 0, c = this.stores.length; b < c; b++) {
            var a = this.stores[b].store;
            a.suspendEvents(!0);
            a.commitChanges();
            a.resumeEvents()
        }
    },
    reject: function() {
        for (var a = 0, b = this.stores.length; a < b; a++) {
            this.stores[a].store.rejectChanges()
        }
    },
    warn: function() {
        if ('console' in window) {
            var a = console;
            a.log && a.log.apply && a.log.apply(a, arguments)
        }
    },
    isLoading: function() {
        return Boolean(this.activeRequests.load || this.applyingLoadResponse)
    },
    destroy: function() {
        var a = this;
        if (a.destroyed) {
            return
        }
        a.activeRequests.load && a.cancelRequest(a.activeRequests.load.desc);
        a.activeRequests.sync && a.cancelRequest(a.activeRequests.sync.desc);
        while (a.stores.length > 0) {
            a.removeStore(a.stores[0])
        }
        clearTimeout(a.autoSyncTimerId);
        a.destroyed = !0
    }
}, 1, 0, 0, 0, 0, [
    ['observable', Ext.util.Observable]
], [Sch.crud, 'AbstractManager'], 0);
Ext.cmd.derive('Sch.column.Day', Ext.grid.column.Column, {
    align: 'center',
    start: null,
    end: null,
    draggable: !1,
    groupable: !1,
    hideable: !1,
    sortable: !1,
    menuDisabled: !0,
    enableLocking: !1,
    lockable: !1,
    flex: 1,
    resizable: !1,
    cellFocusable: !1,
    tdCls: 'sch-timetd',
    initComponent: function() {
        var a = new Date();
        this.addCls('sch-daycolumn-header');
        if (this.isWeekend()) {
            this.addCls('sch-daycolumn-header-weekend');
            this.tdCls = (this.tdCls || '') + ' sch-daycolumn-weekend'
        }
        if (this.start.getDate() === a.getDate() && this.start.getMonth() === a.getMonth() && this.start.getYear() === a.getYear()) {
            this.addCls('sch-daycolumn-header-today');
            this.tdCls = (this.tdCls || '') + ' sch-daycolumn-today'
        }
        Ext.grid.column.Column.prototype.initComponent.apply(this, arguments)
    },
    isWeekend: function() {
        var a = this.start.getDay();
        return a === 6 || a === 0
    }
}, 0, ['weekview-day'], ['component', 'box', 'container', 'headercontainer', 'gridcolumn', 'weekview-day'], {
    'component': !0,
    'box': !0,
    'container': !0,
    'headercontainer': !0,
    'gridcolumn': !0,
    'weekview-day': !0
}, ['widget.weekview-day'], 0, [Sch.column, 'Day'], 0);
Ext.cmd.derive('Sch.column.Resource', Ext.grid.Column, {
    align: 'center',
    menuDisabled: !0,
    hideable: !1,
    sortable: !1,
    locked: !1,
    lockable: !1,
    draggable: !1,
    enableLocking: !1,
    cellFocusable: !1,
    model: null,
    initComponent: function() {
        this.tdCls = (this.tdCls || '') + ' sch-timetd';
        this.cls = (this.cls || '') + ' sch-resourcecolumn-header';
        Ext.grid.column.Column.prototype.initComponent.apply(this, arguments)
    }
}, 0, ['resourcecolumn'], ['component', 'box', 'container', 'headercontainer', 'gridcolumn', 'resourcecolumn'], {
    'component': !0,
    'box': !0,
    'container': !0,
    'headercontainer': !0,
    'gridcolumn': !0,
    'resourcecolumn': !0
}, ['widget.resourcecolumn'], 0, [Sch.column, 'Resource'], 0);
Ext.cmd.derive('Sch.locale.Locale', Ext.Base, {
    l10n: null,
    legacyMode: !0,
    localeName: null,
    namespaceId: null,
    constructor: function() {
        if (!Sch.locale.Active) {
            Sch.locale.Active = {};
            this.bindRequire()
        }
        var b = this.self.getName().split('.');
        var c = this.localeName = b.pop();
        this.namespaceId = b.join('.');
        var a = Sch.locale.Active[this.namespaceId];
        if (!(c == 'En' && a && a.localeName != 'En')) {
            this.apply()
        }
    },
    bindRequire: function() {
        var a = Ext.ClassManager.triggerCreated;
        Ext.ClassManager.triggerCreated = function(b) {
            a.apply(this, arguments);
            if (b) {
                var d = Ext.ClassManager.get(b);
                for (var c in Sch.locale.Active) {
                    Sch.locale.Active[c].apply(d)
                }
            }
        }
    },
    applyToClass: function(d, a) {
        var e = this,
            g = e.self.getName();
        a = a || Ext.ClassManager.get(d);
        if (a && a.activeLocaleId !== g) {
            var c = e.l10n[d];
            if (typeof c === 'function') {
                c(d)
            } else {
                if (a.singleton) {
                    a.l10n = Ext.apply({}, c, a.prototype && a.prototype.l10n)
                } else {
                    Ext.override(a, {
                        l10n: c
                    })
                }
            }
            if (e.legacyMode) {
                var b;
                if (a.prototype) {
                    b = a.prototype
                } else {
                    if (a.singleton) {
                        b = a
                    }
                }
                if (b && b.legacyMode) {
                    if (b.legacyHolderProp) {
                        if (!b[b.legacyHolderProp]) {
                            b[b.legacyHolderProp] = {}
                        }
                        b = b[b.legacyHolderProp]
                    }
                    for (var f in c) {
                        if (typeof b[f] !== 'function') {
                            b[f] = c[f]
                        }
                    }
                }
            }
            a.activeLocaleId = g;
            if (a.onLocalized) {
                a.onLocalized()
            }
        }
    },
    apply: function(a) {
        if (this.l10n) {
            var e = this;
            if (a) {
                if (!Ext.isArray(a)) {
                    a = [a]
                }
                var c, d;
                for (var b = 0, g = a.length; b < g; b++) {
                    if (Ext.isObject(a[b])) {
                        if (a[b].singleton) {
                            d = a[b];
                            c = Ext.getClassName(Ext.getClass(d))
                        } else {
                            d = Ext.getClass(a[b]);
                            c = Ext.getClassName(d)
                        }
                    } else {
                        d = null;
                        c = 'string' === typeof a[b] ? a[b] : Ext.getClassName(a[b])
                    }
                    if (c) {
                        if (c in this.l10n) {
                            e.applyToClass(c, d)
                        }
                    }
                }
            } else {
                Sch.locale.Active[this.namespaceId] = this;
                for (var f in this.l10n) {
                    e.applyToClass(f)
                }
            }
        }
    }
}, 1, 0, 0, 0, 0, 0, [Sch.locale, 'Locale'], 0);
Ext.cmd.derive('Sch.locale.En', Sch.locale.Locale, {
    singleton: !0,
    l10n: {
        'Sch.util.Date': {
            unitNames: {
                YEAR: {
                    single: 'year',
                    plural: 'years',
                    abbrev: 'yr'
                },
                QUARTER: {
                    single: 'quarter',
                    plural: 'quarters',
                    abbrev: 'q'
                },
                MONTH: {
                    single: 'month',
                    plural: 'months',
                    abbrev: 'mon'
                },
                WEEK: {
                    single: 'week',
                    plural: 'weeks',
                    abbrev: 'w'
                },
                DAY: {
                    single: 'day',
                    plural: 'days',
                    abbrev: 'd'
                },
                HOUR: {
                    single: 'hour',
                    plural: 'hours',
                    abbrev: 'h'
                },
                MINUTE: {
                    single: 'minute',
                    plural: 'minutes',
                    abbrev: 'min'
                },
                SECOND: {
                    single: 'second',
                    plural: 'seconds',
                    abbrev: 's'
                },
                MILLI: {
                    single: 'ms',
                    plural: 'ms',
                    abbrev: 'ms'
                }
            }
        },
        'Sch.panel.TimelineGridPanel': {
            weekStartDay: 1,
            loadingText: 'Loading, please wait...',
            savingText: 'Saving changes, please wait...'
        },
        'Sch.panel.TimelineTreePanel': {
            weekStartDay: 1,
            loadingText: 'Loading, please wait...',
            savingText: 'Saving changes, please wait...'
        },
        'Sch.mixin.SchedulerView': {
            loadingText: 'Loading events...'
        },
        'Sch.plugin.CurrentTimeLine': {
            tooltipText: 'Current time'
        },
        'Sch.widget.EventEditor': {
            saveText: 'Save',
            deleteText: 'Delete',
            cancelText: 'Cancel',
            nameText: 'Name',
            allDayText: 'All day',
            startDateText: 'Start',
            endDateText: 'End',
            resourceText: 'Resource'
        },
        'Sch.plugin.SimpleEditor': {
            newEventText: 'New booking...'
        },
        'Sch.widget.ExportDialogForm': {
            formatFieldLabel: 'Paper format',
            orientationFieldLabel: 'Orientation',
            rangeFieldLabel: 'Schedule range',
            showHeaderLabel: 'Show header',
            showFooterLabel: 'Show footer',
            orientationPortraitText: 'Portrait',
            orientationLandscapeText: 'Landscape',
            completeViewText: 'Complete schedule',
            currentViewText: 'Visible schedule',
            dateRangeText: 'Date range',
            dateRangeFromText: 'Export from',
            dateRangeToText: 'Export to',
            exportersFieldLabel: 'Control pagination',
            adjustCols: 'Adjust column width',
            adjustColsAndRows: 'Adjust column width and row height',
            specifyDateRange: 'Specify date range',
            columnPickerLabel: 'Select columns',
            completeDataText: 'Complete schedule (for all events)',
            dpiFieldLabel: 'DPI (dots per inch)',
            rowsRangeLabel: 'Rows range',
            allRowsLabel: 'All rows',
            visibleRowsLabel: 'Visible rows',
            columnEmptyText: '[no title]'
        },
        'Sch.widget.ExportDialog': {
            title: 'Export Settings',
            exportButtonText: 'Export',
            cancelButtonText: 'Cancel',
            progressBarText: 'Exporting...'
        },
        'Sch.plugin.Export': {
            generalError: 'An error occurred',
            fetchingRows: 'Fetching row {0} of {1}',
            builtPage: 'Built page {0} of {1}',
            requestingPrintServer: 'Please wait...'
        },
        'Sch.plugin.Printable': {
            dialogTitle: 'Print settings',
            exportButtonText: 'Print',
            disablePopupBlocking: 'Please disable pop-up blocker since the print-plugin needs to be able to open new tabs',
            popupBlockerDetected: 'Browser pop-up blocker detected'
        },
        'Sch.plugin.exporter.AbstractExporter': {
            name: 'Exporter'
        },
        'Sch.plugin.exporter.SinglePage': {
            name: 'Single page'
        },
        'Sch.plugin.exporter.MultiPageVertical': {
            name: 'Multiple pages (vertically)'
        },
        'Sch.plugin.exporter.MultiPage': {
            name: 'Multiple pages'
        },
        'Sch.column.ResourceName': {
            name: 'Name'
        },
        'Sch.template.DependencyInfo': {
            fromText: 'From',
            toText: 'To'
        },
        'Sch.preset.Manager': {
            hourAndDay: {
                displayDateFormat: 'G:i',
                middleDateFormat: 'G:i',
                topDateFormat: 'D d/m'
            },
            secondAndMinute: {
                displayDateFormat: 'g:i:s',
                topDateFormat: 'D, d g:iA'
            },
            dayAndWeek: {
                displayDateFormat: 'm/d h:i A',
                middleDateFormat: 'D d M'
            },
            weekAndDay: {
                displayDateFormat: 'm/d',
                bottomDateFormat: 'd M',
                middleDateFormat: 'Y F d'
            },
            weekAndMonth: {
                displayDateFormat: 'm/d/Y',
                middleDateFormat: 'm/d',
                topDateFormat: 'm/d/Y'
            },
            weekAndDayLetter: {
                displayDateFormat: 'm/d/Y',
                middleDateFormat: 'D d M Y'
            },
            weekDateAndMonth: {
                displayDateFormat: 'm/d/Y',
                middleDateFormat: 'd',
                topDateFormat: 'Y F'
            },
            monthAndYear: {
                displayDateFormat: 'm/d/Y',
                middleDateFormat: 'M Y',
                topDateFormat: 'Y'
            },
            year: {
                displayDateFormat: 'm/d/Y',
                middleDateFormat: 'Y'
            },
            manyYears: {
                displayDateFormat: 'm/d/Y',
                middleDateFormat: 'Y'
            }
        }
    }
}, 0, 0, 0, 0, 0, 0, [Sch.locale, 'En'], 0);
Ext.cmd.derive('Sch.mixin.Localizable', Ext.Base, {
    legacyMode: !1,
    activeLocaleId: '',
    l10n: null,
    inTextLocaleRegExp: /L\{([^}]+)\}/g,
    isLocaleApplied: function() {
        var a = this.singleton && this.activeLocaleId || this.self.activeLocaleId;
        if (!a) {
            return !1
        }
        for (var b in Sch.locale.Active) {
            if (a === Sch.locale.Active[b].self.getName()) {
                return !0
            }
        }
        return !1
    },
    applyLocale: function() {
        for (var a in Sch.locale.Active) {
            Sch.locale.Active[a].apply(this.singleton ? this : this.self.getName())
        }
    },
    L: function() {
        return this.localize.apply(this, arguments)
    },
    localize: function(b, d, c) {
        var a = this.getLocale(b, d, c);
        if (a === null || a === undefined) {
            throw 'Cannot find locale: ' + b + ' [' + this.self.getName() + ']'
        }
        return a
    },
    getLocale: function(a, i, h) {
        if (!this.isLocaleApplied() && !h) {
            this.applyLocale()
        }
        if (this.hasOwnProperty('l10n') && this.l10n.hasOwnProperty(a) && 'function' != typeof this.l10n[a]) {
            return this.l10n[a]
        }
        var b = this.self && this.self.prototype;
        if (this.legacyMode) {
            var f = i || this.legacyHolderProp;
            var c = f ? this[f] : this;
            if (c && c.hasOwnProperty(a) && 'function' != typeof c[a]) {
                return c[a]
            }
            if (b) {
                var d = f ? b[f] : b;
                if (d && d.hasOwnProperty(a) && 'function' != typeof d[a]) {
                    return d[a]
                }
            }
        }
        var e = b.l10n && b.l10n[a];
        if (e === null || e === undefined) {
            var g = b && b.superclass;
            if (g && g.localize) {
                e = g.localize(a, i, h)
            }
        }
        return e
    },
    localizeText: function(a) {
        var b, c, d = this.inTextLocaleRegExp;
        while (b = d.exec(a)) {
            if (c = this.getLocale(b[1])) {
                a = a.replace(b[0], c)
            }
        }
        return a
    }
}, 0, 0, 0, 0, 0, 0, [Sch.mixin, 'Localizable'], 0);
Ext.cmd.derive('Sch.column.ResourceName', Ext.grid.Column, {
    initComponent: function() {
        Ext.apply(this, {
            text: this.L('name')
        });
        Ext.grid.column.Column.prototype.initComponent.apply(this, arguments)
    },
    renderer: function(b, c, a) {
        return a.getName()
    }
}, 0, ['scheduler_resourcenamecolumn'], ['component', 'box', 'container', 'headercontainer', 'gridcolumn', 'scheduler_resourcenamecolumn'], {
    'component': !0,
    'box': !0,
    'container': !0,
    'headercontainer': !0,
    'gridcolumn': !0,
    'scheduler_resourcenamecolumn': !0
}, ['widget.scheduler_resourcenamecolumn'], [
    [Sch.mixin.Localizable.prototype.mixinId || Sch.mixin.Localizable.$className, Sch.mixin.Localizable]
], [Sch.column, 'ResourceName'], 0);
Ext.cmd.derive('Sch.view.HorizontalTimeAxis', Ext.util.Observable, {
    trackHeaderOver: !0,
    compactCellWidthThreshold: 15,
    baseCls: 'sch-column-header',
    tableCls: 'sch-header-row',
    enableTickResizing: !1,
    headerHtmlRowTpl: '<table border="0" cellspacing="0" cellpadding="0" style="width: {totalWidth}px; {tstyle}" class="{{tableCls}} sch-header-row-{position} {cls}"><tbody><tr><tpl for="cells"><td class="{{baseCls}} {headerCls} sch-header-cell-{align}" data-date="{[fm.date(values.start, \'Ymd_His\')]}" style="text-align: {align}; width: {width}px; {style}" tabIndex="0"headerPosition="{parent.position}" headerIndex="{[xindex-1]}"><div class="sch-simple-timeheader">{header}</div>{{resizeHandle}}</td></tpl></tr></tbody></table>',
    model: null,
    hoverCls: '',
    containerEl: null,
    height: null,
    constructor: function(d) {
        var a = this;
        var c = !!Ext.versions.touch;
        Ext.apply(this, d);
        Ext.util.Observable.prototype.constructor.apply(this, arguments);
        a.model.on('update', a.onModelUpdate, this, {
            priority: 5
        });
        a.containerEl = Ext.get(a.containerEl);
        if (!(a.headerHtmlRowTpl instanceof Ext.Template)) {
            if (Ext.isString(a.headerHtmlRowTpl)) {
                a.headerHtmlRowTpl = a.headerHtmlRowTpl.replace('{{baseCls}}', this.baseCls).replace('{{tableCls}}', this.tableCls).replace('{{resizeHandle}}', this.enableTickResizing ? '<div class="sch-header-cell-resizehandle"></div>' : '')
            }
            a.headerHtmlRowTpl = new Ext.XTemplate(a.headerHtmlRowTpl)
        }
        if (a.trackHeaderOver && a.hoverCls) {
            a.containerEl.on({
                mousemove: a.highlightCell,
                delegate: '.' + this.baseCls,
                scope: a
            });
            a.containerEl.on({
                mouseleave: a.clearHighlight,
                scope: a
            })
        }
        var b = {
            scope: this,
            delegate: '.' + this.baseCls
        };
        if (c) {
            b.tap = this.onElClick('tap');
            b.doubletap = this.onElClick('doubletap')
        } else {
            b.click = this.onElClick('click');
            b.dblclick = this.onElClick('dblclick');
            b.contextmenu = this.onElClick('contextmenu')
        }
        a._listenerCfg = b;
        if (a.containerEl) {
            a.containerEl.on(b)
        }
    },
    destroy: function() {
        var a = this;
        if (a.containerEl) {
            a.containerEl.un(a._listenerCfg);
            a.containerEl.un({
                mousemove: a.highlightCell,
                delegate: '.sch-simple-timeheader',
                scope: a
            });
            a.containerEl.un({
                mouseleave: a.clearHighlight,
                scope: a
            })
        }
        a.model.un('update', a.onModelUpdate, this, {
            priority: 5
        })
    },
    onModelUpdate: function() {
        this.height = null;
        this.render()
    },
    getHTML: function() {
        var a = this.model.getColumnConfig();
        var c = this.model.getTotalWidth();
        var d = Ext.Object.getKeys(a).length;
        var b = '';
        if (a.top) {
            this.embedCellWidths(a.top);
            b += this.headerHtmlRowTpl.apply({
                totalWidth: c,
                cells: a.top,
                position: 'top',
                tstyle: 'border-top : 0;'
            })
        }
        if (a.middle) {
            this.embedCellWidths(a.middle);
            b += this.headerHtmlRowTpl.apply({
                totalWidth: c,
                cells: a.middle,
                position: 'middle',
                tstyle: a.top ? '' : 'border-top : 0;',
                cls: !a.bottom && this.model.getTickWidth() <= this.compactCellWidthThreshold ? 'sch-header-row-compact' : ''
            })
        }
        if (a.bottom) {
            this.embedCellWidths(a.bottom);
            b += this.headerHtmlRowTpl.apply({
                totalWidth: c,
                cells: a.bottom,
                position: 'bottom',
                cls: this.model.getTickWidth() <= this.compactCellWidthThreshold ? 'sch-header-row-compact' : ''
            })
        }
        return b
    },
    deleteTimeAxisRows: function() {
        var a = this.containerEl,
            b = a.dom;
        Ext.fly(b).select('table').remove()
    },
    render: function() {
        if (!this.containerEl) {
            return
        }
        var e = this.containerEl,
            a = e.dom,
            d = a.style.display,
            c = this.model.getColumnConfig(),
            b = a.parentNode;
        a.style.display = 'none';
        b.removeChild(a);
        this.deleteTimeAxisRows();
        a.insertAdjacentHTML('afterbegin', this.getHTML());
        if (!c.top && !c.middle) {
            this.containerEl.addCls('sch-header-single-row')
        } else {
            this.containerEl.removeCls('sch-header-single-row')
        }
        b && b.appendChild(a);
        a.style.display = d;
        this.fireEvent('refresh', this)
    },
    embedCellWidths: function(c, e) {
        for (var b = 0; b < c.length; b++) {
            var a = c[b];
            var d = this.model.getDistanceBetweenDates(a.start, a.end);
            if (d) {
                a.width = d
            } else {
                a.width = 0;
                a.style = 'display: none'
            }
        }
    },
    onElClick: function(a) {
        return function(d, b) {
            b = d.delegatedTarget || b;
            var e = Ext.fly(b).getAttribute('headerPosition'),
                f = Ext.fly(b).getAttribute('headerIndex'),
                c = this.model.getColumnConfig()[e][f];
            this.fireEvent('timeheader' + a, this, c.start, c.end, d)
        }
    },
    highlightCell: function(c, b) {
        var a = this;
        if (b !== a.highlightedCell) {
            a.clearHighlight();
            a.highlightedCell = b;
            Ext.fly(b).addCls(a.hoverCls)
        }
    },
    clearHighlight: function() {
        var a = this,
            b = a.highlightedCell;
        if (b) {
            Ext.fly(b).removeCls(a.hoverCls);
            delete a.highlightedCell
        }
    }
}, 1, 0, 0, 0, 0, 0, [Sch.view, 'HorizontalTimeAxis'], 0);
Ext.cmd.derive('Sch.feature.HeaderResize', Ext.AbstractPlugin, {
    selector: null,
    currentCell: null,
    originalCellWidth: null,
    startClientX: null,
    timeAxisViewModel: null,
    minCellWidth: 15,
    init: function(a) {
        a.on('render', this.onColumnRender, this)
    },
    onColumnRender: function(a) {
        a.getEl().on('mousedown', this.onMouseDown, this, {
            delegate: this.selector
        })
    },
    getClientX: function(a) {
        return Ext.isNumber(a.clientX) ? a.clientX : a.browserEvent.clientX
    },
    onMouseDown: function(c, d) {
        var a = this,
            b = d.parentElement;
        a.originalCellWidth = Ext.fly(b).getWidth();
        a.startClientX = a.getClientX(c);
        a.currentCell = b;
        a.getCmp().mon(Ext.getBody(), 'mousemove', a.onMouseMove, a);
        a.getCmp().mon(Ext.getBody(), 'mouseup', a.onMouseUp, a, {
            capture: !0,
            single: !0
        })
    },
    onMouseMove: function(h, i) {
        var a = this,
            e = a.currentCell,
            c = e.nextSibling,
            f = a.startClientX - a.getClientX(h),
            b = a.originalCellWidth,
            d = Math.max(a.minCellWidth, b - f);
        if (c && d < b) {
            var g = Math.min(b * 2 - a.minCellWidth, b + f);
            c.style.width = g + 'px'
        }
        e.style.width = d + 'px'
    },
    onMouseUp: function(h, i) {
        var a = this,
            b = a.getCmp().up('timelinegrid,timelinetree'),
            g = b.getSchedulingView().getDateFromCoordinate(Ext.fly(a.currentCell).getLeft()),
            d = Ext.fly(a.currentCell).getX() - b.getSchedulingView().getX(),
            e = a.getClientX(h) - a.startClientX,
            f = a.originalCellWidth / a.timeAxisViewModel.getTickWidth(),
            c = Math.max(a.minCellWidth, a.timeAxisViewModel.getTickWidth() + e / f);
        a.timeAxisViewModel.setTickWidth(Math.round(c));
        b.scrollToDate(g, !1, d);
        a.getCmp().mun(Ext.getBody(), 'mousemove', a.onMouseMove, a);
        this.currentCell = this.offset = null
    }
}, 0, 0, 0, 0, 0, 0, [Sch.feature, 'HeaderResize'], 0);
Ext.cmd.derive('Sch.column.timeAxis.Horizontal', Ext.grid.column.Column, {
    draggable: !1,
    groupable: !1,
    hideable: !1,
    sortable: !1,
    resizable: !1,
    menuDisabled: !0,
    cls: 'sch-simple-timeaxis',
    tdCls: 'sch-timetd',
    enableLocking: !1,
    locked: !1,
    lockable: !1,
    enableTickResizing: !1,
    cellFocusable: !1,
    timeAxisViewModel: null,
    headerView: null,
    hoverCls: '',
    ownHoverCls: 'sch-column-header-over',
    trackHeaderOver: !0,
    compactCellWidthThreshold: Ext.theme && Ext.theme.name.toLowerCase() === 'classic' ? 15 : 35,
    initComponent: function() {
        if (this.enableTickResizing) {
            this.addPlugin(new Sch.feature.HeaderResize({
                selector: '.sch-header-cell-resizehandle',
                timeAxisViewModel: this.timeAxisViewModel
            }))
        }
        Ext.grid.column.Column.prototype.initComponent.apply(this, arguments)
    },
    afterRender: function() {
        var a = this;
        var b = a.titleEl.createChild({
            cls: 'sch-horizontaltimeaxis-ct'
        });
        if (!(a.headerView instanceof Sch.view.HorizontalTimeAxis)) {
            a.headerView = Ext.create(Ext.applyIf(a.headerView || {}, {
                xclass: 'Sch.view.HorizontalTimeAxis',
                model: a.timeAxisViewModel,
                containerEl: b,
                hoverCls: a.ownHoverCls,
                trackHeaderOver: a.trackHeaderOver,
                enableTickResizing: this.enableTickResizing,
                compactCellWidthThreshold: a.compactCellWidthThreshold
            }))
        }
        a.headerView.on('refresh', a.onTimeAxisViewRefresh, a);
        a.headerView.render();
        a.ownerCt.on('afterlayout', function() {
            if (!a.ownerCt) {
                return
            }
            a.mon(a.ownerCt, 'resize', a.onHeaderContainerResize, a);
            if (this.getWidth() > 0) {
                if (a.getAvailableWidthForSchedule() !== a.timeAxisViewModel.getAvailableWidth()) {
                    a.timeAxisViewModel.update(a.getAvailableWidthForSchedule())
                }
                a.setWidth(a.timeAxisViewModel.getTotalWidth())
            }
        }, null, {
            single: !0
        });
        this.enableBubble('timeheaderclick', 'timeheaderdblclick', 'timeheadercontextmenu', 'horizontaltimeaxiscolumnrender');
        a.relayEvents(a.headerView, ['timeheaderclick', 'timeheaderdblclick', 'timeheadercontextmenu']);
        Ext.grid.column.Column.prototype.afterRender.apply(this, arguments);
        a.focusable = !1;
        this.fireEvent('horizontaltimeaxiscolumnrender', this)
    },
    initRenderData: function() {
        var a = this;
        a.renderData.headerCls = a.renderData.headerCls || a.headerCls;
        return Ext.grid.column.Column.prototype.initRenderData.apply(this, arguments)
    },
    destroy: function() {
        if (this.headerView) {
            this.headerView.destroy();
            this.headerView = null
        }
        Ext.grid.column.Column.prototype.destroy.apply(this, arguments)
    },
    onTimeAxisViewRefresh: function() {
        this.headerView.un('refresh', this.onTimeAxisViewRefresh, this);
        var a = this.timeAxisViewModel.getTotalWidth();
        if (this.getWidth() !== a) {
            this.setWidth(a)
        } else {
            this.updateLayout()
        }
        this.ensureSizing();
        this.headerView.on('refresh', this.onTimeAxisViewRefresh, this)
    },
    getAvailableWidthForSchedule: function() {
        if (!this.ownerCt) {
            return 0
        }
        var c = this.ownerCt.isVisible(!0) ? this.ownerCt.getWidth() : this.ownerCt.lastBox && this.ownerCt.lastBox.width || 0,
            d = this.ownerCt.items,
            a;
        for (var b = 1; b < d.length; b++) {
            a = d.get(b);
            if (!a.hidden) {
                c -= a.isVisible(!0) ? a.getWidth() : a.lastBox && a.lastBox.width || 0
            }
        }
        return Math.max(0, c - Ext.getScrollbarSize().width - 1)
    },
    onResize: function() {
        Ext.grid.column.Column.prototype.onResize.apply(this, arguments);
        this.timeAxisViewModel.setAvailableWidth(this.getAvailableWidthForSchedule())
    },
    onHeaderContainerResize: function(d, e, b, c, a) {
        this.timeAxisViewModel.setAvailableWidth(this.getAvailableWidthForSchedule());
        if (b !== a) {
            this.headerView.render()
        }
    },
    ensureSizing: function() {
        var a = this.headerView.containerEl;
        var b = this.ownerCt.getHeight();
        var c = a.getHeight();
        var d = b - c;
        if (d > 0) {
            var e = a.down('table:last-of-type tr');
            if (e) {
                a.select('table tr').setHeight(b / this.timeAxisViewModel.getHeaders().length)
            }
        }
    },
    refresh: function() {
        if (this.rendered) {
            this.timeAxisViewModel.update(null, !0);
            this.headerView.render()
        }
    }
}, 0, ['timeaxiscolumn'], ['component', 'box', 'container', 'headercontainer', 'gridcolumn', 'timeaxiscolumn'], {
    'component': !0,
    'box': !0,
    'container': !0,
    'headercontainer': !0,
    'gridcolumn': !0,
    'timeaxiscolumn': !0
}, ['widget.timeaxiscolumn'], 0, [Sch.column.timeAxis, 'Horizontal'], 0);
Ext.define('TimesSquare.overrides.TimeAxisHorizontal', {
    override: 'Sch.column.timeAxis.Horizontal',
    onHeaderContainerResize: function() {
        var c = this.up('gantt'),
            e = c.getSchedulingView(),
            a = this.timeAxisViewModel,
            b = e.getScroll().left,
            d = a.getDateFromPosition(b);
        arguments.callee.$previous.apply(this, arguments);
        a._scrollRestoreDate = d
    }
});
Ext.cmd.derive('Sch.column.timeAxis.Vertical', Ext.grid.column.Column, {
    align: 'right',
    draggable: !1,
    groupable: !1,
    hideable: !1,
    sortable: !1,
    menuDisabled: !0,
    timeAxis: null,
    timeAxisViewModel: null,
    cellTopBorderWidth: null,
    cellBottomBorderWidth: null,
    totalBorderWidth: null,
    enableLocking: !1,
    locked: !0,
    lockable: !1,
    dataIndex: 'start',
    initComponent: function() {
        Ext.grid.column.Column.prototype.initComponent.apply(this, arguments);
        this.tdCls = (this.tdCls || '') + ' sch-verticaltimeaxis-cell';
        this.scope = this;
        this.addCls('sch-verticaltimeaxis-header');
        this.totalBorderWidth = this.cellTopBorderWidth + this.cellBottomBorderWidth
    },
    renderer: function(d, c, e, f) {
        var a = this.timeAxisViewModel;
        if (!a.columnConfig.middle) {
            return
        }
        c.style = 'height:' + (a.getTickWidth() - this.totalBorderWidth) + 'px';
        var b;
        if (!a.isWeek() && d && a.isMajorTick(d)) {
            b = a.headerConfig[a.getMajorHeaderName()];
            c.tdCls += ' sch-column-line-solid'
        } else {
            b = a.getBottomHeader()
        }
        if (b.renderer) {
            return b.renderer.call(b.scope || this, e.data.start, e.data.end, c, f)
        } else {
            return Ext.Date.format(d, b.dateFormat)
        }
    }
}, 0, ['verticaltimeaxis'], ['component', 'box', 'container', 'headercontainer', 'gridcolumn', 'verticaltimeaxis'], {
    'component': !0,
    'box': !0,
    'container': !0,
    'headercontainer': !0,
    'gridcolumn': !0,
    'verticaltimeaxis': !0
}, ['widget.verticaltimeaxis'], 0, [Sch.column.timeAxis, 'Vertical'], 0);
Ext.cmd.derive('Sch.util.Cache', Ext.Base, {
    cache: null,
    constructor: function() {
        var a = this;
        a.cache = {}
    },
    key: function(a) {
        var b;
        if (a && a.isModel) {
            b = a.getId().toString()
        } else {
            if (a === undefined || a === null) {
                b = '[ undefined / null ]'
            } else {
                b = a.toString()
            }
        }
        return b
    },
    has: function(a) {
        var b = this;
        a = b.key(a);
        return b.cache.hasOwnProperty(a)
    },
    get: function(b, d) {
        var c = this,
            a;
        b = c.key(b);
        a = c.cache.hasOwnProperty(b) && c.cache[b];
        if (!a && d) {
            a = d()
        } else {
            if (!a) {
                a = []
            }
        }
        c.cache[b] = a;
        return a
    },
    add: function(c, d) {
        var a = this,
            b = a.key(c);
        if (!a.cache.hasOwnProperty(b)) {
            a.cache[b] = a.get(c)
        }
        arguments.length > 1 && Ext.Array.include(a.cache[b], d);
        return a
    },
    set: function(d, c) {
        var a = this,
            b = a.key(d);
        a.cache[b] = c;
        return a
    },
    remove: function(b, c) {
        var a = this;
        b = a.key(b);
        if (a.cache.hasOwnProperty(b)) {
            Ext.Array.remove(a.cache[b], c)
        }
        return a
    },
    move: function(b, c, d) {
        var a = this;
        b = a.key(b);
        c = a.key(c);
        if (b != c && arguments.length >= 3) {
            a.remove(b, d);
            a.add(c, d)
        } else {
            if (b != c && a.cache.hasOwnProperty(b) && a.cache.hasOwnProperty(c)) {
                a.cache[c] = Ext.Array.union(a.cache[c], a.cache[b]);
                a.cache[b] = []
            } else {
                if (b != c && a.cache.hasOwnProperty(b)) {
                    a.cache[c] = a.cache[b];
                    a.cache[b] = []
                }
            }
        }
        return a
    },
    clear: function(b) {
        var a = this;
        if (!arguments.length) {
            a.cache = {}
        } else {
            b = a.key(b);
            if (a.cache.hasOwnProperty(b)) {
                delete a.cache[b]
            }
        }
        return a
    },
    uncache: function(c) {
        var a = this,
            b;
        for (b in a.cache) {
            if (a.cache.hasOwnProperty(b)) {
                a.cache[b] = Ext.Array.remove(a.cache[b], c)
            }
        }
        return a
    },
    inheritableStatics: {}
}, 1, 0, 0, 0, 0, 0, [Sch.util, 'Cache'], 0);
Ext.cmd.derive('Sch.data.mixin.UniversalModelGetter', Ext.Base, {
    onClassMixedIn: function(a) {
        var b = {};
        if (a.prototype.isTreeStore) {
            b.getModelById = a.prototype.getNodeById
        } else {
            b.getModelById = a.prototype.getById
        }
        if (a.prototype.isTreeStore) {
            b.getModelByInternalId = function(b) {
                return this.byInternalIdMap[b] || null
            }
        } else {
            b.getModelByInternalId = a.prototype.getByInternalId
        }
        Ext.override(a, b)
    }
}, 0, 0, 0, 0, 0, 0, [Sch.data.mixin, 'UniversalModelGetter'], 0);
Ext.cmd.derive('Sch.data.mixin.CacheHintHelper', Ext.Mixin, {
    mixinConfig: {
        before: {
            loadRecords: 'loadRecords',
            removeAll: 'removeAll'
        }
    },
    loadRecords: function() {
        this.fireEvent('cacheresethint', this)
    },
    removeAll: function(a) {
        if (a) {
            this.fireEvent('cacheresethint', this)
        }
    }
}, 0, 0, 0, 0, 0, 0, [Sch.data.mixin, 'CacheHintHelper'], 0);
Ext.cmd.derive('Sch.model.Customizable', Ext.data.Model, function(a) {
    return {
        isCustomizableModel: !0,
        customizableFields: null,
        previous: null,
        __editing: null,
        __editCounter: 0,
        constructor: function() {
            var b = Ext.data.Model.prototype.constructor.apply(this, arguments);
            return b
        },
        storePreviousFlex: Ext.Function.flexSetter(function(e, c) {
            var d = this,
                b = d.get(e);
            if (b instanceof Date && !(c instanceof Date)) {
                c = d.getField(e).convert(c, d)
            }
            if (b instanceof Date && b - c || !(b instanceof Date) && b !== c) {
                d.previous[e] = b
            }
        }),
        deletePreviousFlex: Ext.Function.flexSetter(function(b, c) {
            delete this.previous[b]
        }),
        set: function(d, f) {
            var b = this,
                c = !1,
                e = null;
            if (!b.previous) {
                c = !0;
                b.previous = {}
            }
            b.storePreviousFlex(d, f);
            e = Ext.data.Model.prototype.set.apply(this, arguments);
            if (!b.__editing) {
                if (c) {
                    delete b.previous
                } else {
                    b.deletePreviousFlex(d, f)
                }
            }
            return e
        },
        reject: function() {
            var b = this,
                d = b.modified || {},
                c;
            b.__editing = !0;
            b.previous = b.previous || {};
            for (c in d) {
                if (d.hasOwnProperty(c)) {
                    if (typeof d[c] != 'function') {
                        b.previous[c] = b.get(c)
                    }
                }
            }
            Ext.data.Model.prototype.reject.apply(this, arguments);
            delete b.previous;
            b.__editing = !1
        },
        beginEdit: function() {
            this.__editCounter++;
            this.__editing = !0;
            Ext.data.Model.prototype.beginEdit.apply(this, arguments)
        },
        cancelEdit: function() {
            this.__editCounter = 0;
            this.__editing = !1;
            Ext.data.Model.prototype.cancelEdit.apply(this, arguments);
            delete this.previous
        },
        endEdit: function(c, b) {
            if (--this.__editCounter === 0) {
                if (!c && this.getModifiedFieldNames) {
                    var d = this.editMemento;
                    if (!b) {
                        b = this.getModifiedFieldNames(d.data)
                    }
                    if (b && b.length === 0) {
                        c = !0
                    }
                }
                Ext.data.Model.prototype.endEdit.apply(this, [c].concat(Array.prototype.slice.call(arguments, 1)));
                this.__editing = !1;
                delete this.previous
            }
        }
    }
}, 1, 0, 0, 0, 0, [
    ['robo', Robo.data.Model]
], [Sch.model, 'Customizable'], function(a) {
    a.$onExtended.unshift({
        fn: function(c, b) {
            if (b) {
                if (Ext.isArray(b)) {
                    c.fieldsInitialValue = b.slice()
                } else {
                    if (b.fields) {
                        if (!Ext.isArray(b.fields)) {
                            c.fieldsInitialValue = [b.fields]
                        } else {
                            c.fieldsInitialValue = b.fields.slice()
                        }
                    }
                }
            }
        }
    });
    a.onExtended(function(b, e, f) {
        var c = Ext.ClassManager,
            d = c.triggerCreated;
        c.triggerCreated = function(l) {
            var g = b.prototype;
            if (e.customizableFields) {
                g.allCustomizableFields = (b.superclass.allCustomizableFields || []).concat(e.customizableFields)
            } else {
                g.allCustomizableFields = b.superclass.allCustomizableFields || []
            }
            var i = {};
            Ext.Array.each(g.allCustomizableFields, function(c) {
                if (typeof c == 'string') {
                    c = {
                        name: c
                    }
                }
                i[c.name] = c
            });
            var k = g.fields;
            var j = [];
            var h = [];
            Ext.Array.each(k, function(c) {
                if (c.isCustomizableField) {
                    h.push(c.getName())
                }
            });
            if (g.idProperty !== 'id' && g.getField('id')) {
                if (!g.getField('id').hasOwnProperty('name')) {
                    h.push('id')
                }
            }
            if (g.idProperty !== 'Id' && g.getField('Id')) {
                if (!g.getField('Id').hasOwnProperty('name')) {
                    h.push('Id')
                }
            }
            b.removeFields(h);

            function applyFieldConfig(i, c, h) {
                if (!c) {
                    return
                }
                if (!Ext.isArray(c)) {
                    c = [c]
                }
                var g;
                for (var d = c.length - 1; d >= 0; d--) {
                    if (c[d].name == h) {
                        g = c[d];
                        break
                    }
                }
                Ext.applyIf(i, g)
            }

            function getFieldConfig(d) {
                var g = b,
                    c = g.prototype,
                    i = d === 'Id' ? 'idProperty' : d.charAt(0).toLowerCase() + d.substr(1) + 'Field',
                    h = {
                        name: c[i] || d,
                        isCustomizableField: !0
                    },
                    j;
                while (c && c.isCustomizableModel) {
                    j = c[i] || d;
                    c.hasOwnProperty('customizableFields') && applyFieldConfig(h, c.customizableFields, d);
                    applyFieldConfig(h, g.fieldsInitialValue, j);
                    c = g.superclass;
                    g = c && c.self
                }
                return h
            }
            h = [];
            Ext.Object.each(i, function(q, o) {
                var d = o.name || o.getName();
                var n = d === 'Id' ? 'idProperty' : d.charAt(0).toLowerCase() + d.substr(1) + 'Field';
                var c = g[n] || d;
                g.getField(c) && h.push(c);
                var p = getFieldConfig(d);
                j.push(Ext.create('data.field.' + (p.type || 'auto'), p));
                var m = Ext.String.capitalize(d);
                if (m != 'Id') {
                    var i = 'get' + m;
                    var k = 'set' + m;
                    if (!g[i] || g[i].__getterFor__ && g[i].__getterFor__ != c) {
                        g[i] = function() {
                            return this.get(this[n] || c)
                        };
                        g[i].__getterFor__ = c
                    }
                    if (!g[k] || g[k].__setterFor__ && g[k].__setterFor__ != c) {
                        g[k] = function(d) {
                            return this.set(this[n] || c, d)
                        };
                        g[k].__setterFor__ = c
                    }
                }
            });
            b.replaceFields(j, h);
            d.apply(this, arguments);
            c.triggerCreated = d
        }
    })
});
Ext.cmd.derive('Sch.model.Assignment', Sch.model.Customizable, {
    idProperty: 'Id',
    isAssignmentModel: !0,
    customizableFields: [{
        name: 'ResourceId'
    }, {
        name: 'EventId'
    }],
    resourceIdField: 'ResourceId',
    eventIdField: 'EventId',
    getInternalId: function() {
        return this.internalId
    },
    getAssignmentStore: function() {
        return this.joined && this.joined[0]
    },
    getEventStore: function() {
        var a = this.getAssignmentStore();
        return a && a.getEventStore()
    },
    getResourceStore: function() {
        var a = this.getEventStore();
        return a && a.getResourceStore()
    },
    getEvent: function(a) {
        var b = this;
        a = a || b.getEventStore();
        return a && a.getModelById(b.getEventId())
    },
    getResource: function(a) {
        var b = this;
        a = a || b.getResourceStore();
        return a && a.getModelById(b.getResourceId())
    },
    getEventName: function(b) {
        var a = this.getEvent(b);
        return a && a.getName() || ''
    },
    getResourceName: function(b) {
        var a = this.getResource(b);
        return a && a.getName() || ''
    },
    isPersistable: function() {
        var c = this,
            b = c.getEvent(),
            a = c.getResource();
        return b && !b.phantom && a && !a.phantom
    },
    fullCopy: function() {
        return this.copy.apply(this, arguments)
    },
    getEventResourceCompositeKey: function() {
        var a = this;
        return a.self.makeAssignmentEventResourceCompositeKey(a.getEventId(), a.getResourceId())
    },
    inheritableStatics: {
        makeAssignmentEventResourceCompositeKey: function() {
            var a = [];
            return function(c, b) {
                a.length = 0;
                a.push('event(', c, ')-resource(', b, ')');
                return a.join('')
            }
        }()
    }
}, 0, 0, 0, 0, 0, 0, [Sch.model, 'Assignment'], 0);
Ext.cmd.derive('Sch.model.CalendarDay', Sch.model.Customizable, {
    idProperty: 'Id',
    isCalendarDayModel: !0,
    customizableFields: [{
        name: 'Date',
        type: 'date',
        dateFormat: 'c',
        persist: !0,
        convert: function(b, c) {
            if (!b) {
                return
            }
            var a = Ext.data.Types.DATE.convert.call(this, b);
            if (a) {
                Ext.Date.clearTime(a)
            }
            return a
        }
    }, {
        name: 'Weekday',
        type: 'int'
    }, {
        name: 'OverrideStartDate',
        type: 'date',
        dateFormat: 'c'
    }, {
        name: 'OverrideEndDate',
        type: 'date',
        dateFormat: 'c'
    }, {
        name: 'Type',
        defaultValue: 'DAY'
    }, {
        name: 'IsWorkingDay',
        type: 'boolean',
        defaultValue: !1
    }, {
        name: 'Cls',
        defaultValue: 'sch-nonworkingtime'
    }, 'Name', {
        name: 'Availability',
        persist: !0,
        convert: function(a, b) {
            if (a) {
                return typeof a === 'string' ? [a] : a
            } else {
                return []
            }
        }
    }],
    availabilityCache: null,
    weekdayField: 'Weekday',
    overrideStartDateField: 'OverrideStartDate',
    overrideEndDateField: 'OverrideEndDate',
    typeField: 'Type',
    dateField: 'Date',
    isWorkingDayField: 'IsWorkingDay',
    clsField: 'Cls',
    nameField: 'Name',
    availabilityField: 'Availability',
    setDate: function(a) {
        if (a) {
            a = Ext.Date.clearTime(a, !0)
        }
        this.set(this.dateField, a)
    },
    clearDate: function() {
        this.set(this.dateField, null)
    },
    getAvailability: function(b) {
        var c = this;
        if (b) {
            return this.get(this.availabilityField)
        }
        if (this.availabilityCache) {
            return this.availabilityCache
        }
        var a = Ext.Array.map(this.get(this.availabilityField), function(a) {
            return typeof a === 'string' ? c.parseInterval(a) : a
        });
        this.verifyAvailability(a);
        return this.availabilityCache = a
    },
    setAvailability: function(a) {
        this.availabilityCache = null;
        this.set(this.availabilityField, this.stringifyIntervals(a));
        this.getAvailability()
    },
    verifyAvailability: function(a) {
        var b = this;
        a.sort(function(b, c) {
            return b.startTime - c.startTime
        });
        Ext.Array.each(a, function(c, d) {
            if (c.startTime > c.endTime) {
                throw new Error('Start time ' + Ext.Date.format(c.startTime, 'H:i') + ' is greater than end time ' + Ext.Date.format(c.endTime, 'H:i'))
            }
            if (d > 0 && a[d - 1].endTime > c.startTime) {
                throw new Error('Availability intervals should not intersect: [' + b.stringifyInterval(a[d - 1]) + '] and [' + b.stringifyInterval(c) + ']')
            }
        })
    },
    prependZero: function(a) {
        return a < 10 ? '0' + a : a
    },
    stringifyInterval: function(c) {
        var b = c.startTime;
        var a = c.endTime;
        return this.prependZero(b.getHours()) + ':' + this.prependZero(b.getMinutes()) + '-' + (a.getDate() == 1 ? 24 : this.prependZero(a.getHours())) + ':' + this.prependZero(a.getMinutes())
    },
    stringifyIntervals: function(a) {
        var b = this;
        return Ext.Array.map(a, function(c) {
            if (typeof c === 'string') {
                return c
            }
            return b.stringifyInterval(c)
        })
    },
    parseInterval: function(b) {
        var a = /(\d\d):(\d\d)-(\d\d):(\d\d)/.exec(b);
        if (!a) {
            throw new Error('Invalid format for availability string: ' + b + '. It should have exact format: hh:mm-hh:mm')
        }
        return {
            startTime: new Date(2016, 11, 0, a[1], a[2]),
            endTime: new Date(2016, 11, 0, a[3], a[4])
        }
    },
    getTotalHours: function() {
        return this.getTotalMS() / 1000 / 60 / 60
    },
    getTotalMS: function() {
        var a = 0;
        Ext.Array.each(this.getAvailability(), function(b) {
            a += b.endTime - b.startTime
        });
        return a
    },
    addAvailabilityInterval: function(a, c) {
        var b;

        function prepareDate(b) {
            return new Date(2016, 11, b.getDate() == 1 ? 1 : 0, b.getHours(), b.getMinutes())
        }
        if (a instanceof Date) {
            b = {
                startTime: prepareDate(a),
                endTime: prepareDate(c)
            }
        } else {
            b = this.parseInterval(a + (c ? '-' + c : ''))
        }
        var d = this.getAvailability().concat(b);
        this.verifyAvailability(d);
        this.setAvailability(d)
    },
    removeAvailabilityInterval: function(b) {
        var a = this.getAvailability();
        a.splice(b, 1);
        this.setAvailability(a)
    },
    getAvailabilityIntervalsFor: function(a) {
        a = typeof a == 'number' ? new Date(a) : a;
        var d = a.getFullYear();
        var b = a.getMonth();
        var c = a.getDate();
        return Ext.Array.map(this.getAvailability(), function(e) {
            var f = e.endTime.getDate();
            return {
                startDate: new Date(d, b, c, e.startTime.getHours(), e.startTime.getMinutes()),
                endDate: new Date(d, b, c + (f == 1 ? 1 : 0), e.endTime.getHours(), e.endTime.getMinutes())
            }
        })
    },
    getAvailabilityStartFor: function(b) {
        var a = this.getAvailabilityIntervalsFor(b);
        if (!a.length) {
            return null
        }
        return a[0].startDate
    },
    getAvailabilityEndFor: function(b) {
        var a = this.getAvailabilityIntervalsFor(b);
        if (!a.length) {
            return null
        }
        return a[a.length - 1].endDate
    }
}, 0, 0, 0, 0, 0, 0, [Sch.model, 'CalendarDay'], 0);
Ext.cmd.derive('Sch.util.Date', Ext.Base, {
    singleton: !0,
    stripEscapeRe: /(\\.)/g,
    hourInfoRe: /([gGhHisucUOPZ]|MS)/,
    unitHash: null,
    unitsByName: {},
    MIN_VALUE: new Date(-8.64E15),
    MAX_VALUE: new Date(8.64E15),
    constructor: function() {
        var b = Ext.Date;
        var c = this.unitHash = {
            MILLI: b.MILLI,
            SECOND: b.SECOND,
            MINUTE: b.MINUTE,
            HOUR: b.HOUR,
            DAY: b.DAY,
            WEEK: 'w',
            MONTH: b.MONTH,
            QUARTER: 'q',
            YEAR: b.YEAR
        };
        Ext.apply(this, c);
        var a = this;
        this.units = [a.MILLI, a.SECOND, a.MINUTE, a.HOUR, a.DAY, a.WEEK, a.MONTH, a.QUARTER, a.YEAR]
    },
    onLocalized: function() {
        this.setUnitNames(this.L('unitNames'))
    },
    setUnitNames: function(e) {
        var d = this.unitsByName = {};
        this.l10n.unitNames = e;
        this._unitNames = Ext.apply({}, e);
        var c = this.unitHash;
        for (var b in c) {
            if (c.hasOwnProperty(b)) {
                var a = c[b];
                this._unitNames[a] = this._unitNames[b];
                d[b] = a;
                d[a] = a
            }
        }
    },
    betweenLesser: function(a, b, c) {
        return b <= a && a < c
    },
    betweenLesserEqual: function(a, b, c) {
        return b <= a && a <= c
    },
    constrain: function(a, c, b) {
        return this.min(this.max(a, c), b)
    },
    compareUnits: function(c, d) {
        var a = Ext.Array.indexOf(this.units, c),
            b = Ext.Array.indexOf(this.units, d);
        return a > b ? 1 : a < b ? -1 : 0
    },
    isUnitGreater: function(a, b) {
        return this.compareUnits(a, b) > 0
    },
    copyTimeValues: function(b, a) {
        b.setHours(a.getHours());
        b.setMinutes(a.getMinutes());
        b.setSeconds(a.getSeconds());
        b.setMilliseconds(a.getMilliseconds())
    },
    add: function(b, e, c) {
        var a = Ext.Date.clone(b);
        if (!e || c === 0) {
            return a
        }
        switch (e.toLowerCase()) {
            case this.MILLI:
                a = new Date(b.getTime() + c);
                break;
            case this.SECOND:
                a = new Date(b.getTime() + c * 1000);
                break;
            case this.MINUTE:
                a = new Date(b.getTime() + c * 60000);
                break;
            case this.HOUR:
                a = new Date(b.getTime() + c * 3600000);
                break;
            case this.DAY:
                a.setDate(b.getDate() + c);
                if (a.getHours() === 23 && b.getHours() === 0) {
                    a = Ext.Date.add(a, Ext.Date.HOUR, 1)
                };
                break;
            case this.WEEK:
                a.setDate(b.getDate() + c * 7);
                break;
            case this.MONTH:
                var d = b.getDate();
                if (d > 28) {
                    d = Math.min(d, Ext.Date.getLastDateOfMonth(this.add(Ext.Date.getFirstDateOfMonth(b), this.MONTH, c)).getDate())
                };
                a.setDate(d);
                a.setMonth(a.getMonth() + c);
                break;
            case this.QUARTER:
                a = this.add(b, this.MONTH, c * 3);
                break;
            case this.YEAR:
                a.setFullYear(b.getFullYear() + c);
                break;
        }
        return a
    },
    getUnitDurationInMs: function(a) {
        return this.add(new Date(1, 0, 1), a, 1) - new Date(1, 0, 1)
    },
    getMeasuringUnit: function(a) {
        if (a === this.WEEK) {
            return this.DAY
        }
        return a
    },
    getDurationInUnit: function(b, c, e, d) {
        var a;
        switch (e) {
            case this.YEAR:
                a = this.getDurationInYears(b, c);
                break;
            case this.QUARTER:
                a = this.getDurationInMonths(b, c) / 3;
                break;
            case this.MONTH:
                a = this.getDurationInMonths(b, c);
                break;
            case this.WEEK:
                a = this.getDurationInDays(b, c) / 7;
                break;
            case this.DAY:
                a = this.getDurationInDays(b, c);
                break;
            case this.HOUR:
                a = this.getDurationInHours(b, c);
                break;
            case this.MINUTE:
                a = this.getDurationInMinutes(b, c);
                break;
            case this.SECOND:
                a = this.getDurationInSeconds(b, c);
                break;
            case this.MILLI:
                a = this.getDurationInMilliseconds(b, c);
                break;
        }
        return d ? a : Math.round(a)
    },
    getUnitToBaseUnitRatio: function(b, a) {
        if (b === a) {
            return 1
        }
        switch (b) {
            case this.YEAR:
                switch (a) {
                    case this.QUARTER:
                        return 1 / 4;
                    case this.MONTH:
                        return 1 / 12;
                };
                break;
            case this.QUARTER:
                switch (a) {
                    case this.YEAR:
                        return 4;
                    case this.MONTH:
                        return 1 / 3;
                };
                break;
            case this.MONTH:
                switch (a) {
                    case this.YEAR:
                        return 12;
                    case this.QUARTER:
                        return 3;
                };
                break;
            case this.WEEK:
                switch (a) {
                    case this.DAY:
                        return 1 / 7;
                    case this.HOUR:
                        return 1 / 168;
                };
                break;
            case this.DAY:
                switch (a) {
                    case this.WEEK:
                        return 7;
                    case this.HOUR:
                        return 1 / 24;
                    case this.MINUTE:
                        return 1 / 1440;
                };
                break;
            case this.HOUR:
                switch (a) {
                    case this.DAY:
                        return 24;
                    case this.MINUTE:
                        return 1 / 60;
                };
                break;
            case this.MINUTE:
                switch (a) {
                    case this.HOUR:
                        return 60;
                    case this.SECOND:
                        return 1 / 60;
                    case this.MILLI:
                        return 1 / 60000;
                };
                break;
            case this.SECOND:
                switch (a) {
                    case this.MILLI:
                        return 1 / 1000;
                };
                break;
            case this.MILLI:
                switch (a) {
                    case this.SECOND:
                        return 1000;
                };
                break;
        }
        return -1
    },
    isUnitDivisibleIntoSubunit: function(c, b) {
        var a = c === this.MONTH && b === this.WEEK;
        return !a
    },
    getDurationInMilliseconds: function(a, b) {
        return b - a
    },
    getDurationInSeconds: function(a, b) {
        return (b - a) / 1000
    },
    getDurationInMinutes: function(a, b) {
        return (b - a) / 60000
    },
    getDurationInHours: function(a, b) {
        return (b - a) / 3600000
    },
    getDurationInDays: function(a, b) {
        var c = a.getTimezoneOffset() - b.getTimezoneOffset();
        return (b - a + c * 60 * 1000) / 86400000
    },
    getDurationInMonths: function(a, b) {
        return (b.getFullYear() - a.getFullYear()) * 12 + (b.getMonth() - a.getMonth())
    },
    getDurationInYears: function(a, b) {
        return this.getDurationInMonths(a, b) / 12
    },
    min: function(a, b) {
        return (a && a.valueOf() || a) < (b && b.valueOf() || b) ? a : b
    },
    max: function(a, b) {
        return (a && a.valueOf() || a) > (b && b.valueOf() || b) ? a : b
    },
    intersectSpans: function(a, c, b, d) {
        return this.betweenLesser(a, b, d) || this.betweenLesser(b, a, c)
    },
    getNameOfUnit: function(a) {
        a = this.getUnitByName(a);
        switch (a.toLowerCase()) {
            case this.YEAR:
                return 'YEAR';
            case this.QUARTER:
                return 'QUARTER';
            case this.MONTH:
                return 'MONTH';
            case this.WEEK:
                return 'WEEK';
            case this.DAY:
                return 'DAY';
            case this.HOUR:
                return 'HOUR';
            case this.MINUTE:
                return 'MINUTE';
            case this.SECOND:
                return 'SECOND';
            case this.MILLI:
                return 'MILLI';
        }
        throw 'Incorrect UnitName'
    },
    getReadableNameOfUnit: function(b, a) {
        if (!this.isLocaleApplied()) {
            this.applyLocale()
        }
        return this._unitNames[b][a ? 'plural' : 'single']
    },
    getShortNameOfUnit: function(a) {
        if (!this.isLocaleApplied()) {
            this.applyLocale()
        }
        return this._unitNames[a].abbrev
    },
    getUnitByName: function(a) {
        if (!this.isLocaleApplied()) {
            this.applyLocale()
        }
        if (!this.unitsByName[a]) {
            Ext.Error.raise('Unknown unit name: ' + a)
        }
        return this.unitsByName[a]
    },
    getNext: function(c, d, b, e) {
        var a = Ext.Date.clone(c);
        e = arguments.length < 4 ? 1 : e;
        b = b == null ? 1 : b;
        switch (d) {
            case this.MILLI:
                a = this.add(c, d, b);
                break;
            case this.SECOND:
                a = this.add(c, d, b);
                if (a.getMilliseconds() > 0) {
                    a.setMilliseconds(0)
                };
                break;
            case this.MINUTE:
                a = this.add(c, d, b);
                if (a.getSeconds() > 0) {
                    a.setSeconds(0)
                };
                if (a.getMilliseconds() > 0) {
                    a.setMilliseconds(0)
                };
                break;
            case this.HOUR:
                a = this.add(c, d, b);
                if (a.getMinutes() > 0) {
                    a.setMinutes(0)
                };
                if (a.getSeconds() > 0) {
                    a.setSeconds(0)
                };
                if (a.getMilliseconds() > 0) {
                    a.setMilliseconds(0)
                };
                break;
            case this.DAY:
                var g = c.getHours() === 23 && this.add(a, this.HOUR, 1).getHours() === 1;
                if (g) {
                    a = this.add(a, this.DAY, 2);
                    this.clearTime(a);
                    return a
                };
                this.clearTime(a);
                a = this.add(a, this.DAY, b);
                if (a.getHours() === 1) {
                    this.clearTime(a)
                };
                break;
            case this.WEEK:
                this.clearTime(a);
                var f = a.getDay();
                a = this.add(a, this.DAY, e - f + 7 * (b - (e <= f ? 0 : 1)));
                if (a.getDay() !== e) {
                    a = this.add(a, this.HOUR, 1)
                } else {
                    this.clearTime(a)
                };
                break;
            case this.MONTH:
                a = this.add(a, this.MONTH, b);
                a.setDate(1);
                this.clearTime(a);
                break;
            case this.QUARTER:
                a = this.add(a, this.MONTH, (b - 1) * 3 + (3 - a.getMonth() % 3));
                this.clearTime(a);
                a.setDate(1);
                break;
            case this.YEAR:
                a = new Date(a.getFullYear() + b, 0, 1);
                break;
            default:
                throw new Error('Invalid date unit' + d);
        }
        return a
    },
    getNumberOfMsFromTheStartOfDay: function(a) {
        return a - this.clearTime(a, !0) || 86400000
    },
    getNumberOfMsTillTheEndOfDay: function(a) {
        return this.getStartOfNextDay(a, !0) - a
    },
    getStartOfNextDay: function(a, c, d) {
        var b = this.add(d ? a : this.clearTime(a, c), this.DAY, 1);
        if (b.getDate() == a.getDate()) {
            var e = this.add(this.clearTime(a, c), this.DAY, 2).getTimezoneOffset();
            var f = a.getTimezoneOffset();
            b = this.add(b, this.MINUTE, f - e)
        }
        return b
    },
    getEndOfPreviousDay: function(b, c) {
        var a = c ? b : this.clearTime(b, !0);
        if (a - b) {
            return a
        } else {
            return this.add(a, this.DAY, -1)
        }
    },
    timeSpanContains: function(c, d, a, b) {
        return a - c >= 0 && d - b >= 0
    },
    compareWithPrecision: function(a, b, d) {
        var c = Sch.util.Date,
            e = Ext.Date,
            f;
        switch (d) {
            case c.DAY:
                a = Number(e.format(a, 'Ymd'));
                b = Number(e.format(b, 'Ymd'));
                break;
            case c.WEEK:
                a = Number(e.format(a, 'YmW'));
                b = Number(e.format(b, 'YmW'));
                break;
            case c.MONTH:
                a = Number(e.format(a, 'Ym'));
                b = Number(e.format(b, 'Ym'));
                break;
            case c.QUARTER:
                a = a.getFullYear() * 4 + Math.floor(a.getMonth() / 3);
                b = b.getFullYear() * 4 + Math.floor(b.getMonth() / 3);
                break;
            case c.YEAR:
                a = a.getFullYear();
                b = b.getFullYear();
                break;
            default:
            case c.MILLI:
            case c.SECOND:
            case c.MINUTE:
            case c.HOUR:
                d = d && this.getUnitDurationInMs(d) || 1;
                a = Math.floor(a.valueOf() / d);
                b = Math.floor(b.valueOf() / d);
                break;
        }
        a < b && (f = -1) || a > b && (f = +1) || (f = 0);
        return f
    },
    getValueInUnits: function(a, b) {
        switch (b) {
            case this.YEAR:
                return a.getFullYear();
            case this.QUARTER:
                return Math.floor(a.getMonth() / 3) + 1;
            case this.MONTH:
                return a.getMonth();
            case this.WEEK:
                return Ext.Date.getWeekOfYear(a);
            case this.DAY:
                return a.getDate();
            case this.HOUR:
                return a.getHours();
            case this.MINUTE:
                return a.getMinutes();
            case this.SECOND:
                return a.getSeconds();
        }
    },
    setValueInUnits: function(d, e, c) {
        var b = Ext.Date.clone(d),
            a;
        switch (e) {
            case this.YEAR:
                a = 'setFullYear';
                break;
            case this.MONTH:
                a = 'setMonth';
                break;
            case this.DAY:
                a = 'setDate';
                break;
            case this.HOUR:
                a = 'setHours';
                break;
            case this.MINUTE:
                a = 'setMinutes';
                break;
            case this.SECOND:
                a = 'setSeconds';
                break;
            case this.MILLI:
                a = 'setMilliseconds';
                break;
        }
        b[a](c);
        return b
    },
    getSubUnit: function(a) {
        switch (a) {
            case this.YEAR:
                return this.MONTH;
            case this.MONTH:
                return this.DAY;
            case this.DAY:
                return this.HOUR;
            case this.HOUR:
                return this.MINUTE;
            case this.MINUTE:
                return this.SECOND;
            case this.SECOND:
                return this.MILLI;
        }
    },
    setValueInSubUnits: function(c, a, b) {
        a = this.getSubUnit(a);
        return this.setValueInUnits(c, a, b)
    },
    mergeDates: function(d, b, c) {
        var a = Ext.Date.clone(d);
        switch (c) {
            case this.YEAR:
                a.setFullYear(b.getFullYear());
            case this.MONTH:
                a.setMonth(b.getMonth());
            case this.WEEK:
            case this.DAY:
                if (c === this.WEEK) {
                    a = this.add(a, this.DAY, b.getDay() - a.getDay())
                } else {
                    a.setDate(b.getDate())
                };
            case this.HOUR:
                a.setHours(b.getHours());
            case this.MINUTE:
                a.setMinutes(b.getMinutes());
            case this.SECOND:
                a.setSeconds(b.getSeconds());
            case this.MILLI:
                a.setMilliseconds(b.getMilliseconds());
        }
        return a
    },
    splitToSubUnits: function(c, d, a, b) {
        a = a || 1;
        b = arguments.length < 4 ? 1 : b;
        switch (d) {
            case this.MONTH:
                return this.splitMonth(c, a, b);
            case this.WEEK:
            case this.DAY:
                return this.splitDay(c, a);
            default:
                break;
        }
    },
    splitYear: function(e, d) {
        var b = this.clearTime(e, !0);
        b.setMonth(0);
        b.setDate(1);
        var c = [];
        for (var a = 0; a <= 12; a = a + d) {
            c.push(this.add(b, this.MONTH, a))
        }
        return c
    },
    splitMonth: function(h, f, e) {
        var a = this.clearTime(h, !0);
        a.setDate(1);
        a = this.add(a, this.DAY, e - a.getDay());
        var b = Ext.Date.clone(a);
        var g = this.add(a, this.MONTH, 1);
        var d = [];
        for (var c = 0; b.getTime() < g.getTime(); c = c + f) {
            b = this.add(a, this.WEEK, c);
            d.push(b)
        }
        return d
    },
    splitWeek: function(d, f, e) {
        var b = this.add(d, this.DAY, e - d.getDay());
        b = this.clearTime(b);
        var c = [];
        for (var a = 0; a <= 7; a = a + f) {
            c.push(this.add(b, this.DAY, a))
        }
        return c
    },
    splitDay: function(d, c) {
        var e = this.clearTime(d, !0);
        var b = [];
        for (var a = 0; a <= 24; a = a + c) {
            b.push(this.add(e, this.HOUR, a))
        }
        return b
    },
    splitHour: function(e, d) {
        var a = new Date(e.getTime());
        a.setMinutes(0);
        a.setSeconds(0);
        a.setMilliseconds(0);
        var c = [];
        for (var b = 0; b <= 60; b = b + d) {
            c.push(this.add(a, this.MINUTE, b))
        }
        return c
    },
    splitMinute: function(e, d) {
        var b = Ext.Date.clone(e);
        b.setSeconds(0);
        b.setMilliseconds(0);
        var c = [];
        for (var a = 0; a <= 60; a = a + d) {
            c.push(this.add(b, this.SECOND, a))
        }
        return c
    },
    clearTime: function(a, b) {
        if (a.getHours() > 0 || a.getMinutes() > 0 || a.getSeconds() > 0) {
            return Ext.Date.clearTime(a, b)
        }
        return b ? Ext.Date.clone(a) : a
    },
    getWeekNumber: function(b) {
        var a = new Date(b.valueOf());
        var d = (b.getDay() + 6) % 7;
        a.setDate(a.getDate() - d + 3);
        var c = a.valueOf();
        a.setMonth(0, 1);
        if (a.getDay() != 4) {
            a.setMonth(0, 1 + (4 - a.getDay() + 7) % 7)
        }
        return 1 + Math.ceil((c - a) / 604800000)
    },
    getWeekStartDate: function(c, a) {
        var b = this.setDateToMidday(c, !0);
        a = typeof a !== 'number' ? 1 : a;
        while (b.getDay() !== a) {
            b = Sch.util.Date.add(b, Sch.util.Date.DAY, -1)
        }
        return b
    },
    getWeekEndDate: function(c, a) {
        var b = this.setDateToMidday(c, !0);
        a = typeof a !== 'number' ? 0 : a;
        while (b.getDay() !== a) {
            b = Sch.util.Date.add(b, Sch.util.Date.DAY, 1)
        }
        return b
    },
    setDateToHours: function(a, c, b) {
        if (c) {
            return new Date(a.getFullYear(), a.getMonth(), a.getDate(), b)
        }
        a.setHours(b);
        a.setMinutes(0);
        a.setSeconds(0);
        a.setMilliseconds(0);
        return a
    },
    setDateToMidnight: function(b, a) {
        return this.setDateToHours(b, a, 0)
    },
    setDateToMidday: function(b, a) {
        return this.setDateToHours(b, a, 12)
    },
    isLaterDate: function(b, a) {
        return !this.isSameDate(b, a) && b > a
    },
    isSameDate: function(b, a) {
        return b.getFullYear() === a.getFullYear() && b.getMonth() === a.getMonth() && b.getDate() === a.getDate()
    },
    isEarlierDate: function(b, a) {
        return !this.isSameDate(b, a) && b < a
    }
}, 1, 0, 0, 0, 0, [
    [Sch.mixin.Localizable.prototype.mixinId || Sch.mixin.Localizable.$className, Sch.mixin.Localizable]
], [Sch.util, 'Date'], 0);
Ext.cmd.derive('Sch.model.Range', Sch.model.Customizable, {
    idProperty: 'Id',
    isRangeModel: !0,
    startDateField: 'StartDate',
    endDateField: 'EndDate',
    nameField: 'Name',
    clsField: 'Cls',
    customizableFields: [{
        name: 'StartDate',
        type: 'date',
        dateFormat: 'c'
    }, {
        name: 'EndDate',
        type: 'date',
        dateFormat: 'c'
    }, {
        name: 'Cls',
        type: 'string'
    }, {
        name: 'Name',
        type: 'string'
    }],
    setStartDate: function(c, d) {
        var b = this.getEndDate();
        var a = this.getStartDate();
        this.beginEdit();
        this.set(this.startDateField, c);
        if (d === !0 && b && a) {
            this.setEndDate(Sch.util.Date.add(c, Sch.util.Date.MILLI, b - a))
        }
        this.endEdit()
    },
    setEndDate: function(c, d) {
        var a = this.getStartDate();
        var b = this.getEndDate();
        this.beginEdit();
        this.set(this.endDateField, c);
        if (d === !0 && a && b) {
            this.setStartDate(Sch.util.Date.add(c, Sch.util.Date.MILLI, -(b - a)))
        }
        this.endEdit()
    },
    setStartEndDate: function(a, b) {
        this.beginEdit();
        this.set(this.startDateField, a);
        this.set(this.endDateField, b);
        this.endEdit()
    },
    getDates: function() {
        var b = [],
            d = this.getEndDate();
        if (this.isScheduled()) {
            var c = Ext.Date.clearTime(this.getStartDate(), !0);
            if (d - this.getStartDate() === 0) {
                b.push(c)
            } else {
                for (var a = c; a < d; a = Sch.util.Date.add(a, Sch.util.Date.DAY, 1)) {
                    b.push(a)
                }
            }
        }
        return b
    },
    forEachDate: function(b, a) {
        return Ext.Array.each(this.getDates(), b, a)
    },
    isScheduled: function() {
        var a = this;
        return Boolean(a.getStartDate() && a.getEndDate() && a.areDatesValid())
    },
    isValid: function() {
        var d = this,
            a = Sch.model.Customizable.prototype.isValid.call(this),
            b, c;
        if (a) {
            b = d.getStartDate(), c = d.getEndDate();
            a = !b || !c || c - b >= 0
        }
        return a
    },
    areDatesValid: function() {
        var c = this,
            a = c.getStartDate(),
            b = c.getEndDate();
        return !a || !b || b - a >= 0
    },
    shift: function(b, a) {
        this.setStartEndDate(Sch.util.Date.add(this.getStartDate(), b, a), Sch.util.Date.add(this.getEndDate(), b, a))
    },
    fullCopy: function() {
        return this.copy.apply(this, arguments)
    },
    intersectsRange: function(c, d) {
        var a = this.getStartDate();
        var b = this.getEndDate();
        return a && b && Sch.util.Date.intersectSpans(a, b, c, d)
    }
}, 0, 0, 0, 0, 0, 0, [Sch.model, 'Range'], 0);
Ext.cmd.derive('Sch.data.Calendar', Ext.data.Store, {
    model: 'Sch.model.CalendarDay',
    daysPerMonth: 30,
    daysPerWeek: 7,
    hoursPerDay: 24,
    unitsInMs: null,
    defaultNonWorkingTimeCssCls: 'sch-nonworkingtime',
    weekendsAreWorkdays: !1,
    weekendFirstDay: 6,
    weekendSecondDay: 0,
    holidaysCache: null,
    availabilityIntervalsCache: null,
    daysIndex: null,
    weekAvailability: null,
    defaultWeekAvailability: null,
    nonStandardWeeksByStartDate: null,
    nonStandardWeeksStartDates: null,
    calendarId: null,
    parent: null,
    defaultAvailability: ['00:00-24:00'],
    name: null,
    suspendCacheUpdate: 0,
    availabilitySearchLimit: 1825,
    inheritableStatics: {
        getCalendar: function(a) {
            if (a instanceof Sch.data.Calendar) {
                return a
            }
            return Ext.data.StoreManager.lookup('GNT_CALENDAR:' + a)
        },
        getAllCalendars: function() {
            var a = [];
            Ext.data.StoreManager.each(function(b) {
                if (b instanceof Sch.data.Calendar) {
                    a.push(b)
                }
            });
            return a
        },
        removeAll: function() {
            var a = Ext.data.StoreManager;
            a.each(function(b) {
                if (b instanceof Sch.data.Calendar) {
                    a.unregister(b);
                    Ext.destroy(b)
                }
            })
        }
    },
    constructor: function(a) {
        a = a || {};
        var c = a.parent;
        delete a.parent;
        var b = a.calendarId;
        delete a.calendarId;
        Ext.data.Store.prototype.constructor.apply(this, arguments);
        this.setParent(c);
        this.setCalendarId(b);
        this.unitsInMs = {
            MILLI: 1,
            SECOND: 1000,
            MINUTE: 60 * 1000,
            HOUR: 60 * 60 * 1000,
            DAY: this.hoursPerDay * 60 * 60 * 1000,
            WEEK: this.daysPerWeek * this.hoursPerDay * 60 * 60 * 1000,
            MONTH: this.daysPerMonth * this.hoursPerDay * 60 * 60 * 1000,
            QUARTER: 3 * this.daysPerMonth * 24 * 60 * 60 * 1000,
            YEAR: 4 * 3 * this.daysPerMonth * 24 * 60 * 60 * 1000
        };
        this.defaultWeekAvailability = this.getDefaultWeekAvailability();
        this.on({
            update: this.onCalendarDataChange,
            add: this.onCalendarDataChange,
            remove: this.onCalendarDataChange,
            filter: this.onCalendarDataChange,
            sort: this.onCalendarDataChange,
            clear: this.onCalendarDataChange,
            refresh: this.onCalendarDataChange,
            write: this.onCalendarDataChange,
            scope: this
        });
        this.clearCache()
    },
    onCalendarDataChange: function() {
        this.clearCache()
    },
    getCalendarId: function() {
        return this.calendarId
    },
    setCalendarId: function(a) {
        if (this.calendarId != null) {
            Ext.data.StoreManager.unregister(this)
        }
        this.calendarId = a;
        if (a != null) {
            this.storeId = 'GNT_CALENDAR:' + a;
            Ext.data.StoreManager.register(this)
        } else {
            this.storeId = null
        }
        var b = this.proxy;
        if (b && b.extraParams) {
            b.extraParams.calendarId = a
        }
    },
    getDefaultWeekAvailability: function() {
        var b = this.defaultAvailability;
        var e = this.weekendFirstDay;
        var d = this.weekendSecondDay;
        var c = [];
        for (var a = 0; a < 7; a++) {
            c.push(this.weekendsAreWorkdays || a != e && a != d ? new this.model({
                Type: 'WEEKDAY',
                Weekday: a,
                Availability: b && b.slice() || [],
                IsWorkingDay: !0
            }) : new this.model({
                Type: 'WEEKDAY',
                Weekday: a,
                Availability: []
            }))
        }
        return c
    },
    resetCache: function() {
        if (this.suspendCacheUpdate > 0) {
            return
        }
        this.holidaysCache = {};
        this.availabilityIntervalsCache = {};
        var d = this.daysIndex = {};
        var c = this.weekAvailability = [];
        var b = this.nonStandardWeeksStartDates = [];
        var a = this.nonStandardWeeksByStartDate = {};
        this.each(function(e) {
            var n = e.getId();
            var g = /^(\d)-(\d\d\d\d\/\d\d\/\d\d)-(\d\d\d\d\/\d\d\/\d\d)$/.exec(n);
            var k = /^WEEKDAY:(\d+)$/.exec(n);
            var l = e.getType();
            var f = e.getWeekday();
            if (l == 'WEEKDAYOVERRIDE' || g) {
                var i, j;
                if (l == 'WEEKDAYOVERRIDE') {
                    i = e.getOverrideStartDate();
                    j = e.getOverrideEndDate()
                }
                if (g) {
                    i = Ext.Date.parse(g[2], 'Y/m/d');
                    j = Ext.Date.parse(g[3], 'Y/m/d');
                    f = g[1]
                }
                if (i && j && f != null) {
                    var h = i - 0;
                    if (!a[h]) {
                        a[h] = {
                            startDate: new Date(i),
                            endDate: new Date(j),
                            name: e.getName(),
                            weekAvailability: [],
                            mainDay: null
                        };
                        b.push(h)
                    }
                    if (f >= 0) {
                        a[h].weekAvailability[f] = e
                    } else {
                        a[h].mainDay = e
                    }
                }
            } else {
                if (l == 'WEEKDAY' || k) {
                    if (k) {
                        f = k[1]
                    }
                    if (f != null) {
                        if (f < 0 || f > 6) {
                            throw new Error('Incorrect week day index')
                        }
                        c[f] = e
                    }
                } else {
                    var m = e.getDate();
                    if (m) {
                        d[m - 0] = e
                    }
                }
            }
        });
        b.sort(function(a, b) {
            return a - b
        })
    },
    clearCache: function() {
        if (this.suspendCacheUpdate > 0) {
            return
        }
        this.resetCache();
        this.fireEvent('calendarchange', this)
    },
    intersectsWithCurrentWeeks: function(a, b) {
        var c = !1;
        this.forEachNonStandardWeek(function(f) {
            var d = f.startDate;
            var e = f.endDate;
            if (d <= a && a < e || d < b && b <= e) {
                c = !0;
                return !1
            }
        });
        return c
    },
    addNonStandardWeek: function(a, b, g, e) {
        a = Ext.Date.clearTime(new Date(a));
        b = Ext.Date.clearTime(new Date(b));
        if (this.intersectsWithCurrentWeeks(a, b)) {
            throw new Error('Can not add intersecting week')
        }
        var f = this.model;
        var d = [];
        Ext.Array.each(g, function(c, i) {
            if (c && c.isCalendarDayModel) {
                c.setType('WEEKDAYOVERRIDE');
                c.setOverrideStartDate(a);
                c.setOverrideEndDate(b);
                c.setWeekday(i);
                c.setName(e || 'Week override');
                d.push(c)
            } else {
                if (Ext.isArray(c)) {
                    var h = new f();
                    h.setType('WEEKDAYOVERRIDE');
                    h.setOverrideStartDate(a);
                    h.setOverrideEndDate(b);
                    h.setWeekday(i);
                    h.setName(e || 'Week override');
                    h.setAvailability(c);
                    d.push(h)
                }
            }
        });
        var c = new f();
        c.setType('WEEKDAYOVERRIDE');
        c.setOverrideStartDate(a);
        c.setOverrideEndDate(b);
        c.setWeekday(-1);
        c.setName(e || 'Week override');
        d.push(c);
        this.add(d)
    },
    getNonStandardWeekByStartDate: function(a) {
        return this.nonStandardWeeksByStartDate[Ext.Date.clearTime(new Date(a)) - 0] || null
    },
    getNonStandardWeekByDate: function(a) {
        a = Ext.Date.clearTime(new Date(a)) - 0;
        var d = this.nonStandardWeeksStartDates;
        var e = this.nonStandardWeeksByStartDate;
        for (var c = 0; c < d.length; c++) {
            var b = e[d[c]];
            if (b.startDate > a) {
                break
            }
            if (b.startDate <= a && a <= b.endDate) {
                return b
            }
        }
        return null
    },
    removeNonStandardWeek: function(a) {
        a = Ext.Date.clearTime(new Date(a)) - 0;
        var b = this.getNonStandardWeekByStartDate(a);
        if (!b) {
            return
        }
        this.remove(Ext.Array.clean(b.weekAvailability).concat(b.mainDay))
    },
    forEachNonStandardWeek: function(e, d) {
        var f = this;
        var b = this.nonStandardWeeksStartDates;
        var c = this.nonStandardWeeksByStartDate;
        for (var a = 0; a < b.length; a++) {
            if (e.call(d || f, c[b[a]]) === !1) {
                return !1
            }
        }
    },
    setWeekendsAreWorkDays: function(a) {
        if (a !== this.weekendsAreWorkdays) {
            this.weekendsAreWorkdays = a;
            this.defaultWeekAvailability = this.getDefaultWeekAvailability();
            this.clearCache()
        }
    },
    areWeekendsWorkDays: function() {
        return this.weekendsAreWorkdays
    },
    getCalendarDay: function(a) {
        a = typeof a == 'number' ? new Date(a) : a;
        return this.getOverrideDay(a) || this.getWeekDay(a.getDay(), a) || this.getDefaultCalendarDay(a.getDay())
    },
    getOverrideDay: function(a) {
        return this.getOwnCalendarDay(a) || this.parent && this.parent.getOverrideDay(a) || null
    },
    getOwnCalendarDay: function(a) {
        a = typeof a == 'number' ? new Date(a) : a;
        return this.daysIndex[Ext.Date.clearTime(a, !0) - 0]
    },
    getWeekDay: function(a, b) {
        if (b) {
            var c = this.getNonStandardWeekByDate(b);
            if (c && c.weekAvailability[a]) {
                return c.weekAvailability[a]
            }
        }
        return this.weekAvailability[a] || this.parent && this.parent.getWeekDay(a, b) || null
    },
    getDefaultCalendarDay: function(a) {
        if (!this.hasOwnProperty('defaultAvailability') && !this.hasOwnProperty('weekendsAreWorkdays') && this.parent) {
            return this.parent.getDefaultCalendarDay(a)
        }
        return this.defaultWeekAvailability[a]
    },
    isHoliday: function(a) {
        var b = a - 0;
        var c = this.holidaysCache;
        if (c[b] != null) {
            return c[b]
        }
        a = typeof a == 'number' ? new Date(a) : a;
        var d = this.getCalendarDay(a);
        if (!d) {
            throw new Error("Can't find day for " + a)
        }
        return c[b] = !d.getIsWorkingDay()
    },
    isWeekend: function(b) {
        var a = b.getDay();
        return a === this.weekendFirstDay || a === this.weekendSecondDay
    },
    isWorkingDay: function(a) {
        return !this.isHoliday(a)
    },
    convertMSDurationToUnit: function(a, b) {
        return a / this.unitsInMs[Sch.util.Date.getNameOfUnit(b)]
    },
    convertDurationToMs: function(a, b) {
        return a * this.unitsInMs[Sch.util.Date.getNameOfUnit(b)]
    },
    convertDuration: function(a, b, d) {
        var e = this,
            c = a;
        if (b != d) {
            c = e.convertMSDurationToUnit(e.convertDurationToMs(a, b), d)
        }
        return c
    },
    getHolidaysRanges: function(d, c, i) {
        if (d > c) {
            Ext.Error.raise("startDate can't be bigger than endDate")
        }
        d = Ext.Date.clearTime(d, !0);
        c = c - Ext.Date.clearTime(c, !0) > 0 ? Sch.util.Date.getStartOfNextDay(c, !0, !0) : c;
        var e = [],
            a, b;
        for (b = d; b < c; b = Sch.util.Date.getNext(b, Sch.util.Date.DAY, 1)) {
            if (this.isHoliday(b) || this.weekendsAreWorkdays && i && this.isWeekend(b)) {
                var h = this.getCalendarDay(b);
                var f = h && h.getCls() || this.defaultNonWorkingTimeCssCls;
                var g = Sch.util.Date.getNext(b, Sch.util.Date.DAY, 1);
                if (!a) {
                    a = new Sch.model.Range({
                        StartDate: b,
                        EndDate: g,
                        Cls: f
                    })
                } else {
                    if (a.getCls() == f) {
                        a.setEndDate(g)
                    } else {
                        e.push(a);
                        a = new Sch.model.Range({
                            StartDate: b,
                            EndDate: g,
                            Cls: f
                        })
                    }
                }
            } else {
                if (a) {
                    e.push(a);
                    a = null
                }
            }
        }
        if (a) {
            e.push(a)
        }
        return e
    },
    forEachAvailabilityInterval: function(f, p, l) {
        l = l || this;
        var q = this;
        var b = f.startDate;
        var c = f.endDate;
        var a = f.isForward !== !1;
        if (a ? !b : !c) {
            throw new Error('At least `startDate` or `endDate` is required, depending from the `isForward` option')
        }
        var d = new Date(a ? b : c);
        var e = Sch.util.Date;
        if (a) {
            if (!c) {
                c = e.add(b, e.DAY, f.availabilitySearchLimit || this.availabilitySearchLimit || 5 * 365)
            }
        } else {
            if (!b) {
                b = e.add(c, e.DAY, -(f.availabilitySearchLimit || this.availabilitySearchLimit || 5 * 365))
            }
        }
        var h = !1;
        while (a ? d < c : d > b) {
            var k = this.getAvailabilityIntervalsFor(d - (a ? 0 : 1), a ? h : !1);
            for (var g = a ? 0 : k.length - 1; a ? g < k.length : g >= 0; a ? g++ : g--) {
                var m = k[g];
                var i = m.startDate;
                var j = m.endDate;
                if (i >= c || j <= b) {
                    continue
                }
                var n = i < b ? b : i;
                var o = j > c ? c : j;
                if (p.call(l, n, o) === !1) {
                    return !1
                }
            }
            d = a ? e.getStartOfNextDay(d, !1, h) : e.getEndOfPreviousDay(d, h);
            h = !0
        }
    },
    calculateDuration: function(b, c, d) {
        var a = 0;
        this.forEachAvailabilityInterval({
            startDate: b,
            endDate: c
        }, function(e, f) {
            var g = e.getTimezoneOffset() - f.getTimezoneOffset();
            a += f - e + g * 60 * 1000
        });
        return this.convertMSDurationToUnit(a, d)
    },
    calculateEndDate: function(b, a, f) {
        if (!a) {
            return new Date(b)
        }
        var e = Sch.util.Date,
            c;
        a = this.convertDurationToMs(a, f);
        var d = a === 0 && Ext.Date.clearTime(b, !0) - b === 0 ? e.add(b, Sch.util.Date.DAY, -1) : b;
        this.forEachAvailabilityInterval({
            startDate: d
        }, function(d, e) {
            var g = e - d;
            var h = d.getTimezoneOffset() - e.getTimezoneOffset();
            if (g >= a) {
                c = new Date(d - 0 + a);
                return !1
            } else {
                a -= g + h * 60 * 1000
            }
        });
        return c
    },
    calculateStartDate: function(c, a, d) {
        if (!a) {
            return new Date(c)
        }
        var b;
        a = this.convertDurationToMs(a, d);
        this.forEachAvailabilityInterval({
            endDate: c,
            isForward: !1
        }, function(g, e) {
            var f = e - g;
            if (f >= a) {
                b = new Date(e - a);
                return !1
            } else {
                a -= f
            }
        });
        return b
    },
    skipNonWorkingTime: function(a, b) {
        var c = !1;
        this.forEachAvailabilityInterval(b ? {
            startDate: a
        } : {
            endDate: a,
            isForward: !1
        }, function(d, e) {
            a = b ? d : e;
            c = !0;
            return !1
        });
        if (!c) {
            throw new Error('skipNonWorkingTime: Cannot skip non-working time, please ensure that this calendar has any working period of time specified')
        }
        return new Date(a)
    },
    skipWorkingTime: function(b, a, c) {
        return a >= 0 ? this.calculateEndDate(b, a, c) : this.calculateStartDate(b, -a, c)
    },
    getAvailabilityIntervalsFor: function(a, b) {
        if (b) {
            a = a.valueOf()
        } else {
            if (a instanceof Date) {
                a = (new Date(a.getFullYear(), a.getMonth(), a.getDate())).valueOf()
            } else {
                a = Ext.Date.clearTime(new Date(a)).valueOf()
            }
        }
        return this.availabilityIntervalsCache[a] = this.availabilityIntervalsCache[a] || this.getCalendarDay(a).getAvailabilityIntervalsFor(a)
    },
    isChildOf: function(c) {
        var a = this,
            b = !1;
        while (a && !b) {
            b = a === c;
            a = a.parent
        }
        return b
    },
    getParentableCalendars: function() {
        var b = this,
            a = [],
            c = Sch.data.Calendar.getAllCalendars();
        Ext.Array.each(c, function(c) {
            if (c !== b && !c.isChildOf(b)) {
                a.push({
                    Id: c.calendarId,
                    Name: c.name || c.calendarId
                })
            }
        });
        return a
    },
    setParent: function(d) {
        var a = Sch.data.Calendar.getCalendar(d);
        if (d && !a) {
            throw new Error('Invalid parent specified for the calendar')
        }
        if (this.parent != a) {
            var c = this.proxy;
            var e = {
                calendarchange: this.onParentCalendarChange,
                destroy: this.onParentDestroy,
                scope: this
            };
            var b = this.parent;
            if (b) {
                b.un(e)
            }
            this.parent = a;
            if (a) {
                a.on(e)
            }
            if (c && c.extraParams) {
                c.extraParams.parentId = a ? a.calendarId : null
            }
            this.clearCache();
            this.fireEvent('parentchange', this, a, b)
        }
    },
    onParentCalendarChange: function() {
        this.clearCache()
    },
    onParentDestroy: function() {
        this.setParent(null)
    },
    isAvailabilityIntersected: function(h, j, k) {
        var g, c, f, b;
        for (var a = 0; a < 7; a++) {
            g = this.getWeekDay(a) || this.getDefaultCalendarDay(a);
            f = h.getWeekDay(a) || h.getDefaultCalendarDay(a);
            if (!g || !f) {
                continue
            }
            c = g.getAvailability();
            b = f.getAvailability();
            for (var d = 0, m = c.length; d < m; d++) {
                for (var e = 0, l = b.length; e < l; e++) {
                    if (b[e].startTime < c[d].endTime && b[e].endTime > c[d].startTime) {
                        return !0
                    }
                }
            }
        }
        var i = !1;
        this.forEachNonStandardWeek(function(a) {
            if (a.startDate >= k) {
                return !1
            }
            if (j < a.endDate) {
                i = !0;
                return !1
            }
        });
        return i
    }
}, 1, 0, 0, 0, ['store.calendar'], [
    [Sch.data.mixin.UniversalModelGetter.prototype.mixinId || Sch.data.mixin.UniversalModelGetter.$className, Sch.data.mixin.UniversalModelGetter],
    [Robo.data.Store.prototype.mixinId || Robo.data.Store.$className, Robo.data.Store]
], [Sch.data, 'Calendar'], 0);
Ext.cmd.derive('Sch.model.DependencyBase', Sch.model.Customizable, {
    isDependencyModel: !0,
    inheritableStatics: {
        Type: {
            StartToStart: 0,
            StartToEnd: 1,
            EndToStart: 2,
            EndToEnd: 3
        }
    },
    idProperty: 'Id',
    customizableFields: [{
        name: 'From'
    }, {
        name: 'To'
    }, {
        name: 'Type',
        type: 'int',
        defaultValue: 2
    }, {
        name: 'Cls',
        defaultValue: ''
    }, {
        name: 'Bidirectional',
        type: 'boolean'
    }, {
        name: 'FromSide',
        type: 'string'
    }, {
        name: 'ToSide',
        type: 'string'
    }, {
        name: 'Highlighted',
        type: 'string',
        persist: !1,
        defaultValue: ''
    }],
    fromField: 'From',
    toField: 'To',
    typeField: 'Type',
    clsField: 'Cls',
    bidirectionalField: 'Bidirectional',
    highlightedField: 'Highlighted',
    constructor: function(a) {
        var b = this;
        Sch.model.Customizable.prototype.constructor.apply(this, arguments);
        if (a) {
            if (a[b.fromField] && a[b.fromField].isRangeModel) {
                b.setSourceEvent(a[b.fromField]);
                delete a.fromField
            }
            if (a[b.toField] && a[b.toField].isRangeModel) {
                b.setTargetEvent(a[b.toField]);
                delete a.toField
            }
        }
    },
    getEventStore: function() {
        return this.store.getEventStore()
    },
    getSourceEvent: function(b) {
        var a = this;
        return (b || a.getEventStore()).getModelById(a.getSourceId())
    },
    setSourceEvent: function(a) {
        this.setSourceId(a.getId())
    },
    getTargetEvent: function(b) {
        var a = this;
        return (b || a.getEventStore()).getModelById(a.getTargetId())
    },
    setTargetEvent: function(a) {
        this.setTargetId(a.getId())
    },
    getSourceId: function() {
        return this.getFrom()
    },
    setSourceId: function(a) {
        return this.setFrom(a)
    },
    getTargetId: function() {
        return this.getTo()
    },
    setTargetId: function(a) {
        return this.setTo(a)
    },
    isPersistable: function() {
        var c = this,
            a = c.getSourceEvent(),
            b = c.getTargetEvent();
        return a && !a.phantom && b && !b.phantom
    },
    getDateRange: function() {
        var b = this.getSourceEvent();
        var d = this.getTargetEvent();
        if (b && d && b.isScheduled() && d.isScheduled()) {
            var e = this.self.Type;
            var a, c;
            switch (this.getType()) {
                case e.StartToStart:
                    a = b.getStartDate();
                    c = d.getStartDate();
                    break;
                case e.StartToEnd:
                    a = b.getStartDate();
                    c = d.getEndDate();
                    break;
                case e.EndToEnd:
                    a = b.getEndDate();
                    c = d.getEndDate();
                    break;
                case e.EndToStart:
                    a = b.getEndDate();
                    c = d.getStartDate();
                    break;
            }
            return {
                start: Sch.util.Date.min(a, c),
                end: Sch.util.Date.max(a, c)
            }
        }
        return null
    },
    highlight: function(a) {
        var b = this,
            c = b.getHighlighted().split(' ');
        !Ext.Array.contains(c, a) && b.setHighlighted(c.concat(a).join(' '))
    },
    unhighlight: function(a) {
        var b = this,
            c = b.getHighlighted().split(' ');
        Ext.Array.contains(c, a) && b.setHighlighted(Ext.Array.remove(c, a).join(' '))
    },
    isHighlightedWith: function(a) {
        var b = this,
            c = b.getHighlighted().split(' ');
        return Ext.Array.contains(c, a)
    }
}, 1, 0, 0, 0, 0, 0, [Sch.model, 'DependencyBase'], 0);
Ext.cmd.derive('Sch.model.Dependency', Sch.model.DependencyBase, {
    isValid: function(e) {
        var a = this,
            f = Sch.model.DependencyBase.prototype.isValid.apply(this, arguments),
            b = a.getSourceId(),
            c = a.getTargetId(),
            d = a.getType();
        return Ext.isNumber(d) && !Ext.isEmpty(b) && !Ext.isEmpty(c) && b != c
    },
    getTypeFromSides: function(e, c, d) {
        var a = this.self.Type,
            b = d ? 'right' : 'left',
            f = d ? 'left' : 'right';
        if (e === b) {
            return c === b ? a.StartToStart : a.StartToEnd
        }
        return c === f ? a.EndToEnd : a.EndToStart
    }
}, 0, 0, 0, 0, 0, 0, [Sch.model, 'Dependency'], 0);
Ext.cmd.derive('Sch.data.util.IdConsistencyManager', Ext.Base, {
    config: {
        eventStore: null,
        resourceStore: null,
        assignmentStore: null,
        dependencyStore: null
    },
    eventStoreDetacher: null,
    resourceStoreDetacher: null,
    constructor: function(a) {
        this.initConfig(a)
    },
    updateEventStore: function(b, c) {
        var a = this;
        Ext.destroyMembers(a, 'eventStoreDetacher');
        if (b) {
            a.eventStoreDetacher = b.on({
                idchanged: a.onEventIdChanged,
                scope: a,
                destroyable: !0,
                priority: 200
            })
        }
    },
    updateResourceStore: function(b, c) {
        var a = this;
        Ext.destroyMembers(a, 'resourceStoreDetacher');
        if (b) {
            a.resourceStoreDetacher = b.on({
                idchanged: a.onResourceIdChanged,
                scope: a,
                destroyable: !0,
                priority: 200
            })
        }
    },
    onEventIdChanged: function(h, i, g, f) {
        var c = this,
            d = c.getAssignmentStore(),
            e = c.getDependencyStore(),
            b, a;
        if (d) {
            b = c.getUpdateAssignmentEventIdFieldFn(d, g, f)
        }
        if (e) {
            a = c.getUpdateDependencySourceTargedIdFieldFn(e, g, f)
        }
        if (b || a) {
            h.on('update', function() {
                b && b();
                a && a()
            }, null, {
                single: !0,
                priority: 200
            })
        }
    },
    onResourceIdChanged: function(h, i, g, f) {
        var c = this,
            e = c.getEventStore(),
            a = c.getAssignmentStore(),
            b, d;
        if (e && !a) {
            b = c.getUpdateEventResourceIdFieldFn(e, g, f)
        }
        if (a) {
            d = c.getUpdateAssignmentResourceIdFieldFn(a, g, f)
        }
        if (b || a) {
            h.on('update', function() {
                b && b();
                d && d()
            }, null, {
                single: !0,
                priority: 200
            })
        }
    },
    getUpdateEventResourceIdFieldFn: function(a, d, c) {
        var b = a.getRange();
        return function() {
            Ext.Array.each(b, function(b) {
                b.getResourceId() == d && b.setResourceId(c)
            })
        }
    },
    getUpdateAssignmentEventIdFieldFn: function(b, a, d) {
        var c = b.getAssignmentsForEvent(a);
        return function() {
            Ext.Array.each(c, function(c) {
                c.getEventId() == a && c.setEventId(d)
            })
        }
    },
    getUpdateAssignmentResourceIdFieldFn: function(b, a, d) {
        var c = b.getAssignmentsForResource(a);
        return function() {
            Ext.Array.each(c, function(c) {
                c.getResourceId() == a && c.setResourceId(d)
            })
        }
    },
    getUpdateDependencySourceTargedIdFieldFn: function(c, a, b) {
        var d = c.getEventDependencies(a);
        return function() {
            Ext.Array.each(d, function(d) {
                d.getSourceId() == a && d.setSourceId(b);
                d.getTargetId() == a && d.setTargetId(b)
            })
        }
    }
}, 1, 0, 0, 0, 0, 0, [Sch.data.util, 'IdConsistencyManager'], 0);
Ext.cmd.derive('Sch.data.util.ModelPersistencyManager', Ext.Base, {
    config: {
        eventStore: null,
        resourceStore: null,
        assignmentStore: null,
        dependencyStore: null
    },
    eventStoreDetacher: null,
    resourceStoreDetacher: null,
    assignmentStoreDetacher: null,
    dependencyStoreDetacher: null,
    constructor: function(a) {
        this.initConfig(a)
    },
    updateEventStore: function(b, c) {
        var a = this;
        Ext.destroyMembers(a, 'eventStoreDetacher');
        if (b && b.autoSync) {
            a.eventStoreDetacher = b.on({
                beforesync: a.onEventStoreBeforeSync,
                scope: a,
                destroyable: !0,
                priority: 100
            })
        }
    },
    updateResourceStore: function(b, c) {
        var a = this;
        Ext.destroyMembers(a, 'resourceStoreDetacher');
        if (b && b.autoSync) {
            a.resourceStoreDetacher = b.on({
                beforesync: a.onResourceStoreBeforeSync,
                scope: a,
                destroyable: !0,
                priority: 100
            })
        }
    },
    updateAssignmentStore: function(b, c) {
        var a = this;
        Ext.destroyMembers(a, 'assignmentStoreDetacher');
        if (b && b.autoSync) {
            a.assignmentStoreDetacher = b.on({
                beforesync: a.onAssignmentStoreBeforeSync,
                scope: a,
                destroyable: !0,
                priority: 100
            })
        }
    },
    updateDependencyStore: function(b, c) {
        var a = this;
        Ext.destroyMembers(a, 'dependencyStoreDetacher');
        if (b && b.autoSync) {
            a.dependencyStoreDetacher = b.on({
                beforesync: a.onDependencyStoreBeforeSync,
                scope: a,
                destroyable: !0,
                priority: 100
            })
        }
    },
    onEventStoreBeforeSync: function(a) {
        var b = this;
        b.removeNonPersistableRecordsToCreate(a);
        return b.shallContinueSync(a)
    },
    onResourceStoreBeforeSync: function(a) {
        var b = this;
        b.removeNonPersistableRecordsToCreate(a);
        return b.shallContinueSync(a)
    },
    onAssignmentStoreBeforeSync: function(a) {
        var b = this;
        b.removeNonPersistableRecordsToCreate(a);
        return b.shallContinueSync(a)
    },
    onDependencyStoreBeforeSync: function(a) {
        var b = this;
        b.removeNonPersistableRecordsToCreate(a);
        return b.shallContinueSync(a)
    },
    removeNonPersistableRecordsToCreate: function(d) {
        var a = d.create || [],
            c, b;
        for (b = a.length - 1; b >= 0; --b) {
            c = a[b];
            if (!c.isPersistable()) {
                Ext.Array.remove(a, c)
            }
        }
        if (a.length === 0) {
            delete d.create
        }
    },
    shallContinueSync: function(a) {
        return Boolean(a.create && a.create.length > 0 || a.update && a.update.length > 0 || a.destroy && a.destroy.length > 0)
    }
}, 1, 0, 0, 0, 0, 0, [Sch.data.util, 'ModelPersistencyManager'], 0);
Ext.cmd.derive('Sch.data.util.ResourceEventsCache', Sch.util.Cache, {
    eventStore: null,
    eventStoreDetacher: null,
    resourceStoreDetacher: null,
    constructor: function(b) {
        var a = this,
            c = b.getResourceStore();
        Sch.util.Cache.prototype.constructor.call(this);

        function onEventAdd(d, c) {
            Ext.Array.each(c, function(e) {
                a.add(e.getResourceId(), e)
            })
        }

        function onEventRemove(d, c) {
            Ext.Array.each(c, function(e) {
                a.remove(e.getResourceId(), e)
            })
        }

        function onEventUpdate(h, c, i, g) {
            var e = c.resourceIdField,
                d = c.previous && e in c.previous,
                f = d && c.previous[e];
            if (d) {
                a.move(f, c.getResourceId(), c)
            }
        }

        function onEventStoreClearOrReset() {
            a.clear()
        }

        function onEventStoreResourceStoreChange(e, c, d) {
            a.clear();
            attachToResourceStore(c)
        }

        function onResourceIdChanged(e, f, d, c) {
            a.move(d, c)
        }

        function onResourceRemove(d, c) {
            Ext.Array.each(c, function(e) {
                a.clear(e)
            })
        }

        function onResourceStoreClearOrReset() {
            a.clear()
        }

        function attachToResourceStore(c) {
            Ext.destroy(a.resourceStoreDetacher);
            a.resourceStoreDetacher = c && c.on({
                idchanged: onResourceIdChanged,
                remove: onResourceRemove,
                clear: onResourceStoreClearOrReset,
                cacheresethint: onResourceStoreClearOrReset,
                rootchange: onResourceStoreClearOrReset,
                priority: 100,
                destroyable: !0
            })
        }
        a.eventStoreDetacher = b.on({
            add: onEventAdd,
            remove: onEventRemove,
            update: onEventUpdate,
            clear: onEventStoreClearOrReset,
            cacheresethint: onEventStoreClearOrReset,
            rootchange: onEventStoreClearOrReset,
            resourcestorechange: onEventStoreResourceStoreChange,
            priority: 100,
            destroyable: !0
        });
        a.eventStoreFiltersDetacher = b.getFilters().on('endupdate', onEventStoreClearOrReset, this, {
            priority: 1002,
            destroyable: !0
        });
        attachToResourceStore(c);
        a.eventStore = b
    },
    destroy: function() {
        var a = this;
        Ext.destroyMembers(a, 'eventStoreDetacher', 'eventStoreFiltersDetacher', 'resourceStoreDetacher');
        a.eventStore = null
    },
    get: function(a, b) {
        var c = this;
        a = c.key(a);
        b = b || function() {
            return Ext.Array.filter(c.eventStore.getRange(), function(c) {
                return c.getResourceId() == a
            })
        };
        return Sch.util.Cache.prototype.get.call(this, a, b)
    }
}, 1, 0, 0, 0, 0, 0, [Sch.data.util, 'ResourceEventsCache'], 0);
Ext.cmd.derive('Sch.data.mixin.EventStore', Ext.Mixin, {
    isEventStore: !0,
    resourceStore: null,
    resourceStoreDetacher: null,
    assignmentStore: null,
    resourceEventsCache: null,
    idConsistencyManager: null,
    modelPersistencyManager: null,
    mixinConfig: {
        after: {
            constructor: 'constructor',
            destroy: 'destroy'
        }
    },
    constructor: function() {
        var a = this;
        a.resourceEventsCache = a.createResourceEventsCache();
        a.idConsistencyManager = a.createIdConsistencyManager();
        a.modelPersistencyManager = a.createModelPersistencyManager()
    },
    destroy: function() {
        var a = this;
        Ext.destroyMembers(a, 'resourceEventsCache', 'idConsistencyManager', 'modelPersistencyManager')
    },
    createResourceEventsCache: function() {
        return new Sch.data.util.ResourceEventsCache(this)
    },
    createIdConsistencyManager: function() {
        var a = this;
        return new Sch.data.util.IdConsistencyManager({
            eventStore: a,
            resourceStore: a.getResourceStore(),
            assignmentStore: a.getAssignmentStore(),
            dependencyStore: a.getDependencyStore()
        })
    },
    createModelPersistencyManager: function() {
        var a = this;
        return new Sch.data.util.ModelPersistencyManager({
            eventStore: a,
            resourceStore: a.getResourceStore(),
            assignmentStore: a.getAssignmentStore(),
            dependencyStore: a.getDependencyStore()
        })
    },
    getResourceStore: function() {
        return this.resourceStore
    },
    setResourceStore: function(b) {
        var a = this,
            c = a.resourceStore;
        if (a.resourceStore) {
            a.resourceStore.setEventStore(null);
            a.idConsistencyManager && a.idConsistencyManager.setResourceStore(null);
            a.modelPersistencyManager && a.modelPersistencyManager.setResourceStore(null)
        }
        a.resourceStore = b && Ext.StoreMgr.lookup(b) || null;
        if (a.resourceStore) {
            a.modelPersistencyManager && a.modelPersistencyManager.setResourceStore(a.resourceStore);
            a.idConsistencyManager && a.idConsistencyManager.setResourceStore(a.resourceStore);
            b.setEventStore(a)
        }
        if ((c || b) && c !== b) {
            a.fireEvent('resourcestorechange', a, b, c)
        }
    },
    getAssignmentStore: function() {
        return this.assignmentStore
    },
    setAssignmentStore: function(b) {
        var a = this,
            c = a.assignmentStore;
        if (a.assignmentStore) {
            a.assignmentStore.setEventStore(null);
            a.idConsistencyManager && a.idConsistencyManager.setAssignmentStore(null);
            a.modelPersistencyManager && a.modelPersistencyManager.setAssignmentStore(null)
        }
        a.assignmentStore = b && Ext.StoreMgr.lookup(b) || null;
        if (a.assignmentStore) {
            a.modelPersistencyManager && a.modelPersistencyManager.setAssignmentStore(a.assignmentStore);
            a.idConsistencyManager && a.idConsistencyManager.setAssignmentStore(a.assignmentStore);
            a.assignmentStore.setEventStore(a);
            Ext.destroy(a.resourceEventsCache)
        } else {
            a.resourceEventsCache = a.createResourceEventsCache()
        }
        if ((c || b) && c !== b) {
            a.fireEvent('assignmentstorechange', a, b, c)
        }
    },
    getDependencyStore: function() {
        return this.dependencyStore
    },
    setDependencyStore: function(b) {
        var a = this,
            c = a.DependencyStore;
        if (a.dependencyStore) {
            a.dependencyStore.setEventStore(null);
            a.idConsistencyManager && a.idConsistencyManager.setDependencyStore(null);
            a.modelPersistencyManager && a.modelPersistencyManager.setDependencyStore(null)
        }
        a.dependencyStore = b && Ext.StoreMgr.lookup(b) || null;
        if (a.dependencyStore) {
            a.modelPersistencyManager && a.modelPersistencyManager.setDependencyStore(a.dependencyStore);
            a.idConsistencyManager && a.idConsistencyManager.setDependencyStore(a.dependencyStore);
            a.dependencyStore.setEventStore(a)
        }
        if ((c || b) && c !== b) {
            a.fireEvent('dependencystorechange', a, b, c)
        }
    },
    isDateRangeAvailable: function(e, g, a, c) {
        var f = Sch.util.Date,
            d = this.getEventsForResource(c),
            b = !0;
        if (Sch.model.Assignment && a instanceof Sch.model.Assignment) {
            a = a.getEvent(this)
        }
        Ext.each(d, function(d) {
            b = a === d || !f.intersectSpans(e, g, d.getStartDate(), d.getEndDate());
            return b
        });
        return b
    },
    getEventsInTimeSpan: function(b, d, e) {
        var c = new Ext.util.MixedCollection();
        var a = [];
        if (e !== !1) {
            var f = Sch.util.Date;
            this.forEachScheduledEvent(function(h, c, g) {
                if (f.intersectSpans(c, g, b, d)) {
                    a.push(h)
                }
            })
        } else {
            this.forEachScheduledEvent(function(g, c, f) {
                if (c - b >= 0 && d - f >= 0) {
                    a.push(g)
                }
            })
        }
        c.addAll(a);
        return c
    },
    getEventsByStartDate: function(c) {
        var b = Sch.util.Date;
        var a = [];
        this.forEachScheduledEvent(function(e, d, f) {
            if (b.compareWithPrecision(d, c, b.DAY) === 0) {
                a.push(e)
            }
        });
        return a
    },
    forEachScheduledEvent: function(b, a) {
        this.each(function(c) {
            var d = c.getStartDate(),
                e = c.getEndDate();
            if (d && e) {
                return b.call(a || this, c, d, e)
            }
        }, this)
    },
    getTotalTimeSpan: function() {
        var a = Sch.util.Date.MAX_VALUE,
            b = Sch.util.Date.MIN_VALUE,
            c = Sch.util.Date;
        this.each(function(d) {
            if (d.getStartDate()) {
                a = c.min(d.getStartDate(), a)
            }
            if (d.getEndDate()) {
                b = c.max(d.getEndDate(), b)
            }
        });
        a = a < Sch.util.Date.MAX_VALUE ? a : null;
        b = b > Sch.util.Date.MIN_VALUE ? b : null;
        this.lastTotalTimeSpan = {
            start: a || null,
            end: b || a || null
        };
        return this.lastTotalTimeSpan
    },
    filterEventsForResource: function(a, d, c) {
        var b = a.getEvents(this);
        return Ext.Array.filter(b, d, c || this)
    },
    append: function(a) {
        throw 'Must be implemented by consuming class'
    },
    getResourcesForEvent: function(b) {
        var c = this,
            d = c.getAssignmentStore(),
            e = c.getResourceStore(),
            a;
        if (d) {
            a = d.getResourcesForEvent(b)
        } else {
            if (e) {
                b = b instanceof Sch.model.Event && b || c.getModelById(b);
                a = b && e.getModelById(b.getResourceId());
                a = a && [a] || []
            } else {
                a = []
            }
        }
        return a
    },
    getEventsForResource: function(d) {
        var b = this,
            c = b.getAssignmentStore(),
            a;
        if (c) {
            a = c.getEventsForResource(d)
        } else {
            if (b.resourceEventsCache) {
                a = b.resourceEventsCache.get(d)
            } else {
                a = []
            }
        }
        return a
    },
    getAssignmentsForEvent: function(b) {
        var c = this,
            a = c.getAssignmentStore();
        return a && a.getAssignmentsForEvent(b) || []
    },
    getAssignmentsForResource: function(b) {
        var c = this,
            a = c.getAssignmentStore();
        return a && a.getAssignmentsForResource(b) || []
    },
    assignEventToResource: function(b, a) {
        var d = this,
            c = d.getAssignmentStore();
        if (c) {
            c.assignEventToResource(b, a)
        } else {
            if (Ext.isArray(a)) {
                a = a[0]
            }
            b = b instanceof Sch.model.Event && b || d.getModelById(b);
            a = a instanceof Sch.model.Resource ? a.getId() : a;
            b && b.setResourceId(a)
        }
    },
    unassignEventFromResource: function(a, b) {
        var d = this,
            c = d.getAssignmentStore();
        if (c) {
            c.unassignEventFromResource(a, b)
        } else {
            a = a instanceof Sch.model.Event && a || d.getModelById(a);
            b = b instanceof Sch.model.Resource ? b.getId() : b;
            if (a && (typeof b == 'undefined' || a.getResourceId() == b)) {
                a.setResourceId(null)
            }
        }
    },
    reassignEventFromResourceToResource: function(a, c, b) {
        var g = this,
            d = g.getAssignmentStore();
        var e = b instanceof Sch.model.Resource ? b.getId() : b;
        var h = c instanceof Sch.model.Resource ? c.getId() : c;
        if (d) {
            var f = d.getAssignmentForEventAndResource(a, c);
            if (f) {
                f.setResourceId(e)
            } else {
                d.assignEventToResource(a, b)
            }
        } else {
            a = a instanceof Sch.model.Event && a || g.getModelById(a);
            if (a.getResourceId() == h) {
                a.setResourceId(e)
            }
        }
    },
    isEventAssignedToResource: function(a, b) {
        var e = this,
            d = e.getAssignmentStore(),
            c;
        if (d) {
            c = d.isEventAssignedToResource(a, b)
        } else {
            a = a instanceof Sch.model.Event && a || e.getModelById(a);
            b = b instanceof Sch.model.Resource ? b.getId() : b;
            c = a && a.getResourceId() == b || !1
        }
        return c
    },
    removeAssignmentsForEvent: function(a) {
        var c = this,
            b = c.getAssignmentStore();
        if (b) {
            b.removeAssignmentsForEvent(a)
        } else {
            a = a instanceof Sch.model.Event && a || c.getModelById(a);
            a && a.setResourceId(null)
        }
    },
    removeAssignmentsForResource: function(a) {
        var b = this,
            c = b.getAssignmentStore(),
            d = b.getResourceStore();
        if (c) {
            c.removeAssignmentsForResource(a)
        } else {
            if (d) {
                a = a instanceof Sch.model.Resource && a || d.getModelById(a);
                a && Ext.Array.each(b.resourceEventsCache.get(a), function(b) {
                    b.setResourceId(null)
                })
            } else {
                a = a instanceof Sch.model.Resource ? a.getId() : a;
                Ext.Array.each(b.getRange(), function(b) {
                    b.getResourceId() == a && b.setResourceId(null)
                })
            }
        }
    },
    isEventPersistable: function(f) {
        var g = this,
            e = g.getAssignmentStore(),
            b, a, d, c = !0;
        if (!e) {
            b = f.getResources();
            for (a = 0, d = b.length; c && a < d; ++a) {
                c = b[a].phantom !== !0
            }
        }
        return c
    }
}, 1, 0, 0, 0, 0, 0, [Sch.data.mixin, 'EventStore'], 0);
Ext.cmd.derive('Sch.model.Event', Sch.model.Range, {
    idProperty: 'Id',
    isEventModel: !0,
    customizableFields: [{
        name: 'IconCls'
    }, {
        name: 'ResourceId'
    }, {
        name: 'Draggable',
        type: 'boolean',
        persist: !1,
        defaultValue: !0
    }, {
        name: 'Resizable',
        persist: !1,
        defaultValue: !0
    }],
    resourceIdField: 'ResourceId',
    draggableField: 'Draggable',
    resizableField: 'Resizable',
    iconClsField: 'IconCls',
    getInternalId: function() {
        return this.internalId
    },
    isHighlighted: !1,
    getEventStore: function() {
        var b = this,
            a = b.joined && b.joined[0];
        if (a && !a.isEventStore) {
            Ext.Array.sort(b.joined, function(a, b) {
                return (a.isEventStore || !1) > (b.isEventStore || !1) && -1 || 1
            });
            a = b.joined[0];
            a = a.isEventStore ? a : null
        }
        return a
    },
    getResourceStore: function() {
        var a = this.getEventStore();
        return a && a.getResourceStore()
    },
    getAssignmentStore: function() {
        var a = this.getEventStore();
        return a && a.getAssignmentStore()
    },
    getResources: function(a) {
        var b = this;
        a = a || b.getEventStore();
        return a && a.getResourcesForEvent(b) || []
    },
    forEachResource: function(d, c) {
        var b = this.getResources();
        for (var a = 0; a < b.length; a++) {
            if (d.call(c || this, b[a]) === !1) {
                return
            }
        }
    },
    getResource: function(b) {
        var d = this,
            a = null,
            c = d.getEventStore(),
            e = c && c.getResourceStore();
        b = b == null ? d.getResourceId() : b;
        if (c && (b === null || b === undefined)) {
            a = c.getResourcesForEvent(d);
            if (a.length == 1) {
                a = a[0]
            } else {
                if (a.length > 1) {
                    Ext.Error.raise('Event::getResource() is not applicable for events with multiple assignments, please use Event::getResources() instead.')
                } else {
                    a = null
                }
            }
        } else {
            if (e) {
                a = e.getModelById(b)
            }
        }
        return a
    },
    setResource: function(c) {
        var a = this,
            b = a.getEventStore();
        b && b.removeAssignmentsForEvent(a);
        a.assign(c)
    },
    assign: function(a) {
        var b = this,
            c = b.getEventStore();
        if (a && a.isResourceModel) {
            a = a.getId()
        }
        if (c) {
            c.assignEventToResource(b, a)
        } else {
            b.setResourceId(a)
        }
    },
    unassign: function(a) {
        var b = this,
            c = b.getEventStore();
        if (a && a.isResourceModel) {
            a = a.getId()
        }
        if (c) {
            c.unassignEventFromResource(b, a)
        } else {
            if (b.getResourceId() == a) {
                b.setResourceId(null)
            }
        }
    },
    reassign: function(b, a) {
        var c = this,
            d = c.getEventStore();
        if (b && b.isResourceModel) {
            b = b.getId()
        }
        if (a && a.isResourceModel) {
            a = a.getId()
        }
        if (d) {
            d.reassignEventFromResourceToResource(c, b, a)
        } else {
            c.setResourceId(a)
        }
    },
    isAssignedTo: function(a) {
        var c = this,
            d = c.getEventStore(),
            b = !1;
        if (a && a.isResourceModel) {
            a = a.getId()
        }
        if (d) {
            b = d.isEventAssignedToResource(c, a)
        } else {
            b = c.getResourceId() == a
        }
        return b
    },
    getAssignments: function() {
        var b = this,
            a = b.getEventStore();
        return a && a.getAssignmentsForEvent(b)
    },
    isDraggable: function() {
        return this.getDraggable()
    },
    isResizable: function() {
        return this.getResizable()
    },
    isPersistable: function() {
        var b = this,
            a = b.getEventStore();
        return a && a.isEventPersistable(b)
    }
}, 0, 0, 0, 0, 0, 0, [Sch.model, 'Event'], 0);
Ext.cmd.derive('Sch.data.EventStore', Ext.data.Store, {
    storeId: 'events',
    model: 'Sch.model.Event',
    config: {
        model: 'Sch.model.Event'
    },
    constructor: function(b) {
        var a = this;
        Ext.data.Store.prototype.constructor.call(this, b);
        a.resourceStore && a.setResourceStore(a.resourceStore);
        a.assignmentStore && a.setAssignmentStore(a.assignmentStore);
        if (a.getModel() !== Sch.model.Event && !(a.getModel().prototype instanceof Sch.model.Event)) {
            throw 'The model for the EventStore must subclass Sch.model.Event'
        }
    },
    append: function(a) {
        this.add(a)
    }
}, 1, 0, 0, 0, ['store.eventstore'], [
    [Sch.data.mixin.UniversalModelGetter.prototype.mixinId || Sch.data.mixin.UniversalModelGetter.$className, Sch.data.mixin.UniversalModelGetter],
    [Sch.data.mixin.CacheHintHelper.prototype.mixinId || Sch.data.mixin.CacheHintHelper.$className, Sch.data.mixin.CacheHintHelper],
    [Sch.data.mixin.EventStore.prototype.mixinId || Sch.data.mixin.EventStore.$className, Sch.data.mixin.EventStore],
    [Robo.data.Store.prototype.mixinId || Robo.data.Store.$className, Robo.data.Store]
], [Sch.data, 'EventStore'], 0);
Ext.cmd.derive('Sch.data.mixin.ResourceStore', Ext.Base, {
    eventStore: null,
    getEventStore: function() {
        return this.eventStore
    },
    setEventStore: function(b) {
        var a = this,
            c;
        if (a.eventStore !== b) {
            c = a.eventStore;
            a.eventStore = b && Ext.StoreMgr.lookup(b) || null;
            a.fireEvent('eventstorechange', a, b, c)
        }
    },
    getScheduledEventsInTimeSpan: function(c, d, a) {
        var b = [];
        var e = Sch.util.Date;
        a = a || this.getEventStore();
        Ext.Array.each(this.getRange(), function(e) {
            Ext.Array.each(a.getEventsForResource(e), function(f) {
                if (f.intersectsRange(c, d)) {
                    b.push(f)
                }
            })
        });
        return b
    }
}, 0, 0, 0, 0, 0, 0, [Sch.data.mixin, 'ResourceStore'], 0);
Ext.cmd.derive('Sch.model.Resource', Sch.model.Customizable, {
    isResourceModel: !0,
    idProperty: 'Id',
    config: Ext.versions.touch ? {
        idProperty: 'Id'
    } : null,
    nameField: 'Name',
    customizableFields: [{
        name: 'Name',
        type: 'string'
    }],
    getInternalId: function() {
        return this.internalId
    },
    getResourceStore: function() {
        return this.joined && this.joined[0]
    },
    getEventStore: function() {
        var a = this.getResourceStore();
        return a && a.getEventStore() || this.parentNode && this.parentNode.getEventStore()
    },
    getAssignmentStore: function() {
        var a = this.getEventStore();
        return a && a.getAssignmentStore()
    },
    getEvents: function(a) {
        var b = this;
        a = a || b.getEventStore();
        return a && a.getEventsForResource(b) || []
    },
    getAssignments: function() {
        var b = this,
            a = b.getEventStore();
        return a && a.getAssignmentsForResource(b)
    },
    isPersistable: function() {
        var a = this.parentNode;
        return !a || !a.phantom || a.isRoot && a.isRoot()
    },
    isAbove: function(f) {
        var d = this,
            h = d.getResourceStore(),
            g = !1,
            a, c, e, b, i;
        if (d == f) {
            g = !1
        } else {
            if (h && h.isTreeStore) {
                a = d;
                c = [];
                while (a) {
                    c.push(a);
                    a = a.parentNode
                }
                a = f;
                e = [];
                while (a) {
                    e.push(a);
                    a = a.parentNode
                }
                b = 0;
                while (b < c.length - 1 && b < e.length - 1 && c[b] == e[b]) {
                    ++b
                }
                i = c[b];
                d = c[b + 1];
                f = e[b + 1];
                g = i.indexOf(d) < i.indexOf(f)
            } else {
                g = h.indexOf(d) < h.indexOf(f)
            }
        }
        return g
    }
}, 0, 0, 0, 0, 0, 0, [Sch.model, 'Resource'], 0);
Ext.cmd.derive('Sch.data.ResourceStore', Ext.data.Store, {
    model: 'Sch.model.Resource',
    config: {
        model: 'Sch.model.Resource'
    },
    storeId: 'resources',
    constructor: function() {
        Ext.data.Store.prototype.constructor.apply(this, arguments);
        if (this.getModel() !== Sch.model.Resource && !(this.getModel().prototype instanceof Sch.model.Resource)) {
            throw 'The model for the ResourceStore must subclass Sch.model.Resource'
        }
    }
}, 1, 0, 0, 0, ['store.resourcestore'], [
    [Sch.data.mixin.UniversalModelGetter.prototype.mixinId || Sch.data.mixin.UniversalModelGetter.$className, Sch.data.mixin.UniversalModelGetter],
    [Sch.data.mixin.CacheHintHelper.prototype.mixinId || Sch.data.mixin.CacheHintHelper.$className, Sch.data.mixin.CacheHintHelper],
    [Sch.data.mixin.ResourceStore.prototype.mixinId || Sch.data.mixin.ResourceStore.$className, Sch.data.mixin.ResourceStore],
    [Robo.data.Store.prototype.mixinId || Robo.data.Store.$className, Robo.data.Store]
], [Sch.data, 'ResourceStore'], 0);
Ext.cmd.derive('Sch.patches.TreeStore', Sch.util.Patch, {
    target: 'Ext.data.TreeStore',
    minVersion: '5.1.0',
    overrides: {
        getRejectRecords: function() {
            return this.getModifiedRecords()
        },
        rejectChanges: function() {
            this.removed = this.removedNodes;
            this.callParent(arguments)
        },
        remove: function(a) {
            if (a.isModel) {
                a.remove()
            } else {
                if (a instanceof Array && a[0].isModel) {
                    for (var b = 0; b < a.length; b++) {
                        a[b].remove()
                    }
                } else {
                    this.callParent(arguments)
                }
            }
        }
    }
}, 0, 0, 0, 0, 0, 0, [Sch.patches, 'TreeStore'], 0);
Ext.cmd.derive('Sch.patches.TreeStoreInternalIdMap', Sch.util.Patch, {
    target: 'Ext.data.TreeStore',
    minVersion: '5.1.1',
    overrides: {
        registerNode: function(b, c) {
            var a = this;
            if (!a.byInternalIdMap) {
                a.byInternalIdMap = {}
            }
            a.byInternalIdMap[b.internalId] = b;
            a.callParent(arguments)
        },
        unregisterNode: function(b, c) {
            var a = this;
            if (a.byInternalIdMap) {
                delete a.byInternalIdMap[b.internalId]
            }
            a.callParent(arguments)
        },
        updateRoot: function() {
            this.byInternalIdMap = {};
            this.callParent(arguments)
        }
    }
}, 0, 0, 0, 0, 0, 0, [Sch.patches, 'TreeStoreInternalIdMap'], 0);
Ext.cmd.derive('Sch.data.mixin.FilterableTreeStore', Ext.Base, {
    isFilteredFlag: !1,
    isHiddenFlag: !1,
    treeFilter: null,
    lastTreeFilter: null,
    lastTreeHiding: null,
    allowExpandCollapseWhileFiltered: !0,
    keepExpandStateWhileFiltered: !1,
    reApplyFilterOnDataChange: !0,
    suspendIncrementalFilterRefresh: 0,
    filterGeneration: 0,
    currentFilterGeneration: null,
    dataChangeListeners: null,
    monitoringDataChange: !1,
    filterUpdateSuspended: !1,
    onClassMixedIn: function(a) {
        a.override(Sch.data.mixin.FilterableTreeStore.prototype.inheritables() || {})
    },
    initTreeFiltering: function() {
        this.treeFilter = new Ext.util.Filter({
            filterFn: this.isNodeFilteredIn,
            scope: this
        });
        this.dataChangeListeners = {
            nodeappend: this.onNeedToUpdateFilter,
            nodeinsert: this.onNeedToUpdateFilter,
            scope: this
        };
        Ext.apply(this.dataChangeListeners, {
            beforeload: this.onStoreBeforeLoad,
            load: this.onStoreLoad
        })
    },
    onStoreBeforeLoad: function() {
        this.filterUpdateSuspended = !0
    },
    onStoreLoad: function() {
        this.filterUpdateSuspended = !1;
        this.onNeedToUpdateFilter()
    },
    startDataChangeMonitoring: function() {
        if (this.monitoringDataChange) {
            return
        }
        this.monitoringDataChange = !0;
        this.on(this.dataChangeListeners)
    },
    stopDataChangeMonitoring: function() {
        if (!this.monitoringDataChange) {
            return
        }
        this.monitoringDataChange = !1;
        this.un(this.dataChangeListeners)
    },
    onNeedToUpdateFilter: function() {
        if (this.reApplyFilterOnDataChange && !this.filterUpdateSuspended && !this.suspendIncrementalFilterRefresh) {
            this.reApplyFilter()
        }
    },
    clearTreeFilter: function() {
        if (!this.isTreeFiltered()) {
            return
        }
        this.currentFilterGeneration = null;
        this.isFilteredFlag = !1;
        this.lastTreeFilter = null;
        if (!this.isTreeFiltered(!0)) {
            this.stopDataChangeMonitoring()
        }
        this.refreshNodeStoreContent();
        this.fireEvent('filter-clear', this)
    },
    reApplyFilter: function() {
        if (this.isHiddenFlag) {
            this.hideNodesBy.apply(this, this.lastTreeHiding.concat(this.isFilteredFlag))
        }
        if (this.isFilteredFlag) {
            this.filterTreeBy(this.lastTreeFilter)
        }
    },
    refreshNodeStoreContent: function() {
        var a = this,
            b = a.getFilters();
        if (b.indexOf(a.treeFilter) < 0) {
            a.addFilter(a.treeFilter)
        } else {
            this.getFilters().fireEvent('endupdate', this.getFilters())
        }
    },
    getIndexInTotalDataset: function(a) {
        var b = this.getRootNode(),
            e = -1;
        var d = this.rootVisible;
        if (!d && a == b) {
            return -1
        }
        var g = this.isTreeFiltered();
        var f = this.currentFilterGeneration;
        var c = function(h) {
            if (g && h.__filterGen != f || h.hidden) {
                if (h == a) {
                    return !1
                }
            }
            if (d || h != b) {
                e++
            }
            if (h == a) {
                return !1
            }
            if (!h.isLeaf() && h.isExpanded()) {
                var j = h.childNodes,
                    k = j.length;
                for (var i = 0; i < k; i++) {
                    if (c(j[i]) === !1) {
                        return !1
                    }
                }
            }
        };
        c(b);
        return e
    },
    isTreeFiltered: function(a) {
        return this.isFilteredFlag || a && this.isHiddenFlag
    },
    markFilteredNodes: function(o, b) {
        var p = this;
        var n = this.currentFilterGeneration;
        var a = {};
        var i = this.getRootNode(),
            l = this.rootVisible;
        var c = function(d) {
            var c = d.parentNode;
            while (c && !a[c.internalId]) {
                a[c.internalId] = !0;
                c = c.parentNode
            }
        };
        var g = b.filter;
        var h = b.scope || this;
        var f = b.shallow;
        var d = b.checkParents || f;
        var j = b.fullMatchingParents;
        var k = b.onlyParents || j;
        var m = !b.isOldFilter;
        if (k && d) {
            throw new Error("Can't combine `onlyParents` and `checkParents` options")
        }
        if (l) {
            a[i.internalId] = !0
        }
        var e = function(m) {
            if (m.hidden) {
                return
            }
            var q, p, r, n;
            if (m.isLeaf()) {
                if (g.call(h, m, a)) {
                    a[m.internalId] = !0;
                    c(m)
                }
            } else {
                if (k) {
                    q = g.call(h, m);
                    p = m.childNodes;
                    r = p.length;
                    if (q) {
                        a[m.internalId] = !0;
                        c(m);
                        if (j) {
                            m.cascadeBy(function(c) {
                                a[c.internalId] = !0
                            });
                            return
                        }
                    }
                    for (n = 0; n < r; n++) {
                        if (q && p[n].isLeaf()) {
                            a[p[n].internalId] = !0
                        } else {
                            if (!p[n].isLeaf()) {
                                e(p[n])
                            }
                        }
                    }
                } else {
                    if (d) {
                        q = g.call(h, m, a);
                        if (q) {
                            a[m.internalId] = !0;
                            c(m)
                        }
                    }
                    if (!d || !f || f && (q || m == i && !l)) {
                        p = m.childNodes;
                        r = p.length;
                        for (n = 0; n < r; n++) {
                            e(p[n])
                        }
                    }
                }
            }
        };
        e(o);
        i.cascadeBy(function(c) {
            if (m) {
                c.addedWhileFiltered = !1
            }
            if (a[c.internalId]) {
                c.__filterGen = n;
                if (!p.keepExpandStateWhileFiltered && !c.isLeaf()) {
                    c.expand()
                }
            }
        })
    },
    filterTreeBy: function(a, c) {
        this.currentFilterGeneration = this.filterGeneration++;
        var b;
        if (arguments.length == 1 && Ext.isObject(arguments[0])) {
            c = a.scope;
            b = a.filter
        } else {
            b = a;
            a = {
                filter: b,
                scope: c
            }
        }
        this.fireEvent('nodestore-datachange-start', this);
        a = a || {};
        this.markFilteredNodes(this.getRootNode(), a);
        a.isOldFilter = !0;
        this.startDataChangeMonitoring();
        this.isFilteredFlag = !0;
        this.lastTreeFilter = a;
        this.fireEvent('nodestore-datachange-end', this);
        this.fireEvent('filter-set', this);
        this.refreshNodeStoreContent()
    },
    isNodeFilteredIn: function(a) {
        var c = this.isTreeFiltered();
        var b = this.currentFilterGeneration;
        return this.loading || a.addedWhileFiltered && a.isVisible() || !Boolean(c && a.__filterGen != b || a.hidden)
    },
    hasNativeFilters: function() {
        var c = this,
            a = c.getFilters(),
            b = a.getCount();
        return b && b > 1 || a.indexOf(c.treeFilter) < 0
    },
    hideNodesBy: function(c, b, d) {
        var a = this;
        if (a.isFiltered() && a.hasNativeFilters()) {
            throw new Error("Can't hide nodes of a filtered tree store")
        }
        b = b || a;
        a.getRootNode().cascadeBy(function(e) {
            e.hidden = Boolean(c.call(b, e, a))
        });
        a.startDataChangeMonitoring();
        a.isHiddenFlag = !0;
        a.lastTreeHiding = [c, b];
        if (!d) {
            a.refreshNodeStoreContent()
        }
    },
    showAllNodes: function(a) {
        this.getRootNode().cascadeBy(function(b) {
            b.hidden = !1
        });
        this.isHiddenFlag = !1;
        this.lastTreeHiding = null;
        if (!this.isTreeFiltered(!0)) {
            this.stopDataChangeMonitoring()
        }
        if (!a) {
            this.refreshNodeStoreContent()
        }
    },
    inheritables: function() {
        return {
            onNodeExpand: function(a) {
                if (this.isTreeFiltered(!0) && a == this.getRoot()) {
                    this.callParent(arguments);
                    this.reApplyFilter()
                } else {
                    return this.callParent(arguments)
                }
            },
            onNodeCollapse: function(c, b) {
                var a = this;
                var d = a.data;
                var g = d.contains;
                var h = a.isTreeFiltered();
                var e = a.currentFilterGeneration;
                d.contains = function() {
                    var f, d, j;
                    var k = a.indexOf(c) + 1;
                    var l = !1;
                    for (var i = 0; i < b.length; i++) {
                        if (!(b[i].hidden || h && b[i].__filterGen != e) && g.call(this, b[i])) {
                            f = c;
                            while (f.parentNode) {
                                d = f;
                                do {
                                    d = d.nextSibling
                                } while (d && (d.hidden || h && d.__filterGen != e));
                                if (d) {
                                    l = !0;
                                    j = a.indexOf(d);
                                    break
                                } else {
                                    f = f.parentNode
                                }
                            }
                            if (!l) {
                                j = a.getCount()
                            }
                            a.removeAt(k, j - k);
                            break
                        }
                    }
                    return !1
                };
                this.callParent(arguments);
                if (this.isTreeFiltered()) {
                    if (a.needsLocalFilter()) {
                        b = Ext.Array.filter(b, a.filterVisible)
                    }
                    if (!b.length && a.indexOf(c) !== -1) {
                        var f = a.indexOf(c) + 1;
                        var i = a.indexOfNextVisibleNode(c);
                        a.removeAt(f, i - f)
                    }
                }
                d.contains = g
            },
            handleNodeExpand: function(h, d, i) {
                var e = this;
                var a = [];
                var g = e.isTreeFiltered();
                var f = e.currentFilterGeneration;
                for (var c = 0; c < d.length; c++) {
                    var b = d[c];
                    if (!(g && b.__filterGen != f || b.hidden)) {
                        a[a.length] = b
                    }
                }
                return this.callParent([h, a, i])
            },
            onNodeInsert: function(f, a, o) {
                var c = this,
                    e, b, m, i, d, k, p = a.raw || a.data,
                    n = c.removedNodes,
                    j, h, g, l = this.isTreeFiltered();
                if (c.filterFn) {
                    h = c.filterFn(a);
                    a.set('visible', h);
                    if (h) {
                        f.set('visible', c.filterFn(f))
                    }
                }
                if (!this.reApplyFilterOnDataChange && l) {
                    a.addedWhileFiltered = !0
                }
                c.registerNode(a, !0);
                c.beginUpdate();
                if (c.isVisible(a) || l && a.addedWhileFiltered) {
                    if (o === 0 || !a.previousSibling) {
                        e = f
                    } else {
                        for (b = a.previousSibling; b && !b.addedWhileFiltered && !b.get('visible'); b = b.previousSibling) {}
                        if (!b) {
                            e = f
                        } else {
                            while (b.isExpanded() && b.lastChild) {
                                b = b.lastChild
                            }
                            for (; b && !b.addedWhileFiltered && !b.get('visible'); b = b.previousSibling) {}
                            e = b
                        }
                    }
                    c.insert(c.indexOf(e) + 1, a);
                    if (!a.isLeaf() && a.isExpanded()) {
                        if (a.isLoaded()) {
                            c.onNodeExpand(a, a.childNodes)
                        } else {
                            if (!c.fillCount) {
                                a.set('expanded', !1);
                                a.expand()
                            }
                        }
                    }
                }
                Ext.Array.remove(n, a);
                c.needsSync = c.needsSync || a.phantom || a.dirty;
                if (!a.isLeaf() && !a.isLoaded() && !c.lazyFill) {
                    m = c.getProxy().getReader();
                    i = a.getProxy();
                    d = i ? i.getReader() : null;
                    k = d && d.initialConfig.rootProperty ? d : m;
                    j = k.getRoot(p);
                    if (j) {
                        g = a.childType;
                        c.fillNode(a, k.extractData(j, g ? {
                            model: g
                        } : undefined))
                    }
                }
                c.endUpdate()
            },
            isFiltered: function() {
                return this.callParent(arguments) || this.isTreeFiltered()
            },
            afterEdit: function(b, c) {
                var a = this;
                if (Ext.getVersion().isGreaterThan('6.0.2')) {
                    if (a.needsLocalFilter()) {
                        a.doFilter(b)
                    }
                    Ext.data.Store.prototype.afterEdit.apply(a, [b, c])
                } else {
                    return a.callParent([b, c])
                }
            }
        }
    }
}, 0, 0, 0, 0, 0, 0, [Sch.data.mixin, 'FilterableTreeStore'], 0);
Ext.cmd.derive('Sch.data.ResourceTreeStore', Ext.data.TreeStore, {
    model: 'Sch.model.Resource',
    storeId: 'resources',
    constructor: function() {
        Ext.data.TreeStore.prototype.constructor.apply(this, arguments);
        this.initTreeFiltering();
        if (this.getModel() !== Sch.model.Resource && !(this.getModel().prototype instanceof Sch.model.Resource)) {
            throw 'The model for the ResourceTreeStore must subclass Sch.model.Resource'
        }
    },
    setRootNode: function() {
        this.isSettingRoot = !0;
        var a = Ext.data.TreeStore.prototype.setRootNode.apply(this, arguments);
        this.isSettingRoot = !1;
        return a
    }
}, 1, 0, 0, 0, ['store.resourcetreestore'], [
    [Sch.data.mixin.UniversalModelGetter.prototype.mixinId || Sch.data.mixin.UniversalModelGetter.$className, Sch.data.mixin.UniversalModelGetter],
    [Sch.data.mixin.CacheHintHelper.prototype.mixinId || Sch.data.mixin.CacheHintHelper.$className, Sch.data.mixin.CacheHintHelper],
    [Sch.data.mixin.ResourceStore.prototype.mixinId || Sch.data.mixin.ResourceStore.$className, Sch.data.mixin.ResourceStore],
    [Sch.data.mixin.FilterableTreeStore.prototype.mixinId || Sch.data.mixin.FilterableTreeStore.$className, Sch.data.mixin.FilterableTreeStore],
    [Robo.data.Store.prototype.mixinId || Robo.data.Store.$className, Robo.data.Store]
], [Sch.data, 'ResourceTreeStore'], 0);
Ext.cmd.derive('Sch.model.TimeAxisTick', Sch.model.Range, {
    isTimeAxisTickModel: !0,
    startDateField: 'start',
    endDateField: 'end'
}, 0, 0, 0, 0, 0, 0, [Sch.model, 'TimeAxisTick'], 0);
Ext.cmd.derive('Sch.data.TimeAxis', Ext.data.JsonStore, {
    model: 'Sch.model.TimeAxisTick',
    continuous: !0,
    originalContinuous: null,
    autoAdjust: !0,
    unit: null,
    increment: null,
    resolutionUnit: null,
    resolutionIncrement: null,
    weekStartDay: null,
    mainUnit: null,
    shiftUnit: null,
    shiftIncrement: 1,
    defaultSpan: 1,
    isConfigured: !1,
    adjustedStart: null,
    adjustedEnd: null,
    visibleTickStart: null,
    visibleTickEnd: null,
    presetName: null,
    mode: 'plain',
    startTime: 0,
    endTime: 24,
    constructor: function(b) {
        var a = this;
        b = b || {};
        if (a.setModel) {
            a.setModel(a.model)
        }
        a.setMode(b.mode || a.mode);
        a.originalContinuous = a.continuous;
        Ext.data.JsonStore.prototype.constructor.apply(this, arguments);
        a.on(Ext.versions.touch ? 'refresh' : 'datachanged', function() {
            a.fireEvent('reconfigure', a, !1)
        });
        a.on('endreconfigure', function(a, c) {
            a.fireEvent('reconfigure', a, c)
        });
        if (b.viewPreset) {
            var c = Sch.preset.Manager.getPreset(b.viewPreset);
            c && a.consumeViewPreset(c)
        }
        if (b.start || a.start) {
            a.reconfigure(b)
        }
    },
    reconfigure: function(c, k) {
        this.isConfigured = !0;
        Ext.apply(this, c);
        var h = this.getAdjustedDates(c.start, c.end, !0);
        var g = this.getAdjustedDates(c.start, c.end);
        var i = g.start;
        var j = g.end;
        if (this.fireEvent('beforereconfigure', this, i, j) !== !1) {
            this.fireEvent('beginreconfigure', this);
            var a = this.unit;
            var b = this.increment || 1;
            var f = this.generateTicks(i, j, a, b);
            this.removeAll(!0);
            this.suspendEvents();
            this.add(f);
            if (this.getCount() === 0) {
                Ext.Error.raise('Invalid time axis configuration or filter, please check your input data.')
            }
            this.resumeEvents();
            var e = Sch.util.Date;
            var d = f.length;
            if (this.isContinuous()) {
                this.adjustedStart = h.start;
                this.adjustedEnd = this.getNext(d > 1 ? f[d - 1].start : h.start, a, b)
            } else {
                this.adjustedStart = this.getStart();
                this.adjustedEnd = this.getEnd()
            }
            do {
                this.visibleTickStart = (this.getStart() - this.adjustedStart) / (e.getUnitDurationInMs(a) * b);
                if (this.visibleTickStart >= 1) {
                    this.adjustedStart = e.getNext(this.adjustedStart, a, b)
                }
            } while (this.visibleTickStart >= 1);
            do {
                this.visibleTickEnd = d - (this.adjustedEnd - this.getEnd()) / (e.getUnitDurationInMs(a) * b);
                if (d - this.visibleTickEnd >= 1) {
                    this.adjustedEnd = e.getNext(this.adjustedEnd, a, -1)
                }
            } while (d - this.visibleTickEnd >= 1);
            this.fireEvent('endreconfigure', this, k)
        }
    },
    isWeek: function() {
        return this.mode !== 'plain'
    },
    setMode: function(a) {
        this.mode = a;
        if (this.isWeek()) {
            this.generateTicksValidatorFn = function(b) {
                if (this.startTime > 0 || this.endTime < 24) {
                    return b.getHours() >= this.startTime && b.getHours() < this.endTime
                } else {
                    return !0
                }
            }
        } else {
            this.generateTicksValidatorFn = function() {
                return !0
            }
        }
    },
    setTimeSpan: function(a, b) {
        var c = this.getAdjustedDates(a, b);
        a = c.start;
        b = c.end;
        if (this.getStart() - a !== 0 || this.getEnd() - b !== 0) {
            this.reconfigure({
                start: a,
                end: b
            })
        }
    },
    filterBy: function(b, a) {
        this.continuous = !1;
        a = a || this;
        this.clearFilter(!0);
        this.suspendEvents(!0);
        this.filter([{
            filterFn: function(d, c) {
                return b.call(a, d.data, c)
            }
        }]);
        if (this.getCount() === 0) {
            this.clearFilter();
            this.resumeEvents();
            Ext.Error.raise('Invalid time axis filter - no ticks passed through the filter. Please check your filter method.')
        }
        this.resumeEvents()
    },
    isContinuous: function() {
        var a = this.continuous && !this.isFiltered();
        if (this.isWeek()) {
            a = a && this.startTime === 0 && this.endTime === 24
        }
        return a
    },
    clearFilter: function() {
        this.continuous = this.originalContinuous;
        Ext.data.JsonStore.prototype.clearFilter.apply(this, arguments)
    },
    generateTicks: function(b, e, g, c) {
        var d = [],
            a, h = Sch.util.Date,
            f = 0;
        g = g || this.unit;
        c = c || this.increment;
        var i = this.getAdjustedDates(b, e);
        b = i.start;
        e = i.end;
        while (b < e) {
            a = this.getNext(b, g, c);
            if (!this.autoAdjust && a > e) {
                a = e
            }
            if (g === h.HOUR && c > 1 && d.length > 0 && f === 0) {
                var j = d[d.length - 1];
                f = (j.start.getHours() + c) % 24 - j.end.getHours();
                if (f !== 0) {
                    a = h.add(a, h.HOUR, f)
                }
            }
            this.generateTicksValidatorFn(b) && d.push({
                start: b,
                end: a
            });
            b = a
        }
        return d
    },
    getVisibleTickTimeSpan: function() {
        return this.isContinuous() ? this.visibleTickEnd - this.visibleTickStart : this.getCount()
    },
    getAdjustedDates: function(b, a, i) {
        var d = Sch.util.Date;
        b = b || this.getStart();
        a = a || d.add(b, this.mainUnit, this.defaultSpan);
        if (this.isWeek()) {
            if (this.shiftUnit === d.MONTH) {
                var h = d.add(b, d.WEEK, 1);
                var g = d.add(a, d.WEEK, -1);
                if (!a) {
                    a = this.getNext(b, this.shiftUnit, 1);
                    a = this.ceilDate(a, !1, this.shiftUnit);
                    a = this.ceilDate(a, !1, this.mainUnit)
                }
                if (h.getMonth() !== b.getMonth() && g.getMonth() !== a.getMonth()) {
                    return {
                        start: b,
                        end: a
                    }
                }
            }
            var e, c, f;
            e = this.floorDate(b, !1, this.shiftUnit, 1);
            e = this.floorDate(e, !1, this.mainUnit, 1);
            if (this.autoAdjust) {
                f = this.getNext(b, this.shiftUnit, 1);
                c = this.ceilDate(f, !1, this.shiftUnit);
                c = this.ceilDate(c, !1, this.mainUnit)
            } else {
                c = this.ceilDate(a, !1, this.shiftUnit);
                c = this.ceilDate(c, !1, this.mainUnit)
            }
            return {
                start: e,
                end: c
            }
        } else {
            return this.autoAdjust || i ? {
                start: this.floorDate(b, !1, this.autoAdjust ? this.mainUnit : this.unit, 1),
                end: this.ceilDate(a, !1, this.autoAdjust ? this.mainUnit : this.unit, 1)
            } : {
                start: b,
                end: a
            }
        }
    },
    getTickFromDate: function(b) {
        var a = this.data.items;
        var e = a.length - 1;
        if (b.valueOf() < a[0].data.start.valueOf() || b.valueOf() > a[e].data.end.valueOf()) {
            return -1
        }
        var f, d, g;
        if (this.isContinuous()) {
            if (b - a[0].data.start === 0) {
                return this.visibleTickStart
            }
            if (b - a[e].data.end === 0) {
                return this.visibleTickEnd
            }
            var i = this.adjustedStart;
            var j = this.adjustedEnd;
            var c = Math.floor(a.length * (b - i) / (j - i));
            if (c > e) {
                c = e
            }
            d = c === 0 ? i : a[c].data.start;
            g = c == e ? j : a[c].data.end;
            f = c + (b - d) / (g - d);
            if (f < this.visibleTickStart || f > this.visibleTickEnd) {
                return -1
            }
            return f
        } else {
            for (var h = 0; h <= e; h++) {
                g = a[h].data.end;
                if (b <= g) {
                    d = a[h].data.start;
                    f = h + (b > d ? (b - d) / (g - d) : 0);
                    return f
                }
            }
        }
        return -1
    },
    getDateFromTick: function(c, d) {
        if (c === this.visibleTickEnd) {
            return this.getEnd()
        }
        var a = Math.floor(c),
            h = c - a,
            g = this.getAt(a);
        if (!g) {
            return null
        }
        var e = g.data;
        var f = a === 0 ? this.adjustedStart : e.start;
        var i = a == this.getCount() - 1 && this.isContinuous() ? this.adjustedEnd : e.end;
        var b = Sch.util.Date.add(f, Sch.util.Date.MILLI, h * (i - f));
        if (d) {
            b = this[d + 'Date'](b)
        }
        return b
    },
    getTicks: function() {
        var a = [];
        this.each(function(b) {
            a.push(b.data)
        });
        return a
    },
    getStart: function() {
        var a = this.first();
        if (a) {
            return new Date(a.data.start)
        }
        return null
    },
    getEnd: function() {
        var a = this.last();
        if (a) {
            return new Date(a.data.end)
        }
        return null
    },
    floorDate: function(k, f, j, m) {
        f = f !== !1;
        var a = Ext.Date.clone(k),
            c = f ? this.getStart() : null,
            d = m || this.resolutionIncrement,
            h;
        if (j) {
            h = j
        } else {
            h = f ? this.resolutionUnit : this.mainUnit
        }
        var b = Sch.util.Date;
        var e = function(b, a) {
            return Math.floor(b / a) * a
        };
        switch (h) {
            case b.MILLI:
                if (f) {
                    a = b.add(c, b.MILLI, e(b.getDurationInMilliseconds(c, a), d))
                };
                break;
            case b.SECOND:
                if (f) {
                    a = b.add(c, b.MILLI, e(b.getDurationInSeconds(c, a), d) * 1000)
                } else {
                    a.setMilliseconds(0);
                    a.setSeconds(e(a.getSeconds(), d))
                };
                break;
            case b.MINUTE:
                if (f) {
                    a = b.add(c, b.SECOND, e(b.getDurationInMinutes(c, a), d) * 60)
                } else {
                    a.setMinutes(e(a.getMinutes(), d));
                    a.setSeconds(0);
                    a.setMilliseconds(0)
                };
                break;
            case b.HOUR:
                if (f) {
                    a = b.add(c, b.MINUTE, e(b.getDurationInHours(this.getStart(), a), d) * 60)
                } else {
                    a.setMinutes(0);
                    a.setSeconds(0);
                    a.setMilliseconds(0);
                    a.setHours(e(a.getHours(), d))
                };
                break;
            case b.DAY:
                if (f) {
                    a = b.add(c, b.DAY, e(b.getDurationInDays(c, a), d))
                } else {
                    Sch.util.Date.clearTime(a);
                    a.setDate(e(a.getDate() - 1, d) + 1)
                };
                break;
            case b.WEEK:
                var i = a.getDay() || 7;
                var g = this.weekStartDay || 7;
                Sch.util.Date.clearTime(a);
                a = b.add(a, b.DAY, i >= g ? g - i : -(7 - g + i));
                if (a.getDay() !== g && a.getHours() === 23) {
                    a = b.add(a, b.HOUR, 1)
                };
                break;
            case b.MONTH:
                if (f) {
                    a = b.add(c, b.MONTH, e(b.getDurationInMonths(c, a), d))
                } else {
                    Sch.util.Date.clearTime(a);
                    a.setDate(1);
                    a.setMonth(e(a.getMonth(), d))
                };
                break;
            case b.QUARTER:
                Sch.util.Date.clearTime(a);
                a.setDate(1);
                a = b.add(a, b.MONTH, -(a.getMonth() % 3));
                break;
            case b.YEAR:
                if (f) {
                    a = b.add(c, b.YEAR, e(b.getDurationInYears(c, a), d))
                } else {
                    var l = e(k.getFullYear() - 1, d) + 1;
                    a = new Date(0, 0, 1);
                    a.setFullYear(l)
                };
                break;
        }
        return a
    },
    roundDate: function(t, b) {
        var a = Ext.Date.clone(t),
            c = this.resolutionIncrement;
        b = b || this.getStart();
        switch (this.resolutionUnit) {
            case Sch.util.Date.MILLI:
                var j = Sch.util.Date.getDurationInMilliseconds(b, a),
                    f = Math.round(j / c) * c;
                a = Sch.util.Date.add(b, Sch.util.Date.MILLI, f);
                break;
            case Sch.util.Date.SECOND:
                var s = Sch.util.Date.getDurationInSeconds(b, a),
                    h = Math.round(s / c) * c;
                a = Sch.util.Date.add(b, Sch.util.Date.MILLI, h * 1000);
                break;
            case Sch.util.Date.MINUTE:
                var q = Sch.util.Date.getDurationInMinutes(b, a),
                    g = Math.round(q / c) * c;
                a = Sch.util.Date.add(b, Sch.util.Date.SECOND, g * 60);
                break;
            case Sch.util.Date.HOUR:
                var o = Sch.util.Date.getDurationInHours(b, a),
                    k = Math.round(o / c) * c;
                a = Sch.util.Date.add(b, Sch.util.Date.MINUTE, k * 60);
                break;
            case Sch.util.Date.DAY:
                var r = Sch.util.Date.getDurationInDays(b, a),
                    m = Math.round(r / c) * c;
                a = Sch.util.Date.add(b, Sch.util.Date.DAY, m);
                break;
            case Sch.util.Date.WEEK:
                Sch.util.Date.clearTime(a);
                var d = a.getDay() - this.weekStartDay,
                    e;
                if (d < 0) {
                    d = 7 + d
                };
                if (Math.round(d / 7) === 1) {
                    e = 7 - d
                } else {
                    e = -d
                };
                a = Sch.util.Date.add(a, Sch.util.Date.DAY, e);
                break;
            case Sch.util.Date.MONTH:
                var n = Sch.util.Date.getDurationInMonths(b, a) + a.getDate() / Ext.Date.getDaysInMonth(a),
                    i = Math.round(n / c) * c;
                a = Sch.util.Date.add(b, Sch.util.Date.MONTH, i);
                break;
            case Sch.util.Date.QUARTER:
                Sch.util.Date.clearTime(a);
                a.setDate(1);
                a = Sch.util.Date.add(a, Sch.util.Date.MONTH, 3 - a.getMonth() % 3);
                break;
            case Sch.util.Date.YEAR:
                var p = Sch.util.Date.getDurationInYears(b, a),
                    l = Math.round(p / c) * c;
                a = Sch.util.Date.add(b, Sch.util.Date.YEAR, l);
                break;
        }
        return a
    },
    ceilDate: function(c, d, g, f) {
        var a = Ext.Date.clone(c);
        d = d !== !1;
        f = f || (d ? this.resolutionIncrement : 1);
        var b = !1,
            e;
        if (g) {
            e = g
        } else {
            e = d ? this.resolutionUnit : this.mainUnit
        }
        switch (e) {
            case Sch.util.Date.HOUR:
                if (a.getMinutes() > 0 || a.getSeconds() > 0 || a.getMilliseconds() > 0) {
                    b = !0
                };
                break;
            case Sch.util.Date.DAY:
                if (a.getHours() > 0 || a.getMinutes() > 0 || a.getSeconds() > 0 || a.getMilliseconds() > 0) {
                    b = !0
                };
                break;
            case Sch.util.Date.WEEK:
                Sch.util.Date.clearTime(a);
                if (a.getDay() !== this.weekStartDay || c.getTime() - a.getTime() > 0) {
                    b = !0
                };
                break;
            case Sch.util.Date.MONTH:
                Sch.util.Date.clearTime(a);
                if (a.getDate() !== 1 || c.getTime() - a.getTime() > 0) {
                    b = !0
                };
                break;
            case Sch.util.Date.QUARTER:
                Sch.util.Date.clearTime(a);
                if (a.getMonth() % 3 !== 0 || a.getDate() !== 1 || c.getTime() - a.getTime() > 0) {
                    b = !0
                };
                break;
            case Sch.util.Date.YEAR:
                Sch.util.Date.clearTime(a);
                if (a.getMonth() !== 0 || a.getDate() !== 1 || c.getTime() - a.getTime() > 0) {
                    b = !0
                };
                break;
            default:
                break;
        }
        if (b) {
            return this.getNext(a, e, f)
        } else {
            return a
        }
    },
    getNext: function(b, c, a) {
        return Sch.util.Date.getNext(b, c, a, this.weekStartDay)
    },
    getResolution: function() {
        return {
            unit: this.resolutionUnit,
            increment: this.resolutionIncrement
        }
    },
    setResolution: function(b, a) {
        this.resolutionUnit = b;
        this.resolutionIncrement = a || 1
    },
    shift: function(a, b) {
        this.setTimeSpan(Sch.util.Date.add(this.getStart(), b, a), Sch.util.Date.add(this.getEnd(), b, a))
    },
    shiftNext: function(a) {
        a = a || this.getShiftIncrement();
        var b = this.getShiftUnit();
        this.setTimeSpan(Sch.util.Date.add(this.getStart(), b, a), Sch.util.Date.add(this.getEnd(), b, a))
    },
    shiftPrevious: function(a) {
        a = -(a || this.getShiftIncrement());
        var b = this.getShiftUnit();
        this.setTimeSpan(Sch.util.Date.add(this.getStart(), b, a), Sch.util.Date.add(this.getEnd(), b, a))
    },
    getShiftUnit: function() {
        return this.shiftUnit || this.mainUnit
    },
    getShiftIncrement: function() {
        return this.shiftIncrement || 1
    },
    getUnit: function() {
        return this.unit
    },
    getIncrement: function() {
        return this.increment
    },
    getRowTicks: function() {
        if (this.isWeek()) {
            var b = this.getStart();
            var c = Sch.util.Date.add(b, this.headerConfig.middle.splitUnit, 1);
            var a = this.findBy(function(a) {
                return a.getStartDate().getTime() >= c.getTime()
            });
            if (a === -1) {
                return this.getRange()
            }
            return this.getRange(0, a - 1)
        }
    },
    dateInAxis: function(a, b) {
        var h = !1;
        var e = this.getStart();
        var g = this.getEnd();
        if (this.isContinuous()) {
            h = b ? Sch.util.Date.betweenLesserEqual(a, e, g) : Sch.util.Date.betweenLesser(a, e, g)
        } else {
            var j = this.getCount(),
                f, c;
            for (var d = 0; d < j; d++) {
                var i = this.getAt(d);
                f = i.data.start;
                c = i.data.end;
                if (b && a <= c || !b && a < c) {
                    return a >= f
                }
            }
        }
        return h
    },
    timeSpanInAxis: function(a, b) {
        var c = this.getStart();
        var d = this.getEnd();
        var g = b - a;
        if (g === 0) {
            return this.dateInAxis(a, !0)
        }
        if (this.isContinuous()) {
            return Sch.util.Date.intersectSpans(a, b, c, d)
        } else {
            var e = a < c && b > d;
            if (e) {
                return !0
            }
            var f = this.getTickFromDate(a);
            var h = this.getTickFromDate(b);
            return f !== h && (a < d && b > c)
        }
    },
    isRangeInAxis: function(a) {
        var b = a.getStartDate(),
            c = a.getEndDate();
        if (!b || !c) {
            return !1
        }
        return this.timeSpanInAxis(b, c)
    },
    forEachAuxInterval: function(h, g, f, c) {
        c = c || this;
        var d = this.getEnd(),
            a = this.getStart(),
            e = 0,
            b;
        if (a > d) {
            throw new Error('Invalid time axis configuration')
        }
        while (a < d) {
            b = Sch.util.Date.min(this.getNext(a, h, g || 1), d);
            f.call(c, a, b, e);
            a = b;
            e++
        }
    },
    consumeViewPreset: function(a) {
        Ext.apply(this, {
            unit: a.getBottomHeader().unit,
            increment: a.getBottomHeader().increment || 1,
            resolutionUnit: a.timeResolution.unit,
            resolutionIncrement: a.timeResolution.increment,
            mainUnit: a.getMainHeader().unit,
            shiftUnit: a.shiftUnit,
            shiftIncrement: a.shiftIncrement || 1,
            defaultSpan: a.defaultSpan || 1,
            presetName: a.name,
            headerConfig: a.headerConfig
        })
    }
}, 1, 0, 0, 0, 0, 0, [Sch.data, 'TimeAxis'], 0);
Ext.define('ExSch.data.TimeAxisOverride', {
    override: 'Sch.data.TimeAxis',
    getTickFromDate: function(c) {
        var b = this.data.items,
            d = b.length - 1,
            e, f, a, i, g, h;
        c = c.valueOf();
        if (c > b[0].data.start && c < b[d].data.end) {
            e = this.adjustedStart && this.adjustedStart.valueOf();
            f = this.adjustedEnd && this.adjustedEnd.valueOf();
            a = Math.floor(b.length * (c - e) / (f - e));
            if (a > d) {
                a = d
            }
            g = a === 0 ? e : b[a].data.start;
            h = a == d ? f : b[a].data.end;
            i = a + (c - g) / (h - g);
            return i
        }
        if (c - b[0].data.start === 0) {
            return this.visibleTickStart
        }
        if (c - b[d].data.end === 0) {
            return this.visibleTickEnd
        }
        return -1
    }
});
Ext.cmd.derive('Sch.eventlayout.Horizontal', Ext.Base, {
    nbrOfBandsByResource: null,
    bandIndexToPxConvertFn: null,
    bandIndexToPxConvertScope: null,
    constructor: function(a) {
        Ext.apply(this, a);
        this.nbrOfBandsByResource = {}
    },
    clearCache: function(a) {
        if (a) {
            delete this.nbrOfBandsByResource[a.internalId]
        } else {
            this.nbrOfBandsByResource = {}
        }
    },
    getNumberOfBands: function(b, a) {
        var c = this.nbrOfBandsByResource;
        if (c.hasOwnProperty(b.internalId)) {
            return c[b.internalId]
        }
        var d = Ext.isFunction(a) ? a() : a;
        var e = Ext.Array.map(d, function(c) {
            return {
                start: c.getStartDate(),
                end: c.getEndDate(),
                event: c
            }
        });
        return this.applyLayout(e, b)
    },
    applyLayout: function(c, b) {
        var a = c.slice();
        var d = this;
        a.sort(function(a, e) {
            return d.sortEvents(a.event, e.event)
        });
        return this.nbrOfBandsByResource[b.internalId] = this.layoutEventsInBands(a)
    },
    sortEvents: function(c, d) {
        var a = c.getStartDate();
        var b = d.getStartDate();
        var e = a - b === 0;
        if (e) {
            return c.getEndDate() > d.getEndDate() ? -1 : 1
        } else {
            return a < b ? -1 : 1
        }
    },
    layoutEventsInBands: function(b) {
        var c = 0;
        do {
            var a = b[0];
            while (a) {
                a.top = this.bandIndexToPxConvertFn.call(this.bandIndexToPxConvertScope || this, c, a.event);
                Ext.Array.remove(b, a);
                a = this.findClosestSuccessor(a, b)
            }
            c++
        } while (b.length > 0);
        return c
    },
    findClosestSuccessor: function(d, b) {
        var f = Infinity,
            e, h = d.end,
            c, g = d.end - d.start === 0;
        for (var a = 0, i = b.length; a < i; a++) {
            c = b[a].start - h;
            if (c >= 0 && c < f && (c > 0 || b[a].end - b[a].start > 0 || !g)) {
                e = b[a];
                f = c
            }
        }
        return e
    }
}, 1, 0, 0, 0, 0, 0, [Sch.eventlayout, 'Horizontal'], 0);
Ext.cmd.derive('Sch.eventlayout.Vertical', Ext.Base, {
    view: null,
    constructor: function(a) {
        Ext.apply(this, a)
    },
    applyLayout: function(a, i) {
        if (a.length === 0) {
            return
        }
        var l = this;
        a.sort(function(b, c) {
            return l.sortEvents(b.event, c.event)
        });
        var e, f, c;
        for (var b = 0, h = a.length; b < h; b++) {
            f = a[b];
            e = this.findStartSlot(a, f);
            var d = this.getCluster(a, b);
            if (d.length > 1) {
                f.left = e.start;
                f.width = e.end - e.start;
                c = 1;
                while (c < d.length - 1 && d[c + 1].start - f.start === 0) {
                    c++
                }
                var k = this.findStartSlot(a, d[c]);
                if (k && k.start < 0.8) {
                    d = d.slice(0, c)
                }
            }
            var g = d.length,
                j = (e.end - e.start) / g;
            for (c = 0; c < g; c++) {
                d[c].width = j;
                d[c].left = e.start + c * j
            }
            b += g - 1
        }
        for (b = 0, h = a.length; b < h; b++) {
            a[b].width = a[b].width * i;
            a[b].left = this.view.barMargin + a[b].left * i
        }
    },
    findStartSlot: function(c, d) {
        var a = this.getPriorOverlappingEvents(c, d),
            b;
        if (a.length === 0) {
            return {
                start: 0,
                end: 1
            }
        }
        for (b = 0; b < a.length; b++) {
            if (b === 0 && a[0].left > 0) {
                return {
                    start: 0,
                    end: a[0].left
                }
            } else {
                if (a[b].left + a[b].width < (b < a.length - 1 ? a[b + 1].left : 1)) {
                    return {
                        start: a[b].left + a[b].width,
                        end: b < a.length - 1 ? a[b + 1].left : 1
                    }
                }
            }
        }
        return !1
    },
    getPriorOverlappingEvents: function(b, d) {
        var g = Sch.util.Date,
            e = d.start,
            f = d.end,
            c = [];
        for (var a = 0, h = Ext.Array.indexOf(b, d); a < h; a++) {
            if (g.intersectSpans(e, f, b[a].start, b[a].end)) {
                c.push(b[a])
            }
        }
        c.sort(this.sortOverlappers);
        return c
    },
    sortOverlappers: function(a, b) {
        return a.left < b.left ? -1 : 1
    },
    getCluster: function(a, c) {
        if (c >= a.length - 1) {
            return [a[c]]
        }
        var g = [a[c]],
            d = a[c].start,
            e = a[c].end,
            h = a.length,
            f = Sch.util.Date,
            b = c + 1;
        while (b < h && f.intersectSpans(d, e, a[b].start, a[b].end)) {
            g.push(a[b]);
            d = f.max(d, a[b].start);
            e = f.min(a[b].end, e);
            b++
        }
        return g
    },
    sortEvents: function(c, d) {
        var a = c.getStartDate(),
            f = c.getEndDate();
        var b = d.getStartDate(),
            g = d.getEndDate();
        var e = a - b === 0;
        if (e) {
            return f > g ? -1 : 1
        } else {
            return a < b ? -1 : 1
        }
    }
}, 1, 0, 0, 0, 0, 0, [Sch.eventlayout, 'Vertical'], 0);
Ext.cmd.derive('Sch.feature.AbstractTimeSpan', Ext.AbstractPlugin, {
    lockableScope: 'top',
    schedulerView: null,
    timeAxis: null,
    expandToFitView: !1,
    disabled: !1,
    cls: null,
    clsField: 'Cls',
    template: null,
    store: null,
    renderElementsBuffered: !1,
    renderDelay: 0,
    refreshSizeOnItemUpdate: !0,
    _renderTimer: null,
    showHeaderElements: !1,
    headerTemplate: null,
    innerHeaderTpl: null,
    headerContainerCls: 'sch-header-secondary-canvas',
    headerContainerEl: null,
    renderingDoneEvent: null,
    constructor: function(a) {
        this.uniqueCls = this.uniqueCls || 'sch-timespangroup-' + Ext.id();
        Ext.apply(this, a);
        this.mixins.observable.constructor.call(this);
        Ext.plugin.Abstract.prototype.constructor.apply(this, arguments)
    },
    init: function(a) {
        if (Ext.versions.touch && !a.isReady()) {
            a.on('viewready', function() {
                this.init(a)
            }, this);
            return
        }
        if (typeof this.innerHeaderTpl === 'string') {
            this.innerHeaderTpl = new Ext.XTemplate(this.innerHeaderTpl)
        }
        var b = this.innerHeaderTpl;
        if (!this.headerTemplate) {
            this.headerTemplate = new Ext.XTemplate('<tpl for=".">', '<div id="{id}" class="{cls}" title="{[values.Name || values.Text || ""]}" style="{side}:{position}px;">' + (b ? '{[this.renderInner(values)]}' : '') + '</div>', '</tpl>', {
                renderInner: function(c) {
                    return b.apply(c)
                }
            })
        }
        this.schedulerView = a.getSchedulingView();
        this.panel = a;
        this.timeAxis = a.getTimeAxis();
        this.store = Ext.StoreManager.lookup(this.store);
        if (!this.store) {
            Ext.Error.raise('Error: You must define a store for this plugin')
        }
        if (this.showHeaderElements) {
            this.panel.on({
                horizontaltimeaxiscolumnrender: this.renderHeaderElements,
                scope: this
            })
        }
        if (!this.schedulerView.getEl()) {
            this.schedulerView.on({
                viewready: this.onViewReady,
                scope: this
            })
        } else {
            this.onViewReady()
        }
    },
    setDisabled: function(a) {
        if (a) {
            this.removeElements()
        }
        this.disabled = a
    },
    removeElements: function() {
        this.removeBodyElements();
        if (this.showHeaderElements) {
            this.removeHeaderElements()
        }
    },
    getBodyElements: function() {
        var a = this.getContainerEl();
        if (a) {
            return a.select('.' + this.uniqueCls)
        }
        return null
    },
    getHeaderContainerEl: function() {
        var a = this.headerContainerEl,
            d = 'x-',
            b;
        if (!a || !a.dom) {
            if (this.schedulerView.isHorizontal()) {
                var c = this.panel.getHorizontalTimeAxisColumn();
                if (c.headerView) {
                    b = c.headerView.containerEl
                } else {
                    return null
                }
            } else {
                b = this.panel.lockedGrid.getView().el
            }
            if (b) {
                a = b.down('.' + this.headerContainerCls);
                if (!a) {
                    a = b.appendChild({
                        cls: this.headerContainerCls
                    })
                }
                this.headerContainerEl = a
            }
        }
        return a
    },
    getHeaderElements: function() {
        var a = this.getHeaderContainerEl();
        if (a) {
            return a.select('.' + this.uniqueCls)
        }
        return null
    },
    removeBodyElements: function() {
        var a = this.getBodyElements();
        if (a) {
            a.each(function(a) {
                a.destroy()
            })
        }
    },
    removeHeaderElements: function() {
        var a = this.getHeaderElements();
        if (a) {
            a.each(function(a) {
                a.destroy()
            })
        }
    },
    getElementId: function(a) {
        return this.uniqueCls + '-' + a.internalId
    },
    getHeaderElementId: function(a) {
        return this.uniqueCls + '-header-' + a.internalId
    },
    getTemplateData: function(a) {
        return this.prepareTemplateData ? this.prepareTemplateData(a) : a.data
    },
    getElementCls: function(b, a) {
        var c = b.clsField || this.clsField;
        if (!a) {
            a = this.getTemplateData(b)
        }
        return this.cls + ' ' + this.uniqueCls + ' ' + (a[c] || '')
    },
    getHeaderElementCls: function(b, a) {
        var c = b.clsField || this.clsField;
        if (!a) {
            a = this.getTemplateData(b)
        }
        return 'sch-header-indicator ' + this.uniqueCls + ' ' + (a[c] || '')
    },
    getContainerEl: function() {
        return this.schedulerView.getSecondaryCanvasEl()
    },
    onViewReady: function(b) {
        var a = this.schedulerView;
        this.storeListeners = {
            load: this.renderElements,
            datachanged: this.renderElements,
            clear: this.renderElements,
            update: this.refreshSingle,
            scope: this
        };
        this.store.on(this.storeListeners);
        this.panel.on({
            beforemodechange: this.onTimelinePanelBeforeModeChange,
            modechange: this.onTimelinePanelModeChange,
            scope: this
        });
        this.viewListeners = {
            refresh: this.renderElements,
            scope: this
        };
        this.headerListeners = {
            afterlayout: this.renderElements,
            scope: this
        };
        if (a.isWeekView()) {
            a.headerCt.on(this.headerListeners)
        } else {
            a.on(this.viewListeners);
            this.renderElements()
        }
    },
    onTimelinePanelBeforeModeChange: function() {
        var a = this.schedulerView;
        if (a.isWeekView()) {
            a.headerCt.un(this.headerListeners)
        } else {
            this.schedulerView.un(this.viewListeners)
        }
    },
    onTimelinePanelModeChange: function() {
        var a = this.schedulerView;
        if (a.isWeekView()) {
            a.headerCt.on(this.headerListeners)
        } else {
            a.on(this.viewListeners)
        }
        this.forceNewRenderingTimeout()
    },
    forceNewRenderingTimeout: function() {
        this.renderElementsBuffered = !1;
        clearTimeout(this._renderTimer);
        this.renderElements()
    },
    renderElements: function() {
        if (this.renderElementsBuffered || this.disabled) {
            return
        }
        this.renderElementsBuffered = !0;
        clearTimeout(this._renderTimer);
        this._renderTimer = Ext.Function.defer(this.renderElementsInternal, this.renderDelay, this)
    },
    setElementX: function(a, b) {
        if (this.panel.rtl) {
            a.setRight(b)
        } else {
            a.setLeft(b)
        }
    },
    getHeaderElementPosition: function(b) {
        var a = this.schedulerView.getTimeAxisViewModel();
        return Math.round(a.getPositionFromDate(b))
    },
    renderBodyElementsInternal: function(b) {
        var c = this.timeAxis.getStart(),
            d = this.timeAxis.getEnd(),
            a = this.getElementData(c, d, b);
        if (a) {
            this.template.append(this.getContainerEl(), a)
        }
    },
    getHeaderElementData: function(b, a) {
        throw 'Abstract method call'
    },
    renderHeaderElements: function(b) {
        var a = this.getHeaderContainerEl();
        if (a) {
            var c = this.getHeaderElementData(b);
            this.headerTemplate.append(a, c)
        }
    },
    renderElementsInternal: function() {
        this.renderElementsBuffered = !1;
        var a = this.schedulerView;
        if (this.disabled || a.isDestroyed || !this.getContainerEl() || a.store.getCount() === 0) {
            return
        }
        if (a.isWeekView()) {
            var b = a.getColumnManager().getColumns();
            if (b[0] && !b[0].rendered) {
                return
            }
        }
        this.removeElements();
        this.renderBodyElementsInternal();
        if (this.showHeaderElements) {
            this.headerContainerEl = null;
            this.renderHeaderElements()
        }
        if (this.renderingDoneEvent) {
            this.fireEvent(this.renderingDoneEvent, this)
        }
    },
    getElementData: function(a, d, c, b) {
        throw 'Abstract method call'
    },
    updateBodyElement: function(c) {
        var b = Ext.get(this.getElementId(c));
        if (b) {
            var d = this.timeAxis.getStart(),
                e = this.timeAxis.getEnd(),
                a = this.getElementData(d, e, [c])[0];
            if (a) {
                b.dom.className = a.$cls;
                b.setTop(a.top);
                this.setElementX(b, a.left);
                b.setSize(a.width, a.height)
            } else {
                Ext.destroy(b)
            }
        } else {
            this.renderBodyElementsInternal([c])
        }
    },
    updateHeaderElement: function(c) {
        var a = Ext.get(this.getHeaderElementId(c));
        if (a) {
            var b = this.getHeaderElementData([c])[0];
            if (b) {
                a.dom.className = b.cls;
                if (this.schedulerView.isHorizontal()) {
                    this.setElementX(a, b.position);
                    a.setWidth(b.size)
                } else {
                    a.setTop(b.position);
                    a.setHeight(b.size)
                }
            } else {
                Ext.destroy(a)
            }
        } else {
            this.renderHeaderElements([c])
        }
    },
    destroy: function() {
        clearTimeout(this._renderTimer);
        this.store.un(this.storeListeners);
        if (this.store.autoDestroy) {
            this.store.destroy()
        }
    },
    refreshSingle: function(b, a) {
        a = a instanceof Array ? a : [a];
        Ext.Array.each(a, function(c) {
            this.updateBodyElement(c);
            if (this.showHeaderElements) {
                this.updateHeaderElement(c)
            }
        }, this)
    }
}, 1, 0, 0, 0, 0, [
    ['observable', Ext.util.Observable]
], [Sch.feature, 'AbstractTimeSpan'], 0);
Ext.cmd.derive('Sch.plugin.Lines', Sch.feature.AbstractTimeSpan, {
    cls: 'sch-timeline',
    showTip: !0,
    innerTpl: null,
    prepareTemplateData: null,
    side: null,
    init: function(a) {
        if (typeof this.innerTpl === 'string') {
            this.innerTpl = new Ext.XTemplate(this.innerTpl)
        }
        this.side = a.rtl ? 'right' : 'left';
        var b = this.innerTpl;
        if (!this.template) {
            this.template = new Ext.XTemplate('<tpl for=".">', '<div id="{id}" ' + (this.showTip ? 'title="{[this.getTipText(values)]}" ' : '') + 'class="{$cls}" style="' + this.side + ':{left}px;top:{top}px;width:{width}px">' + (b ? '{[this.renderInner(values)]}' : '') + '</div>', '</tpl>', {
                getTipText: function(b) {
                    return a.getSchedulingView().getFormattedDate(b.Date) + ' ' + (b.Text || '')
                },
                renderInner: function(c) {
                    return b.apply(c)
                }
            })
        }
        Sch.feature.AbstractTimeSpan.prototype.init.apply(this, arguments)
    },
    getElementData: function(l, p, m) {
        var o = this.store,
            b = this.schedulerView,
            j = b.isHorizontal(),
            k = b.isWeekView(),
            i = m || o.getRange(),
            g = [],
            q, r, d, c, a;
        for (var f = 0, n = i.length; f < n; f++) {
            d = i[f];
            c = d.get('Date');
            if (c && b.timeAxis.dateInAxis(c)) {
                a = Ext.apply({}, this.getTemplateData(d));
                a.id = this.getElementId(d);
                a.$cls = this.getElementCls(d, a);
                if (k) {
                    var e = b.getTimeSpanRegion(l, null, this.expandToFitView);
                    e = b.getTimeSpanRegion(c, c);
                    a.left = e.x;
                    a.top = e.y;
                    a.width = e.right - e.left
                } else {
                    var h = b.getCoordinateFromDate(c);
                    if (j) {
                        a.left = h
                    } else {
                        a.top = h
                    }
                }
                g.push(a)
            }
        }
        return g
    },
    getHeaderElementData: function(c) {
        var i = this.timeAxis.getStart(),
            j = this.timeAxis.getEnd(),
            h = this.schedulerView.isHorizontal(),
            g = [],
            b, d, f, a;
        c = c || this.store.getRange();
        for (var e = 0, k = c.length; e < k; e++) {
            b = c[e];
            d = b.get('Date');
            if (d && Sch.util.Date.betweenLesser(d, i, j)) {
                f = this.getHeaderElementPosition(d);
                a = this.getTemplateData(b);
                a = Ext.apply({
                    side: h ? this.side : 'top',
                    cls: this.getHeaderElementCls(b, a),
                    position: f
                }, a);
                a.id = this.getHeaderElementId(b);
                g.push(a)
            }
        }
        return g
    }
}, 0, 0, 0, 0, ['plugin.scheduler_lines'], 0, [Sch.plugin, 'Lines'], 0);
Ext.define('TimesSquare.overrides.SchPluginLines', {
    override: 'Sch.plugin.Lines',
    init: function(b) {
        var c = '#FF0000',
            d = '#EEEEEE',
            a;
        if (Ext.isString(this.innerTpl)) {
            this.innerTpl = new Ext.XTemplate(this.innerTpl)
        }
        this.side = b.rtl ? 'right' : 'left';
        a = this.innerTpl;
        if (!this.template) {
            this.template = new Ext.XTemplate('<tpl for=".">', '<div id="{id}" ' + (this.showTip ? 'title="{[this.getTipText(values)]}" ' : '') + 'class="{$cls}" style="' + this.side + ':{left}px;top:{top}px;height:{height}px;width:{[this.getTimelineWidth(values)]}px;border-color:{[this.getTimelineColor(values)]};background-color:{[this.getTimelineColor(values)]};">' + (a ? '{[this.renderInner(values)]}' : '') + '</div>', '</tpl>', {
                getTipText: function(a) {
                    return b.getSchedulingView().getFormattedDate(a.Date) + ' ' + (a.Text || '')
                },
                renderInner: function(c) {
                    return a.apply(c)
                },
                getTimelineColor: function(a) {
                    if (/sch-column-line-db/.test(a.$cls)) {
                        return 'inherit'
                    }
                    if (!/sch\-timeline/g.test(a.$cls)) {
                        return d
                    }
                    return a.Color || c
                },
                getTimelineWidth: function(a) {
                    return a.Width || 1
                }
            })
        }(arguments.callee.$previous || Sch.feature.AbstractTimeSpan.prototype.init).apply(this, arguments)
    }
});
Ext.cmd.derive('Sch.feature.ColumnLines', Sch.plugin.Lines, {
    showTip: !1,
    cls: 'sch-column-line',
    timeAxisViewModel: null,
    renderingDoneEvent: 'columnlinessynced',
    useLowestHeader: null,
    init: function(a) {
        this.timeAxis = a.getTimeAxis();
        this.timeAxisViewModel = a.timeAxisViewModel;
        this.panel = a;
        this.store = new Ext.data.JsonStore({
            fields: ['Date']
        });
        Sch.plugin.Lines.prototype.init.apply(this, arguments);
        a.on({
            destroy: this.onHostDestroy,
            scope: this
        });
        this.timeAxisViewModel.on('update', this.populate, this);
        this.populate()
    },
    onHostDestroy: function() {
        this.timeAxisViewModel.un('update', this.populate, this)
    },
    populate: function() {
        this.store.setData(this.getData())
    },
    getData: function() {
        var c = [];
        var a = this.timeAxisViewModel;
        var b = this.useLowestHeader ? a.getLowestHeader() : a.columnLinesFor;
        var f = !!(a.headerConfig && a.headerConfig[b].cellGenerator);
        if (f) {
            var e = a.getColumnConfig()[b];
            for (var d = 1, g = e.length; d < g; d++) {
                c.push({
                    Date: e[d].start
                })
            }
        } else {
            a.forEachInterval(b, function(b, e, d) {
                if (d > 0) {
                    c.push({
                        Date: b,
                        Cls: a.isMajorTick(b) ? 'sch-column-line-solid' : ''
                    })
                }
            })
        }
        return c
    }
}, 0, 0, 0, 0, 0, 0, [Sch.feature, 'ColumnLines'], 0);
Ext.define('TimesSquare.overrides.ColumnLines', {
    override: 'Sch.feature.ColumnLines',
    init: function(a) {
        this.timeAxis = a.getTimeAxis();
        this.timeAxisViewModel = a.timeAxisViewModel;
        this.panel = a;
        this.store = new Ext.data.JsonStore({
            fields: ['Date', 'Cls']
        });
        this.store.loadData = this.store.loadData || this.store.setData;
        Sch.plugin.Lines.prototype.init.apply(this, arguments);
        a.on({
            orientationchange: this.populate,
            destroy: this.onHostDestroy,
            scope: this
        });
        this.timeAxisViewModel.on('update', this.populate, this);
        this.populate()
    },
    getData: function() {
        var f = this,
            h = f.panel,
            d = [],
            c, a, b, g, e;
        if (h.isHorizontal()) {
            f.timeAxisViewModel.forEachInterval(f.timeAxisViewModel.columnLinesFor, function(f, h, i) {
                if (i > 0) {
                    e = 'sch-column-line';
                    a = TimesSquare.util.Time.convert(f);
                    b = TimesSquare.util.Time.convert(h);
                    if (a.getHours() === 0 && a.getMinutes() === 0) {
                        e = 'sch-column-line-db';
                        c = !0
                    } else {
                        c = !1
                    }
                    d.push({
                        Date: f,
                        Cls: e
                    });
                    if (!c && !(b.getHours() === 0 && b.getMinutes() === 0) && Ext.Date.format(a, 'Ymd') !== Ext.Date.format(b, 'Ymd')) {
                        f = new Date(f);
                        g = Ext.Date.format(b, 'Ymd');
                        do {
                            f.setMinutes(f.getMinutes() + 1);
                            a = TimesSquare.util.Time.convert(f);
                            if (a.getHours() === 0 && a.getMinutes() === 0) {
                                d.push({
                                    Date: new Date(f),
                                    Cls: 'sch-column-line-db'
                                })
                            }
                        } while (Ext.Date.format(a, 'Ymd') <= g)
                    }
                }
            })
        }
        return d
    }
});
Ext.cmd.derive('Sch.util.ScrollManager', Ext.Base, {
    singleton: !0,
    vthresh: 25,
    hthresh: 25,
    increment: 100,
    frequency: 500,
    animate: !0,
    animDuration: 200,
    activeCmp: null,
    activeEl: null,
    scrollElRegion: null,
    scrollProcess: {},
    pt: null,
    direction: 'both',
    constructor: function() {
        this.doScroll = Ext.Function.bind(this.doScroll, this)
    },
    triggerRefresh: function() {
        if (this.activeEl) {
            this.refreshElRegion();
            this.clearScrollInterval();
            this.onMouseMove()
        }
    },
    doScroll: function() {
        var g = this.scrollProcess,
            d = g.cmp,
            f = d.rtl && !d.up('[isViewport]'),
            c = g.dir[0],
            a = this.increment,
            h = this.activeCmp.getScrollX(),
            i = this.activeCmp.getVerticalScroll();
        if (c === 'r') {
            a = Math.min(a, f ? h : this.maxPosition.x - h)
        } else {
            if (c === 'd') {
                a = Math.min(a, this.maxPosition.y - i)
            }
        }
        a = Math.max(a, 0);
        var b = 0,
            e = 0;
        if (c === 'r') {
            b = a
        }
        if (c === 'l') {
            b = -a
        }
        if (c === 'u') {
            e = -a
        }
        if (c === 'd') {
            e = a
        }
        if (f) {
            b = -b
        }
        if (b) {
            d.scrollHorizontallyBy(b, {
                duration: this.animDuration,
                callback: this.triggerRefresh,
                scope: this
            })
        } else {
            if (e) {
                d.scrollVerticallyBy(e, {
                    duration: this.animDuration,
                    callback: this.triggerRefresh,
                    scope: this
                })
            }
        }
    },
    clearScrollInterval: function() {
        var a = this.scrollProcess;
        if (a.id) {
            clearTimeout(a.id)
        }
        a.id = 0;
        a.cmp = null;
        a.dir = ''
    },
    isScrollAllowed: function(a) {
        switch (this.direction) {
            case 'both':
                return !0;
            case 'horizontal':
                return a === 'right' || a === 'left';
            case 'vertical':
                return a === 'up' || a === 'down';
            default:
                throw new Error('Invalid direction: ' + this.direction);
        }
    },
    startScrollInterval: function(b, a) {
        if (!this.isScrollAllowed(a)) {
            return
        }
        this.clearScrollInterval();
        this.scrollProcess.cmp = b;
        this.scrollProcess.dir = a;
        this.scrollProcess.id = setTimeout(this.doScroll, this.frequency)
    },
    onMouseMove: function(c) {
        var g = c ? {
                x: c.getX(),
                y: c.getY(),
                right: c.getX(),
                bottom: c.getY()
            } : this.pt,
            k = g.x,
            l = g.y,
            d = this.scrollProcess,
            a = this.activeCmp,
            e = a.getScrollX(),
            i = a.getVerticalScroll(),
            o, h = a.rtl && !a.up('[isViewport]'),
            j = this.activeEl,
            b = this.scrollElRegion,
            n = j.dom,
            f = this,
            m = a.up('timelinegrid,timelinetree').getScrollable().getElement().isScrollable() || j.isScrollable();
        this.pt = g;
        if (b && b.contains(g) && m) {
            if (b.bottom - l <= f.vthresh && i < this.maxPosition.y) {
                if (d.cmp != a) {
                    this.startScrollInterval(a, 'down')
                }
                return
            } else {
                if (b.right - k <= f.hthresh && (h ? e > 0 : e < this.maxPosition.x)) {
                    if (d.cmp != a) {
                        this.startScrollInterval(a, 'right')
                    }
                    return
                } else {
                    if (l - b.top <= f.vthresh && i > 0) {
                        if (d.cmp != a) {
                            this.startScrollInterval(a, 'up')
                        }
                        return
                    } else {
                        if (k - b.left <= f.hthresh && (h ? e < this.maxPosition.x : e > 0)) {
                            if (d.cmp != a) {
                                this.startScrollInterval(a, 'left')
                            }
                            return
                        }
                    }
                }
            }
        }
        this.clearScrollInterval()
    },
    refreshElRegion: function() {
        var a = this.activeEl.getRegion();
        this.scrollElRegion = this.activeCmp.getScrollableContainerRegion()
    },
    activate: function(a, b) {
        var c = Ext.getScrollbarSize();
        this.direction = b || 'both';
        this.activeCmp = a;
        this.activeEl = a.getEl();
        this.maxPosition = a.getScrollableMaxPosition();
        this.refreshElRegion();
        this.activeEl.on('mousemove', this.onMouseMove, this)
    },
    deactivate: function() {
        if (this.activeEl) {
            this.clearScrollInterval();
            this.activeEl.un('mousemove', this.onMouseMove, this);
            this.activeEl = this.activeCmp = this.scrollElRegion = null;
            this.direction = 'both'
        }
    }
}, 1, 0, 0, 0, 0, 0, [Sch.util, 'ScrollManager'], 0);
Ext.cmd.derive('Sch.util.DragTracker', Ext.dd.DragTracker, {
    xStep: 1,
    yStep: 1,
    deferredTouchActivation: 0,
    initEl: function(d) {
        var a = this,
            c, b;
        Ext.dd.DragTracker.prototype.initEl.apply(this, arguments);
        if (Ext.supports.Touch) {
            if (Ext.isIE || Ext.isEdge && !window.TouchEvent) {
                a.mun(a.handle, a.handleListeners);
                a.handleListeners.mousedown.translate = !0;
                a.mon(a.handle, a.handleListeners)
            }
        }
    },
    constructor: function() {
        Ext.dd.DragTracker.prototype.constructor.apply(this, arguments);
        this.on('dragstart', this.bindListenersOnDragStart);
        this.moveListener = {
            pinchstart: this.abortWait,
            touchend: this.abortWait,
            mouseup: this.abortWait,
            mousemove: this.onMoveWhileWaiting,
            scope: this,
            capture: !0
        }
    },
    bindListenersOnDragStart: function() {
        var a = this.el;
        a.on(this.getListeners());
        this.on('dragend', this.unbindListenersOnDragEnd, this, {
            single: !0
        })
    },
    unbindListenersOnDragEnd: function() {
        this.el && this.el.un(this.getListeners())
    },
    getListeners: function() {
        return {
            scroll: this.onMouseMove,
            pinchstart: this.onMouseUp,
            scope: this
        }
    },
    destroy: function() {
        clearTimeout(this.deferTimer);
        Ext.dd.DragTracker.prototype.destroy.apply(this, arguments)
    },
    setXStep: function(a) {
        this.xStep = a
    },
    startScroll: null,
    deferTimer: null,
    deferTolerance: 10,
    moveListener: null,
    setYStep: function(a) {
        this.yStep = a
    },
    onMoveWhileWaiting: function(b, d) {
        var a = b.getXY();
        var c = this.startXY;
        if (Math.max(Math.abs(c[0] - a[0]), Math.abs(c[1] - a[1])) > this.deferTolerance) {
            this.abortWait();
            this.onMouseUp(b)
        }
    },
    abortWait: function() {
        clearTimeout(this.deferTimer);
        this.deferTimer = null;
        Ext.getDoc().un(this.moveListener)
    },
    getCurrentScroll: function() {
        return this.el.getScroll()
    },
    getRegion: function() {
        var e = this.startXY,
            a = this.getCurrentScroll();
        if (Ext.isIE && this.rtl) {
            a.left = this.el.dom.scrollWidth - this.el.getWidth() - a.left
        }
        var b = this.getXY(),
            c = b[0],
            d = b[1],
            j = a.left - this.startScroll.left,
            k = a.top - this.startScroll.top,
            f = e[0] - j,
            g = e[1] - k,
            h = Math.min(f, c),
            i = Math.min(g, d),
            m = Math.abs(f - c),
            l = Math.abs(g - d);
        return new Ext.util.Region(i, h + m, i + l, h)
    },
    onMouseDown: function(a, d) {
        var c = a.event.touches || [];
        if (c.length > 1 || !(a.type === 'mousedown' && a.pointerType === 'mouse' || a.type === 'longpress' && a.pointerType === 'touch' && !(Ext.isIE || Ext.isEdge))) {
            return
        }
        a.stopPropagation = Ext.emptyFn;
        this.startXY = a.getXY();
        if (this.deferredTouchActivation && c.length === 1) {
            var b = this;
            Ext.getDoc().on(this.moveListener);
            this.deferTimer = setTimeout(function() {
                var c = b.deferredTouchActivation;
                Ext.getDoc().un(b.moveListener);
                b.deferredTouchActivation = !1;
                b.onMouseDown(a, d);
                b.deferredTouchActivation = c
            }, this.deferredTouchActivation);
            return
        }
        Ext.dd.DragTracker.prototype.onMouseDown.call(this, a, d);
        this.lastXY = this.startXY;
        this.startScroll = this.getCurrentScroll();
        if (Ext.isIE && this.rtl) {
            this.startScroll.left = this.el.dom.scrollWidth - this.el.getWidth() - this.startScroll.left
        }
    },
    onMouseMove: function(a, g) {
        if (this.active && a.type === 'mousemove' && Ext.isIE9m && !a.browserEvent.button) {
            a.preventDefault();
            this.onMouseUp(a);
            return
        }
        a.preventDefault();
        var b = a.type === 'scroll' ? this.lastXY : a.getXY(),
            e = this.startXY;
        if (!this.active) {
            if (Math.max(Math.abs(e[0] - b[0]), Math.abs(e[1] - b[1])) > this.tolerance) {
                this.triggerStart(a)
            } else {
                return
            }
        }
        var c = b[0],
            d = b[1];
        if (this.xStep > 1) {
            c -= this.startXY[0];
            c = Math.round(c / this.xStep) * this.xStep;
            c += this.startXY[0]
        }
        if (this.yStep > 1) {
            d -= this.startXY[1];
            d = Math.round(d / this.yStep) * this.yStep;
            d += this.startXY[1]
        }
        var f = this.xStep > 1 || this.yStep > 1;
        if (!f || c !== b[0] || d !== b[1]) {
            this.lastXY = [c, d];
            if (this.fireEvent('mousemove', this, a) === !1) {
                this.onMouseUp(a)
            } else {
                this.onDrag(a);
                this.fireEvent('drag', this, a)
            }
        }
    }
}, 1, 0, 0, 0, 0, 0, [Sch.util, 'DragTracker'], 0);
Ext.cmd.derive('Sch.tooltip.ClockTemplate', Ext.XTemplate, {
    minuteHeight: 8,
    minuteTop: 2,
    hourHeight: 8,
    hourTop: 2,
    handLeft: 10,
    mode: 'hour',
    getRotateStyle: function(a) {
        return 'transform:rotate(Ddeg);'.replace(/D/g, a)
    },
    getRotateStyleIE: function() {
        var a = Math.PI / 180,
            b = Math.cos,
            c = Math.sin;
        return function(d, l, e) {
            var m = this,
                h = d * a,
                f = b(h),
                g = c(h),
                o = e * c((90 - d) * a),
                n = e * b((90 - d) * a),
                k = Math.min(e, e - o),
                j = d > 180 ? n : 0,
                i = "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11 = " + f + ', M12 = ' + -g + ', M21 = ' + g + ', M22 = ' + f + ')';
            return Ext.String.format('filter:{0};-ms-filter:{0};top:{1}px;left:{2}px;', i, k + l, j + m.handLeft)
        }
    }(),
    constructor: function() {
        var a = Ext.isIE && Ext.isIE8m;
        Ext.XTemplate.prototype.constructor.call(this, '<div class="sch-clockwrap ' + (a ? '' : 'sch-supports-border-radius') + ' sch-clock-{[this.mode]}"><div class="sch-clock"><div class="sch-hourIndicator" style="{[this.getHourStyle((values.date.getHours() % 12) * 30,' + this.hourTop + ', + ' + this.hourHeight + ')]}">{[Ext.Date.monthNames[values.date.getMonth()].substr(0,3)]}</div><div class="sch-minuteIndicator" style="{[this.getMinuteStyle(values.date.getMinutes() * 6,' + this.minuteTop + ', + ' + this.minuteHeight + ')]}">{[values.date.getDate()]}</div>' + (a ? '' : '<div class="sch-clock-dot"></div>') + '</div><span class="sch-clock-text">{text}</span></div>', {
            getMinuteStyle: a ? this.getRotateStyleIE : this.getRotateStyle,
            getHourStyle: a ? this.getRotateStyleIE : this.getRotateStyle
        })
    }
}, 1, 0, 0, 0, 0, 0, [Sch.tooltip, 'ClockTemplate'], 0);
Ext.cmd.derive('Sch.tooltip.Tooltip', Ext.tip.ToolTip, {
    autoHide: !1,
    anchor: 'b',
    padding: '0 3 0 0',
    showDelay: 0,
    hideDelay: 0,
    quickShowInterval: 0,
    dismissDelay: 0,
    trackMouse: !1,
    anchorOffset: 5,
    shadow: !1,
    frame: !1,
    schedulerView: null,
    message: null,
    startDate: null,
    endDate: null,
    template: null,
    valid: !0,
    mode: null,
    offsetAdjust: [18, 5],
    constructor: function(b) {
        var a = new Sch.tooltip.ClockTemplate();
        this.startDate = this.endDate = new Date();
        if (!this.template) {
            this.template = Ext.create('Ext.XTemplate', '<div class="x-fa sch-tip-{[values.valid ? "ok fa-check" : "notok fa-ban"]} ">{[this.renderClock(values.startDate, values.startText, "sch-tooltip-startdate")]}{[this.renderClock(values.endDate, values.endText, "sch-tooltip-enddate")]}<div class="sch-tip-message">{message}</div></div>', {
                renderClock: function(c, d, e) {
                    return a.apply({
                        date: c,
                        text: d,
                        cls: e
                    })
                }
            })
        }
        Ext.tip.ToolTip.prototype.constructor.apply(this, arguments)
    },
    update: function(b, a, d, c) {
        if (this.startDate - b !== 0 || this.endDate - a !== 0 || this.valid !== d || this.message !== c) {
            this.startDate = b;
            this.endDate = a;
            this.valid = d;
            this.message = c;
            var e = this.schedulerView.getFormattedDate(b),
                f = this.schedulerView.getFormattedEndDate(a, b);
            if (this.mode === 'calendar' && a.getHours() === 0 && a.getMinutes() === 0 && !(a.getYear() === b.getYear() && a.getMonth() === b.getMonth() && a.getDate() === b.getDate())) {
                a = Sch.util.Date.add(a, Sch.util.Date.DAY, -1)
            }
            Ext.tip.ToolTip.prototype.update.call(this, this.template.apply({
                valid: d,
                startDate: b,
                endDate: a,
                startText: e,
                endText: f,
                message: c
            }))
        }
        if (this.rendered && this.isVisible()) {
            if (Ext.getVersion().isGreaterThan('6.2.1')) {
                this.realignToTarget()
            } else {
                this.realign()
            }
        }
    },
    showForElement: function(b, a) {
        if (Sch.util.Date.compareUnits(this.schedulerView.getTimeResolution().unit, Sch.util.Date.DAY) >= 0) {
            this.mode = 'calendar';
            this.addCls('sch-day-resolution');
            this.removeCls('sch-hour-resolution')
        } else {
            this.mode = 'clock';
            this.removeCls('sch-day-resolution');
            this.addCls('sch-hour-resolution')
        }
        a = arguments.length > 1 ? a : this.offsetAdjust[0];
        this.mouseOffsets = [a - this.offsetAdjust[0], -this.offsetAdjust[1]];
        this.setTarget(b);
        this.show();
        this.realign()
    },
    realign: function() {
        this.alignTo(this.target, 'bl-tl?', this.mouseOffsets)
    },
    afterRender: function() {
        Ext.tip.ToolTip.prototype.afterRender.apply(this, arguments);
        this.el.on('mouseenter', this.realign, this)
    }
}, 1, 0, ['component', 'box', 'container', 'panel', 'tip', 'tooltip'], {
    'component': !0,
    'box': !0,
    'container': !0,
    'panel': !0,
    'tip': !0,
    'tooltip': !0
}, 0, 0, [Sch.tooltip, 'Tooltip'], 0);
Ext.cmd.derive('Sch.tooltip.HoverTip', Ext.tip.ToolTip, {
    trackMouse: !0,
    bodyCls: 'sch-hovertip',
    messageTpl: '<div class="sch-hovertip-msg">{message}</div>',
    autoHide: !1,
    dismissDelay: 1000,
    showDelay: 0,
    schedulerView: null,
    clockTpl: null,
    lastTime: null,
    lastResource: null,
    initComponent: function() {
        var a = this;
        var b = a.schedulerView;
        a.clockTpl = new Sch.tooltip.ClockTemplate();
        a.messageTpl = new Ext.XTemplate(a.messageTpl);
        Ext.tip.ToolTip.prototype.initComponent.apply(this, arguments);
        a.on('beforeshow', a.tipOnBeforeShow, a);
        b.mon(b.el, {
            mouseleave: function() {
                a.hide()
            },
            mousemove: a.handleMouseMove,
            scope: a
        });
        b.mon(b.el, {
            click: a.onBodyMouseDown,
            scope: a,
            delay: 1
        })
    },
    onBodyMouseDown: function() {
        this.hide()
    },
    handleMouseMove: function(b) {
        var a = this;
        var c = a.schedulerView;
        if (a.disabled) {
            return
        }
        if (b.getTarget('.' + c.itemCls, 5) && !b.getTarget(c.eventSelector)) {
            var d = c.getDateFromDomEvent(b, 'floor');
            if (d) {
                var e = c.resolveResource(b.getTarget());
                if (d - a.lastTime !== 0 || e !== a.lastResource) {
                    a.lastResource = e;
                    if (a.hidden) {
                        if (Sch.util.Date.compareUnits(this.schedulerView.getTimeResolution().unit, Sch.util.Date.DAY) >= 0) {
                            a.clockTpl.mode = 'day'
                        } else {
                            a.clockTpl.mode = 'hour'
                        }
                        a.show()
                    }
                    a.updateHoverTip(d, b)
                }
            } else {
                a.hide();
                a.lastTime = null;
                a.lastResource = null
            }
        } else {
            a.hide();
            a.lastTime = null;
            a.lastResource = null
        }
    },
    getText: function() {},
    updateHoverTip: function(a, d) {
        if (a) {
            var c = this.clockTpl.apply({
                date: a,
                text: this.schedulerView.getFormattedDate(a)
            });
            var b = this.messageTpl.apply({
                message: this.getText(a, d)
            });
            this.update(c + b);
            this.lastTime = a
        }
    },
    tipOnBeforeShow: function(a) {
        return !this.disabled && this.lastTime !== null
    }
}, 0, ['scheduler_hovertip'], ['component', 'box', 'container', 'panel', 'tip', 'tooltip', 'scheduler_hovertip'], {
    'component': !0,
    'box': !0,
    'container': !0,
    'panel': !0,
    'tip': !0,
    'tooltip': !0,
    'scheduler_hovertip': !0
}, ['widget.scheduler_hovertip'], 0, [Sch.tooltip, 'HoverTip'], 0);
Ext.cmd.derive('Sch.feature.DragCreator', Ext.Base, {
    disabled: !1,
    showHoverTip: !0,
    showDragTip: !0,
    dragTip: null,
    dragTolerance: 2,
    hoverTip: null,
    validatorFn: Ext.emptyFn,
    validatorFnScope: null,
    trackerConfig: null,
    schedulerView: null,
    template: '<div class="sch-dragcreator-proxy"><div class="sch-event-inner">&#160;</div></div>',
    constructor: function(a) {
        Ext.apply(this, a || {});
        this.lastTime = new Date();
        if (!(this.template instanceof Ext.Template)) {
            this.template = new Ext.Template(this.template)
        }
        this.schedulerView.on('destroy', this.onSchedulerDestroy, this);
        if (Ext.supports.Touch) {
            this.schedulerView.on('boxready', this.initDragTracker, this)
        } else {
            this.schedulerView.el.on('mousemove', this.initDragTracker, this, {
                single: !0
            })
        }
        this.callParent([a])
    },
    setDisabled: function(a) {
        this.disabled = a;
        if (this.hoverTip && this.hoverTip.setDisabled) {
            this.hoverTip.setDisabled(a)
        }
        if (this.dragTip && this.dragTip.setDisabled) {
            this.dragTip.setDisabled(a)
        }
    },
    getProxy: function() {
        if (!this.proxy) {
            this.proxy = this.template.append(this.schedulerView.getEl(), {}, !0);
            this.proxy.hide = function() {
                this.setStyle({
                    left: 0,
                    right: 0,
                    top: '-10000px'
                })
            }
        }
        return this.proxy
    },
    onBeforeDragStart: function(f, b) {
        var a = this.schedulerView,
            c = b.getTarget('.' + a.timeCellCls, 5);
        if (c && this.isCreateAllowed(b) && (!b.event.touches || b.event.touches.length === 1)) {
            var d = a.resolveResource(c);
            var e = a.getDateFromDomEvent(b);
            if (!this.disabled && c && a.fireEvent('beforedragcreate', a, d, e, b) !== !1) {
                this.resourceRecord = d;
                this.originalStart = e;
                this.resourceRegion = a.getScheduleRegion(this.resourceRecord, this.originalStart);
                this.dateConstraints = a.getDateConstraints(this.resourceRecord, this.originalStart);
                return !0
            }
        }
        return !1
    },
    isCreateAllowed: function(a) {
        return !a.getTarget(this.schedulerView.eventSelector)
    },
    disableHoverTip: function() {
        this.hoverTip && this.hoverTip.disable && this.hoverTip.disable()
    },
    onDragStart: function() {
        var a = this,
            b = a.schedulerView,
            d = a.tracker.getRegion(),
            c = a.getProxy();
        this.dragging = !0;
        if (this.hoverTip) {
            this.hoverTip.on('enable', this.disableHoverTip, this);
            this.hoverTip.disable()
        }
        a.start = a.originalStart;
        a.end = a.start;
        a.originalScroll = b.getScroll();
        if (b.isHorizontal()) {
            a.rowBoundaries = {
                top: a.resourceRegion.top,
                bottom: a.resourceRegion.bottom
            }
        } else {
            a.rowBoundaries = {
                left: a.resourceRegion.left,
                right: a.resourceRegion.right
            }
        }
        Ext.apply(d, a.rowBoundaries);
        if (b.rtl) {
            c.setStyle({
                right: 'auto'
            })
        }
        c.setBox(d);
        c.show();
        b.fireEvent('dragcreatestart', b, c);
        if (a.showDragTip) {
            a.dragTip.enable();
            a.dragTip.update(a.start, a.end, !0);
            a.dragTip.showForElement(c);
            a.dragTip.setStyle('visibility', 'visible')
        }
        Sch.util.ScrollManager.activate(b, b.isHorizontal() ? 'horizontal' : 'vertical')
    },
    onDrag: function() {
        var a = this,
            e = a.schedulerView,
            c = a.tracker.getRegion(),
            d = e.getStartEndDatesFromRegion(c, 'round'),
            f = '';
        if (!d) {
            return
        }
        a.start = d.start || a.start;
        a.end = d.end || a.end;
        var b = a.dateConstraints;
        if (b) {
            a.end = Sch.util.Date.constrain(a.end, b.start, b.end);
            a.start = Sch.util.Date.constrain(a.start, b.start, b.end)
        }
        a.valid = this.validatorFn.call(a.validatorFnScope || a, a.resourceRecord, a.start, a.end);
        if (a.valid && typeof a.valid !== 'boolean') {
            f = a.valid.message;
            a.valid = a.valid.valid
        }
        a.valid = a.valid !== !1;
        if (a.showDragTip) {
            a.dragTip.update(a.start, a.end, a.valid, f)
        }
        Ext.apply(c, a.rowBoundaries);
        var h = e.getScroll();
        var g = this.getProxy();
        g.setBox(c);
        if (e.isHorizontal()) {
            g.setY(a.resourceRegion.top + a.originalScroll.top - h.top)
        }
    },
    eventSwallower: function(a) {
        a.stopPropagation();
        a.preventDefault()
    },
    onDragEnd: function(h, c) {
        var a = this,
            f = a.schedulerView,
            d = !0,
            g = c.getTarget(),
            e = Ext.get(g);
        e.on('click', this.eventSwallower);
        a.unbindTimer = setTimeout(function() {
            e.un('click', a.eventSwallower)
        }, 100);
        a.dragging = !1;
        if (a.showDragTip) {
            a.dragTip.disable()
        }
        if (!a.start || !a.end || a.end - a.start <= 0) {
            a.valid = !1
        }
        var b = {
            start: a.start,
            end: a.end,
            resourceRecord: a.resourceRecord,
            e: c,
            valid: a.valid,
            finalize: function(d) {
                a.finalize(d, b)
            }
        };
        if (a.valid) {
            d = f.fireEvent('beforedragcreatefinalize', f, b, c, this.getProxy()) !== !1
        }
        if (d) {
            a.finalize(a.valid, b)
        }
        Sch.util.ScrollManager.deactivate()
    },
    createEvent: function(b) {
        var c = this.schedulerView,
            a = Ext.create(c.getEventStore().getModel());
        if (a.setCalendar) {
            var d = b.resourceRecord.getCalendar && b.resourceRecord.getCalendar() || c.getEventStore().getCalendar();
            a.setCalendar(d)
        }
        a.setStartEndDate(b.start, b.end);
        if (a.setCalendar) {
            a.setCalendar(null)
        }
        return a
    },
    finalize: function(c, b) {
        var a = this.schedulerView;
        if (c) {
            a.fireEvent('dragcreateend', a, this.createEvent(b), b.resourceRecord, b.e, this.getProxy())
        }
        this.proxy.hide();
        this.schedulerView.fireEvent('afterdragcreate', a, this.getProxy());
        if (this.hoverTip) {
            this.hoverTip.un('enable', this.disableHoverTip, this);
            this.hoverTip.enable()
        }
    },
    dragging: !1,
    initDragTracker: function() {
        var a = this,
            c = Ext.supports.Touch,
            b = a.schedulerView;
        var d = Ext.apply({
            el: b.el,
            rtl: b.rtl,
            tolerance: a.dragTolerance,
            listeners: {
                mousedown: a.verifyLeftButtonPressed,
                beforedragstart: a.onBeforeDragStart,
                dragstart: a.onDragStart,
                drag: a.onDrag,
                dragend: a.onDragEnd,
                scope: a
            }
        }, this.trackerConfig);
        this.bindRightClickPreventer();
        if (c) {
            this.showDragTip = !1;
            this.showHoverTip = !1;
            this.dragTip = null;
            this.hoverTip = null
        } else {
            this.setupTooltips()
        }
        a.tracker = new Sch.util.DragTracker(d)
    },
    bindRightClickPreventer: function() {
        var a;
        if (Ext.isIE9m) {
            a = 'mousedown'
        } else {
            a = 'contextmenu'
        }
        this.schedulerView.el.on(a, this.stopDragCreateOnRightClick, this, {
            priority: 999
        })
    },
    stopDragCreateOnRightClick: function(a) {
        if (a.button !== 0 && this.dragging) {
            this.tracker.onMouseUp(a)
        }
    },
    setupTooltips: function() {
        var a = this,
            b = a.schedulerView;
        if (this.showDragTip) {
            var c = this.dragTip;
            if (c instanceof Ext.tip.ToolTip) {
                c.schedulerView = b;
                c.on('beforeshow', function() {
                    return a.dragging
                })
            } else {
                this.dragTip = new Sch.tooltip.Tooltip(Ext.apply({
                    cls: 'sch-dragcreate-tip',
                    schedulerView: b,
                    constrainTo: b.up('grid').el,
                    listeners: {
                        beforeshow: function() {
                            return a.dragging
                        }
                    }
                }, c))
            }
        }
        if (a.showHoverTip) {
            var d = a.hoverTip;
            if (d instanceof Ext.tip.ToolTip) {
                d.schedulerView = b
            } else {
                a.hoverTip = Ext.ComponentManager.create(Ext.applyIf({
                    renderTo: Ext.getBody(),
                    target: b.el,
                    schedulerView: b
                }, d), 'scheduler_hovertip')
            }
        }
    },
    verifyLeftButtonPressed: function(b, a) {
        return a.button === 0
    },
    onSchedulerDestroy: function() {
        if (this.hoverTip && this.hoverTip.destroy) {
            this.hoverTip.destroy()
        }
        if (this.dragTip && this.dragTip.destroy) {
            this.dragTip.destroy()
        }
        if (this.tracker) {
            this.tracker.destroy()
        }
        if (this.proxy) {
            Ext.destroy(this.proxy);
            this.proxy = null
        }
        clearTimeout(this.unbindTimer)
    }
}, 1, 0, 0, 0, 0, 0, [Sch.feature, 'DragCreator'], 0);
Ext.cmd.derive('Sch.feature.SchedulerDragZone', Ext.dd.DragZone, {
    repairHighlight: !1,
    repairHighlightColor: 'transparent',
    containerScroll: !1,
    showTooltip: !0,
    tip: null,
    deltaSetXY: null,
    schedulerView: null,
    _onValidDropTimer: null,
    lastXY: null,
    showExactDropPosition: !1,
    enableCopy: !1,
    enableCopyKey: 'SHIFT',
    validatorFn: function(b, a, d, c, e) {
        return !0
    },
    validatorFnScope: null,
    copyKeyPressed: !1,
    dragDropProxyCls: 'sch-dd-ref',
    invalidCssClasses: ['sch-resizable-handle', 'sch-terminal'],
    constructor: function(e, d) {
        if (Ext.isIE8m && window.top !== window) {
            Ext.dd.DragDropManager.notifyOccluded = !0
        }
        var c = this.proxy = this.proxy || new Ext.dd.StatusProxy({
            shadow: !1,
            dropAllowed: this.dropAllowed,
            dropNotAllowed: this.dropNotAllowed,
            ensureAttachedToBody: Ext.emptyFn
        });
        Ext.dd.DragZone.prototype.constructor.apply(this, arguments);
        this.isTarget = !0;
        this.scroll = !1;
        this.ignoreSelf = !1;
        var a = this.schedulerView;
        Ext.Array.each(this.invalidCssClasses, this.addInvalidHandleClass, this);
        if (a.touchScroll) {
            this.showTooltip = !1
        }
        a.el.appendChild(c.el);
        this.bindRightClickPreventer();
        c.addCls('sch-dragproxy');
        a.on({
            eventdragstart: function() {
                Sch.util.ScrollManager.activate(a, a.constrainDragToResource && a.getMode())
            },
            aftereventdrop: function() {
                Sch.util.ScrollManager.deactivate()
            },
            scope: this
        });
        if (this.showTooltip) {
            var b = this.tip;
            if (b instanceof Ext.tip.ToolTip) {
                b.schedulerView = a
            } else {
                this.tip = new Sch.tooltip.Tooltip(Ext.apply({
                    schedulerView: a,
                    constrainTo: a.up('grid').el,
                    alignOnScroll: !1,
                    cls: 'sch-dragdrop-tip'
                }, b))
            }
        }
    },
    bindRightClickPreventer: function() {
        var a;
        if (Ext.isIE10) {
            a = 'contextmenu'
        } else {
            a = 'mousedown'
        }
        this.schedulerView.el.on(a, this.preventRightClick, this, {
            priority: 999
        })
    },
    destroy: function() {
        this.tip && this.tip.destroy();
        clearTimeout(this._onValidDropTimer);
        Ext.dd.DragZone.prototype.destroy.apply(this, arguments)
    },
    preventRightClick: function(a) {
        if (this.dragging && a.button !== 0) {
            a.stopEvent();
            return !1
        }
    },
    autoOffset: function() {
        this.setDelta(0, 0)
    },
    setupConstraints: function(a, d, b, c, f, e, i) {
        this.clearTicks();
        var g = f && !this.showExactDropPosition && e > 1 ? e : 0;
        var h = !f && !this.showExactDropPosition && e > 1 ? e : 0;
        this.resetConstraints();
        this.initPageX = a.left + b;
        this.initPageY = a.top + c;
        var k = d.right - d.left;
        var j = d.bottom - d.top;
        if (f) {
            if (i) {
                this.setXConstraint(a.left + b, a.right - k + b, g)
            } else {
                this.setXConstraint(a.left, a.right, g)
            }
            this.setYConstraint(a.top + c, a.bottom - j + c, h)
        } else {
            this.setXConstraint(a.left + b, a.right - k + b, g);
            if (i) {
                this.setYConstraint(a.top + c, a.bottom - j + c, h)
            } else {
                this.setYConstraint(a.top, a.bottom, h)
            }
        }
    },
    setXConstraint: function(c, b, a) {
        this.leftConstraint = c;
        this.rightConstraint = b;
        this.minX = c;
        this.maxX = b;
        if (a) {
            this.setXTicks(this.initPageX, a)
        }
        this.constrainX = !0
    },
    setYConstraint: function(c, b, a) {
        this.topConstraint = c;
        this.bottomConstraint = b;
        this.minY = c;
        this.maxY = b;
        if (a) {
            this.setYTicks(this.initPageY, a)
        }
        this.constrainY = !0
    },
    onDragEnter: Ext.emptyFn,
    onDragOut: Ext.emptyFn,
    setVisibilityForSourceEvents: function(a) {
        Ext.Array.each(this.dragData.getEventBarElements(), function(b) {
            b && Ext.fly(b)[a ? 'show' : 'hide']()
        })
    },
    onDragOver: function(b) {
        if (b && b.event.touches && b.event.touches.length > 1) {
            Ext.dd.DragDropManager.handleMouseUp(b);
            return
        }
        var d = b ? b.getXY() : this.lastXY;
        if (!d) {
            return
        }
        var a = this.dragData;
        if (!a.originalHidden) {
            this.setVisibilityForSourceEvents(!1);
            a.originalHidden = !0;
            this.onShiftKeyStateChange(b[this.enableCopyKey.toLowerCase() + 'Key'])
        }
        var k = a.startDate;
        var i = a.newResource;
        var c = this.schedulerView;
        this.updateDragContext(b);
        if (this.showExactDropPosition) {
            var g = c.isHorizontal();
            var j = c.getDateFromCoordinate(g ? d[0] : d[1]) - a.sourceDate;
            var h = new Date(a.origStart - 0 + j);
            var e = c.timeAxisViewModel.getDistanceBetweenDates(h, a.startDate);
            if (a.startDate > c.timeAxis.getStart()) {
                var f = this.proxy.el;
                if (e) {
                    if (c.isHorizontal()) {
                        f.setX(d[0] + (c.shouldAdjustForRtl() ? -e : e))
                    } else {
                        f.setY(d[1] + e)
                    }
                }
            }
        }
        if (a.startDate - k !== 0 || i !== a.newResource) {
            c.fireEvent('eventdrag', c, a.draggedRecords, a.startDate, a.newResource, a)
        }
        if (this.showTooltip) {
            this.tip.update(a.startDate, a.endDate, a.valid, a.message)
        }
        if (b) {
            this.lastXY = [b.browserEvent.clientX + document.body.scrollLeft, b.getY()]
        }
    },
    getCoordinate: function(a) {
        var b = this.schedulerView;
        if (b.isHorizontal()) {
            return a[0]
        }
        if (b.isVertical()) {
            return a[1]
        }
        if (b.isWeekView()) {
            return a
        }
    },
    getDragData: function(e) {
        var a = this.schedulerView,
            d = e.getTarget(a.eventSelector);
        if (!d || e.event.touches && e.event.touches.length > 1) {
            return
        }
        var b = a.resolveEventRecord(d),
            f = a.resolveResource(d),
            m = a.resolveAssignmentRecord(d),
            s = b && b.isDraggable() && !a.isReadOnly();
        if (!s || a.fireEvent('beforeeventdrag', a, b, e) === !1) {
            return null
        }
        var l = e.getXY(),
            j = Ext.fly(d).getXY(),
            k = [l[0] - j[0], l[1] - j[1]],
            r = Ext.fly(d).getRegion();
        this.lastXY = null;
        var q = a.isHorizontal();
        a.constrainDragToResource && !f && Ext.Error.raise('Resource could not be resolved for event: ' + b.getId());
        var n = a.getDateConstraints(a.constrainDragToResource ? f : null, b);
        this.setupConstraints(a.getScheduleRegion(a.constrainDragToResource ? f : null, b), r, k[0], k[1], q, a.getSnapPixelAmount(), Boolean(n));
        var h = b.getStartDate(),
            i = b.getEndDate(),
            p = a.timeAxis,
            o = this.getRelatedRecords(m || b) || [],
            c = a.getElementsFromEventRecord(b, a.isWeekView() ? null : f, null, !0);
        Ext.Array.each(o, function(b) {
            if (b && b.isAssignmentModel) {
                c = c.concat(a.getElementsFromEventRecord(b.getEvent(), b.getResource(), null, !0))
            } else {
                c = c.concat(a.getElementsFromEventRecord(b, null, null, !0))
            }
        });
        c = Ext.Array.unique(c);
        var g = {
            offsets: k,
            repairXY: j,
            prevScroll: a.getScroll(),
            dateConstraints: n,
            eventBarEls: c,
            getEventBarElements: function() {
                return g.eventBarEls = Ext.Array.map(g.eventBarEls, function(a) {
                    return a && document.getElementById(a.id)
                })
            },
            draggedRecords: [m || b].concat(o),
            resourceRecord: f,
            sourceDate: a.getDateFromCoordinate(this.getCoordinate(l)),
            origStart: h,
            origEnd: i,
            startDate: h,
            endDate: i,
            timeDiff: 0,
            startsOutsideView: h < p.getStart(),
            endsOutsideView: i > p.getEnd(),
            duration: i - h
        };
        this.copyKeyPressed = e[this.enableCopyKey.toLowerCase() + 'Key'];
        g.ddel = this.getDragElement(d, g);
        return g
    },
    onStartDrag: function() {
        var a = this.schedulerView,
            b = this.dragData;
        Ext.Array.each(b.getEventBarElements(), function(a) {
            Ext.fly(a).removeCls('sch-event-hover')
        });
        a.fireEvent('eventdragstart', a, b.draggedRecords);
        a.getScrollable().on('scroll', this.onViewScroll, this);
        if (Ext.versions.extjs.isGreaterThan('6.2.0')) {
            a.up('timelinetree,timelinegrid').getScrollable().on('scroll', this.onViewScroll, this)
        }
    },
    alignElWithMouse: function(a, c, d) {
        Ext.dd.DragZone.prototype.alignElWithMouse.apply(this, arguments);
        if (Ext.isIE && this.schedulerView.rtl && this.schedulerView.up('[isViewport]')) {
            this.deltaSetXY = null;
            Ext.dd.DragZone.prototype.alignElWithMouse.apply(this, arguments)
        }
        var b = this.getTargetCoord(c, d),
            e = a.dom ? a : Ext.fly(a, '_dd');
        this.setLocalXY(e, b.x + this.deltaSetXY[0], b.y + this.deltaSetXY[1])
    },
    onViewScroll: function(k) {
        var j = this.proxy,
            g = this.schedulerView,
            a = this.dragData,
            i = g.getScroll(),
            b = i.left,
            c = i.top,
            h = g.rtl && !g.up('[isViewport]');
        this.setVisibilityForSourceEvents(!1);
        var e = j.getXY();
        var f;
        if (h) {
            f = [e[0] - b + a.prevScroll.left, e[1] + c - a.prevScroll.top]
        } else {
            f = [e[0] + b - a.prevScroll.left, e[1] + c - a.prevScroll.top]
        }
        var d = this.deltaSetXY;
        if (h) {
            this.deltaSetXY = [d[0] - b + a.prevScroll.left, d[1] + c - a.prevScroll.top]
        } else {
            this.deltaSetXY = [d[0] + b - a.prevScroll.left, d[1] + c - a.prevScroll.top]
        }
        a.prevScroll = {
            left: b,
            top: c
        };
        j.setXY(f);
        this.onDragOver()
    },
    isCopyKeyPressed: function() {
        return this.enableCopy && this.copyKeyPressed
    },
    onShiftKeyStateChange: function(a) {
        var b = this.dragData;
        if (a) {
            b.refElements.addCls('sch-event-copy')
        } else {
            b.refElements.removeCls('sch-event-copy')
        }
        this.setVisibilityForSourceEvents(a);
        this.copyKeyPressed = a
    },
    onKey: function(a) {
        if (this.enableCopy && a.getKey() === a[this.enableCopyKey]) {
            this.onShiftKeyStateChange(a.type === 'keydown')
        }
        if (a.getKey() === a.ESC) {
            this.dragData.ddCallbackArgs = [a.getTarget(), a, this.id];
            this.finalize(!1);
            Ext.dd.DragDropManager.stopDrag(a);
            Ext.dd.DragDropManager.stopEvent(a)
        }
    },
    startDrag: function() {
        Ext.getDoc().on({
            keydown: this.onKey,
            keyup: this.onKey,
            useCapture: !0,
            scope: this
        });
        var b = Ext.dd.DragZone.prototype.startDrag.apply(this, arguments);
        var a = this.dragData;
        a.refElement = this.proxy.el.down('.' + this.dragDropProxyCls);
        a.refElements = this.proxy.el.select('.sch-event');
        a.refElement.removeCls('sch-event-hover');
        if (this.showTooltip) {
            this.tip.setStyle('visibility');
            this.tip.update(a.origStart, a.origEnd, !0);
            this.tip.showForElement(a.refElement, a.offsets[0])
        }
        if (this.copyKeyPressed) {
            a.refElements.addCls('sch-event-copy');
            a.originalHidden = !0
        }
        return b
    },
    endDrag: function() {
        this.schedulerView.getScrollable().un('scroll', this.onViewScroll, this);
        if (Ext.versions.extjs.isGreaterThan('6.2.0')) {
            this.schedulerView.up('timelinetree,timelinegrid').getScrollable().un('scroll', this.onViewScroll, this)
        }
        Ext.getDoc().un({
            keydown: this.onKey,
            keyup: this.onKey,
            useCapture: !0,
            scope: this
        });
        Ext.dd.DragZone.prototype.endDrag.apply(this, arguments)
    },
    onMouseUp: function() {
        if (!this.dragging) {
            this.afterDragFinalized()
        }
    },
    afterDragFinalized: function() {
        this.proxy.el.dom.style.top = this.proxy.el.dom.style.left = 0
    },
    updateRecords: function(a) {
        var e = this,
            c = e.schedulerView,
            d = c.getEventStore(),
            j = c.getResourceStore(),
            g = d.getAssignmentStore(),
            l = a.newResource,
            i = a.draggedRecords[0],
            f = a.draggedRecords.slice(1),
            h = a.resourceRecord,
            b = e.isCopyKeyPressed(),
            n = a.startDate,
            o = a.timeDiff,
            m = c.isWeekView(),
            k;
        if (g && d instanceof Sch.data.EventStore) {
            e.updateRecordsMultipleAssignmentMode(n, o, i, f, h, l, d, j, g, b, m)
        } else {
            if (g) {
                k = e.updateRecordsSingleAssignmentMode(n, o, i.getEvent(), Ext.Array.map(f, function(b) {
                    return b.getEvent()
                }), h, l, d, j, b, m)
            } else {
                k = e.updateRecordsSingleAssignmentMode(n, o, i, f, h, l, d, j, b, m)
            }
        }
        if (b) {
            a.copiedRecords = k
        }
        c.fireEvent('eventdrop', c, a.copiedRecords || a.draggedRecords, b)
    },
    updateRecordsSingleAssignmentMode: function(k, l, a, i, d, c, f, b, g, j) {
        var m = this,
            e = [];
        if (g) {
            a = a.fullCopy(null);
            e.push(a)
        }
        a.beginEdit();
        if (d && d.isResourceModel && c && c.isResourceModel && c !== d) {
            if (g) {
                a.assign(c)
            } else {
                a.reassign(d, c)
            }
        }
        a.setStartDate(k, !0, f.skipWeekendsDuringDragDrop);
        a.endEdit();
        if (!j) {
            var h = b.indexOf(d) - b.indexOf(c);
            Ext.Array.each(i, function(n) {
                var o = n.getResources();
                if (g) {
                    n = n.fullCopy(null);
                    e.push(n)
                }
                n.beginEdit();
                n.setStartDate(m.adjustStartDate(n.getStartDate(), l), !0, f.skipWeekendsDuringDragDrop);
                h !== 0 && o.length && Ext.Array.each(o, function(o) {
                    var e = b.indexOf(o) - h,
                        m;
                    if (e < 0) {
                        e = 0
                    } else {
                        if (e >= b.getCount()) {
                            e = b.getCount() - 1
                        }
                    }
                    m = b.getAt(e);
                    n.reassign(o, m)
                });
                n.endEdit()
            })
        }
        if (e.length) {
            f.append(e)
        }
        return e
    },
    updateRecordsMultipleAssignmentMode: function(m, h, d, c, e, a, f, l, k, i, g) {
        var j = this;
        var b = {};
        Ext.Array.each([].concat(d, c), function(o) {
            var n = o.getEvent();
            if (b[n.getId()]) {
                return
            }
            b[n.getId()] = !0;
            n.setStartDate(j.adjustStartDate(n.getStartDate(), h), !0, f.skipWeekendsDuringDragDrop);
            if (!g && e !== a) {
                if (i) {
                    n.assign(a)
                } else {
                    if (!n.isAssignedTo(a)) {
                        n.reassign(o.getResource(), a)
                    } else {
                        n.unassign(o.getResource())
                    }
                }
            }
        })
    },
    isValidDrop: function(c, b, a) {
        if (c !== b) {
            if (a.isAssignmentModel) {
                return !a.getEvent().isAssignedTo(b)
            } else {
                return !a.isAssignedTo(b)
            }
        }
        return !0
    },
    resolveResource: function(b) {
        var e = this.proxy.el.dom;
        var c = Ext.getBody().getScroll();
        var d = this.schedulerView;
        e.style.display = 'none';
        var a = document.elementFromPoint(b[0] - c.left, b[1] - c.top);
        if (Ext.isIE8 && window.top.Siesta) {
            a = document.elementFromPoint(b[0] - c.left, b[1] - c.top)
        }
        e.style.display = 'block';
        if (!a) {
            return null
        }
        if (Ext.fly(a).up('.x-grid-group-hd', 4, !0)) {
            return null
        }
        if (a.className.match('x-grid-item')) {
            return this.resolveResource([b[0], b[1] + 3])
        }
        if (!a.className.match(d.timeCellCls)) {
            var f = Ext.fly(a).up('.' + d.timeCellCls);
            if (f) {
                a = f.dom
            } else {
                return null
            }
        }
        return d.resolveResource(a)
    },
    adjustStartDate: function(a, c) {
        var b = this.schedulerView;
        return b.timeAxis.roundDate(new Date(a - 0 + c), b.snapRelativeToEventStartDate ? a : !1)
    },
    updateDragContext: function(b) {
        var a = this.dragData,
            e = b ? b.getXY() : this.lastXY,
            i, j;
        if (b) {
            if (b.browserEvent.touches && b.browserEvent.touches.length > 0) {
                i = b.browserEvent.touches[0].clientX
            } else {
                i = b.browserEvent.clientX != null ? b.browserEvent.clientX : b.clientX
            }
            j = [i + document.body.scrollLeft, b.getY()]
        } else {
            j = this.lastXY
        }
        if (!a.refElement) {
            return
        }
        var c = this.schedulerView,
            f = a.refElement.getRegion();
        if (c.timeAxis.isContinuous()) {
            if (c.isHorizontal() && this.minX < e[0] && e[0] < this.maxX || !c.isHorizontal() && this.minY < e[1] && e[1] < this.maxY) {
                var k = c.getDateFromCoordinate(this.getCoordinate(e));
                a.timeDiff = k - a.sourceDate;
                a.startDate = this.adjustStartDate(a.origStart, a.timeDiff);
                a.endDate = new Date(a.startDate - 0 + a.duration)
            }
        } else {
            var g;
            if (c.isWeekView()) {
                var h = {
                    bottom: f.bottom,
                    top: f.top
                };
                h.left = h.right = f.left + a.offsets[0];
                g = this.resolveStartEndDates(h)
            } else {
                g = this.resolveStartEndDates(f)
            }
            a.startDate = g.startDate;
            a.endDate = g.endDate;
            a.timeDiff = a.startDate - a.origStart
        }
        a.newResource = c.constrainDragToResource ? a.resourceRecord : this.resolveResource(j);
        if (a.newResource) {
            var d = !b || this.validatorFn.call(this.validatorFnScope || this, a.draggedRecords, a.newResource, a.startDate, a.duration, b);
            if (!d || typeof d === 'boolean') {
                a.valid = d !== !1;
                a.message = ''
            } else {
                a.valid = d.valid !== !1;
                a.message = d.message
            }
        } else {
            a.valid = !1
        }
    },
    getRelatedRecords: function(a) {
        var c = this.schedulerView,
            d = c.getEventSelectionModel(),
            b = d.getDraggableSelections();
        return Ext.Array.filter(b, function(b) {
            return a !== b
        })
    },
    getDragElement: function(h, e) {
        var g = e.getEventBarElements();
        var a;
        var d;
        var c = e.offsets[0];
        var i = e.offsets[1];
        var b = h.dom || h;
        var f = !this.schedulerView.rtl || this.schedulerView.shouldAdjustForRtl();
        if (g.length > 1) {
            var j = Ext.core.DomHelper.createDom({
                tag: 'div',
                cls: 'sch-dd-wrap',
                style: {
                    overflow: 'visible'
                }
            });
            Ext.Array.each(g, function(d) {
                a = d.cloneNode(!0);
                a.id = Ext.id();
                if (d === b) {
                    a.className += ' ' + this.dragDropProxyCls;
                    if (Ext.isIE8) {
                        Ext.fly(a).addCls(this.dragDropProxyCls)
                    }
                }
                j.appendChild(a);
                var g = Ext.fly(d).getOffsetsTo(b);
                if (f) {
                    a.style.left = g[0] - c + 'px'
                } else {
                    a.style.left = c - Ext.fly(d).getWidth() - g[0] + 'px'
                }
                a.style.top = g[1] - i + 'px'
            }, this);
            d = j
        } else {
            a = b.cloneNode(!0);
            a.id = Ext.id();
            a.style.left = (f ? -c : c - Ext.fly(b).getWidth()) + 'px';
            a.style.top = -i + 'px';
            a.className += ' ' + this.dragDropProxyCls;
            if (Ext.isIE8) {
                Ext.fly(a).addCls(this.dragDropProxyCls)
            }
            d = a
        }
        if (!b.style.height) {
            Ext.fly(d).setHeight(Ext.fly(b).getHeight())
        }
        return d
    },
    onDragDrop: function(c, f) {
        var b = this;
        b.updateDragContext(c);
        var j = b.schedulerView,
            i = b.cachedTarget || Ext.dd.DragDropMgr.getDDById(f),
            a = b.dragData,
            g = a.startDate && a.endDate,
            d = !0;
        if (b.tip) {
            b.tip.hide()
        }
        var h = a.startDate - a.origStart !== 0 || a.newResource !== a.resourceRecord;
        var e = (h || b.isCopyKeyPressed()) && a.valid && g && b.isValidDrop(a.resourceRecord, a.newResource, a.draggedRecords[0]);
        Ext.apply(a, {
            ddCallbackArgs: [i, c, f],
            start: a.startDate,
            end: a.endDate,
            finalize: function() {
                b.finalize.apply(b, arguments)
            }
        });
        if (e) {
            d = j.fireEvent('beforeeventdropfinalize', b, a, c) !== !1
        }
        if (d) {
            b.finalize(e)
        } else {
            b.proxy.el.addCls('sch-before-drag-finalized')
        }
    },
    finalize: function(f) {
        var a = this,
            b = a.schedulerView,
            c = b.getEventStore();
        a.proxy.el.removeCls('sch-before-drag-finalized');
        if (f) {
            var e, d = function() {
                e = !0
            };
            c.on('update', d, null, {
                single: !0
            });
            a.updateRecords(a.dragData);
            c.un('update', d, null, {
                single: !0
            });
            if (!e) {
                a.onInvalidDrop.apply(a, a.dragData.ddCallbackArgs)
            } else {
                if (Ext.isIE9) {
                    a.proxy.el.setStyle('visibility', 'hidden');
                    a._onValidDropTimer = Ext.Function.defer(a.onValidDrop, 10, a, a.dragData.ddCallbackArgs)
                } else {
                    a.onValidDrop.apply(a, a.dragData.ddCallbackArgs)
                }
                b.fireEvent('aftereventdrop', b, a.dragData.copiedRecords || a.dragData.draggedRecords)
            }
            a.afterDragFinalized()
        } else {
            a.onInvalidDrop.apply(a, a.dragData.ddCallbackArgs)
        }
    },
    onInvalidDrop: function(b, a, e) {
        if (!a) {
            a = b;
            b = a.getTarget() || document.body
        }
        if (this.tip) {
            this.tip.hide()
        }
        this.setVisibilityForSourceEvents(!0);
        var c = this.schedulerView,
            d = Ext.dd.DragZone.prototype.onInvalidDrop.call(this, b, a, e);
        c.fireEvent('aftereventdrop', c, this.dragData.copiedRecords || this.dragData.draggedRecords);
        this.afterDragFinalized();
        return d
    },
    resolveStartEndDates: function(f) {
        var b = this.dragData,
            a, c = b.origStart,
            e = b.origEnd,
            d = Sch.util.Date;
        if (!b.startsOutsideView) {
            a = this.schedulerView.getStartEndDatesFromRegion(f, 'round');
            if (a) {
                if (a.start && !this.schedulerView.timeAxis.dateInAxis(a.start, !1)) {
                    var g = this.schedulerView.timeAxis.getTickFromDate(a.start);
                    if (g) {
                        a.start = this.schedulerView.timeAxis.getDateFromTick(g)
                    }
                }
                c = a.start || b.startDate;
                e = d.add(c, d.MILLI, b.duration)
            }
        } else {
            if (!b.endsOutsideView) {
                a = this.schedulerView.getStartEndDatesFromRegion(f, 'round');
                if (a) {
                    e = a.end || b.endDate;
                    c = d.add(e, d.MILLI, -b.duration)
                }
            }
        }
        return {
            startDate: c,
            endDate: e
        }
    }
}, 1, 0, 0, 0, 0, 0, [Sch.feature, 'SchedulerDragZone'], 0);
Ext.cmd.derive('Sch.feature.DragDrop', Ext.Base, {
    validatorFn: function(b, a, d, c, e) {
        return !0
    },
    validatorFnScope: null,
    dragConfig: null,
    constructor: function(a, b) {
        Ext.apply(this, b);
        this.schedulerView = a;
        a.eventDragZone = new Sch.feature.SchedulerDragZone(a.getEl(), Ext.apply({
            ddGroup: a.id,
            schedulerView: a,
            validatorFn: this.validatorFn,
            validatorFnScope: this.validatorFnScope
        }, this.dragConfig));
        this.schedulerView.on('destroy', this.cleanUp, this);
        this.callParent([b])
    },
    cleanUp: function() {
        var a = this.schedulerView;
        if (a.eventDragZone) {
            a.eventDragZone.destroy()
        }
    }
}, 1, 0, 0, 0, 0, 0, [Sch.feature, 'DragDrop'], 0);
Ext.cmd.derive('Sch.patches.ScrollerEvents', Sch.util.Patch, {
    target: 'Ext.scroll.Scroller',
    minVersion: '6.0.2',
    maxVersion: '6.5.0',
    reportUrl: 'https://www.sencha.com/forum/showthread.php?334486-Please-add-xDelta-yDelta-to-scroller-s-scroll-scrollstart-scrollend-events&p=1169887#post1169887',
    obsoleteTestName: 'patches/004_scroller_events.t.js',
    description: ['Modifies scroller event firing routines to include xDelta, yDelta into', 'the scrollstart/scroll/scrollend event signatures'].join(' '),
    overrides: {
        privates: {
            fireScrollStart: function(b, c, e, f) {
                var a = this,
                    d = a.component;
                a.invokePartners('onPartnerScrollStart', b, c, e, f);
                if (a.hasListeners.scrollstart) {
                    a.fireEvent('scrollstart', a, b, c, e, f)
                }
                if (d && d.onScrollStart) {
                    d.onScrollStart(b, c)
                }
                Ext.GlobalEvents.fireEvent('scrollstart', a, b, c, e, f)
            },
            fireScroll: function(b, c, e, f) {
                var a = this,
                    d = a.component;
                a.invokePartners('onPartnerScroll', b, c, e, f);
                if (a.hasListeners.scroll) {
                    a.fireEvent('scroll', a, b, c, e, f)
                }
                if (d && d.onScrollMove) {
                    d.onScrollMove(b, c)
                }
                Ext.GlobalEvents.fireEvent('scroll', a, b, c, e, f)
            },
            fireScrollEnd: function(b, c, e, f) {
                var a = this,
                    d = a.component;
                a.invokePartners('onPartnerScrollEnd', b, c, e, f);
                if (a.hasListeners.scrollend) {
                    a.fireEvent('scrollend', a, b, c, e, f)
                }
                if (d && d.onScrollEnd) {
                    d.onScrollEnd(b, c)
                }
                Ext.GlobalEvents.fireEvent('scrollend', a, b, c, e, f)
            }
        }
    }
}, 0, 0, 0, 0, 0, 0, [Sch.patches, 'ScrollerEvents'], 0);
Ext.cmd.derive('Sch.feature.ResizeZone', Ext.util.Observable, {
    showTooltip: !0,
    showExactResizePosition: !1,
    validatorFn: Ext.emptyFn,
    validatorFnScope: null,
    schedulerView: null,
    origEl: null,
    handlePos: null,
    eventRec: null,
    mouseDownEvent: null,
    tip: null,
    tipInstance: null,
    startScroll: null,
    constructor: function(b) {
        Ext.apply(this, b);
        var a = this.schedulerView;
        a.on({
            destroy: this.cleanUp,
            scope: this
        });
        a.el.on({
            mousedown: this.onMouseDown,
            mouseup: this.onMouseUp,
            scope: this,
            delegate: '.sch-resizable-handle'
        });
        this.bindRightClickPreventer();
        Ext.util.Observable.prototype.constructor.apply(this, arguments)
    },
    bindRightClickPreventer: function() {
        var a;
        if (Ext.isIE9m) {
            a = 'mousedown'
        } else {
            a = 'contextmenu'
        }
        var b = {
            scope: this,
            priority: 999
        };
        b[a] = this.preventRightClick;
        this.schedulerView.el.on(b)
    },
    preventRightClick: function(a) {
        if (a.button !== 0 && this.resizer) {
            a.stopEvent();
            return !1
        }
    },
    onMouseDown: function(b, c) {
        var e = this.schedulerView;
        var d = this.eventRec = e.resolveEventRecord(c);
        var a = d.isResizable();
        if (b.button !== 0 || (a === !1 || typeof a === 'string' && !c.className.match(a))) {
            return
        }
        this.eventRec = d;
        this.handlePos = this.getHandlePosition(c);
        this.origEl = Ext.get(b.getTarget('.sch-event'));
        this.mouseDownEvent = b;
        e.el.on({
            mousemove: this.onMouseMove,
            scope: this,
            single: !0
        })
    },
    onMouseUp: function(b, c) {
        var a = this.schedulerView;
        a.el.un({
            mousemove: this.onMouseMove,
            scope: this,
            single: !0
        });
        this.mouseDownEvent = null
    },
    getTipInstance: function() {
        if (this.tipInstance) {
            return this.tipInstance
        }
        var b = this.schedulerView;
        var a = this.tip;
        if (a instanceof Ext.tip.ToolTip) {
            a.schedulerView = b
        } else {
            a = new Sch.tooltip.Tooltip(Ext.apply({
                rtl: this.rtl,
                schedulerView: b,
                constrainTo: b.up('grid').el,
                cls: 'sch-resize-tip'
            }, a))
        }
        return this.tipInstance = a
    },
    onMouseMove: function(c, g) {
        var b = this.schedulerView,
            a = this.eventRec,
            d = this.handlePos;
        if (!a || b.fireEvent('beforeeventresize', b, a, c) === !1) {
            return
        }
        delete this.eventRec;
        c.stopEvent();
        this.origEl.addCls('sch-event-resizing');
        this.resizer = this.createResizer(this.origEl, a, d);
        var e = this.resizer.resizeTracker;
        e.onMouseDown(this.mouseDownEvent, this.resizer[d].dom);
        e.onMouseMove(c, this.resizer[d].dom);
        if (this.showTooltip) {
            var f = this.getTipInstance();
            f.update(a.getStartDate(), a.getEndDate(), !0);
            f.showForElement(this.origEl, c.getX() - this.origEl.getX())
        }
        b.fireEvent('eventresizestart', b, a);
        b.getScrollable().on('scroll', this.onViewScroll, this)
    },
    getHandlePosition: function(b) {
        var a = b.className.match('start');
        if (this.schedulerView.isHorizontal()) {
            if (this.schedulerView.rtl) {
                return a ? 'east' : 'west'
            }
            return a ? 'west' : 'east'
        } else {
            return a ? 'north' : 'south'
        }
    },
    createResizer: function(a, f, d) {
        var b = this.schedulerView,
            o = this,
            e = b.resolveResource(a),
            c = b.getSnapPixelAmount(),
            l = b.getScheduleRegion(e, f),
            m = b.getDateConstraints(e, f),
            j = a.getHeight(),
            h = b.rtl && d[0] === 'e' || !b.rtl && d[0] === 'w' || d[0] === 'n',
            n = !b.isHorizontal(),
            g = {
                otherEdgeX: h ? a.getRight() : a.getLeft(),
                otherEdgeY: h ? a.getBottom() : a.getTop(),
                target: a,
                isStart: h,
                dateConstraints: m,
                resourceRecord: e,
                eventRecord: f,
                handles: d[0],
                minHeight: j,
                constrainTo: l,
                listeners: {
                    resizedrag: this.partialResize,
                    resize: this.afterResize,
                    scope: this
                }
            };
        if (n) {
            if (c > 0) {
                var k = a.getWidth();
                Ext.apply(g, {
                    minHeight: c,
                    minWidth: k,
                    maxWidth: k,
                    heightIncrement: c
                })
            }
        } else {
            if (c > 0) {
                Ext.apply(g, {
                    minWidth: c,
                    maxHeight: j,
                    widthIncrement: c
                })
            }
        }
        var i = new Ext.resizer.Resizer(g);
        if (i.resizeTracker) {
            i.resizeTracker.tolerance = -1
        }
        a.setStyle('z-index', parseInt(a.getStyle('z-index'), 10) + 1);
        Sch.util.ScrollManager.activate(b, b.isHorizontal() ? 'horizontal' : 'vertical');
        this.startScroll = b.getScroll();
        return i
    },
    getStartEndDates: function() {
        var b = this.resizer,
            e = b.el,
            a = this.schedulerView,
            h = b.isStart,
            c, d, g, f;
        if (h) {
            if (a.isHorizontal()) {
                g = a.rtl && a.shouldAdjustForRtl() ? e.getRight() : e.getLeft() + 1;
                f = [g, 0]
            } else {
                f = [(e.getRight() + e.getLeft()) / 2, e.getTop()]
            }
            d = b.eventRecord.getEndDate();
            if (a.snapRelativeToEventStartDate) {
                c = a.getDateFromXY(f);
                c = a.timeAxis.roundDate(c, b.eventRecord.getStartDate())
            } else {
                c = a.getDateFromXY(f, 'round')
            }
        } else {
            if (a.isHorizontal()) {
                g = a.rtl && a.shouldAdjustForRtl() ? e.getLeft() : e.getRight();
                f = [g, 0]
            } else {
                f = [(e.getRight() + e.getLeft()) / 2, e.getBottom()]
            }
            c = b.eventRecord.getStartDate();
            if (a.snapRelativeToEventStartDate) {
                d = a.getDateFromXY(f);
                d = a.timeAxis.roundDate(d, b.eventRecord.getEndDate())
            } else {
                d = a.getDateFromXY(f, 'round')
            }
        }
        c = c || b.start;
        d = d || b.end;
        if (b.dateConstraints) {
            c = Sch.util.Date.constrain(c, b.dateConstraints.start, b.dateConstraints.end);
            d = Sch.util.Date.constrain(d, b.dateConstraints.start, b.dateConstraints.end)
        }
        return {
            start: c,
            end: d
        }
    },
    partialResize: function(a, q, p, n) {
        var c = this.schedulerView,
            r = n ? n.getXY() : this.resizer.resizeTracker.lastXY,
            k = this.getStartEndDates(r),
            b = k.start,
            f = k.end,
            h = a.eventRecord,
            l = c.isHorizontal();
        if (this.showTooltip) {
            var g = this.validatorFn.call(this.validatorFnScope || this, a.resourceRecord, h, b, f);
            var m = '';
            if (g && typeof g !== 'boolean') {
                m = g.message;
                g = g.valid
            }
            this.getTipInstance().update(b, f, g !== !1, m)
        }
        if (this.showExactResizePosition) {
            var d = a.target.el,
                e, i, j;
            if (a.isStart) {
                if (c.isWeekView()) {
                    var o = c.weekview.getEventColumns(h)[0];
                    e = c.timeAxisViewModel.getDistanceBetweenDates(b, o.end)
                } else {
                    e = c.timeAxisViewModel.getDistanceBetweenDates(b, h.getEndDate())
                }
                if (l) {
                    i = c.getDateFromCoordinate(a.otherEdgeX - Math.min(q, a.maxWidth)) || b;
                    j = c.timeAxisViewModel.getDistanceBetweenDates(i, b);
                    if (d.getWidth() !== e) {
                        d.setWidth(e);
                        d.setX(d.getX() + j)
                    }
                } else {
                    i = c.getDateFromCoordinate(a.otherEdgeY - Math.min(p, a.maxHeight)) || b;
                    j = c.timeAxisViewModel.getDistanceBetweenDates(i, b);
                    if (d.getHeight() !== e) {
                        d.setHeight(e);
                        d.setY(d.getY() + j)
                    }
                }
            } else {
                e = c.timeAxisViewModel.getDistanceBetweenDates(h.getStartDate(), f);
                if (l) {
                    d.setWidth(e)
                } else {
                    d.setHeight(e)
                }
            }
        } else {
            if (!b || !f || a.start - b === 0 && a.end - f === 0) {
                return
            }
        }
        a.end = f;
        a.start = b;
        c.fireEvent('eventpartialresize', c, h, b, f, a.el)
    },
    onViewScroll: function(b, c, d, a) {
        if (a !== 0) {
            this.resizer.resizeTracker.onDrag({});
            this.partialResize(this.resizer, 0, 0)
        }
    },
    afterResize: function(e, p, o, m) {
        var b = this,
            n = e.resourceRecord,
            f = e.eventRecord,
            k = f.getStartDate(),
            l = f.getEndDate(),
            c = e.start || k,
            d = e.end || l,
            i = b.schedulerView,
            h = c - k || d - l,
            a = b.validatorFn.call(b.validatorFnScope || b, n, f, c, d, m);
        Sch.util.ScrollManager.deactivate();
        i.getScrollable().un('scroll', this.onViewScroll, this);
        if (this.showTooltip) {
            this.getTipInstance().hide()
        }
        if (Ext.isObject(a)) {
            a = a.valid
        }
        a = a !== !1 && c && d && d - c > 0;
        var g = {
            resourceRecord: e.resourceRecord,
            eventRecord: f,
            start: c,
            end: d,
            valid: a,
            modified: h,
            finalize: function(a) {
                b.finalize(a, g)
            }
        };
        var j = !0;
        if (a && h) {
            j = i.fireEvent('beforeeventresizefinalize', i, g, m) !== !1
        }
        if (j) {
            b.finalize(a && h, g)
        }
    },
    finalize: function(e, b) {
        var a = this.schedulerView;
        var c = !1;
        var d = function() {
            c = !0
        };
        a.getEventStore().on('update', d);
        this.resizer.target.destroy();
        if (Ext.isIE) {
            document.body.focus()
        }
        if (e) {
            if (this.resizer.isStart) {
                b.eventRecord.setStartDate(b.start, !1, a.getEventStore().skipWeekendsDuringDragDrop)
            } else {
                b.eventRecord.setEndDate(b.end, !1, a.getEventStore().skipWeekendsDuringDragDrop)
            }
            if (!c) {
                a.repaintEventsForResource(b.resourceRecord)
            }
        } else {
            a.repaintEventsForResource(b.resourceRecord)
        }
        this.resizer.destroy();
        delete this.resizer;
        a.getEventStore().un('update', d);
        a.fireEvent('eventresizeend', a, b.eventRecord);
        a.fireEvent('aftereventresize', a, b.eventRecord)
    },
    cleanUp: function() {
        if (this.tipInstance) {
            this.tipInstance.destroy()
        }
        this.mouseDownEvent = null
    }
}, 1, 0, 0, 0, 0, 0, [Sch.feature, 'ResizeZone'], 0);
Ext.cmd.derive('Sch.layout.TableLayout', Ext.view.TableLayout, {
    beginLayout: function(a) {
        var b = this,
            g = b.owner,
            e = g.ownerGrid,
            c = g.lockingPartner,
            d = c && c.grid.isVisible() && !c.grid.collapsed,
            f = a.context;
        a.doSyncRowHeights = d && (e.syncRowHeight || e.syncRowHeightOnNextLayout);
        if (!b.columnFlusherId) {
            b.columnFlusherId = b.id + '-columns';
            b.rowHeightFlusherId = b.id + '-rows'
        }
        if (b.owner.bufferedRenderer) {
            b.owner.bufferedRenderer.beforeTableLayout(a)
        }
        b.superclass.superclass.beginLayout.apply(this, [a]);
        if (d && c.componentLayout.isRunning()) {
            if (!a.lockingPartnerContext) {
                (a.lockingPartnerContext = f.getCmp(c)).lockingPartnerContext = a
            }
            if (a.doSyncRowHeights) {
                a.rowHeightSynchronizer = b.owner.syncRowHeightBegin()
            }
        }(a.headerContext = f.getCmp(b.headerCt)).viewContext = a
    }
}, 0, 0, 0, 0, ['layout.timeline_tablelayout'], 0, [Sch.layout, 'TableLayout'], 0);
Ext.cmd.derive('Sch.plugin.Zones', Sch.feature.AbstractTimeSpan, {
    innerTpl: null,
    cls: 'sch-zone',
    side: null,
    init: function(b) {
        if (typeof this.innerTpl === 'string') {
            this.innerTpl = new Ext.XTemplate(this.innerTpl)
        }
        this.side = b.rtl ? 'right' : 'left';
        var a = this.innerTpl;
        if (!this.template) {
            this.template = new Ext.XTemplate('<tpl for="."><div id="{id}" class="{$cls}" style="' + this.side + ':{left}px;top:{top}px;height:{height}px;width:{width}px;{style}">' + (a ? '{[this.renderInner(values)]}' : '') + '</div></tpl>', {
                renderInner: function(c) {
                    return a.apply(c)
                }
            })
        }
        if (typeof this.innerHeaderTpl === 'string') {
            this.innerHeaderTpl = new Ext.XTemplate(this.innerHeaderTpl)
        }
        Sch.feature.AbstractTimeSpan.prototype.init.apply(this, arguments)
    },
    getElementData: function(l, m, i, h) {
        var c = this.schedulerView,
            p = [];
        var o = c.getTimeSpanRegion(l, m, this.expandToFitView);
        var e, f, g, a, r, k;
        i = i || this.store.getRange();
        for (var n = 0, q = i.length; n < q; n++) {
            e = i[n];
            f = e.getStartDate();
            g = e.getEndDate();
            k = this.getTemplateData(e);
            if (f && g && Sch.util.Date.intersectSpans(f, g, l, m)) {
                a = Ext.apply({}, k);
                a.id = this.getElementId(e);
                a.$cls = this.getElementCls(e, k);
                if (c.isWeekView()) {
                    var b = c.getTimeSpanRegion(f, g);
                    a.left = b.left;
                    a.top = b.top;
                    a.height = b.bottom - b.top;
                    a.width = b.right - b.left
                } else {
                    var d = c.getCoordinateFromDate(Sch.util.Date.max(f, l));
                    var j = c.getCoordinateFromDate(Sch.util.Date.min(g, m));
                    if (c.isHorizontal()) {
                        a.left = d;
                        a.top = o.top;
                        a.width = h ? 0 : j - d;
                        a.style = h ? 'border-left-width:' + (j - d) + 'px' : ''
                    } else {
                        a.left = o.left;
                        a.top = d;
                        a.height = h ? 0 : j - d;
                        a.style = h ? 'border-top-width:' + (j - d) + 'px' : ''
                    }
                }
                p.push(a)
            }
        }
        return p
    },
    getHeaderElementId: function(b, a) {
        return Sch.feature.AbstractTimeSpan.prototype.getHeaderElementId.call(this, b) + (a ? '-start' : '-end')
    },
    getHeaderElementCls: function(b, a, d) {
        var c = b.clsField || this.clsField;
        if (!a) {
            a = this.getTemplateData(b)
        }
        return 'sch-header-indicator sch-header-indicator-' + (d ? 'start ' : 'end ') + this.uniqueCls + ' ' + (a[c] || '')
    },
    getZoneHeaderElementData: function(h, i, a, b) {
        var d = b ? a.getStartDate() : a.getEndDate(),
            g = null,
            f, e, c;
        if (d && Sch.util.Date.betweenLesser(d, h, i)) {
            f = this.getHeaderElementPosition(d);
            e = this.schedulerView.isHorizontal();
            c = this.getTemplateData(a);
            g = Ext.apply({
                id: this.getHeaderElementId(a, b),
                cls: this.getHeaderElementCls(a, c, b),
                isStart: b,
                side: e ? this.side : 'top',
                position: f
            }, c)
        }
        return g
    },
    getHeaderElementData: function(a) {
        var g = this.timeAxis.getStart(),
            h = this.timeAxis.getEnd(),
            e = [],
            d, b, c;
        a = a || this.store.getRange();
        for (var f = 0, i = a.length; f < i; f++) {
            d = a[f];
            b = this.getZoneHeaderElementData(g, h, d, !0);
            if (b) {
                e.push(b)
            }
            c = this.getZoneHeaderElementData(g, h, d, !1);
            if (c) {
                e.push(c)
            }
        }
        return e
    },
    updateZoneHeaderElement: function(b, a) {
        b.dom.className = a.cls;
        if (this.schedulerView.isHorizontal()) {
            this.setElementX(b, a.position)
        } else {
            b.setTop(a.position)
        }
    },
    updateHeaderElement: function(b) {
        var f = this.timeAxis.getStart(),
            g = this.timeAxis.getEnd(),
            a = Ext.get(this.getHeaderElementId(b, !0)),
            c = Ext.get(this.getHeaderElementId(b, !1)),
            e = this.getZoneHeaderElementData(f, g, b, !0),
            d = this.getZoneHeaderElementData(f, g, b, !1);
        if (!(a && d) || !(c && d)) {
            Ext.destroy(a, c);
            this.renderHeaderElements([b])
        } else {
            if (a) {
                if (!e) {
                    Ext.destroy(a)
                } else {
                    this.updateZoneHeaderElement(a, e)
                }
            }
            if (c) {
                if (!d) {
                    Ext.destroy(c)
                } else {
                    this.updateZoneHeaderElement(c, d)
                }
            }
        }
    }
}, 0, 0, 0, 0, ['plugin.scheduler_zones'], 0, [Sch.plugin, 'Zones'], 0);
Ext.cmd.derive('Sch.plugin.RowZones', Sch.plugin.Zones, {
    innerTpl: null,
    store: null,
    init: function(a) {
        this.store = Ext.StoreManager.lookup(this.store);
        this.uniqueCls = this.uniqueCls || 'sch-timespangroup-' + Ext.id();
        this.scheduler = a;
        a.registerRenderer(this.renderer, this);
        if (typeof this.innerTpl === 'string') {
            this.innerTpl = new Ext.XTemplate(this.innerTpl)
        }
        var b = this.innerTpl;
        if (!this.template) {
            this.template = new Ext.XTemplate('<tpl for="."><div id="' + this.uniqueCls + '-{id}" class="' + this.cls + ' ' + this.uniqueCls + ' {Cls}" style="' + (a.rtl ? 'right' : 'left') + ':{start}px;width:{width}px;top:{start}px;height:{width}px;{style}">' + (b ? '{[this.renderInner(values)]}' : '{' + this.store.getModel().prototype.nameField + '}') + '</div></tpl>', {
                renderInner: function(c) {
                    return b.apply(c)
                }
            })
        }
        this.storeListeners = {
            refresh: this.fullRefresh,
            clear: this.fullRefresh,
            add: this.onZoneAdd,
            remove: this.onZoneRemove,
            update: this.onZoneUpdate,
            scope: this
        };
        this.store.on(this.storeListeners)
    },
    destroy: function() {
        this.store.un(this.storeListeners);
        Sch.plugin.Zones.prototype.destroy.apply(this, arguments)
    },
    getViewRecordByZone: function(a) {
        throw 'Abstract method call'
    },
    getZoneContainerEl: function(c) {
        var b = this.scheduler.getSchedulingView(),
            a = this.getViewRecordByZone(c);
        return a && b.getNode(a).querySelector('.x-grid-cell-inner')
    },
    onZoneRemove: function(b, a) {
        Ext.Array.forEach(a, function(d) {
            var c = document.getElementById(this.getElementId(d));
            c && c.parentElement.removeChild(c)
        }, this)
    },
    onZoneAdd: function(b, a) {
        Ext.Array.forEach(a, function(d) {
            var c = this.getZoneContainerEl(d);
            c && this.appendZoneElement(d, c)
        }, this)
    },
    fullRefresh: function() {
        var b = this,
            a = this.scheduler.getSchedulingView();
        if (a.el) {
            a.el.select('.' + this.uniqueCls).remove();
            Ext.Array.forEach(a.getNodes(), function(c) {
                b.renderRecordZones(a.getRecord(c), !0)
            })
        }
    },
    renderer: function(e, d, a, c) {
        var b = '';
        if (a && (this.scheduler.isHorizontal() || c === 0)) {
            b = this.renderRecordZones(a)
        }
        return b
    },
    getRecordZones: function(a) {
        throw 'Abstract method call'
    },
    getZoneRenderData: function(c) {
        var b = this.scheduler,
            a = b.getSchedulingView()[b.getMode()].getEventRenderData(c),
            d, e;
        if (b.isHorizontal()) {
            d = b.rtl ? a.right : a.left;
            e = a.width
        } else {
            d = a.top;
            e = a.height
        }
        return Ext.apply({
            id: c.internalId,
            start: d,
            width: e,
            Cls: c.getCls()
        }, c.data)
    },
    renderRecordZones: function(l, b) {
        var g = this.scheduler,
            j = g.timeAxis.getStart(),
            k = g.timeAxis.getEnd(),
            e = [],
            i = this.getRecordZones(l),
            h = '',
            c, d, a;
        for (var f = 0, m = i.length; f < m; f++) {
            a = i[f];
            c = a.getStartDate();
            d = a.getEndDate();
            if (c && d && Sch.util.Date.intersectSpans(c, d, j, k)) {
                e.push(this.getZoneRenderData(a))
            }
        }
        if (b) {
            if (a) {
                if (Ext.isBoolean(b)) {
                    b = this.getZoneContainerEl(a)
                }
                this.template.append(b, e)
            }
        } else {
            h = this.template.apply(e)
        }
        return h
    },
    appendZoneElement: function(a) {
        var e = this.scheduler,
            f = e.timeAxis.getStart(),
            g = e.timeAxis.getEnd(),
            c = this.getZoneContainerEl(a),
            b = a.getStartDate(),
            d = a.getEndDate();
        if (c && b && d && Sch.util.Date.intersectSpans(b, d, f, g)) {
            this.template.append(c, this.getZoneRenderData(a))
        }
    },
    onZoneUpdate: function(k, c) {
        var a = document.getElementById(this.getElementId(c));
        if (a) {
            var b = this.scheduler,
                f = b.timeAxis.getStart(),
                g = b.timeAxis.getEnd();
            var h = Sch.util.Date.max(f, c.getStartDate()),
                j = Sch.util.Date.min(g, c.getEndDate()),
                i = c.getCls();
            var d = b.getSchedulingView().getCoordinateFromDate(h);
            var e = b.getSchedulingView().getCoordinateFromDate(j) - d;
            a.className = this.cls + ' ' + this.uniqueCls + ' ' + (i || '');
            a.style.left = d + 'px';
            a.style.top = d + 'px';
            a.style.height = e + 'px';
            a.style.width = e + 'px'
        }
    }
}, 0, 0, 0, 0, 0, 0, [Sch.plugin, 'RowZones'], 0);
Ext.cmd.derive('Sch.plugin.ResourceZones', Sch.plugin.RowZones, {
    cls: 'sch-resourcezone',
    getRecordZones: function(a) {
        return a.getEvents(this.store)
    },
    getViewRecordByZone: function(a) {
        return a.getResource()
    },
    getZoneContainerEl: function(e) {
        var a;
        if (this.scheduler.isHorizontal()) {
            a = Sch.plugin.RowZones.prototype.getZoneContainerEl.apply(this, arguments)
        } else {
            var b = this.scheduler.getSchedulingView(),
                c = e.getResource();
            if (b.el && c) {
                var d = b.resourceStore.indexOf(c);
                a = b.getNode(0).querySelector('.x-grid-cell:nth-child(' + (d + 1) + ') .x-grid-cell-inner')
            }
        }
        return a
    },
    fullRefresh: function() {
        var b = this,
            a = this.scheduler.getSchedulingView();
        if (b.scheduler.isHorizontal()) {
            Sch.plugin.RowZones.prototype.fullRefresh.apply(this, arguments)
        } else {
            if (a.el) {
                a.el.select('.' + this.uniqueCls).remove();
                a.resourceStore.each(function(a) {
                    b.renderRecordZones(a, !0)
                })
            }
        }
    }
}, 0, 0, 0, 0, ['plugin.scheduler_resourcezones'], 0, [Sch.plugin, 'ResourceZones'], 0);
Ext.cmd.derive('Sch.mixin.AbstractSchedulerPanel', Ext.Base, {
    eventBarIconClsField: '',
    enableEventDragDrop: !0,
    resourceColumnClass: 'Sch.column.Resource',
    resourceColumnWidth: null,
    allowOverlap: !0,
    startParamName: 'startDate',
    endParamName: 'endDate',
    passStartEndParameters: !1,
    eventRenderer: null,
    eventRendererScope: null,
    eventStore: null,
    resourceStore: null,
    onEventCreated: function(a, b) {},
    resourceZones: null,
    resourceZonesConfig: null,
    initStores: function() {
        var a = this.resourceStore || this.store;
        if (this.crudManager) {
            if (!Sch.crud.AbstractManager) {
                throw new Error('Sch.crud.AbstractManager not loaded, did you forget to require crudManager class (e.g. Sch.data.CrudManager)?')
            }
            if (!(this.crudManager instanceof Sch.crud.AbstractManager)) {
                this.crudManager = Ext.create(this.crudManager.xclass || 'Sch.data.CrudManager', Ext.clone(this.crudManager))
            }
        }
        if (!a) {
            if (this.crudManager) {
                a = this.resourceStore = this.crudManager.getResourceStore()
            }
            if (!a) {
                if (this.isTree) {
                    a = new Sch.data.ResourceTreeStore({
                        proxy: 'memory'
                    })
                } else {
                    a = new Sch.data.ResourceStore()
                }
            }
        }
        if (!this.dependencyStore) {
            if (this.crudManager) {
                this.dependencyStore = this.crudManager.getDependencyStore()
            }
        }
        if (!this.eventStore) {
            if (this.crudManager) {
                this.eventStore = this.crudManager.getEventStore()
            }
            this.eventStore = this.eventStore || new Sch.data.EventStore()
        }
        this.store = Ext.StoreManager.lookup(a);
        this.resourceStore = this.store;
        this.setEventStore(this.eventStore);
        if (!this.eventStore || !this.eventStore.isEventStore) {
            Ext.Error.raise('Your eventStore should be a subclass of Sch.data.EventStore (or consume the EventStore mixin)')
        }
        this.resourceStore.eventStore = this.getEventStore()
    },
    _initializeSchedulerPanel: function() {
        this.initStores();
        if (this.eventBodyTemplate && typeof this.eventBodyTemplate === 'string') {
            this.eventBodyTemplate = new Ext.XTemplate(this.eventBodyTemplate)
        }
        this.on('destroy', function() {
            this.setResourceStore(null);
            this.setEventStore(null)
        })
    },
    getResourceStore: function() {
        return this.resourceStore
    },
    setResourceStore: function(a) {
        var b = this.getResourceStore();
        this.resourceStore = a = a && Ext.StoreManager.lookup(a);
        var c = this.getEventStore();
        if (c && a) {
            c.setResourceStore(a)
        }
        var d = this.getSchedulingView();
        d && d.setResourceStore(a);
        if (a) {
            this.fireEvent('resourcestorechange', this, a, b);
            if (this.isVertical()) {
                this.refreshResourceColumns();
                this.mun(b, this.verticalListeners);
                this.mon(a, this.verticalListeners)
            }
            if (this.isWeekView()) {
                this.mun(b, this.calendarResourceStoreListeners);
                this.mon(a, this.calendarResourceStoreListeners)
            }
            if (b === this.store) {
                this.reconfigure(a)
            } else {
                this.refreshViews(!1)
            }
        }
    },
    getEventStore: function() {
        return this.eventStore
    },
    setEventStore: function(a) {
        var f = this.getEventStore();
        a = a && Ext.StoreManager.lookup(a);
        if (this.getEventStore()) {
            this.mun(this.getEventStore(), 'beforeload', this.applyStartEndParameters, this)
        }
        var d = this.getResourceStore();
        var b = this.getAssignmentStore();
        var c = this.getDependencyStore();
        this.eventStore = a;
        if (d && a) {
            d.setEventStore(a)
        }
        if (b && a && !a.getAssignmentStore()) {
            a.setAssignmentStore(b)
        }
        if (c && a && !a.getDependencyStore()) {
            a.setDependencyStore(c)
        }
        var e = this.getSchedulingView();
        e && e.setEventStore(a);
        if (a) {
            this.fireEvent('eventstorechange', this, a, f);
            if (this.passStartEndParameters) {
                this.mon(a, 'beforeload', this.applyStartEndParameters, this)
            }
            this.refreshViews(!1)
        }
    },
    applyStartEndParameters: function(b, c) {
        var a = b.getProxy();
        a.setExtraParam(this.startParamName, this.getStart());
        a.setExtraParam(this.endParamName, this.getEnd())
    },
    getAssignmentStore: function() {
        var b = this,
            a = b.getEventStore();
        return a && a.isStore && a.getAssignmentStore() || b.assignmentStore
    },
    setAssignmentStore: function(a) {
        var b = this.getAssignmentStore();
        this.getEventStore().setAssignmentStore(a);
        if (a) {
            this.fireEvent('assignmentstorechange', this, a, b);
            this.refreshViews(!1)
        }
    },
    getDependencyStore: function() {
        var b = this,
            a = b.getEventStore();
        return a && a.isStore && a.getDependencyStore() || b.dependencyStore
    },
    setDependencyStore: function(a) {
        var b = this.getDependencyStore();
        this.getEventStore().setDependencyStore(a);
        if (a) {
            this.fireEvent('dependencystorechange', this, a, b);
            this.refreshViews(!1)
        }
    },
    createResourceColumns: function(a) {
        return Ext.Array.map(this.resourceStore.getRange(), function(b) {
            return {
                xclass: this.resourceColumnClass,
                renderer: this.mainRenderer,
                scope: this,
                width: a || 100,
                text: b.getName(),
                model: b
            }
        }, this)
    },
    registerEventEditor: function(a) {
        this.getSchedulingView().registerEventEditor(a)
    }
}, 0, 0, 0, 0, 0, 0, [Sch.mixin, 'AbstractSchedulerPanel'], 0);
Ext.cmd.derive('Sch.template.Event', Ext.XTemplate, {
    eventPrefix: null,
    resizeHandles: null,
    resizeTpl: '<div class="sch-resizable-handle sch-resizable-handle-DIR"></div>',
    terminalSides: null,
    terminalTpl: '<div class="sch-terminal sch-terminal-SIDE"></div>',
    constructor: function(a) {
        var b = this;
        Ext.apply(b, a);
        Ext.XTemplate.prototype.constructor.call(this, this.getOuterMarkup())
    },
    getOuterMarkup: function() {
        var a = this;
        var b = Ext.Array.map(a.terminalSides || [], function(b) {
            return a.terminalTpl.replace(/SIDE/, b)
        }).join('');
        return ['<tpl for=".">', '<div unselectable="on" tabindex="-1" id="', a.eventPrefix, '{id}" style="right:{right}px;left:{left}px;top:{top}px;height:{height}px;width:{width}px;{style}" class="sch-event ', 'x-', 'unselectable {internalCls} {cls}">', a.resizeHandles === 'start' || a.resizeHandles === 'both' ? a.resizeTpl.replace(/DIR/, 'start') : '', '<div unselectable="on" class="sch-event-inner {iconCls}">', this.getInnerMarkup(), '</div>', a.resizeHandles === 'end' || a.resizeHandles === 'both' ? a.resizeTpl.replace(/DIR/, 'end') : '', b, '</div>', '</tpl>'].join('')
    },
    getInnerMarkup: function() {
        return '{body}'
    }
}, 1, 0, 0, 0, 0, 0, [Sch.template, 'Event'], 0);
Ext.cmd.derive('Sch.view.Vertical', Ext.Base, {
    view: null,
    constructor: function(a) {
        Ext.apply(this, a)
    },
    getElementsFromEventRecord: function(e, d, f, c) {
        var b = this.view,
            a;
        c = c || !1;
        if (d) {
            a = '[id^=' + b.eventPrefix + e.internalId + '-' + d.internalId + '-]'
        } else {
            a = '[id^=' + b.eventPrefix + e.internalId + '-]'
        }
        return b.getEl().query(a, c)
    },
    translateToScheduleCoordinate: function(b) {
        var a = this.view;
        return b - a.getViewContainerElementTop() + a.getVerticalScroll()
    },
    translateToPageCoordinate: function(c) {
        var a = this.view;
        var b = a.getVerticalScroll();
        return c + a.getViewContainerElementTop() - b
    },
    getDateFromXY: function(d, b, c) {
        var a = d[1];
        if (!c) {
            a = this.translateToScheduleCoordinate(a)
        }
        return this.view.timeAxisViewModel.getDateFromPosition(a, b)
    },
    getEventRenderData: function(f, k) {
        var b = Math,
            d = f.getStartDate(),
            e = f.getEndDate(),
            c = this.view,
            g = c.timeAxis.getStart(),
            h = c.timeAxis.getEnd(),
            i = b.floor(c.getCoordinateFromDate(Sch.util.Date.max(d, g))),
            j = b.floor(c.getCoordinateFromDate(Sch.util.Date.min(e, h))),
            a = {
                event: f
            };
        a.top = b.max(0, b.min(i, j) - c.eventBorderWidth);
        a.height = b.max(1, b.abs(i - j));
        a.start = d;
        a.end = e;
        a.startsOutsideView = d < g;
        a.endsOutsideView = e > h;
        return a
    },
    getScheduleRegion: function(b, i) {
        var a = this.view,
            c = b ? Ext.fly(a.getScheduleCell(a.getNodes()[0], a.getResourceStore().indexOf(b))).getRegion() : a.getTableRegion(),
            e = a.timeAxis.getStart(),
            g = a.timeAxis.getEnd(),
            d = a.getDateConstraints(b, i) || {
                start: e,
                end: g
            },
            f = this.translateToPageCoordinate(a.getCoordinateFromDate(Sch.util.Date.max(e, d.start))),
            h = this.translateToPageCoordinate(a.getCoordinateFromDate(Sch.util.Date.min(g, d.end))),
            k = c.left + a.barMargin,
            j = (b ? c.left + this.getResourceColumnWidth(b) : c.right) - a.barMargin;
        return new Ext.util.Region(Math.min(f, h), j, Math.max(f, h), k)
    },
    getResourceColumnWidth: function(a) {
        return this.view.timeAxisViewModel.resourceColumnWidth
    },
    getResourceColumnLayoutAvailableWidth: function(b) {
        var a = this;
        return a.getResourceColumnWidth(b) - 2 * a.view.barMargin - a.view.cellBorderWidth
    },
    getResourceRegion: function(b, c, e) {
        var a = this.view,
            d = a.getResourceStore().indexOf(b) * this.getResourceColumnWidth(b),
            f = a.timeAxis.getStart(),
            h = a.timeAxis.getEnd(),
            k = c ? Sch.util.Date.max(f, c) : f,
            m = e ? Sch.util.Date.min(h, e) : h,
            g = Math.max(0, a.getCoordinateFromDate(k) - a.cellTopBorderWidth),
            i = a.getCoordinateFromDate(m) - a.cellTopBorderWidth,
            l = d + a.cellBorderWidth,
            j = d + this.getResourceColumnWidth(b) - a.cellBorderWidth;
        return new Ext.util.Region(Math.min(g, i), j, Math.max(g, i), l)
    },
    columnRenderer: function(o, c, f, m, h) {
        var a = this.view;
        var i = '';
        if (m === 0) {
            var p = Sch.util.Date,
                n = a.timeAxis,
                b, e, d, l;
            b = [];
            e = a.getEventStore().getEventsForResource(f);
            for (d = 0, l = e.length; d < l; d++) {
                var g = e[d],
                    j = g.getStartDate(),
                    k = g.getEndDate();
                if (j && k && n.timeSpanInAxis(j, k)) {
                    b.push(a.generateTplData(g, f, h))
                }
            }
            a.eventLayout.vertical.applyLayout(b, this.getResourceColumnLayoutAvailableWidth(f));
            i = '&#160;' + a.eventTpl.apply(b)
        }
        if (h % 2 === 1) {
            c.tdCls = (c.tdCls || '') + ' ' + a.altColCls;
            c.cellCls = (c.cellCls || '') + ' ' + a.altColCls
        }
        return i
    },
    resolveResource: function(a) {
        var f = this,
            b = f.view,
            d, c = -1,
            e;
        d = Ext.fly(a).is(b.eventSelector) && a || Ext.fly(a).up(b.eventSelector, null, !0);
        if (d) {
            e = b.getResourceRecordFromDomId(d.id)
        } else {
            a = Ext.fly(a).is(b.timeCellSelector) ? a : Ext.fly(a).up(b.timeCellSelector, null, !0);
            if (a) {
                if (Ext.isIE8m) {
                    c = 0;
                    a = a.previousSibling;
                    while (a) {
                        if (a.nodeType === 1) {
                            c++
                        }
                        a = a.previousSibling
                    }
                } else {
                    c = Ext.Array.indexOf(Array.prototype.slice.call(a.parentNode.children), a)
                }
            }
            e = c >= 0 && b.getResourceStore().getAt(c) || null
        }
        return e
    },
    onEventUpdate: function(l, a) {
        var c = this;
        var b = a.previous || {};
        var g = c.view;
        var j = g.timeAxis;
        var d = a.getStartDate();
        var e = a.getEndDate();
        var i = b.StartDate || d;
        var k = b.EndDate || e;
        var h = i && k && j.timeSpanInAxis(i, k);
        var f;
        if (a.resourceIdField in b && h) {
            f = l.getResourceStore().getById(b[a.resourceIdField]);
            f && c.relayoutRenderedEvents(f)
        }
        if (d && e && j.timeSpanInAxis(d, e) || h) {
            c.renderSingle(a);
            Ext.Array.each(a.getResources(), function(b) {
                c.relayoutRenderedEvents(b);
                g.getEventSelectionModel().isSelected(a) && g.onEventBarSelect(a, !0)
            })
        }
    },
    onEventAdd: function(g, e) {
        var d = this,
            f = d.view,
            a, b, c;
        if (e.length === 1) {
            a = e[0];
            b = a.getStartDate();
            c = a.getEndDate();
            if (b && c && f.timeAxis.timeSpanInAxis(b, c)) {
                d.renderSingle(a);
                Ext.Array.each(g.getResourcesForEvent(a), function(a) {
                    d.relayoutRenderedEvents(a)
                })
            }
        } else {
            f.repaintAllEvents()
        }
    },
    onEventRemove: function(j, f) {
        var i = this,
            g = i.view,
            e, c, d, b, h, a;
        for (a = !1, b = 0, h = f.length; !a && b < h; b++) {
            e = f[b];
            c = e.getStartDate();
            d = e.getEndDate();
            a = c && d && g.timeAxis.timeSpanInAxis(c, d);
            a && Ext.asap(function() {
                g.repaintAllEvents()
            })
        }
    },
    relayoutRenderedEvents: function(b) {
        var c = [],
            a = this.view,
            d = a.getEventStore().getEventsForResource(b);
        Ext.Array.each(d, function(d) {
            var e = a.getElementsFromEventRecord(d, b);
            e.length && c.push({
                start: d.getStartDate(),
                end: d.getEndDate(),
                event: d,
                node: e[0]
            })
        });
        a.eventLayout.vertical.applyLayout(c, this.getResourceColumnLayoutAvailableWidth(b));
        Ext.Array.each(c, function(c) {
            c.node.setStyle({
                left: c.left + 'px',
                width: c.width + 'px'
            });
            a.fireEvent('eventrepaint', a, c.event, c.node)
        })
    },
    renderSingle: function(b) {
        var a = this.view,
            c = b.getStartDate(),
            d = b.getEndDate();
        Ext.Array.each(a.getElementsFromEventRecord(b), function(a) {
            a.destroy()
        });
        if (c && d && a.timeAxis.timeSpanInAxis(c, d)) {
            Ext.Array.each(b.getResources(), function(d) {
                var e = a.getResourceStore().indexOf(d),
                    c = Ext.fly(a.getScheduleCell(0, e)),
                    f;
                if (c) {
                    f = a.generateTplData(b, d, e);
                    a.eventTpl.append(c.first(), [f])
                }
            })
        }
    },
    getTimeSpanRegion: function(f, d) {
        var a = this.view,
            c = a.getCoordinateFromDate(f),
            e = d ? a.getCoordinateFromDate(d) : c,
            b = a.getTableRegion(),
            g = b ? b.right - b.left : a.getEl().dom.clientWidth;
        return new Ext.util.Region(Math.min(c, e), g, Math.max(c, e), 0)
    },
    getStartEndDatesFromRegion: function(d, a) {
        var c = this.view.getDateFromCoordinate(d.top, a),
            b = this.view.getDateFromCoordinate(d.bottom, a);
        if (c && b) {
            return {
                start: c,
                end: b
            }
        } else {
            return null
        }
    },
    setColumnWidth: function(a, c) {
        var b = this.view;
        b.resourceColumnWidth = a;
        b.getTimeAxisViewModel().setViewColumnWidth(a, c)
    },
    getVisibleDateRange: function() {
        var a = this.view;
        if (!a.rendered) {
            return null
        }
        var e = a.getScroll(),
            d = a.getViewContainerHeight(),
            b = a.getTableRegion(),
            c = a.timeAxis.getEnd();
        if (b.bottom - b.top < d) {
            var f = a.timeAxis.getStart();
            return {
                startDate: f,
                endDate: c
            }
        }
        return {
            startDate: a.getDateFromCoordinate(e.top, null, !0),
            endDate: a.getDateFromCoordinate(e.top + d, null, !0) || c
        }
    },
    getItemBox: function(a) {
        var b = this;
        return Ext.Array.map(a.getResources(), function(c) {
            return b.getResourceEventBox(a, c)
        })
    },
    getResourceEventBox: function(d, c) {
        var s = Sch.util.Date,
            f = this,
            e = null,
            a = f.view,
            q = a.timeAxis.getStart(),
            r = a.timeAxis.getEnd(),
            m = d.getStartDate(),
            n = d.getEndDate(),
            o, i, b, h, k, l, g, j;
        if (m && n && s.intersectSpans(m, n, q, r)) {
            if (a.managedEventSizing) {
                o = a.eventLayout.vertical;
                var p = a.getEventStore().filterEventsForResource(c, a.timeAxis.isRangeInAxis, a.timeAxis);
                i = Ext.Array.map(p, f.getEventRenderData, f);
                o.applyLayout(i, f.getResourceColumnLayoutAvailableWidth(c));
                b = Ext.Array.findBy(i, function(a) {
                    return a.event == d
                });
                if (b) {
                    h = a.getResourceStore().indexOf(c) * f.getResourceColumnWidth(c);
                    e = {
                        rendered: !0,
                        start: b.left + h,
                        end: b.left + b.width + h,
                        top: b.top,
                        bottom: b.top + b.height
                    }
                }
            } else {
                k = a.getElementsFromEventRecord(d, d !== c && c);
                if (k.length) {
                    l = k[0];
                    g = l.getOffsetsTo(a.getEl());
                    j = l.getBox();
                    e = {
                        rendered: !0,
                        start: g[0],
                        end: g[0] + j.width,
                        top: g[1],
                        bottom: g[1] + j.height
                    }
                }
            }
            if (e) {
                e = f.adjustItemBox(d, e)
            }
        }
        return e
    },
    adjustItemBox: function(b, a) {
        return a
    },
    getConnectorStartSide: function(a) {
        return 'top'
    },
    getConnectorEndSide: function(a) {
        return 'bottom'
    }
}, 1, 0, 0, 0, 0, 0, [Sch.view, 'Vertical'], 0);
Ext.cmd.derive('Sch.mixin.AbstractSchedulerView', Ext.Base, {
    _cmpCls: 'sch-schedulerview',
    scheduledEventName: 'event',
    eventTemplateClass: 'Sch.template.Event',
    eventTpl: null,
    barMargin: 0,
    constrainDragToResource: !1,
    allowOverlap: null,
    readOnly: null,
    altColCls: 'sch-col-alt',
    highlightedEventCls: 'sch-event-highlighted',
    highlightDirtyEvents: !1,
    dynamicRowHeight: !0,
    managedEventSizing: !0,
    eventAnimations: !0,
    horizontalLayoutCls: 'Sch.eventlayout.Horizontal',
    horizontalEventSorterFn: null,
    verticalLayoutCls: 'Sch.eventlayout.Vertical',
    verticalEventSorterFn: null,
    eventCls: 'sch-event',
    verticalViewClass: 'Sch.view.Vertical',
    eventStore: null,
    resourceStore: null,
    eventLayout: null,
    terminalSides: null,
    _initializeSchedulerView: function() {
        var b = Ext.ClassManager.get(this.horizontalLayoutCls);
        var a = Ext.ClassManager.get(this.verticalLayoutCls);
        this.eventSelector = '.' + this.eventCls;
        this.eventLayout = {};
        this.eventTpl = this.eventTpl || Ext.create(this.eventTemplateClass, {
            eventPrefix: this.eventPrefix,
            terminalSides: this.terminalSides,
            resizeHandles: this.eventResizeHandles
        });
        if (b) {
            this.eventLayout.horizontal = new b(Ext.apply({
                timeAxisViewModel: this.timeAxisViewModel
            }, {
                bandIndexToPxConvertFn: this.horizontal.layoutEventVertically,
                bandIndexToPxConvertScope: this.horizontal
            }, this.horizontalEventSorterFn ? {
                sortEvents: this.horizontalEventSorterFn
            } : {}))
        }
        if (a) {
            this.eventLayout.vertical = new a(Ext.apply({
                view: this
            }, this.verticalEventSorterFn ? {
                sortEvents: this.verticalEventSorterFn
            } : {}))
        }
        this.store = this.store || this.resourceStore;
        this.resourceStore = this.resourceStore || this.store
    },
    generateTplData: function(a, d, e) {
        var b = this[this.mode].getEventRenderData(a, d, e),
            f = a.getStartDate(),
            h = a.getEndDate(),
            c = a.getCls() || '';
        c += ' sch-event-resizable-' + a.getResizable();
        if (a.dirty) {
            c += ' sch-dirty '
        }
        if (b.endsOutsideView) {
            c += ' sch-event-endsoutside '
        }
        if (b.startsOutsideView) {
            c += ' sch-event-startsoutside '
        }
        if (this.eventBarIconClsField) {
            c += ' sch-event-withicon '
        }
        if (a.isDraggable() === !1) {
            c += ' sch-event-fixed '
        }
        if (h - f === 0) {
            c += ' sch-event-milestone '
        }
        if (this.getEventSelectionModel().isSelected(a)) {
            c += ' ' + this.selectedEventCls + ' '
        }
        if (a.isHighlighted || (this.highlightDirtyEvents ? a.dirty : !1)) {
            c += ' ' + this.highlightedEventCls + ' '
        }
        if (this.isWeekView()) {
            b.id = a.internalId + '-calendar-' + e + '-x'
        } else {
            b.id = a.internalId + '-' + d.internalId + '-x'
        }
        b.internalCls = c;
        b.start = f;
        b.end = h;
        b.iconCls = a.data[this.eventBarIconClsField] || a.getIconCls && a.getIconCls() || '';
        b.event = a;
        if (this.eventRenderer) {
            var g = this.eventRenderer.call(this.eventRendererScope || this, a, d, b, e);
            if (this.eventBodyTemplate) {
                b.body = this.eventBodyTemplate.apply(g)
            } else {
                b.body = g
            }
        } else {
            if (this.eventBodyTemplate) {
                b.body = this.eventBodyTemplate.apply(a.data)
            } else {
                if (this.eventBarTextField) {
                    b.body = a.data[this.eventBarTextField] || ''
                }
            }
        }
        return b
    },
    resolveResource: function(b) {
        var a = this;
        return a[a.mode].resolveResource(b)
    },
    getResourceRegion: function(a, b, c) {
        return this[this.mode].getResourceRegion(a, b, c)
    },
    resolveEventRecord: function(a) {
        a = a.dom ? a.dom : a;
        if (!Ext.fly(a).is(this.eventSelector)) {
            a = Ext.fly(a).up(this.eventSelector)
        }
        return a && this.getEventRecordFromDomElement(a)
    },
    resolveEventRecordFromResourceRow: function(a) {
        var c = this,
            d = c.getEventSelectionModel(),
            b, e;
        a = a.dom ? a.dom : a;
        b = c.getRecord(a);
        return d.getFirstSelectedEventForResource(b)
    },
    resolveAssignmentRecord: function(f) {
        var c = this,
            d = c.getEventStore().getAssignmentStore(),
            e = null,
            b, a;
        if (d) {
            b = c.getEventRecordFromDomElement(f);
            a = c.getResourceRecordFromDomElement(f);
            if (b && a) {
                e = d.getAssignmentForEventAndResource(b, a)
            }
        }
        return e
    },
    getEventRecordFromDomId: function(a) {
        a = this.getEventIdFromDomNodeId(a);
        return this.getEventStore().getModelByInternalId(a)
    },
    getEventRecordFromDomElement: function(a) {
        return this.getEventRecordFromDomId(a.id)
    },
    getResourceRecordFromDomId: function(a) {
        a = this.getResourceIdFromDomNodeId(a);
        return this.getResourceStore().getByInternalId(a)
    },
    getResourceRecordFromDomElement: function(a) {
        return this.getResourceRecordFromDomId(a.id)
    },
    isDateRangeAvailable: function(c, d, a, b) {
        return this.getEventStore().isDateRangeAvailable(c, d, a, b)
    },
    getEventsInView: function() {
        var a = this.timeAxis.getStart(),
            b = this.timeAxis.getEnd();
        return this.getEventStore().getEventsInTimeSpan(a, b)
    },
    getEventNodes: function() {
        return this.getEl().select(this.eventSelector)
    },
    triggerHighlightEvents: function(c, b) {
        var d = this;
        var a = [];
        Ext.Array.each([].concat(c), function(e) {
            a.push.apply(a, d.getElementsFromEventRecord(e, null, null, !0))
        });
        var e = b !== !1 ? 'addCls' : 'removeCls';
        Ext.Array.each(c, function(a) {
            a.isHighlighted = b
        });
        Ext.Array.each([].concat(a), function(a) {
            Ext.fly(a)[e](d.highlightedEventCls)
        })
    },
    highlightEvents: function(a) {
        this.triggerHighlightEvents(a, !0)
    },
    unhighlightEvents: function(a) {
        this.triggerHighlightEvents(a, !1)
    },
    highlightEventsBy: function(c, b) {
        var a = this.getEventsInView();
        this.highlightEvents(a.filterBy(c, b).getRange())
    },
    clearHighlightedEvents: function() {
        Ext.Array.each(this.getEventStore().getRange(), function(a) {
            a.isHighlighted = !1
        });
        this.getEl().select('.' + this.highlightedEventCls).removeCls(this.highlightedEventCls)
    },
    onEventCreated: function(a, b) {},
    getEventStore: function() {
        return this.eventStore
    },
    registerEventEditor: function(b) {
        var a = this;
        a.eventEditor = b;
        a.mon(b.editor || b, {
            'beforeeventadd': function() {
                var c = Ext.Array.toArray(arguments);
                Ext.Array.splice(c, 0, 1, a);
                return a.fireEventArgs.call(a, 'beforeeventadd', c)
            }
        })
    },
    getEventEditor: function() {
        return this.eventEditor
    },
    onEventUpdate: function(c, b, a) {
        this[this.mode].onEventUpdate(c, b, a)
    },
    onEventAdd: function(b, a) {
        if (!Ext.isArray(a)) {
            a = [a]
        }
        this[this.mode].onEventAdd(b, a)
    },
    onAssignmentAdd: function(c, a) {
        var b = this;
        Ext.Array.each(a, function(e) {
            var d = e.getResource();
            d && b.repaintEventsForResource(d)
        })
    },
    onAssignmentUpdate: function(g, a) {
        var b = this,
            d = a.previous && a.previous[a.resourceIdField],
            c = a.getResourceId(),
            f, e;
        if (d) {
            f = b.getResourceStore().getModelById(d);
            b.repaintEventsForResource(f)
        }
        if (c) {
            e = b.getResourceStore().getModelById(c);
            b.repaintEventsForResource(e)
        }
    },
    onAssignmentRemove: function(c, b) {
        var a = this;
        Ext.Array.each(b, function(f) {
            var d = f.getResourceId();
            var e = d && a.getResourceStore().getModelById(d);
            e && a.repaintEventsForResource(e)
        })
    },
    onEventRemove: function(b, a) {
        this[this.mode].onEventRemove(b, a)
    },
    setEventStore: function(b, g) {
        var a = this;
        var h = a.getEventStore();
        var c = {
            scope: a,
            refresh: a.onEventDataRefresh,
            addrecords: a.onEventAdd,
            updaterecord: a.onEventUpdate,
            removerecords: a.onEventRemove,
            update: a.onEventUpdate,
            nodeinsert: a.onEventAdd,
            nodeappend: a.onEventAdd
        };
        if (!(b && b.isTreeStore)) {
            c.remove = a.onEventRemove;
            c.add = a.onEventAdd
        }
        var d = {
            scope: a,
            refresh: a.onEventDataRefresh,
            load: a.onEventDataRefresh,
            update: a.onAssignmentUpdate,
            add: a.onAssignmentAdd,
            remove: a.onAssignmentRemove
        };
        if (!Ext.versions.touch) {
            c.clear = a.onEventDataRefresh
        }
        if (!g && a.eventStore) {
            if (b) {
                a.eventStore.setResourceStore(null)
            }
            if (b !== a.eventStore && a.eventStore.autoDestroy) {
                a.eventStore.destroy()
            } else {
                if (a.mun) {
                    a.mun(a.eventStore, c);
                    var e = a.eventStore.getAssignmentStore();
                    if (e) {
                        a.mun(e, d)
                    }
                } else {
                    a.eventStore.un(c)
                }
            }
            if (!b) {
                a.eventStore = null
            }
        }
        if (b) {
            b = Ext.data.StoreManager.lookup(b);
            if (a.mon) {
                a.mon(b, c)
            } else {
                b.on(c)
            }
            a.eventStore = b;
            b.setResourceStore(a.getResourceStore());
            var f = b.getAssignmentStore();
            if (f) {
                a.mon(f, d)
            }
        }
        if (b && !g) {
            this.getTimeAxisViewModel().setEventStore(b);
            this.getEventSelectionModel().bindStore(b);
            this.fireEvent('eventstorechange', this, b, h);
            a.refreshView()
        }
    },
    onEventDataRefresh: function() {
        this.refreshKeepingScroll()
    },
    onEventBarSelect: function(a) {
        var d = this,
            c, b;
        if (a && a.isAssignmentModel) {
            c = a.getEvent();
            b = a.getResource()
        } else {
            c = a;
            b = null
        }
        Ext.Array.each(d.getElementsFromEventRecord(c, b, null, !0), function(b) {
            Ext.fly(b).addCls(d.selectedEventCls)
        })
    },
    onEventBarDeselect: function(a) {
        var d = this,
            b, c;
        if (a && a.isAssignmentModel) {
            b = a.getEvent();
            c = a.getResource()
        } else {
            b = a;
            c = null
        }
        b && Ext.Array.each(d.getElementsFromEventRecord(b, c, null, !0), function(b) {
            Ext.fly(b).removeCls(d.selectedEventCls)
        })
    },
    refresh: function() {
        throw 'Abstract method call'
    },
    repaintEventsForResource: function(a) {
        throw 'Abstract method call'
    },
    repaintAllEvents: function() {
        this.refreshKeepingScroll()
    },
    scrollEventIntoView: function(b, c, e, d, f) {
        var g = this,
            a = b.getResources();
        if (a.length > 1) {
            Ext.Error.raise('AbstractSchedulerView::scrollEventIntoView() is not applicable for events with multiple assignments, please use AbstractSchedulerView::scrollResourceEventIntoView() instead.')
        }
        a.length && g.scrollResourceEventIntoView(a[0], b, null, c, e, d, f)
    },
    getResourceStore: function() {
        return this.resourceStore
    },
    setResourceStore: function(a) {
        var b = this.resourceStore;
        this.resourceStore = a;
        if (a) {
            this.fireEvent('resourcestorechange', this, a, b)
        }
    },
    rowHasDynamicRowHeight: function(a) {
        return this.dynamicRowHeight
    }
}, 0, 0, 0, 0, 0, 0, [Sch.mixin, 'AbstractSchedulerView'], 0);
Ext.cmd.derive('Sch.preset.ViewPreset', Ext.Base, {
    name: null,
    rowHeight: 24,
    timeColumnWidth: 50,
    timeRowHeight: null,
    timeAxisColumnWidth: null,
    displayDateFormat: 'G:i',
    shiftUnit: 'HOUR',
    shiftIncrement: 1,
    defaultSpan: 12,
    timeResolution: null,
    headerConfig: null,
    columnLinesFor: 'middle',
    headers: null,
    mainHeader: 0,
    ptype: '',
    constructor: function(a) {
        Ext.apply(this, a);
        this.normalizeUnits()
    },
    normalizeUnits: function() {
        var a = this.headerConfig;
        var b = Sch.util.Date;
        for (var c in a) {
            if (a.hasOwnProperty(c)) {
                if (b[a[c].unit]) {
                    a[c].unit = b[a[c].unit.toUpperCase()]
                }
                if (b[a[c].splitUnit]) {
                    a[c].splitUnit = b[a[c].splitUnit.toUpperCase()]
                }
            }
        }
        var d = this.timeResolution;
        if (d && b[d.unit]) {
            d.unit = b[d.unit.toUpperCase()]
        }
        var e = this.shiftUnit;
        if (e && b[e]) {
            this.shiftUnit = b[e.toUpperCase()]
        }
    },
    getHeaders: function() {
        if (this.headers) {
            return this.headers
        }
        var a = this.headerConfig;
        this.mainHeader = a.top ? 1 : 0;
        return this.headers = [].concat(a.top || [], a.middle || [], a.bottom || [])
    },
    getMainHeader: function() {
        return this.getHeaders()[this.mainHeader]
    },
    getBottomHeader: function() {
        var a = this.getHeaders();
        return a[a.length - 1]
    },
    clone: function() {
        var a = {};
        var b = this;
        Ext.Array.each(['rowHeight', 'timeColumnWidth', 'timeRowHeight', 'timeAxisColumnWidth', 'displayDateFormat', 'shiftUnit', 'shiftIncrement', 'defaultSpan', 'timeResolution', 'headerConfig'], function(c) {
            a[c] = b[c]
        });
        return new this.self(Ext.clone(a))
    },
    isValid: function() {
        var e = Sch.util.Date,
            a = !0,
            b = Sch.util.Date.units,
            d = {};
        for (var c in this.headerConfig) {
            if (this.headerConfig.hasOwnProperty(c)) {
                d[c] = !0;
                a = a && Ext.Array.indexOf(b, this.headerConfig[c].unit) >= 0
            }
        }
        if (!(this.columnLinesFor in d)) {
            this.columnLinesFor = 'middle'
        }
        if (this.timeResolution) {
            a = a && Ext.Array.indexOf(b, this.timeResolution.unit) >= 0
        }
        if (this.shiftUnit) {
            a = a && Ext.Array.indexOf(b, this.shiftUnit) >= 0
        }
        return a
    }
}, 1, 0, 0, 0, 0, 0, [Sch.preset, 'ViewPreset'], 0);
Ext.cmd.derive('Sch.preset.Manager', Ext.util.MixedCollection, {
    singleton: !0,
    defaultPresets: {
        secondAndMinute: {
            timeColumnWidth: 30,
            rowHeight: 24,
            resourceColumnWidth: 100,
            displayDateFormat: 'G:i:s',
            shiftIncrement: 10,
            shiftUnit: 'MINUTE',
            defaultSpan: 24,
            timeResolution: {
                unit: 'SECOND',
                increment: 5
            },
            headerConfig: {
                middle: {
                    unit: 'SECOND',
                    increment: 10,
                    align: 'center',
                    dateFormat: 's'
                },
                top: {
                    unit: 'MINUTE',
                    align: 'center',
                    dateFormat: 'D, d g:iA'
                }
            }
        },
        minuteAndHour: {
            timeColumnWidth: 100,
            rowHeight: 24,
            resourceColumnWidth: 100,
            displayDateFormat: 'G:i',
            shiftIncrement: 1,
            shiftUnit: 'HOUR',
            defaultSpan: 24,
            timeResolution: {
                unit: 'MINUTE',
                increment: 30
            },
            headerConfig: {
                middle: {
                    unit: 'MINUTE',
                    increment: '30',
                    align: 'center',
                    dateFormat: 'i'
                },
                top: {
                    unit: 'HOUR',
                    align: 'center',
                    dateFormat: 'D, gA/d'
                }
            }
        },
        hourAndDay: {
            timeColumnWidth: 60,
            rowHeight: 24,
            resourceColumnWidth: 100,
            displayDateFormat: 'G:i',
            shiftIncrement: 1,
            shiftUnit: 'DAY',
            defaultSpan: 24,
            timeResolution: {
                unit: 'MINUTE',
                increment: 30
            },
            headerConfig: {
                middle: {
                    unit: 'HOUR',
                    align: 'center',
                    dateFormat: 'G:i'
                },
                top: {
                    unit: 'DAY',
                    align: 'center',
                    dateFormat: 'D d/m'
                }
            }
        },
        dayAndWeek: {
            timeColumnWidth: 100,
            rowHeight: 24,
            resourceColumnWidth: 100,
            displayDateFormat: 'Y-m-d G:i',
            shiftUnit: 'DAY',
            shiftIncrement: 1,
            defaultSpan: 5,
            timeResolution: {
                unit: 'HOUR',
                increment: 1
            },
            headerConfig: {
                middle: {
                    unit: 'DAY',
                    align: 'center',
                    dateFormat: 'D d M'
                },
                top: {
                    unit: 'WEEK',
                    align: 'center',
                    renderer: function(a, c, b) {
                        return Sch.util.Date.getShortNameOfUnit('WEEK') + '.' + Ext.Date.format(a, 'W M Y')
                    }
                }
            }
        },
        weekAndDay: {
            timeColumnWidth: 100,
            rowHeight: 24,
            resourceColumnWidth: 100,
            displayDateFormat: 'Y-m-d',
            shiftUnit: 'WEEK',
            shiftIncrement: 1,
            defaultSpan: 1,
            timeResolution: {
                unit: 'DAY',
                increment: 1
            },
            headerConfig: {
                bottom: {
                    unit: 'DAY',
                    align: 'center',
                    increment: 1,
                    dateFormat: 'd/m'
                },
                middle: {
                    unit: 'WEEK',
                    dateFormat: 'D d M'
                }
            }
        },
        weekAndMonth: {
            timeColumnWidth: 100,
            rowHeight: 24,
            resourceColumnWidth: 100,
            displayDateFormat: 'Y-m-d',
            shiftUnit: 'WEEK',
            shiftIncrement: 5,
            defaultSpan: 6,
            timeResolution: {
                unit: 'DAY',
                increment: 1
            },
            headerConfig: {
                middle: {
                    unit: 'WEEK',
                    align: 'center',
                    renderer: function(a, c, b) {
                        return Ext.Date.format(a, 'd M')
                    }
                },
                top: {
                    unit: 'MONTH',
                    align: 'center',
                    dateFormat: 'M Y'
                }
            }
        },
        monthAndYear: {
            timeColumnWidth: 110,
            rowHeight: 24,
            resourceColumnWidth: 100,
            displayDateFormat: 'Y-m-d',
            shiftIncrement: 3,
            shiftUnit: 'MONTH',
            defaultSpan: 12,
            timeResolution: {
                unit: 'DAY',
                increment: 1
            },
            headerConfig: {
                middle: {
                    unit: 'MONTH',
                    align: 'center',
                    dateFormat: 'M Y'
                },
                top: {
                    unit: 'YEAR',
                    align: 'center',
                    dateFormat: 'Y'
                }
            }
        },
        year: {
            timeColumnWidth: 100,
            rowHeight: 24,
            resourceColumnWidth: 100,
            displayDateFormat: 'Y-m-d',
            shiftUnit: 'YEAR',
            shiftIncrement: 1,
            defaultSpan: 1,
            timeResolution: {
                unit: 'MONTH',
                increment: 1
            },
            headerConfig: {
                middle: {
                    unit: 'QUARTER',
                    align: 'center',
                    renderer: function(a, c, b) {
                        return Ext.String.format(Sch.util.Date.getShortNameOfUnit('QUARTER').toUpperCase() + '{0}', Math.floor(a.getMonth() / 3) + 1)
                    }
                },
                top: {
                    unit: 'YEAR',
                    align: 'center',
                    dateFormat: 'Y'
                }
            }
        },
        manyYears: {
            timeColumnWidth: 50,
            rowHeight: 24,
            resourceColumnWidth: 100,
            displayDateFormat: 'Y-m-d',
            shiftUnit: 'YEAR',
            shiftIncrement: 1,
            defaultSpan: 1,
            timeResolution: {
                unit: 'YEAR',
                increment: 1
            },
            headerConfig: {
                middle: {
                    unit: 'YEAR',
                    align: 'center',
                    dateFormat: 'Y',
                    increment: 5
                },
                bottom: {
                    unit: 'YEAR',
                    align: 'center',
                    dateFormat: 'y',
                    increment: 1
                }
            }
        },
        weekAndDayLetter: {
            timeColumnWidth: 20,
            rowHeight: 24,
            resourceColumnWidth: 100,
            displayDateFormat: 'Y-m-d',
            shiftUnit: 'WEEK',
            shiftIncrement: 1,
            defaultSpan: 10,
            timeResolution: {
                unit: 'DAY',
                increment: 1
            },
            headerConfig: {
                bottom: {
                    unit: 'DAY',
                    align: 'center',
                    renderer: function(a) {
                        return Ext.Date.dayNames[a.getDay()].substring(0, 1)
                    },
                    verticalColumnWidth: 25
                },
                middle: {
                    unit: 'WEEK',
                    dateFormat: 'D d M Y',
                    verticalColumnWidth: 115
                }
            }
        },
        weekDateAndMonth: {
            timeColumnWidth: 30,
            rowHeight: 24,
            resourceColumnWidth: 100,
            displayDateFormat: 'Y-m-d',
            shiftUnit: 'WEEK',
            shiftIncrement: 1,
            defaultSpan: 10,
            timeResolution: {
                unit: 'DAY',
                increment: 1
            },
            headerConfig: {
                middle: {
                    unit: 'WEEK',
                    align: 'center',
                    dateFormat: 'd'
                },
                top: {
                    unit: 'MONTH',
                    dateFormat: 'Y F'
                }
            }
        },
        day: {
            timeRowHeight: 40,
            displayDateFormat: 'G:i',
            shiftIncrement: 1,
            shiftUnit: 'DAY',
            defaultSpan: 1,
            timeResolution: {
                unit: 'MINUTE',
                increment: 30
            },
            columnLinesFor: 'bottom',
            headerConfig: {
                bottom: {
                    unit: 'HOUR',
                    align: 'center',
                    renderer: function(a) {
                        return Ext.String.format('<div class="sch-calendarcolumn-ct"><span class="sch-calendarcolumn-hours">{0}</span><span class="sch-calendarcolumn-minutes">{1}</span></div>', Ext.Date.format(a, 'H'), Ext.Date.format(a, 'i'))
                    }
                },
                middle: {
                    unit: 'DAY',
                    align: 'center',
                    dateFormat: 'D d/m',
                    splitUnit: 'DAY'
                }
            }
        },
        week: {
            timeRowHeight: 40,
            displayDateFormat: 'G:i',
            shiftIncrement: 1,
            shiftUnit: 'WEEK',
            defaultSpan: 24,
            timeResolution: {
                unit: 'MINUTE',
                increment: 30
            },
            columnLinesFor: 'bottom',
            headerConfig: {
                bottom: {
                    unit: 'HOUR',
                    align: 'center',
                    dateFormat: 'H:i',
                    renderer: function(a) {
                        return Ext.String.format('<div class="sch-calendarcolumn-ct"><span class="sch-calendarcolumn-hours">{0}</span><span class="sch-calendarcolumn-minutes">{1}</span></div>', Ext.Date.format(a, 'H'), Ext.Date.format(a, 'i'))
                    }
                },
                middle: {
                    unit: 'WEEK',
                    align: 'center',
                    dateFormat: 'D d',
                    splitUnit: 'DAY'
                }
            }
        }
    },
    constructor: function() {
        this.callParent(arguments);
        this.registerDefaults()
    },
    onLocalized: function() {
        var a = this;
        this.eachKey(function(d, c) {
            if (a.l10n[d]) {
                var b = a.L(d);
                b.displayDateFormat && (c.displayDateFormat = b.displayDateFormat);
                b.middleDateFormat && (c.headerConfig.middle.dateFormat = b.middleDateFormat);
                b.topDateFormat && (c.headerConfig.top.dateFormat = b.topDateFormat);
                b.bottomDateFormat && (c.headerConfig.bottom.dateFormat = b.bottomDateFormat)
            }
        })
    },
    registerPreset: function(a, c) {
        c.name = a;
        var b = new Sch.preset.ViewPreset(c);
        if (b.isValid()) {
            if (this.containsKey(a)) {
                this.removeAtKey(a)
            }
            this.add(a, b)
        } else {
            throw 'Invalid preset, please check your configuration'
        }
    },
    getPreset: function(a) {
        return this.get(a)
    },
    deletePreset: function(a) {
        this.removeAtKey(a)
    },
    registerDefaults: function() {
        var c = this,
            a = this.defaultPresets;
        for (var b in a) {
            c.registerPreset(b, a[b])
        }
    }
}, 1, 0, 0, 0, 0, [
    [Sch.mixin.Localizable.prototype.mixinId || Sch.mixin.Localizable.$className, Sch.mixin.Localizable]
], [Sch.preset, 'Manager'], 0);
Ext.cmd.derive('Sch.view.model.TimeAxis', Ext.util.Observable, {
    timeAxis: null,
    availableWidth: 0,
    tickWidth: 100,
    snapToIncrement: !1,
    forceFit: !1,
    headerConfig: null,
    headers: null,
    mainHeader: 0,
    calendar: null,
    timeAxisColumnWidth: null,
    resourceColumnWidth: null,
    weekViewColumnWidth: null,
    calendarColumnDates: null,
    headersDatesCache: null,
    timeColumnWidth: null,
    rowHeightHorizontal: null,
    rowHeightVertical: null,
    mode: 'horizontal',
    suppressFit: !1,
    refCount: 0,
    columnConfig: {},
    viewPreset: null,
    columnLinesFor: 'middle',
    eventStore: null,
    originalTickWidth: null,
    constructor: function(c) {
        var a = this;
        Ext.apply(this, c);
        a.headersDatesCache = {};
        if (this.viewPreset) {
            if (this.viewPreset instanceof Sch.preset.ViewPreset) {
                this.consumeViewPreset(this.viewPreset)
            } else {
                var b = Sch.preset.Manager.getPreset(this.viewPreset);
                b && this.consumeViewPreset(b)
            }
        }
        a.timeAxis.on('reconfigure', a.onTimeAxisReconfigure, a);
        Ext.util.Observable.prototype.constructor.apply(this, arguments)
    },
    isHorizontal: function() {
        return this.mode === 'horizontal'
    },
    isVertical: function() {
        return this.mode === 'vertical'
    },
    isWeek: function() {
        return this.mode === 'weekview'
    },
    destroy: function() {
        this.timeAxis.un('reconfigure', this.onTimeAxisReconfigure, this)
    },
    onTimeAxisReconfigure: function(b, a) {
        if (!a) {
            this.update()
        }
    },
    reconfigure: function(b) {
        this.headers = null;
        Ext.apply(this, b);
        var a;
        if (this.isHorizontal()) {
            a = this.timeColumnWidth
        } else {
            a = this.rowHeightVertical
        }
        this.setTickWidth(a);
        this.fireEvent('reconfigure', this)
    },
    getColumnConfig: function() {
        return this.columnConfig
    },
    update: function(e, f) {
        var d = this.timeAxis,
            b = this.headerConfig;
        this.availableWidth = Math.max(e || this.availableWidth, 0);
        if (!Ext.isNumber(this.availableWidth)) {
            throw new Error('Invalid available width provided to Sch.view.model.TimeAxis')
        }
        if (this.forceFit && this.availableWidth <= 0) {
            return
        }
        this.columnConfig = {};
        for (var a in b) {
            if (b[a].cellGenerator) {
                this.columnConfig[a] = b[a].cellGenerator.call(this, d.getStart(), d.getEnd())
            } else {
                this.columnConfig[a] = this.createHeaderRow(a, b[a])
            }
        }
        var c = this.calculateTickWidth(this.originalTickWidth);
        if (!Ext.isNumber(c) || c <= 0) {
            throw new Error('Invalid column width calculated in Sch.view.model.TimeAxis')
        }
        this.updateTickWidth(c);
        if (!f) {
            this.fireEvent('update', this)
        }
    },
    updateCalendarColumnDates: function(b) {
        this.calendarColumnDates = [];
        for (var a = 0; a < b.length; a++) {
            var c = b[a];
            this.calendarColumnDates.push([c.start, c.end])
        }
    },
    getCalendarColumnDates: function() {
        return this.calendarColumnDates
    },
    createHeaderRow: function(c, a) {
        var d = [],
            b = this,
            e = a.align,
            f = Ext.Date.clearTime(new Date());
        b.headersDatesCache[c] = {};
        b.forEachInterval(c, function(h, i, j) {
            var g = {
                align: e,
                start: h,
                end: i,
                headerCls: ''
            };
            b.headersDatesCache[c][h.getTime()] = 1;
            if (a.renderer) {
                g.header = a.renderer.call(a.scope || b, h, i, g, j, b.eventStore)
            } else {
                g.header = Ext.Date.format(h, a.dateFormat)
            }
            if (a.unit === Sch.util.Date.DAY && (!a.increment || a.increment === 1)) {
                g.headerCls += ' sch-dayheadercell-' + h.getDay();
                if (this.calendar && this.calendar.isWeekend(h)) {
                    g.headerCls += ' sch-dayheadercell-nonworking'
                }
                if (Ext.Date.clearTime(h, !0) - f === 0) {
                    g.headerCls += ' sch-dayheadercell-today'
                }
            }
            d.push(g)
        });
        return d
    },
    getDistanceBetweenDates: function(a, b) {
        return Math.round(this.getPositionFromDate(b, !0) - this.getPositionFromDate(a))
    },
    getPositionFromDate: function(e, i) {
        var a = -1;
        if (this.isWeek()) {
            var b = this.rowHeightVertical;
            var d = this.getHeaders();
            var c = this.timeAxis.getStart();
            var g = Sch.util.Date;
            var h = g.mergeDates(c, e, d[1].unit);
            a = g.getDurationInUnit(c, h, d[1].unit, !0) * b;
            if (a === 0 && i) {
                a = this.calendarRowsAmount * b
            }
        } else {
            var f = this.timeAxis.getTickFromDate(e);
            if (f >= 0) {
                a = this.getTickWidth() * (f - this.timeAxis.visibleTickStart)
            }
        }
        return Math.round(a)
    },
    getDateFromPosition: function(b, a) {
        if (this.isWeek()) {
            var c = this.getCalendarColumnDates();
            if (!c) {
                return null
            }
            var j = Math.min(Math.floor(Math.max(b[0], 0) / this.weekViewColumnWidth), c.length - 1),
                i = c[j][0],
                f = this.timeAxis.first(),
                h = (f.get('end') - f.get('start')) / this.rowHeightVertical,
                g = Sch.util.Date,
                d = g.add(i, g.MILLI, Math.round(b[1] * h));
            if (a) {
                d = this.timeAxis[a + 'Date'](d)
            }
            return d
        } else {
            var e = b / this.getTickWidth() + this.timeAxis.visibleTickStart,
                k = this.timeAxis.getCount();
            if (e < 0 || e > k) {
                return null
            }
            return this.timeAxis.getDateFromTick(e, a)
        }
    },
    getSingleUnitInPixels: function(a) {
        return Sch.util.Date.getUnitToBaseUnitRatio(this.timeAxis.getUnit(), a) * this.getTickWidth() / this.timeAxis.increment
    },
    getSnapPixelAmount: function() {
        if (this.snapToIncrement) {
            var a = this.timeAxis.getResolution();
            return (a.increment || 1) * this.getSingleUnitInPixels(a.unit)
        } else {
            return 1
        }
    },
    getTickWidth: function() {
        return this.tickWidth
    },
    setTickWidth: function(a, b) {
        this.originalTickWidth = a;
        this.updateTickWidth(a);
        this.update(null, b)
    },
    updateTickWidth: function(a) {
        this.tickWidth = a;
        this[this.isHorizontal() ? 'timeColumnWidth' : 'rowHeightVertical'] = a
    },
    getTotalWidth: function() {
        return Math.round(this.getTickWidth() * this.timeAxis.getVisibleTickTimeSpan())
    },
    calculateTickWidth: function(e) {
        var b = this.forceFit;
        var c = this.timeAxis;
        var d = 0,
            f = c.getUnit(),
            a = Number.MAX_VALUE,
            g = Sch.util.Date;
        if (this.snapToIncrement) {
            var i = c.getResolution();
            a = g.getUnitToBaseUnitRatio(f, i.unit) * i.increment
        } else {
            var j = g.getMeasuringUnit(f);
            a = Math.min(a, g.getUnitToBaseUnitRatio(f, j))
        }
        if (!this.suppressFit) {
            var l = this.isWeek() ? c.endTime - c.startTime : c.getVisibleTickTimeSpan(),
                h = Math[b ? 'floor' : 'round'](this.getAvailableWidth() / l);
            d = b || e < h ? h : e;
            if (a > 0 && (!b || a < 1)) {
                var k = Ext.versions.touch && b ? 'ceil' : b ? 'floor' : 'round';
                d = Math.round(Math.max(1, Math[k](a * d)) / a)
            }
        } else {
            d = e
        }
        return d
    },
    getAvailableWidth: function() {
        return this.availableWidth
    },
    setAvailableWidth: function(b) {
        var c = this.availableWidth;
        this.availableWidth = Math.max(0, b);
        var a = this.calculateTickWidth(this.originalTickWidth);
        var d = a > 0 && (c !== b && this.forceFit || a !== this.getTickWidth());
        if (d) {
            this.update()
        }
    },
    fitToAvailableWidth: function(b) {
        var a = Math.floor(this.availableWidth / this.timeAxis.getVisibleTickTimeSpan());
        this.setTickWidth(a, b)
    },
    setForceFit: function(a) {
        if (a !== this.forceFit) {
            this.forceFit = a;
            this.update()
        }
    },
    setSnapToIncrement: function(a) {
        if (a !== this.snapToIncrement) {
            this.snapToIncrement = a;
            this.update()
        }
    },
    getViewRowHeight: function() {
        var a = this.isHorizontal() ? this.rowHeightHorizontal : this.rowHeightVertical;
        if (!a) {
            throw new Error('rowHeight info not available')
        }
        return a
    },
    setViewRowHeight: function(a, b) {
        var c = 'rowHeight' + Ext.String.capitalize(this.mode);
        if (this[c] != a) {
            this[c] = a;
            if (this.isHorizontal()) {
                if (!b) {
                    this.fireEvent('update', this)
                }
            } else {
                this.setTickWidth(a, b)
            }
        }
    },
    setViewColumnWidth: function(a, b) {
        if (this.isHorizontal()) {
            this.setTickWidth(a, b)
        } else {
            if (this.isVertical()) {
                this.resourceColumnWidth = a
            } else {
                if (this.isWeek()) {
                    this.weekViewColumnWidth = a
                }
            }
        }
        if (!b) {
            this.fireEvent('columnwidthchange', this, a)
        }
    },
    getHeaders: function() {
        if (this.headers) {
            return this.headers
        }
        var a = this.headerConfig;
        this.mainHeader = a.top ? 1 : 0;
        return this.headers = [].concat(a.top || [], a.middle || [], a.bottom || [])
    },
    getMainHeader: function() {
        return this.getHeaders()[this.mainHeader]
    },
    getBottomHeader: function() {
        var a = this.getHeaders();
        return a[a.length - 1]
    },
    getLowestHeader: function() {
        return 'bottom' in this.headerConfig ? 'bottom' : 'middle'
    },
    getMajorHeaderName: function() {
        var a = this.headerConfig;
        if (a.bottom) {
            return 'middle'
        }
        if (a.top) {
            return 'top'
        }
        return null
    },
    isMajorTick: function(b) {
        var a = this.getMajorHeaderName();
        return a && this.headersDatesCache[a] && this.headersDatesCache[a][b.getTime()] || !1
    },
    forEachInterval: function(c, d, a) {
        a = a || this;
        var b = this.headerConfig;
        if (!b) {
            return
        }
        if (c === 'top' || c === 'middle' && b.bottom) {
            var e = b[c];
            this.timeAxis.forEachAuxInterval(e.unit, e.increment, d, a)
        } else {
            this.timeAxis.each(function(b, e) {
                return d.call(a, b.data.start, b.data.end, e)
            })
        }
    },
    forEachMainInterval: function(a, b) {
        this.forEachInterval('middle', a, b)
    },
    consumeViewPreset: function(a) {
        this.headers = null;
        Ext.apply(this, {
            headerConfig: a.headerConfig,
            columnLinesFor: a.columnLinesFor || 'middle',
            rowHeightHorizontal: a.rowHeight,
            tickWidth: this.isHorizontal() ? a.timeColumnWidth : a.timeRowHeight || a.timeColumnWidth || 60,
            timeColumnWidth: a.timeColumnWidth,
            rowHeightVertical: a.timeRowHeight || a.timeColumnWidth || 60,
            timeAxisColumnWidth: a.timeAxisColumnWidth,
            resourceColumnWidth: a.resourceColumnWidth || 100
        });
        this.originalTickWidth = this.getTickWidth()
    },
    setEventStore: function(a) {
        this.eventStore = a
    },
    setCalendar: function(a) {
        if (a !== this.calendar) {
            this.calendar = a;
            if (a) {
                this.update()
            }
        }
    }
}, 1, 0, 0, 0, 0, 0, [Sch.view.model, 'TimeAxis'], 0);
Ext.define('TimesSquare.overrides.TimeAxis', {
    override: 'Sch.view.model.TimeAxis',
    calculateTickWidth: function() {
        var a = this.timeAxis,
            c = this.getAvailableWidth(),
            d = a.defaultSpan,
            b = a.getResolution().increment;
        return Math.floor(c / (d * b)) || 1
    }
});
Ext.cmd.derive('Sch.mixin.Zoomable', Ext.Base, {
    zoomOnMouseWheel: !0,
    preventScrollZoom: !1,
    zoomLevels: [{
        width: 40,
        increment: 1,
        resolution: 1,
        preset: 'manyYears',
        resolutionUnit: 'YEAR'
    }, {
        width: 80,
        increment: 1,
        resolution: 1,
        preset: 'manyYears',
        resolutionUnit: 'YEAR'
    }, {
        width: 30,
        increment: 1,
        resolution: 1,
        preset: 'year',
        resolutionUnit: 'MONTH'
    }, {
        width: 50,
        increment: 1,
        resolution: 1,
        preset: 'year',
        resolutionUnit: 'MONTH'
    }, {
        width: 100,
        increment: 1,
        resolution: 1,
        preset: 'year',
        resolutionUnit: 'MONTH'
    }, {
        width: 200,
        increment: 1,
        resolution: 1,
        preset: 'year',
        resolutionUnit: 'MONTH'
    }, {
        width: 100,
        increment: 1,
        resolution: 7,
        preset: 'monthAndYear',
        resolutionUnit: 'DAY'
    }, {
        width: 30,
        increment: 1,
        resolution: 1,
        preset: 'weekDateAndMonth',
        resolutionUnit: 'DAY'
    }, {
        width: 35,
        increment: 1,
        resolution: 1,
        preset: 'weekAndMonth',
        resolutionUnit: 'DAY'
    }, {
        width: 50,
        increment: 1,
        resolution: 1,
        preset: 'weekAndMonth',
        resolutionUnit: 'DAY'
    }, {
        width: 20,
        increment: 1,
        resolution: 1,
        preset: 'weekAndDayLetter'
    }, {
        width: 50,
        increment: 1,
        resolution: 1,
        preset: 'weekAndDay',
        resolutionUnit: 'HOUR'
    }, {
        width: 100,
        increment: 1,
        resolution: 1,
        preset: 'weekAndDay',
        resolutionUnit: 'HOUR'
    }, {
        width: 50,
        increment: 6,
        resolution: 30,
        preset: 'hourAndDay',
        resolutionUnit: 'MINUTE'
    }, {
        width: 100,
        increment: 6,
        resolution: 30,
        preset: 'hourAndDay',
        resolutionUnit: 'MINUTE'
    }, {
        width: 60,
        increment: 2,
        resolution: 30,
        preset: 'hourAndDay',
        resolutionUnit: 'MINUTE'
    }, {
        width: 60,
        increment: 1,
        resolution: 30,
        preset: 'hourAndDay',
        resolutionUnit: 'MINUTE'
    }, {
        width: 30,
        increment: 15,
        resolution: 5,
        preset: 'minuteAndHour'
    }, {
        width: 60,
        increment: 15,
        resolution: 5,
        preset: 'minuteAndHour'
    }, {
        width: 130,
        increment: 15,
        resolution: 5,
        preset: 'minuteAndHour'
    }, {
        width: 60,
        increment: 5,
        resolution: 5,
        preset: 'minuteAndHour'
    }, {
        width: 100,
        increment: 5,
        resolution: 5,
        preset: 'minuteAndHour'
    }, {
        width: 50,
        increment: 2,
        resolution: 1,
        preset: 'minuteAndHour'
    }, {
        width: 30,
        increment: 10,
        resolution: 5,
        preset: 'secondAndMinute'
    }, {
        width: 60,
        increment: 10,
        resolution: 5,
        preset: 'secondAndMinute'
    }, {
        width: 130,
        increment: 5,
        resolution: 5,
        preset: 'secondAndMinute'
    }],
    minZoomLevel: null,
    maxZoomLevel: null,
    visibleZoomFactor: 5,
    zoomKeepsOriginalTimespan: !1,
    initializeZooming: function() {
        this.zoomLevels = this.zoomLevels.slice();
        this.setMinZoomLevel(this.minZoomLevel || 0);
        this.setMaxZoomLevel(this.maxZoomLevel !== null ? this.maxZoomLevel : this.zoomLevels.length - 1);
        this.on('viewready', this.onTimelineReady, this)
    },
    getZoomLevelUnit: function(a) {
        return Sch.preset.Manager.getPreset(a.preset).getBottomHeader().unit
    },
    getMilliSecondsPerPixelForZoomLevel: function(a, b) {
        var c = Sch.util.Date;
        return Math.round((c.add(new Date(1, 0, 1), this.getZoomLevelUnit(a), a.increment) - new Date(1, 0, 1)) / (b ? a.width : a.actualWidth || a.width))
    },
    presetToZoomLevel: function(b) {
        var a = Sch.preset.Manager.getPreset(b);
        return {
            preset: b,
            increment: a.getBottomHeader().increment || 1,
            resolution: a.timeResolution.increment,
            resolutionUnit: a.timeResolution.unit,
            width: a.timeColumnWidth
        }
    },
    calculateCurrentZoomLevel: function() {
        var a = this.presetToZoomLevel(this.viewPreset),
            g = Number.MAX_VALUE,
            e = this.timeAxisViewModel,
            d = e.timeColumnWidth;
        a.width = d;
        a.increment = e.getBottomHeader().increment || 1;
        for (var c = 0, h = this.zoomLevels.length; c < h; c++) {
            var b = this.zoomLevels[c];
            if (b.preset !== a.preset) {
                continue
            }
            var f = Math.abs(b.width - d);
            if (f < g) {
                g = f;
                a.actualWidth = b.actualWidth;
                a.width = b.width
            }
        }
        return a
    },
    getCurrentZoomLevelIndex: function() {
        var e = this.calculateCurrentZoomLevel();
        var b = this.getMilliSecondsPerPixelForZoomLevel(e);
        var c = this.zoomLevels;
        for (var a = 0; a < c.length; a++) {
            var d = this.getMilliSecondsPerPixelForZoomLevel(c[a]);
            if (d == b) {
                return a
            }
            if (a === 0 && b > d) {
                return -0.5
            }
            if (a == c.length - 1 && b < d) {
                return c.length - 1 + 0.5
            }
            var f = this.getMilliSecondsPerPixelForZoomLevel(c[a + 1]);
            if (d > b && b > f) {
                return a + 0.5
            }
        }
        throw new Error("Can't find current zoom level index")
    },
    setMaxZoomLevel: function(a) {
        if (a < 0 || a >= this.zoomLevels.length) {
            throw new Error('Invalid range for `setMinZoomLevel`')
        }
        this.maxZoomLevel = a
    },
    setMinZoomLevel: function(a) {
        if (a < 0 || a >= this.zoomLevels.length) {
            throw new Error('Invalid range for `setMinZoomLevel`')
        }
        this.minZoomLevel = a
    },
    zoomToLevel: function(d, b, e) {
        d = Ext.Number.constrain(d, this.minZoomLevel, this.maxZoomLevel);
        e = e || {};
        var k = this.calculateCurrentZoomLevel();
        var l = this.getMilliSecondsPerPixelForZoomLevel(k);
        var a = this.zoomLevels[d];
        var m = this.getMilliSecondsPerPixelForZoomLevel(a);
        if (this.getMode() !== 'horizontal' || l == m && !b) {
            return null
        }
        var f = this;
        f.fireEvent('beforezoomchange', f, d);
        var j = this.getSchedulingView();
        if (!this.rendered) {
            this.on('afterlayout', Ext.Function.bind(this.zoomToLevel, this, [d, b, e]), null, {
                single: !0
            });
            return
        }
        var o = j.getOuterEl();
        var i = this.isVertical();
        var h = e.centerDate || (b ? new Date((b.start.getTime() + b.end.getTime()) / 2) : this.getViewportCenterDateCached());
        var n = i ? j.getViewContainerHeight() : o.getWidth();
        var c = Sch.preset.Manager.getPreset(a.preset).clone();
        c.name = a.preset;
        var g = c.getBottomHeader();
        b = this.calculateOptimalDateRange(h, n, a, b);
        c[i ? 'timeRowHeight' : 'timeColumnWidth'] = e.customWidth || a.width;
        g.increment = a.increment;
        this.isZooming = !0;
        c.increment = a.increment;
        c.timeResolution.unit = Sch.util.Date.getUnitByName(a.resolutionUnit || c.timeResolution.unit || g.unit);
        c.timeResolution.increment = a.resolution;
        this.setViewPreset(c, b.start || this.getStart(), b.end || this.getEnd(), !1, {
            centerDate: h
        });
        a.actualWidth = this.timeAxisViewModel.getTickWidth();
        f.isZooming = !1;
        f.fireEvent('zoomchange', f, d);
        return d
    },
    setZoomLevel: function() {
        this.zoomToLevel.apply(this, arguments)
    },
    zoomToSpan: function(j, a) {
        var u = this.getSchedulingView();
        a = a || {};
        if (a.leftMargin || a.rightMargin) {
            a.adjustStart = 0;
            a.adjustEnd = 0
        }
        Ext.applyIf(a, {
            leftMargin: 0,
            rightMargin: 0
        });
        if (!this.rendered) {
            this.on('afterlayout', Ext.Function.bind(this.zoomToSpan, this, [j, a]), null, {
                single: !0
            });
            return
        }
        if (j.start && j.end) {
            var b = j.start,
                c = j.end,
                n = a.adjustStart >= 0 && a.adjustEnd >= 0;
            if (n) {
                b = Sch.util.Date.add(b, this.timeAxis.mainUnit, -a.adjustStart);
                c = Sch.util.Date.add(c, this.timeAxis.mainUnit, a.adjustEnd)
            }
            if (b <= c) {
                var g = u.getTimeAxisViewModel().getAvailableWidth();
                var i = Math.floor(this.getCurrentZoomLevelIndex());
                if (i == -1) {
                    i = 0
                }
                var l = this.zoomLevels;
                var r = c - b || 1,
                    h = this.getMilliSecondsPerPixelForZoomLevel(l[i], !0),
                    k = r / h + a.leftMargin + a.rightMargin > g ? -1 : 1,
                    d = i + k;
                var f, e = null;
                while (d >= 0 && d <= l.length - 1) {
                    f = l[d];
                    h = this.getMilliSecondsPerPixelForZoomLevel(f, !0);
                    var q = r / h + a.leftMargin + a.rightMargin;
                    if (k == -1) {
                        if (q <= g) {
                            e = d;
                            break
                        }
                    } else {
                        if (q <= g) {
                            if (i !== d - k) {
                                e = d
                            }
                        } else {
                            break
                        }
                    }
                    d += k
                }
                e = e !== null ? e : d - k;
                f = l[e];
                var t = Sch.preset.Manager.getPreset(f.preset).getBottomHeader().unit;
                if (a.leftMargin || a.rightMargin) {
                    b = new Date(b.getTime() - h * a.leftMargin);
                    c = new Date(c.getTime() + h * a.rightMargin)
                }
                var o = Sch.util.Date.getDurationInUnit(b, c, t, !0) / f.increment;
                if (o === 0) {
                    return
                }
                var s = Math.floor(g / o);
                var p = new Date((b.getTime() + c.getTime()) / 2);
                var m;
                if (n) {
                    m = {
                        start: b,
                        end: c
                    }
                } else {
                    m = this.calculateOptimalDateRange(p, g, f)
                }
                return this.zoomToLevel(e, m, {
                    customWidth: s,
                    centerDate: p
                })
            }
        }
        return null
    },
    zoomIn: function(a) {
        a = a || 1;
        var b = this.getCurrentZoomLevelIndex();
        if (b >= this.zoomLevels.length - 1) {
            return null
        }
        return this.zoomToLevel(Math.floor(b) + a)
    },
    zoomOut: function(a) {
        a = a || 1;
        var b = this.getCurrentZoomLevelIndex();
        if (b <= 0) {
            return null
        }
        return this.zoomToLevel(Math.ceil(b) - a)
    },
    zoomInFull: function() {
        return this.zoomToLevel(this.maxZoomLevel)
    },
    zoomOutFull: function() {
        return this.zoomToLevel(this.minZoomLevel)
    },
    calculateOptimalDateRange: function(e, h, a, d) {
        if (d) {
            return d
        }
        var b = this.timeAxis;
        if (this.zoomKeepsOriginalTimespan) {
            return {
                start: b.getStart(),
                end: b.getEnd()
            }
        }
        var g = Sch.util.Date;
        var c = this.getZoomLevelUnit(a);
        var f = Math.ceil(h / a.width * a.increment * this.visibleZoomFactor / 2);
        var i = g.add(e, c, -f);
        var j = g.add(e, c, f);
        return {
            start: b.floorDate(i, !1, c, a.increment),
            end: b.ceilDate(j, !1, c, a.increment)
        }
    },
    onTimelineReady: function() {
        if (this.zoomOnMouseWheel) {
            this.getSchedulingView().getEl().on('wheel', this.onWheel, this, {
                capture: !0
            });
            this.on('destroy', function() {
                clearTimeout(this.scrollWheelBlockTimeout)
            })
        }
    },
    onWheel: function(b) {
        var a = this;
        if (b.ctrlKey) {
            b.preventDefault();
            if (!a.preventScrollZoom) {
                if (b.browserEvent.deltaY > 0) {
                    a.zoomOut()
                } else {
                    if (b.browserEvent.deltaY < 0) {
                        a.zoomIn()
                    }
                }
                a.preventScrollZoom = !0;
                a.scrollWheelBlockTimeout = setTimeout(function() {
                    a.preventScrollZoom = !1
                }, 30)
            }
        }
    }
}, 0, 0, 0, 0, 0, 0, [Sch.mixin, 'Zoomable'], 0);
Ext.cmd.derive('Sch.mixin.AbstractTimelinePanel', Ext.Base, {
    snapToIncrement: !1,
    readOnly: !1,
    forceFit: !1,
    eventResizeHandles: 'both',
    timeAxis: null,
    autoAdjustTimeAxis: !0,
    timeAxisViewModel: null,
    crudManager: null,
    viewPreset: 'weekAndDay',
    trackHeaderOver: !0,
    startDate: null,
    endDate: null,
    startTime: 0,
    endTime: 24,
    columnLines: !0,
    getDateConstraints: Ext.emptyFn,
    snapRelativeToEventStartDate: !1,
    trackMouseOver: !1,
    readRowHeightFromPreset: !0,
    eventBorderWidth: 1,
    cachedCenterDate: null,
    cellBorderWidth: 1,
    cellTopBorderWidth: 1,
    cellBottomBorderWidth: 1,
    renderers: null,
    getMode: function() {
        return this.mode
    },
    isHorizontal: function() {
        return this.getMode() === 'horizontal'
    },
    isVertical: function() {
        return this.getMode() === 'vertical'
    },
    isWeekView: function() {
        return this.getMode() === 'weekview'
    },
    _initializeTimelinePanel: function() {
        if (this.mode) {
            if (this.mode === 'calendar') {
                this.mode = 'weekview'
            }
        } else {
            this.mode = 'horizontal'
        }
        this.applyViewPreset(this.viewPreset);
        if (this.isWeekView()) {
            if (!this.viewPreset.headerConfig.middle.splitUnit) {
                this._oldViewPresetArgs = [this.viewPreset];
                this.viewPreset = this.calendarViewPreset || 'week'
            }
        }
        this.initializeZooming();
        this.on('viewchange', this.clearCenterDateCache, this);
        this.on('viewready', this.setupClearCenterDateCache, this);
        this.renderers = [];
        if (this.readRowHeightFromPreset) {
            this.readRowHeightFromPreset = !this.rowHeight
        }
        if (!(this.timeAxis instanceof Sch.data.TimeAxis)) {
            this.timeAxis = Ext.create(Ext.applyIf(this.timeAxis || {}, {
                xclass: 'Sch.data.TimeAxis',
                autoAdjust: this.autoAdjustTimeAxis,
                mode: this.isWeekView() ? 'week' : 'plain'
            }))
        }
        if (!(this.timeAxisViewModel instanceof Sch.view.model.TimeAxis)) {
            this.timeAxisViewModel = Ext.create(Ext.applyIf(this.timeAxisViewModel || {}, {
                xclass: 'Sch.view.model.TimeAxis',
                mode: this.mode,
                snapToIncrement: this.snapToIncrement,
                forceFit: this.forceFit,
                timeAxis: this.timeAxis,
                eventStore: this.getEventStore(),
                viewPreset: this.viewPreset
            }))
        }
        if (this.rowHeight) {
            this.setRowHeight(this.rowHeight, !0);
            this.rowHeight = null
        }
        this.timeAxisViewModel.on('update', this.onTimeAxisViewModelUpdate, this);
        this.timeAxisViewModel.refCount++;
        this.on('destroy', this.onPanelDestroyed, this);
        var a;
        if (this.isHorizontal()) {
            a = ['sch-horizontal']
        } else {
            if (this.isVertical()) {
                a = ['sch-vertical', 'sch-vertical-resource']
            } else {
                if (this.isWeekView()) {
                    a = ['sch-vertical', 'sch-calendar']
                }
            }
        }
        this.addCls([].concat.apply(['sch-timelinepanel'], a))
    },
    applyViewPreset: function(a) {
        var b;
        if (Ext.isString(a)) {
            b = Sch.preset.Manager.getPreset(a);
            if (!b) {
                throw 'You must define a valid view preset object. See Sch.preset.Manager class for reference'
            }
        } else {
            if (Ext.isObject(a)) {
                var c = a.name && Sch.preset.Manager.getPreset(a.name);
                if (c) {
                    b = new Sch.preset.ViewPreset(Ext.applyIf(a, c))
                } else {
                    var d = a.name || 'preset' + Sch.preset.Manager.getCount();
                    Sch.preset.Manager.registerPreset(d, a);
                    b = Sch.preset.Manager.getPreset(d)
                }
            }
        }
        this.viewPreset = b
    },
    onTimeAxisViewModelUpdate: function() {
        var a = this.getSchedulingView();
        if (a && a.viewReady) {
            a.refreshKeepingScroll()
        }
        this.fireEvent('viewchange', this)
    },
    onPanelDestroyed: function() {
        var a = this.timeAxisViewModel;
        a.un('update', this.onTimeAxisViewModelUpdate, this);
        a.refCount--;
        if (a.refCount <= 0) {
            a.destroy()
        }
    },
    getSchedulingView: function() {
        throw 'Abstract method call'
    },
    setReadOnly: function(a) {
        this.getSchedulingView().setReadOnly(a)
    },
    isReadOnly: function() {
        return this.getSchedulingView().isReadOnly()
    },
    setupClearCenterDateCache: function() {
        this.mon(this.getSchedulingView().getScrollable(), 'scroll', this.clearCenterDateCache, this)
    },
    getViewportCenterDateCached: function() {
        if (this.cachedCenterDate) {
            return this.cachedCenterDate
        }
        return this.cachedCenterDate = this.getViewportCenterDate()
    },
    clearCenterDateCache: function(f, d, e) {
        var c = this.isHorizontal(),
            a = this.viewPresetActiveScroll;
        var b = a && (c ? d === a.left : e == a.top);
        if (!b) {
            this.cachedCenterDate = null;
            this.viewPresetActiveScroll = null
        }
    },
    switchViewPreset: function() {
        this.setViewPreset.apply(this, arguments)
    },
    setViewPreset: function(a, e, g, n, i) {
        i = i || {};
        var c = i.centerDate,
            f = this.timeAxis,
            b = this.getSchedulingView();
        if (typeof a === 'string') {
            a = Sch.preset.Manager.getPreset(a)
        }
        if (!a) {
            throw new Error('View preset not found')
        }
        if (this.fireEvent('beforeviewchange', this, a, e, g) !== !1) {
            this.viewPreset = a.name;
            var l = this.isHorizontal(),
                m = this.isVertical();
            b.setDisplayDateFormat(a.displayDateFormat);
            if (!(n && f.isConfigured)) {
                var d = {
                    weekStartDay: this.weekStartDay !== undefined ? this.weekStartDay : this.L ? this.L('weekStartDay') : 1,
                    startTime: this.startTime,
                    endTime: this.endTime
                };
                if (n || !this.rendered) {
                    if (f.getCount() === 0 || e) {
                        d.start = e || new Date();
                        d.end = g
                    }
                } else {
                    if (e) {
                        d.start = e;
                        d.end = g;
                        if (!c && g) {
                            if (this.infiniteScroll && b.cachedScrollDate && b.cachedScrollDateIsCentered) {
                                c = b.cachedScrollDate
                            } else {
                                c = new Date((e.getTime() + g.getTime()) / 2)
                            }
                        }
                    } else {
                        d.start = f.getStart();
                        d.end = g || f.getEnd();
                        if (!c) {
                            if (this.infiniteScroll && b.cachedScrollDate && b.cachedScrollDateIsCentered) {
                                c = b.cachedScrollDate
                            } else {
                                c = this.getViewportCenterDateCached()
                            }
                        }
                    }
                }
                f.consumeViewPreset(a);
                f.reconfigure(d, !0);
                this.timeAxisViewModel.reconfigure({
                    viewPreset: this.viewPreset,
                    headerConfig: a.headerConfig,
                    columnLinesFor: a.columnLinesFor || 'middle',
                    rowHeightHorizontal: this.readRowHeightFromPreset ? a.rowHeight : this.timeAxisViewModel.getViewRowHeight(),
                    tickWidth: l ? a.timeColumnWidth : a.timeRowHeight || a.timeColumnWidth || 60,
                    timeColumnWidth: a.timeColumnWidth,
                    rowHeightVertical: a.timeRowHeight || a.timeColumnWidth || 60,
                    timeAxisColumnWidth: a.timeAxisColumnWidth,
                    resourceColumnWidth: this.resourceColumnWidth || a.resourceColumnWidth || 100
                })
            }
            if (m) {
                b.setColumnWidth(this.resourceColumnWidth || a.resourceColumnWidth || 100, !0)
            }
            var o = b.getOuterEl();
            if (!i.notScroll && o && this.getView().el) {
                if (c) {
                    this.cachedCenterDate = c;
                    var h = null,
                        j = null;
                    if (m) {
                        j = Math.max(Math.floor(b.getCoordinateFromDate(c, !0) - b.getViewContainerHeight() / 2), 0);
                        this.viewPresetActiveScroll = {
                            top: j
                        };
                        b.scrollVerticallyTo(j)
                    } else {
                        h = Math.max(Math.floor(b.getCoordinateFromDate(c, !0) - o.getWidth() / 2), 0);
                        this.viewPresetActiveScroll = {
                            left: h
                        };
                        if (Ext.getVersion().isGreaterThan('6.2.0')) {
                            var k = b.up('timelinegrid,timelinetree').normalScrollbarScroller;
                            k && k.scrollTo(h)
                        }
                        b.headerCt.scrollTo(h);
                        b.scrollTo(h)
                    }
                } else {
                    if (l) {
                        b.scrollHorizontallyTo(0)
                    } else {
                        b.scrollVerticallyTo(0)
                    }
                }
            }
        }
    },
    getViewPreset: function() {
        return this.viewPreset
    },
    getStart: function() {
        return this.getStartDate()
    },
    getStartDate: function() {
        return this.timeAxis.getStart()
    },
    getEnd: function() {
        return this.getEndDate()
    },
    getEndDate: function() {
        return this.timeAxis.getEnd()
    },
    setTimeColumnWidth: function(b, a) {
        this.timeAxisViewModel.setTickWidth(b, a)
    },
    getTimeColumnWidth: function() {
        return this.timeAxisViewModel.getTickWidth()
    },
    getRowHeight: function() {
        return this.timeAxisViewModel.getViewRowHeight()
    },
    shiftNext: function(a) {
        this.suspendLayouts && this.suspendLayouts();
        this.timeAxis.shiftNext(a);
        this.suspendLayouts && this.resumeLayouts(!0)
    },
    shiftPrevious: function(a) {
        this.suspendLayouts && this.suspendLayouts();
        this.timeAxis.shiftPrevious(a);
        this.suspendLayouts && this.resumeLayouts(!0)
    },
    goToNow: function() {
        this.setTimeSpan(new Date())
    },
    setTimeSpan: function(a, b) {
        if (this.timeAxis) {
            this.timeAxis.setTimeSpan(a, b)
        }
    },
    setStart: function(a) {
        this.setStartDate(a)
    },
    setEnd: function(a) {
        this.setEndDate(a)
    },
    setStartDate: function(a) {
        this.setTimeSpan(a)
    },
    setEndDate: function(a) {
        this.setTimeSpan(null, a)
    },
    getTimeAxis: function() {
        return this.timeAxis
    },
    scrollToDate: function(a, c, d) {
        var e = this.getSchedulingView();
        var b = e.getCoordinateFromDate(a, !0);
        this.scrollToCoordinate(b, a, c, !1, d)
    },
    scrollToDateCentered: function(c, e) {
        var a = this.getSchedulingView();
        var b = 0;
        if (a.isHorizontal()) {
            b = a.getBox().width / 2
        } else {
            b = a.getBox().height / 2
        }
        var d = Math.round(a.getCoordinateFromDate(c, !0) - b);
        this.scrollToCoordinate(d, c, e, !0)
    },
    scrollToCoordinate: function(e, b, c, i, a) {
        var d = this.getSchedulingView();
        var j = this;
        a = a || 0;
        if (e < 0 && !d.isWeekView()) {
            if (this.infiniteScroll) {
                d.shiftToDate(b, i)
            } else {
                var f = (this.timeAxis.getEnd() - this.timeAxis.getStart()) / 2;
                var g = new Date(b.getTime() - f);
                var h = new Date(b.getTime() + f);
                if (g - this.getStart() !== 0 && h - this.getEnd() !== 0) {
                    this.setTimeSpan(g, h);
                    if (i) {
                        j.scrollToDateCentered(b, c)
                    } else {
                        j.scrollToDate(b, c, a)
                    }
                }
            }
            return
        }
        if (this.isHorizontal()) {
            d.scrollHorizontallyTo(e - a, c)
        } else {
            d.scrollVerticallyTo(e - a, c)
        }
    },
    getViewportCenterDate: function() {
        return this.getSchedulingView().getViewportCenterDate()
    },
    addCls: function() {
        throw 'Abstract method call'
    },
    removeCls: function() {
        throw 'Abstract method call'
    },
    registerRenderer: function(b, a) {
        this.renderers.push({
            fn: b,
            scope: a
        })
    },
    deregisterRenderer: function(a, b) {
        Ext.each(this.renderers, function(c, d) {
            if (a === c) {
                Ext.Array.removeAt(this.renderers, d);
                return !1
            }
        })
    },
    getCrudManager: function() {
        return this.crudManager
    },
    setCrudManager: function(a) {
        this.crudManager = a
    }
}, 0, 0, 0, 0, 0, [
    [Sch.mixin.Zoomable.prototype.mixinId || Sch.mixin.Zoomable.$className, Sch.mixin.Zoomable]
], [Sch.mixin, 'AbstractTimelinePanel'], 0);
Ext.cmd.derive('Sch.view.Horizontal', Ext.Base, {
    view: null,
    constructor: function(a) {
        Ext.apply(this, a)
    },
    getElementsFromEventRecord: function(e, d, f, c) {
        var b = this.view,
            a;
        c = c || !1;
        if (d) {
            a = '[id^=' + b.eventPrefix + e.internalId + '-' + d.internalId + '-]'
        } else {
            a = '[id^=' + b.eventPrefix + e.internalId + '-]'
        }
        return b.getEl().query(a, c)
    },
    translateToScheduleCoordinate: function(c) {
        var a = this.view;
        var b;
        if (a.shouldAdjustForRtl()) {
            b = a.getEl().getRight() - c
        } else {
            b = c - a.getEl().getX()
        }
        return b + a.getScroll().left
    },
    translateToPageCoordinate: function(b) {
        var a = this.view;
        return b + a.getEl().getX() - a.getScroll().left
    },
    getDateFromXY: function(d, b, c) {
        var a = d[0];
        if (!c) {
            a = this.translateToScheduleCoordinate(a)
        }
        return this.view.timeAxisViewModel.getDateFromPosition(a, b)
    },
    getEventRenderData: function(g) {
        var d = g.getStartDate(),
            e = g.getEndDate() || d,
            a = this.view,
            i = a.timeAxis.getStart(),
            j = a.timeAxis.getEnd(),
            c = Math,
            f = a.getCoordinateFromDate(Sch.util.Date.max(d, i)),
            h = a.getCoordinateFromDate(Sch.util.Date.min(e, j)),
            b = {
                event: g
            };
        if (this.view.rtl) {
            b.right = c.min(f, h)
        } else {
            b.left = c.min(f, h)
        }
        b.width = c.max(1, c.abs(h - f)) - a.eventBorderWidth;
        if (a.managedEventSizing) {
            b.top = c.max(0, a.barMargin - a.eventBorderWidth + a.cellTopBorderWidth);
            b.height = a.timeAxisViewModel.rowHeightHorizontal - 2 * a.barMargin - a.eventBorderWidth
        }
        b.start = d;
        b.end = e;
        b.startsOutsideView = d < i;
        b.endsOutsideView = e > j;
        return b
    },
    getScheduleRegion: function(c, d) {
        var b = this.view,
            a;
        if (c) {
            var g = d && b.getElementsFromEventRecord(d, c)[0];
            a = Ext.fly(b.getRowNode(c)).getRegion();
            if (g) {
                var f = g.getRegion();
                a.top = f.top;
                a.bottom = f.bottom
            } else {
                a.top = a.top + b.barMargin;
                a.bottom = a.bottom - b.barMargin - b.eventBorderWidth
            }
        } else {
            a = b.getTableRegion();
            a.top = a.top + b.barMargin;
            a.bottom = a.bottom - b.barMargin - b.eventBorderWidth
        }
        var h = b.timeAxis.getStart(),
            j = b.timeAxis.getEnd(),
            e = b.getDateConstraints(c, d) || {
                start: h,
                end: j
            },
            i = this.translateToPageCoordinate(b.getCoordinateFromDate(Sch.util.Date.max(h, e.start))),
            k = this.translateToPageCoordinate(b.getCoordinateFromDate(Sch.util.Date.min(j, e.end))),
            m = a.top,
            l = a.bottom;
        return new Ext.util.Region(m, Math.max(i, k), l, Math.min(i, k))
    },
    getResourceRegion: function(m, c, d) {
        var a = this.view,
            f = a.getRowNode(m),
            e = Ext.fly(f).getOffsetsTo(a.getEl()),
            g = a.timeAxis.getStart(),
            j = a.timeAxis.getEnd(),
            n = c ? Sch.util.Date.max(g, c) : g,
            o = d ? Sch.util.Date.min(j, d) : j,
            i = a.getCoordinateFromDate(n),
            k = a.getCoordinateFromDate(o),
            l = e[1] + a.cellTopBorderWidth,
            h = e[1] + Ext.fly(f).getHeight() - a.cellBottomBorderWidth;
        if (!Ext.versions.touch) {
            var b = a.getScroll();
            l += b.top;
            h += b.top
        }
        return new Ext.util.Region(l, Math.max(i, k), h, Math.min(i, k))
    },
    columnRenderer: function(j, h, b, f, i) {
        var a = this.view;
        var d = a.getEventStore().filterEventsForResource(b, function(c) {
            return a.timeAxis.isRangeInAxis(c)
        });
        if (d.length === 0) {
            return
        }
        var e = Ext.Array.map(d, function(c) {
            return a.generateTplData(c, b, f)
        });
        if (a.rowHasDynamicRowHeight(b)) {
            var g = a.eventLayout.horizontal;
            var c = g.applyLayout(e, b, this.layoutEventVertically, this);
            h.rowHeight = c * a.timeAxisViewModel.rowHeightHorizontal - (c - 1) * a.barMargin
        }
        return a.eventTpl.apply(e)
    },
    layoutEventVertically: function(b, d) {
        var a = this.view;
        var c = b === 0 ? a.barMargin : b * a.timeAxisViewModel.rowHeightHorizontal - (b - 1) * a.barMargin;
        if (c >= a.cellBottomBorderWidth) {
            c -= a.cellBottomBorderWidth
        }
        return c
    },
    resolveResource: function(a) {
        var e = this,
            b = e.view,
            c, d;
        c = Ext.fly(a).is(b.eventSelector) && a || Ext.fly(a).up(b.eventSelector, null, !0);
        if (c) {
            d = b.getResourceRecordFromDomId(c.id)
        } else {
            a = b.findRowByChild(a);
            d = a && b.getRecordForRowNode(a) || null
        }
        return d
    },
    getTimeSpanRegion: function(h, e, g) {
        var b = this.view,
            d = b.getCoordinateFromDate(h),
            f = e ? b.getCoordinateFromDate(e) : d,
            c, a;
        a = b.getTableRegion();
        if (g) {
            c = Math.max(a ? a.bottom - a.top : 0, b.getEl().dom.clientHeight)
        } else {
            c = a ? a.bottom - a.top : 0
        }
        return new Ext.util.Region(0, Math.max(d, f), c, Math.min(d, f))
    },
    getStartEndDatesFromRegion: function(d, c) {
        var e = this.view;
        var b = e.getDateFromCoordinate(d.left, c),
            a = e.getDateFromCoordinate(d.right, c);
        if (b && a) {
            return {
                start: Sch.util.Date.min(b, a),
                end: Sch.util.Date.max(b, a)
            }
        }
        return null
    },
    onEventAdd: function(m, g) {
        var i = this.view,
            j = {},
            h, d, f, c, e, a, l, b, k;
        for (a = 0, l = g.length; a < l; a++) {
            h = g[a];
            d = h.getStartDate();
            f = h.getEndDate();
            if (d && f && i.timeAxis.timeSpanInAxis(d, f)) {
                c = g[a].getResources(i.getEventStore());
                for (b = 0, k = c.length; b < k; b++) {
                    e = c[b];
                    j[e.getId()] = e
                }
            }
        }
        Ext.Object.each(j, function(b, a) {
            i.repaintEventsForResource(a)
        })
    },
    onEventRemove: function(g, c) {
        var f = this,
            a = f.view,
            e = a.getEventStore(),
            d, b;
        d = Ext.Array.unique(Ext.Array.reduce(c, function(a, b) {
            return a.concat(e.getResourcesForEvent(b))
        }, []));
        b = Ext.Array.reduce(c, function(b, d) {
            return b.concat(a.getElementsFromEventRecord(d, null, null, !0))
        }, []);
        b = new Ext.CompositeElementLite(b);
        b.fadeOut({
            callback: function(b) {
                Ext.Array.forEach(d, function(d) {
                    if (a && !a.isDestroyed) {
                        a.store.indexOf(d) >= 0 && a.repaintEventsForResource(d)
                    }
                })
            }
        })
    },
    onEventUpdate: function(k, a) {
        var b = a.previous || {};
        var f = this.view;
        var i = f.timeAxis;
        var c = a.getStartDate();
        var d = a.getEndDate();
        var h = b.StartDate || c;
        var j = b.EndDate || d;
        var g = h && j && i.timeSpanInAxis(h, j);
        var e;
        if (a.resourceIdField in b && g) {
            e = k.getResourceStore().getById(b[a.resourceIdField]);
            e && f.repaintEventsForResource(e, !0)
        }
        if (c && d && i.timeSpanInAxis(c, d) || g) {
            Ext.Array.each(a.getResources(), function(b) {
                f.repaintEventsForResource(b, !0)
            })
        }
    },
    setColumnWidth: function(b, a) {
        var c = this.view;
        c.getTimeAxisViewModel().setViewColumnWidth(b, a)
    },
    getVisibleDateRange: function() {
        var a = this.view;
        if (!a.getEl()) {
            return null
        }
        var c = a.getTableRegion(),
            f = a.timeAxis.getStart(),
            g = a.timeAxis.getEnd(),
            e = a.getWidth();
        if (c.right - c.left < e) {
            return {
                startDate: f,
                endDate: g
            }
        }
        var d = a.getScroll();
        var b = {
            startDate: a.getDateFromCoordinate(d.left, null, !0),
            endDate: a.getDateFromCoordinate(d.left + e, null, !0) || a.timeAxis.getEnd()
        };
        if (!b.endDate) {
            b.endDate = a.timeAxis.getEnd()
        }
        return b
    },
    getItemBox: function(a) {
        var b = this;
        return Ext.Array.map(a.getResources(), function(c) {
            return b.getResourceEventBox(a, c)
        })
    },
    isRowVisible: function(a) {
        var b = Ext.isFunction(a.isVisible) && !a.isVisible();
        if (!b && this.view.groupingFeature && !this.view.groupingFeature.disabled) {
            var c = this.view.resourceStore.getGroups();
            if (c) {
                var d = c.getByKey(a.get(this.view.resourceStore.groupField));
                b = d && !this.view.lockingPartner.groupingFeature.isExpanded(d)
            }
        }
        return !b
    },
    isElementRenderedAndDisplayed: function(a) {
        if (a && a.isResourceModel) {
            a = this.view.getRowNode(a)
        }
        return !!(a && Ext.fly(a).getHeight())
    },
    getResultEventBox: function(a, b) {
        return {
            rendered: !0,
            start: a.hasOwnProperty('left') ? a.left : a.right,
            end: (a.hasOwnProperty('left') ? a.left : a.right) + a.width,
            top: b + a.top,
            bottom: b + a.top + a.height
        }
    },
    getResourceEventBox: function(f, c) {
        var s = Sch.util.Date,
            e = this,
            b = null,
            a = e.view,
            v = a.timeAxis.getStart(),
            x = a.timeAxis.getEnd(),
            m = f.getStartDate(),
            o = f.getEndDate(),
            w, k, l, j, y, z, d, B, q, r, g, p, u, t, h, n, i;
        if (m && o && s.intersectSpans(m, o, v, x) && e.isRowVisible(c)) {
            j = a.getRowNode(c);
            if (j && e.isElementRenderedAndDisplayed(j)) {
                if (a.managedEventSizing) {
                    w = a.eventLayout.horizontal;
                    var A = a.getEventStore().filterEventsForResource(c, a.timeAxis.isRangeInAxis, a.timeAxis);
                    k = Ext.Array.map(A, e.getEventRenderData, e);
                    w.applyLayout(k, c);
                    l = Ext.Array.findBy(k, function(a) {
                        return a.event == f
                    });
                    if (l) {
                        z = Ext.fly(j).getOffsetsTo(a.getNodeContainer())[1];
                        b = this.getResultEventBox(l, z)
                    }
                } else {
                    q = a.getElementsFromEventRecord(f, f !== c && c);
                    if (q.length) {
                        r = q[0];
                        g = r.getOffsetsTo(a.getEl());
                        p = r.getBox();
                        b = {
                            rendered: !0,
                            start: g[0],
                            end: g[0] + p.width,
                            top: g[1],
                            bottom: g[1] + p.height
                        }
                    }
                }
            } else {
                b = {
                    rendered: !1,
                    start: a.getCoordinateFromDate(s.max(m, v)),
                    end: a.getCoordinateFromDate(s.min(o, x))
                };
                u = a.all.startIndex;
                t = a.getRecord(u);
                h = a.all.endIndex;
                n = a.getRecord(h);
                d = a.getRowHeight();
                if (c.isAbove(t)) {
                    b.top = -d;
                    b.bottom = b.top + d;
                    b.relPos = 'before'
                } else {
                    if (c == n || c.isAbove(n)) {
                        y = a.indexOf(c);
                        b.top = y * d;
                        b.bottom = b.top + d
                    } else {
                        i = a.getNode(h);
                        if (e.isElementRenderedAndDisplayed(i)) {
                            b.top = Ext.fly(i).getOffsetsTo(a.getNodeContainer())[1] + Ext.fly(i).getHeight()
                        } else {
                            b.top = (h + 1) * d
                        }
                        b.bottom = b.top + d;
                        b.relPos = 'after'
                    }
                }
            }
            if (b) {
                b = e.adjustItemBox(f, b)
            }
        }
        return b
    },
    adjustItemBox: function(b, a) {
        return a
    },
    getConnectorStartSide: function(a) {
        return 'left'
    },
    getConnectorEndSide: function(a) {
        return 'right'
    }
}, 1, 0, 0, 0, 0, 0, [Sch.view, 'Horizontal'], 0);
Ext.define('TimesSquare.view.gantt.HorizontalOverride', {
    override: 'Sch.view.Horizontal',
    eventTypeMap: {
        'event-leg-scheduled': 1,
        'event-leg-planned': 1,
        'event-check-planned': 1,
        'event-leg-actual': 2,
        'event-leg-unplanned': 2
    },
    overlapPixels: 10,
    columnRenderer: function(r, q, l, o) {
        var d = this.view,
            f = d.eventStore.getEventsForResource(l),
            p = d.timeAxis,
            m = d.timeMode === 'local',
            j = [],
            n = this.view.timeAxisViewModel.getDateFromPosition(this.overlapPixels) - this.view.timeAxisViewModel.getDateFromPosition(0),
            k, c = [],
            h, b, g, i, e, a;
        if (f.length === 0) {
            return
        }
        for (a = 0, e = f.length; a < e; a += 1) {
            b = f[a];
            g = b.getStartDate();
            i = b.getEndDate();
            if (g && i && p.timeSpanInAxis(g, i)) {
                k = a > 0 ? this.getOverlappingEvent(g, i, n, this.eventTypeMap[b.data.Cls], a - 1, f) : null;
                b.data.overlapCount = k ? k.data.overlapCount + 1 : 0;
                h = d.generateTplData(b, l, o);
                h.useLocalTime = m;
                if (b.data.eventType === 'S' || b.data.eventType === 'C') {
                    c.push(h)
                }
                j[j.length] = h
            } else {
                b.data.overlapCount = 0
            }
        }
        e = c.length;
        if (e > 1) {
            c.sort(this.legsSorterFn);
            for (a = 1; a < e; a += 1) {
                this.setAirportMarkerData(c[a], c[a - 1])
            }
        }
        return d.eventTpl.apply(j)
    },
    getOverlappingEvent: function(f, i, d, h, b, g) {
        var a, e, c;
        for (b; b > 0; b -= 1) {
            a = g[b];
            c = a.getEndDate();
            if (c < f) {
                return null
            }
            e = a.getStartDate();
            if ((e > f - d || c + d > i) && this.eventTypeMap[a.data.Cls] === h) {
                return a
            }
        }
        return null
    },
    legsSorterFn: function(a, b) {
        return a.left - b.left
    },
    setAirportMarkerData: function(a, b) {
        var e = b.eventData,
            d = a.eventData,
            f = a.left - b.left - b.width,
            g, c;
        if (f < 30) {
            return
        }
        g = Math.round(((d.ActualStartDate || a.start) - (e.ActualEndDate || b.end)) / 1000 / 60);
        c = e.diversionAirport || e.arrivalAirport;
        a.airportMarker = {
            airport: c === d.departureAirport ? c : c + '/' + d.departureAirport,
            left: Math.round(a.left - f / 2 - 25),
            time: Ext.util.Format.delayDurationRenderer(g)
        }
    }
});
Ext.cmd.derive('Sch.mixin.AbstractTimelineView', Ext.Base, {
    selectedEventCls: 'sch-event-selected',
    readOnly: !1,
    horizontalViewClass: 'Sch.view.Horizontal',
    timeCellCls: 'sch-timetd',
    timeCellSelector: '.sch-timetd',
    eventBorderWidth: 1,
    timeAxis: null,
    timeAxisViewModel: null,
    eventPrefix: null,
    rowHeight: null,
    mode: 'horizontal',
    horizontal: null,
    vertical: null,
    panel: null,
    displayDateFormat: null,
    el: null,
    _initializeTimelineView: function() {
        if (this.horizontalViewClass) {
            this.horizontal = Ext.create(this.horizontalViewClass, {
                view: this
            })
        }
        if (this.verticalViewClass) {
            this.vertical = Ext.create(this.verticalViewClass, {
                view: this
            })
        }
        if (this.weekViewClass) {
            this.weekview = Ext.create(this.weekViewClass, {
                view: this
            })
        }
        this.eventPrefix = (this.eventPrefix || this.getId()) + '-'
    },
    getTimeAxisViewModel: function() {
        return this.timeAxisViewModel
    },
    getFormattedDate: function(a) {
        return Ext.Date.format(a, this.getDisplayDateFormat())
    },
    getFormattedEndDate: function(a, b) {
        var c = this.getDisplayDateFormat();
        if (a.getHours() === 0 && a.getMinutes() === 0 && (!b || !(a.getYear() === b.getYear() && a.getMonth() === b.getMonth() && a.getDate() === b.getDate())) && !Sch.util.Date.hourInfoRe.test(c.replace(Sch.util.Date.stripEscapeRe, ''))) {
            a = Sch.util.Date.add(a, Sch.util.Date.DAY, -1)
        }
        return Ext.Date.format(a, c)
    },
    getDisplayDateFormat: function() {
        return this.displayDateFormat
    },
    setDisplayDateFormat: function(a) {
        this.displayDateFormat = a
    },
    fitColumns: function(a) {
        if (this.isHorizontal()) {
            this.getTimeAxisViewModel().fitToAvailableWidth(a)
        } else {
            var b = Math.floor((this.panel.getWidth() - Ext.getScrollbarSize().width - 1) / this.headerCt.getColumnCount());
            this.setColumnWidth(b, a)
        }
    },
    getElementsFromEventRecord: function(b, a, c, d) {
        return this[this.mode].getElementsFromEventRecord(b, a, c, d)
    },
    getStartEndDatesFromRegion: function(b, a) {
        return this[this.mode].getStartEndDatesFromRegion(b, a)
    },
    getTimeResolution: function() {
        return this.timeAxis.getResolution()
    },
    setTimeResolution: function(b, a) {
        this.timeAxis.setResolution(b, a);
        if (this.getTimeAxisViewModel().snapToIncrement) {
            this.refreshKeepingScroll()
        }
    },
    getEventIdFromDomNodeId: function(a) {
        return a.substring(this.eventPrefix.length).split('-')[0]
    },
    getResourceIdFromDomNodeId: function(a) {
        return a.substring(this.eventPrefix.length).split('-')[1]
    },
    getDateFromDomEvent: function(b, a) {
        return this.getDateFromXY(b.getXY(), a)
    },
    getSnapPixelAmount: function() {
        return this.getTimeAxisViewModel().getSnapPixelAmount()
    },
    setSnapEnabled: function(a) {
        this.getTimeAxisViewModel().setSnapToIncrement(a)
    },
    setReadOnly: function(a) {
        this.readOnly = a;
        this[a ? 'addCls' : 'removeCls'](this._cmpCls + '-readonly')
    },
    isReadOnly: function() {
        return this.readOnly
    },
    setMode: function(a) {
        this.mode = a;
        this.timeAxisViewModel.mode = a
    },
    getMode: function() {
        return this.mode
    },
    isHorizontal: function() {
        return this.getMode() === 'horizontal'
    },
    isVertical: function() {
        return this.getMode() === 'vertical'
    },
    isWeekView: function() {
        return this.getMode() === 'weekview'
    },
    getDateFromXY: function(c, a, b) {
        return this[this.mode].getDateFromXY(c, a, b)
    },
    getDateFromCoordinate: function(a, b, c) {
        if (!c) {
            a = this[this.mode].translateToScheduleCoordinate(a)
        }
        return this.timeAxisViewModel.getDateFromPosition(a, b)
    },
    getDateFromX: function(b, a) {
        return this.getDateFromCoordinate(b, a)
    },
    getDateFromY: function(b, a) {
        return this.getDateFromCoordinate(b, a)
    },
    getCoordinateFromDate: function(c, b) {
        var a = this.timeAxisViewModel.getPositionFromDate(c);
        if (b === !1) {
            a = this[this.mode].translateToPageCoordinate(a)
        }
        return a
    },
    getTimeSpanDistance: function(a, b) {
        return this.timeAxisViewModel.getDistanceBetweenDates(a, b)
    },
    getTimeSpanRegion: function(a, b) {
        return this[this.mode].getTimeSpanRegion(a, b)
    },
    getScheduleRegion: function(a, b) {
        return this[this.mode].getScheduleRegion(a, b)
    },
    getTableRegion: function() {
        throw 'Abstract method call'
    },
    getRowNode: function(a) {
        throw 'Abstract method call'
    },
    getRecordForRowNode: function(a) {
        throw 'Abstract method call'
    },
    getVisibleDateRange: function() {
        return this[this.mode].getVisibleDateRange()
    },
    setColumnWidth: function(b, a) {
        this[this.mode].setColumnWidth(b, a)
    },
    findRowByChild: function(a) {
        throw 'Abstract method call'
    },
    setBarMargin: function(b, a) {
        this.barMargin = b;
        if (!a) {
            this.refreshKeepingScroll()
        }
    },
    getRowHeight: function() {
        return this.timeAxisViewModel.getViewRowHeight()
    },
    setRowHeight: function(b, a) {
        this.timeAxisViewModel.setViewRowHeight(b, a)
    },
    refreshKeepingScroll: function() {
        throw 'Abstract method call'
    },
    scrollVerticallyTo: function(b, a) {
        throw 'Abstract method call'
    },
    scrollHorizontallyTo: function(b, a) {
        throw 'Abstract method call'
    },
    getVerticalScroll: function() {
        throw 'Abstract method call'
    },
    getHorizontalScroll: function() {
        throw 'Abstract method call'
    },
    getEl: Ext.emptyFn,
    getScroll: function() {
        throw 'Abstract method call'
    },
    getOuterEl: function() {
        return this.getEl()
    },
    getRowContainerEl: function() {
        return this.getEl()
    },
    getScheduleCell: function(b, a) {
        return this.getCellByPosition({
            row: b,
            column: a
        })
    },
    getScrollEventSource: function() {
        return this.getEl()
    },
    getViewportHeight: function() {
        return this.getEl().getHeight()
    },
    getViewportWidth: function() {
        return this.getEl().getWidth()
    },
    getViewportCenterDate: function() {
        var b = this.getScroll(),
            a;
        if (this.isVertical()) {
            a = [0, b.top + this.getViewportHeight() / 2]
        } else {
            a = [b.left + this.getViewportWidth() / 2, 0]
        }
        return this.getDateFromXY(a, null, !0)
    },
    getDateConstraints: Ext.emptyFn,
    getItemBox: function(a) {
        return this[this.mode].getItemBox(a)
    },
    getConnectorStartSide: function(a) {
        return this[this.mode].getConnectorStartSide(a)
    },
    getConnectorEndSide: function(a) {
        return this[this.mode].getConnectorEndSide(a)
    },
    getViewStartDate: function() {
        return this.timeAxis.getStart()
    },
    getViewEndDate: function() {
        return this.timeAxis.getEnd()
    }
}, 0, 0, 0, 0, 0, 0, [Sch.mixin, 'AbstractTimelineView'], 0);
Ext.apply(Sch, {
    VERSION: '5.1.14'
});
Ext.cmd.derive('Sch.mixin.FilterableTreeView', Ext.Base, {
    prevBlockRefresh: null,
    initTreeFiltering: function() {
        var a = function() {
            var a = this.store;
            this.mon(a, 'nodestore-datachange-start', this.onFilterChangeStart, this);
            this.mon(a, 'nodestore-datachange-end', this.onFilterChangeEnd, this);
            if (!a.allowExpandCollapseWhileFiltered) {
                this.mon(a, 'filter-clear', this.onFilterCleared, this);
                this.mon(a, 'filter-set', this.onFilterSet, this)
            }
        };
        if (this.rendered) {
            a.call(this)
        } else {
            this.on('beforerender', a, this, {
                single: !0
            })
        }
    },
    onFilterChangeStart: function() {
        this.prevBlockRefresh = this.blockRefresh;
        this.blockRefresh = !0;
        Ext.suspendLayouts()
    },
    onFilterChangeEnd: function() {
        Ext.resumeLayouts(!0);
        this.blockRefresh = this.prevBlockRefresh
    },
    onFilterCleared: function() {
        delete this.toggle;
        var a = this.getEl();
        if (a) {
            a.removeCls('sch-tree-filtered')
        }
    },
    onFilterSet: function() {
        this.toggle = function() {};
        var a = this.getEl();
        if (a) {
            a.addCls('sch-tree-filtered')
        }
    }
}, 0, 0, 0, 0, 0, 0, [Sch.mixin, 'FilterableTreeView'], 0);
Ext.cmd.derive('Sch.mixin.GridViewCanvas', Ext.Mixin, {
    mixinConfig: {
        after: {
            'onRender': 'afterOnRender'
        }
    },
    secondaryCanvasCls: 'sch-secondary-canvas',
    secondaryCanvasLayerCls: 'sch-secondary-canvas-layer',
    itemsCanvasEl: null,
    itemsCanvasCls: 'sch-item-canvas',
    itemsCanvasLayerCls: 'sch-item-canvas-layer',
    getSecondaryCanvasEl: function() {
        var a = null;
        if (this.isItemCanvasAvailable()) {
            a = this.getItemCanvasEl(-1, {
                tag: 'div',
                role: 'presentation',
                cls: this.secondaryCanvasCls
            })
        }
        return a
    },
    isItemCanvasAvailable: function(b) {
        var a = this;
        return !!(a.rendered && !a.destroyed && (a.getNodeContainer() || a.itemsCanvasEl && (a.itemsCanvasEl._underMixinControl || !Ext.isGarbage(a.itemsCanvasEl.dom))))
    },
    isItemCanvasPresent: function(b) {
        var a = this;
        return !!(a.rendered && !a.destroyed && a.itemsCanvasEl && (b === undefined || a.itemsCanvasEl[b] && (a.itemsCanvasEl._underMixinControl || !Ext.isGarbage(a.itemsCanvasEl[b].dom))))
    },
    getItemCanvasEl: function(c, e) {
        var d = this,
            a = d.itemsCanvasEl,
            b = a;
        if (!a || !a.dom || !a._underMixinControl && Ext.isGarbage(a.dom)) {
            b = a = d.itemsCanvasEl = Ext.fly(d.getNodeContainer()).insertFirst({
                cls: d.itemsCanvasCls
            })
        }
        if (arguments.length > 0) {
            c = c || 0;
            b = a[c] || Ext.dom.Query.selectNode('[data-sch-secondary-canvas-layer="' + c + '"]', a.dom);
            if (!b || !b.dom || !a._underMixinControl && Ext.isGarbage(b.dom)) {
                b = a.createChild((Ext.isFunction(e) ? e() : e) || {
                    tag: 'div'
                });
                b.set({
                    'data-sch-secondary-canvas-layer': c
                });
                b.setStyle('zIndex', c);
                b.addCls(d.itemsCanvasLayerCls);
                a[c] = b
            }
        }
        return b
    },
    afterOnRender: function() {
        if (this.bufferedRenderer) {
            this.on('viewready', this.onBufferedRendererViewReady, this)
        }
    },
    onBufferedRendererViewReady: function() {
        var a = this,
            b = Ext.getVersion().isGreaterThan('6.5.3') ? this.grid.up('tablepanel').lockedGrid.bufferedRenderer : a.bufferedRenderer,
            c = b.onRangeFetched;
        b.onRangeFetched = function() {
            var b = a.getItemCanvasEl(),
                d = a.getNodeContainer(),
                e;
            b._underMixinControl = !0;
            b.dom.parentNode && b.dom.parentNode.removeChild(b.dom);
            e = c.apply(this, arguments);
            d.insertBefore(b.dom, d.firstChild);
            delete b._underMixinControl;
            return e
        }
    }
}, 0, 0, 0, 0, 0, 0, [Sch.mixin, 'GridViewCanvas'], 0);
Ext.cmd.derive('Sch.mixin.PartnerTimelinePanel', Ext.Mixin, {
    setupPartnerTimelinePanel: function(e) {
        var b = this.partnerTimelinePanel;
        var c = b.lockedGrid;
        var a = this.lockedGrid;
        c.mon(a, 'resize', this.onLockedGridResize, c);
        a.mon(c, 'resize', this.onLockedGridResize, a);
        var d = b.isVisible() ? b.lockedGrid.getWidth() : b.lockedGrid.width;
        if (c.getCollapsed()) {
            this.mon(c, 'viewready', function(b) {
                a.setWidth(b.getWidth())
            })
        } else {
            a.setWidth(d)
        }
        this.on('afterlayout', function() {
            if (c.getCollapsed()) {
                a.collapse()
            } else {
                a.expand();
                a.setWidth(d)
            }
        }, this, {
            single: !0
        });
        c.on({
            collapse: this.onPartnerCollapseExpand,
            expand: this.onPartnerCollapseExpand,
            scope: this
        });
        a.on({
            collapse: this.onPartnerCollapseExpand,
            expand: this.onPartnerCollapseExpand,
            scope: b
        });
        this.setupScrollSync();
        b.mon(this, 'beforezoomchange', this.onBeforeZoomChange, this);
        b.mon(this, 'viewchange', this.onViewChange, this);
        this.mon(b, 'beforezoomchange', this.onBeforeZoomChange, this);
        this.mon(b, 'viewchange', this.onViewChange, this)
    },
    onLockedGridResize: function(b, a) {
        this.setWidth(a)
    },
    onPartnerCollapseExpand: function(a) {
        if (a.getCollapsed()) {
            this.lockedGrid.collapse()
        } else {
            this.lockedGrid.expand()
        }
    },
    setupScrollSync: function() {
        var e = this.partnerTimelinePanel.getSchedulingView(),
            b = this.partnerTimelinePanel.getMode() === 'horizontal' ? e.getScrollable() : this.partnerTimelinePanel.getScrollable(),
            d = this.getSchedulingView(),
            a = this.getMode() === 'horizontal' ? d.getScrollable() : this.getScrollable(),
            c;

        function onSyncScrollStart(e) {
            var d = e === a ? a : b,
                f = e === a ? b : a;
            if (!c) {
                d.component.mun(f, 'scrollstart', onSyncScrollStart);
                f.component.mun(d, 'scrollstart', onSyncScrollStart);
                d.component.mon(d, 'scroll', doScrollSync);
                d.component.mon(d, 'scrollend', onSyncScrollEnd)
            }
        }

        function doScrollSync(h, g, i) {
            var j = h === a ? a : b,
                e = h === a ? b : a;
            var f = e.component.headerCt.getScrollable();
            c = Ext.asap(function() {
                var b, a;
                a = e.getPosition();
                if (a && d.getMode() === 'horizontal') {
                    b = Math.abs(a.x - g);
                    if (b) {
                        f && !f.destroyed && f.scrollTo(g, null);
                        !e.destroyed && e.scrollTo(g);
                        c = !1
                    } else {
                        c = !1
                    }
                } else {
                    if (a) {
                        b = Math.abs(a.y != i);
                        if (b) {
                            !e.destroyed && e.scrollTo(null, i)
                        }
                        c = !1
                    }
                }
            })
        }

        function onSyncScrollEnd(d) {
            var c = d === a ? a : b,
                e = d === a ? b : a;
            c.component.mun(c, 'scroll', doScrollSync);
            c.component.mun(c, 'scrollend', onSyncScrollEnd);
            c.component.mon(e, 'scrollstart', onSyncScrollStart);
            e.component.mon(c, 'scrollstart', onSyncScrollStart)
        }

        function startScrollMonitoring() {
            b.component.mon(a, 'scrollstart', onSyncScrollStart);
            a.component.mon(b, 'scrollstart', onSyncScrollStart)
        }

        function stopScrollMonitoring() {
            b.component.mun(a, 'scrollstart', onSyncScrollStart);
            a.component.mun(b, 'scrollstart', onSyncScrollStart)
        }
        this.partnerTimelinePanel.mon(this, {
            'show': function() {
                doScrollSync(b, b.getPosition().x, b.getPosition().y)
            }
        });
        this.mon(this.partnerTimelinePanel, {
            'show': function() {
                doScrollSync(a, a.getPosition().x, a.getPosition().y)
            }
        });
        startScrollMonitoring()
    },
    onViewChange: function(a) {
        if (a === this) {
            this.partnerTimelinePanel.viewPreset = this.viewPreset = this.timeAxisViewModel.viewPreset
        }
    },
    onBeforeZoomChange: function() {
        var b = this.partnerTimelinePanel;
        var a = b.getSchedulingView().getScrollable(),
            c = a.suspendPartnerSync;
        a.suspendPartnerSync = Ext.emptyFn;
        a.on('scrollend', function() {
            a.suspendPartnerSync = c
        }, null, {
            single: !0
        })
    }
}, 0, 0, 0, 0, 0, 0, [Sch.mixin, 'PartnerTimelinePanel'], 0);
Ext.cmd.derive('Sch.patches.NavigationModel6_0_2', Sch.util.Patch, {
    target: 'Ext.grid.NavigationModel',
    minVersion: '6.0.2',
    maxVersion: '6.6.0',
    applyFn: function() {
        var a = Ext.getVersion().isLessThan('6.5.1') ? 'scrollIntoView' : 'ensureVisible';
        Ext.ClassManager.get(this.target).override({
            focusPosition: function(b) {
                var f = this;
                if (b && b.record && b.column && b.view && b.view._initializeTimelineView) {
                    var c = b.view.getScrollable();
                    if (c && c.scrollIntoView) {
                        var e = c[a];
                        c[a] = Ext.emptyFn;
                        var d = this.callParent(arguments);
                        c[a] = e;
                        return d
                    }
                }
                return this.callParent(arguments)
            }
        })
    }
}, 0, 0, 0, 0, 0, 0, [Sch.patches, 'NavigationModel6_0_2'], 0);
Ext.cmd.derive('Sch.patches.TouchScroll', Sch.util.Patch, {
    target: 'Ext.scroll.TouchScroller',
    minVersion: '5.1.0',
    maxVersion: '6.2.0',
    overrides: {
        privates: {
            onEvent: function(b) {
                var a = this;
                if (!a[a.listenerMap[b.type]]) {
                    return
                }
                return this.callParent(arguments)
            }
        }
    }
}, 0, 0, 0, 0, 0, 0, [Sch.patches, 'TouchScroll'], 0);
Ext.cmd.derive('Sch.patches.View', Sch.util.Patch, {
    target: 'Ext.view.View',
    minVersion: '5.1.0',
    overrides: {
        handleEvent: function(a) {
            var b = this,
                c = b.keyEventRe.test(a.type),
                e = b.getNavigationModel();
            a.view = b;
            if (c) {
                a.item = a.getTarget(b.itemSelector);
                a.record = e.getRecord(a.item)
            }
            if (!a.item) {
                var d = b.editingPlugin && b.editingPlugin.getActiveEditor && b.editingPlugin.getActiveEditor();
                if (!(d && d.getEl().contains(a.getTarget()))) {
                    a.item = a.getTarget(b.itemSelector)
                }
            }
            if (a.item && !a.record) {
                a.record = b.getRecord(a.item)
            }
            if (b.processUIEvent(a) !== !1) {
                b.processSpecialEvent(a)
            }
            if (c && !Ext.fly(a.target).isInputField()) {
                if (a.getKey() === a.SPACE || a.isNavKeyPress(!0)) {
                    a.preventDefault()
                }
            }
            a.view = null
        }
    }
}, 0, 0, 0, 0, 0, 0, [Sch.patches, 'View'], 0);
Ext.cmd.derive('Sch.patches.Scroller', Sch.util.Patch, {
    target: 'Ext.scroll.Scroller',
    minVersion: '6.0.2',
    maxVersion: '6.0.3',
    applyFn: function() {
        var a = {
            destroy: function() {
                clearTimeout(this.restoringTimer);
                this.callParent(arguments)
            },
            privates: {
                restoreState: function() {
                    var a = this,
                        c = a.getScrollElement(),
                        b;
                    if (c) {
                        b = c.dom;
                        if (a.trackingScrollTop !== undefined) {
                            a.restoring = !0;
                            a.restoringTimer = Ext.defer(function() {
                                a.restoring = !1
                            }, 50);
                            b.scrollTop = a.trackingScrollTop;
                            b.scrollLeft = a.trackingScrollLeft
                        }
                    }
                }
            }
        };
        if (Ext.isIE9m) {
            a.privates.updateSpacerXY = function(a) {
                var b = this.getSpacer();
                if (this.getRtl && this.getRtl()) {
                    b.rtlSetLocalXY(a.x, a.y)
                } else {
                    b.setLocalXY(a.x, a.y)
                }
            }
        }
        Ext.ClassManager.get(this.target).override(a)
    }
}, 0, 0, 0, 0, 0, 0, [Sch.patches, 'Scroller'], 0);
Ext.cmd.derive('Sch.patches.Scroller_6_5', Sch.util.Patch, {
    target: 'Ext.scroll.Scroller',
    minVersion: '6.5.0',
    maxVersion: '6.5.1.9999',
    overrides: {
        privates: {
            updateDomScrollPosition: function(g) {
                var a = this,
                    b = a.position,
                    h = b.x,
                    i = b.y,
                    c, d, e, f;
                a.readPosition(b);
                c = b.x;
                d = b.y;
                a.positionDirty = !1;
                if (!g) {
                    e = c - h;
                    f = d - i;
                    if (!a.isScrolling) {
                        a.isScrolling = Ext.isScrolling = !0;
                        a.fireScrollStart(c, d, e, f)
                    }
                    a.fireScroll(c, d, e, f);
                    a.bufferedOnDomScrollEnd(c, d, e, f)
                }
                return b
            }
        },
        getPosition: function() {
            var a = this;
            if (a.positionDirty) {
                a.updateDomScrollPosition(!0)
            }
            return a.position
        }
    }
}, 0, 0, 0, 0, 0, 0, [Sch.patches, 'Scroller_6_5'], 0);
Ext.cmd.derive('Sch.patches.Queue', Sch.util.Patch, {
    target: 'Ext.util.Queue',
    minVersion: '6.0.2',
    maxVersion: '6.0.3',
    overrides: {
        add: function(b, e) {
            var a = this,
                c = a.getKey(b),
                d;
            if (!(d = a.map[c])) {
                ++a.length;
                a.items.push(b);
                a.map[c] = b
            } else {
                if (e) {
                    a.map[c] = b;
                    a.items[Ext.Array.indexOf(a.items, d)] = b
                }
            }
            return b
        }
    }
}, 0, 0, 0, 0, 0, 0, [Sch.patches, 'Queue'], 0);
Ext.cmd.derive('Sch.patches.LayoutContext', Sch.util.Patch, {
    target: 'Ext.layout.Context',
    minVersion: '6.0.2',
    maxVersion: '6.0.3',
    overrides: {
        queueFlush: function(b, a) {
            this.flushQueue.add(b, a)
        }
    }
}, 0, 0, 0, 0, 0, 0, [Sch.patches, 'LayoutContext'], 0);
Ext.cmd.derive('Sch.patches.LayoutContext_6_5', Sch.util.Patch, {
    target: 'Ext.layout.Context',
    minVersion: '6.5.0',
    maxVersion: '6.6.0',
    overrides: {
        callLayout: function(a, b) {
            this.currentLayout = a;
            if (!a.destroyed) {
                a[b](this.getCmp(a.owner))
            }
        }
    }
}, 0, 0, 0, 0, 0, 0, [Sch.patches, 'LayoutContext_6_5'], 0);
Ext.cmd.derive('Sch.patches.Lockable', Sch.util.Patch, {
    target: 'Ext.grid.locking.Lockable',
    minVersion: '6.0.2',
    maxVersion: '6.0.3',
    applyFn: function() {
        if (Ext.firefoxVersion > 51 && Ext.supports.touchScroll === 2) {
            Ext.supports.Touch = 0;
            Ext.supports.TouchEvents = 0;
            Ext.supports.touchScroll = 0
        }
    }
}, 0, 0, 0, 0, 0, 0, [Sch.patches, 'Lockable'], 0);
Ext.cmd.derive('Sch.patches.TableLayout', Sch.util.Patch, {
    target: 'Ext.view.TableLayout',
    minVersion: '6.0.2',
    maxVersion: '6.0.3',
    overrides: {
        calculate: function(a) {
            var b = this,
                s = a.context,
                d = a.lockingPartnerContext,
                t = a.headerContext,
                k = a.ownerCtContext,
                c = b.owner,
                j = t.getProp('columnsChanged'),
                e = a.state,
                l, o, f, i, r = c.body.dom,
                p, n, m, q, h, g;
            if (!c.all.getCount() && (!r || !c.body.child('table'))) {
                a.setProp('viewOverflowY', !1);
                b.callParent([a]);
                return
            }
            if (j === undefined) {
                b.done = !1;
                return
            }
            if (j) {
                if (!(l = e.columnFlusher)) {
                    s.queueFlush(e.columnFlusher = l = {
                        ownerContext: a,
                        columnsChanged: j,
                        layout: b,
                        id: b.columnFlusherId,
                        flush: b.flushColumnWidths
                    }, !0)
                }
                if (!l.flushed) {
                    b.done = !1;
                    return
                }
            }
            if (a.doSyncRowHeights) {
                if (!(i = e.rowHeightFlusher)) {
                    if (!(f = e.rowHeights)) {
                        e.rowHeights = f = a.rowHeightSynchronizer;
                        b.owner.syncRowHeightMeasure(f);
                        a.setProp('rowHeights', f)
                    }
                    if (!(o = d.getProp('rowHeights'))) {
                        b.done = !1;
                        return
                    }
                    s.queueFlush(e.rowHeightFlusher = i = {
                        ownerContext: a,
                        synchronizer: f,
                        otherSynchronizer: o,
                        layout: b,
                        id: b.rowHeightFlusherId,
                        flush: b.flushRowHeights
                    }, !0)
                }
                if (!i.flushed) {
                    b.done = !1;
                    return
                }
            }
            b.callParent([a]);
            if (!a.heightModel.shrinkWrap) {
                m = !1;
                if (!k.heightModel.shrinkWrap) {
                    n = k.target.layout.getContainerSize(k);
                    if (!n.gotHeight) {
                        b.done = !1;
                        return
                    }
                    p = r.offsetHeight;
                    m = p > n.height
                }
                a.setProp('viewOverflowY', m)
            }
            if (b.done && Ext.getScrollbarSize().height) {
                if (d && c.isLockedView) {
                    q = c.lockingPartner;
                    h = c.scrollFlags.x && a.headerContext.state.boxPlan.tooNarrow;
                    g = q.scrollFlags.x && d.headerContext.state.boxPlan.tooNarrow;
                    if (h !== g) {
                        if (g) {
                            d.setProp('overflowX', !0);
                            a.setProp('overflowX', 'scroll')
                        } else {
                            a.setProp('overflowX', !0);
                            d.setProp('overflowX', 'scroll')
                        }
                    } else {
                        a.setProp('overflowX', g);
                        d.setProp('overflowX', h)
                    }
                    a.setProp('overflowY', 'scroll')
                } else {
                    if (!c.isAutoTree) {
                        a.setProp('overflowX', !!a.headerContext.state.boxPlan.tooNarrow)
                    }
                }
            }
        }
    }
}, 0, 0, 0, 0, 0, 0, [Sch.patches, 'TableLayout'], 0);
Ext.cmd.derive('Sch.patches.ColumnLayout', Sch.util.Patch, {
    target: 'Ext.grid.ColumnLayout',
    minVersion: '6.0.2',
    maxVersion: '6.0.3',
    overrides: {
        calculate: function(a) {
            var b = this,
                n = b.owner.grid,
                j = a.viewContext,
                g = a.state,
                p = a.context,
                c, h, m, d, k, o, f, e, l, i;
            b.callSuper([a]);
            if (n && g.parallelDone) {
                c = j.lockingPartnerContext;
                if (c) {
                    h = c.target.ownerCt;
                    if (!h.isVisible() || h.collapsed) {
                        c = null
                    }
                }
                m = n.ownerGrid;
                if (m.forceFit && !g.reflexed) {
                    if (b.convertWidthsToFlexes(a)) {
                        b.cacheFlexes(a);
                        b.done = !1;
                        a.invalidate({
                            state: {
                                reflexed: !0,
                                scrollbarAdjustment: b.getScrollbarAdjustment(a)
                            }
                        });
                        return
                    }
                }
                if ((d = g.columnsChanged) === undefined) {
                    k = a.target.getVisibleGridColumns();
                    d = !1;
                    for (f = 0, o = k.length; f < o; f++) {
                        e = p.getCmp(k[f]);
                        if (!e.lastBox || e.props.width !== e.lastBox.width) {
                            (d || (d = []))[f] = e
                        }
                    }
                    g.columnsChanged = d;
                    a.setProp('columnsChanged', d)
                }
                if (a.manageScrollbar) {
                    l = b.getScrollbarAdjustment(a);
                    if (l) {
                        i = j.getProp('viewOverflowY');
                        if (i === undefined) {
                            b.done = !1;
                            return
                        }
                        if (!i) {
                            if (c) {
                                c.invalidate();
                                c.headerContext.invalidate()
                            }
                            j.invalidate();
                            a.invalidate({
                                state: {
                                    scrollbarAdjustment: 0
                                }
                            })
                        }
                    }
                }
            }
        }
    }
}, 0, 0, 0, 0, 0, 0, [Sch.patches, 'ColumnLayout'], 0);
Ext.cmd.derive('Sch.patches.ToolTip', Sch.util.Patch, {
    target: 'Ext.tip.ToolTip',
    minVersion: '6.0.0',
    applyFn: function() {
        var a = {
            setTarget: function(c) {
                var a = this;
                if (a.target) {
                    var b = Ext.get(a.target);
                    if (b) {
                        a.mun(b, {
                            mouseover: a.onTargetOver,
                            tap: a.onTargetOver,
                            mouseout: a.onTargetOut,
                            mousemove: a.onMouseMove,
                            scope: a
                        })
                    }
                }
                a.target = Ext.get(c);
                if (a.target) {
                    a.mon(a.target, {
                        mouseover: a.onTargetOver,
                        tap: a.onTargetOver,
                        mouseout: a.onTargetOut,
                        mousemove: a.onMouseMove,
                        scope: a
                    })
                }
                if (a.anchor) {
                    a.anchorTarget = a.target
                }
            }
        };
        if (Ext.getVersion().isLessThan('6.0.2')) {
            a.afterSetPosition = function(b, c) {
                var a = this;
                a.callParent(arguments);
                if (a.anchor) {
                    if (!a.anchorEl.isVisible()) {
                        a.anchorEl.show()
                    }
                    a.syncAnchor()
                } else {
                    a.anchorEl.hide()
                }
            }
        }
        Ext.ClassManager.get(this.target).override(a)
    }
}, 0, 0, 0, 0, 0, 0, [Sch.patches, 'ToolTip'], 0);
Ext.cmd.derive('Sch.patches.AbstractView', Sch.util.Patch, {
    target: 'Ext.view.AbstractView',
    minVersion: '6.2.0',
    obsoleteTestName: 'patches/002_abstract_view.t.js',
    overrides: {
        setItemsDraggable: function(b) {
            var a = this,
                c;
            c = a.callParent([b]);
            if (!b && a.viewStyleSheet && a.viewStyleSheet.cssRules.length === 0) {
                a.viewStyleSheet.ownerNode.parentNode.removeChild(a.viewStyleSheet.ownerNode);
                a.viewStyleSheet = Ext.view.AbstractView.prototype.viewStyleSheet = null
            }
            return c
        }
    }
}, 0, 0, 0, 0, 0, 0, [Sch.patches, 'AbstractView'], 0);
Ext.cmd.derive('Sch.patches.TableScroller', Sch.util.Patch, {
    minVersion: '6.2.1',
    maxVersion: '6.5.0',
    target: 'Ext.scroll.TableScroller',
    overrides: {
        privates: {
            onDomScroll: function() {
                var a = this,
                    b = a.position,
                    g = b.x,
                    h = b.y,
                    c, d, e, f;
                b = a.updateDomScrollPosition();
                if (a.restoreTimer) {
                    clearTimeout(a.onDomScrollEnd.timer);
                    return
                }
                c = b.x;
                d = b.y;
                e = c - g;
                f = d - h;
                if (!a.isScrolling) {
                    a.isScrolling = Ext.isScrolling = !0;
                    a.fireScrollStart(c, d, e, f)
                }
                a.fireScroll(c, d, e, f);
                a.bufferedOnDomScrollEnd(c, d, e, f)
            },
            invokePartners: function(f, i, j, g, h) {
                var a = this,
                    b = a._partners,
                    c, e, d;
                if (!a.suspendSync) {
                    a.invokingPartners = !0;
                    for (e in b) {
                        d = b[e].axes;
                        c = b[e].scroller;
                        if (!c.invokingPartners) {
                            c[f](a, d.x ? i : null, d.y ? j : null, g, h)
                        }
                    }
                    a.invokingPartners = !1
                }
            }
        }
    }
}, 0, 0, 0, 0, 0, 0, [Sch.patches, 'TableScroller'], 0);
Ext.cmd.derive('Sch.patches.TableScroller2', Sch.util.Patch, {
    minVersion: '6.2.1',
    maxVersion: '6.2.2',
    target: 'Ext.scroll.TableScroller',
    overrides: {
        privates: {
            getScrollIntoViewXY: function(d, e) {
                var c = this.getLockingScroller(),
                    a = this.getPosition(),
                    b;
                if (c) {
                    a.y = c.position.y
                }
                b = Ext.fly(d).getScrollIntoViewXY(this.getElement(), a.x, a.y);
                b.x = e === !1 ? a.x : b.x;
                if (c) {
                    b.y = Ext.fly(d).getScrollIntoViewXY(c.getElement(), a.x, a.y).y
                }
                return b
            }
        }
    }
}, 0, 0, 0, 0, 0, 0, [Sch.patches, 'TableScroller2'], 0);
Ext.cmd.derive('Sch.patches.Ie9FormFieldText', Sch.util.Patch, {
    target: 'Ext.form.field.Text',
    ieOnly: !0,
    minVersion: '6.0.0',
    reportUrl: null,
    obsoleteTestName: 'patches/003_ie9_form_field_text.t.js',
    description: ["Text field being a part of grid cell editor might find itself in a situation when it's detached", 'from the document and requested to select text inside itself, by being focused for example, simultaneously'].join(' '),
    applyFn: function() {
        Ext.isIE9 && Ext.ClassManager.get(this.target).override({
            selectTextAsapId: null,
            selectText: function(b, c) {
                var a = this;
                if (!a.destroying && !a.destroyed && a.inputEl) {
                    try {
                        Ext.asapCancel(a.selectTextAsapId), a.selectTextAsapId = null;
                        a.callParent([b, c])
                    } catch (d) {
                        a.selectTextAsapId = Ext.asap(a.selectText, a, [b, c])
                    }
                }
            }
        })
    }
}, 0, 0, 0, 0, 0, 0, [Sch.patches, 'Ie9FormFieldText'], 0);
Ext.cmd.derive('Sch.tooltip.EventTip', Ext.tip.ToolTip, {
    config: {
        view: null
    },
    componentCls: 'sch-tooltip-eventtip',
    anchor: 't',
    constraintInsets: '7 -7 -7 7',
    allowOver: !0,
    initComponent: function() {
        var a = this;
        Ext.tip.ToolTip.prototype.initComponent.apply(this, arguments);
        a.on('beforeshow', a.onTipBeforeShow, a)
    },
    getAlignRegion: function() {
        var a = this,
            f = a.anchorEl,
            g = a.getAnchorAlign(),
            i, h, c, e = a.mouseOffset,
            d, b;
        if (!a.anchorSize) {
            f.addCls('x-tip-anchor-top');
            f.show();
            a.anchorSize = new Ext.util.Offset(f.getWidth(), f.getHeight());
            f.removeCls('x-tip-anchor-top');
            f.hide()
        }
        if ((a.anchor || a.align) && a.anchorToTarget && !a.trackMouse) {
            c = a.currentTarget.getRegion();
            if (!Ext.isGarbage(a.currentTarget.dom) && a.getView().getMode() === 'horizontal' && a.pointerEvent) {
                c = c.intersect(new Ext.util.Region(c.top, a.pointerEvent.getPoint().x + a.getRegion().width / 2, c.bottom, a.pointerEvent.getPoint().x + -a.getRegion().width / 2)) || c
            }
        } else {
            c = a.pointerEvent ? a.pointerEvent.getPoint().adjust(-Math.abs(e[1]), Math.abs(e[0]), Math.abs(e[1]), -Math.abs(e[0])) : new Ext.util.Point();
            if (!a.anchor) {
                i = !0;
                if (e[0] > 0) {
                    if (e[1] > 0) {
                        g = 'tl-br'
                    } else {
                        g = 'bl-tr'
                    }
                } else {
                    if (e[1] > 0) {
                        g = 'tr-bl'
                    } else {
                        g = 'br-tl'
                    }
                }
            }
        }
        h = {
            align: a.convertPositionSpec(g),
            axisLock: a.axisLock,
            target: c,
            overlap: i,
            offset: a.targetOffset
        };
        if (a.anchor) {
            h.anchorSize = a.anchorSize
        }
        if (a.constrainPosition) {
            d = a.constrainTo || Ext.getBody();
            if (!d.isRegion) {
                d = Ext.util.Region.getRegion(d)
            }
            if (a.constraintInsets) {
                b = a.constraintInsets;
                if (!Ext.isObject(b)) {
                    b = Ext.util.Format.parseBox(b)
                }
                d = d.copy().adjust(b.top, b.right, b.bottom, b.left)
            }
            h.inside = d
        }
        return a.getRegion().alignTo(h)
    },
    onTipBeforeShow: function(b) {
        if (!b.triggerElement || !b.triggerElement.id) {
            return !1
        }
        var a = b.getView();
        var f = Ext.all('window[modal=true]{isVisible()}');
        var g = Ext.Array.findBy(f, function(c) {
            return a !== c && !a.isDescendantOf(c)
        });
        if (g) {
            return !1
        }
        var d = a.resolveEventRecord(b.triggerElement);
        if (!d || a.fireEvent('beforetooltipshow', a, d) === !1) {
            return !1
        }
        var e = a.getDataForTooltipTpl(d, b.triggerElement),
            c;
        if (!e) {
            return !1
        }
        c = a.tooltipTpl.apply(e);
        if (!c) {
            return !1
        }
        b.update(c)
    },
    onTargetOut: function(a) {
        if (this.rendered && this.allowOver && this.el.contains(a.relatedTarget)) {
            return
        }
        return Ext.tip.ToolTip.prototype.onTargetOut.apply(this, arguments)
    }
}, 0, ['scheduler_eventtip'], ['component', 'box', 'container', 'panel', 'tip', 'tooltip', 'scheduler_eventtip'], {
    'component': !0,
    'box': !0,
    'container': !0,
    'panel': !0,
    'tip': !0,
    'tooltip': !0,
    'scheduler_eventtip': !0
}, ['widget.scheduler_eventtip'], 0, [Sch.tooltip, 'EventTip'], function(b) {
    var a = 't';

    function toConstrainRegion(a) {
        var c = Ext.util.Region;
        if (a && !a.isRegion && a.isComponent) {
            a = a.getConstrainRegion()
        } else {
            if (a && !a.isRegion && a.isElement) {
                a = a.getConstrainRegion()
            } else {
                if (a && !a.isRegion && Ext.isElement(a)) {
                    a = c.getRegion(a)
                } else {
                    if (a && !a.isRegion) {
                        a = c.from(a)
                    }
                }
            }
        }
        return a
    }

    function toPoint(a) {
        var c = Ext.util.Point;
        if (a && !a.isPoint && Ext.isArray(a)) {
            a = new c(a[0] || 0, a[1] || 0)
        } else {
            if (a && !a.isPoint) {
                a = c.from(a)
            }
        }
        return a
    }

    function canContain(c, a) {
        return c.right - c.left >= a.right - a.left && c.bottom - c.top >= a.bottom - a.top
    }
    Ext.versions.extjs.isLessThan('6.2.0') && Ext.override(b, {
        show: function() {
            var a = this,
                c = a.getView();
            a.callParent(arguments);
            if (a.triggerElement && c.getMode() === 'horizontal') {
                a.alignTipToEvent(a.triggerElement, a.constrainPosition && a.constrainTo, a.targetXY)
            }
        },
        alignTipToEvent: function(y, x, d) {
            var j = Ext.util.Region,
                A = Ext.util.Point,
                q = Ext.Number.constrain,
                c = this,
                z = window.tipAnchor || c.origAnchor || a,
                r = c.rtl,
                g, f, o, k, i, e, w, s, p, h, l, u, t, v, n, m;
            i = toConstrainRegion(x || Ext.getBody());
            k = i.intersect(toConstrainRegion(y));
            if (k) {
                g = c.getWidth(), f = c.getHeight(), h = c.anchorEl && c.anchorEl.getSize() || {
                    width: 0,
                    height: 0
                };
                h.width /= 2;
                h.height /= 2;
                d = d && toPoint(d);
                if (!d || !k.contains(d)) {
                    d = new A((k.left + k.right) / 2, (k.top + k.bottom) / 2)
                }
                e = {
                    'top': new j(i.top, i.right, k.top, i.left),
                    'bottom': new j(k.bottom, i.right, i.bottom, i.left),
                    'left': new j(i.top, k.left, i.bottom, i.left),
                    'right': new j(i.top, i.right, i.bottom, k.right)
                };
                w = {
                    'top': new j(e.top.bottom - f - h.height, d.x + g / 2, e.top.bottom - h.height, d.x - g / 2),
                    'bottom': new j(e.bottom.top + h.height, d.x + g / 2, e.bottom.top + f + h.height, d.x - g / 2),
                    'left': new j(d.y - f / 2, e.left.right - h.width, d.y + f / 2, e.left.right - g - h.width),
                    'right': new j(d.y - f / 2, e.right.left + g + h.width, d.y - f / 2, e.right.left + h.width)
                };
                s = {
                    'top': new j(e.top.bottom - f - h.height, d.x + g / 2, e.top.bottom, d.x - g / 2),
                    'bottom': new j(e.bottom.top, d.x + g / 2, e.bottom.top + f + h.height, d.x - g / 2),
                    'left': new j(d.y - f / 2, e.left.right, d.y + f / 2, e.left.right - g - h.width),
                    'right': new j(d.y - f / 2, e.right.left + g + h.width, d.y - f / 2, e.right.left)
                };
                switch (z.charAt(0)) {
                    case 't':
                        p = ['top', 'bottom', r ? 'right' : 'left', r ? 'left' : 'right'];
                        break;
                    case 'r':
                        p = ['right', 'left', 'top', 'bottom'];
                        break;
                    case 'b':
                        p = ['bottom', 'top', r ? 'right' : 'left', r ? 'left' : 'right'];
                        break;
                    case 'l':
                        p = ['left', 'right', 'top', 'bottom'];
                        break;
                    default:
                }
                l = Ext.Array.findBy(p, function(a) {
                    var f = e[a],
                        c = s[a];
                    return canContain(f, c)
                });
                if (l) {
                    u = e[l];
                    t = s[l];
                    v = w[l];
                    if (u.contains(t)) {
                        o = 0;
                        m = [v.x, v.y]
                    } else {
                        n = c.getConstrainVector(t);
                        m = c.getXY();
                        m = [m[0] + n[0], m[1] + n[1]];
                        c.setXY(m);
                        n = c.getConstrainVector(u);
                        if (l == 'left' || l == 'right') {
                            o = -n[1]
                        } else {
                            if (l == 'top' || l == 'bottom') {
                                o = -n[0]
                            }
                        }
                        m = [m[0] + n[0], m[1] + n[1]]
                    }
                    switch (l) {
                        case 'top':
                            c.tipAnchor = 'bottom';
                            c.anchorOffset = q(g / 2 - 20 + o, 0, g - 40);
                            break;
                        case 'right':
                            c.tipAnchor = 'left';
                            c.anchorOffset = q(f / 2 - 12 + o, 0, f - 24);
                            break;
                        case 'bottom':
                            c.tipAnchor = 'top';
                            c.anchorOffset = q(g / 2 - 20 + o, 0, g - 40);
                            break;
                        case 'left':
                            c.tipAnchor = 'right';
                            c.anchorOffset = q(f / 2 - 12 + o, 0, f - 24);
                            break;
                    }
                    c.anchorEl.removeCls(Ext.Array.map(p, function(a) {
                        return 'x-tip-anchor-' + a
                    }));
                    c.anchorEl.addCls('x-tip-anchor-' + c.tipAnchor);
                    c.syncAnchor();
                    c.setXY(m)
                } else {}
            }
        }
    })
});
Ext.cmd.derive('Sch.mixin.TimelineView', Sch.mixin.AbstractTimelineView, {
    tip: null,
    overScheduledEventClass: 'sch-event-hover',
    ScheduleBarEvents: ['mousedown', 'mouseup', 'click', 'dblclick', 'longpress', 'contextmenu'],
    ResourceRowEvents: ['keydown', 'keyup'],
    preventOverCls: !1,
    hoveredEventNode: null,
    _initializeTimelineView: function() {
        Sch.mixin.AbstractTimelineView.prototype._initializeTimelineView.apply(this, arguments);
        this.on('destroy', this._onDestroy, this);
        this.on('afterrender', this._onAfterRender, this);
        this.setMode(this.mode);
        this.enableBubble('columnwidthchange');
        this.addCls('sch-timelineview');
        if (this.readOnly) {
            this.addCls(this._cmpCls + '-readonly')
        }
        this.addCls(this._cmpCls);
        if (this.eventAnimations) {
            this.addCls('sch-animations-enabled')
        }
    },
    handleScheduleBarEvent: function(a, b) {
        this.fireEvent(this.scheduledEventName + a.type, this, this.resolveEventRecord(b), a)
    },
    handleResourceRowEvent: function(a, b) {
        this.fireEvent(this.scheduledEventName + a.type, this, this.resolveEventRecordFromResourceRow(b), a)
    },
    _onDestroy: function() {
        if (this.tip) {
            this.tip.destroy()
        }
    },
    _onAfterRender: function() {
        if (this.overScheduledEventClass) {
            this.setMouseOverEnabled(!0)
        }
        if (this.tooltipTpl) {
            if (typeof this.tooltipTpl === 'string') {
                this.tooltipTpl = new Ext.XTemplate(this.tooltipTpl)
            }
            this.el.on('mousemove', this.setupTooltip, this, {
                single: !0
            })
        }
        var c = this.bufferedRenderer;
        if (c) {
            this.patchBufferedRenderingPlugin(c);
            this.patchBufferedRenderingPlugin(this.lockingPartner.bufferedRenderer)
        }
        this.setupTimeCellEvents();
        var b = {
            delegate: this.eventSelector,
            scope: this
        };
        var a = {
            delegate: this.rowSelector,
            scope: this
        };
        Ext.Array.each(this.ScheduleBarEvents, function(a) {
            b[a] = this.handleScheduleBarEvent
        }, this);
        Ext.Array.each(this.ResourceRowEvents, function(b) {
            a[b] = this.handleResourceRowEvent
        }, this);
        this.el.on(b);
        this.el.on(a)
    },
    patchBufferedRenderingPlugin: function(b) {
        var c = this;
        var a = b.setBodyTop;
        if (typeof a !== 'function') {
            throw new Error('oldSetBodyTop method missing')
        }
        b.setBodyTop = function(f, e) {
            var d = a.apply(this, arguments);
            c.fireEvent('bufferedrefresh', this);
            return d
        }
    },
    setMouseOverEnabled: function(a) {
        this[a ? 'mon' : 'mun'](this.el, {
            mouseover: this.onEventMouseOver,
            mouseout: this.onEventMouseOut,
            delegate: this.eventSelector,
            scope: this
        });
        if (!a) {
            this.getEl().select('.' + this.overScheduledEventClass).removeCls(this.overScheduledEventClass)
        }
    },
    onEventMouseOver: function(c, a) {
        if (a !== this.hoveredEventNode && !this.preventOverCls) {
            this.hoveredEventNode = a;
            Ext.fly(a).addCls(this.overScheduledEventClass);
            var b = this.resolveEventRecord(a);
            if (b) {
                this.fireEvent('eventmouseenter', this, b, c)
            }
        }
    },
    onEventMouseOut: function(a, b) {
        if (this.hoveredEventNode) {
            if (!a.within(this.hoveredEventNode, !0, !0)) {
                Ext.fly(this.hoveredEventNode).removeCls(this.overScheduledEventClass);
                this.fireEvent('eventmouseleave', this, this.resolveEventRecord(this.hoveredEventNode), a);
                this.hoveredEventNode = null
            }
        }
    },
    highlightItem: function(a) {
        if (a) {
            var b = this;
            b.clearHighlight();
            b.highlightedItem = a;
            Ext.fly(a).addCls(b.overItemCls)
        }
    },
    setupTooltip: function() {
        var a = this,
            b = a.getEl();
        a.tip = new Sch.tooltip.EventTip(Ext.apply({
            view: a,
            delegate: a.eventSelector,
            target: b,
            dismissDelay: 0,
            constrainTo: a.grid.getEl(),
            rtl: a.rtl
        }, a.tipCfg));
        if (Ext.supports.Touch) {
            a.el.un({
                touchmove: a.setupTooltip,
                mousemove: a.setupTooltip,
                scope: a
            })
        }
    },
    getHorizontalTimeAxisColumn: function() {
        if (!this.timeAxisColumn) {
            this.timeAxisColumn = this.headerCt.down('timeaxiscolumn');
            if (this.timeAxisColumn) {
                this.timeAxisColumn.on('destroy', function() {
                    this.timeAxisColumn = null
                }, this)
            }
        }
        return this.timeAxisColumn
    },
    getDataForTooltipTpl: function(a, b) {
        return Ext.apply({
            _record: a
        }, a.data)
    },
    refreshKeepingScroll: function() {
        Ext.suspendLayouts();
        this.blockRestoringInfiniteScrollDate();
        this.refreshView();
        Ext.resumeLayouts(!0);
        this.resumeRestoringInfiniteScrollDate()
    },
    setupTimeCellEvents: function() {
        this.mon(this.el, {
            click: this.handleScheduleEvent,
            dblclick: this.handleScheduleEvent,
            contextmenu: this.handleScheduleEvent,
            longpress: this.handleScheduleEvent,
            pinch: this.handleScheduleEvent,
            pinchstart: this.handleScheduleEvent,
            pinchend: this.handleScheduleEvent,
            scope: this
        })
    },
    getTableRegion: function() {
        var a = this.el.down('.x-grid-item-container');
        return (a || this.el).getRegion()
    },
    getRowNode: function(a) {
        return this.getNodeByRecord(a)
    },
    findRowByChild: function(a) {
        return this.findItemByChild(a)
    },
    getRecordForRowNode: function(a) {
        return this.getRecord(a)
    },
    refreshKeepingResourceScroll: function() {
        var a = this.getScroll();
        this.refreshView();
        if (this.isHorizontal()) {
            this.scrollVerticallyTo(a.top)
        } else {
            this.scrollHorizontallyTo(a.left)
        }
    },
    scrollHorizontallyTo: function(b, a) {
        if (this.rendered) {
            this.scrollTo(b, null, a)
        }
    },
    scrollVerticallyTo: function(b, a) {
        if (this.rendered) {
            this.scrollTo(null, b, a)
        }
    },
    getVerticalScroll: function() {
        return this.getScrollY()
    },
    getHorizontalScroll: function() {
        return this.getScrollX()
    },
    getScroll: function() {
        var a = this;
        return {
            top: a.getVerticalScroll(),
            left: a.getHorizontalScroll()
        }
    },
    handleScheduleEvent: function() {},
    disableViewScroller: function(a) {
        var b = this.getScrollable();
        if (b) {
            if (b.setDisabled) {
                b.setDisabled(a)
            } else {
                var c = this.up('timelinetree,timelinegrid').getScrollable();
                b.setConfig({
                    x: !a,
                    y: !a
                });
                c.setConfig({
                    x: !a,
                    y: !a
                })
            }
        }
    },
    shouldAdjustForRtl: function() {
        return this.rtl && !Ext.rootInheritedState.rtl
    },
    getHorizontalPositionSide: function() {
        return this.rtl ? 'right' : 'left'
    },
    getViewContainerElementTop: function() {
        var a;
        if (Ext.versions.extjs.isGreaterThan('6.2.0')) {
            a = this.up('timelinegrid,timelinetree').getView().el
        } else {
            a = this.getEl()
        }
        return a.getY()
    },
    getViewContainerHeight: function() {
        if (Ext.versions.extjs.isGreaterThan('6.2.0')) {
            return this.up('timelinegrid,timelinetree').getView().el.getHeight()
        }
        return this.getHeight()
    },
    getScrollableMaxPosition: function() {
        return {
            x: this.getScrollable().getMaxPosition().x,
            y: this.getVerticalScrollableMaxHeight()
        }
    },
    getVerticalScrollableMaxHeight: function() {
        var a;
        if (Ext.getVersion().isGreaterThan('6.2.0')) {
            a = this.up('timelinegrid,timelinetree').getScrollable()
        } else {
            a = this.getScrollable()
        }
        return a.getMaxPosition().y
    },
    getScrollableContainerRegion: function() {
        var a = this.getEl().getRegion();
        if (Ext.versions.extjs.isGreaterThan('6.2.0')) {
            a.top = this.up('timelinegrid, timelinetree').getScrollable().getElement().getY()
        }
        return new Ext.util.Region(a.top, a.right, a.top + this.getViewContainerHeight(), a.left)
    },
    scrollHorizontallyBy: function(b, a) {
        this.scrollBy(b, null, a)
    },
    scrollVerticallyBy: function(c, b) {
        var a;
        if (Ext.versions.extjs.isGreaterThan('6.2.0')) {
            a = this.up('timelinegrid, timelinetree').getScrollable()
        } else {
            a = this.getScrollable()
        }
        a.scrollBy(0, c, b)
    },
    scrollElementIntoView: function(c, p, o, n, k, b, j) {
        var a = this,
            q = c.dom,
            i = a.getScroll(),
            d = i.left,
            h = i.top,
            g = a.getScrollIntoViewXY(c, d, h, k),
            l = g.x,
            m = g.y,
            e, f;
        e = p !== !1 ? l : d;
        f = m;
        if (e !== d || f !== h) {
            a.on({
                scrollend: {
                    fn: function() {
                        n && c.dom && c.highlight();
                        b && b.call(j)
                    },
                    scope: a,
                    single: !0
                }
            });
            a.scrollTo(e, f, o)
        } else {
            b && b.call(j)
        }
        return a
    },
    getScrollIntoViewXY: function(q, b, c, a) {
        a = Ext.isEmpty(a) ? 20 : a;
        var r = this,
            h = Ext.getVersion().isGreaterThan('6.2.0') ? Ext.getDom(r.ownerCt.getEl()) : Ext.getDom(r.getEl()),
            p = q.dom,
            j = q.getOffsetsTo(h),
            o = p.offsetWidth,
            m = p.offsetHeight,
            f = j[0] + b,
            g = j[1] + c,
            l = g + m,
            n = f + o,
            d = h.clientHeight,
            e = h.clientWidth,
            i = b,
            k = c,
            s = k + d,
            t = i + e;
        if (m > d || g < k) {
            c = g - a
        } else {
            if (l > s) {
                c = l - d + a
            }
        }
        if (o > e || f < i) {
            b = f - a
        } else {
            if (n > t) {
                b = n - e + a
            }
        }
        return {
            x: b,
            y: c
        }
    }
}, 0, 0, 0, 0, 0, 0, [Sch.mixin, 'TimelineView'], 0);
Ext.cmd.derive('TimesSquare.mixin.Tooltipable', Ext.Base, {
    tooltipRecordResolvers: {},
    additionalRenderers: [],
    defaultRecordResolver: 'resolveEventRecord',
    tooltipableCls: 'x-event-tooltipable',
    tooltipableSelector: '.x-event-tooltipable',
    resolveTooltipRecord: function(b) {
        var a = this.getRecordResolver(b.getAttribute('data-tooltip-type'));
        return a && a.call(this, b)
    },
    renderAdditionalElements: function(b) {
        var a = b[2];
        a.topWidthLeft = a.botWidthLeft = a.width;
        Ext.Array.each(this.additionalRenderers, function(a) {
            a.fn.apply(a.scope, b)
        })
    },
    getRecordResolver: function(b) {
        var a = this.tooltipRecordResolvers[b] || this[this.defaultRecordResolver];
        return Ext.isFunction(a) ? a : this[a]
    },
    registerTooltipRecordResolver: function(b, a) {
        this.tooltipRecordResolvers[b] = a
    },
    registerAdditionalRenderer: function(a, b) {
        this.additionalRenderers.push({
            fn: a,
            scope: b || this
        })
    }
}, 0, 0, 0, 0, 0, 0, [TimesSquare.mixin, 'Tooltipable'], 0);
Ext.cmd.derive('TimesSquare.plugin.tooltipable.AbstractTooltipablePlugin', Ext.AbstractPlugin, {
    type: undefined,
    elementWidth: 9,
    elementHeight: 9,
    elementProperty: undefined,
    elementCls: undefined,
    wrapperCls: undefined,
    tooltipableCls: undefined,
    marginOffset: 0,
    wrapper: 'top',
    filters: undefined,
    init: function(a) {
        this.setCmp(a);
        this.tooltipableCls = a.tooltipableCls;
        a.registerTooltipRecordResolver(this.type, this.recordResolver);
        a.registerAdditionalRenderer(this.renderer, this)
    },
    recordResolver: Ext.emptyFn,
    renderer: function(a, e, c) {
        if (!this.recordDataPresent(a) || !this.invokeFilters(arguments)) {
            return
        }
        var d = a.get(this.elementProperty),
            b;
        b = this.assembleElements(this.cutUnfittingElements(d, c));
        this.writeTemplateData(this.getWrapperSpec(), b, c)
    },
    assembleElements: function(b) {
        var c = this,
            a;
        a = Ext.Array.map(b, function(a) {
            return c.assembleElement(a.composeAttributes())
        });
        return Ext.Array.filter(a, function(a) {
            return !!a
        })
    },
    cutUnfittingElements: function(a, f) {
        var b = this,
            c = b.elementWidth + b.marginOffset,
            e = f[b.wrapper + 'WidthLeft'],
            d = Math.floor(e / c);
        if (!d) {
            a = []
        } else {
            a = Ext.Array.slice(a, 0, Math.max(d, 0))
        }
        f[b.wrapper + 'WidthLeft'] = e - a.length * c;
        return a
    },
    recordDataPresent: function(a) {
        return a.data[this.elementProperty] && a.data[this.elementProperty].length
    },
    invokeFilters: function(b) {
        var a = this.filters;
        if (Ext.isArray(a)) {
            return Ext.Array.every(a, function(c) {
                var a = c.apply(this, b);
                return a || a === undefined
            })
        }
    },
    assembleElement: function(a) {
        if (a) {
            return Ext.Object.merge(Ext.clone(this.getElementSpec()), a)
        }
        return null
    },
    writeTemplateData: function(a, b, c) {
        c[Ext.util.Inflector.pluralize(this.type)] = Ext.DomHelper.createHtml(Ext.apply(a, {
            children: b
        }))
    },
    getWrapperSpec: function() {
        if (!this.wrapperSpec) {
            this.wrapperSpec = {
                tag: 'div',
                cls: this.wrapperCls,
                style: {
                    height: this.elementHeight + 'px',
                    top: '-' + (this.elementHeight + 1) + 'px'
                }
            }
        }
        return this.wrapperSpec
    },
    getElementSpec: function() {
        if (!this.elementSpec) {
            this.elementSpec = {
                tag: 'span',
                cls: [this.elementCls, this.tooltipableCls].join(' '),
                'data-tooltip-type': this.type,
                style: {
                    height: this.elementHeight + 'px',
                    width: this.elementWidth + 'px',
                    lineHeight: this.elementHeight - 5 + 'px'
                }
            }
        }
        return this.elementSpec
    }
}, 0, 0, 0, 0, 0, 0, [TimesSquare.plugin.tooltipable, 'AbstractTooltipablePlugin'], 0);
Ext.cmd.derive('TimesSquare.plugin.tooltipable.BaseTooltipable', TimesSquare.plugin.tooltipable.AbstractTooltipablePlugin, {
    filters: [function(a) {
        return a.get('eventType') !== 'A'
    }]
}, 0, 0, 0, 0, 0, 0, [TimesSquare.plugin.tooltipable, 'BaseTooltipable'], 0);
Ext.cmd.derive('TimesSquare.plugin.tooltipable.UserMarker', TimesSquare.plugin.tooltipable.BaseTooltipable, {
    type: 'userMarker',
    elementWidth: 10,
    elementHeight: 10,
    elementProperty: 'userMarkers',
    elementCls: 'x-event-usermarker',
    wrapperCls: 'x-event-usermarker-wrapper',
    recordResolver: function(a) {
        var b = '[id^=' + this.eventWrapperPrefix + ']',
            c = this.resolveEventRecord(a.up(b).down(this.eventSelector));
        return c.getNestedBy('userMarkers', 'internalId', a.getAttribute('data-identifier'))
    },
    recordDataPresent: function(a) {
        return a.get(this.elementProperty) && a.get(this.elementProperty).length
    },
    assembleElements: function(c) {
        var d = this,
            b = TimesSquare.app.getController('gantt.Gantt').parameterList,
            a;
        a = Ext.Array.map(c, function(a) {
            return d.assembleElement(a.composeAttributes(b))
        });
        return Ext.Array.filter(a, function(a) {
            return !!a
        })
    },
    getElementSpec: function() {
        if (!this.elementSpec) {
            TimesSquare.plugin.tooltipable.BaseTooltipable.prototype.getElementSpec.call(this);
            this.elementSpec.style = {
                width: '0px',
                height: '0px',
                borderWidth: '0 ' + this.elementWidth / 2 + 'px ' + this.elementHeight + 'px ' + this.elementWidth / 2 + 'px',
                borderColor: 'transparent transparent #585858 transparent',
                position: 'relative',
                margin: '0px'
            };
            this.elementSpec.children = [{
                tag: 'span',
                style: {
                    position: 'absolute',
                    left: -((this.elementWidth - 2) / 2) + 'px',
                    top: '2px',
                    width: '0px',
                    height: '0px',
                    borderWidth: '0 ' + (this.elementWidth - 2) / 2 + 'px ' + (this.elementHeight - 2) + 'px ' + (this.elementWidth - 2) / 2 + 'px',
                    borderStyle: 'solid'
                }
            }]
        }
        return this.elementSpec
    },
    assembleElement: function(a) {
        if (!a) {
            return null
        }
        var c = this.getElementSpec(),
            b = Ext.Object.merge(Ext.clone(c), a);
        b.style = c.style;
        Ext.Object.merge(b.children[0].style, a.style);
        return b
    },
    getWrapperSpec: function() {
        if (!this.wrapperSpec) {
            TimesSquare.plugin.tooltipable.BaseTooltipable.prototype.getWrapperSpec.call(this);
            this.wrapperSpec.style.height = '0px';
            this.wrapperSpec.style.lineHeight = '0px';
            this.wrapperSpec.style.top = -this.elementHeight + (Ext.isIE ? 1 : 0.5) + 'px'
        }
        return this.wrapperSpec
    }
}, 0, 0, 0, 0, ['plugin.tooltipable.usermarker'], 0, [TimesSquare.plugin.tooltipable, 'UserMarker'], 0);
Ext.cmd.derive('TimesSquare.plugin.tooltipable.SystemMarker', TimesSquare.plugin.tooltipable.BaseTooltipable, {
    type: 'systemMarker',
    elementWidth: 10,
    elementHeight: 10,
    elementProperty: 'systemMarkers',
    elementCls: 'x-event-systemmarker',
    wrapperCls: 'x-event-systemmarker-wrapper',
    recordResolver: function(a) {
        var b = '[id^=' + this.eventWrapperPrefix + ']',
            c = this.resolveEventRecord(a.up(b).down(this.eventSelector));
        return c.getNestedBy('systemMarkers', 'internalId', a.getAttribute('data-identifier'))
    },
    getWrapperSpec: function() {
        if (!this.wrapperSpec) {
            TimesSquare.plugin.tooltipable.BaseTooltipable.prototype.getWrapperSpec.call(this);
            this.wrapperSpec.style.height = '0px';
            this.wrapperSpec.style.lineHeight = '0px';
            this.wrapperSpec.style.top = -(this.elementHeight - (Ext.isIE ? 1 : 0.5)) + 'px'
        }
        return this.wrapperSpec
    }
}, 0, 0, 0, 0, ['plugin.tooltipable.systemmarker'], 0, [TimesSquare.plugin.tooltipable, 'SystemMarker'], 0);
Ext.cmd.derive('TimesSquare.plugin.tooltipable.Remark', TimesSquare.plugin.tooltipable.BaseTooltipable, {
    type: 'remark',
    elementWidth: 10,
    elementHeight: 10,
    elementProperty: 'remarks',
    elementCls: 'x-event-remark',
    wrapperCls: 'x-event-remark-wrapper',
    wrapper: 'bot',
    recordResolver: function(a) {
        var b = '[id^=' + this.eventWrapperPrefix + ']',
            c = this.resolveEventRecord(a.up(b).down(this.eventSelector));
        return c.getNestedBy('remarks', 'internalId', a.getAttribute('data-identifier'))
    }
}, 0, 0, 0, 0, ['plugin.tooltipable.remark'], 0, [TimesSquare.plugin.tooltipable, 'Remark'], 0);
Ext.define('TimesSquare.overrides.TimelineView', {
    override: 'Sch.mixin.TimelineView',
    plugins: ['tooltipable.systemmarker', 'tooltipable.usermarker', 'tooltipable.remark'],
    eventWrapperPrefix: 'event-wrapper-',
    eventWrapperCls: 'x-event-wrapper',
    initiallySelectedEventCls: 'sch-event-init-selected',
    getEventNodesByRecord: function(a) {
        return this.el.select('[id=' + this.eventWrapperPrefix + a.internalId + ']')
    },
    setupTooltip: function() {
        var a = this,
            b = Ext.apply({
                renderTo: Ext.getBody(),
                delegate: a.tooltipableSelector,
                target: a.el,
                anchor: 'b',
                rtl: a.rtl,
                isMouseOver: !1,
                autoScroll: !0,
                maxHeight: Math.max(Ext.getBody().getHeight() - 40, 0),
                autoHide: !1,
                shadow: !1,
                height: 'auto',
                constrain: !0,
                fixAlignment: a.getMode() === 'horizontal'
            }, a.tipCfg);
        a.tip = new Ext.tip.ToolTip(b);
        a.tip.on({
            beforeshow: function(a) {
                var e = function() {
                        a.isMouseOver = !1;
                        a._hideTimeout = Ext.defer(function() {
                            if (!a.isMouseOver) {
                                if (!a.isDestroyed) {
                                    if (a._loadDefer) {
                                        window.clearTimeout(a._loadDefer);
                                        a._loadDefer = null
                                    }
                                    a.hide()
                                }
                                a._hideTimeout = null
                            }
                        }, 5000)
                    },
                    d = function() {
                        a.isMouseOver = !0;
                        window.clearTimeout(a._hideTimeout);
                        a._hideTimeout = null
                    },
                    b, g, f, c;
                if (!a.triggerElement || !a.triggerElement.id) {
                    return !1
                }
                a.isMouseOver = !0;
                g = Ext.Element.get(a.triggerElement);
                f = this.resolveTooltipRecord(g);
                a._cachedTarget = b = Ext.get(a.currentTarget);
                if (!f || this.fireEvent('beforetooltipshow', this, f) === !1) {
                    return !1
                }
                a.update(this.tooltipTpl.apply(this.getDataForTooltipTpl(f)));
                c = a.getEl();
                if (c && c.dom) {
                    c.on({
                        mouseleave: e,
                        mouseenter: d
                    })
                }
                if (b && b.dom) {
                    b.on({
                        mouseleave: e,
                        mouseenter: d
                    })
                }
                a.on({
                    hide: function() {
                        if (a._loadDefer) {
                            window.clearTimeout(a._loadDefer);
                            a._loadDefer = null
                        }
                        if (c && c.dom) {
                            c.un({
                                mouseleave: e,
                                mouseenter: d
                            })
                        }
                        if (b && b.dom) {
                            b.un({
                                mouseleave: e,
                                mouseenter: d
                            })
                        }
                    },
                    single: !0
                })
            },
            beforehide: function(a) {
                a.removeCls('tooltip-under-loading')
            },
            scope: a
        })
    },
    onEventBarSelect: function(c) {
        var a = this,
            b = a.getElementsFromEventRecord(c);
        if (b) {
            Ext.Array.each(b, function(b) {
                Ext.fly(b).up('.' + a.eventWrapperCls).addCls(a.selectedEventCls)
            })
        }
    },
    onEventBarDeselect: function(c) {
        var a = this,
            b = a.getElementsFromEventRecord(c);
        if (b) {
            Ext.Array.each(b, function(b) {
                Ext.fly(b).up('.' + a.eventWrapperCls).removeCls(a.selectedEventCls).removeCls(a.initiallySelectedEventCls)
            })
        }
    },
    onInitialEventSelect: function(c) {
        var a = this,
            b = a.getElementsFromEventRecord(c);
        if (b) {
            Ext.Array.each(b, function(b) {
                Ext.fly(b).up('.' + a.eventWrapperCls).addCls(a.initiallySelectedEventCls)
            })
        }
    },
    getElementsFromEventRecord: function() {
        var a = arguments[0],
            b, c;
        if (arguments.length !== 1) {
            return (arguments.callee.$previous || Sch.mixin.AbstractTimelineView.prototype.getElementsFromEventRecord).apply(this, arguments)
        }
        if (a && a.isAssignmentModel) {
            b = a.getEvent();
            c = a.getResource()
        } else {
            b = a;
            c = null
        }
        return b && (arguments.callee.$previous || Sch.mixin.AbstractTimelineView.prototype.getElementsFromEventRecord).call(this, b, c, null, !0)
    }
}, function() {
    Sch.mixin.TimelineView.mixin('tooltipable', TimesSquare.mixin.Tooltipable)
});
Ext.cmd.derive('Sch.view.TimelineGridView', Ext.grid.View, {
    infiniteScroll: !1,
    bufferCoef: 5,
    bufferThreshold: 0.2,
    cachedScrollDate: null,
    boxIsReady: !1,
    ignoreNextHorizontalScroll: !1,
    constructor: function(a) {
        Ext.view.Table.prototype.constructor.apply(this, arguments);
        if (this.infiniteScroll) {
            this.on('boxready', this.setupInfiniteScroll, this)
        }
        if (this.timeAxisViewModel) {
            this.relayEvents(this.timeAxisViewModel, ['columnwidthchange'])
        }
    },
    setupInfiniteScroll: function() {
        var c = this.panel.ownerCt;
        this.cachedScrollDate = c.startDate || this.timeAxis.getStart();
        if (Ext.getVersion().isLessThan('6.0.1') && Ext.supports.Touch && Ext.os.is.Windows) {
            var a = this.panel.headerCt.getScrollable();
            var b = this.getScrollable();
            a.onIdle && Ext.GlobalEvents.un('idle', a.onIdle, a);
            b.onIdle && Ext.GlobalEvents.un('idle', b.onIdle, b)
        }
        var d = this;
        c.calculateOptimalDateRange = function(c, f, a, b) {
            if (b) {
                return b
            }
            var e = Sch.preset.Manager.getPreset(a.preset);
            return d.calculateInfiniteScrollingDateRange(c, e.getBottomHeader().unit, a.increment, a.width, !0)
        };
        this.bindInfiniteScrollListeners()
    },
    bindInfiniteScrollListeners: function() {
        this.getScrollable().on('scroll', this.onHorizontalScroll, this);
        this.infiniteScroll = !0
    },
    unbindInfiniteScrollListeners: function() {
        this.getScrollable().un('scroll', this.onHorizontalScroll, this);
        this.infiniteScroll = !1
    },
    onHorizontalScroll: function(g, a, h) {
        if (this.ignoreNextHorizontalScroll || this.cachedScrollDate) {
            this.ignoreNextHorizontalScroll = !1;
            return
        }
        var e = Ext.getScrollbarSize(),
            f = this.getWidth(),
            d = f * this.bufferThreshold * this.bufferCoef,
            c = this.getScrollable().getMaxPosition().x;
        c -= e.width;
        if (c - a < d || a < d) {
            this.shiftToDate(this.getDateFromCoordinate(a, null, !0));
            if (Ext.getVersion().isGreaterThan('6.2.0')) {
                var b = this.getScrollable()._translatable || this.getScrollable().translatable;
                b && b.stopAnimation()
            } else {
                this.el.stopAnimation()
            }
        }
    },
    refresh: function() {
        Ext.view.Table.prototype.refresh.apply(this, arguments);
        if (this.infiniteScroll && !this.scrollStateSaved && this.boxIsReady) {
            this.restoreScrollToCachedDate()
        }
    },
    onResize: function(a, d, b, c) {
        this.boxIsReady = !0;
        Ext.view.Table.prototype.onResize.apply(this, arguments);
        if (this.infiniteScroll && a > 0 && a !== b) {
            this.shiftToDate(this.cachedScrollDate || this.getVisibleDateRange().startDate, this.cachedScrollDateIsCentered)
        }
    },
    restoreScrollToCachedDate: function() {
        if (this.cachedScrollDate && this.boxIsReady) {
            this.ignoreNextHorizontalScroll = !0;
            this.scrollToDate(this.cachedScrollDate);
            this.cachedScrollDate = null
        }
    },
    scrollToDate: function(b) {
        this.cachedScrollDate = b;
        if (this.cachedScrollDateIsCentered) {
            this.panel.ownerCt.scrollToDateCentered(b)
        } else {
            this.panel.ownerCt.scrollToDate(b)
        }
        var a = this.getScrollX();
        this.panel.scrollLeftPos = a;
        this.headerCt.setScrollX(a);
        if (Ext.getVersion().isGreaterThan('6.2.0')) {
            this.up('timelinegrid,timelinetree').lastScrollPos.x = a
        }
    },
    blockRestoringInfiniteScrollDate: function() {
        this.scrollStateSaved = this.boxIsReady
    },
    resumeRestoringInfiniteScrollDate: function() {
        this.scrollStateSaved = !1;
        if (this.infiniteScroll && this.cachedScrollDate) {
            this.restoreScrollToCachedDate()
        }
    },
    calculateInfiniteScrollingDateRange: function(f, a, b, d, k) {
        var c = this.timeAxis,
            g = this.getWidth(),
            h;
        d = d || this.timeAxisViewModel.getTickWidth();
        b = b || c.increment || 1;
        a = a || c.unit;
        var e = Sch.util.Date;
        var i = Math.ceil(g * this.bufferCoef / d);
        if (k) {
            var j = Math.ceil(g * (1 + this.bufferCoef) / (2 * d)) * b;
            h = {
                start: c.floorDate(e.add(f, a, -j), !1, a, b),
                end: c.ceilDate(e.add(f, a, j), !1, a, b)
            }
        } else {
            h = {
                start: c.floorDate(e.add(f, a, -i * b), !1, a, b),
                end: c.ceilDate(e.add(f, a, Math.ceil((g / d + i) * b)), !1, a, b)
            }
        }
        return h
    },
    shiftToDate: function(c, a) {
        var b = this.calculateInfiniteScrollingDateRange(c, null, null, null, a);
        this.cachedScrollDate = c;
        this.cachedScrollDateIsCentered = a;
        this.timeAxis.setTimeSpan(b.start, b.end)
    },
    destroy: function() {
        if (this.infiniteScroll && this.rendered) {
            this.unbindInfiniteScrollListeners()
        }
        Ext.view.Table.prototype.destroy.apply(this, arguments)
    }
}, 1, 0, ['component', 'box', 'dataview', 'tableview', 'gridview'], {
    'component': !0,
    'box': !0,
    'dataview': !0,
    'tableview': !0,
    'gridview': !0
}, 0, [
    [Sch.mixin.TimelineView.prototype.mixinId || Sch.mixin.TimelineView.$className, Sch.mixin.TimelineView]
], [Sch.view, 'TimelineGridView'], 0);
Ext.cmd.derive('Sch.patches.DragDropManager', Sch.util.Patch, {
    target: 'Ext.dd.DragDropManager',
    minVersion: '6.0.0',
    applyFn: function() {
        Ext.override(Ext.dd.DragDropManager, {
            fireEvents: function(e, u) {
                var d = this,
                    t = Ext.supports.Touch,
                    c = d.dragCurrent,
                    l = d.currentPoint,
                    w = l.x,
                    x = l.y,
                    k = [],
                    s = [],
                    h = [],
                    i = [],
                    g = [],
                    j = [],
                    v = t ? document.documentElement.clientWidth / window.innerWidth : 1,
                    p, b, o, r, a, f, n, m;
                if (!c || c.isLocked()) {
                    return
                }
                m = !(c.deltaX < 0 || c.deltaY < 0);
                if (t || !d.notifyOccluded && (!Ext.supports.CSSPointerEvents || Ext.isIE10m || Ext.isOpera) && m) {
                    p = c.getDragEl();
                    if (m) {
                        p.style.visibility = 'hidden'
                    }
                    var q = Ext.getBody().getScroll();
                    e.target = document.elementFromPoint(w - q.left / v, x - q.top / v);
                    if (m) {
                        p.style.visibility = 'visible'
                    }
                }
                for (a in d.dragOvers) {
                    b = d.dragOvers[a];
                    delete d.dragOvers[a];
                    if (!d.isTypeOfDD(b) || b.destroyed) {
                        continue
                    }
                    if (d.notifyOccluded) {
                        if (!this.isOverTarget(l, b, d.mode)) {
                            h.push(b)
                        }
                    } else {
                        if (!e.within(b.getEl())) {
                            h.push(b)
                        }
                    }
                    s[a] = !0
                }
                for (n in c.groups) {
                    if ('string' !== typeof n) {
                        continue
                    }
                    for (a in d.ids[n]) {
                        b = d.ids[n][a];
                        if (d.isTypeOfDD(b) && (o = b.getEl()) && b.isTarget && !b.isLocked() && Ext.fly(o).isVisible(!0) && (b !== c || c.ignoreSelf === !1)) {
                            if (d.notifyOccluded) {
                                if ((b.zIndex = d.getZIndex(o)) !== -1) {
                                    r = !0
                                }
                                k.push(b)
                            } else {
                                if (e.within(b.getEl())) {
                                    k.push(b);
                                    break
                                }
                            }
                        }
                    }
                }
                if (r) {
                    Ext.Array.sort(k, d.byZIndex)
                }
                for (a = 0, f = k.length; a < f; a++) {
                    b = k[a];
                    if (d.isOverTarget(l, b, d.mode)) {
                        if (u) {
                            g.push(b)
                        } else {
                            if (!s[b.id]) {
                                j.push(b)
                            } else {
                                i.push(b)
                            }
                            d.dragOvers[b.id] = b
                        }
                        if (!d.notifyOccluded) {
                            break
                        }
                    }
                }
                if (d.mode) {
                    if (h.length) {
                        c.b4DragOut(e, h);
                        c.onDragOut(e, h)
                    }
                    if (j.length) {
                        c.onDragEnter(e, j)
                    }
                    if (i.length) {
                        c.b4DragOver(e, i);
                        c.onDragOver(e, i)
                    }
                    if (g.length) {
                        c.b4DragDrop(e, g);
                        c.onDragDrop(e, g)
                    }
                } else {
                    for (a = 0, f = h.length; a < f; ++a) {
                        c.b4DragOut(e, h[a].id);
                        c.onDragOut(e, h[a].id)
                    }
                    for (a = 0, f = j.length; a < f; ++a) {
                        c.onDragEnter(e, j[a].id, j[a])
                    }
                    for (a = 0, f = i.length; a < f; ++a) {
                        c.b4DragOver(e, i[a].id);
                        c.onDragOver(e, i[a].id)
                    }
                    for (a = 0, f = g.length; a < f; ++a) {
                        c.b4DragDrop(e, g[a].id);
                        c.onDragDrop(e, g[a].id)
                    }
                }
                if (u && !g.length) {
                    c.onInvalidDrop(e)
                }
            }
        });
        Ext.override(Ext.dd.DragSource, {
            onDragEnter: function(c, b, a) {
                this.forceCachedTarget = a;
                return this.callParent([c, b])
            },
            beforeDragEnter: function(a, c, b) {
                if (this.forceCachedTarget) {
                    a = this.cachedTarget = this.forceCachedTarget;
                    delete this.forceCachedTarget
                }
                return this.callParent([a, c, b])
            }
        });
        var b = Ext.dd.ScrollManager;
        var a = Ext.dd.DragDropManager;
        a.fireEvents = Ext.Function.createSequence(a.fireEvents, b.onFire, b);
        a.stopDrag = Ext.Function.createSequence(a.stopDrag, b.onStop, b)
    }
}, 0, 0, 0, 0, 0, 0, [Sch.patches, 'DragDropManager'], 0);
Ext.cmd.derive('Sch.patches.NavigationModel', Sch.util.Patch, {
    target: 'Ext.grid.NavigationModel',
    minVersion: '6.0.0',
    overrides: {
        setPosition: function(g, f, a, e, d) {
            var b = this;
            if (Ext.isIE && a && (a.getKey() === a.PAGE_DOWN || a.getKey() === a.PAGE_UP)) {
                var c = b.lastFocused;
                if (a.view.isLockedView && c && a.view.getVisibleColumnManager().indexOf(c.column) === -1) {
                    a.view = a.view.lockingPartner
                }
            }
            if (Ext.getVersion().equals('6.0.1.250')) {
                b.patchedSetPosition.apply(this, arguments)
            } else {
                return b.callParent(arguments)
            }
        },
        patchedSetPosition: function(c, f, l, r, o) {
            var a = this,
                b, n, m, g, j, e, h, d, i, k = c == null && f == null,
                q = a.record == null && a.recordIndex == null && a.item == null;
            if (c && c.isCellContext) {
                b = c.view
            } else {
                if (l && l.view) {
                    b = l.view
                } else {
                    if (a.lastFocused) {
                        b = a.lastFocused.view
                    } else {
                        b = a.view
                    }
                }
            }
            b.getFocusTask().cancel();
            if (b.destroyed || !b.refreshCounter || !b.ownerCt || k && q || !b.all.getCount()) {
                return
            }
            m = b.getSelectionModel();
            g = b.dataSource;
            j = b.getVisibleColumnManager();
            if (c && c.isCellContext) {
                d = c.record;
                e = c.rowIdx;
                h = Math.min(c.colIdx, j.getColumns().length - 1);
                i = j.getColumns()[h];
                if (g.indexOf(d) === -1) {
                    n = b.getScrollable();
                    a.recordIndex = -1;
                    if (n.getPosition().y >= n.getMaxPosition().y - b.all.last(!0).offsetHeight) {
                        c.rowIdx--
                    }
                    e = Math.min(c.rowIdx, g.getCount() - 1);
                    d = g.getAt(e)
                }
            } else {
                if (k) {
                    d = e = null
                } else {
                    if (f == null) {
                        f = a.lastFocused ? a.lastFocused.column : 0
                    }
                    if (typeof c === 'number') {
                        e = Math.max(Math.min(c, g.getCount() - 1), 0);
                        d = g.getAt(c)
                    } else {
                        if (c.isEntity) {
                            d = c;
                            e = g.indexOf(d)
                        } else {
                            if (c.tagName) {
                                d = b.getRecord(c);
                                e = g.indexOf(d);
                                if (e === -1) {
                                    d = null
                                }
                            } else {
                                if (q) {
                                    return
                                }
                                k = !0;
                                d = e = null
                            }
                        }
                    }
                }
                if (d) {
                    if (e === -1) {
                        a.recordIndex = -1;
                        d = g.getAt(0);
                        e = 0;
                        f = null
                    }
                    if (f == null) {
                        if (!(i = a.column)) {
                            h = 0;
                            i = j.getColumns()[0]
                        }
                    } else {
                        if (typeof f === 'number') {
                            i = j.getColumns()[f];
                            h = f
                        } else {
                            i = f;
                            h = j.indexOf(f)
                        }
                    }
                } else {
                    k = !0;
                    i = h = null
                }
            }
            if (b.actionableMode && !k) {
                var p = (new Ext.grid.CellContext(b)).setPosition(d, i);
                a.focusPosition(p);
                return b.ownerGrid.setActionableMode(!1, p)
            }
            if (e === a.recordIndex && h === a.columnIndex && b === a.position.view) {
                return a.focusPosition(a.position)
            }
            if (a.cell) {
                a.cell.removeCls(a.focusCls)
            }
            a.previousRecordIndex = a.recordIndex;
            a.previousRecord = a.record;
            a.previousItem = a.item;
            a.previousCell = a.cell;
            a.previousColumn = a.column;
            a.previousColumnIndex = a.columnIndex;
            a.previousPosition = a.position.clone();
            a.selectionStart = m.selectionStart;
            a.position.setAll(b, a.recordIndex = e, a.columnIndex = h, a.record = d, a.column = i);
            if (k) {
                a.item = a.cell = null
            } else {
                a.focusPosition(a.position, o)
            }
            if (!r) {
                m.fireEvent('focuschange', m, a.previousRecord, a.record);
                b.fireEvent('rowfocus', a.record, a.item, a.recordIndex);
                b.fireEvent('cellfocus', a.record, a.cell, a.position)
            }
            if (l && !o && a.cell !== a.previousCell) {
                a.fireNavigateEvent(l)
            }
        }
    }
}, 0, 0, 0, 0, 0, 0, [Sch.patches, 'NavigationModel'], 0);
Ext.cmd.derive('Sch.view.WeekView', Ext.Base, {
    view: null,
    constructor: function(a) {
        Ext.apply(this, a)
    },
    getElementsFromEventRecord: function(e, f, a, d) {
        var c = this.view,
            b;
        d = d || !1;
        if (a !== null && a !== undefined) {
            b = '[id^=' + c.eventPrefix + e.internalId + '-calendar-' + a + '-]'
        } else {
            b = '[id^=' + c.eventPrefix + e.internalId + '-calendar-]'
        }
        return c.getEl().query(b, d)
    },
    getColumnsBy: function(e, d) {
        var b = this.view.panel.headerCt.getGridColumns();
        var c = [];
        for (var a = 0; a < b.length; a++) {
            if (e.call(this, b[a])) {
                if (d !== !0) {
                    c.push(b[a])
                } else {
                    c.push({
                        column: b[a],
                        index: a
                    })
                }
            }
        }
        return c
    },
    getColumnsForDateRange: function(a, b) {
        return this.getColumnsBy(function(c) {
            return !(a.getEndDate() <= c.start || a.getStartDate() >= c.end)
        }, b)
    },
    getColumnEvents: function(a) {
        var b = [];
        this.view.getEventStore().each(function(c) {
            if (!(c.getEndDate() <= a.start || c.getStartDate() >= a.end)) {
                b.push(c)
            }
        });
        return b
    },
    getColumnsByResource: function(b, a) {
        return this.getColumnsBy(function(c) {
            return c.start == b.start
        }, a)[0]
    },
    translateToScheduleCoordinate: function(b) {
        var a = this.view;
        if (Ext.isArray(b)) {
            return [b[0] - a.getEl().getX() + a.getHorizontalScroll(), b[1] - a.getViewContainerElementTop() + a.getVerticalScroll()]
        } else {
            return b - a.getViewContainerElementTop() + a.getVerticalScroll()
        }
    },
    translateToPageCoordinate: function(b) {
        var a = this.view;
        var c = a.getEl();
        if (Ext.isArray(b)) {
            return [b[0] + c.getX() - a.getHorizontalScroll(), b[1] + a.getViewContainerElementTop() - a.getVerticalScroll()]
        } else {
            return b + a.getViewContainerElementTop() - a.getVerticalScroll()
        }
    },
    getDateFromXY: function(d, b, c) {
        var a = d;
        if (!c) {
            a = this.translateToScheduleCoordinate(a)
        }
        return this.view.timeAxisViewModel.getDateFromPosition(a, b)
    },
    getEventRenderData: function(l, m, g) {
        var e = l.getStartDate(),
            f = l.getEndDate(),
            b = this.view,
            i = b.panel.headerCt.getGridColumns(),
            h = i[g].start,
            j = i[g].end,
            d = Math;
        var k = Math.floor(b.getCoordinateFromDate(Sch.util.Date.max(e, h)));
        var c = Math.floor(b.timeAxisViewModel.getPositionFromDate(Sch.util.Date.min(f, j), !0));
        var a;
        if (c === 0) {
            c = b.getStore().getCount() * b.getRowHeight()
        }
        a = {
            top: d.max(0, d.min(k, c) - b.eventBorderWidth),
            height: d.max(1, d.abs(k - c))
        };
        a.start = e;
        a.end = f;
        a.startsOutsideView = e < h;
        a.endsOutsideView = f > j;
        return a
    },
    getScheduleRegion: function(b, h) {
        var a = this.view,
            c = b ? this.getColumnsByResource(b).getRegion() : a.getTableRegion(),
            d = this.translateToPageCoordinate(0),
            e = this.translateToPageCoordinate(a.getStore().getCount() * a.getRowHeight()),
            g = c.left + a.barMargin,
            f = c.right - a.barMargin;
        return new Ext.util.Region(Math.min(d, e), f, Math.max(d, e), g)
    },
    getWeekViewColumnWidth: function() {
        return this.view.timeAxisViewModel.weekViewColumnWidth
    },
    getResourceRegion: function(i, b, d) {
        var a = this.view,
            c = a.getResourceStore().indexOf(i) * this.getWeekViewColumnWidth(),
            e = a.timeAxis.getStart(),
            g = a.timeAxis.getEnd(),
            k = b ? Sch.util.Date.max(e, b) : e,
            m = d ? Sch.util.Date.min(g, d) : g,
            f = Math.max(0, a.getCoordinateFromDate(k) - a.cellTopBorderWidth),
            h = a.getCoordinateFromDate(m) - a.cellTopBorderWidth,
            l = c + a.cellBorderWidth,
            j = c + this.getWeekViewColumnWidth() - a.cellBorderWidth;
        return new Ext.util.Region(Math.min(f, h), j, Math.max(f, h), l)
    },
    columnRenderer: function(l, a, k, j, f) {
        var b = this.view;
        var g = '';
        if (j === 0) {
            var c, e, d, i;
            c = [];
            e = this.getColumnEvents(a.column);
            for (d = 0, i = e.length; d < i; d++) {
                var h = e[d];
                c.push(b.generateTplData(h, h.getResources()[0], f))
            }
            if (a.column.rendered && this.getWeekViewColumnWidth() !== a.column.getWidth()) {
                this.setColumnWidth(a.column.getWidth(), !0)
            }
            b.eventLayout.vertical.applyLayout(c, this.getWeekViewColumnWidth() - 2 * b.barMargin - b.cellBorderWidth);
            g = '&#160;' + b.eventTpl.apply(c)
        }
        if (f % 2 === 1) {
            a.tdCls = (a.tdCls || '') + ' ' + b.altColCls;
            a.cellCls = (a.cellCls || '') + ' ' + b.altColCls
        }
        return g
    },
    resolveResource: function(b) {
        var d = this.view;
        b = Ext.fly(b).is(d.timeCellSelector) ? b : Ext.fly(b).up(d.timeCellSelector);
        if (b) {
            var a = b.dom ? b.dom : b;
            var c = 0;
            if (Ext.isIE8m) {
                a = a.previousSibling;
                while (a) {
                    if (a.nodeType === 1) {
                        c++
                    }
                    a = a.previousSibling
                }
            } else {
                c = Ext.Array.indexOf(Array.prototype.slice.call(a.parentNode.children), a)
            }
            if (c >= 0) {
                var e = d.panel.headerCt.getGridColumns()[c];
                return {
                    start: e.start,
                    end: e.end
                }
            }
        }
    },
    onEventUpdate: function(d, a) {
        if (!this.view.rendered || !this.view.headerCt.items.get(0).rendered) {
            return
        }
        this.renderSingle(a);
        var b = this.view;
        var c = b.getEventSelectionModel();
        c.forEachEventRelatedSelection(a, function(c) {
            b.onEventBarSelect(c)
        })
    },
    onEventAdd: function(c, a) {
        if (!this.view.rendered || !this.view.headerCt.items.get(0).rendered) {
            return
        }
        var b = this.view;
        if (a.length === 1) {
            this.renderSingle(a[0])
        } else {
            b.repaintAllEvents()
        }
    },
    onEventRemove: function(c, a) {
        if (!this.view.rendered || !this.view.headerCt.items.get(0).rendered) {
            return
        }
        var b = this.view;
        if (a.length === 1) {
            Ext.Array.each(b.getElementsFromEventRecord(a[0], undefined, undefined, !0), function(b) {
                Ext.fly(b).destroy()
            });
            this.relayoutRenderedEvents(a[0])
        } else {
            b.repaintAllEvents()
        }
    },
    relayoutRenderedEvents: function(b) {
        var a = this,
            c = a.getColumnsForDateRange(b, !0);
        Ext.Array.each(c, function(c) {
            a.repaintEventsForColumn(c.column, c.index)
        })
    },
    renderSingle: function(a) {
        var b = this.view;
        Ext.Array.each(b.getElementsFromEventRecord(a, undefined, undefined, !0), function(b) {
            Ext.fly(b).destroy()
        });
        var c = a.previous || {};
        var d = Sch.util.Date;
        var e = new Sch.model.Range({
            StartDate: d.min(c.StartDate || a.getStartDate(), a.getStartDate()),
            EndDate: d.max(c.EndDate || a.getEndDate(), a.getEndDate())
        });
        var f = this.getColumnsForDateRange(e);
        Ext.Array.each(f, function(c) {
            var d = c.getIndex();
            var f = this.getColumnEvents(c);
            var e = Ext.Array.map(f, function(e) {
                if (e === a) {
                    return b.generateTplData(a, a.getResources()[0], d)
                } else {
                    return {
                        start: e.getStartDate() < c.start ? c.start : e.getStartDate(),
                        end: e.getEndDate() > c.end ? c.end : e.getEndDate(),
                        event: e
                    }
                }
            });
            b.eventLayout.vertical.applyLayout(e, c.getWidth() - 2 * b.barMargin - b.cellBorderWidth);
            Ext.Array.each(e, function(e) {
                if (e.event === a) {
                    var f = b.getScheduleCell(0, d);
                    if (f) {
                        if (!Ext.versions.touch) {
                            f = Ext.fly(f).first()
                        }
                        b.eventTpl.append(f, [e])
                    }
                } else {
                    var g = b.getElementsFromEventRecord(e.event, null, d)[0];
                    if (g) {
                        g.setStyle({
                            left: e.left + 'px',
                            width: Math.max(e.width, 0) + 'px'
                        })
                    }
                }
            })
        }, this)
    },
    repaintEventsForColumn: function(c, n) {
        var k = this;
        var j = k.getColumnEvents(c);
        var e = k.view;
        var f = [],
            b, l, a, d, g, h;
        for (b = 0, l = j.length; b < l; b++) {
            a = j[b];
            d = e.getElementsFromEventRecord(a, undefined, undefined, !0)[0];
            if (!d) {
                return
            }
            var i = d.id.split('-');
            i.pop();
            g = a.getStartDate();
            h = a.getEndDate();
            f.push({
                start: g < c.start ? c.start : g,
                end: h > c.end ? c.end : h,
                event: a,
                id: i.join('-')
            })
        }
        e.eventLayout.vertical.applyLayout(f, c.getWidth() - 2 * e.barMargin - e.cellBorderWidth);
        var m = e.getNode(0);
        for (b = 0; b < f.length; b++) {
            a = f[b];
            d = Ext.DomQuery.selectNode('td:nth-child(' + (n + 1) + ') [id^=' + a.id + '-]', m);
            d && Ext.fly(d).setStyle({
                left: a.left + 'px',
                width: Math.max(a.width, 0) + 'px'
            })
        }
    },
    getTimeSpanRegion: function(d, c) {
        var h = this.view,
            e = h.getCoordinateFromDate(d),
            g = c ? h.timeAxisViewModel.getPositionFromDate(c, !0) : e;
        var a = this.getColumnsBy(function(a) {
            return a.start <= d && a.end > d
        })[0];
        var b = this.getColumnsBy(function(a) {
            return a.start < c && a.end >= c
        })[0];
        if (!a || !b || !a.rendered || !b.rendered) {
            return new Ext.util.Region(-1, 0, -1, 0)
        }
        var f = this.translateToScheduleCoordinate([a.getX(), 0]);
        var i = this.translateToScheduleCoordinate([b ? b.getRegion().right : a.getWidth() + f[0], 0]);
        return new Ext.util.Region(Math.min(e, g), i[0], Math.max(e, g), f[0])
    },
    getStartEndDatesFromRegion: function(a, b) {
        var d = this.view.getDateFromCoordinate([a.left, a.top], b),
            c = this.view.getDateFromCoordinate([a.left, a.bottom], b);
        if (d && c) {
            return {
                start: d,
                end: c
            }
        } else {
            return null
        }
    },
    setColumnWidth: function(a, c) {
        var b = this.view;
        b.weekViewColumnWidth = a;
        b.getTimeAxisViewModel().setViewColumnWidth(a, c)
    },
    getVisibleDateRange: function() {
        var a = this.view;
        if (!a.rendered) {
            return null
        }
        var e = a.getScroll(),
            d = a.getViewContainerHeight(),
            b = a.getTableRegion(),
            c = a.timeAxis.getEnd();
        if (b.bottom - b.top < d) {
            var f = a.timeAxis.getStart();
            return {
                startDate: f,
                endDate: c
            }
        }
        return {
            startDate: a.getDateFromCoordinate(e.top, null, !0),
            endDate: a.getDateFromCoordinate(e.top + d, null, !0) || c
        }
    },
    getItemBox: function(a) {
        return null
    },
    getConnectorStartSide: function(a) {
        return 'top'
    },
    getConnectorEndSide: function(a) {
        return 'bottom'
    }
}, 1, 0, 0, 0, 0, 0, [Sch.view, 'WeekView'], 0);
Ext.cmd.derive('Sch.mixin.SchedulerView', Sch.mixin.AbstractSchedulerView, {
    eventResizeHandles: 'end',
    dndValidatorFn: Ext.emptyFn,
    resizeValidatorFn: Ext.emptyFn,
    createValidatorFn: Ext.emptyFn,
    weekViewClass: 'Sch.view.WeekView',
    lockedGridDependsOnSchedule: null,
    _initializeSchedulerView: function() {
        Sch.mixin.AbstractSchedulerView.prototype._initializeSchedulerView.apply(this, arguments);
        this.on({
            destroy: this._destroy,
            afterrender: this._afterRender,
            itemupdate: this.onRowUpdated,
            scope: this
        });
        this.timeAxis.on('beginreconfigure', this.clearRowHeightCache, this);
        if (Ext.getVersion().isGreaterThan('5.1.1')) {
            this.on('itemadd', function(b) {
                var a = this.all.item(this.all.endIndex - b.length);
                if (a) {
                    a.dom.style.height = ''
                }
            })
        }
        var a = this;
        if (!this.eventPrefix) {
            throw 'eventPrefix missing'
        }
        this.on({
            resourcestorechange: this.clearRowHeightCache,
            assignmentstorechange: this.clearRowHeightCache,
            eventstorechange: this.clearRowHeightCache,
            scope: this
        })
    },
    inheritables: function() {
        return {
            loadingText: this.L('loadingText'),
            overItemCls: '',
            trackOver: !1,
            selectedItemCls: '',
            setReadOnly: function(a) {
                if (this.dragCreator) {
                    this.dragCreator.setDisabled(a)
                }
                this.callParent(arguments)
            },
            repaintEventsForResource: function(b, e) {
                var a = this,
                    c = a.isHorizontal(),
                    d = c ? a.indexOf(b) : 0;
                if (c) {
                    a.eventLayout.horizontal.clearCache(b)
                }
                if (d >= 0) {
                    Ext.suspendLayouts();
                    if (c) {
                        a.refreshNode(b);
                        if (a.lockedGridDependsOnSchedule) {
                            a.lockingPartner.refreshNode(b)
                        }
                    } else {
                        a.refreshNode(d)
                    }
                    Ext.resumeLayouts();
                    if (e) {
                        var g = a.getEventSelectionModel();
                        var f = a.getEventStore().getEventsForResource(b);
                        Ext.Array.each(f, function(c) {
                            g.forEachEventRelatedSelection(c, function(d) {
                                a.onEventBarSelect(d, !0)
                            })
                        })
                    }
                }
            },
            repaintAllEvents: function() {
                if (this.isHorizontal()) {
                    this.refreshView()
                } else {
                    this.refreshNode(0)
                }
            },
            handleScheduleEvent: function(a) {
                var j = a.getTarget('.' + this.eventCls, 3),
                    f = !j && a.getTarget('.' + this.timeCellCls, 3);
                if (f) {
                    var g = this.getDateFromDomEvent(a, 'floor');
                    var d = this.findRowByChild(f);
                    var i = this.indexOf(d);
                    var c;
                    if (this.isHorizontal()) {
                        c = this.getRecordForRowNode(d)
                    } else {
                        var b = a.getTarget(this.timeCellSelector, 5);
                        if (b) {
                            var h = typeof b.cellIndex == 'number' ? b.cellIndex : b.getAttribute('data-cellIndex');
                            var e = this.headerCt.getGridColumns()[h];
                            c = e && e.model
                        }
                    }
                    if (a.type.indexOf('pinch') >= 0) {
                        this.fireEvent('schedule' + a.type, this, a)
                    } else {
                        this.fireEvent('schedule' + a.type, this, g, i, c, a)
                    }
                }
            },
            onEventDataRefresh: function() {
                this.clearRowHeightCache();
                this.callParent(arguments)
            },
            onUnbindStore: function(a) {
                a.un({
                    refresh: this.clearRowHeightCache,
                    clear: this.clearRowHeightCache,
                    load: this.clearRowHeightCache,
                    scope: this
                });
                this.callParent(arguments)
            },
            bindStore: function(a) {
                a && a.on({
                    refresh: this.clearRowHeightCache,
                    clear: this.clearRowHeightCache,
                    load: this.clearRowHeightCache,
                    scope: this
                });
                this.callParent(arguments)
            },
            refreshKeepingScroll: function() {
                if (this.rendered) {
                    this.lockingPartner.refreshView();
                    this.callParent(arguments)
                }
            }
        }
    },
    getEventSelectionModel: function() {
        var a = this,
            b;
        if (a.eventSelModel && a.eventSelModel.isSelectionModel) {
            return a.eventSelModel
        }
        if (typeof a.eventSelModel === 'string') {
            a.eventSelModel = {
                type: a.eventSelModel
            }
        }
        if (a.simpleSelect) {
            b = 'SIMPLE'
        } else {
            if (a.multiSelect) {
                b = 'MULTI'
            } else {
                b = 'SINGLE'
            }
        }
        a.eventSelModel = Ext.Factory.selection(Ext.apply({
            type: a.eventSelModelType || (a.getEventStore().getAssignmentStore() ? 'assignmentmodel' : 'eventmodel'),
            mode: b,
            allowDeselect: a.allowDeselect || a.multiSelect,
            locked: a.disableSelection
        }, a.eventSelModel));
        return a.eventSelModel
    },
    _afterRender: function() {
        this.setEventStore(this.eventStore, !0);
        this.getEventSelectionModel().bindToView(this);
        this.setupEventListeners();
        this.configureFunctionality();
        var a = this.headerCt.resizer;
        if (a) {
            a.doResize = Ext.Function.createSequence(a.doResize, this.afterHeaderResized, this)
        }
        this.on('itemupdate', function() {
            this.hoveredEventNode = null
        })
    },
    _destroy: function() {
        this.setEventStore(null)
    },
    clearRowHeightCache: function() {
        if (this.isHorizontal()) {
            this.eventLayout.horizontal.clearCache()
        }
    },
    configureFunctionality: function() {
        var a = this.validatorFnScope || this;
        if (this.eventResizeHandles !== 'none' && Sch.feature.ResizeZone) {
            this.resizePlug = new Sch.feature.ResizeZone(Ext.applyIf({
                schedulerView: this,
                validatorFn: function(b, c, d, e) {
                    return (this.allowOverlap || this.isDateRangeAvailable(d, e, c, b)) && this.resizeValidatorFn.apply(a, arguments)
                },
                validatorFnScope: this
            }, this.resizeConfig || {}))
        }
        if (this.enableEventDragDrop !== !1 && Sch.feature.DragDrop) {
            this.dragdropPlug = new Sch.feature.DragDrop(this, {
                validatorFn: function(d, c, b, e) {
                    return (this.allowOverlap || this.isDateRangeAvailable(b, Sch.util.Date.add(b, Sch.util.Date.MILLI, e), d[0], c)) && this.dndValidatorFn.apply(a, arguments)
                },
                validatorFnScope: this,
                dragConfig: this.dragConfig || {}
            })
        }
        if (this.enableDragCreation !== !1) {
            this.dragCreator = Ext.create(Ext.apply({
                xclass: 'Sch.feature.DragCreator'
            }, {
                schedulerView: this,
                disabled: this.readOnly,
                validatorFn: function(b, c, d) {
                    return (this.allowOverlap || this.isDateRangeAvailable(c, d, null, b)) && this.createValidatorFn.apply(a, arguments)
                },
                validatorFnScope: this
            }, this.createConfig))
        }
    },
    onDragDropStart: function() {
        if (this.dragCreator) {
            this.dragCreator.setDisabled(!0)
        }
        if (this.tip) {
            this.tip.hide();
            this.tip.disable()
        }
        if (this.overScheduledEventClass) {
            this.setMouseOverEnabled(!1)
        }
        this.disableViewScroller(!0);
        this.hoveredEventNode = null
    },
    onDragDropEnd: function() {
        if (this.dragCreator) {
            this.dragCreator.setDisabled(!1)
        }
        if (this.tip) {
            this.tip.enable()
        }
        if (this.overScheduledEventClass) {
            this.setMouseOverEnabled(!0)
        }
        this.disableViewScroller(!1)
    },
    onBeforeDragCreate: function(d, b, c, a) {
        return !this.readOnly && !a.ctrlKey
    },
    onDragCreateStart: function() {
        if (this.overScheduledEventClass) {
            this.setMouseOverEnabled(!1)
        }
        if (this.tip) {
            this.tip.hide();
            this.tip.disable()
        }
        this.disableViewScroller(!0)
    },
    onDragCreateEnd: function(d, a, b) {
        if (!this.getEventEditor()) {
            var c = b ? [b] : [];
            if (this.fireEvent('beforeeventadd', this, a, c) !== !1) {
                this.getEventStore().append(a);
                if (!this.isWeekView()) {
                    a.assign(b)
                }
                this.onEventCreated(a, c)
            }
        }
        if (this.overScheduledEventClass) {
            this.setMouseOverEnabled(!0)
        }
    },
    onEventCreated: function(a, b) {},
    onAfterDragCreate: function() {
        if (this.overScheduledEventClass) {
            this.setMouseOverEnabled(!0)
        }
        if (this.tip) {
            this.tip.enable()
        }
        this.disableViewScroller(!1)
    },
    onBeforeResize: function() {
        return !this.readOnly
    },
    onResizeStart: function() {
        if (this.tip) {
            this.tip.hide();
            this.tip.disable()
        }
        if (this.dragCreator) {
            this.dragCreator.setDisabled(!0)
        }
        this.disableViewScroller(!0)
    },
    onResizeEnd: function() {
        if (this.tip) {
            this.tip.enable()
        }
        if (this.dragCreator) {
            this.dragCreator.setDisabled(!1)
        }
        this.disableViewScroller(!1)
    },
    setupEventListeners: function() {
        this.on({
            eventdragstart: this.onDragDropStart,
            aftereventdrop: this.onDragDropEnd,
            beforedragcreate: this.onBeforeDragCreate,
            dragcreatestart: this.onDragCreateStart,
            dragcreateend: this.onDragCreateEnd,
            afterdragcreate: this.onAfterDragCreate,
            beforeeventresize: this.onBeforeResize,
            eventresizestart: this.onResizeStart,
            aftereventresize: this.onResizeEnd,
            scope: this
        })
    },
    afterHeaderResized: function() {
        var a = this.headerCt.resizer;
        if (a && !this.isHorizontal()) {
            if (this.panel.forceFit) {
                this.setColumnWidth(a.origWidth)
            } else {
                var b = a.dragHd.getWidth();
                this.setColumnWidth(b)
            }
        }
    },
    columnRenderer: function(e, b, a, d, c) {
        return this[this.mode].columnRenderer(e, b, a, d, c)
    },
    onRowUpdated: function(b) {
        var a = this,
            c;
        if (a.isHorizontal() && a.hasListener('eventrepaint')) {
            Ext.Array.each(b.getEvents(), function(d) {
                c = a.getElementsFromEventRecord(d, b, null, !0);
                Ext.Array.each(c, function(c) {
                    a.fireEvent('eventrepaint', a, d, c)
                })
            })
        }
    },
    scrollResourceEventIntoView: function(d, e, n, j, l, k, o) {
        var a = this,
            f = e.getStartDate(),
            h = e.getEndDate(),
            c, b;
        var g = function() {
            b = a.getElementsFromEventRecord(e, d, n);
            b = b.length && b[0] || null;
            a.scrollElementIntoView(b, !0, l, j, null, k, o)
        };
        if (!a.timeAxis.dateInAxis(f) || !a.timeAxis.dateInAxis(h)) {
            c = a.timeAxis.getEnd() - a.timeAxis.getStart();
            a.timeAxis.setTimeSpan(new Date(f.valueOf() - c / 2), new Date(h.getTime() + c / 2));
            a.up('panel').scrollTask.cancel()
        }
        if (this.isHorizontal()) {
            var i = a.up('timelinegrid,timelinetree');
            var m = i.store.isTreeStore;
            i.ensureVisible(m ? d.getPath() : d, {
                callback: function() {
                    if (this.isLocked === !1 || Ext.getVersion().gt('6.2.2')) {
                        g()
                    }
                }
            })
        } else {
            g()
        }
    }
}, 0, 0, 0, 0, 0, [
    [Sch.mixin.Localizable.prototype.mixinId || Sch.mixin.Localizable.$className, Sch.mixin.Localizable]
], [Sch.mixin, 'SchedulerView'], 0);
Ext.cmd.derive('Sch.view.SchedulerGridView', Sch.view.TimelineGridView, {}, 0, ['schedulergridview'], ['component', 'box', 'dataview', 'tableview', 'gridview', 'schedulergridview'], {
    'component': !0,
    'box': !0,
    'dataview': !0,
    'tableview': !0,
    'gridview': !0,
    'schedulergridview': !0
}, ['widget.schedulergridview'], [
    [Sch.mixin.SchedulerView.prototype.mixinId || Sch.mixin.SchedulerView.$className, Sch.mixin.SchedulerView],
    [Sch.mixin.GridViewCanvas.prototype.mixinId || Sch.mixin.GridViewCanvas.$className, Sch.mixin.GridViewCanvas],
    [Sch.mixin.Localizable.prototype.mixinId || Sch.mixin.Localizable.$className, Sch.mixin.Localizable]
], [Sch.view, 'SchedulerGridView'], function() {
    this.override(Sch.mixin.SchedulerView.prototype.inheritables() || {})
});
Ext.cmd.derive('Sch.selection.EventModel', Ext.selection.Model, {
    deselectOnContainerClick: !0,
    selectedOnMouseDown: null,
    bindToView: function(b) {
        var a = this;
        a.view = b;
        a.bindStore(a.getSelectionStore(b));
        b.on({
            eventclick: a.onEventClick,
            eventmousedown: a.onEventMouseDown,
            itemmousedown: a.onItemMouseDown,
            refresh: function() {
                a.refresh()
            },
            destroy: function() {
                a.bindStore(null)
            },
            scope: a
        })
    },
    getSelectionStore: function(a) {
        return a.getEventStore()
    },
    bindStore: function(a) {
        if (this.getStore()) {
            this.mun(this.getStore(), 'load', this.onSelectionStoreLoad, this)
        }
        if (a) {
            this.mon(a, 'load', this.onSelectionStoreLoad, this)
        }
        Ext.selection.Model.prototype.bindStore.apply(this, arguments)
    },
    onSelectionStoreLoad: function() {
        this.deselectAll()
    },
    onEventMouseDown: function(c, a, b) {
        this.selectedOnMouseDown = null;
        if ((!this.ignoreRightMouseSelection || b.button !== 2) && !this.isSelected(a)) {
            this.selectedOnMouseDown = a;
            this.selectWithEvent(a, b)
        }
    },
    onEventClick: function(c, b, a) {
        if ((!this.ignoreRightMouseSelection || a.button !== 2) && !this.selectedOnMouseDown) {
            this.selectWithEvent(b, a)
        }
    },
    onItemMouseDown: function(b, c, d, e, a) {
        if (this.deselectOnContainerClick && !a.getTarget(this.view.eventSelector)) {
            this.deselectAll()
        }
    },
    onSelectChange: function(c, e, b, g) {
        var a = this,
            d = a.view,
            h = a.store,
            f = e ? 'select' : 'deselect',
            i = 0;
        if (d && (b || a.fireEvent('before' + f, a, c)) !== !1 && g() !== !1) {
            if (e) {
                d.onEventBarSelect(c, b)
            } else {
                d.onEventBarDeselect(c, b)
            }
            if (!b) {
                a.fireEvent(f, a, c)
            }
        }
    },
    selectRange: Ext.emptyFn,
    selectNode: function(d, c, b) {
        var a = this.view.resolveEventRecord(d);
        if (a) {
            this.select(a, c, b)
        }
    },
    deselectNode: function(c, d, b) {
        var a = this.view.resolveEventRecord(c);
        if (a) {
            this.deselect(a, b)
        }
    },
    getFirstSelectedEventForResource: function(f) {
        var d = this.getSelection(),
            b = null,
            a, e, c;
        for (a = 0, e = d.length; !b && a < e; ++a) {
            c = d[a];
            if (c.isAssignedTo(f)) {
                b = c
            }
        }
        return b
    },
    getDraggableSelections: function() {
        return Ext.Array.filter(this.getSelection(), function(a) {
            return a.isDraggable()
        })
    },
    forEachEventRelatedSelection: function(a, b) {
        this.isSelected(a) && b(a)
    },
    refresh: function() {
        var a = this,
            l = a.store,
            e = [],
            c = [],
            k = a.getSelection(),
            m = k.length,
            b = a.getSelected(),
            h, j, d, g, i, f;
        if (!l || !(b.isCollection || b.isBag || b.isRows) || !b.getCount()) {
            return
        }
        d = l.getData();
        if (d.getSource) {
            j = d.getSource();
            if (j) {
                d = j
            }
        }
        a.refreshing = !0;
        b.beginUpdate();
        a.suspendChanges();
        for (f = 0; f < m; f++) {
            g = k[f];
            i = d.get(g.getId());
            if (i) {
                e.push(i)
            } else {
                if (!a.pruneRemoved) {
                    c.push(g)
                }
            }
            if (a.mode === 'SINGLE' && c.length) {
                break
            }
        }
        if (b.getCount() !== e.length + c.length) {
            h = !0
        }
        a.clearSelections();
        if (e.length) {
            a.doSelect(e, !1, !0)
        }
        if (c.length) {
            b.add(c);
            if (!a.lastSelected) {
                a.lastSelected = c[c.length - 1]
            }
        }
        a.resumeChanges();
        if (h) {
            b.endUpdate()
        } else {
            b.updating--
        }
        a.refreshing = !1;
        a.maybeFireSelectionChange(h)
    }
}, 0, 0, 0, 0, ['selection.eventmodel'], 0, [Sch.selection, 'EventModel'], 0);
Ext.cmd.derive('Sch.selection.AssignmentModel', Sch.selection.EventModel, {
    assignmentStoreDetacher: null,
    getSelectionStore: function(a) {
        return a.getEventStore().assignmentStore
    },
    onBindStore: function(b) {
        Sch.selection.EventModel.prototype.onBindStore.apply(this, arguments);
        if (b) {
            var a = this;
            a.assignmentStoreDetacher && a.assignmentStoreDetacher.destroy();
            a.assignmentStoreDetacher = b.on({
                remove: a.onAssignmentStoreRemove,
                clear: a.onAssignmentStoreClear,
                refresh: a.onAssignmentStoreRefresh,
                scope: a,
                destroyable: !0
            })
        }
    },
    onEventMouseDown: function(d, c, b) {
        this.selectedOnMouseDown = null;
        var a = this.resolveAssignmentRecordFromEventNode(b.getTarget());
        if (a && (!this.ignoreRightMouseSelection || b.button !== 2) && !this.isSelected(a)) {
            this.selectedOnMouseDown = a;
            this.selectWithEvent(a, b)
        }
    },
    onEventClick: function(d, c, a) {
        var b = this.resolveAssignmentRecordFromEventNode(a.getTarget());
        if (b && (!this.ignoreRightMouseSelection || a.button !== 2) && !this.selectedOnMouseDown) {
            this.selectWithEvent(b, a)
        }
    },
    resolveAssignmentRecordFromEventNode: function(d) {
        var a = this.view,
            c = a.resolveEventRecord(d),
            b = a.resolveResource(d);
        if (c && b) {
            var e = a.getEventStore().getAssignmentStore();
            return e.getAssignmentForEventAndResource(c, b)
        }
    },
    selectNode: function(d, c, b) {
        var a = this.resolveAssignmentRecordFromEventNode(d);
        if (a) {
            this.select(a, c, b)
        }
    },
    deselectNode: function(c, d, b) {
        var a = this.resolveAssignmentRecordFromEventNode(c);
        if (a) {
            this.deselect(a, b)
        }
    },
    getFirstSelectedEventForResource: function(f) {
        var d = this.getSelection(),
            b = null,
            a, e, c;
        for (a = 0, e = d.length; !b && a < e; ++a) {
            c = d[a];
            if (c.getEvent().isAssignedTo(f)) {
                b = c;
                break
            }
        }
        return b
    },
    getDraggableSelections: function() {
        return Ext.Array.filter(this.getSelection(), function(a) {
            return a.getEvent().isDraggable()
        })
    },
    forEachEventRelatedSelection: function(a, b) {
        Ext.Array.each(this.getSelection(), function(c) {
            c.getEvent() === a && b(c)
        })
    },
    onAssignmentStoreRemove: function(b, a) {
        this.deselect(a, !0)
    },
    onAssignmentStoreClear: function(a) {
        this.clearSelections()
    },
    onAssignmentStoreRefresh: function(a) {
        this.clearSelections()
    },
    destroy: function() {
        var a = this;
        Ext.destroyMembers(a, 'assignmentStoreDetacher');
        Sch.selection.EventModel.prototype.destroy.call(this)
    }
}, 0, 0, 0, 0, ['selection.assignmentmodel'], 0, [Sch.selection, 'AssignmentModel'], 0);
Ext.cmd.derive('Sch.mixin.SchedulerPanel', Sch.mixin.AbstractSchedulerPanel, {
    eventSelModelType: null,
    eventSelModel: null,
    enableEventDragDrop: !0,
    enableDragCreation: !0,
    dragConfig: null,
    weekViewColumnClass: 'Sch.column.Day',
    componentCls: 'sch-schedulerpanel',
    lockedGridDependsOnSchedule: !0,
    verticalListeners: null,
    horizontalLockedWidth: null,
    verticalColumns: null,
    calendarColumns: null,
    horizontalCls: ['sch-horizontal'],
    verticalCls: ['sch-vertical-resource', 'sch-vertical'],
    weekviewCls: ['sch-calendar', 'sch-vertical'],
    _oldViewPresetArgs: null,
    inheritables: function() {
        return {
            variableRowHeight: !0,
            initComponent: function() {
                var a = this,
                    f = a.normalViewConfig = a.normalViewConfig || {},
                    c = a.getDependencyViewConfig && a.getDependencyViewConfig() || {};
                a._initializeSchedulerPanel();
                a.verticalListeners = {
                    clear: a.refreshResourceColumns,
                    datachanged: a.refreshResourceColumns,
                    update: a.refreshResourceColumns,
                    load: a.refreshResourceColumns,
                    scope: a
                };
                a.calendarListeners = {
                    reconfigure: a.refreshCalendarColumns,
                    priority: 1,
                    scope: a
                };
                a.calendarNormalGridListeners = {
                    columnresize: a.onCalendarColumnResize,
                    scope: a
                };
                a.calendarResourceStoreListeners = {
                    load: a.onCalendarResourceStoreChange,
                    add: a.onCalendarResourceStoreChange,
                    remove: a.onCalendarResourceStoreChange,
                    scope: a
                };
                a.normalViewConfig = a.normalViewConfig || {};
                Ext.apply(a.normalViewConfig, {
                    eventStore: a.eventStore,
                    resourceStore: a.resourceStore,
                    dependencyStore: a.dependencyStore,
                    eventBarTextField: a.eventBarTextField || this.getEventStore().getModel().prototype.nameField
                });
                if (a.getDependencyStore() && c.enableDependencyDragDrop !== !1) {
                    f.terminalSides = c.terminalSides || ['left', 'right', 'top', 'bottom']
                }
                Ext.Array.each(['barMargin', 'eventBodyTemplate', 'eventTpl', 'allowOverlap', 'dragConfig', 'eventBarIconClsField', 'onEventCreated', 'constrainDragToResource', 'snapRelativeToEventStartDate', 'eventSelModelType', 'eventSelModel', 'simpleSelect', 'multiSelect', 'allowDeselect', 'lockedGridDependsOnSchedule'], function(b) {
                    if (b in a) {
                        a.normalViewConfig[b] = a[b]
                    }
                });
                a.callParent(arguments);
                if (!a.isHorizontal()) {
                    a.setGroupingFeatureDisabled(!0)
                }
                if (a.isVertical()) {
                    a.mon(a.resourceStore, a.verticalListeners)
                }
                var e = a.lockedGrid.getView();
                var b = a.getSchedulingView();
                e.on('resize', a.onLockedViewResize, a);
                a.registerRenderer(b.columnRenderer, b);
                if (a.resourceZones) {
                    var d = Ext.StoreManager.lookup(a.resourceZones);
                    d.setResourceStore(a.resourceStore);
                    a.resourceZonesPlug = new Sch.plugin.ResourceZones(Ext.apply({
                        store: d
                    }, a.resourceZonesConfig));
                    a.resourceZonesPlug.init(a)
                }
                b.on('columnwidthchange', a.onColWidthChange, a);
                a.relayEvents(b, ['eventclick', 'eventlongpress', 'eventmousedown', 'eventmouseup', 'eventdblclick', 'eventcontextmenu', 'eventmouseenter', 'eventmouseleave', 'eventkeydown', 'eventkeyup', 'beforeeventresize', 'eventresizestart', 'eventpartialresize', 'beforeeventresizefinalize', 'eventresizeend', 'aftereventresize', 'beforeeventdrag', 'eventdragstart', 'eventdrag', 'beforeeventdropfinalize', 'eventdrop', 'aftereventdrop', 'beforedragcreate', 'dragcreatestart', 'beforedragcreatefinalize', 'dragcreateend', 'afterdragcreate', 'beforeeventadd']);
                if (!a.syncRowHeight) {
                    a.enableRowHeightInjection(e, b)
                }
                if (a.getDependencyStore()) {
                    a.addCls('sch-scheduler-with-dependencies')
                }
            },
            configureColumns: function(b) {
                var a = this;
                b = b || [{
                    xtype: 'scheduler_resourcenamecolumn'
                }];
                a.callParent(arguments);
                a.verticalColumns = a.verticalColumns || [Ext.apply({
                    xtype: 'verticaltimeaxis'
                }, a.timeAxisColumnCfg || {})];
                Ext.Array.each(a.verticalColumns, function(c) {
                    Ext.apply(c, {
                        timeAxis: a.timeAxis,
                        timeAxisViewModel: a.timeAxisViewModel,
                        cellTopBorderWidth: a.cellTopBorderWidth,
                        cellBottomBorderWidth: a.cellBottomBorderWidth
                    })
                });
                a.calendarColumns = [Ext.apply({
                    xtype: 'verticaltimeaxis',
                    width: 60,
                    timeAxis: a.timeAxis,
                    timeAxisViewModel: a.timeAxisViewModel,
                    cellTopBorderWidth: a.cellTopBorderWidth,
                    cellBottomBorderWidth: a.cellBottomBorderWidth
                }, a.calendarTimeAxisCfg || a.weekViewTimeAxisCfg || {})];
                if (a.isVertical()) {
                    a.columns = a.verticalColumns.concat(a.createResourceColumns(a.resourceColumnWidth || a.timeAxisViewModel.resourceColumnWidth));
                    a.store = a.timeAxis;
                    if (a.resourceStore.isGrouped()) {
                        a.timeAxis.group(a.resourceStore.groupField);
                        a.bindGroupingFeatureListener()
                    }
                } else {
                    if (a.isWeekView()) {
                        a.columns = [];
                        a.store = null;
                        a.on('beforerender', a.refreshCalendarColumns, a)
                    }
                }
            },
            applyViewSettings: function(c, d) {
                this.callParent(arguments);
                var a = this.getSchedulingView(),
                    b;
                if (this.orientation === 'vertical') {
                    b = c.timeColumnWidth || 60;
                    a.setColumnWidth(c.resourceColumnWidth || 100, !0);
                    a.setRowHeight(b, !0)
                }
            },
            onRender: function() {
                if (!this.isHorizontal()) {
                    this.reconfigureBufferedRendering(!0)
                }
                this.callParent(arguments)
            },
            afterRender: function() {
                var b = this;
                var a = this.getSchedulingView();
                this.callParent(arguments);
                if (this.isVertical()) {
                    this.onLockedViewResize(null, null, this.lockedGrid.getView().getHeight())
                } else {
                    if (this.isWeekView()) {
                        this.mon(this.timeAxis, this.calendarListeners);
                        this.mon(this.resourceStore, this.calendarResourceStoreListeners);
                        this.normalGrid.on(this.calendarNormalGridListeners)
                    }
                }
                if (this.infiniteScroll) {
                    a.on({
                        eventdragstart: this.doSuspendLayouts,
                        aftereventdrop: this.doResumeLayouts,
                        eventresizestart: this.doSuspendLayouts,
                        aftereventresize: this.doResumeLayouts,
                        scope: this
                    })
                }
                if (this.lockedGridDependsOnSchedule) {
                    a.on('itemupdate', this.onNormalViewItemUpdate, this)
                }
                this.relayEvents(this.getEventSelectionModel(), ['selectionchange', 'deselect', 'select'], 'event');
                this.getView().on('refresh', function() {
                    if (!b.isHorizontal()) {
                        b.reconfigureBufferedRendering()
                    }
                })
            },
            getTimeSpanDefiningStore: function() {
                return this.eventStore
            },
            destroy: function() {
                var a = this;
                if (a.destroyStores) {
                    a.getDependencyStore() && a.getDependencyStore().destroy();
                    a.getAssignmentStore() && a.getAssignmentStore().destroy();
                    a.getEventStore() && a.getEventStore().destroy();
                    a.getResourceStore() && a.getResourceStore().destroy()
                }
                Ext.destroyMembers(a, 'resourceZonesPlug');
                a.callParent(arguments)
            },
            scrollToDateCentered: function(b, f) {
                var a = this.getSchedulingView();
                if (a.isWeekView()) {
                    var c = a.weekview.getColumnsBy(function(a) {
                        return a.start <= b && a.end > b
                    })[0];
                    if (c) {
                        var d = a.getWidth() / 2;
                        var e = a.getViewContainerHeight() / 2;
                        a.scrollHorizontallyTo(Math.max(c.getLocalX() - d, 0));
                        a.scrollVerticallyTo(Math.max(a.getCoordinateFromDate(b, !0) - e, 0))
                    }
                } else {
                    return this.callParent(arguments)
                }
            }
        }
    },
    doSuspendLayouts: function() {
        this.timeAxis.on({
            beginreconfigure: this.onBeginReconfigure,
            endreconfigure: this.onEndReconfigure,
            scope: this
        });
        this.lockedGrid.suspendLayouts();
        this.normalGrid.suspendLayouts()
    },
    doResumeLayouts: function() {
        this.timeAxis.un({
            beginreconfigure: this.onBeginReconfigure,
            endreconfigure: this.onEndReconfigure,
            scope: this
        });
        this.lockedGrid.resumeLayouts();
        this.normalGrid.resumeLayouts()
    },
    onBeginReconfigure: function() {
        this.normalGrid.resumeLayouts()
    },
    onEndReconfigure: function() {
        this.normalGrid.suspendLayouts()
    },
    onColWidthChange: function(b, a) {
        if (this.isVertical()) {
            this.resourceColumnWidth = a;
            this.refreshResourceColumns()
        } else {
            if (this.isWeekView()) {
                this.weekViewColumnWidth = a;
                this.refreshCalendarColumns()
            }
        }
    },
    enableRowHeightInjection: function(b, d) {
        var a = this;
        var c = new Ext.XTemplate('{%', 'this.processCellValues(values);', 'this.nextTpl.applyOut(values, out, parent);', '%}', {
            priority: 1,
            processCellValues: Ext.Function.bind(a.embedRowHeight, a)
        });
        b.addCellTpl(c);
        Ext.Array.each(this.columns, function(a) {
            a.hasCustomRenderer = !0
        });
        Ext.Array.each(this.horizontalColumns, function(a) {
            a.hasCustomRenderer = !0
        })
    },
    embedRowHeight: function(b) {
        var e = this,
            a = e.getSchedulingView();
        if (a.isHorizontal()) {
            var c = 1;
            if (a.rowHasDynamicRowHeight(b.record)) {
                var d = b.record;
                var g = a.eventLayout.horizontal;
                c = g.getNumberOfBands(d, function() {
                    return a.getEventStore().filterEventsForResource(d, a.timeAxis.isRangeInAxis, a.timeAxis)
                })
            }
            var f = c * e.getRowHeight() - (c - 1) * a.barMargin - a.cellTopBorderWidth - a.cellBottomBorderWidth;
            b.style = (b.style || '') + ';height:' + f + 'px;'
        }
    },
    getEventSelectionModel: function() {
        return this.getSchedulingView().getEventSelectionModel()
    },
    refreshResourceColumns: function() {
        var a = this.resourceColumnWidth || this.timeAxisViewModel.resourceColumnWidth;
        this.reconfigure(this.verticalColumns.concat(this.createResourceColumns(a)))
    },
    onCalendarColumnResize: function(c, a, b) {
        if (b !== this.timeAxisViewModel.weekViewColumnWidth) {
            this.timeAxisViewModel.setViewColumnWidth(b, !0)
        }
        this.getSchedulingView().weekview.repaintEventsForColumn(a, c.columnManager.indexOf(a))
    },
    onCalendarResourceStoreChange: function() {
        this.getSchedulingView().refreshView()
    },
    refreshCalendarColumns: function() {
        var b = this.createCalendarRows();
        var a = this.createCalendarColumns();
        this.reconfigure(b, this.calendarColumns.concat(a))
    },
    setGroupingFeatureDisabled: function(b) {
        var c = this,
            a = c.normalGrid.view;
        if (!a.groupingFeature) {
            return
        }
        a.groupingFeature[b ? 'disable' : 'enable']();
        a = c.lockedGrid.view;
        a.groupingFeature[b ? 'disable' : 'enable']()
    },
    refreshGroupingStore: function() {
        var a = this.normalGrid.view.groupingFeature;
        if (a) {
            a.dataSource.processStore(this.timeAxis)
        }
    },
    bindGroupingFeatureListener: function() {
        this.mon(this.timeAxis, 'reconfigure', this.refreshGroupingStore, this, {
            priority: 10
        })
    },
    unbindGroupingFeatureListener: function() {
        this.mun(this.timeAxis, 'reconfigure', this.refreshGroupingStore)
    },
    setMode: function(b, m) {
        var a = this;
        if (!a.normalGrid) {
            a.on('afterrender', function() {
                a.setMode(b, !0)
            });
            return
        }
        var d = typeof b === 'string' ? b : b.mode;
        if (!d) {
            throw new Error('Mode is undefined')
        }
        if (d === 'calendar') {
            d = 'weekview'
        }
        var c;
        if (b.viewPreset) {
            c = [b.viewPreset, b.startDate || null, b.endDate || null]
        }
        if (d === a.mode && !m) {
            c && a.setViewPreset.apply(a, c);
            return
        }
        if (a.fireEvent('beforemodechange', a, b) !== !1) {
            a.mode = d;
            if (a.isHorizontal()) {
                a.removeCls(a.verticalCls).removeCls(a.weekviewCls).addCls(a.horizontalCls)
            } else {
                if (a.isVertical()) {
                    a.removeCls(a.horizontalCls).removeCls(a.weekviewCls).addCls(a.verticalCls)
                } else {
                    if (a.isWeekView()) {
                        a.removeCls(a.horizontalCls).removeCls(a.verticalCls).addCls(a.weekviewCls)
                    }
                }
            }
            var l = a.normalGrid,
                n = a.lockedGrid.getView(),
                e = a.getSchedulingView(),
                k = l.headerCt;
            a.suspendRefresh();
            Ext.suspendLayouts();
            a.setGroupingFeatureDisabled(!a.isHorizontal());
            a.unbindGroupingFeatureListener();
            var f = a.isWeekView();
            var g = e.isWeekView();
            if (g && !f || !g && f) {
                c = c || a._oldViewPresetArgs || [f ? 'week' : 'weekAndDay'];
                a._oldViewPresetArgs = [a.viewPreset, a.timeAxis.getStart(), a.timeAxis.getEnd()]
            }
            e.setMode(d);
            k.removeAll(!0);
            a.reconfigureBufferedRendering();
            if (!a.isWeekView()) {
                a.timeAxis.setMode('plain');
                a.mun(a.timeAxis, a.calendarListeners)
            } else {
                a.timeAxis.setMode('week');
                a.mon(a.timeAxis, a.calendarListeners)
            }
            c && a.setViewPreset.apply(a, c);
            if (a.isHorizontal()) {
                a.mun(a.resourceStore, a.verticalListeners);
                a.mun(a.resourceStore, a.calendarResourceStoreListeners);
                a.normalGrid.un(a.calendarNormalGridListeners);
                e.setRowHeight(a.getRowHeight(), !0);
                a.reconfigure(a.resourceStore, a.horizontalColumns);
                if (a.horizontalLockedWidth !== null) {
                    a.lockedGrid.setWidth(a.horizontalLockedWidth)
                }
            } else {
                if (a.isWeekView()) {
                    a.mun(a.resourceStore, a.verticalListeners);
                    a.mon(a.resourceStore, a.calendarResourceStoreListeners);
                    a.normalGrid.on(a.calendarNormalGridListeners);
                    a.bindGroupingFeatureListener();
                    a.refreshCalendarColumns();
                    e.setRowHeight(a.getRowHeight(), !0);
                    e.setColumnWidth(a.timeAxisViewModel.weekViewColumnWidth || 100, !0)
                } else {
                    a.normalGrid.un(a.calendarNormalGridListeners);
                    a.mun(a.resourceStore, a.calendarResourceStoreListeners);
                    var h = 0;
                    a.horizontalLockedWidth = a.lockedGrid.getWidth();
                    a.mon(a.resourceStore, a.verticalListeners);
                    a.bindGroupingFeatureListener();
                    a.reconfigure(a.timeAxis, a.verticalColumns.concat(a.createResourceColumns(a.resourceColumnWidth || a.timeAxisViewModel.resourceColumnWidth)));
                    Ext.Array.each(a.lockedGrid.query('gridcolumn'), function(a) {
                        h += a.rendered ? a.getWidth() : a.width || 100
                    });
                    e.setColumnWidth(a.timeAxisViewModel.resourceColumnWidth || 100, !0);
                    a.lockedGrid.setWidth(h)
                }
            }
            var i = a.resourceStore.groupField;
            if (i) {
                a.store.group(i)
            }
            a.resumeRefresh(!1);
            var j = a.getSplitter();
            if (j) {
                j.setVisible(d === 'horizontal')
            }
            a.refreshViews(!1);
            Ext.resumeLayouts(!0);
            a.fireEvent('modechange', a, b)
        }
    },
    reconfigureBufferedRendering: function(e) {
        if (this.bufferedRenderer) {
            var a = this.lockedGrid.bufferedRenderer,
                c = this.normalGrid.bufferedRenderer,
                b;
            if (!this.isHorizontal()) {
                b = this.timeAxis.getCount();
                this.__oldLeadingBufferZone = a.leadingBufferZone
            } else {
                if (this.__oldLeadingBufferZone) {
                    b = this.__oldLeadingBufferZone;
                    this.__oldLeadingBufferZone = null
                }
            }
            if (!e && a.scroller && a.scroller.getLockedScroller()) {
                var f = this.lockedGrid.view.getHeight(),
                    d = Math.ceil(f / a.rowHeight) + a.trailingBufferZone + b;
                a.setViewSize(d, !0);
                c.setViewSize(d, !0)
            }
            a.leadingBufferZone = c.leadingBufferZone = b
        }
    },
    createCalendarRows: function() {
        var b = this,
            a = b.timeAxis.getRowTicks();
        b.timeAxisViewModel.calendarRowsAmount = a.length;
        return new Ext.data.Store({
            model: 'Sch.model.TimeAxisTick',
            data: a
        })
    },
    createCalendarColumns: function() {
        var a = this,
            c = a.timeAxis,
            b = c.headerConfig.middle,
            d = [],
            e;
        var f = a.startTime = c.startTime;
        var g = a.endTime = c.endTime;
        c.each(function(j) {
            var c = j.getStartDate();
            if (e !== c.getDay()) {
                e = c.getDay();
                c.setHours(f);
                var i = new Date(c);
                i.setHours(g);
                var h = {
                    xclass: a.calendarColumnClass || a.weekViewColumnClass,
                    renderer: a.mainRenderer,
                    scope: a,
                    start: c,
                    end: i
                };
                if (b.renderer) {
                    h.text = b.renderer.call(b.scope || a, c, i, h, d.length, a.getEventStore())
                } else {
                    h.text = Ext.Date.format(c, b.dateFormat)
                }
                d.push(h)
            }
        });
        a.timeAxisViewModel.updateCalendarColumnDates(d);
        return d
    },
    onNormalViewItemUpdate: function(b) {
        if (this.lockedGridDependsOnSchedule) {
            var a = this.lockedGrid.getView();
            a.suspendEvents();
            a.refreshNode(a.indexOf(b));
            if (this.syncRowHeight) {
                this.syncRowHeights()
            }
            a.resumeEvents()
        }
    },
    onLockedViewResize: function(e, d, a, c, b) {
        if (!this.isHorizontal() && a !== b) {
            this.timeAxisViewModel.update(a - 21)
        }
    },
    setRowHeight: function(b, a) {
        a = a || !this.lockedGrid;
        this.readRowHeightFromPreset = !1;
        this.timeAxisViewModel.setViewRowHeight(b, a)
    }
}, 0, 0, 0, 0, 0, 0, [Sch.mixin, 'SchedulerPanel'], 0);
Ext.cmd.derive('Sch.plugin.CurrentTimeLine', Sch.plugin.Lines, {
    updateInterval: 60000,
    showHeaderElements: !0,
    autoUpdate: !0,
    expandToFitView: !0,
    timer: null,
    init: function(c) {
        if (Ext.getVersion('touch')) {
            this.showHeaderElements = !1
        }
        var a = new Ext.data.JsonStore({
            autoDestroy: !0,
            fields: ['Date', 'Cls', 'Text'],
            data: [{
                Date: new Date(),
                Cls: 'sch-todayLine',
                Text: this.L('tooltipText')
            }]
        });
        var b = a.first();
        if (this.autoUpdate) {
            this.timer = setInterval(function() {
                b.set('Date', new Date())
            }, this.updateInterval)
        }
        this.store = a;
        Sch.plugin.Lines.prototype.init.apply(this, arguments)
    },
    destroy: function() {
        clearInterval(this.timer);
        this.timer = null;
        if (this.store.autoDestroy) {
            this.store.destroy()
        }
        Sch.plugin.Lines.prototype.destroy.apply(this, arguments)
    }
}, 0, 0, 0, 0, ['plugin.scheduler_currenttimeline'], [
    [Sch.mixin.Localizable.prototype.mixinId || Sch.mixin.Localizable.$className, Sch.mixin.Localizable]
], [Sch.plugin, 'CurrentTimeLine'], 0);
Ext.cmd.derive('Sch.patches.LockingScroller', Sch.util.Patch, {
    target: 'Ext.scroll.Scroller',
    minVersion: '6.2.0',
    overrides: {
        scrollTo: function() {
            if (this.getNormalScroller && !this.getNormalScroller()) {
                if (Sch.panel.TimelineGridPanel && this.component instanceof Sch.panel.TimelineGridPanel || Sch.panel.TimelineTreePanel && this.component instanceof Sch.panel.TimelineTreePanel) {
                    return
                }
            }
            return this.callParent(arguments)
        }
    }
}, 0, 0, 0, 0, 0, 0, [Sch.patches, 'LockingScroller'], 0);
Ext.cmd.derive('Sch.plugin.NonWorkingTime', Sch.plugin.Zones, {
    alternateClassName: 'Gnt.feature.WorkingTime',
    expandToFitView: !0,
    calendar: {
        type: 'calendar'
    },
    timeAxis: null,
    init: function(a) {
        this.calendar = this.calendar && Ext.StoreMgr.lookup(this.calendar);
        if (!this.calendar) {
            Ext.Error.raise("Required attribute 'calendar' missed during initialization of 'Sch.plugin.NonWorkingTime'")
        }
        this.store = new Ext.data.Store({
            model: 'Sch.model.Range',
            autoDestroy: !0
        });
        this.timeAxis = a.getTimeAxis();
        Sch.plugin.Zones.prototype.init.apply(this, arguments);
        if (a.isWeekView()) {
            a.normalGrid.headerCt.on('afterlayout', this.onViewChange, this)
        } else {
            a.on('viewchange', this.onViewChange, this)
        }
        this.bindCalendar(this.calendar)
    },
    bindCalendar: function(a) {
        var b = {
            datachanged: this.refresh,
            update: this.refresh,
            scope: this,
            delay: 1
        };
        if (this.calendar) {
            this.calendar.un(b)
        }
        if (a) {
            a.on(b)
        }
        this.calendar = a;
        this.refresh()
    },
    onViewReady: function() {
        Sch.plugin.Zones.prototype.onViewReady.apply(this, arguments);
        if (this.schedulerView.isWeekView()) {
            this.onTimelinePanelBeforeModeChange();
            this.headerListeners = {}
        }
    },
    onViewChange: function() {
        var b = Sch.util.Date;
        var a = b.isUnitGreater(this.timeAxis.unit, b.WEEK);
        this.setDisabled(a);
        if (!a) {
            this.refresh()
        }
    },
    setDisabled: function(b) {
        var a = this.disabled;
        Sch.plugin.Zones.prototype.setDisabled.apply(this, arguments);
        if (a && !b) {
            this.refresh()
        }
    },
    refresh: function() {
        if (this.store && !this.store.destroyed) {
            this.store.removeAll(!0);
            if (this.calendar) {
                this.store.add(this.calendar.getHolidaysRanges(this.timeAxis.getStart(), this.timeAxis.getEnd(), !0))
            }
        }
    },
    destroy: function() {
        this.bindCalendar(null);
        Sch.plugin.Zones.prototype.destroy.apply(this, arguments)
    }
}, 0, 0, 0, 0, ['plugin.scheduler_nonworkingtime'], 0, [Sch.plugin, 'NonWorkingTime', Gnt.feature, 'WorkingTime'], 0);
Ext.cmd.derive('Sch.mixin.TimelinePanel', Sch.mixin.AbstractTimelinePanel, {
    destroyStores: !1,
    bufferCoef: 5,
    bufferThreshold: 0.2,
    infiniteScroll: !1,
    showCrudManagerMask: !0,
    highlightWeekends: !1,
    zoomOnTimeAxisDoubleClick: !0,
    showTodayLine: !1,
    calendar: null,
    horizontalTimeAxisColumnCfg: null,
    switchToDayViewOnWeekDayHeaderDblClick: !0,
    waitingForAutoTimeSpan: !1,
    columnLinesFeature: null,
    renderWaitListener: null,
    schedulePinchThreshold: 30,
    pinchStartDistanceX: null,
    pinchStartDistanceY: null,
    pinchDistanceX: null,
    pinchDistanceY: null,
    horizontalColumns: null,
    forceDefineTimeSpanByStore: !1,
    workingTimePlugin: null,
    split: !0,
    refreshSuspensionCount: 0,
    tipCfg: {
        cls: 'sch-tip',
        showDelay: 400,
        hideDelay: 0,
        constrain: !0,
        autoHide: !0,
        anchor: 't'
    },
    inheritables: function() {
        return {
            columnLines: !0,
            enableLocking: !0,
            lockable: !0,
            stateEvents: ['viewchange'],
            syncRowHeight: !1,
            cellTopBorderWidth: 0,
            layout: 'border',
            initComponent: function() {
                if (this.partnerTimelinePanel) {
                    if (typeof this.partnerTimelinePanel === 'string') {
                        this.partnerTimelinePanel = Ext.getCmp(this.partnerTimelinePanel)
                    }
                    this.timeAxisViewModel = this.partnerTimelinePanel.timeAxisViewModel;
                    this.timeAxis = this.partnerTimelinePanel.getTimeAxis();
                    this.startDate = this.timeAxis.getStart();
                    this.endDate = this.timeAxis.getEnd()
                }
                this._initializeTimelinePanel();
                this.configureChildGrids();
                this.forceFit = !1;
                this.configureColumns(this.columns);
                if (Ext.getVersion().equals('6.0.2.437')) {
                    this.viewConfig = Ext.apply(this.viewConfig || {}, {
                        componentLayout: 'timeline_tablelayout'
                    })
                }
                var g = this.normalViewConfig = this.normalViewConfig || {};
                var f = this.getId();
                Ext.apply(this.normalViewConfig, {
                    id: f + '-timelineview',
                    eventPrefix: this.autoGenId ? null : f,
                    timeAxisViewModel: this.timeAxisViewModel,
                    eventBorderWidth: this.eventBorderWidth,
                    timeAxis: this.timeAxis,
                    readOnly: this.readOnly,
                    mode: this.mode,
                    rtl: this.rtl,
                    cellBorderWidth: this.cellBorderWidth,
                    cellTopBorderWidth: this.cellTopBorderWidth,
                    cellBottomBorderWidth: this.cellBottomBorderWidth,
                    infiniteScroll: this.infiniteScroll,
                    bufferCoef: this.bufferCoef,
                    bufferThreshold: this.bufferThreshold
                });
                Ext.Array.each(['eventRendererScope', 'eventRenderer', 'dndValidatorFn', 'resizeValidatorFn', 'createValidatorFn', 'tooltipTpl', 'validatorFnScope', 'eventResizeHandles', 'enableEventDragDrop', 'enableDragCreation', 'resizeConfig', 'createConfig', 'tipCfg', 'getDateConstraints'], function(a) {
                    if (a in this) {
                        g[a] = this[a]
                    }
                }, this);
                this.callParent(arguments);
                this.lockedGrid.view.addCls('sch-lockedview');
                if (this.rtl) {
                    this.lockedGrid.view.addCls('sch-locked-column-fixer');
                    this.addCls('sch-rtl')
                } else {
                    this.addCls('sch-ltr')
                }
                var d = this.plugins = [].concat(this.plugins || []);
                if (this.highlightWeekends) {
                    var a = this.getCalendar();
                    a = a && Ext.StoreMgr.lookup(a) || new Sch.data.Calendar();
                    this.workingTimePlugin = new Sch.plugin.NonWorkingTime({
                        calendar: a
                    });
                    this.timeAxisViewModel.setCalendar(a);
                    d.push(this.workingTimePlugin);
                    this.addCls('sch-timelinepanel-highlightweekends')
                }
                if (this.showTodayLine) {
                    this.todayLinePlugin = new Sch.plugin.CurrentTimeLine();
                    d.push(this.todayLinePlugin)
                }
                this.patchNavigationModel(this);
                if (Ext.supports.Touch) {
                    this.timeAxisViewModel.on('update', this.refreshHeaderContainerScrollable, this)
                }
                this.setViewPreset(this.viewPreset, this.startDate || this.timeAxis.getStart(), this.endDate || this.timeAxis.getEnd(), !0);
                if (!this.startDate) {
                    var e = this.crudManager;
                    if (e && !e.loaded) {
                        this.bindAutoTimeSpanListeners()
                    } else {
                        var b = this.getTimeSpanDefiningStore();
                        if (b.isTreeStore ? b.getRoot() && b.getRoot().childNodes.length : b.getCount()) {
                            this.applyStartEndDatesFromStore()
                        } else {
                            if (b.isLoading() || this.forceDefineTimeSpanByStore) {
                                this.bindAutoTimeSpanListeners()
                            }
                        }
                    }
                }
                var c = this.columnLines;
                if (c) {
                    this.columnLinesFeature = new Sch.feature.ColumnLines(Ext.isObject(c) ? c : undefined);
                    this.columnLinesFeature.init(this);
                    this.columnLines = !0
                }
                this.relayEvents(this.getSchedulingView(), ['beforetooltipshow', 'scheduleclick', 'scheduledblclick', 'schedulecontextmenu', 'schedulelongpress', 'schedulepinch', 'schedulepinchstart', 'schedulepinchend']);
                this.on('zoomchange', function() {
                    this.normalGrid.scrollTask.cancel()
                });
                if (this.crudManager) {
                    if (!this.crudManager.autoSync && this.showCrudManagerMask) {
                        this.mon(this.crudManager, {
                            beforesend: this.beforeCrudOperationStart,
                            synccanceled: this.onCrudOperationComplete,
                            loadcanceled: this.onCrudOperationComplete,
                            load: this.onCrudOperationComplete,
                            sync: this.onCrudOperationComplete,
                            requestfail: this.onCrudOperationComplete,
                            scope: this
                        });
                        if (this.crudManager.isLoading()) {
                            this.beforeCrudOperationStart(this.crudManager, null, 'load')
                        }
                    }
                    this.mon(this.crudManager, {
                        beforeloadapply: this.onCrudBeforeLoad,
                        load: this.onCrudLoad,
                        scope: this
                    })
                }
                this.afterInitComponent()
            },
            refreshHeaderContainerScrollable: function() {
                var a = this.getSchedulingView().headerCt.getScrollable();
                if (!a) {
                    return
                }
                if (Ext.getVersion().isLessThan('6.0.1')) {
                    var b = a.isConfiguring;
                    a.isConfiguring = !0;
                    a.refresh();
                    a.refreshAxes();
                    a.isConfiguring = b
                } else {
                    a.refresh()
                }
            },
            getState: function() {
                var a = this,
                    b = a.callParent(arguments);
                Ext.apply(b, {
                    viewPreset: a.viewPreset,
                    startDate: a.getStart(),
                    endDate: a.getEnd(),
                    zoomMinLevel: a.zoomMinLevel,
                    zoomMaxLevel: a.zoomMaxLevel,
                    currentZoomLevel: a.currentZoomLevel
                });
                return b
            },
            applyState: function(a) {
                var b = this;
                b.callParent(arguments);
                if (a && a.viewPreset) {
                    b.setViewPreset(a.viewPreset, a.startDate, a.endDate)
                }
                if (a && a.currentZoomLevel) {
                    b.zoomToLevel(a.currentZoomLevel)
                }
            },
            setTimeSpan: function() {
                this.callParent(arguments);
                if (this.waitingForAutoTimeSpan) {
                    this.unbindAutoTimeSpanListeners(!1);
                    this.getView().refresh()
                }
                if (!this.normalGrid.getView().viewReady) {
                    this.getView().refresh()
                }
            },
            onBoxReady: function() {
                var a = this;
                a.callParent(arguments);
                if (a.partnerTimelinePanel) {
                    if (a.partnerTimelinePanel.rendered) {
                        a.setupPartnerTimelinePanel(a.partnerTimelinePanel)
                    } else {
                        a.partnerTimelinePanel.on('boxready', a.setupPartnerTimelinePanel, a)
                    }
                }
                a.normalGrid.on({
                    collapse: a.onNormalGridCollapse,
                    expand: a.onNormalGridExpand,
                    scope: a
                });
                a.normalGrid.headerCt.el.on({
                    click: a.onHeaderClick,
                    dblclick: a.onHeaderClick,
                    contextmenu: a.onHeaderClick,
                    delegate: '.sch-daycolumn-header',
                    scope: a
                });
                a.lockedGrid.on({
                    collapse: a.onLockedGridCollapse,
                    expand: a.onLockedGridExpand,
                    scope: a
                });
                a.lockedGrid.on({
                    itemdblclick: a.onLockedGridItemDblClick,
                    scope: a
                });
                if (Ext.supports.Touch) {
                    this.getSchedulingView().on({
                        schedulepinchstart: this.onSchedulePinchStart,
                        schedulepinch: this.onSchedulePinch,
                        schedulepinchend: this.onSchedulePinchEnd,
                        scope: this
                    })
                }
            }
        }
    },
    scrollToDate: function(b, d) {
        var a = this.getSchedulingView();
        if (a.isWeekView()) {
            var c = a.weekview.getColumnsBy(function(a) {
                return a.start <= b && a.end > b
            })[0];
            if (c) {
                a.scrollHorizontallyTo(c.getLocalX());
                a.scrollVerticallyTo(a.getCoordinateFromDate(b, !0))
            }
        } else {
            return Sch.mixin.AbstractTimelinePanel.prototype.scrollToDate.apply(this, arguments)
        }
    },
    bindAutoTimeSpanListeners: function() {
        var a = this.getTimeSpanDefiningStore();
        this.waitingForAutoTimeSpan = !0;
        this.suspendRefresh();
        this.mon(a, 'load', this.applyStartEndDatesFromStore, this);
        if (a.isTreeStore) {
            this.mon(a, 'rootchange', this.applyStartEndDatesFromStore, this);
            this.mon(a, 'nodeappend', this.applyStartEndDatesAfterTreeAppend, this)
        } else {
            this.mon(a, 'add', this.applyStartEndDatesFromStore, this)
        }
    },
    getTimeSpanDefiningStore: function() {
        throw 'Abstract method called'
    },
    unbindAutoTimeSpanListeners: function(b) {
        this.waitingForAutoTimeSpan = !1;
        var a = this.getTimeSpanDefiningStore();
        this.resumeRefresh(b);
        a.un('load', this.applyStartEndDatesFromStore, this);
        if (a.isTreeStore) {
            a.un('rootchange', this.applyStartEndDatesFromStore, this);
            a.un('nodeappend', this.applyStartEndDatesAfterTreeAppend, this)
        } else {
            a.un('add', this.applyStartEndDatesFromStore, this)
        }
    },
    applyStartEndDatesAfterTreeAppend: function() {
        var a = this.getTimeSpanDefiningStore();
        if (!a.isSettingRoot && !a.__loading) {
            this.applyStartEndDatesFromStore()
        }
    },
    applyStartEndDatesFromStore: function() {
        var b = this.getTimeSpanDefiningStore();
        var a = b.getTotalTimeSpan();
        if (a.end && a.start && a.end - a.start === 0) {
            a.start = Sch.util.Date.add(a.start, this.timeAxis.mainUnit, -1);
            a.end = Sch.util.Date.add(a.end, this.timeAxis.mainUnit, 1)
        }
        this.setTimeSpan(a.start || new Date(), a.end)
    },
    onLockedGridItemDblClick: function(d, a, e, b, c) {
        if (this.isVertical() && a) {
            this.fireEvent('timeheaderdblclick', this, a.get('start'), a.get('end'), b, c)
        }
    },
    onHeaderClick: function(a, g) {
        var c = a.getTarget('.x-column-header');
        var e = [].indexOf.call(c.parentElement.childNodes, c);
        var b = this.normalGrid.getColumns()[e];
        if (Sch.column.Day && b instanceof Sch.column.Day) {
            var d = b.start;
            var f = b.end;
            this.fireEvent('timeheader' + a.type, this, d, f, a);
            if (a.type === 'dblclick' && this.switchToDayViewOnWeekDayHeaderDblClick) {
                this.setViewPreset('day', d)
            }
        }
    },
    getSchedulingView: function() {
        return this.normalGrid && this.normalGrid.view
    },
    getHorizontalTimeAxisColumn: function() {
        return this.getSchedulingView().getHorizontalTimeAxisColumn()
    },
    configureColumns: function(a) {
        var b = [];
        var c = [];
        a = a || [];
        if (a.items) {
            this.columns = Ext.apply({}, this.columns);
            a = this.columns.items = a.items.slice()
        } else {
            a = this.columns = a.slice()
        }
        Ext.Array.each(a, function(d) {
            if (d.position === 'right' || d.locked === !1) {
                if (!Ext.isNumber(d.width)) {
                    Ext.Error.raise('"Right" columns must have a fixed width')
                }
                d.locked = !1;
                c.push(d)
            } else {
                d.locked = !0;
                b.push(d)
            }
            d.lockable = !1
        });
        if (a.length === 0) {
            this.split = !1
        }
        Ext.Array.erase(a, 0, a.length);
        Ext.Array.insert(a, 0, b.concat(Ext.apply({
            xtype: 'timeaxiscolumn',
            timeAxisViewModel: this.timeAxisViewModel,
            trackHeaderOver: this.trackHeaderOver,
            renderer: this.mainRenderer,
            variableRowHeight: this.variableRowHeight,
            scope: this
        }, this.horizontalTimeAxisColumnCfg || {})).concat(c));
        this.horizontalColumns = a.slice()
    },
    mainRenderer: function(k, a, h, j, d) {
        var c = this.renderers,
            i = this.isVertical() ? this.getResourceStore().getAt(d) : h,
            e = '&nbsp;';
        a.rowHeight = null;
        for (var b = 0; b < c.length; b++) {
            e += c[b].fn.call(c[b].scope || this, k, a, i, j, d) || ''
        }
        if (this.variableRowHeight) {
            var f = this.getSchedulingView();
            var g = this.getRowHeight();
            a.style = 'height:' + ((a.rowHeight || g) - f.cellTopBorderWidth - f.cellBottomBorderWidth) + 'px'
        }
        return e
    },
    onNormalGridCollapse: function() {
        var a = this;
        if (!a.normalGrid.reExpander) {
            a.normalGrid.reExpander = a.normalGrid.placeholder
        }
        if (!a.lockedGrid.rendered) {
            a.lockedGrid.on('render', a.onNormalGridCollapse, a, {
                delay: 1
            })
        } else {
            a.lockedGrid.savedWidth = a.lockedGrid.getWidth();
            if (a.lockedGrid.collapsed) {
                a.lockedGrid.expand()
            }
            a.lockedGrid.setWidth(a.getWidth() - a.normalGrid.getPlaceholder().getWidth());
            a.addCls('sch-normalgrid-collapsed')
        }
    },
    onNormalGridExpand: function() {
        this.removeCls('sch-normalgrid-collapsed')
    },
    onLockedGridCollapse: function() {
        var a = this;
        if (a.normalGrid.collapsed) {
            a.normalGrid.expand()
        }
    },
    onLockedGridExpand: function() {
        if (this.lockedGrid.savedWidth) {
            this.lockedGrid.setWidth(this.lockedGrid.savedWidth)
        }
    },
    beforeCrudOperationStart: function(b, c, a) {
        if (this.rendered) {
            this.setLoading({
                msg: a === 'load' ? this.L('loadingText') : this.L('savingText')
            })
        } else {
            Ext.destroy(this.renderWaitListener);
            this.renderWaitListener = this.on('render', Ext.Function.bind(this.beforeCrudOperationStart, this, Array.prototype.slice.apply(arguments)), this, {
                delay: 1,
                destroyable: !0
            })
        }
    },
    onCrudBeforeLoad: function() {
        this.suspendRefresh()
    },
    onCrudLoad: function() {
        this.resumeRefresh(!0)
    },
    onCrudOperationComplete: function() {
        Ext.destroy(this.renderWaitListener);
        this.setLoading(!1)
    },
    onSchedulePinchStart: function(b, a) {
        this.pinchStartDistanceX = Math.abs(a.touches[0].pageX - a.touches[1].pageX);
        this.pinchStartDistanceY = Math.abs(a.touches[0].pageY - a.touches[1].pageY)
    },
    onSchedulePinch: function(b, a) {
        this.pinchDistanceX = Math.abs(a.touches[0].pageX - a.touches[1].pageX);
        this.pinchDistanceY = Math.abs(a.touches[0].pageY - a.touches[1].pageY)
    },
    onSchedulePinchEnd: function(d) {
        var a = this.pinchDistanceX;
        var b = this.pinchDistanceY;
        var e = this.isHorizontal();
        if (Math.abs(a - this.pinchStartDistanceX) > this.schedulePinchThreshold) {
            var c = Math.abs(a / this.pinchStartDistanceX);
            if (e) {
                c > 1 ? this.zoomIn() : this.zoomOut()
            } else {
                this.timeAxisViewModel.setViewColumnWidth(c * this.timeAxisViewModel.resourceColumnWidth)
            }
        }
        if (Math.abs(b - this.pinchStartDistanceY) > this.schedulePinchThreshold) {
            var f = Math.abs(b / this.pinchStartDistanceY);
            d.setRowHeight(d.getRowHeight() * f)
        }
        this.pinchStartDistanceX = this.pinchStartDistanceY = this.pinchDistanceX = this.pinchDistanceY = null
    },
    patchNavigationModel: function(c) {
        c.getView().getNavigationModel().focusItem = function(a) {
            a.addCls(this.focusCls);
            if ((Ext.isIE || Ext.isEdge) && !a.hasCls('sch-timetd') || !(Ext.isIE || Ext.isEdge) && c.isHorizontal()) {
                a.focus()
            }
        };
        var a = c.lockedGrid.getView();
        var b = c.normalGrid.getView();
        a.on('rowclick', function(e, d, f, a) {
            if (b.lastFocused) {
                b.lastFocused.rowIdx = a;
                b.lastFocused.record = d
            } else {
                if (Ext.isIE) {
                    b.lastFocused = this.lastFocused
                }
            }
        });
        b.on('rowclick', function(e, d, f, b) {
            if (a.lastFocused) {
                a.lastFocused.rowIdx = b;
                a.lastFocused.record = d
            } else {
                if (Ext.isIE) {
                    a.lastFocused = this.lastFocused
                }
            }
        })
    },
    configureChildGrids: function() {
        var a = this;
        a.lockedGridConfig = Ext.apply({}, a.lockedGridConfig || {});
        a.normalGridConfig = Ext.apply({}, a.schedulerConfig || a.normalGridConfig || {});
        var b = a.lockedGridConfig,
            c = a.normalGridConfig;
        if (a.lockedXType) {
            b.xtype = a.lockedXType
        }
        if (a.normalXType) {
            c.xtype = a.normalXType
        }
        Ext.applyIf(b, {
            useArrows: !0,
            animCollapse: !1,
            collapseDirection: 'left',
            trackMouseOver: !1
        });
        Ext.applyIf(c, {
            viewType: a.viewType,
            enableColumnMove: !1,
            enableColumnResize: !1,
            enableColumnHide: !1,
            trackMouseOver: !1,
            collapseDirection: 'right',
            collapseMode: 'placeholder',
            animCollapse: !1
        });
        if (a.isVertical()) {
            b.store = c.store = a.timeAxis
        }
        if (b.width) {
            a.syncLockedWidth = Ext.emptyFn;
            b.scroll = Ext.supports.Touch ? 'both' : 'horizontal';
            b.scrollerOwner = !0
        }
    },
    afterInitComponent: function() {
        var a = this;
        var b = a.lockedGrid.getView();
        var d = a.normalGrid.getView();
        var e = a.store && a.store.isTreeStore;
        if (a.normalGrid.collapsed) {
            a.normalGrid.collapsed = !1;
            d.on('boxready', function() {
                a.normalGrid.collapse()
            }, a, {
                delay: 10
            })
        }
        if (a.lockedGrid.collapsed) {
            a.lockedGrid.collapsed = !1;
            b.on('boxready', function() {
                a.lockedGrid.collapse()
            }, a, {
                delay: 10
            });
            if (b.bufferedRenderer) {
                b.bufferedRenderer.disabled = !0
            }
        }
        if (e) {
            this.setupLockableFilterableTree()
        }
        var c = this.getSplitter();
        if (c) {
            c.addCls('sch-timelinepanel-splitter');
            c.setVisible(this.isHorizontal())
        }
        if (Ext.versions.extjs.isGreaterThan('6.2.0')) {
            this.normalGrid.on('cellclick', this.onNormalGridCellClick, this)
        }
        if (this.zoomOnTimeAxisDoubleClick) {
            this.on('timeheaderdblclick', function(c, a, b) {
                if (this.isHorizontal()) {
                    this.zoomToSpan({
                        start: a,
                        end: b
                    })
                }
            })
        }
    },
    onNormalGridCellClick: function(h, e, f, g, i, b, c) {
        if (e.className.match('sch-timetd')) {
            var a = this.getSelectionModel();
            var d = c.ctrlKey && a.isSelected(b);
            if (d) {
                a.deselect(b)
            } else {
                a.select(b, c.ctrlKey)
            }
        }
    },
    getSplitter: function() {
        return this.child('splitter')
    },
    setupLockableFilterableTree: function() {
        var c = this;
        var a = c.lockedGrid.getView();
        var b = Sch.mixin.FilterableTreeView.prototype;
        a.initTreeFiltering = b.initTreeFiltering;
        a.onFilterChangeStart = b.onFilterChangeStart;
        a.onFilterChangeEnd = b.onFilterChangeEnd;
        a.onFilterCleared = b.onFilterCleared;
        a.onFilterSet = b.onFilterSet;
        a.initTreeFiltering()
    },
    showMenuBy: function(f, e) {
        var b = this.getMenu(),
            a = b.down('#unlockItem'),
            c = b.down('#lockItem'),
            d = a.prev();
        d.hide();
        a.hide();
        c.hide()
    },
    zoomToFit: function(a) {
        a = Ext.apply({
            adjustStart: 1,
            adjustEnd: 1
        }, a);
        var c = this.getEventStore();
        var b = this.getEventStore().getTotalTimeSpan();
        if (this.zoomToSpan(b, a) === null) {
            this.getSchedulingView().fitColumns()
        }
    },
    refreshViews: function(f) {
        if (!this.rendered) {
            return
        }
        var c = !1;
        var d = function() {
            c = !0
        };
        var b = this.normalGrid.getView();
        var a = this.lockedGrid.getView(),
            e = {
                left: a.getScrollX(),
                top: b.getVerticalScroll()
            };
        b.on('refresh', d);
        a.refreshView();
        b.un('refresh', d);
        if (f !== !1) {
            !c && this.getSchedulingView().refreshKeepingScroll();
            a.setScrollX(e.left);
            a.setScrollY(e.top)
        } else {
            if (!c) {
                this.getSchedulingView().refreshView()
            }
        }
    },
    getCalendar: function() {
        return this.calendar
    },
    disableWeekendHighlighting: function(a) {
        this.workingTimePlugin.setDisabled(a);
        if (a) {
            this.removeCls('sch-timelinepanel-highlightweekends')
        } else {
            this.addCls('sch-timelinepanel-highlightweekends')
        }
    },
    preventRefresh: function() {
        return !1
    },
    suspendRefresh: function() {
        var a = this;
        if (a.refreshSuspensionCount++ === 0) {
            a.getView().on('beforerefresh', a.preventRefresh, a);
            a.normalGrid.view.blockRefresh = !0;
            a.lockedGrid.view.blockRefresh = !0
        }
    },
    resumeRefresh: function(b) {
        var a = this;
        if (a.refreshSuspensionCount && !--a.refreshSuspensionCount) {
            a.getView().un('beforerefresh', a.preventRefresh, a);
            a.normalGrid.view.blockRefresh = !1;
            a.lockedGrid.view.blockRefresh = !1;
            if (b) {
                a.refreshViews()
            }
        }
    }
}, 0, 0, 0, 0, 0, [
    [Sch.mixin.Zoomable.prototype.mixinId || Sch.mixin.Zoomable.$className, Sch.mixin.Zoomable],
    [Sch.mixin.PartnerTimelinePanel.prototype.mixinId || Sch.mixin.PartnerTimelinePanel.$className, Sch.mixin.PartnerTimelinePanel]
], [Sch.mixin, 'TimelinePanel'], function() {
    var a = '6.0.0';
    Ext.apply(Sch, {
        VERSION: '5.1.14'
    });
    if (Ext.versions.extjs.isLessThan(a)) {
        var b = console;
        b && b.log('The Ext JS version you are using needs to be updated to at least ' + a)
    }
    if (Ext.getVersion().isGreaterThan('6.0.2')) {
        Ext.define(null, {
            override: 'Ext.grid.plugin.BufferedRenderer',
            doRefreshView: function() {
                if (this.view.ownerGrid.is('timelinegrid,timelinetree')) {
                    var a = Ext.Error.ignore;
                    Ext.Error.ignore = !0;
                    this.callParent(arguments);
                    Ext.Error.ignore = a
                } else {
                    this.callParent(arguments)
                }
            }
        })
    }
});
Ext.cmd.derive('Sch.panel.TimelineGridPanel', Ext.grid.Panel, {
    subGridXType: 'gridpanel',
    isTimelineGridPanel: !0,
    initComponent: function() {
        Ext.grid.Panel.prototype.initComponent.apply(this, arguments);
        this.getSchedulingView()._initializeTimelineView()
    }
}, 0, ['timelinegrid'], ['component', 'box', 'container', 'panel', 'tablepanel', 'gridpanel', 'grid', 'timelinegrid'], {
    'component': !0,
    'box': !0,
    'container': !0,
    'panel': !0,
    'tablepanel': !0,
    'gridpanel': !0,
    'grid': !0,
    'timelinegrid': !0
}, ['widget.timelinegrid'], [
    [Sch.mixin.Localizable.prototype.mixinId || Sch.mixin.Localizable.$className, Sch.mixin.Localizable],
    [Sch.mixin.TimelinePanel.prototype.mixinId || Sch.mixin.TimelinePanel.$className, Sch.mixin.TimelinePanel]
], [Sch.panel, 'TimelineGridPanel'], function() {
    this.override(Sch.mixin.TimelinePanel.prototype.inheritables() || {})
});
Ext.cmd.derive('Sch.template.DependencyInfo', Ext.XTemplate, {
    text: '<dl class="sch-dep-tip sch-dep-tip-{[values.valid ? \'valid\' : \'invalid\']}"><div class="x-fa fa-{[values.valid ? \'check-circle\' : \'times-circle\']}"></div><dt class="sch-dep-tip-from-title">__FROM__:</dt><dd class="sch-dep-tip-from-value">{[values.fromTask.getName() || "&nbsp;"]}</dd><dt class="sch-dep-tip-to-title">__TO__:</dt><dd class="sch-dep-tip-to-value">{[values.toTask && values.toTask.getName() || "&nbsp;"]}</dd></dl>',
    constructor: function() {
        var a = this;
        a.text = a.text.replace(/__FROM__/, a.L('fromText')).replace(/__TO__/, a.L('toText'));
        Ext.XTemplate.prototype.constructor.call(this, a.text)
    }
}, 1, 0, 0, 0, 0, [
    [Sch.mixin.Localizable.prototype.mixinId || Sch.mixin.Localizable.$className, Sch.mixin.Localizable]
], [Sch.template, 'DependencyInfo'], 0);
Ext.cmd.derive('Sch.view.dependency.DropZone', Ext.dd.DropZone, {
    terminalSelector: null,
    dependencyStore: null,
    toText: null,
    startText: null,
    endText: null,
    view: null,
    tipTpl: null,
    tip: null,
    constructor: function(b, a) {
        this.mixins.observable.constructor.call(this, a);
        Ext.dd.DropZone.prototype.constructor.apply(this, arguments)
    },
    getTargetFromEvent: function(a) {
        return a.getTarget(this.terminalSelector)
    },
    onNodeEnter: function(b, h, i, c) {
        var a = this,
            d = a.view.resolveEventRecord(b),
            f = b.className.match(/sch-terminal-(\w+)/)[1],
            g = d.getId() || d.internalId,
            e = Ext.apply({
                toTask: d,
                toSide: f
            }, c.tplData);
        if (!a.tip) {
            a.tip = a.createTooltip()
        }
        c.valid = e.valid = a.isValidLink(c.fromId, g, h.dragData.fromSide, f);
        a.tip.setData(e);
        a.tip.showBy(b);
        Ext.fly(b).addCls('sch-terminal-' + (c.valid ? 'valid' : 'invalid') + '-drop')
    },
    createTooltip: function() {
        var a = this;
        return new Ext.tip.ToolTip({
            tpl: a.tipTpl,
            view: a.view,
            cls: 'sch-create-dependency-tip',
            constrain: !0,
            anchor: 't',
            trackMouse: !1,
            hideDelay: 0,
            dismissDelay: 0,
            delegate: a.terminalSelector,
            target: a.view.getEl(),
            constraintInsets: '7 -7 -7 7'
        })
    },
    onNodeOut: function(a, c, d, b) {
        b.valid = !1;
        Ext.fly(a).removeCls(['sch-terminal-valid-drop', 'sch-terminal-invalid-drop'])
    },
    onNodeOver: function(b, c, d, a) {
        return a.valid ? this.dropAllowed : this.dropNotAllowed
    },
    onNodeDrop: function(c, i, j, e) {
        var a = this,
            b = a.view.resolveEventRecord(c),
            h = c.className.match(/sch-terminal-(\w+)/)[1],
            g = b.getId() || b.internalId,
            d = e.valid,
            f = a.createDependencyModel(i.dragData.fromId, g, e.fromSide, h);
        a.fireEvent('drop', a, f, d);
        a.fireEvent('afterdrop', a);
        return d
    },
    createDependencyModel: function(e, f, b, c) {
        var d = this.dependencyStore,
            a = new(d.getModel())();
        a.setSourceId(e);
        a.setTargetId(f);
        a instanceof Sch.model.Dependency && a.setFromSide(b);
        a instanceof Sch.model.Dependency && a.setToSide(c);
        a.setType(a.getTypeFromSides(b, c, this.view.rtl));
        return a
    },
    isValidLink: function(c, e, b, d) {
        var a = this.createDependencyModel(c, e, b, d);
        return this.dependencyStore.isValidDependency(a)
    },
    destroyTip: function() {
        var a = this;
        a.tip && a.tip.destroy();
        a.tip = null
    },
    destroy: function() {
        var a = this;
        a.destroyTip();
        Ext.dd.DropZone.prototype.destroy.apply(this, arguments)
    }
}, 1, 0, 0, 0, 0, [
    ['observable', Ext.util.Observable]
], [Sch.view.dependency, 'DropZone'], 0);
Ext.cmd.derive('Sch.view.dependency.DragZone', Ext.dd.DragZone, {
    terminalSelector: null,
    view: null,
    fromText: null,
    toText: null,
    startText: null,
    endText: null,
    rtl: !1,
    useLineProxy: !0,
    dependencyStore: null,
    tipTpl: null,
    constructor: function(b) {
        var a = this;
        a.mixins.observable.constructor.call(this, b);
        Ext.dd.DragZone.prototype.constructor.call(this, b.view.getEl(), b);
        a.tipTpl = a.tipTpl || new Sch.template.DependencyInfo();
        if (!(a.tipTpl instanceof Ext.Template)) {
            a.tipTpl = new Ext.XTemplate(a.tipTpl)
        }
        a.dropZone = a.createDropZone();
        a.relayEvents(a.dropZone, ['drop', 'afterdrop']);
        a.on({
            dragstart: a.onDependencyDragStart,
            afterdrop: a.onDependencyAfterDrop,
            scope: a
        })
    },
    onDependencyDragStart: function() {
        Sch.util.ScrollManager.activate(this.view)
    },
    onDependencyAfterDrop: function() {
        Sch.util.ScrollManager.deactivate();
        this.dropZone.destroyTip()
    },
    createDropZone: function() {
        return new Sch.view.dependency.DropZone(this.el, this.getDropZoneConfig())
    },
    getDropZoneConfig: function() {
        return {
            rtl: this.rtl,
            terminalSelector: this.terminalSelector,
            ddGroup: this.ddGroup,
            view: this.view,
            dependencyStore: this.dependencyStore,
            tipTpl: this.tipTpl
        }
    },
    initLineProxy: function(f) {
        var a = this,
            c = a.view.getScroll(),
            g = Ext.fly(f).getOffsetsTo(a.view.el),
            e = Ext.fly(f).getWidth() / 2,
            d = g[0] + e,
            b = g[1] + e;
        d = d + c.left;
        b = Ext.getVersion().isLessThan('6.2.0') ? b + c.top : b;
        a.lineProxyEl = a.el.createChild({
            cls: 'sch-dependency-connector-proxy',
            style: 'top:' + b + 'px;left:' + d + 'px'
        });
        Ext.apply(a, {
            containerTop: a.el.getTop(),
            containerLeft: a.el.getLeft(),
            startXY: [d, b],
            startScrollLeft: c.left,
            startScrollTop: c.top
        })
    },
    updateLineProxy: function(l) {
        var a = this,
            p = a.lineProxyEl,
            b = a.view.getScroll(),
            j = a.view.el.dom.getBoundingClientRect(),
            c = l[0] - j.left - a.startXY[0] + b.left,
            d = l[1] - j.top - a.startXY[1] + (Ext.getVersion().isLessThan('6.2.0') ? b.top : 0),
            k = Math.max(1, Math.sqrt(Math.pow(c, 2) + Math.pow(d, 2)) - 2),
            h = Math.atan2(d, c) - Math.PI / 2,
            g;
        if (Ext.isIE9m) {
            var m = Math.cos(h),
                n = Math.sin(h),
                i = 'progid:DXImageTransform.Microsoft.Matrix(sizingMethod="auto expand", M11 = ' + m + ', M12 = ' + -n + ', M21 = ' + n + ', M22 = ' + m + ')',
                f, e;
            if (b.top !== a.startScrollTop) {
                f = a.startScrollTop - a.containerTop
            } else {
                f = b.top - a.containerTop
            }
            if (b.left !== a.startScrollLeft) {
                e = a.startScrollLeft - a.containerLeft
            } else {
                e = b.left - a.containerLeft
            }
            g = {
                'height': k + 'px',
                'top': Math.min(0, d) + a.startXY[1] + f + (d < 0 ? 2 : 0) + 'px',
                'left': Math.min(0, c) + a.startXY[0] + e + (c < 0 ? 2 : 0) + 'px',
                'filter': i,
                '-ms-filter': i
            }
        } else {
            var o = 'rotate(' + h + 'rad)';
            g = {
                'height': k + 'px',
                'transform': o
            }
        }
        p.setStyle(g)
    },
    getDragData: function(e) {
        var c = this,
            a = e.getTarget(c.terminalSelector);
        if (e.button === 0 && a) {
            var b = c.view.resolveEventRecord(a);
            if (c.fireEvent('beforedrag', c, b) === !1) {
                return null
            }
            var d = a.className.match(/sch-terminal-(\w+)/)[1],
                f = {
                    fromTask: b,
                    fromSide: d
                },
                g = document.createElement('div');
            a.style.display = 'block';
            return {
                fromId: b.getId() || b.internalId,
                fromSide: d,
                tplData: f,
                repairXY: Ext.fly(a).getXY(),
                ddel: g,
                valid: !1,
                sourceTerminal: a
            }
        }
        return !1
    },
    onStartDrag: function(e, f) {
        var a = this,
            b = a.dragData,
            c = b.sourceTerminal,
            d = c.className.match(/sch-terminal-(\w+)/)[0];
        a.fireEvent('dragstart', a);
        if (a.useLineProxy) {
            a.initLineProxy(c, b.isStart);
            a.lineProxyEl.show()
        }
        a.proxy.setStyle('display', 'none');
        Ext.fly(b.sourceTerminal.parentNode).select('.sch-terminal:not(.' + d + ')').addCls('sch-terminal-hidden')
    },
    onDrag: function(a, b) {
        this.useLineProxy && this.updateLineProxy(a.getXY())
    },
    afterRepair: function() {
        var a = this;
        a.dragging = !1;
        if (!a.destroyed) {
            a.fireEvent('afterdrop', a.dropZone)
        }
    },
    onMouseUp: function() {
        var a = this;
        a.el.removeCls('sch-terminals-visible');
        a.dragData.sourceTerminal.style.display = '';
        if (a.lineProxyEl) {
            var c = Ext.isIE9m ? 0 : 400,
                b = a.lineProxyEl;
            b.animate({
                to: {
                    height: 0
                },
                duration: c,
                callback: function() {
                    Ext.destroy(b)
                }
            });
            a.lineProxyEl = null
        }
    },
    getRepairXY: function() {
        return this.dragData.repairXY
    },
    destroy: function() {
        var a = this;
        Ext.destroy([a.lineProxyEl, a.dropZone]);
        Ext.dd.DragZone.prototype.destroy.apply(this, arguments)
    }
}, 1, 0, 0, 0, ['schdependencydragzone.default'], [
    ['factoryable', Ext.mixin.Factoryable],
    ['observable', Ext.util.Observable]
], [Sch.view.dependency, 'DragZone'], 0);
Ext.cmd.derive('Sch.util.RectangularPathFinder', Ext.Base, {
    config: {
        startSide: 'right',
        startArrowSize: 8,
        startArrowMargin: 6,
        startShift: 0,
        endSide: 'left',
        endArrowSize: 8,
        endArrowMargin: 6,
        endShift: 0,
        verticalMargin: 2,
        horizontalMargin: 5,
        otherBoxes: null
    },
    constructor: function(a) {
        var b = this;
        b.callParent([a]);
        b.initConfig(a)
    },
    findPath: function(h, f) {
        var b = this,
            a, u, v, s, t, d, e, n, o, A, C, i, j, w, y, x, z, g, B, E, m, p, D, F, q, r, l, c, k;
        if (f && !Ext.isArray(f)) {
            f = [f]
        }
        for (k = 0; h && !c;) {
            a = Ext.applyIf(h, b.getConfig());
            u = a.startBox, v = a.endBox, s = a.startShift, t = a.endShift, d = a.startSide, e = a.endSide, n = a.startArrowSize, o = a.endArrowSize, A = a.startArrowMargin, C = a.endArrowMargin, i = a.horizontalMargin, j = a.verticalMargin, w = a.hasOwnProperty('startHorizontalMargin') ? a.startHorizontalMargin : i, y = a.hasOwnProperty('startVerticalMargin') ? a.startVerticalMargin : j, x = a.hasOwnProperty('endHorizontalMargin') ? a.endHorizontalMargin : i, z = a.hasOwnProperty('endVerticalMargin') ? a.endVerticalMargin : j, g = a.otherBoxes;
            d = b.normalizeSide(d);
            e = b.normalizeSide(e);
            B = b.getConnectionCoordinatesFromBoxSideShift(u, d, s);
            E = b.getConnectionCoordinatesFromBoxSideShift(v, e, t);
            q = b.calcGridBaseBoxFromBoxAndDrawParams(u, d, n, A, w, y);
            r = b.calcGridBaseBoxFromBoxAndDrawParams(v, e, o, C, x, z);
            g = g && Ext.Array.map(g, function(a) {
                return b.calcGridBaseBoxFromBoxAndDrawParams(a, !1, 0, 0, i, j)
            });
            m = b.getConnectionCoordinatesFromBoxSideShift(q, d, s);
            p = b.getConnectionCoordinatesFromBoxSideShift(r, e, t);
            l = b.buildPathGrid(q, r, m, p, d, e, g);
            D = b.convertDecartPointToGridPoint(l, m);
            F = b.convertDecartPointToGridPoint(l, p);
            c = b.findPathOnGrid(l, D, F, d, e);
            for (h = !1; !c && !h && f && k < f.length; k++) {
                h = f[k](a)
            }
        }
        if (c) {
            c = b.prependPathWithArrowStaffSegment(c, B, n, d);
            c = b.appendPathWithArrowStaffSegment(c, E, o, e);
            c = b.optimizePath(c)
        }
        return c
    },
    getConnectionCoordinatesFromBoxSideShift: function(a, d, c) {
        var b;
        switch (d) {
            case 'left':
                b = {
                    x: a.start,
                    y: (a.top + a.bottom) / 2 + c
                };
                break;
            case 'right':
                b = {
                    x: a.end,
                    y: (a.top + a.bottom) / 2 + c
                };
                break;
            case 'top':
                b = {
                    x: (a.start + a.end) / 2 + c,
                    y: a.top
                };
                break;
            case 'bottom':
                b = {
                    x: (a.start + a.end) / 2 + c,
                    y: a.bottom
                };
                break;
        }
        return b
    },
    calcGridBaseBoxFromBoxAndDrawParams: function(a, g, f, e, b, c) {
        var d;
        switch (g) {
            case 'left':
                d = {
                    start: a.start - Math.max(f + e, b),
                    end: a.end + b,
                    top: a.top - c,
                    bottom: a.bottom + c
                };
                break;
            case 'right':
                d = {
                    start: a.start - b,
                    end: a.end + Math.max(f + e, b),
                    top: a.top - c,
                    bottom: a.bottom + c
                };
                break;
            case 'top':
                d = {
                    start: a.start - b,
                    end: a.end + b,
                    top: a.top - Math.max(f + e, c),
                    bottom: a.bottom + c
                };
                break;
            case 'bottom':
                d = {
                    start: a.start - b,
                    end: a.end + b,
                    top: a.top - c,
                    bottom: a.bottom + Math.max(f + e, c)
                };
                break;
            default:
                d = {
                    start: a.start - b,
                    end: a.end + b,
                    top: a.top - c,
                    bottom: a.bottom + c
                };
        }
        return d
    },
    buildPathGrid: function(a, b, q, s, l, m, i) {
        var d, e, g, f, h, c, t, u, o, v, j, k, p, n = {},
            r = [];
        d = [a.start, l == 'left' || l == 'right' ? (a.start + a.end) / 2 : q.x, a.end, b.start, m == 'left' || m == 'right' ? (b.start + b.end) / 2 : s.x, b.end];
        e = [a.top, l == 'top' || l == 'bottom' ? (a.top + a.bottom) / 2 : q.y, a.bottom, b.top, m == 'top' || m == 'bottom' ? (b.top + b.bottom) / 2 : s.y, b.bottom];
        if (i) {
            Ext.Array.forEach(i, function(c) {
                d.push(c.start, (c.start + c.end) / 2, c.end);
                e.push(c.top, (c.top + c.bottom) / 2, c.bottom)
            })
        }
        d = Ext.Array.unique(Ext.Array.sort(d, Ext.Array.numericSortFn));
        e = Ext.Array.unique(Ext.Array.sort(e, Ext.Array.numericSortFn));
        for (c = 0, u = e.length; c < u; ++c) {
            n[c] = n[c] || {};
            g = e[c];
            for (h = 0, t = d.length; h < t; ++h) {
                f = d[h];
                k = (f <= a.start || f >= a.end || g <= a.top || g >= a.bottom) && (f <= b.start || f >= b.end || g <= b.top || g >= b.bottom);
                if (i) {
                    for (o = 0, v = i.length; k && o < v; ++o) {
                        j = i[o];
                        k = f <= j.start || f >= j.end || g <= j.top || g >= j.bottom
                    }
                }
                p = {
                    distance: Math.pow(2, 53) - 1,
                    permitted: k,
                    x: f,
                    y: g,
                    ix: h,
                    iy: c
                };
                n[c][h] = p;
                r.push(p)
            }
        }
        return {
            width: d.length,
            height: e.length,
            xs: d,
            ys: e,
            points: n,
            linearPoints: r
        }
    },
    convertDecartPointToGridPoint: function(a, b) {
        var c = Ext.Array.indexOf(a.xs, b.x),
            d = Ext.Array.indexOf(a.ys, b.y);
        return a.points[d][c]
    },
    findPathOnGrid: function(a, b, c, g, f) {
        var e = this,
            d = !1;
        if (b.permitted && c.permitted) {
            a = e.waveForward(a, b, 0);
            d = e.collectPath(a, c, f)
        }
        return d
    },
    getGridPointNeighbors: function(c, g, b) {
        var d = g.ix,
            e = g.iy,
            f = [],
            a;
        if (e < c.height - 1) {
            a = c.points[e + 1][d];
            (!b || b(a)) && f.push(a)
        }
        if (e > 0) {
            a = c.points[e - 1][d];
            (!b || b(a)) && f.push(a)
        }
        if (d < c.width - 1) {
            a = c.points[e][d + 1];
            (!b || b(a)) && f.push(a)
        }
        if (d > 0) {
            a = c.points[e][d - 1];
            (!b || b(a)) && f.push(a)
        }
        return f
    },
    waveForward: function(f, g, c) {
        var h = this,
            b, a, e, d, i, j, k, l;
        g.distance = c;
        b = h.getGridPointNeighbors(f, g, function(a) {
            return a.permitted && a.distance > c + 1
        });
        for (a = 0, e = b.length; a < e; ++a) {
            d = b[a];
            d.distance = c + 1
        }
        for (a = 0, e = b.length; a < e; ++a) {
            d = b[a];
            h.waveForward(f, d, c + 1)
        }
        return f
    },
    collectPath: function(i, a, b) {
        var j = this,
            g = !0,
            d, c, e, f, h = [];
        while (g && a.distance) {
            d = j.getGridPointNeighbors(i, a, function(c) {
                return c.permitted && c.distance == a.distance - 1
            });
            g = d.length > 0;
            if (g) {
                d = Ext.Array.sort(d, function(g, h) {
                    var c, d;
                    c = g.ix - a.ix;
                    d = g.iy - a.iy;
                    var e = (b == 'left' || b == 'right') && d === 0 || (b == 'top' || b == 'bottom') && c === 0 ? -1 : 1;
                    c = h.ix - a.ix;
                    d = h.iy - a.iy;
                    var f = (b == 'left' || b == 'right') && d === 0 || (b == 'top' || b == 'bottom') && c === 0 ? -1 : 1;
                    if (e > f) {
                        return 1
                    } else {
                        if (e < f) {
                            return -1
                        } else {
                            if (e == f) {
                                return g.y > h.y ? -1 : 1
                            }
                        }
                    }
                });
                c = d[0];
                h.push({
                    x1: c.x,
                    y1: c.y,
                    x2: a.x,
                    y2: a.y
                });
                e = c.ix - a.ix;
                f = c.iy - a.iy;
                switch (!0) {
                    case !f && e > 0:
                        b = 'left';
                        break;
                    case !f && e < 0:
                        b = 'right';
                        break;
                    case !e && f > 0:
                        b = 'top';
                        break;
                    case !e && f < 0:
                        b = 'bottom';
                        break;
                }
                a = c
            }
        }
        return g && h.reverse() || !1
    },
    prependPathWithArrowStaffSegment: function(e, c, d, f) {
        var a, b;
        if (e.length > 0) {
            b = e[0];
            a = {
                x2: b.x1,
                y2: b.y1
            };
            switch (f) {
                case 'left':
                    a.x1 = c.x - d;
                    a.y1 = b.y1;
                    break;
                case 'right':
                    a.x1 = c.x + d;
                    a.y1 = b.y1;
                    break;
                case 'top':
                    a.x1 = b.x1;
                    a.y1 = c.y - d;
                    break;
                case 'bottom':
                    a.x1 = b.x1;
                    a.y1 = c.y + d;
                    break;
            }
            e.unshift(a)
        }
        return e
    },
    appendPathWithArrowStaffSegment: function(c, d, e, f) {
        var a, b;
        if (c.length > 0) {
            b = c[c.length - 1];
            a = {
                x1: b.x2,
                y1: b.y2
            };
            switch (f) {
                case 'left':
                    a.x2 = d.x - e;
                    a.y2 = b.y2;
                    break;
                case 'right':
                    a.x2 = d.x + e;
                    a.y2 = b.y2;
                    break;
                case 'top':
                    a.x2 = b.x2;
                    a.y2 = d.y - e;
                    break;
                case 'bottom':
                    a.x2 = b.x2;
                    a.y2 = d.y + e;
                    break;
            }
            c.push(a)
        }
        return c
    },
    optimizePath: function(c) {
        var d = [],
            a, b;
        if (c.length > 0) {
            a = c.shift();
            d.push(a);
            while (c.length > 0) {
                b = c.shift();
                if (a.x1 == b.x1 && a.y1 == b.y1 && a.x2 == b.x2 && a.y2 == b.y2) {
                    a = b
                } else {
                    if (a.y1 - a.y2 === 0 && b.y1 - b.y2 === 0) {
                        a.x2 = b.x2
                    } else {
                        if (a.x1 - a.x2 === 0 && b.x1 - b.x2 === 0) {
                            a.y2 = b.y2
                        } else {
                            d.push(b);
                            a = b
                        }
                    }
                }
            }
        }
        return d
    },
    normalizeSide: function(a) {
        return this.self.sideToSide[a] || a
    },
    statics: {
        sideToSide: {
            'l': 'left',
            'r': 'right',
            't': 'top',
            'b': 'bottom'
        }
    }
}, 1, 0, 0, 0, ['schpathfinder.rectangular'], [
    [Ext.mixin.Factoryable.prototype.mixinId || Ext.mixin.Factoryable.$className, Ext.mixin.Factoryable]
], [Sch.util, 'RectangularPathFinder'], 0);
Ext.cmd.derive('Sch.template.Dependency', Ext.XTemplate, {
    disableFormats: !0,
    rtl: null,
    text: '<tpl if="startArrow"><div style="__SIDE__:{startArrow.side}px;top:{startArrow.top}px" class="sch-dependency sch-dependency-arrow sch-dependency-start-arrow sch-dependency-arrow-{startArrow.dir} {lineCls} {[ this.getSuffixedCls(values.cls, "-arrow") ]} {[ values.highlighted || "" ]}" <tpl if="dependencyId">data-sch-dependency-id="{[values.dependencyId]}"</tpl>></div></tpl><tpl for="segments"><div class="sch-dependency sch-dependency-line sch-dependency-line-{dir} {parent.lineCls} {[ parent.highlighted || "" ]} {[ this.getSuffixedCls(parent.cls, "-line") ]}" style="__SIDE__:{side}px;top:{top}px;<tpl if="width !== null && width !== undefined">width:{width}px;</tpl><tpl if="height !== null && height !== undefined">height:{height}px</tpl>" <tpl if="parent.dependencyId">data-sch-dependency-id="{parent.dependencyId}"</tpl>></div></tpl><tpl if="endArrow"><div style="__SIDE__:{endArrow.side}px;top:{endArrow.top}px" class="sch-dependency sch-dependency-arrow sch-dependency-end-arrow sch-dependency-arrow-{endArrow.dir} {lineCls} {[ this.getSuffixedCls(values.cls, "-arrow") ]} {[ values.highlighted || "" ]}" <tpl if="dependencyId">data-sch-dependency-id="{dependencyId}"</tpl>></div></tpl>',
    constructor: function(b) {
        var a = this;
        Ext.apply(a, b);
        a.text = a.text.replace(/__SIDE__/g, a.rtl ? 'right' : 'left');
        Ext.XTemplate.prototype.constructor.call(this, a.text)
    },
    getSuffixedCls: function(a, c) {
        var b = '';
        if (a && a.indexOf(' ') != -1) {
            b = a.replace(/^\s*(.*)\s*$/, '$1').split(/\s+/).join(c + ' ') + c
        } else {
            if (a) {
                b = a + c
            }
        }
        return b
    }
}, 1, 0, 0, 0, 0, 0, [Sch.template, 'Dependency'], 0);
Ext.cmd.derive('Sch.view.dependency.Painter', Ext.Base, function(b) {
    function resetArrowMargins(a) {
        var c = !1;
        if (a.startArrowMargin > 0 || a.endArrowMargin > 0) {
            a.startArrowMargin = a.endArrowMargin = 0;
            c = !0
        }
        return c ? a : c
    }

    function shrinkStartEndMarginsBy2(a) {
        var c = !1;
        if (a.hasOwnProperty('startHorizontalMargin') && a.startHorizontalMargin > 2) {
            a.startHorizontalMargin = Math.round(a.startHorizontalMargin / 2);
            c = !0
        }
        if (a.hasOwnProperty('startVerticalMargin') && a.startVerticalMargin > 2) {
            a.startVerticalMargin = Math.round(a.startVerticalMargin / 2);
            c = !0
        }
        if (a.hasOwnProperty('endHorizontalMargin') && a.endHorizontalMargin > 2) {
            a.endHorizontalMargin = Math.round(a.endHorizontalMargin / 2);
            c = !0
        }
        if (a.hasOwnProperty('endVerticalMargin') && a.endVerticalMargin > 2) {
            a.endVerticalMargin = Math.round(a.endVerticalMargin / 2);
            c = !0
        }
        return c ? a : c
    }

    function resetArrowSizes(a) {
        var c = !1;
        if (a.startArrowSize > 0 || a.endArrowSize > 0) {
            a.startArrowSize = a.endArrowSize = 0;
            c = !0
        }
        return c ? a : c
    }
    var a = [resetArrowMargins, shrinkStartEndMarginsBy2, shrinkStartEndMarginsBy2, shrinkStartEndMarginsBy2, resetArrowSizes];
    return {
        config: {
            selectedCls: 'sch-dependency-selected',
            cls: '',
            rtl: !1,
            lineTpl: null,
            canvasCls: null,
            pathFinderConfig: null,
            realLineThickness: null,
            useDependencyRowIntersectionCache: !0
        },
        pathFinder: null,
        dependencyIdAttr: 'data-sch-dependency-id',
        constructor: function(c) {
            var a = this;
            a.initConfig(c);
            a.pathFinder = a.createPathFinder(a.getPathFinderConfig());
            if (!a.getLineTpl()) {
                a.setLineTpl(new Sch.template.Dependency({
                    rtl: a.getRtl()
                }))
            }
            a.resetRowIntersectionCache()
        },
        clone: function() {
            var a = this;
            return new a.self(a.getConfig())
        },
        applyLineTpl: function(a) {
            return a instanceof Ext.XTemplate ? a : new Ext.XTemplate(a)
        },
        updatePathFinderConfig: function(c) {
            var a = this;
            if (a.pathFinder) {
                if (c && 'type' in c && c.type !== a.pathFinder.type) {
                    Ext.destroy(a.pathFinder);
                    a.pathFinder = a.createPathFinder(c)
                } else {
                    a.pathFinder.setConfig(c)
                }
            }
        },
        createPathFinder: function(a) {
            return Sch.util.RectangularPathFinder.create(a)
        },
        getCanvasSpecification: function() {
            return {
                tag: 'div',
                role: 'presentation',
                cls: this.getCanvasCls()
            }
        },
        paint: function(e, a, d, i) {
            var c = this,
                h = c.getUseDependencyRowIntersectionCache() ? c.filterByRowIntersections(e, d) : d,
                f = c.generatePaintMarkup(e, h);
            a = Ext.fly(a);
            if (i) {
                var g = document.createElement('div');
                g.innerHTML = f;
                a.syncContent(g)
            } else {
                a.insertHtml('beforeEnd', f)
            }
        },
        generatePaintMarkup: function(e, d) {
            var c = this,
                a = c.getLineDefsForDependencies(e, d);
            if (!Ext.isArray(a)) {
                a = [a]
            }
            return Ext.Array.map(a, function(a) {
                var f;
                a.path = c.findPath(a);
                f = a.path && c.getLineTplData(a);
                return f && c.getLineTpl().apply(f) || ''
            }).join('')
        },
        isDependencyElement: function(a) {
            return Ext.fly(a).is('.sch-dependency')
        },
        getElementsForDependency: function(c, a) {
            var d = Ext.dom.Query,
                e = this;
            if (a && !Ext.isArray(a)) {
                a = [a]
            }
            return new Ext.dom.CompositeElementLite(Ext.Array.reduce(a || [], function(g, f) {
                return g.concat(d.select('[' + e.dependencyIdAttr + '="' + f.internalId + '"]', Ext.getDom(c)))
            }, []))
        },
        getDependencyElements: function(c) {
            var a = Ext.getDom(c);
            return new Ext.dom.CompositeElementLite(a && a.childNodes || [])
        },
        getElementDependencyInternalId: function(a) {
            return Ext.fly(a).getAttribute(this.dependencyIdAttr)
        },
        highlightDependency: function(d, c, e) {
            var a = this;
            a.getElementsForDependency(d, c).addCls(e || a.getSelectedCls())
        },
        unhighlightDependency: function(d, c, e) {
            var a = this;
            a.getElementsForDependency(d, c).removeCls(e || a.getSelectedCls())
        },
        getSelectedDependencyElements: function(a) {
            var c = this;
            return Ext.fly(a).select('.' + c.getSelectedCls())
        },
        clearSelectedDependencies: function(c) {
            var a = this;
            a.getDependencyElements(c).removeCls(a.getSelectedCls())
        },
        findPath: function(d) {
            var c;
            c = this.pathFinder.findPath(d, a);
            return c
        },
        getLineTplData: function(a) {
            var d = this,
                i, e, f, g, c;
            c = a.path;
            if (!a.startBox.rendered && !a.endBox.rendered) {
                for (var j = c.length - 1; j >= 0; j--) {
                    var h = c[j];
                    if (h.x1 === h.x2) {
                        c = [h];
                        a.startArrowSize = a.endArrowSize = 0;
                        break
                    }
                }
            }
            i = d.getRtl();
            e = d.getRealLineThickness();
            f = c.length && c[0];
            g = c.length && c[c.length - 1];
            c = {
                cls: a.cls || '',
                lineCls: a.lineCls || '',
                dependencyId: a.dependencyId || '',
                highlighted: a.highlighted,
                segments: Ext.Array.map(c, function(c) {
                    var g = d.getSegmentDir(c),
                        f;
                    if (g == 'horizontal') {
                        f = {
                            width: Math.abs(c.x1 - c.x2) + 1,
                            height: e,
                            top: Math.min(c.y1, c.y2),
                            side: Math.min(c.x1, c.x2),
                            dir: g
                        }
                    } else {
                        f = {
                            height: Math.abs(c.y1 - c.y2) + 1,
                            width: e,
                            top: Math.min(c.y1, c.y2),
                            side: Math.min(c.x1, c.x2),
                            dir: g
                        }
                    }
                    return f
                }),
                startArrow: a.startArrowSize && {
                    side: f.x1,
                    top: f.y1,
                    dir: d.convertSideToDir(a.startSide, i)
                },
                endArrow: a.endArrowSize && {
                    side: g.x2,
                    top: g.y2,
                    dir: d.convertSideToDir(a.endSide, i)
                },
                realLineThickness: d.getRealLineThickness()
            };
            return c
        },
        isDependencyInTimeSpan: function(e, c, d) {
            var a = e.getDateRange();
            return a && (!c || !d || Sch.util.Date.intersectSpans(a.start, a.end, c, d))
        },
        addToRowIntersectionCacheIfNotPresent: function(c, e) {
            var a = this,
                f = c.getViewStartDate(),
                g = c.getViewEndDate(),
                d = a.dependencyStore.count() === e.length;
            if (a.allInRowIntersectionCache) {
                return
            }
            Ext.Array.each(e, function(h) {
                if (d || !a.isInRowIntersectionCache(h)) {
                    var n = h.getSourceEvent(),
                        o = h.getTargetEvent();
                    if (a.isDependencyInTimeSpan(h, f, g)) {
                        var l = a.getIndexForCache(c, n),
                            m = a.getIndexForCache(c, o),
                            j = Math.min(l, m),
                            k = Math.max(l, m);
                        if (j > -1 && k > -1) {
                            j = Math.floor(j / 10);
                            k = Math.floor(k / 10);
                            for (var i = j; i <= k; i++) {
                                if (!a.rowIntersectionCache[i]) {
                                    a.rowIntersectionCache[i] = []
                                }
                                a.rowIntersectionCache[i].push(h);
                                a.cachedDependencies[h.internalId] = !0
                            }
                        }
                    }
                }
            });
            if (!d) {
                d = Object.keys(a.cachedDependencies).length === a.dependencyStore.count()
            }
            if (d) {
                a.allInRowIntersectionCache = !0
            }
        },
        getIndexForCache: function(d, a) {
            if ('getResource' in a) {
                var c = a.getResource();
                if (c) {
                    return d.getResourceStore().indexOf(c)
                }
                if (!c && a.resourceIdField in a.data) {
                    return -1
                }
                throw new Error('Not implemented for scheduler with multi assignment')
            } else {
                if ('getTaskStore' in a) {
                    return a.getTaskStore().indexOf(a)
                }
            }
        },
        resetRowIntersectionCache: function(a) {
            this.allInRowIntersectionCache = !1;
            if (!a) {
                this.rowIntersectionCache = {};
                this.cachedDependencies = {}
            }
        },
        isInRowIntersectionCache: function(a) {
            return !!this.cachedDependencies[a.internalId]
        },
        filterByRowIntersections: function(c, a) {
            var j = this;
            if (!Ext.isArray(a)) {
                a = [a]
            }
            if (!a.length) {
                return []
            }
            j.addToRowIntersectionCacheIfNotPresent(c, a);
            var d = [],
                h = c.getNodes(),
                f = c.indexOf(h[0]),
                g = c.indexOf(h[h.length - 1]),
                e;
            f = Math.floor(f / 10);
            g = Math.floor(g / 10);
            for (var i = f; i <= g; i++) {
                e = j.rowIntersectionCache[i];
                e && d.push.apply(d, e)
            }
            return Ext.Array.intersect(a, Ext.Array.unique(d))
        },
        getLineDefsForDependencies: function(e, d) {
            var g = Ext.Array,
                f = this,
                c = {},
                h = e.getViewStartDate(),
                i = e.getViewEndDate(),
                a;
            if (!Ext.isArray(d)) {
                d = [d]
            }
            if (!d.length) {
                return []
            }
            var j = g.reduce(d || [], function(m, l) {
                var n = l.getSourceEvent(),
                    o = l.getTargetEvent(),
                    j, k;
                if (f.isDependencyInTimeSpan(l, h, i)) {
                    a = n.internalId;
                    if (!c[a]) {
                        j = f.getItemBox(e, n) || [];
                        if (!Ext.isArray(j)) {
                            j = [j]
                        }
                        c[a] = j
                    } else {
                        j = c[a]
                    }
                    a = o.internalId;
                    if (!c[a]) {
                        k = f.getItemBox(e, o) || [];
                        if (!Ext.isArray(k)) {
                            k = [k]
                        }
                        c[a] = k
                    } else {
                        k = c[a]
                    }
                    m = g.reduce(j, function(c, a, h) {
                        return g.reduce(k, function(i, g, j) {
                            if (a && g && (a.rendered || g.rendered || a.relPos != g.relPos)) {
                                i.push(f.createLineDef(e, l, n, o, a, g, null))
                            }
                            return i
                        }, c)
                    }, m)
                }
                return m
            }, []);
            return j
        },
        getItemBox: function(a, c) {
            return a.getItemBox(c)
        },
        createLineDef: function(e, d, o, p, f, g, y) {
            var h = d.self.Type,
                j = this,
                i = d.getType(),
                k = j.pathFinder.getHorizontalMargin(),
                l = j.pathFinder.getVerticalMargin(),
                x = d.getBidirectional(),
                v = x ? j.pathFinder.getStartArrowMargin() : 0,
                w = x ? j.pathFinder.getStartArrowSize() : 0,
                q = j.pathFinder.getEndArrowMargin(),
                m = j.pathFinder.getEndArrowSize(),
                a = d.getFromSide(),
                c = d.getToSide();
            if (!a) {
                switch (!0) {
                    case i == h.StartToEnd:
                        a = e.getConnectorStartSide(o);
                        break;
                    case i == h.StartToStart:
                        a = e.getConnectorStartSide(o);
                        break;
                    case i == h.EndToStart:
                        a = e.getConnectorEndSide(o);
                        break;
                    case i == h.EndToEnd:
                        a = e.getConnectorEndSide(o);
                        break;
                    default:
                        throw new Error('Invalid dependency type: ' + d.getType());
                }
            }
            if (!c) {
                switch (!0) {
                    case i == h.StartToEnd:
                        c = e.getConnectorEndSide(p);
                        break;
                    case i == h.StartToStart:
                        c = e.getConnectorStartSide(p);
                        break;
                    case i == h.EndToStart:
                        c = e.getConnectorStartSide(p);
                        break;
                    case i == h.EndToEnd:
                        c = e.getConnectorEndSide(p);
                        break;
                    default:
                        throw new Error('Invalid dependency type: ' + d.getType());
                }
            }
            switch (!0) {
                case (a == 'left' || a == 'right') && (c == 'left' || c == 'right'):
                    l = 2;
                    k = 5;
                    break;
                case (a == 'top' || a == 'bottom') && (c == 'top' || c == 'bottom'):
                    l = 7;
                    k = 2;
                    break;
            }
            var n = Number.MAX_VALUE;
            var t = {
                from: (f.start + f.end) / 2,
                to: (g.start + g.end) / 2
            };
            var u = {
                from: (f.top + f.bottom) / 2,
                to: (g.top + g.bottom) / 2
            };
            if ((a === 'top' && c === 'bottom' || a === 'bottom' && c === 'top') && t.from === t.to) {
                n = Math.abs(f[a] - g[c])
            } else {
                if ((a === 'left' && c === 'right' || a === 'right' && c === 'left') && u.from === u.to) {
                    var r = a === 'left' ? 'start' : 'end';
                    var s = c === 'left' ? 'start' : 'end';
                    if (e.rtl) {
                        r = r === 'start' ? 'end' : 'start';
                        s = s === 'start' ? 'end' : 'start'
                    }
                    var z = f[r];
                    var A = g[s];
                    n = Math.abs(z - A)
                }
            }
            if (n < m * q * 2) {
                v = q = 0;
                if (n <= m * 2) {
                    w = m = 0
                }
            }
            return Ext.applyIf({
                startBox: f,
                startSide: a,
                startArrowSize: w,
                startArrowMargin: v,
                endBox: g,
                endSide: c,
                endArrowSize: m,
                endArrowMargin: q,
                top: Math.min(f.top, g.top),
                bottom: Math.max(f.bottom, g.bottom),
                verticalMargin: l,
                horizontalMargin: k,
                startVerticalMargin: l,
                startHorizontalMargin: k,
                endVerticalMargin: l,
                endHorizontalMargin: k,
                otherBoxes: y,
                dependency: d,
                dependencyId: d.internalId,
                lineCls: j.getCls(),
                cls: d.getCls(),
                highlighted: d.getHighlighted()
            }, j.getConfig())
        },
        convertSideToDir: function(a, c) {
            return this.self.sideToDir[a + (c && '-rtl' || '')]
        },
        getSegmentDir: function(a) {
            var c = 'vertical';
            if (a.y1 === a.y2) {
                c = 'horizontal'
            }
            return c
        },
        inheritableStatics: {
            sideToDir: {
                'left': 'right',
                'right': 'left',
                'top': 'down',
                'bottom': 'up',
                'left-rtl': 'left',
                'right-rtl': 'right',
                'top-rtl': 'down',
                'bottom-rtl': 'up'
            }
        }
    }
}, 1, 0, 0, 0, ['schdependencypainter.default'], [
    [Ext.mixin.Factoryable.prototype.mixinId || Ext.mixin.Factoryable.$className, Ext.mixin.Factoryable]
], [Sch.view.dependency, 'Painter'], 0);
Ext.cmd.derive('Sch.view.dependency.renderingstrategy.Abstract', Ext.Base, function() {
    function depsToMap(a) {
        return Ext.Array.reduce(a, function(b, c) {
            b[c.getId()] = c;
            return b
        }, {})
    }

    function uniqueDeps(a) {
        return Ext.Object.getValues(depsToMap(a))
    }

    function diffDeps(d, e) {
        var b, c, a = [];
        b = depsToMap(d);
        c = depsToMap(e);
        Ext.Object.each(b, function(b, f) {
            c.hasOwnProperty(b) || a.push(f)
        });
        return a
    }
    var b = function() {
        Ext.Error.raise('Method is not allowed to call at this state')
    };
    var d = {
        render: b,
        clear: b,
        scheduledRender: b,
        destroy: b
    };
    var a, e, c;
    a = Ext.applyIf({
        render: function(a, b, h, i) {
            var f, g, c, d;
            f = new Ext.Promise(function(d, e) {
                g = d;
                c = e
            });
            if (b.canDrawDependencies()) {
                a._depsToRender = h;
                a._depsRendered = [];
                d = b.getPrimaryView().up('{isHidden()}');
                if (d) {
                    a._scheduledRenderDetacher = d.on('show', function() {
                        delete a._scheduledRenderDetacher;
                        a._fsaState.scheduledRender(a, b)
                    }, null, {
                        single: !0,
                        destroyable: !0
                    })
                } else {
                    a._scheduledRenderCancelId = Ext.asap(function() {
                        delete a._scheduledRenderCancelId;
                        a._fsaState.scheduledRender(a, b)
                    })
                }
                a.hasListeners['rendering-start'] && a.fireEvent('rendering-start', a);
                a._renderPromise = f;
                a._renderPromiseResolve = g;
                a._renderPromiseReject = c;
                a._fsaState = e
            } else {
                c(h)
            }
            return f
        },
        clear: function(e, a, c, d) {
            var b;
            if (a.canDrawDependencies()) {
                if (a.isDependencyCanvasPresent()) {
                    if (d) {
                        a.getPainter().paint(a.getPrimaryView(), a.getDependencyCanvas(), [], !0)
                    } else {
                        Ext.destroy(a.getPainter().getElementsForDependency(a.getDependencyCanvas(), c))
                    }
                }
                b = Ext.Promise.resolve(c)
            } else {
                b = Ext.Promise.reject(c)
            }
            return b
        },
        destroy: function(a) {
            a.destroyed = !0;
            a._fsaState = c
        }
    }, d);
    e = Ext.applyIf({
        render: function(a, d, b, c) {
            a._depsToRender = c ? b : uniqueDeps(a._depsToRender.concat(b));
            return a._renderPromise
        },
        clear: function(d, a, b, e) {
            var c;
            if (a.canDrawDependencies()) {
                if (a.isDependencyCanvasPresent()) {
                    if (e) {
                        a.getPainter().paint(a.getPrimaryView(), a.getDependencyCanvas(), [], !0)
                    } else {
                        Ext.destroy(a.getPainter().getElementsForDependency(a.getDependencyCanvas(), b))
                    }
                }
                if (e) {
                    d._depsToRender = []
                } else {
                    d._depsToRender = diffDeps(d._depsToRender, b)
                }
                c = Ext.Promise.resolve(b)
            } else {
                c = Ext.Promise.reject(b)
            }
            return c
        },
        scheduledRender: function(b, c) {
            var d, e;
            if (c.canDrawDependencies()) {
                d = c.getPrimaryView().up('{isHidden()}');
                if (d) {
                    b._scheduledRenderDetacher = d.on('show', function() {
                        delete b._scheduledRenderDetacher;
                        b._fsaState.scheduledRender(b, c)
                    }, null, {
                        single: !0,
                        destroyable: !0
                    })
                } else {
                    if (b._depsToRender.length > 0) {
                        e = b.delegateRendering(c, b._depsToRender, b._depsRendered);
                        b._depsRendered = uniqueDeps(b._depsRendered.concat(e[0]));
                        b._depsToRender = e[1];
                        b.hasListeners['rendering-progress'] && b.fireEvent('rendering-progress', b, b._depsToRender, b._depsRendered);
                        if (b._depsToRender.length > 0) {
                            b._scheduledRenderCancelId = Ext.asap(function() {
                                delete b._scheduledRenderCancelId;
                                b._fsaState.scheduledRender(b, c)
                            })
                        } else {
                            b.hasListeners['rendering-complete'] && b.fireEvent('rendering-complete', b, b._depsRendered);
                            b._renderPromiseResolve(b._depsRendered);
                            delete b._renderPromise;
                            delete b._renderPromiseResolve;
                            delete b._renderPromiseReject;
                            delete b._depsToRender;
                            delete b._depsRendered;
                            b._fsaState = a
                        }
                    } else {
                        b.hasListeners['rendering-complete'] && b.fireEvent('rendering-complete', b, b._depsRendered);
                        b._renderPromiseResolve(b._depsRendered);
                        delete b._renderPromise;
                        delete b._renderPromiseResolve;
                        delete b._renderPromiseReject;
                        delete b._depsToRender;
                        delete b._depsRendered;
                        b._fsaState = a
                    }
                }
            } else {
                b.hasListeners['rendering-canceled'] && b.fireEvent('rendering-canceled', b, b._depsRendered, b._depsToRender);
                b._renderPromiseReject(b._depsToRender);
                delete b._renderPromise;
                delete b._renderPromiseResolve;
                delete b._renderPromiseReject;
                delete b._depsToRender;
                delete b._depsRendered;
                b._fsaState = a
            }
        },
        destroy: function(a) {
            if (a._scheduledRenderCancelId) {
                Ext.asapCancel(a._scheduledRenderCancelId);
                delete a._scheduledRenderCancelId
            }
            if (a._scheduledRenderDetacher) {
                Ext.destroy(a._scheduledRenderDetacher);
                delete a._scheduledRenderDetacher
            }
            a.hasListeners['rendering-canceled'] && a.fireEvent('rendering-canceled', a, a._depsRendered, a._depsToRender);
            a._renderPromiseReject(a._depsToRender);
            delete a._renderPromise;
            delete a._renderPromiseResolve;
            delete a._renderPromiseReject;
            delete a._depsToRender;
            delete a._depsRendered;
            a.destroyed = !0;
            a._fsaState = c
        }
    }, d);
    c = d;
    return {
        _fsaState: a,
        constructor: function(b) {
            var a = this;
            a.mixins.observable.constructor.call(a, b)
        },
        destroy: function() {
            var a = this;
            return a._fsaState.destroy(a)
        },
        renderDependencies: function(b, a) {
            var c = this,
                d = !a;
            return c._fsaState.render(c, b, a || b.getDependencyStore().getRange(), d)
        },
        clearDependencies: function(b, a) {
            var c = this,
                d = !a;
            return c._fsaState.clear(c, b, a || b.getDependencyStore().getRange(), d)
        },
        updateDependencies: function(c, a) {
            var b = this,
                d = !a;
            a = a || c.getDependencyStore().getRange();
            return b._fsaState.clear(b, c, a, d).then(function() {
                a = d ? c.getDependencyStore().getRange() : Ext.Array.reduce(a, function(d, b) {
                    if (b.store && Ext.Array.indexOf(b.store.removed, b) === -1) {
                        d.push(b)
                    }
                    return d
                }, []);
                return !b.destroyed ? b._fsaState.render(b, c, a, d) : a
            })
        },
        delegateRendering: function(c, b, a) {},
        inheritableStatics: {
            depsToMap: depsToMap,
            uniqueDeps: uniqueDeps,
            diffDeps: diffDeps
        }
    }
}, 1, 0, 0, 0, ['sch_dependency_rendering_strategy.abstract'], [
    [Ext.mixin.Factoryable.prototype.mixinId || Ext.mixin.Factoryable.$className, Ext.mixin.Factoryable],
    [Ext.mixin.Observable.prototype.mixinId || Ext.mixin.Observable.$className, Ext.mixin.Observable]
], [Sch.view.dependency.renderingstrategy, 'Abstract'], 0);
Ext.cmd.derive('Sch.view.dependency.renderingstrategy.Combined', Sch.view.dependency.renderingstrategy.Abstract, {
    config: {
        depsPerStep: 50,
        mode: 'bulk'
    },
    delegateRendering: function(d, c, b) {
        var a = this;
        return a.getMode() == 'bulk' ? a.delegateRenderingBulk(d, c, b) : a.delegateRenderingAsync(d, c, b)
    },
    delegateRenderingBulk: function(a, b, c) {
        a.getPainter().paint(a.getPrimaryView(), a.getDependencyCanvas(), b, !1);
        return [b, []]
    },
    delegateRenderingAsync: function(a, b, g) {
        var f = this,
            d = f.getDepsPerStep(),
            c = b.slice(0, d),
            e = b.slice(d);
        a.getPainter().paint(a.getPrimaryView(), a.getDependencyCanvas(), c, !1);
        return [c, e]
    }
}, 0, 0, 0, 0, ['sch_dependency_rendering_strategy.combined'], 0, [Sch.view.dependency.renderingstrategy, 'Combined'], 0);
Ext.cmd.derive('Sch.view.dependency.View', Ext.Base, {
    config: {
        primaryView: null,
        dependencyStore: null,
        drawDependencies: !0,
        bulkRenderingDependencyLimit: 100,
        asyncRenderingDepsPerStep: 50,
        painterConfig: {
            canvasCls: 'sch-dependencyview-ct'
        },
        canvasLayer: 0,
        enableDependencyDragDrop: !0,
        terminalSides: ['left', 'right', 'top', 'bottom'],
        dragTipTpl: null,
        dragZoneConfig: null,
        selectedCls: null,
        overCls: null
    },
    painter: null,
    renderingStrategy: null,
    primaryViewDetacher: null,
    primaryViewLockableDetacher: null,
    primaryViewElDetacher: null,
    dependencyStoreDetacher: null,
    dragZone: null,
    scrolling: !1,
    constructor: function(c) {
        var a = this,
            b;
        a.callParent([c]);
        a.mixins.observable.constructor.call(a, c);
        a.initConfig(c);
        a.painter = a.createPainter(Ext.apply({
            rtl: a.getPrimaryView().rtl,
            dependencyStore: a.getDependencyStore()
        }, a.getPainterConfig()));
        if (a.painter.getUseDependencyRowIntersectionCache()) {
            if (a.getPrimaryView().resourceStore) {
                a.getPrimaryView().mon(a.getPrimaryView().resourceStore, {
                    add: a.resetPainterCache,
                    remove: a.resetPainterCache,
                    clear: a.resetPainterCache,
                    refresh: a.resetPainterCache,
                    scope: a
                })
            }
            if (a.getDependencyStore()) {
                a.mon(a.getDependencyStore(), {
                    add: a.updatePainterCache,
                    remove: a.resetPainterCache,
                    clear: a.resetPainterCache,
                    refresh: a.resetPainterCache,
                    scope: a
                })
            }
            a.mon(a.getPrimaryView().ownerGrid, {
                viewchange: a.resetPainterCache,
                scope: a
            })
        }
        if (!a.getSelectedCls()) {
            a.setSelectedCls(a.painter.getSelectedCls())
        }
        if (a.canDrawDependencies()) {
            a.startDrawDependencies()
        }
        if (a.getEnableDependencyDragDrop()) {
            b = a.getPrimaryView();
            a.dragZone = a.createDragZone(Ext.apply({
                view: b,
                ddGroup: b.getId() + '-dep-dd',
                rtl: b.rtl,
                terminalSelector: '.sch-terminal',
                dependencyStore: a.getDependencyStore(),
                tipTpl: a.getDragTipTpl()
            }, a.getDragZoneConfig() || {}));
            a.dragZone.on({
                dragstart: a.onDragStart,
                drop: a.onDependencyDrop,
                afterdrop: a.onDependencyAfterDrop,
                scope: a
            });
            a.relayEvents(a.dragZone, ['beforedrag', 'dragstart', 'drop', 'afterdrop'])
        }
    },
    destroy: function() {
        var a = this;
        a.stopDrawDependencies();
        a.dragZone && a.dragZone.destroy()
    },
    destroyDetachers: function() {
        var a = this;
        Ext.destroyMembers(this, 'primaryViewDetacher', 'primaryViewLockableDetacher', 'primaryViewElDetacher', 'dependencyStoreDetacher')
    },
    destroyDependencyCanvas: function() {
        var a = this;
        if (a.isDependencyCanvasPresent()) {
            Ext.destroy(a.getDependencyCanvas())
        }
    },
    destroyRenderingStrategy: function() {
        var a = this;
        Ext.destroy(a.renderingStrategy);
        a.renderingStrategy = null
    },
    resetPainterCache: function() {
        this.painter.resetRowIntersectionCache()
    },
    updatePainterCache: function() {
        this.painter.resetRowIntersectionCache(!0)
    },
    canDrawDependencies: function(c, b, d) {
        var a = this;
        return !!(a.painter && a.getPrimaryView() && (c || a.getDrawDependencies()) && (b || a.isDependencyCanvasAvailable()) && (d || a.getDependencyStore()))
    },
    startDrawDependencies: function() {
        var a = this,
            b = a.getPrimaryView(),
            d = a.getDependencyStore(),
            c;
        if (!a.renderingStrategy) {
            a.renderingStrategy = a.createRenderingStrategy();
            a.primaryViewDetacher = b.on(Ext.applyIf({
                destroyable: !0
            }, a.getPrimaryViewListeners()));
            a.primaryViewElDetacher = b.getEl().on(Ext.applyIf({
                destroyable: !0
            }, a.getPrimaryViewElListeners()));
            if (b.grid) {
                c = b.grid.ownerLockable && b.grid.ownerLockable.getView();
                if (b != c) {
                    a.primaryViewLockableDetacher = c.on(Ext.applyIf({
                        destroyable: !0
                    }, a.getPrimaryViewLockableListeners()))
                }
            }
            a.dependencyStoreDetacher = d.on(Ext.applyIf({
                destroyable: !0
            }, a.getDependencyStoreListeners()))
        }
        a.renderAllDependencies().then(null, Ext.emptyFn)
    },
    stopDrawDependencies: function() {
        var a = this;
        a.destroyRenderingStrategy();
        a.destroyDetachers();
        a.destroyDependencyCanvas()
    },
    createRenderingStrategy: function() {
        var a = this;
        return Sch.view.dependency.renderingstrategy.Combined.create({
            depsPerStep: a.getAsyncRenderingDepsPerStep()
        })
    },
    maybeSwitchRenderingStrategy: function() {
        var a = this;
        if (a.getDependencyStore().getCount() <= a.getBulkRenderingDependencyLimit()) {
            a.renderingStrategy.setMode('bulk')
        } else {
            a.renderingStrategy.setMode('async')
        }
    },
    updatePrimaryView: function(b, c) {
        var a = this;
        if (c) {
            a.stopDrawDependencies()
        }
        if (b) {
            if (!a.getDependencyStore() && b.getEventStore()) {
                a.setDependencyStore(b.getEventStore().getDependencyStore())
            }
            if (a.canDrawDependencies()) {
                a.startDrawDependencies()
            }
        }
    },
    applyDependencyStore: function(a) {
        return a && Ext.StoreMgr.lookup(a)
    },
    updateDependencyStore: function(b, c) {
        var a = this;
        if (c) {
            a.stopDrawDependencies()
        }
        if (b && a.canDrawDependencies()) {
            a.startDrawDependencies()
        }
    },
    updateDrawDependencies: function(b, c) {
        var a = this;
        if (b && a.canDrawDependencies(!0)) {
            a.startDrawDependencies()
        } else {
            if (!b) {
                a.stopDrawDependencies()
            }
        }
    },
    applyPainterConfig: function(a) {
        return Ext.isObject(a) ? Ext.apply({}, a) : a
    },
    updatePainterConfig: function(b) {
        var a = this;
        if (a.painter) {
            if (b) {
                b = Ext.apply({}, {
                    rtl: a.getPrimaryView().rtl
                }, b)
            }
            if (b && 'type' in b && b.type !== a.painter.type) {
                Ext.destroy(a.painter);
                a.painter = a.createPainter(b)
            } else {
                a.painter.setConfig(b)
            }
            a.destroyDependencyCanvas();
            if (a.canDrawDependencies()) {
                a.renderAllDependencies().then(null, Ext.emptyFn)
            }
        }
    },
    updateCanvasLayer: function(b) {
        var a = this;
        a.destroyDependencyCanvas();
        if (a.canDrawDependencies()) {
            a.renderAllDependencies().then(null, Ext.emptyFn)
        }
    },
    updateSelectedCls: function(a) {
        this.painter.setSelectedCls(a)
    },
    getPrimaryViewListeners: function() {
        var a = this;
        return {
            'itemadd': a.onPrimaryViewItemAdd,
            'itemremove': a.onPrimaryViewItemRemove,
            'itemupdate': a.onPrimaryViewItemUpdate,
            'refresh': a.onPrimaryViewRefresh,
            'bufferedrefresh': a.onPrimaryViewRefresh,
            'expandbody': a.onPrimaryViewExpandBody,
            'collapsebody': a.onPrimaryViewCollapseBody,
            'eventrepaint': a.onPrimaryViewEventRepaint,
            'baseline-show': a.onPrimaryViewRefresh,
            'baseline-hide': a.onPrimaryViewRefresh,
            scope: a
        }
    },
    getPrimaryViewLockableListeners: function() {
        var a = this;
        return {
            'expandbody': a.onPrimaryViewExpandBody,
            'collapsebody': a.onPrimaryViewCollapseBody,
            scope: a
        }
    },
    getPrimaryViewElListeners: function() {
        var a = this;
        return {
            'dblclick': a.onPrimaryViewDependencyElPointerEvent,
            'click': a.onPrimaryViewDependencyElPointerEvent,
            'contextmenu': a.onPrimaryViewDependencyElPointerEvent,
            'mouseover': a.onPrimaryViewDependencyElPointerEvent,
            'mouseout': a.onPrimaryViewDependencyElPointerEvent,
            delegate: '.sch-dependency',
            scope: a
        }
    },
    getDependencyStoreListeners: function() {
        var a = this;
        return {
            'add': a.onDependencyStoreAdd,
            'remove': a.onDependencyStoreRemove,
            'update': a.onDependencyStoreUpdate,
            'refresh': a.onDependencyStoreRefresh,
            'clear': a.onDependencyStoreClear,
            scope: a
        }
    },
    createPainter: function(a) {
        return Sch.view.dependency.Painter.create(a)
    },
    getPainter: function() {
        return this.painter
    },
    clonePainter: function() {
        var a = this;
        return a.painter && a.painter.clone() || null
    },
    createDragZone: function(a) {
        return Sch.view.dependency.DragZone.create(a)
    },
    isDependencyCanvasAvailable: function() {
        var a = this.getPrimaryView();
        return a && a.isItemCanvasAvailable()
    },
    isDependencyCanvasPresent: function() {
        var b = this,
            a = b.getPrimaryView();
        return a && a.isItemCanvasPresent(b.getCanvasLayer())
    },
    getDependencyCanvas: function() {
        var a = this;
        return a.getPrimaryView().getItemCanvasEl(a.getCanvasLayer(), a.painter.getCanvasSpecification())
    },
    renderAllDependencies: function() {
        var a = this,
            b;
        if (a.canDrawDependencies() && (a.refreshing || a.fireEvent('beforerefresh', a) !== !1)) {
            a.refreshing || a.renderingStrategy.on('rendering-complete', function(c, b) {
                a.refreshing = !1;
                a.fireEvent('refresh', a)
            }, null, {
                single: !0
            });
            a.refreshing = !0;
            b = a.renderingStrategy.updateDependencies(a)
        } else {
            b = Ext.Promise.reject(a.getDependencyStore().getRange())
        }
        return b
    },
    renderDependencies: function(b, d) {
        var a = this,
            c;
        if (!Ext.isArray(b)) {
            b = [b]
        }
        if (a.canDrawDependencies()) {
            if (d) {
                c = a.renderingStrategy.clearDependencies(a).then(function() {
                    return !a.renderingStrategy.destroyed ? a.renderingStrategy.renderDependencies(a, b) : b
                })
            } else {
                c = a.renderingStrategy.renderDependencies(a, b)
            }
        } else {
            c = Ext.Promise.reject(b)
        }
        return c
    },
    updateDependencies: function(a) {
        var c = this,
            b;
        if (!Ext.isArray(a)) {
            a = [a]
        }
        if (c.canDrawDependencies()) {
            b = c.renderingStrategy.updateDependencies(c, a)
        } else {
            b = Ext.Promise.reject(a)
        }
        return b
    },
    clearDependencies: function(a) {
        var c = this,
            b;
        if (!Ext.isArray(a)) {
            a = [a]
        }
        if (c.canDrawDependencies()) {
            b = c.renderingStrategy.clearDependencies(c, a)
        } else {
            b = Ext.Promise.reject(a)
        }
        return b
    },
    clearAllDependencies: function() {
        var b = this,
            a;
        if (b.canDrawDependencies()) {
            a = b.renderingStrategy.clearDependencies(b)
        } else {
            a = Ext.Promise.reject()
        }
        return a
    },
    getElementsForDependency: function(c) {
        var a = this,
            b = !1;
        if (a.canDrawDependencies() && a.isDependencyCanvasPresent()) {
            b = a.painter.getElementsForDependency(a.getDependencyCanvas(), c)
        }
        return b
    },
    getDependencyForElement: function(e) {
        var d = this,
            c = d.getDependencyStore(),
            b = null,
            a;
        if (c) {
            a = d.painter.getElementDependencyInternalId(e);
            b = c.getByInternalId(a)
        }
        return b
    },
    getDependencyElements: function() {
        var a = this,
            b = !1;
        if (a.canDrawDependencies() && a.isDependencyCanvasPresent()) {
            b = a.painter.getDependencyElements(a.getDependencyCanvas())
        }
        return b
    },
    highlightDependency: function(a, c) {
        var b = this;
        if (!(a && a.isModel)) {
            a = b.getDependencyStore().getById(a)
        }
        a && a.highlight(c || b.getSelectedCls())
    },
    unhighlightDependency: function(a, c) {
        var b = this;
        if (!(a && a.isModel)) {
            a = b.getDependencyStore().getById(a)
        }
        a && a.unhighlight(c || b.getSelectedCls())
    },
    getHighlightedDependencies: function(b) {
        var a = this.getDependencyStore();
        return a && a.getHighlightedDependencies() || []
    },
    getSelectedDependencyElements: function() {
        var a = this,
            b = !1;
        if (a.canDrawDependencies() && a.isDependencyCanvasPresent()) {
            b = a.painter.getSelectedDependencyElements(a.getDependencyCanvas())
        }
        return b
    },
    clearSelectedDependencies: function() {
        var a = this;
        if (a.canDrawDependencies() && a.isDependencyCanvasPresent()) {
            a.painter.clearSelectedDependencies(a.getDependencyCanvas());
            a.getDependencyStore().each(function(b) {
                a.unhighlightDependency(b)
            })
        }
    },
    onPrimaryViewItemAdd: function(a, b, c, d) {
        this.renderAllDependencies().then(null, Ext.emptyFn)
    },
    onPrimaryViewItemUpdate: function(a, b, c, d) {
        this.renderAllDependencies().then(null, Ext.emptyFn)
    },
    onPrimaryViewItemRemove: function(a, b, c, d) {
        this.renderAllDependencies().then(null, Ext.emptyFn)
    },
    onPrimaryViewRefresh: function(a) {
        this.renderAllDependencies().then(null, Ext.emptyFn)
    },
    onPrimaryViewExpandBody: function() {
        this.renderAllDependencies().then(null, Ext.emptyFn)
    },
    onPrimaryViewCollapseBody: function() {
        this.renderAllDependencies().then(null, Ext.emptyFn)
    },
    onPrimaryViewEventRepaint: function() {
        this.renderAllDependencies().then(null, Ext.emptyFn)
    },
    onPrimaryViewDependencyElPointerEvent: function(a, f, h) {
        var b = this,
            e, c;
        e = b.painter.getElementDependencyInternalId(f);
        c = b.getDependencyStore().getByInternalId(e);
        if (c) {
            var d = this.getOverCls();
            b.fireEvent('dependency' + a.type, b, c, a, f);
            if (d) {
                if (a.type === 'mouseover' || a.type === 'mouseout') {
                    var g = b.painter.getElementsForDependency(b.getDependencyCanvas(), c);
                    if (a.type === 'mouseover') {
                        g.addCls(d)
                    } else {
                        if (a.type === 'mouseout') {
                            g.removeCls(d)
                        }
                    }
                }
            }
        }
    },
    onDependencyStoreAdd: function(c, b) {
        var a = this;
        a.maybeSwitchRenderingStrategy();
        a.renderDependencies(b).then(null, Ext.emptyFn)
    },
    onDependencyStoreRemove: function(c, b) {
        var a = this;
        a.maybeSwitchRenderingStrategy();
        a.clearDependencies(b).then(null, Ext.emptyFn)
    },
    onDependencyStoreUpdate: function(b, a) {
        this.updateDependencies(a).then(null, Ext.emptyFn)
    },
    onDependencyStoreRefresh: function(b) {
        var a = this;
        a.maybeSwitchRenderingStrategy();
        a.renderAllDependencies().then(null, Ext.emptyFn)
    },
    onDependencyStoreClear: function(b) {
        var a = this;
        a.maybeSwitchRenderingStrategy();
        a.renderAllDependencies().then(null, Ext.emptyFn)
    },
    onDragStart: function() {
        var b = this,
            a = b.getPrimaryView();
        a.onDragDropStart && a.onDragDropStart();
        b.getPrimaryView().getEl().addCls('sch-terminals-visible')
    },
    onDependencyDrop: function(c, a, b) {
        b && this.getDependencyStore().add(a)
    },
    onDependencyAfterDrop: function() {
        var a = this.getPrimaryView();
        if (!a.destroyed) {
            a.onDragDropEnd && a.onDragDropEnd();
            a.getEl().removeCls('sch-terminals-visible');
            a.getEl().select('.sch-terminal-hidden').removeCls('sch-terminal-hidden')
        }
    }
}, 1, 0, 0, 0, ['schdependencyview.base'], [
    [Ext.mixin.Factoryable.prototype.mixinId || Ext.mixin.Factoryable.$className, Ext.mixin.Factoryable],
    [Ext.mixin.Observable.prototype.mixinId || Ext.mixin.Observable.$className, Ext.mixin.Observable]
], [Sch.view.dependency, 'View'], 0);
Ext.cmd.derive('Sch.view.dependency.Mixin', Ext.Mixin, {
    mixinConfig: {
        after: {
            initComponent: 'initComponent',
            destroy: 'destroy'
        }
    },
    dependencyViewConfig: null,
    dependencyView: null,
    dependencyViewRelayDetacher: null,
    dependencyDragRelayDetacher: null,
    initComponent: function() {
        var a = this;
        a.on('viewready', function() {
            if (a.getEventStore()) {
                a.setupDependencyView(a.getDependencyViewConfig(), a.getSchedulingView())
            }
        })
    },
    getDependencyViewConfig: function() {
        return this.dependencyViewConfig
    },
    setDependencyViewConfig: function(a) {
        var b = this;
        if (b.dependencyViewConfig !== a) {
            b.dependencyViewConfig = a;
            if (b.dependencyView) {
                if (a && 'type' in a && a.type !== b.dependencyView.type) {
                    b.setupDependencyView(a, b.getSchedulingView())
                } else {
                    b.dependencyView.setConfig(a)
                }
            }
        }
    },
    hasDependencyView: function() {
        return !!this.dependencyView
    },
    getDependencyView: function() {
        return this.dependencyView
    },
    createDependencyView: function(b, a) {
        return Sch.view.dependency.View.create(Ext.applyIf({
            primaryView: a
        }, b))
    },
    destroy: function() {
        Ext.destroyMembers(this, 'dependencyViewRelayDetacher', 'dependencyDragRelayDetacher', 'dependencyView')
    },
    setupDependencyView: function(c, b) {
        var a = this;
        Ext.destroy(a.dependencyView);
        a.dependencyView = a.createDependencyView(c, b);
        a.setupDependencyViewRelay();
        a.fireEvent('dependencyviewready', a, a.dependencyView);
        if (a.dependencyView.canDrawDependencies()) {
            a.dependencyView.renderAllDependencies().then(null, Ext.emptyFn)
        }
    },
    setupDependencyViewRelay: function() {
        var a = this;
        Ext.destroy(a.dependencyViewRelayDetacher, a.dependencyDragRelayDetacher);
        a.dependencyViewRelayDetacher = a.relayEvents(a.getDependencyView(), ['dependencyclick', 'dependencydblclick', 'dependencycontextmenu', 'dependencymouseover', 'dependencymouseout']);
        a.dependencyDragRelayDetacher = a.relayEvents(a.getDependencyView(), ['beforedrag', 'dragstart', 'drop', 'afterdrop'], 'dependency')
    }
}, 0, 0, 0, 0, 0, 0, [Sch.view.dependency, 'Mixin'], 0);
Ext.cmd.derive('Sch.panel.SchedulerGrid', Sch.panel.TimelineGridPanel, {
    alternateClassName: 'Sch.SchedulerPanel',
    viewType: 'schedulergridview',
    isSchedulerGrid: !0,
    initComponent: function() {
        Sch.panel.TimelineGridPanel.prototype.initComponent.apply(this, arguments);
        this.getSchedulingView()._initializeSchedulerView()
    }
}, 0, ['schedulergrid', 'schedulerpanel'], ['component', 'box', 'container', 'panel', 'tablepanel', 'gridpanel', 'grid', 'timelinegrid', 'schedulergrid', 'schedulerpanel'], {
    'component': !0,
    'box': !0,
    'container': !0,
    'panel': !0,
    'tablepanel': !0,
    'gridpanel': !0,
    'grid': !0,
    'timelinegrid': !0,
    'schedulergrid': !0,
    'schedulerpanel': !0
}, ['widget.schedulergrid', 'widget.schedulerpanel'], [
    [Sch.mixin.SchedulerPanel.prototype.mixinId || Sch.mixin.SchedulerPanel.$className, Sch.mixin.SchedulerPanel],
    [Sch.view.dependency.Mixin.prototype.mixinId || Sch.view.dependency.Mixin.$className, Sch.view.dependency.Mixin]
], [Sch.panel, 'SchedulerGrid', Sch, 'SchedulerPanel'], function() {
    this.override(Sch.mixin.SchedulerPanel.prototype.inheritables() || {})
});
Ext.cmd.derive('Sch.patches.TreeNavigationModel', Sch.util.Patch, {
    target: 'Ext.tree.NavigationModel',
    minVersion: '6.0.0',
    maxVersion: '6.0.2',
    overrides: {
        onAsterisk: function() {
            if (!this.view.ownerCt.expandAll) {
                this.view.lockingPartner.ownerCt.expandAll();
                return
            }
            this.callParent(arguments)
        }
    }
}, 0, 0, 0, 0, 0, 0, [Sch.patches, 'TreeNavigationModel'], 0);
Ext.cmd.derive('Sch.panel.TimelineTreePanel', Ext.tree.Panel, {
    useArrows: !0,
    rootVisible: !1,
    lockedXType: 'treepanel',
    isTimelineTreePanel: !0,
    initComponent: function() {
        Ext.tree.Panel.prototype.initComponent.apply(this, arguments);
        this.getSchedulingView()._initializeTimelineView()
    }
}, 0, ['timelinetree'], ['component', 'box', 'container', 'panel', 'tablepanel', 'treepanel', 'timelinetree'], {
    'component': !0,
    'box': !0,
    'container': !0,
    'panel': !0,
    'tablepanel': !0,
    'treepanel': !0,
    'timelinetree': !0
}, ['widget.timelinetree'], [
    [Sch.mixin.Localizable.prototype.mixinId || Sch.mixin.Localizable.$className, Sch.mixin.Localizable],
    [Sch.mixin.TimelinePanel.prototype.mixinId || Sch.mixin.TimelinePanel.$className, Sch.mixin.TimelinePanel]
], [Sch.panel, 'TimelineTreePanel'], function() {
    this.override(Sch.mixin.TimelinePanel.prototype.inheritables() || {})
});
Ext.cmd.derive('Sch.patches.BufferedRenderer_6_2_1', Sch.util.Patch, {
    target: 'Ext.grid.plugin.BufferedRenderer',
    minVersion: '6.2.1',
    applyFn: function() {
        if (Ext.isIE11) {
            Ext.define(null, {
                override: 'Ext.grid.plugin.BufferedRenderer',
                getFirstVisibleRowIndex: function(b, e, c, f) {
                    var a = this,
                        m = a.view,
                        g = m.all,
                        l = g.elements,
                        k = a.viewClientHeight,
                        d, i, j = a.bodyTop;
                    if (g.getCount() && a.variableRowHeight) {
                        if (!arguments.length) {
                            b = g.startIndex;
                            e = g.endIndex;
                            c = a.scrollTop;
                            f = c + k;
                            if (j > f || j + a.bodyHeight < c) {
                                a.teleported = !0;
                                return Math.floor(a.scrollTop / a.rowHeight)
                            }
                            d = b + Math.min(a.numFromEdge + (a.lastScrollDirection === -1 ? a.leadingBufferZone : a.trailingBufferZone), Math.floor((e - b) / 2))
                        } else {
                            if (b === e) {
                                return e
                            }
                            d = b + Math.floor((e - b) / 2)
                        }
                        var h = l[d];
                        i = j + h.offsetTop;
                        if (i + h.offsetHeight <= c && h.offsetHeight) {
                            return a.getFirstVisibleRowIndex(d + 1, e, c, f)
                        }
                        if (i <= c) {
                            return d
                        } else {
                            if (d !== b) {
                                return a.getFirstVisibleRowIndex(b, d - 1, c, f)
                            }
                        }
                    }
                    return Math.floor(a.scrollTop / a.rowHeight)
                }
            })
        }
    }
}, 0, 0, 0, 0, 0, 0, [Sch.patches, 'BufferedRenderer_6_2_1'], 0);
Ext.cmd.derive('Sch.patches.CellContext', Sch.util.Patch, {
    target: 'Ext.grid.CellContext',
    minVersion: '6.0.0',
    maxVersion: '6.2.0',
    applyFn: function() {
        var a = {
            setAll: function(a, e, c, f, b) {
                var d = this;
                if (b && c == -1 && a !== d.view) {
                    a = d.view;
                    c = a.getVisibleColumnManager().indexOf(b)
                }
                return this.callParent(arguments)
            }
        };
        if (Ext.getVersion().isGreaterThanOrEqual('6.0.1')) {
            a.setPosition = function(b, a) {
                b = b || 0;
                a = a || 0;
                return this.callParent(arguments)
            }
        }
        Ext.override(Ext.grid.CellContext, a)
    }
}, 0, 0, 0, 0, 0, 0, [Sch.patches, 'CellContext'], 0);
Ext.cmd.derive('Sch.patches.CellContext_6_2_0', Sch.util.Patch, {
    minVersion: '6.2.0',
    maxVersion: '6.2.1',
    target: 'Ext.grid.CellContext',
    overrides: {
        setView: function(a) {
            this.view = a;
            this.refresh()
        }
    }
}, 0, 0, 0, 0, 0, 0, [Sch.patches, 'CellContext_6_2_0'], 0);
Ext.cmd.derive('Sch.patches.DomScroller', Sch.util.Patch, {
    target: 'Ext.scroll.DomScroller',
    maxVersion: '6.2.0',
    overrides: {
        privates: {
            convertX: function(a) {
                if (a == null) {
                    return null
                }
                return this.callParent(arguments)
            }
        }
    }
}, 0, 0, 0, 0, 0, 0, [Sch.patches, 'DomScroller'], 0);
Ext.cmd.derive('Sch.patches.DragZone', Sch.util.Patch, {
    target: 'Ext.dd.DragZone',
    minVersion: '6.2.0',
    overrides: {
        unreg: function() {
            try {
                this.callParent(arguments)
            } catch (b) {}
        }
    }
}, 0, 0, 0, 0, 0, 0, [Sch.patches, 'DragZone'], 0);
Ext.cmd.derive('Sch.patches.Explorer', Sch.util.Patch, {
    target: ['Ext.util.CSS'],
    minVersion: '6.0.0',
    maxVersion: '6.0.1',
    applyFn: function() {
        if (Ext.isIE9m) {
            Ext.util.CSS.createStyleSheet('.x-column-header-trigger { z-index: 10; }')
        }
    }
}, 0, 0, 0, 0, 0, 0, [Sch.patches, 'Explorer'], 0);
Ext.cmd.derive('Sch.patches.LockableGridEmptyText', Sch.util.Patch, {
    target: 'Ext.grid.locking.Lockable',
    minVersion: '6.2.0',
    maxVersion: '6.4.9',
    reportUrl: 'https://www.sencha.com/forum/showthread.php?338759-Lockable-grid-empty-text-is-not-visible-due-to-lockable-sync-skipping&p=1177730',
    obsoleteTestName: 'patches/006_lockable_grid_empty_text.t.js',
    description: ["Lockable grid skips locked/normal grid layout synchronization in case there're no rows rendered", "This breaks empty text display, the element is attached to corresponding grid view but it's occluded", "and thus isn't visible, due to layout synchronization syncking skip."].join(' '),
    overrides: {
        syncLockableLayout: function() {
            var a = this;
            a.callParent();
            if (!a.store.getCount() && a.lockedGrid && a.normalGrid && (a.lockedGrid.getEmptyText() || a.normalGrid.getEmptyText()) && !a.afterLayoutListener) {
                a.afterLayoutListener = Ext.on({
                    afterlayout: a.doSyncLockableLayout,
                    scope: a,
                    single: !0
                })
            }
        }
    }
}, 0, 0, 0, 0, 0, 0, [Sch.patches, 'LockableGridEmptyText'], 0);
Ext.cmd.derive('Sch.patches.RowSynchronizer', Sch.util.Patch, {
    target: 'Ext.grid.locking.RowSynchronizer',
    minVersion: '6.0.0',
    maxVersion: '6.0.1',
    overrides: {
        finish: function(a) {
            if (!a) {
                return
            }
            return this.callParent(arguments)
        }
    }
}, 0, 0, 0, 0, 0, 0, [Sch.patches, 'RowSynchronizer'], 0);
Ext.cmd.derive('Sch.patches.TablePanel', Sch.util.Patch, {
    target: 'Ext.panel.Table',
    applyFn: function() {
        var a = {};
        if (Ext.getVersion().equals('6.0.1.250')) {
            a.ensureVisible = function(b, a) {
                if (a && a.column && this.getVisibleColumnManager().indexOf(a.column) === -1) {
                    return
                }
                this.callParent(arguments)
            }
        }
        Ext.ClassManager.get(this.target).override(a)
    }
}, 0, 0, 0, 0, 0, 0, [Sch.patches, 'TablePanel'], 0);
Ext.cmd.derive('Sch.patches.TablePanel_6_2_1', Sch.util.Patch, {
    target: 'Ext.panel.Table',
    minVersion: '6.2.1',
    overrides: {
        privates: {
            initFocusableElement: function() {},
            doEnsureVisible: function(a, d) {
                if (this.lockable) {
                    return this.ensureLockedVisible(a, d)
                }
                if (typeof a !== 'number' && !a.isEntity) {
                    a = this.store.getById(a)
                }
                var b = this,
                    c = b.getView(),
                    f = c.getNode(a),
                    o = b.ownerGrid.lockable,
                    i, k, j, h, m, l, g, p, e, n;
                if (d) {
                    i = d.callback;
                    k = d.scope;
                    j = d.animate;
                    h = d.highlight;
                    m = d.select;
                    l = d.focus;
                    e = d.column
                }
                if (b.deferredEnsureVisible) {
                    b.deferredEnsureVisible.destroy()
                }
                if (!c.componentLayoutCounter) {
                    b.deferredEnsureVisible = c.on({
                        resize: b.doEnsureVisible,
                        args: Ext.Array.slice(arguments),
                        scope: b,
                        single: !0,
                        destroyable: !0
                    });
                    return
                }
                if (typeof e === 'number') {
                    e = b.ownerGrid.getVisibleColumnManager().getColumns()[e]
                }
                if (f) {
                    g = o ? b.ownerGrid.getScrollable() : c.getScrollable();
                    if (g) {
                        if (e) {
                            n = Ext.fly(f).selectNode(e.getCellSelector())
                        }
                        if (o && e) {
                            g.scrollIntoView(f, !1);
                            c.getScrollable().scrollIntoView(n || f, !0, j, h)
                        } else {
                            g.scrollIntoView(n || f, !!e, j, h)
                        }
                    }
                    if (!a.isEntity) {
                        a = c.getRecord(f)
                    }
                    if (m) {
                        c.getSelectionModel().select(a)
                    }
                    if (l) {
                        c.getNavigationModel().setPosition(a, 0)
                    }
                    Ext.callback(i, k || b, [!0, a, f])
                } else {
                    if (c.bufferedRenderer) {
                        c.bufferedRenderer.scrollTo(a, {
                            animate: j,
                            highlight: h,
                            select: m,
                            focus: l,
                            column: e,
                            callback: function(f, e, c) {
                                Ext.callback(i, k || b, [!0, e, c])
                            }
                        })
                    } else {
                        Ext.callback(i, k || b, [!1, null])
                    }
                }
            }
        }
    }
}, 0, 0, 0, 0, 0, 0, [Sch.patches, 'TablePanel_6_2_1'], 0);
Ext.cmd.derive('Sch.patches.TableView', Sch.util.Patch, {
    target: 'Ext.view.Table',
    minVersion: '6.0.1',
    maxVersion: '6.0.1.9999',
    overrides: {
        suspendCellEditing: function(c) {
            var b = c,
                a = b.activeEditor;
            if (a && a.editing) {
                b.suspendedEditor = a;
                b.suspendEvents();
                a.suspendEvents();
                a.cancelEdit(!0);
                a.resumeEvents();
                b.resumeEvents()
            }
        },
        resumeCellEditing: function(d, e) {
            var b = d,
                a = b.activeEditor = b.suspendedEditor,
                c;
            if (a) {
                b.suspendEvents();
                a.suspendEvents();
                c = b.activateCell(e, !0, !0);
                a.field && a.field.focus(!1, !0);
                a.resumeEvents();
                b.resumeEvents()
            }
            return c
        },
        suspendActionableMode: function() {
            var d = this,
                b = d.grid.actionables,
                e = b.length,
                a;
            for (a = 0; a < e; a++) {
                var c = b[a];
                if (Ext.grid.plugin.CellEditing && c instanceof Ext.grid.plugin.CellEditing) {
                    d.suspendCellEditing(c)
                }
            }
        },
        resumeActionableMode: function(f) {
            var a = this,
                d = a.grid.actionables,
                g = d.length,
                b, c;
            a.toggleChildrenTabbability(!1);
            for (b = 0; b < g; b++) {
                var e = d[b];
                if (!c && Ext.grid.plugin.CellEditing && e instanceof Ext.grid.plugin.CellEditing) {
                    c = a.resumeCellEditing(e, f)
                }
            }
            if (!c) {
                a.activateCell(f)
            }
        },
        saveFocusState: function() {
            var b = this,
                i = b.dataSource,
                c = b.actionableMode,
                e = b.getNavigationModel(),
                a = c ? b.actionPosition : e.getPosition(!0),
                d = Ext.Element.getActiveElement(!0),
                h = a && a.view === b && a.getCell(),
                g, f;
            if (h && h.contains(d)) {
                a = a.clone();
                d.suspendFocusEvents();
                if (c) {
                    b.suspendActionableMode()
                } else {
                    e.setPosition()
                }
                d.resumeFocusEvents();
                return function() {
                    if (i.getCount()) {
                        g = Math.min(a.rowIdx, b.all.getCount() - 1);
                        f = Math.min(a.colIdx, b.getVisibleColumnManager().getColumns().length - 1);
                        a = (new Ext.grid.CellContext(b)).setPosition(i.contains(a.record) ? a.record : g, f);
                        if (c) {
                            b.resumeActionableMode(a)
                        } else {
                            e.setPosition(a, null, null, null, !0)
                        }
                    } else {
                        a.column.focus()
                    }
                }
            }
            return Ext.emptyFn
        },
        activateCell: function() {
            return !0
        },
        onFocusEnter: function(a) {
            if (!Ext.fly(a.target).hasCls('sch-event')) {
                this.callParent(arguments)
            }
        }
    }
}, 0, 0, 0, 0, 0, 0, [Sch.patches, 'TableView'], 0);
Ext.cmd.derive('Sch.patches.TableView2', Sch.util.Patch, {
    target: 'Ext.view.Table',
    minVersion: '6.0.2',
    maxVersion: '6.2.0',
    overrides: {
        privates: {
            setActionableMode: function(f, b) {
                var a = this,
                    i = a.getNavigationModel(),
                    c, e = a.grid.actionables,
                    l = e.length,
                    d, k, j, h = !1,
                    g;
                if (a.actionableMode === f) {
                    if (!f || b.isEqual(a.actionPosition)) {
                        return !1
                    }
                }
                if (f) {
                    if (b && (b.view === a || b.view === (g = a.lockingPartner) && g.actionableMode)) {
                        h = a.activateCell(b)
                    }
                    return h
                } else {
                    c = Ext.fly(Ext.Element.getActiveElement());
                    if (a.el.contains(c)) {
                        k = a.actionPosition && a.actionPosition.record || a.getRecord(c);
                        j = a.getHeaderByCell(c.findParent(a.getCellSelector()));
                        if (!b) {
                            b = (new Ext.grid.CellContext(a)).setPosition(k || 0, j || 0)
                        }
                        a._leavingActionableMode = !0;
                        b.getCell().focus();
                        a._leavingActionableMode = !1;
                        c = Ext.fly(Ext.Element.getActiveElement());
                        if (!(a.el.contains(c) && c.is(a.getCellSelector()))) {
                            b = null
                        }
                    }
                    for (d = 0; d < l; d++) {
                        if (e[d].deactivate) {
                            e[d].deactivate()
                        }
                    }
                    if (a.actionRow) {
                        a.actionRow.saveTabbableState({
                            skipSelf: !0,
                            includeSaved: !1
                        })
                    }
                    if (a.destroyed) {
                        return !1
                    }
                    a.actionableMode = a.ownerGrid.actionableMode = !1;
                    a.actionPosition = i.actionPosition = a.actionRow = null;
                    if (b) {
                        i.setPosition(b)
                    }
                }
            }
        },
        saveFocusState: function() {
            var b = this,
                i = b.dataSource,
                c = b.actionableMode,
                e = b.getNavigationModel(),
                a = c ? b.actionPosition : e.getPosition(!0),
                d = Ext.Element.getActiveElement(!0),
                h = a && a.view === b && a.getCell(),
                g, f;
            if (h && h.contains(d)) {
                a = a.clone();
                d.suspendFocusEvents();
                if (c) {
                    b.suspendActionableMode()
                } else {
                    e.setPosition()
                }
                d.resumeFocusEvents();
                return function() {
                    if (i.getCount()) {
                        g = Math.min(a.rowIdx, b.all.getCount() - 1);
                        f = Math.min(a.colIdx, b.getVisibleColumnManager().getColumns().length - 1);
                        a = (new Ext.grid.CellContext(b)).setPosition(i.contains(a.record) ? a.record : g, f);
                        if (c && !b._leavingActionableMode) {
                            b.resumeActionableMode(a)
                        } else {
                            e.setPosition(a, null, null, null, !0)
                        }
                    } else {
                        a.column.focus()
                    }
                }
            }
            return Ext.emptyFn
        }
    }
}, 0, 0, 0, 0, 0, 0, [Sch.patches, 'TableView2'], 0);
Ext.cmd.derive('Sch.patches.TableView_6_0_2', Sch.util.Patch, {
    target: 'Ext.view.Table',
    minVersion: '6.0.2',
    maxVersion: '6.0.3',
    overrides: {
        handleUpdate: function(J, d, x, B, K, I) {
            x = x || Ext.data.Model.EDIT;
            var a = this,
                D = a.store.indexOf(d),
                n = a.rowTpl,
                w = a.markDirty,
                k = a.dirtyCls,
                u = x !== Ext.data.Model.EDIT,
                f = [],
                o = a.variableRowHeight,
                p = 0,
                G = a.ownerCt,
                g = a.cellFly || (a.self.prototype.cellFly = new Ext.dom.Fly()),
                c, E, j, q, H, y, l, t, m, b, r, i, s, h, F, e, C, A, z, v;
            if (a.viewReady) {
                c = a.getNodeByRecord(d);
                if (c) {
                    if (d.isCollapsedPlaceholder) {
                        Ext.fly(c).syncContent(a.createRowElement(d, a.indexOfRow(d)));
                        return
                    }
                    t = a.overItemCls;
                    m = a.ownerCt.getVisibleColumnManager().getColumns();
                    if (I) {
                        f = m;
                        p = 1
                    } else {
                        for (i = 0, r = m.length; i < r; i++) {
                            b = m[i];
                            if (b.preventUpdate) {
                                h = Ext.fly(c).down(b.getCellSelector(), !0);
                                if (h && !u && w) {
                                    g.attach(h);
                                    if (d.isModified(b.dataIndex)) {
                                        g.addCls(k)
                                    } else {
                                        g.removeCls(k)
                                    }
                                }
                            } else {
                                s = a.shouldUpdateCell(d, b, B);
                                if (s) {
                                    p = p | s;
                                    f[f.length] = b;
                                    o = o || b.variableRowHeight
                                }
                            }
                        }
                    }
                    a.fireEvent('beforeitemupdate', d, D, c, f);
                    if (a.getRowClass || !a.getRowFromItem(c) || p & 1 || c.tBodies[0].childNodes.length > 1) {
                        z = c._extData;
                        j = a.createRowElement(d, a.indexOfRow(d), f);
                        if (Ext.fly(c, '_internal').hasCls(t)) {
                            Ext.fly(j).addCls(t)
                        }
                        if (Ext.isIE9m && c.mergeAttributes) {
                            c.mergeAttributes(j, !0)
                        } else {
                            q = j.attributes;
                            H = q.length;
                            for (l = 0; l < H; l++) {
                                y = q[l].name;
                                if (y !== 'id') {
                                    c.setAttribute(y, q[l].value)
                                }
                            }
                        }
                        if (z) {
                            z.isSynchronized = !1
                        }
                        if (m.length && (E = a.getRow(c))) {
                            a.updateColumns(E, Ext.fly(j).down(a.rowSelector, !0), f)
                        }
                        while (n) {
                            if (n.syncContent) {
                                if (n.syncContent(c, j, B ? f : null) === !1) {
                                    break
                                }
                            }
                            n = n.nextTpl
                        }
                    } else {
                        for (i = 0, r = f.length; i < r; i++) {
                            b = f[i];
                            F = b.dataIndex;
                            e = d.get(F);
                            h = Ext.fly(c).down(b.getCellSelector(), !0);
                            g.attach(h);
                            if (!u && w) {
                                if (d.isModified(b.dataIndex)) {
                                    g.addCls(k)
                                } else {
                                    g.removeCls(k)
                                }
                            }
                            C = b.usingDefaultRenderer;
                            A = C ? b : b.scope;
                            if (b.updater) {
                                Ext.callback(b.updater, A, [h, e, d, a, a.dataSource], 0, b, G)
                            } else {
                                if (b.renderer) {
                                    e = Ext.callback(b.renderer, A, [e, null, d, 0, 0, a.dataSource, a], 0, b, G)
                                }
                                v = e == null || e === '';
                                e = v ? b.emptyCellText : e;
                                if (b.producesHTML || v) {
                                    g.down(a.innerSelector, !0).innerHTML = e
                                } else {
                                    g.down(a.innerSelector, !0).childNodes[0].data = e
                                }
                            }
                            if (a.highlightClass) {
                                Ext.fly(h).addCls(a.highlightClass);
                                if (!a.changedCells) {
                                    a.self.prototype.changedCells = [];
                                    a.prototype.clearChangedTask = new Ext.util.DelayedTask(a.clearChangedCells, a.prototype);
                                    a.clearChangedTask.delay(a.unhighlightDelay)
                                }
                                a.changedCells.push({
                                    cell: h,
                                    cls: a.highlightClass,
                                    expires: Ext.Date.now() + 1000
                                })
                            }
                        }
                    }
                    if (u && w && !d.dirty) {
                        Ext.fly(c, '_internal').select('.' + k).removeCls(k)
                    }
                    if (o) {
                        Ext.suspendLayouts()
                    }
                    a.fireEvent('itemupdate', d, D, c);
                    if (o) {
                        a.ownerGrid.updateLayout();
                        Ext.resumeLayouts(!0)
                    }
                }
            }
        }
    }
}, 0, 0, 0, 0, 0, 0, [Sch.patches, 'TableView_6_0_2'], 0);
Ext.cmd.derive('Sch.patches.TableView_6_2_0', Sch.util.Patch, {
    minVersion: '6.2.0',
    maxVersion: '6.2.1',
    target: 'Ext.view.Table',
    overrides: {
        getDefaultFocusPosition: function(c) {
            var b = this,
                f = b.dataSource,
                a = b.lastFocused,
                g = (new Ext.grid.CellContext(b)).setPosition(0, 0),
                d, e;
            if (c) {
                if (c.isColumn && c.cellFocusable !== !1) {
                    if (!a) {
                        a = g
                    }
                    a.setColumn(c);
                    a.setView(c.getView())
                } else {
                    if (c.isTableView && c.lastFocused) {
                        a = (new Ext.grid.CellContext(b)).setPosition(c.lastFocused.record, 0)
                    }
                }
            }
            if (a) {
                e = b.getScrollable();
                if (!f.contains(a.record) || e && !e.isInView(a.getRow()).y) {
                    a.setRow(f.getAt(Math.min(a.rowIdx, f.getCount() - 1)))
                }
            } else {
                a = g;
                d = b.el.down(b.getCellSelector() + '[tabIndex="-1"]');
                if (d) {
                    a.setPosition(b.getRecord(d), b.getHeaderByCell(d))
                } else {
                    a = null
                }
            }
            return a
        }
    }
}, 0, 0, 0, 0, 0, 0, [Sch.patches, 'TableView_6_2_0'], 0);
Ext.cmd.derive('Sch.patches.TimelineGridView', Sch.util.Patch, {
    target: 'Sch.view.TimelineGridView',
    minVersion: '6.0.1',
    overrides: {
        initComponent: function() {
            this.callParent(arguments);
            if (this.rtl) {
                this.headerCt.on('afterlayout', function(a) {
                    a.scrollTo(this.getScrollX())
                }, this)
            }
        }
    }
}, 0, 0, 0, 0, 0, 0, [Sch.patches, 'TimelineGridView'], 0);
Ext.cmd.derive('Sch.patches.TimelineGridViewScroll6_2', Sch.util.Patch, {
    target: 'Sch.view.TimelineGridView',
    minVersion: '6.2.0',
    overrides: {
        scrollVerticallyTo: function(b, a) {
            this.up('timelinegrid,timelinetree').getScrollable().scrollTo(null, b, a)
        },
        getVerticalScroll: function() {
            var a = this.up('timelinegrid,timelinetree').getScrollable();
            if (a.getNormalScroller) {
                if (a.getNormalScroller()) {
                    return a.getPosition().y
                } else {
                    return 0
                }
            } else {
                return a.getPosition().y
            }
        }
    }
}, 0, 0, 0, 0, 0, 0, [Sch.patches, 'TimelineGridViewScroll6_2'], 0);
Ext.cmd.derive('Sch.patches.TimelinePanel', Sch.util.Patch, {
    target: 'Sch.mixin.TimelinePanel',
    minVersion: '6.2.0',
    applyFn: function() {
        Sch.panel.TimelineGridPanel && Sch.panel.TimelineGridPanel.override({
            hideHeaders: !1
        });
        Sch.panel.TimelineTreePanel && Sch.panel.TimelineTreePanel.override({
            hideHeaders: !1
        })
    }
}, 0, 0, 0, 0, 0, 0, [Sch.patches, 'TimelinePanel'], 0);
Ext.cmd.derive('Sch.patches.TouchAction', Sch.util.Patch, {
    target: 'Ext.dom.TouchAction',
    applyFn: function() {
        var a = Ext.dom.TouchAction.onTouchEnd;
        Ext.dom.TouchAction.onTouchEnd = function(b) {
            b.touches = b.touches || [];
            return a.apply(this, arguments)
        }
    }
}, 0, 0, 0, 0, 0, 0, [Sch.patches, 'TouchAction'], 0);
Ext.cmd.derive('Wuis.ajax.DirectService', Ext.Base, {
    singleton: !0,
    useMsgBoxDialog: !0,
    isWorking: 0,
    constructor: function() {
        this.mixins.observable.constructor.call(this)
    },
    provide: function(a, c) {
        var d, e, b;
        if (!c) {
            c = ''
        }
        if (a) {
            for (d in a) {
                if (a.hasOwnProperty(d)) {
                    b = a[d];
                    e = Ext.ns(c + b.ns);
                    e[b.name] = this.createService(b)
                }
            }
        }
    },
    createService: function(a) {
        var b = this;
        return function(d, c, e) {
            b.callService(a, d, c, e)
        }
    },
    callService: function(c, a, i, m) {
        var h = this,
            d = c.url,
            l = c.method || 'GET',
            e = c.paramsKind || {},
            o = c.method === 'GET' ? 'QUERY' : 'BODY',
            k = {},
            f = {},
            n = +new Date(),
            j = Ext.id(),
            b, g;
        if (Ext.isFunction(a)) {
            m = i;
            i = a;
            a = null
        }
        if (e === 'BODY') {
            f = a
        } else {
            if (a) {
                for (b in a) {
                    if (a.hasOwnProperty(b)) {
                        g = typeof e === 'string' ? e : e[b] || o;
                        if (g === 'URL') {
                            d = d.replace('{' + b + '}', encodeURIComponent(a[b]))
                        } else {
                            if (g === 'QUERY') {
                                k[b] = a[b]
                            } else {
                                if (g === 'ENTIREBODY') {
                                    f = a[b]
                                } else {
                                    f[b] = a[b]
                                }
                            }
                        }
                    }
                }
            }
        }
        d = d.replace(/\{[a-z]+\}/ig, '');
        if (c.loadingText !== !1) {
            h.isWorking += 1
        }
        h.showMask(c, j);
        Ext.Ajax.request({
            service: c,
            serviceCallParams: a,
            serviceCallId: j,
            url: d,
            method: l,
            serviceCallback: i,
            serviceScope: m,
            startTime: n,
            params: k,
            jsonData: l === 'GET' ? undefined : f,
            callback: h.callServiceCallback,
            scope: h
        })
    },
    callServiceCallback: function(a, i, b) {
        var d = this,
            g = +new Date(),
            c = i ? Ext.decode(b.responseText, !0) : undefined,
            h = +new Date(),
            f, e;
        if (a.service.loadingText !== !1) {
            d.isWorking -= 1
        }
        d.hideMask(a.service, a.serviceCallId);
        d.fireEvent('requestcomplete', c, b, a.service, a.serviceCallParams, a);
        f = +new Date();
        if (a.serviceCallback) {
            a.serviceCallback.call(a.serviceScope || d, c, b);
            e = +new Date()
        } else {
            e = !1
        }
        Ext.log.info(['[DirectService] ', a.service.ns, '.', a.service.name, ': ', b.status, ' ', b.statusText, ' ', b.status === 200 ? '(' + (c ? 'success: ' + c.success : 'invalid JSON responce') + ') ' : '', g - a.startTime, 'ms; ', 'event handlers: ', f - h, 'ms; ', 'service callback: ', e === !1 ? '-' : e - f + 'ms'].join(''));
        d.fireEvent('callstat', a.service.ns, a.service.name, b.status === 200 && c && c.success, g - a.startTime, (e || f) - h)
    },
    showMask: function(a, c) {
        var b;
        if (a.loadingText === !1) {
            return
        }
        if (this.useMsgBoxDialog) {
            b = Ext.create('Ext.window.MessageBox', {
                id: 'ds-mask-' + c
            });
            b.wait(a.loadingText || 'Loading', null, {
                interval: 40,
                increment: Math.round((a.loadingTime || 2000) / 40)
            })
        } else {
            b = Ext.widget('box', {
                floating: !0,
                id: 'ds-mask-' + c,
                html: '<span>' + (a.loadingText || 'Loading...') + '</span>',
                shadow: !1,
                cls: 'wuis-directservice-mask'
            });
            b.show()
        }
    },
    hideMask: function(c, b) {
        var a;
        if (c.loadingText === !1) {
            return
        }
        a = Ext.getCmp('ds-mask-' + b);
        if (a) {
            a.destroy()
        }
    }
}, 1, 0, 0, 0, 0, [
    ['observable', Ext.util.Observable]
], [Wuis.ajax, 'DirectService'], 0);
Ext.cmd.derive('WuisLogin.Security', Ext.Base, {
    singleton: !0,
    data: null,
    identity: null,
    rights: null,
    applications: null,
    config: null,
    tenants: null,
    authorize: function(c, a) {
        var b = this;
        if (!c) {
            Ext.log.error('WuisLogin.Security.authorize() method requires url parameter to be set!')
        }
        Ext.Ajax.request({
            url: c,
            method: 'GET',
            disableCaching: !0,
            success: function(g, i) {
                var d = Ext.decode(g.responseText, !0),
                    e = null,
                    h = null,
                    f = null;
                if (d && d.success && d.result) {
                    d = d.result;
                    if (d.aggregatedRights) {
                        h = {};
                        f = {};
                        Ext.each(d.aggregatedRights, function(d) {
                            var b = d.application;
                            h[(b ? b + '.' : '') + d.name] = d.active;
                            if (b) {
                                f[b] = f[b] || d.active
                            }
                        })
                    }
                    if (d.identity) {
                        e = {};
                        Ext.apply(e, {
                            id: d.identity.id,
                            name: d.identity.name,
                            type: d.identity.type,
                            roles: {},
                            attributes: {}
                        });
                        if (d.ownRoles) {
                            Ext.each(d.ownRoles, function(b) {
                                e.roles[b.name] = !0
                            })
                        }
                        if (d.identity.attributes) {
                            Ext.each(d.identity.attributes, function(b) {
                                e.attributes[b.attribute.name] = b.value
                            })
                        }
                    }
                    b.data = d;
                    b.identity = e;
                    b.rights = h;
                    b.applications = f;
                    if (a && a.success) {
                        a.success.call(a.scope || b, g, i, d)
                    }
                } else {
                    if (a && a.failure) {
                        a.failure.call(a.scope || b, g, i, d)
                    }
                }
            },
            failure: function(d, e) {
                var f = Ext.decode(d.responseText, !0);
                if (a && a.failure) {
                    a.failure.call(a.scope || b, d, e, f)
                }
            }
        })
    },
    neoSecurityAuthorize: function(c, a) {
        var b = this;
        if (!c) {
            Ext.log.error('WuisLogin.Security.authorize() method requires url parameter to be set!')
        }
        Ext.Ajax.request({
            url: c,
            method: 'GET',
            disableCaching: !0,
            success: function(g, h) {
                var d = Ext.decode(g.responseText, !0),
                    i = null,
                    f = null,
                    e = null;
                if (!d || !d.tenant || !d.userName) {
                    if (a && a.failure) {
                        a.failure.call(a.scope || b, g, h, d)
                    }
                    return
                }
                b.data = d;
                if (d.rights) {
                    f = {};
                    e = {};
                    Ext.each(d.rights, function(i) {
                        var b = i.module,
                            d = i.name;
                        e[b] = e[b] || {};
                        e[b][d] = !0;
                        f[d] = f[d] || {};
                        f[d][b] = !0
                    })
                }
                i = {
                    name: d.userName || null,
                    attributes: d.attributes || {},
                    tenant: d.tenant || null
                };
                b.identity = i;
                b.rights = f;
                b.applications = e;
                if (a && a.success) {
                    a.success.call(a.scope || b, g, h, d)
                }
            },
            failure: function(d, e) {
                var f = Ext.decode(d.responseText, !0);
                if (a && a.failure) {
                    a.failure.call(a.scope || b, d, e, f)
                }
            }
        })
    },
    authenticate: function(c, a) {
        var b = this;
        if (!c) {
            Ext.log.error('WuisLogin.Security.authenticate() method requires at least url parameter to be set!')
        }
        Ext.Ajax.request({
            url: c,
            method: 'GET',
            disableCaching: !0,
            success: function(e, f) {
                var d = Ext.decode(e.responseText, !0);
                if (d && d.success) {
                    if (a && a.success) {
                        a.success.call(a.scope || b, e, f, d)
                    }
                } else {
                    if (a && a.failure) {
                        a.failure.call(a.scope || b, e, f, d)
                    }
                }
            },
            failure: function(d, e) {
                var f = Ext.decode(d.responseText, !0);
                if (a && a.failure) {
                    a.failure.call(a.scope || b, d, e, f)
                }
            }
        })
    },
    authenticateWithPost: function(c, a) {
        var b = this;
        if (!c) {
            Ext.log.error('WuisLogin.Security.authenticateWithPost() method requires at least url parameter to be set!')
        }
        Ext.Ajax.request({
            url: c,
            method: 'POST',
            disableCaching: !0,
            headers: {
                password: a.password
            },
            success: function(e, f) {
                var d = Ext.decode(e.responseText);
                if (d && d.success) {
                    if (a && a.success) {
                        a.success.call(a.scope || b, e, f, d)
                    }
                } else {
                    if (a && a.failure) {
                        a.failure.call(a.scope || b, e, f, d)
                    }
                }
            },
            failure: function(d, e) {
                var f = Ext.decode(d.responseText);
                if (a && a.failure) {
                    a.failure.call(a.scope || b, d, e, f)
                }
            }
        })
    },
    neoSecurityAuthenticate: function(c, a) {
        var b = this;
        if (!c) {
            Ext.log.error('WuisLogin.Security.authenticate() method requires at least url parameter to be set!')
        }
        Ext.Ajax.request({
            url: c,
            method: 'POST',
            jsonData: Ext.encode(a.credentials),
            success: function(e, f) {
                var d = Ext.decode(e.responseText, !0);
                if (d && d.success) {
                    if (a && a.success) {
                        a.success.call(a.scope || b, e, f, d)
                    }
                } else {
                    if (a && a.failure) {
                        a.failure.call(a.scope || b, e, f, d)
                    }
                }
            },
            failure: function(d, e) {
                var f = Ext.decode(d.responseText, !0);
                if (a && a.failure) {
                    a.failure.call(a.scope || b, d, e, f)
                }
            }
        })
    },
    logout: function(b, a) {
        var c = this;
        a = a || {};
        if (Ext.isString(b)) {
            a.url = b;
            a.method = 'GET'
        } else {
            if (Ext.isObject(b)) {
                a = Ext.apply(Ext.apply({}, b), a)
            }
        }
        if (!a.url) {
            Ext.log.error('WuisLogin.Security.logout() method requires at least url parameter to be set!')
        }
        Ext.Ajax.request({
            url: a.url,
            method: a.method || 'GET',
            headers: {
                'Content-Type': 'application/json'
            },
            success: function(e, f) {
                var d = Ext.decode(e.responseText, !0) || null;
                if (d && d.success) {
                    if (a && a.success) {
                        a.success.call(a.scope || c, e, f, d)
                    }
                } else {
                    if (a && a.failure) {
                        a.failure.call(a.scope || c, e, f, d)
                    }
                }
                c.resetAuthorizationData()
            },
            failure: function(d, e) {
                var f = Ext.decode(d.responseText, !0);
                if (a && a.failure) {
                    a.failure.call(a.scope || c, d, e, f)
                }
            }
        })
    },
    validate: function(b, a) {
        var c = this;
        if (!b) {
            Ext.log.error('WuisLogin.Security.validate() method requires url parameter to be set!')
        }
        a = a || {};
        Ext.log.info('Validating session...');
        Ext.Ajax.request({
            url: b,
            method: 'GET',
            disableCaching: !0,
            success: function(d, e) {
                var f = Ext.decode(d.responseText, !0);
                Ext.log.info('Session validation was successful.');
                if (a.success) {
                    a.success.call(a.scope || c, d, e, f)
                }
            },
            failure: function(d, e) {
                var f = Ext.decode(d.responseText, !0);
                Ext.log.warn('Session validation failed with error code ' + d.status);
                if (a.failure) {
                    a.failure.call(a.scope || c, d, e, f)
                }
            }
        })
    },
    renewCertificate: function(b, a) {
        var c = this;
        if (!b) {
            Ext.log.error('WuisLogin.Security.renewCertificate() method requires url parameter to be set!')
        }
        a = a || {};
        Ext.log.info('Renewing certificate...');
        Ext.Ajax.request({
            url: b,
            method: 'GET',
            disableCaching: !0,
            success: function(d, e) {
                var f = Ext.decode(d.responseText, !0);
                Ext.log.info('Certificate renewal was successful.');
                if (a.success) {
                    a.success.call(a.scope || c, d, e, f)
                }
            },
            failure: function(d, e) {
                var f = Ext.decode(d.responseText, !0);
                Ext.log.warn('Certificate renewal failed with error code ' + d.status);
                if (a.failure) {
                    a.failure.call(a.scope || c, d, e, f)
                }
            }
        })
    },
    loadConfig: function(c, a) {
        var b = this;
        if (!c) {
            Ext.log.error('WuisLogin.Security.loadConfig() method requires url parameter to be set!')
        }
        a = a || {};
        Ext.Ajax.request({
            url: c,
            method: 'GET',
            disableCaching: !0,
            success: function(e, f) {
                var d = Ext.decode(e.responseText, !0);
                if (!Ext.isObject(d)) {
                    if (a && a.failure) {
                        a.failure.call(a.scope || b, e, f, d)
                    }
                    return
                }
                b.config = d;
                if (a && a.success) {
                    a.success.call(a.scope || b, e, f, d)
                }
            },
            failure: function(d, e) {
                var f = Ext.decode(d.responseText, !0);
                if (a && a.failure) {
                    a.failure.call(a.scope || b, d, e, f)
                }
            }
        })
    },
    resetAuthorizationData: function() {
        var a = this;
        a.data = null;
        a.identity = null;
        a.applications = null;
        a.rights = null;
        a.tenants = null
    },
    loadTenants: function(c, a) {
        var b = this;
        if (!c) {
            Ext.log.error('WuisLogin.Security.loadTenants() method requires url parameter to be set!')
        }
        a = a || {};
        Ext.Ajax.request({
            url: c,
            method: 'GET',
            disableCaching: !0,
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            success: function(e, f) {
                var d = Ext.decode(e.responseText, !0),
                    g = [];
                if (!d || !Ext.isArray(d)) {
                    if (a && a.failure) {
                        a.failure.call(a.scope || b, e, f, d)
                    }
                    return
                }
                Ext.each(d, function(b) {
                    g.push({
                        name: b
                    })
                });
                b.tenants = g;
                if (a && a.success) {
                    a.success.call(a.scope || b, e, f, d)
                }
            },
            failure: function(d, e) {
                var f = Ext.decode(d.responseText, !0);
                if (a && a.failure) {
                    a.failure.call(a.scope || b, d, e, f)
                }
            }
        })
    },
    hasRight: function(a, c) {
        var b = a.split('.');
        if (b.length === 2) {
            a = b[0];
            c = b[1]
        }
        return this.applications && this.applications[a] && this.applications[a][c]
    },
    getUrlFromConfig: function(d, b, e) {
        var c = this,
            h = Ext.String.uncapitalize(d) + 'Url',
            g = Ext.String.uncapitalize(d) + 'Method',
            a = c.config && c.config[h] || null,
            f = c.config && c.config[g] || 'GET';
        b = b || '';
        if (a && Ext.isString(a)) {
            if (a.indexOf('http') === -1) {
                a = b + a
            }
            return {
                url: a,
                method: f
            }
        }
        return e ? {
            url: b + e,
            method: f
        } : null
    }
}, 0, 0, 0, 0, 0, 0, [WuisLogin, 'Security'], 0);
Ext.cmd.derive('WuisLogin.Common', Ext.Base, {
    singleton: !0,
    tenantKeyLS: 'NeoSecurity-Tenant',
    applications: {
        usrMgmt: {
            name: 'usrMgmt',
            requiredRight: 'readIdentity'
        },
        ioccSecurity: {
            name: 'iocc-security-webui',
            requiredRight: 'View_SecurityAdminApplication'
        },
        ioccSecurityAuthorization: {
            name: 'iocc-security-authorization',
            requiredRight: 'editRight'
        },
        ioccSecurityIdentity: {
            name: 'iocc-security-identity',
            requiredRight: 'editIdentity'
        },
        briefing: {
            name: 'Briefing',
            requiredRight: 'View_myBriefingApplication'
        },
        opsTimesSquare: {
            name: 'NetLineOps',
            requiredRight: 'View_TimesSquareApplication'
        },
        crewLinkRoster: {
            name: 'CrewLink',
            requiredRight: 'View_CrewLinkRosterApplication'
        },
        crewLinkAdmin: {
            name: 'CrewLink',
            requiredRight: 'View_CrewLinkNoCrewApplication'
        },
        crewLinkCrewInformation: {
            name: 'CrewLink',
            requiredRight: 'View_CrewLinkCrewApplication'
        },
        crewLinkCheckIn: {
            name: 'CrewLink',
            requiredRight: 'View_CrewLinkCrewApplication'
        }
    },
    messageMap: {
        'iocc.sec.internal.config.load.error': 'An unexpected error has occurred while loading the security configuration! Please try again later or contact the system administrator!',
        'iocc.sec.unexpected.exception': 'An unexpected server error has occurred while processing your request! Please try again later or contact the system administrator!',
        'iocc.sec.authorization.failed': 'Authorization failed! Please try again later or contact the system administrator!',
        'iocc.sec.authentication.failed': 'Authentication failed: username or password invalid!',
        'iocc.sec.authentication.failed.user.not.activated': 'Authentication failed: user not activated!',
        'iocc.sec.authentication.failed.incorrect.pw': 'Authentication failed: incorrect password',
        'iocc.sec.authentication.validation.failed': 'The certificate has expired!',
        'iocc.sec.authentication.certificate.nullorempty': 'You have logged out from the application or the login session is expired.<br/>You can close this window or reload the application to sign in again!',
        'iocc.sec.authentication.certificate.decodingerror': 'The certificate could not be decoded!',
        'iocc.sec.authentication.certificate.expired': 'The login session has been expired.<br/>Please reauthenticate yourself with your username and password!',
        'iocc.sec.authentication.certificate.notyetvalid': 'The current Date or the specified Date is before the notBefore date/time in the Certificate validity period!',
        'iocc.sec.authentication.certificate.invalidkey': 'Certificate public key not found!',
        'iocc.sec.authentication.certificate.exception': 'Certificate validation failed!',
        'iocc.sec.authentication.certificate.nosuchalgorithm': 'Certificate validation failed!',
        'iocc.sec.authentication.certificate.nosuchprovider': 'Certificate validation failed!',
        'iocc.sec.authentication.certificate.wrongsignature': 'Generic Signature exception occurred!',
        'iocc.sec.authentication.notfound': 'Authentication failed: user not found!',
        'iocc.sec.authentication.publickey.notfound': 'Certificate public key not found!',
        'iocc.sec.connection.error': 'Connection to security service could not be created!',
        'iocc.sec.identity.password.weak': 'New password too weak, password not changed!',
        'iocc.sec.identity.password.incorrect': 'Provided credentials are not correct, password not changed!',
        'iocc.sec.identity.password.notallowed': 'Password change not allowed!',
        'iocc.sec.identity.password.exception': 'Could not cahnge password. An error happened!',
        'iocc.sec.internal.session.expired.close': 'The login session has been expired.<br/>You must close this window and restart the application to sign in again!',
        'iocc.sec.internal.session.expired.reload': 'The login session has been expired.<br/>You must close this window or reload the application to sign in again!',
        'iocc.sec.internal.session.expired.reauthenticate': 'The login session has been expired.<br/>Please reauthenticate yourself with your username and password!',
        'iocc.sec.internal.logged.out': 'You have logged out from the application!<br/>You can close this window or reload the application to sign in again!',
        'iocc.sec.internal.warning.identity.changed': 'Application must be reloaded, because login credentials has been changed since last login!',
        'iocc.sec.internal.button.reload': 'Reload Application',
        'iocc.sec.internal.button.close': 'Close Application',
        'iocc.sec.internal.error.load.config': 'Unable to retrieve security configuration from server!<br/>Application can continue, but some features might not work properly.<br/>If the problem persist, please call system administrator!<br/>',
        'iocc.sec.internal.logged.out.or.session.expired': 'You have logged out from the application or the login session is expired!<br/>You can close this window or reload the application to sign in again!',
        'iocc.sec.internal.error.no.message': 'Either your user name or password is invalid.<br/>Please retry the operation or click the "forgot password to reset your password.',
        'iocc.sec.internal.authentication.not.found': 'You are not authorized to use this application!<br/>You have to log in with a different credential, or contact the system administrator!',
        'iocc.sec.mailsending.error': 'Unable to complete the operation as server is not able to send e-mails now.<br/>If the problem persist, please call system administrator!<br/>'
    },
    hasApplicationAccess: function(e) {
        var g = this,
            b = WuisLogin.Security.applications,
            d = WuisLogin.Security.rights,
            f = g.applications,
            c = f[e],
            a;
        if (!c || !b) {
            return !1
        }
        a = c.name;
        if (b[a] === !0 && Ext.isObject(d)) {
            return d[a + '.' + c.requiredRight] === !0
        }
        return b[a] && b[a][c.requiredRight]
    },
    checkCompatibleRights: function(b) {
        var c = WuisLogin.Security.rights,
            a = !0;
        Ext.iterate(b, function(e, d) {
            if (d && !c[e]) {
                a = !1;
                return !1
            }
        });
        return a
    },
    loadTenant: function() {
        return window.localStorage && window.localStorage.getItem(this.tenantKeyLS) || null
    },
    saveTenant: function(a) {
        var b = this;
        if (!window.localStorage) {
            return !1
        }
        if (!a) {
            window.localStorage.removeItem(b.tenantKeyLS);
            return null
        }
        if (!Ext.isString(a)) {
            return !1
        }
        window.localStorage.setItem(b.tenantKeyLS, a);
        return a
    }
}, 0, 0, 0, 0, 0, 0, [WuisLogin, 'Common'], 0);
Ext.cmd.derive('WuisLogin.view.Login', Ext.window.Window, {
    cls: 'wuislogin-window',
    layout: 'fit',
    closable: !1,
    resizable: !1,
    modal: !0,
    constrain: !0,
    width: 500,
    y: 140,
    title: 'Login',
    iconCls: 'icon-key',
    eventController: null,
    headerHtml: null,
    initComponent: function() {
        var a = this;
        a.createItems();
        a.createButtons();
        Ext.window.Window.prototype.initComponent.apply(this, arguments)
    },
    createItems: function() {
        var a = this,
            b = [];
        if (a.headerHtml) {
            b.push({
                xtype: 'box',
                cls: 'login-header',
                html: a.headerHtml
            })
        }
        if (WuisLogin.Security.tenants) {
            b.push({
                xtype: 'combobox',
                name: 'tenant',
                labelAlign: 'top',
                fieldLabel: 'Airline',
                emptyText: 'Please choose an airline',
                store: {
                    fields: ['name'],
                    data: WuisLogin.Security.tenants
                },
                queryMode: 'local',
                displayField: 'name',
                valueField: 'name',
                allowBlank: !1,
                itemId: 'tenant',
                margin: '0 0 5 280',
                labelStyle: 'margin-bottom:5px',
                anchor: '100%',
                value: WuisLogin.Common.loadTenant(),
                editable: !1
            })
        }
        b.push({
            xtype: 'textfield',
            labelAlign: 'top',
            fieldLabel: 'Login Name',
            name: 'user',
            itemId: 'user',
            margin: '0 0 5 280',
            labelStyle: 'margin-bottom:5px',
            anchor: '100%',
            allowBlank: !1,
            value: a.userName || '',
            readOnly: a.userNameReadOnly || !1,
            listeners: {
                specialkey: a.onSpecialKey,
                scope: a
            }
        });
        b.push({
            xtype: 'textfield',
            labelAlign: 'top',
            fieldLabel: 'Password',
            inputType: 'password',
            name: 'password',
            itemId: 'password',
            margin: '0 0 30 280',
            labelStyle: 'margin-bottom:5px',
            anchor: '100%',
            allowBlank: !1,
            listeners: {
                specialkey: a.onSpecialKey,
                scope: a
            }
        });
        if (a.showForgottenPassword) {
            b.push({
                xtype: 'component',
                autoEl: {
                    tag: 'a',
                    href: '#',
                    html: 'Forgot your password?'
                },
                listeners: {
                    el: {
                        click: a.onForgottenPasswordClick
                    },
                    scope: a
                }
            })
        }
        a.items = {
            xtype: 'form',
            border: 0,
            bodyPadding: 15,
            items: b,
            listeners: {
                validitychange: a.onFormValidityChange,
                scope: a
            }
        }
    },
    createButtons: function() {
        var a = this,
            b = {
                text: 'Change password',
                itemId: 'changePasswordBtn',
                cls: 'id-changePasswordBtn',
                hidden: !a.showPasswordChange,
                handler: a.onPasswordChangeClick,
                scope: a
            },
            c = {
                text: 'Login',
                iconCls: 'icon-key',
                cls: 'id-loginBtn',
                itemId: 'loginBtn',
                disabled: !0,
                handler: a.onLoginClick,
                scope: a
            };
        a.buttons = a.loginFirst ? [c, b] : [b, c]
    },
    afterRender: function() {
        Ext.window.Window.prototype.afterRender.call(this);
        this.focus();
        this.getUserField().focus()
    },
    onFormValidityChange: function(b, a) {
        this.down('#loginBtn').setDisabled(!a)
    },
    onSpecialKey: function(b, a) {
        if (a.getKey() === a.ENTER) {
            this.onLoginClick()
        }
    },
    onForgottenPasswordClick: function(c) {
        c.preventDefault();
        var a = this,
            b = a.down('form');
        (a.eventController || a).fireEvent('forgottenpasswordclick', a, b.getValues())
    },
    onPasswordChangeClick: function() {
        var a = this,
            b = a.getForm();
        (a.eventController || a).fireEvent('passwordchangeclick', a, b.getValues())
    },
    onLoginClick: function() {
        var a = this,
            b = a.getForm();
        if (!b.isValid()) {
            return
        }(a.eventController || a).fireEvent('login', a, b.getValues())
    },
    getUserField: function() {
        return this.getForm().items.get('user')
    },
    getPasswordField: function() {
        return this.getForm().items.get('password')
    },
    getForm: function() {
        return this.items.getAt(0)
    }
}, 0, ['WuisLogin'], ['component', 'box', 'container', 'panel', 'window', 'WuisLogin'], {
    'component': !0,
    'box': !0,
    'container': !0,
    'panel': !0,
    'window': !0,
    'WuisLogin': !0
}, ['widget.WuisLogin'], 0, [WuisLogin.view, 'Login'], 0);
Ext.cmd.derive('WuisLogin.view.PasswordChange', Ext.window.Window, {
    cls: 'wuislogin-passwordchange',
    layout: 'fit',
    closable: !1,
    resizable: !1,
    modal: !0,
    constrain: !0,
    width: 500,
    y: 100,
    title: 'Change Password',
    iconCls: 'icon-key',
    passwordVtype: 'wuisPassword',
    passwordValidator: null,
    eventController: null,
    headerHtml: null,
    validateMethod: 'validator',
    passwordValidateTimerId: null,
    passwordErrors: null,
    initComponent: function() {
        var a = this;
        a.createItems();
        a.createButtons();
        Ext.window.Window.prototype.initComponent.apply(this, arguments)
    },
    createItems: function() {
        var a = this,
            b = [];
        if (a.headerHtml) {
            b.push({
                xtype: 'box',
                cls: 'login-header',
                padding: '15 15 0 15',
                html: a.headerHtml
            })
        }
        b.push({
            xtype: 'box',
            dock: 'left',
            itemId: 'errorMsg',
            padding: '19 15 15 15',
            html: '',
            width: 230
        });
        a.items = {
            xtype: 'form',
            border: 0,
            bodyStyle: 'border:0 none',
            bodyPadding: 15,
            dockedItems: b,
            items: [{
                xtype: 'textfield',
                labelAlign: 'top',
                fieldLabel: 'User Name',
                name: 'user',
                itemId: 'user',
                margin: '0 0 5 20',
                labelStyle: 'margin-bottom:5px',
                anchor: '100%',
                allowBlank: !1,
                listeners: {
                    specialkey: a.onSpecialKey,
                    scope: a
                }
            }, {
                xtype: 'textfield',
                labelAlign: 'top',
                fieldLabel: 'Old Password',
                inputType: 'password',
                name: 'oldPassword',
                itemId: 'oldPassword',
                margin: '0 0 5 20',
                labelStyle: 'margin-bottom:5px',
                anchor: '100%',
                allowBlank: !1,
                listeners: {
                    specialkey: a.onSpecialKey,
                    scope: a
                }
            }, {
                xtype: 'textfield',
                labelAlign: 'top',
                fieldLabel: 'New Password',
                inputType: 'password',
                name: 'password1',
                itemId: 'password1',
                margin: '0 0 5 20',
                labelStyle: 'margin-bottom:5px',
                anchor: '100%',
                allowBlank: !1,
                vtype: a.passwordVtype,
                validator: a.validateMethod === 'validator' ? a.passwordValidator : null,
                listeners: {
                    specialkey: a.onSpecialKey,
                    change: a.onPassword1Change,
                    errorchange: a.onPassword1ErrorChange,
                    scope: a
                }
            }, {
                xtype: 'textfield',
                labelAlign: 'top',
                fieldLabel: 'New Password Again',
                inputType: 'password',
                name: 'password2',
                itemId: 'password2',
                margin: '0 0 5 20',
                labelStyle: 'margin-bottom:5px',
                anchor: '100%',
                allowBlank: !1,
                validator: function(a) {
                    return a === this.prev().getValue() ? !0 : 'Passwords do not match!'
                },
                listeners: {
                    specialkey: a.onSpecialKey,
                    scope: a
                }
            }, {
                xtype: 'textfield',
                labelAlign: 'top',
                fieldLabel: '\xa0',
                labelSeparator: '',
                margin: '0 0 5 20',
                labelStyle: 'margin-bottom:5px',
                anchor: '100%',
                readOnly: !0,
                itemId: 'pwStrength',
                value: 'Password Strength',
                cls: 'password-strength-field',
                validator: function() {
                    return a.validateMethod !== 'service' || !a.passwordErrors ? !0 : a.passwordErrors
                }
            }],
            listeners: {
                validitychange: a.onFormValidityChange,
                scope: a
            }
        }
    },
    createButtons: function() {
        var a = this;
        a.buttons = [{
            text: 'Ok',
            itemId: 'okBtn',
            cls: 'id-okBtn',
            disabled: !0,
            handler: a.onPasswordChangeClick,
            scope: a
        }, {
            text: 'Cancel',
            itemId: 'cancelBtn',
            cls: 'id-cancelBtn',
            handler: a.onCancelClick,
            scope: a
        }]
    },
    afterRender: function() {
        var a = this,
            b = a.getOldPasswordField();
        Ext.window.Window.prototype.afterRender.call(this);
        a.focus();
        if (b.getValue()) {
            a.getPasswordField().focus()
        } else {
            b.focus()
        }
    },
    onFormValidityChange: function(b, a) {
        this.down('#okBtn').setDisabled(!a)
    },
    onSpecialKey: function(b, a) {
        if (a.getKey() === a.ENTER) {
            this.doPasswordChange()
        }
    },
    onCancelClick: function() {
        var a = this;
        (a.eventController || a).fireEvent('passwordchangecancel', a, a.getForm().getValues())
    },
    onPasswordChangeClick: function() {
        this.doPasswordChange()
    },
    onPassword1Change: function() {
        var a = this;
        a.getForm().items.get('password2').isValid();
        if (a.validateMethod === 'service') {
            if (a.passwordValidateTimerId) {
                clearTimeout(a.passwordValidateTimerId)
            }
            a.passwordValidateTimerId = Ext.defer(a.firePasswordValidationEvent, 500, a)
        }
    },
    firePasswordValidationEvent: function() {
        var a = this;
        (a.eventController || a).fireEvent('validatepassword', a, a.getForm().getValues())
    },
    onPassword1ErrorChange: function(d, c) {
        var e = this,
            b = !d.getValue(),
            a = this.getPwStrengthField();
        if (e.validateMethod === 'service') {
            return
        }
        a.removeCls(['pw-ok', 'pw-error']);
        if (!b && !c) {
            a.addCls('pw-ok')
        } else {
            if (!b) {
                a.addCls('pw-error')
            }
        }
    },
    getUserField: function() {
        return this.getForm().items.get('user')
    },
    getOldPasswordField: function() {
        return this.getForm().items.get('oldPassword')
    },
    getPasswordField: function() {
        return this.getForm().items.get('password1')
    },
    getPwStrengthField: function() {
        return this.getForm().items.get('pwStrength')
    },
    getErrorMsgBox: function() {
        return this.down('#errorMsg')
    },
    getForm: function() {
        return this.items.getAt(0)
    },
    doPasswordChange: function() {
        var a = this,
            b = a.getForm();
        if (!b.isValid()) {
            return
        }(a.eventController || a).fireEvent('passwordchange', a, b.getValues())
    }
}, 0, ['WuisLoginPasswordChange'], ['component', 'box', 'container', 'panel', 'window', 'WuisLoginPasswordChange'], {
    'component': !0,
    'box': !0,
    'container': !0,
    'panel': !0,
    'window': !0,
    'WuisLoginPasswordChange': !0
}, ['widget.WuisLoginPasswordChange'], 0, [WuisLogin.view, 'PasswordChange'], 0);
Ext.cmd.derive('WuisLogin.controller.Login', Ext.app.Controller, {
    handleAjaxException: !0,
    handleForbiddenAsUnauthorized: !1,
    showPasswordChange: !0,
    passwordChangeWidget: 'WuisLoginPasswordChange',
    passwordChangeViewConfig: null,
    showForgottenPassword: !1,
    forgottenPasswordWidget: null,
    forgottenPasswordViewConfig: null,
    loginWidget: 'WuisLogin',
    loginViewConfig: null,
    loginService: null,
    passwordChangeService: null,
    forgottenPasswordService: null,
    init: function() {
        var a = this;
        if (a.handleAjaxException) {
            Ext.Ajax.on('requestexception', a.onAjaxRequestException, a)
        }
        a.on({
            login: a.onLogin,
            passwordchangeclick: a.onPasswordChangeClick,
            validatepassword: a.onValidatePassword,
            passwordchange: a.onPasswordChange,
            passwordchangecancel: a.onCancelPasswordChange,
            forgottenpasswordclick: a.onForgottenPasswordClick,
            forgottenpasswordchange: a.onForgottenPasswordChange,
            forgottenpasswordcancel: a.onCancelForgottenPassword,
            scope: a
        })
    },
    checkCertificateValidity: function() {},
    getLoginWin: function() {
        return Ext.ComponentQuery.query(this.loginWidget)[0]
    },
    getPasswordChangeWin: function() {
        return Ext.ComponentQuery.query(this.passwordChangeWidget)[0]
    },
    getForgottenPasswordWin: function() {
        return Ext.ComponentQuery.query(this.forgottenPasswordWidget)[0]
    },
    showLoginWindow: function(b) {
        var c = this,
            a = c.getLoginWin(),
            d, e;
        b = Ext.apply(Ext.apply({
            showForgottenPassword: c.showForgottenPassword,
            showPasswordChange: c.showPasswordChange
        }, c.loginViewConfig), b);
        if (!a) {
            a = Ext.widget(c.loginWidget, Ext.apply(b, {
                eventController: c,
                showPasswordChange: b.showPasswordChange && !!c.passwordChangeWidget,
                showForgottenPassword: b.showForgottenPassword && !!c.forgottenPasswordWidget
            }, b));
            if (a.parentContainer) {
                a.parentContainer.add(a)
            } else {
                a.show()
            }
        } else {
            if (a.isHidden()) {
                a.show()
            }
        }
        d = a.getUserField();
        e = a.getPasswordField();
        d.setValue(b.userName || '');
        d.setReadOnly(b.userNameReadOnly || !1);
        e.setValue('');
        (d.readOnly ? e : d).focus(!0)
    },
    hasToBeReload: function() {
        var a = this,
            b = a.loginWidget;
        if (a.passwordChangeWidget) {
            b += ',' + a.passwordChangeWidget
        }
        if (a.forgottenPasswordWidget) {
            b += ',' + a.forgottenPasswordWidget
        }
        return !Ext.ComponentQuery.query(b).length
    },
    onAjaxRequestException: function(c, a) {
        var b = this;
        if (a.status === 401 && b.hasToBeReload(c, a)) {
            b.reloadApplication()
        }
    },
    reloadApplication: function() {
        location.href = location.href.replace(/#.*/, '')
    },
    checkUnauthenticated: function(a) {
        return a && (a.status === 401 || this.handleForbiddenAsUnauthorized && a.status === 403) || !1
    },
    onPasswordChangeClick: function(a, b) {
        this.showPasswordChangeWindow(a, b)
    },
    showPasswordChangeWindow: function(b, c) {
        var d = this,
            a = Ext.widget(d.passwordChangeWidget, Ext.apply({
                eventController: d
            }, d.passwordChangeViewConfig)),
            f = a && a.getUserField(),
            e = a && a.getOldPasswordField();
        if (b && c === !0) {
            c = Ext.isFunction(b.getForm) && b.getForm().getValue() || null
        }
        if (f) {
            f.setValue(c && c.user || '')
        }
        if (e) {
            e.setValue(c && c.password || '')
        }
        if (b) {
            if (b.parentContainer) {
                b.parentContainer.remove(b)
            } else {
                b.destroy()
            }
        }
        if (a.parentContainer) {
            a.parentContainer.add(a)
        } else {
            a.show()
        }
    },
    onForgottenPasswordClick: function(b, e) {
        var c = this,
            a = Ext.widget(c.forgottenPasswordWidget, Ext.apply({
                eventController: c
            }, c.forgottenPasswordViewConfig)),
            d = a.getUserField();
        if (d) {
            d.setValue(e && e.user || '')
        }
        if (b) {
            if (b.parentContainer) {
                b.parentContainer.remove(b)
            } else {
                b.destroy()
            }
        }
        if (a.parentContainer) {
            a.parentContainer.add(a)
        } else {
            a.show()
        }
    },
    onValidatePassword: function(b, a) {
        var c = this,
            d = Ext.isObject(a) ? a.newPassword : a;
        if (!c.passwordValidatorService) {
            Ext.log.error('[WuisLogin] Please, set passwordValidatorService property or implement the onValidatePassword method!');
            return
        }
        if (b.lastValidatedPassword === d) {
            return
        }
        b.lastValidatedPassword = d;
        b.passwordErrors = 'Checking password strength...';
        b.getForm().isValid();
        if (!Ext.isObject(a)) {
            a = {
                newPassword: a
            }
        }
        c.passwordValidatorService(a, c.validatePasswordCallback, c)
    },
    validatePasswordCallback: function(f) {
        var e = this,
            a = e.getPasswordChangeWin(),
            h = a && a.getPasswordField().getValue(),
            c = a && a.getPwStrengthField(),
            g = a.getErrorMsgBox(),
            b = f && f.success && f.result,
            d;
        if (!a) {
            return
        }
        if (b && h === a.getPasswordField().getValue()) {
            c.removeCls('pw-ok');
            c.removeCls('pw-error');
            c.removeCls('pw-warn');
            if (Ext.isEmpty(b.texts)) {
                c.addCls('pw-ok');
                a.passwordErrors = null;
                g.update('')
            } else {
                c.addCls(b.passed ? 'pw-warn' : 'pw-error');
                d = Ext.isArray(b.texts) ? b.texts : [b.texts || ''];
                d = d.map(e.translateValidationError.bind(e)).map(Ext.htmlEncode).join('<br>');
                a.passwordErrors = b.passed ? '' : d;
                g.update(d)
            }
        } else {
            c.addCls('pw-error');
            a.passwordErrors = 'Password check failed!'
        }
        a.getForm().isValid()
    },
    translateValidationError: function(a) {
        return a
    },
    onLogin: function(b, c) {
        var a = this;
        if (a.loginService) {
            b.setLoading('Login...');
            a.loginService(c, a.loginCallback, a)
        } else {
            Ext.log.error('[WuisLogin] Please, set loginService property or implement the onLogin method!')
        }
    },
    loginCallback: function(a) {
        var c = this,
            b = c.getLoginWin();
        if (b) {
            b.setLoading(!1)
        }
        c[a && a.success ? 'onSuccessLogin' : 'onFailureLogin'](a)
    },
    onSuccessLogin: function() {
        this.closeLoginWindow()
    },
    onFailureLogin: function() {
        var d = this,
            b = d.getLoginWin(),
            a = b.getUserField(),
            c = b.getPasswordField();
        Ext.Msg.alert('Error', 'Wrong login name or password!', function() {
            (a.readOnly ? c : a).focus(!0)
        })
    },
    closeLoginWindow: function() {
        var a = this.getLoginWin();
        if (a) {
            if (a.parentContainer) {
                a.parentContainer.remove(a)
            } else {
                a.destroy()
            }
        }
    },
    onCancelPasswordChange: function(a, b) {
        var d = this,
            c = b.user;
        if (a.parentContainer) {
            a.parentContainer.remove(a)
        } else {
            a.destroy()
        }
        d.showLoginWindow({
            userName: c
        })
    },
    onCancelForgottenPassword: function() {
        var b = this,
            a = b.getForgottenPasswordWin(),
            c = a.down('#user').getValue();
        if (a.parentContainer) {
            a.parentContainer.remove(a)
        } else {
            a.destroy()
        }
        b.showLoginWindow({
            userName: c
        })
    },
    onPasswordChange: function(c, b) {
        var a = this;
        if (!a.passwordChangeService) {
            Ext.log.error('[WuisLogin] Please, set the passwordChangeService property or implement the onPasswordChange method!');
            return
        }
        a.passwordChangeService({
            newPassword: b.password1,
            currentPassword: b.oldPassword,
            userName: b.user
        }, a.passwordChangeCallback, a)
    },
    passwordChangeCallback: function(a) {
        var c = this,
            b = c.getPasswordChangeWin();
        if (a && a.success) {
            c.onCancelPasswordChange(b, b.down('form').getValues());
            return
        }
        Ext.Msg.alert('Error', a && a.result || 'Error on service calling!')
    },
    onForgottenPasswordChange: function(c, b) {
        var a = this;
        if (!a.forgottenPasswordService) {
            Ext.log.error('[WuisLogin] Please, set the forgottenPasswordService property or implement the onForgottenPasswordChange method!');
            return
        }
        a.forgottenPasswordService({
            userName: b.user
        }, a.forgottenPasswordCallback, a)
    },
    forgottenPasswordCallback: function(a) {
        var c = this,
            b = c.getForgottenPasswordWin();
        if (a && a.success) {
            c.onCancelForgottenPassword(b, b.down('form').getValues());
            return
        }
        Ext.Msg.alert('Error', a && a.result || 'Error on service calling!')
    }
}, 0, 0, 0, 0, 0, 0, [WuisLogin.controller, 'Login'], 0);
Ext.cmd.derive('WuisLogin.view.LoginForm', Ext.panel.Panel, {
    cls: 'wuislogin-form',
    layout: 'fit',
    closable: !1,
    resizable: !1,
    constrain: !0,
    width: 300,
    frame: !1,
    bodyBorder: !1,
    border: !0,
    hideBorders: !0,
    bodyPadding: 15,
    headerHtml: null,
    eventController: null,
    initComponent: function() {
        var a = this;
        a.createItems();
        a.createButtons();
        Ext.panel.Panel.prototype.initComponent.apply(this, arguments)
    },
    createItems: function() {
        var a = this,
            b = [];
        if (a.headerHtml) {
            b.push({
                xtype: 'box',
                html: a.headerHtml
            })
        }
        if (WuisLogin.Security.tenants) {
            b.push({
                xtype: 'combobox',
                name: 'tenant',
                labelAlign: 'top',
                fieldLabel: 'Airline',
                emptyText: 'Please choose an airline',
                store: {
                    fields: ['name'],
                    data: WuisLogin.Security.tenants
                },
                queryMode: 'local',
                displayField: 'name',
                valueField: 'name',
                allowBlank: !1,
                itemId: 'tenant',
                margin: '0 0 5 0',
                labelStyle: 'margin-bottom:5px',
                anchor: '100%',
                value: WuisLogin.Common.loadTenant(),
                editable: !1
            })
        }
        b.push({
            xtype: 'textfield',
            labelAlign: 'top',
            fieldLabel: 'User Name',
            name: 'user',
            itemId: 'user',
            margin: '0 0 5 0',
            labelStyle: 'margin-bottom:5px',
            anchor: '100%',
            allowBlank: !1,
            value: a.userName || '',
            readOnly: a.userNameReadOnly || !1,
            listeners: {
                specialkey: a.onSpecialKey,
                scope: a
            }
        });
        b.push({
            xtype: 'textfield',
            labelAlign: 'top',
            fieldLabel: 'Password',
            inputType: 'password',
            name: 'password',
            itemId: 'password',
            margin: '0 0 30 0',
            labelStyle: 'margin-bottom:5px',
            anchor: '100%',
            allowBlank: a.emptyPasswordEnabled,
            listeners: {
                specialkey: a.onSpecialKey,
                scope: a
            }
        });
        if (a.showForgottenPassword) {
            b.push({
                xtype: 'component',
                autoEl: {
                    tag: 'a',
                    href: '#',
                    html: 'Forgot your password?'
                },
                listeners: {
                    el: {
                        click: a.onForgottenPasswordClick,
                        scope: a
                    }
                }
            })
        }
        a.items = {
            xtype: 'form',
            frame: !1,
            bodyBorder: !1,
            border: !1,
            hideBorders: !0,
            items: b,
            listeners: {
                validitychange: a.onFormValidityChange,
                scope: a
            }
        }
    },
    createButtons: function() {
        var a = this;
        a.buttons = [{
            text: 'Change password',
            itemId: 'changePasswordBtn',
            cls: 'id-changePasswordBtn',
            hidden: !a.showPasswordChange,
            handler: a.onPasswordChangeClick,
            scope: a
        }, {
            text: 'Login',
            iconCls: 'icon-key',
            cls: 'id-loginBtn',
            itemId: 'loginBtn',
            disabled: !0,
            handler: a.onLoginClick,
            scope: a
        }]
    },
    afterRender: function() {
        Ext.panel.Panel.prototype.afterRender.call(this);
        this.focus();
        this.down('#user').focus()
    },
    onFormValidityChange: function(b, a) {
        this.down('#loginBtn').setDisabled(!a)
    },
    onSpecialKey: function(b, a) {
        if (a.getKey() === a.ENTER) {
            this.onLoginClick()
        }
    },
    onForgottenPasswordClick: function(c) {
        c.preventDefault();
        var a = this,
            b = a.getForm();
        (a.eventController || a).fireEvent('forgottenpasswordclick', a, b.getValues())
    },
    onPasswordChangeClick: function() {
        var a = this,
            b = a.getForm();
        (a.eventController || a).fireEvent('passwordchangeclick', a, b.getValues())
    },
    onLoginClick: function() {
        var a = this,
            b = a.getForm();
        if (!b.isValid()) {
            return
        }(a.eventController || a).fireEvent('login', a, b.getValues())
    },
    getUserField: function() {
        return this.down('#user')
    },
    getPasswordField: function() {
        return this.down('#password')
    },
    getForm: function() {
        return this.items.getAt(0)
    }
}, 0, ['WuisLoginForm'], ['component', 'box', 'container', 'panel', 'WuisLoginForm'], {
    'component': !0,
    'box': !0,
    'container': !0,
    'panel': !0,
    'WuisLoginForm': !0
}, ['widget.WuisLoginForm'], 0, [WuisLogin.view, 'LoginForm'], 0);
Ext.cmd.derive('WuisLogin.view.ForgottenPasswordForm', Ext.panel.Panel, {
    cls: 'wuislogin-forgottenpwd',
    layout: 'fit',
    closable: !1,
    resizable: !1,
    constrain: !0,
    width: 300,
    title: 'Forgotten Password - Password Reset',
    iconCls: 'icon-key',
    frame: !1,
    bodyBorder: !1,
    border: !0,
    hideBorders: !0,
    buttonTextOk: 'Send Password Reset',
    buttonTextCancel: 'Cancel',
    passwordResetText: '',
    eventController: null,
    headerHtml: '<img src="resources/wuis-login/lsy-logo-small.png" style="width:250px;height:30px;margin-top:10px" />',
    initComponent: function() {
        var a = this;
        a.createItems();
        a.createButtons();
        Ext.panel.Panel.prototype.initComponent.apply(this, arguments)
    },
    createItems: function() {
        var a = this;
        a.items = {
            xtype: 'form',
            frame: !1,
            bodyBorder: !1,
            border: !1,
            hideBorders: !0,
            bodyPadding: 15,
            dockedItems: [{
                xtype: 'box',
                html: a.headerHtml
            }],
            items: [{
                xtype: 'textfield',
                labelAlign: 'top',
                fieldLabel: 'User Name',
                name: 'user',
                itemId: 'user',
                margin: '0 0 5 0',
                labelStyle: 'margin-bottom:5px',
                anchor: '100%',
                allowBlank: !1,
                listeners: {
                    specialkey: a.onSpecialKey,
                    scope: a
                }
            }],
            listeners: {
                validitychange: a.onFormValidityChange,
                scope: a
            }
        }
    },
    createButtons: function() {
        var a = this;
        a.buttons = [{
            text: a.buttonTextCancel || 'Cancel',
            itemId: 'cancelBtn',
            cls: 'id-cancelBtn',
            handler: a.onCancelClick,
            scope: a
        }, {
            text: a.buttonTextOk || 'Send reset instructions',
            itemId: 'okBtn',
            cls: 'id-okBtn',
            disabled: !0,
            handler: a.onOkClick,
            scope: a
        }]
    },
    afterRender: function() {
        Ext.panel.Panel.prototype.afterRender.call(this);
        this.focus();
        this.down('[name=user]').focus()
    },
    onFormValidityChange: function(b, a) {
        this.down('#okBtn').setDisabled(!a)
    },
    onSpecialKey: function(b, a) {
        if (a.getKey() === a.ENTER) {
            this.onOkClick()
        }
    },
    onCancelClick: function() {
        var a = this,
            b = a.down('form');
        (a.eventController || a).fireEvent('forgottenpasswordcancel', a, b.getValues())
    },
    onOkClick: function() {
        var a = this,
            b = a.down('form');
        if (!b.isValid()) {
            return
        }
        a.down('#okBtn').setDisabled(!0);
        (a.eventController || a).fireEvent('forgottenpasswordchange', a, b.getValues())
    },
    getUserField: function() {
        return this.down('#user')
    }
}, 0, ['WuisLoginForgottenPasswordForm'], ['component', 'box', 'container', 'panel', 'WuisLoginForgottenPasswordForm'], {
    'component': !0,
    'box': !0,
    'container': !0,
    'panel': !0,
    'WuisLoginForgottenPasswordForm': !0
}, ['widget.WuisLoginForgottenPasswordForm'], 0, [WuisLogin.view, 'ForgottenPasswordForm'], 0);
Ext.cmd.derive('WuisLogin.view.ResetPasswordForm', Ext.panel.Panel, {
    cls: 'wuislogin-passwordchange',
    layout: 'fit',
    closable: !1,
    resizable: !1,
    modal: !0,
    constrain: !0,
    width: 360,
    title: 'Change Password',
    iconCls: 'icon-key',
    passwordVtype: 'wuisPassword',
    passwordValidator: null,
    validateMethod: 'validator',
    eventController: null,
    passwordValidateTimerId: null,
    passwordErrors: null,
    headerHtml: '<div style="font-size:14px;color:#194C7F;font-weight:bold">Change password</div><img src="resources/wuis-login/lsy-logo-small.png" style="width:250px;height:30px;margin-top:10px" />',
    initComponent: function() {
        var a = this;
        a.createItems();
        a.createButtons();
        Ext.panel.Panel.prototype.initComponent.apply(this, arguments)
    },
    createItems: function() {
        var a = this;
        a.items = {
            xtype: 'form',
            border: 0,
            bodyStyle: 'border:0 none',
            bodyPadding: 15,
            dockedItems: [a.headerHtml ? {
                xtype: 'box',
                html: a.headerHtml
            } : null],
            defaults: {
                labelAlign: 'top',
                minWidth: 300,
                margin: '0 0 5 20'
            },
            items: [{
                xtype: 'textfield',
                fieldLabel: 'User Name',
                itemId: 'user',
                name: 'user',
                allowBlank: !1,
                listeners: {
                    specialkey: a.onSpecialKey,
                    scope: a
                }
            }, {
                xtype: 'textfield',
                fieldLabel: 'New Password',
                inputType: 'password',
                itemId: 'password1',
                name: 'password1',
                allowBlank: a.emptyPasswordEnabled,
                vtype: a.passwordVtype,
                validator: a.validateMethod === 'validator' ? a.passwordValidator : null,
                listeners: {
                    specialkey: a.onSpecialKey,
                    change: a.onPassword1Change,
                    errorchange: a.onPassword1ErrorChange,
                    scope: a
                }
            }, {
                xtype: 'textfield',
                fieldLabel: 'New Password Again',
                inputType: 'password',
                itemId: 'password2',
                name: 'password2',
                allowBlank: a.emptyPasswordEnabled,
                validator: function(a) {
                    return a === this.prev('#password1').getValue() ? !0 : 'Passwords do not match!'
                },
                listeners: {
                    specialkey: a.onSpecialKey,
                    change: a.onPassword2Change,
                    scope: a
                }
            }, {
                xtype: 'textfield',
                fieldLabel: '\xa0',
                labelSeparator: '',
                readOnly: !0,
                itemId: 'pwStrength',
                value: 'Password Strength',
                cls: 'password-strength-field',
                validator: function() {
                    return a.validateMethod !== 'service' || !a.passwordErrors ? !0 : a.passwordErrors
                }
            }, {
                xtype: 'box',
                cls: 'password-errors',
                itemId: 'errorMsg',
                html: ''
            }],
            listeners: {
                validitychange: a.onFormValidityChange,
                scope: a
            }
        }
    },
    createButtons: function() {
        var a = this;
        a.buttons = [{
            text: 'Ok',
            itemId: 'okBtn',
            cls: 'id-okBtn',
            disabled: !0,
            handler: a.onPasswordChangeClick,
            scope: a
        }, {
            text: 'Cancel',
            itemId: 'cancelBtn',
            cls: 'id-cancelBtn',
            handler: a.onCancelClick,
            scope: a
        }]
    },
    afterRender: function() {
        Ext.panel.Panel.prototype.afterRender.call(this);
        this.focus()
    },
    updateButtonStatus: function() {
        var a = this,
            b = a.getForm(),
            d = a.down('#okBtn'),
            c = b && b.getForm();
        if (d && c) {
            d.setDisabled(!c.isValid() || a.validateMethod === 'service' && a.passwordValidateTimerId)
        }
    },
    onFormValidityChange: function() {
        this.updateButtonStatus()
    },
    onSpecialKey: function(b, a) {
        if (a.getKey() === a.ENTER) {
            this.doPasswordChange()
        }
    },
    onCancelClick: function() {
        var a = this,
            b = a.down('form');
        (a.eventController || a).fireEvent('passwordchangecancel', a, b.getValues())
    },
    onPasswordChangeClick: function() {
        this.doPasswordChange()
    },
    onPassword1Change: function() {
        var a = this;
        a.getForm().items.get('password2').isValid();
        a.updateButtonStatus();
        if (a.validateMethod === 'service') {
            if (a.passwordValidateTimerId) {
                clearTimeout(a.passwordValidateTimerId);
                a.passwordValidateTimerId = null
            }
            a.passwordValidateTimerId = Ext.defer(a.firePasswordValidationEvent, 500, a)
        }
    },
    firePasswordValidationEvent: function() {
        var a = this;
        a.passwordValidateTimerId = null;
        (a.eventController || a).fireEvent('validatepassword', a, a.getForm().getValues());
        a.updateButtonStatus()
    },
    onPassword2Change: function() {
        this.updateButtonStatus()
    },
    onPassword1ErrorChange: function(d, c) {
        var e = this,
            b = !d.getValue(),
            a = this.getPwStrengthField();
        if (e.validateMethod === 'service') {
            return
        }
        a.removeCls(['pw-ok', 'pw-error']);
        if (b) {
            a.setValue('Password Strength')
        } else {
            if (!c) {
                a.addCls('pw-ok')
            } else {
                a.addCls('pw-error')
            }
        }
    },
    getForm: function() {
        return this.items.getAt(0)
    },
    getUserField: function() {
        return this.getForm().items.get('user')
    },
    getPasswordField: function() {
        return this.getForm().items.get('password1')
    },
    getPwStrengthField: function() {
        return this.getForm().items.get('pwStrength')
    },
    getErrorMsgBox: function() {
        return this.getForm().items.get('errorMsg')
    },
    doPasswordChange: function() {
        var a = this,
            b = a.getForm(),
            c = a.down('#okBtn');
        if (!b || !c || c.isDisabled() || !b.isValid()) {
            return
        }(a.eventController || a).fireEvent('passwordchange', a, b.getValues())
    }
}, 0, ['WuisLoginPasswordReset'], ['component', 'box', 'container', 'panel', 'WuisLoginPasswordReset'], {
    'component': !0,
    'box': !0,
    'container': !0,
    'panel': !0,
    'WuisLoginPasswordReset': !0
}, ['widget.WuisLoginPasswordReset'], 0, [WuisLogin.view, 'ResetPasswordForm'], 0);
Ext.cmd.derive('WuisLogin.controller.LoginEx', WuisLogin.controller.Login, {
    titleMap: {
        ERROR: 'Error in Operation',
        WARNING: 'Warning',
        INFO: 'Information'
    },
    messageMap: null,
    errorState: null,
    restPrefix: '/rest',
    applicationId: null,
    checkCertificateOnFocus: !1,
    allowInactivityControl: !1,
    userInteractionOccured: !1,
    checkInactivityTask: null,
    checkInactivityInterval: 30,
    propertiesConfigUrl: 'resources/config/properties.json',
    propertiesConfig: null,
    autoLoadSecurityConfig: !0,
    allowSaml2Auth: !1,
    suppressSaml2Hash: 'nosaml2',
    actionMap: {
        certificateNotFound: ['CLOSE', 'iocc.sec.internal.button.close'],
        invalidCertificate: 'REVALIDATE',
        fatalError: 'CLOSE',
        certificateExpired: 'LOGOUT',
        sessionExpired: ['RELOAD', 'iocc.sec.internal.button.reload'],
        sessionExpiredLogout: ['CLOSE', 'iocc.sec.internal.button.close'],
        logout: 'NOTIFY/CLOSE',
        initError: ['NOTIFY/CLOSE', 'iocc.sec.internal.button.close']
    },
    ssoLogoutTimeoutInterval: 30000,
    loggingOut: !1,
    init: function() {
        var a = this;
        a.handleAjaxException = !1;
        if (!a.iconMap) {
            a.iconMap = {
                ERROR: Ext.Msg.ERROR,
                WARNING: Ext.Msg.WARNING,
                INFO: Ext.Msg.INFO
            }
        }
        WuisLogin.controller.Login.prototype.init.call(this);
        if (!a.messageMap) {
            Ext.log.warn('Application messages not set in messagesMap: only `WuisLogin.Common.messageMap` messages will be translated!')
        }
        a.messageMap = Ext.applyIf(a.messageMap || {}, WuisLogin.Common.messageMap);
        a.on('serviceError', a.handleServiceError, a);
        if (a.checkCertificateOnFocus) {
            window.onfocus = a.checkCertificateValidity.bind(a)
        }
        if (!a.loadProperties() && a.autoLoadSecurityConfig) {
            a.loadSecurityConfig()
        }
    },
    handleInitError: function() {
        var c = this,
            a = window.location,
            d = a.hash || '',
            b = Ext.Object.fromQueryString(d.substr(1));
        if (c.isSaml2Allowed() && b && +b.errorCode === 102) {
            a.href = a.href.split('#')[0] + '#';
            c.logout({
                forced: !0,
                logoutActionKey: 'initError',
                notifyMessageKey: b.messageKey || 'iocc.sec.internal.authentication.not.found'
            });
            return !0
        }
        return !1
    },
    loadProperties: function(b) {
        var a = this;
        b = b || a.propertiesConfigUrl;
        if (!b) {
            return !1
        }
        Ext.log.info('Loading application properties config...');
        Ext.Ajax.request({
            url: b,
            method: 'GET',
            disableCaching: !0,
            success: function(d, e) {
                var c = Ext.decode(d.responseText, !0);
                a.propertiesConfig = c;
                if (Ext.isObject(c.applications)) {
                    Ext.apply(WuisLogin.Common.applications, c.applications)
                } else {
                    Ext.log.warn('Unable to get application configuration from properties.json! Using the default applications / requiredRight config!')
                }
                if (a.fireEvent('propertiesloaded', c, !0, d, e) === !1) {
                    return
                }
                if (a.autoLoadSecurityConfig) {
                    a.loadSecurityConfig()
                }
            },
            failure: function(c, d) {
                var e = Ext.decode(c.responseText, !0);
                Ext.log.warn('Unable to load properties.json (' + d.url + ')! It can be a network/service error or even the file is not bundled with the application. Using the default applications / requiredRight config (status: ' + (c.status || 'N/A') + ')!');
                if (a.fireEvent('propertiesloaded', e, !1, c, d) === !1) {
                    return
                }
                if (a.autoLoadSecurityConfig) {
                    a.loadSecurityConfig()
                }
            }
        });
        return !0
    },
    loadSecurityConfig: function() {
        var a = this;
        WuisLogin.Security.loadConfig(a.restPrefix + 'config', {
            success: function(b, c) {
                var d = Ext.decode(b.responseText, !0);
                if (a.handleInitError()) {
                    return
                }
                if (a.fireEvent('securityconfigloaded', d, !0, b, c) === !1) {
                    return
                }
                a.startInactivityControl()
            },
            failure: function(b, c) {
                var d = Ext.decode(b.responseText, !0);
                Ext.log.warn('Unable to load security configuration (' + c.url + ') - application can continue, but with reduced functionality only!');
                if (a.handleInitError()) {
                    return
                }
                if (a.fireEvent('securityconfigloaded', d, !1, b, c) === !1) {
                    return
                }
                a.startInactivityControl()
            }
        })
    },
    onForgottenPasswordChange: function(c, b) {
        var a = this;
        Ext.Ajax.request({
            url: a.restPrefix + 'identity/resetpassword/' + encodeURIComponent(b.user),
            method: 'GET',
            disableCaching: !0,
            serviceName: 'Reset Password',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            success: a.successResetPassword.bind(a),
            failure: function(d, e) {
                a.fireEvent('serviceError', d, e, null, a.onCancelForgottenPassword, a)
            },
            scope: a
        })
    },
    successResetPassword: function(b, d) {
        var a = this,
            c = b && Ext.decode(b.responseText, !0);
        if (!c.success) {
            a.fireEvent('serviceError', b, d, c, a.onCancelForgottenPassword, a);
            return
        }
        Ext.Msg.alert('Password Reset', 'Please check your email for the activation link!', function() {
            a.onCancelForgottenPassword()
        })
    },
    checkActivation: function() {
        var c = this,
            e = document.location.href.split('?')[1],
            a = e && Ext.Object.fromQueryString(e) || null,
            d = a && a.token,
            b = a && a.user;
        if (d && b) {
            Ext.Ajax.request({
                url: c.restPrefix + 'activation/check/' + encodeURIComponent(b) + '?token=' + encodeURIComponent(d),
                method: 'GET',
                disableCaching: !0,
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                success: function(a, d) {
                    c.onSuccessCheckActivation(a, d, b)
                },
                failure: function(a, b) {
                    c.fireEvent('serviceError', a, b)
                }
            });
            return !0
        }
        return !1
    },
    onSuccessCheckActivation: function(f, h, i) {
        var a = this,
            c = Ext.decode(f.responseText, !0),
            b = c && c.result || 'UNKNOWN',
            g, d, e;
        if (!c.success) {
            a.fireEvent('serviceError', f, h, c, a.showLoginWindow, a);
            return
        }
        if (b === 'VALID') {
            g = a.passwordChangeViewConfig && a.passwordChangeViewConfig.parentContainer;
            e = Ext.widget('WuisLoginPasswordReset', Ext.apply({
                eventController: a
            }, a.passwordChangeViewConfig));
            d = e.down('[itemId=user]');
            if (d && i) {
                d.setValue(i)
            }
            g.add(e);
            return
        }
        if (b === 'ALREADYACTIVATED') {
            Ext.Msg.alert('Information', 'You have already activated your password! Please login!', a.showLoginWindow, a);
            return
        }
        if (b === 'INVALID') {
            Ext.Msg.alert('Error', 'This activation link is invalid! Please check the URL or send a new password reset request!', a.showLoginWindow, a);
            return
        }
        if (b === 'EXPIRED') {
            Ext.Msg.alert('Error', 'This activation link has expired. Please send a new password reset request!', a.showLoginWindow, a);
            return
        }
        if (b === 'UNKNOWN') {
            Ext.Msg.alert('Error', 'The validity of the activation link cannot be verified, please contact system administrator!', a.showLoginWindow, a);
            return
        }
        a.fireEvent('serviceError', f, h, c, a.showLoginWindow, a)
    },
    onPasswordChange: function(f, a) {
        var b = this,
            e = document.location.href.split('?')[1],
            c = e && Ext.Object.fromQueryString(e) || null,
            d = {},
            g = c && c.token;
        d.newPassword = a.password1;
        Ext.Ajax.request({
            url: b.restPrefix + 'activation/activate/' + encodeURIComponent(a.user) + '?token=' + encodeURIComponent(g),
            method: 'POST',
            disableCaching: !0,
            jsonData: d,
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            success: function(c, d) {
                b.onPasswordChangeSuccess(f, a, c, d)
            },
            failure: function(c, d) {
                b.fireEvent('serviceError', c, d, null, function() {
                    b.onCancelPasswordChange(f, a)
                })
            }
        })
    },
    onPasswordChangeSuccess: function(f, e, d, g) {
        var a = this,
            c = Ext.decode(d.responseText, !0),
            b = c && c.result || 'UNKNOWN',
            h = document.location.href.split('?')[0];
        if (!c.success || !b) {
            a.fireEvent('serviceError', d, g, c, function() {
                a.onCancelPasswordChange(f, e)
            });
            return
        }
        if (b === 'VALID') {
            Ext.Msg.alert('Password Reset', 'Successfully reset your password. Please login with your new password!', function() {
                window.history.pushState({}, '', h);
                a.onCancelPasswordChange(f, e)
            });
            return
        }
        if (b === 'ALREADYACTIVATED') {
            Ext.Msg.alert('Information', 'You have already activated your password! Please login!', a.showLoginWindow, a);
            return
        }
        if (b === 'INVALID') {
            Ext.Msg.alert('Error', 'This activation link is invalid! Please check the URL or send a new password reset request!', a.showLoginWindow, a);
            return
        }
        if (b === 'EXPIRED') {
            Ext.Msg.alert('Error', 'This activation link has expired. Please send a new password reset request!', a.showLoginWindow, a);
            return
        }
        if (b === 'UNKNOWN') {
            Ext.Msg.alert('Error', 'The validity of the activation link cannot be verified, please contact system administrator!', a.showLoginWindow, a);
            return
        }
        a.fireEvent('serviceError', d, g, c, function() {
            a.onCancelPasswordChange(f, e)
        })
    },
    onPasswordChangeFailure: function(b, a) {
        var c = this;
        Ext.Msg.alert('Error', 'Please try again later or contact the system administrator.', function() {
            c.onCancelPasswordChange(b, a)
        })
    },
    doAuthorization: function(b) {
        var a = this;
        WuisLogin.Security.authorize(a.restPrefix + 'authorization', {
            success: a.onAuthorizationSuccess,
            failure: function(d, c) {
                c.afterLogin = b === !0;
                a.onAuthorizationFailure(d, c)
            },
            scope: a
        })
    },
    checkCertificateValidity: function() {
        this.validateSession()
    },
    onAuthorizationSuccess: function() {
        var a = this,
            b = a.errorState;
        if (b) {
            if (!WuisLogin.Common.checkCompatibleRights(b.rights)) {
                a.reloadApplication()
            }
            if (a.handleServiceErrorComplete()) {
                return !1
            }
        }
        if (a.applicationId && !WuisLogin.Common.hasApplicationAccess(a.applicationId)) {
            a.resetAuthorizationData();
            Ext.Msg.alert('Authorization Error', 'You are not authorized to access this application!<br/>Please contact your system administrator or try log in with a different credential.', function() {
                a.showLoginWindow()
            });
            return !1
        }
        a.fireEvent('userauthorized');
        return !0
    },
    isSaml2Allowed: function() {
        var b = this,
            e = window.location.hash || '',
            a = b.suppressSaml2Hash,
            c = WuisLogin.Security.config && WuisLogin.Security.config.authUrl,
            d = WuisLogin.Security.config && WuisLogin.Security.config.useSso;
        return b.allowSaml2Auth && d && c && (!a || e.toLowerCase().indexOf('#' + a) < 0)
    },
    redirectToAuthenticationUrl: function() {
        var c = this,
            a = WuisLogin.Security.config && WuisLogin.Security.config.authUrl,
            b = window.location.origin || window.location.protocol + '//' + window.location.hostname + (window.location.port ? ':' + window.location.port : '');
        if (c.isSaml2Allowed()) {
            a += '?' + Ext.Object.toQueryString({
                backUrl: b + window.location.pathname
            });
            Ext.log.info('Session is unauthenticated, but SAML2/SSO authentication is enabled: redirecting to `' + a + '` ...');
            window.location.href = a;
            return !0
        }
        return !1
    },
    onAuthorizationFailure: function(c, b, e) {
        var a = this,
            f = b && b.afterLogin,
            d = a.isSaml2Allowed();
        if (a.checkUnauthenticated(c)) {
            if (a.handleSessionExpired(c, b, e)) {
                return
            }
            Ext.log.info('Session is unauthenticated, and SAML2/SSO authentication is ' + (a.isSaml2Allowed() ? 'enabled' : 'disabled') + ': showing login window...');
            if (!f && !d) {
                a.showLoginWindow();
                return
            }
            Ext.Msg.show({
                title: a.titleMap.INFO,
                icon: Ext.Msg.INFO,
                msg: a.messageMap['iocc.sec.authorization.failed'],
                message: a.messageMap['iocc.sec.authorization.failed'],
                closable: !1,
                buttons: Ext.Msg.OK,
                buttonText: {
                    ok: 'Ok'
                },
                fn: function() {
                    if (d) {
                        a.closeApplication()
                    } else {
                        a.showLoginWindow()
                    }
                }
            });
            return
        }
        a.fireEvent('serviceError', c, b, e, a.showLoginWindow)
    },
    onLogin: function(c, b) {
        var a = this;
        c.setLoading('Login...');
        WuisLogin.Security.authenticate(a.restPrefix + 'authentication/' + encodeURIComponent(b.user) + '?password=' + encodeURIComponent(b.password), {
            success: a.onSuccessLogin,
            failure: a.onFailureLogin,
            scope: a
        })
    },
    onSuccessLogin: function(a, e) {
        var b = this,
            d = b.getLoginWin(),
            c = a && Ext.decode(a.responseText, !0) || null;
        if (d) {
            d.setLoading(!1)
        }
        if (!c || !c.success) {
            b.fireEvent('serviceError', a, e, null);
            return
        }
        WuisLogin.controller.Login.prototype.onSuccessLogin.apply(this, arguments);
        b.doAuthorization(!0)
    },
    onFailureLogin: function(c, d) {
        var b = this,
            a = b.getLoginWin();
        if (a) {
            a.setLoading(!1)
        }
        b.fireEvent('serviceError', c, d, null)
    },
    handleServiceError: function(b, e, d, f, g) {
        var a = this,
            c;
        if (a.errorState) {
            Ext.log.warn('Repeated error occurred while processing requests!')
        }
        a.errorState = {
            response: b,
            opts: e,
            data: d,
            rights: a.errorState && a.errorState.rights,
            identity: WuisLogin.Security.identity,
            callback: f,
            scope: g
        };
        c = a.processMessages(b, e, d);
        if (b && a.checkUnauthenticated(b)) {
            a.showMessages(c, 0, function() {
                if (a.handleSessionExpired(b, e, d)) {
                    return
                }
                a.handleServiceErrorReauthenticate()
            });
            return
        }
        a.showMessages(c, 0, a.handleServiceErrorComplete, a)
    },
    handleServiceErrorReauthenticate: function() {
        var a = this,
            d = '',
            c = !1,
            b = Ext.ComponentQuery.query('WuisLoginPasswordReset')[0];
        if (WuisLogin.Security.identity) {
            d = a.getLoginUserName();
            c = !0
        }
        if (b) {
            b.destroy()
        }
        a.errorState.rights = WuisLogin.Security.rights;
        a.showLoginWindow({
            userName: d,
            userNameReadOnly: c
        })
    },
    handleServiceErrorComplete: function() {
        var a = this,
            b = a.errorState && a.errorState.callback,
            c = a.errorState && a.errorState.scope;
        if (b) {
            b.call(c || a);
            a.errorState = null;
            return !0
        }
        a.errorState = null;
        return !1
    },
    processMessages: function(e, g, b, i) {
        var c = this,
            a = [],
            f = c.messageMap,
            h, d = g && g.serviceName && ' - ' + g.serviceName || '';
        if (!e) {
            a.push({
                icon: Ext.Msg.ERROR,
                title: 'Error in Service' + d,
                message: f['iocc.sec.unexpected.exception']
            });
            return a
        }
        if (!b && e.responseText) {
            try {
                b = Ext.decode(e.responseText, !0)
            } catch (j) {
                Ext.log.warn('Unable to decode response text.', j)
            }
        }
        if (b) {
            if (Ext.isString(b)) {
                a.push({
                    icon: Ext.Msg.ERROR,
                    title: c.titleMap.ERROR + d,
                    message: b
                })
            } else {
                if (b.errState && b.errState.errMessage) {
                    a.push({
                        icon: Ext.Msg.ERROR,
                        title: c.titleMap.ERROR + d,
                        message: b.errState.errMessage
                    })
                } else {
                    if (b.messages) {
                        Ext.each(b.messages, function(j) {
                            var l = Ext.isString(j) ? j : Ext.isObject(f) && f[j.messageKey] || j.messageKey,
                                k = Ext.isArray(j.params) ? j.params : [];
                            if (!l) {
                                Ext.iterate(j, function(a, c) {
                                    if (a !== 'params' && a !== 'messageKey' && a !== 'popUpType' && a !== 'severity') {
                                        l = c;
                                        return !1
                                    }
                                })
                            }
                            if (k[0] && Ext.isNumber(k[0])) {
                                h = k[0]
                            }
                            a.push({
                                icon: c.iconMap[j.severity] || Ext.Msg.ERROR,
                                title: (c.titleMap[j.severity] || c.titleMap.ERROR) + d,
                                message: Ext.String.format(l, k.join(', ')) || 'An unrecongnized error occurred',
                                errorCode: h
                            })
                        })
                    }
                }
            }
        }
        if (a.length) {
            return a
        }
        if (c.checkUnauthenticated(e)) {
            a.push({
                icon: Ext.Msg.ERROR,
                title: 'Unauthorized Operation' + d,
                message: f[i ? 'iocc.sec.internal.logged.out.or.session.expired' : 'iocc.sec.internal.error.no.message']
            });
            return a
        }
        a.push({
            icon: Ext.Msg.ERROR,
            title: c.titleMap.ERROR + d,
            message: 'An unexpected error (status: ' + (e.status || 'none') + ') occurred while trying to process your request!<br/>Please try again or notify the system administrator if the problem persists!'
        });
        return a
    },
    showMessages: function(d, b, c, e) {
        b = b || 0;
        var f = this,
            a = d[b];
        if (!a) {
            if (c) {
                c.call(e || f)
            }
            return
        }
        Ext.Msg.show({
            title: a.title,
            msg: a.message,
            message: a.message,
            icon: a.icon || Ext.Msg.ERROR,
            buttons: Ext.Msg.OK,
            closable: !1,
            fn: function() {
                f.showMessages(d, b + 1, c, e)
            }
        })
    },
    startInactivityControl: function() {
        var a = this;
        if (!a.allowInactivityControl) {
            Ext.log.info('Inactivity control is disabled on client-side.');
            return !1
        }
        if (!a.getCheckInactivityInterval()) {
            Ext.log.info('Inactivity control is disabled on server-side.');
            return !1
        }
        a.resetInactivityCheckTask(!0);
        Ext.getBody().on({
            click: a.handleUserInteraction,
            keypress: a.handleUserInteraction,
            scope: a
        });
        return !0
    },
    getCheckInactivityInterval: function() {
        var b = this,
            a;
        if (b.checkInactivityInterval) {
            return b.checkInactivityInterval
        }
        a = WuisLogin.Security.config && WuisLogin.Security.config.certValidity || null;
        return a ? Math.floor(a * 60 / 3) : null
    },
    resetInactivityCheckTask: function(d) {
        var a = this,
            b = a.getCheckInactivityInterval(),
            c = !1;
        if (a.checkInactivityTask) {
            c = !0;
            a.checkInactivityTask.stop();
            a.checkInactivityTask = null
        }
        if (!a.allowInactivityControl) {
            d = !1
        }
        if (!d || !b || !a.allowInactivityControl) {
            Ext.log.info(c ? 'User inactivity check is stopped.' : 'User inactivity check has already stopped.');
            return
        }
        a.checkInactivityTask = Ext.TaskManager.newTask({
            run: a.checkInactivity,
            scope: a,
            interval: b * 1000
        });
        a.checkInactivityTask.start();
        Ext.log.info('User inactivity check is ' + (c ? 'restarted ' : 'started') + ' (' + b + ' sec).')
    },
    checkInactivity: function() {
        var a = this,
            b = a.userInteractionOccured;
        a.userInteractionOccured = !1;
        a.resetInactivityCheckTask(!0);
        if (!a.isLoggedIn()) {
            return
        }
        if (b) {
            a.renewSession();
            return
        }
        a.validateSession()
    },
    validateSession: function() {
        var a = this,
            b = a.messageMap;
        if (!a.isLoggedIn()) {
            return
        }
        WuisLogin.Security.validate(a.restPrefix + 'authentication/validate', {
            success: function(e, f, c) {
                var d = c && c.userName || null;
                if (!a.isLoggedIn()) {
                    return
                }
                if (d.toUpperCase() !== a.getLoginUserName().toUpperCase()) {
                    a.resetAuthorizationData();
                    Ext.Msg.show({
                        title: a.titleMap.WARNING,
                        icon: a.iconMap.WARNING,
                        msg: b['iocc.sec.internal.warning.identity.changed'],
                        message: b['iocc.sec.internal.warning.identity.changed'],
                        closable: !1,
                        buttons: Ext.Msg.OK,
                        buttonText: {
                            ok: b['iocc.sec.internal.button.reload']
                        },
                        fn: function() {
                            a.reloadApplication()
                        }
                    });
                    return
                }
            },
            failure: function(b, c, d) {
                if (a.checkUnauthenticated(b)) {
                    a.handleSessionExpired(b, c, d, !0)
                }
            }
        })
    },
    renewSession: function() {
        var a = this,
            b = a.messageMap,
            c = a.getLoginUserName();
        if (!a.isLoggedIn()) {
            return
        }
        if (!c) {
            Ext.log.warn('Unable to start heartbeat: identity name is missing!');
            return
        }
        WuisLogin.Security.renewCertificate(a.restPrefix + 'authentication/renew/' + encodeURIComponent(c), {
            success: function(f, g, d) {
                var e = d && d.user || null;
                if (!a.isLoggedIn()) {
                    return
                }
                if (e.toUpperCase() !== c.toUpperCase()) {
                    a.resetAuthorizationData();
                    Ext.Msg.show({
                        title: a.titleMap.WARNING,
                        icon: a.iconMap.WARNING,
                        msg: b['iocc.sec.internal.warning.identity.changed'],
                        message: b['iocc.sec.internal.warning.identity.changed'],
                        closable: !1,
                        buttons: Ext.Msg.OK,
                        buttonText: {
                            ok: b['iocc.sec.internal.button.reload']
                        },
                        fn: function() {
                            a.reloadApplication()
                        }
                    });
                    return
                }
            },
            failure: function(b, c, d) {
                if (a.checkUnauthenticated(b)) {
                    a.handleSessionExpired(b, c, d, !0)
                }
            }
        })
    },
    isLoggedIn: function() {
        return this.loggingOut ? !1 : !!WuisLogin.Security.identity
    },
    getLoginUserName: function() {
        return WuisLogin.Security.identity && Ext.isString(WuisLogin.Security.identity.name) ? WuisLogin.Security.identity.name : null
    },
    handleUserInteraction: function(a) {
        var b = this;
        if (!b.userInteractionOccured) {
            b.userInteractionOccured = !0;
            Ext.log.info('User interaction occured (' + (a && a.type || '???') + ').')
        }
    },
    logout: function(a) {
        var b = this;
        a = a || {};
        if (a.forced !== !0 && !b.isLoggedIn()) {
            return !1
        }
        b.loggingOut = !0;
        Ext.getBody().mask();
        WuisLogin.Security.logout(Ext.apply(WuisLogin.Security.getUrlFromConfig('logout', b.restPrefix, 'logout'), {
            success: function(d, c, e) {
                Ext.getBody().unmask();
                b.logoutInIframe(function() {
                    b.loggingOut = !1;
                    if (a.success && a.success.call(a.scope || b, d, c, e) === !1) {
                        return
                    }
                    b.handleLogout(d, c, a, e, !0)
                })
            },
            failure: function(c, d) {
                b.loggingOut = !1;
                Ext.getBody().unmask();
                if (a.failure && a.failure.call(a.scope || b, c, d) === !1) {
                    return
                }
                b.fireEvent('serviceError', c, a, null)
            }
        }));
        return !0
    },
    logoutInIframe: function(b, f) {
        var d = this,
            e = WuisLogin.Security.config && WuisLogin.Security.config.useSsoLogoutUrl ? WuisLogin.Security.getUrlFromConfig('ssoLogout') : null,
            c = !1,
            a;
        if (d.isSaml2Allowed() && e && e.url) {
            Ext.getBody().mask();
            a = document.createElement('iframe');
            a.setAttribute('border', 0);
            a.setAttribute('height', 0);
            a.setAttribute('width', 0);
            a.src = e.url;
            a.onload = function() {
                Ext.getBody().unmask();
                if (!c) {
                    return
                }
                c = !1;
                if (b) {
                    b.call(f || d, !0)
                }
            };
            c = !0;
            Ext.getBody().dom.appendChild(a);
            Ext.defer(function() {
                Ext.getBody().unmask();
                if (!c) {
                    return
                }
                c = !1;
                if (b) {
                    b.call(f || d, !1)
                }
            }, d.ssoLogoutTimeoutInterval);
            return
        }
        if (b) {
            b.call(f || d)
        }
    },
    handleSessionExpired: function(h, l, e, o, f) {
        var a = this,
            m = {
                100: 'certificateNotFound',
                101: 'invalidCertificate',
                102: 'fatalError',
                103: 'certificateExpired'
            },
            n = a.messageMap,
            j = a.actionMap,
            i = 'OK',
            d = [],
            g, c, k, b;
        if (o !== !0 && !a.isLoggedIn()) {
            return !1
        }
        e = e || Ext.decode(h.responseText, !0);
        d = a.processMessages(h, l, e, !0);
        if (d && d.length) {
            c = d[0].errorCode;
            g = d[0].message
        }
        k = c && m[c] || 'sessionExpired';
        b = j[k] || j.sessionExpired;
        if (Ext.isArray(b)) {
            i = n[b[1]] || 'OK';
            b = b[0]
        }
        if (a.isSaml2Allowed() && b === 'REAUTHENTICATE') {
            b = 'CLOSE'
        }
        if (f && (!c || c === 100)) {
            a.handleValidateResponse('RELOAD', !0);
            return !0
        }
        if (!f && a.fireEvent('sessionexpired', h, l, e, b) === !1) {
            return !0
        }
        if (!c || !a.isSaml2Allowed()) {
            if (b === 'RELOAD') {
                a.resetAuthorizationData();
                a.logoutInIframe(function() {
                    a.reloadApplication()
                });
                return !0
            }
            if (b === 'REAUTHENTICATE') {
                if (f) {
                    a.showLoginWindow()
                } else {
                    a.resetAuthorizationData();
                    a.logoutInIframe(function() {
                        a.reloadApplication()
                    })
                }
                return !0
            }
        }
        if (b !== 'LOGOUT') {
            a.resetAuthorizationData()
        } else {
            a.loggingOut = !0
        }
        a.logoutInIframe(function() {
            Ext.Msg.show({
                title: a.titleMap.INFO,
                icon: Ext.Msg.INFO,
                msg: g,
                message: g,
                closable: !1,
                buttons: Ext.Msg.OK,
                buttonText: {
                    ok: i
                },
                fn: function() {
                    a.handleValidateResponse(b)
                }
            })
        });
        return !0
    },
    handleValidateResponse: function(b, c) {
        var a = this;
        if (b === 'CLOSE') {
            a.closeApplication();
            return
        }
        if (b === 'CLOSE/RELOAD') {
            a.closeApplication();
            a.reloadApplication();
            return
        }
        if (b === 'REVALIDATE') {
            a.validateSession();
            return
        }
        if (b === 'REAUTHENTICATE' || b === 'RELOAD') {
            if (!a.redirectToAuthenticationUrl()) {
                if (c) {
                    a.showLoginWindow()
                } else {
                    a.reloadApplication()
                }
            }
            return
        }
        if (b === 'LOGOUT') {
            a.logout({
                forced: !0,
                logoutActionKey: 'sessionExpiredLogout'
            });
            return
        }
    },
    handleLogout: function(f, g, c, d, h) {
        var b = this,
            a = b.actionMap[c.logoutActionKey || 'logout'] || b.actionMap.logout,
            e = 'OK';
        if (Ext.isArray(a)) {
            e = b.messageMap[a[1]] || 'OK';
            a = a[0]
        }
        d = d || Ext.decode(f.responseText, !0);
        if (b.fireEvent('logout', f, g, c, d, h, a) === !1) {
            return
        }
        Ext.util.Cookies.clear('IOCC-Cert');
        Ext.util.Cookies.clear('IOCC-Cert-zipped');
        b.resetAuthorizationData();
        if (a.indexOf('NOTIFY') !== 0 && b.handleDefaultAction(a)) {
            return !1
        }
        b.notifyMessage(c.notifyMessageKey || 'iocc.sec.internal.logged.out', e, a)
    },
    notifyMessage: function(a, d, e) {
        var c = this,
            b = c.messageMap;
        Ext.Msg.show({
            title: c.titleMap.INFO,
            icon: Ext.Msg.INFO,
            msg: b[a] || a,
            message: b[a] || a,
            closable: !1,
            buttons: Ext.Msg.OK,
            buttonText: {
                ok: b[d] || d
            },
            fn: function() {
                c.handleDefaultAction(e)
            }
        })
    },
    handleDefaultAction: function(b) {
        var a = this;
        if (b.indexOf('CLOSE/RELOAD') >= 0) {
            a.closeApplication();
            a.reloadApplication();
            return !0
        }
        if (b.indexOf('RELOAD') >= 0) {
            a.reloadApplication();
            return !0
        }
        if (b.indexOf('CLOSE') >= 0) {
            a.closeApplication();
            return !0
        }
        return !1
    },
    resetAuthorizationData: function() {
        WuisLogin.Security.resetAuthorizationData()
    },
    closeApplication: function() {
        window.close()
    }
}, 0, 0, 0, 0, 0, 0, [WuisLogin.controller, 'LoginEx'], 0);
Ext.cmd.derive('Wuis.controller.EventLogger', Ext.app.Controller, {
    init: function() {
        var a = this;
        a.control({
            'panel': {
                render: 'onPanelRender',
                close: 'onPanelClose',
                collapse: 'onPanelCollapse',
                expand: 'onPanelExpand'
            },
            'button': {
                click: 'onButtonClick'
            }
        });
        Ext.app.Controller.prototype.init.call(this)
    },
    log: function(a) {
        Ext.log.info(a)
    },
    buttonProperties: ['$className', 'text', 'tooltip', 'iconCls', 'itemId', 'functionId'],
    panelProperties: ['$className', 'title'],
    formatText: function(f, c, e) {
        var g = e.length,
            d = [],
            a, b;
        for (b = 0; b < g; b++) {
            a = e[b];
            if (c[a]) {
                if (a === '$className') {
                    d.push(c[a])
                } else {
                    d.push(a + ': ' + c[a])
                }
            }
        }
        return f + d.join('; ')
    },
    onPanelRender: function(a) {
        var c = a.$className,
            b = a.title || '';
        if ((!b || b === '&#160;') && c.match(/^Ext/)) {
            return
        }
        this.log(this.formatText('Render panel ', a, this.panelProperties))
    },
    onPanelClose: function(a) {
        this.log(this.formatText('Close panel ', a, this.panelProperties))
    },
    onPanelCollapse: function(a) {
        this.log(this.formatText('Collapse panel ', a, this.panelProperties))
    },
    onPanelExpand: function(a) {
        this.log(this.formatText('Expand panel ', a, this.panelProperties))
    },
    onButtonClick: function(c) {
        var b = c.up('panel[title]'),
            a;
        a = this.formatText('Button click: ', c, this.buttonProperties);
        if (b) {
            a += this.formatText('; Parent panel ', b, this.panelProperties)
        }
        this.log(a)
    }
}, 0, 0, 0, 0, 0, 0, [Wuis.controller, 'EventLogger'], 0);
Ext.cmd.derive('Wuis.util.Logger', Ext.Base, {
    trackExtLogs: !0,
    trackExtErrors: !0,
    trackJsErrors: !0,
    sizeLimit: 100,
    timeLimit: 30000,
    timeoutOnError: 1000,
    serviceUrl: '/rest/Log/log',
    logs: null,
    constructor: function() {
        var a = this;
        a.logs = [];
        a.callParent(arguments);
        a.restartTimeout()
    },
    trackLog: function() {
        var a = this,
            b = a.normalizeArgs.apply(a, arguments);
        a.addLog(b.level, b.message)
    },
    trackError: function(a) {
        this.addLog('error', a.msg)
    },
    trackJsError: function(d, e, a, c, b) {
        this.addLog('error', d + '\nFile: ' + e + ', line ' + a + ', column: ' + (c || '') + '\nStackTrace: ' + (b || ''))
    },
    addLog: function(a, d, c) {
        var b = this;
        b.logs.push({
            level: a,
            message: d,
            timestamp: c || Date.now()
        });
        b.checkLogSize(a)
    },
    restartTimeout: function(b) {
        var a = this;
        window.clearTimeout(a.timeout);
        if (b === 0) {
            a.saveLog()
        } else {
            if (b || a.timeLimit) {
                a.timeout = Ext.defer(a.saveLog, b || a.timeLimit, a)
            }
        }
    },
    checkLogSize: function(b) {
        var a = this;
        if (a.logs.length >= a.sizeLimit) {
            a.saveLog()
        } else {
            if (b === 'error') {
                a.restartTimeout(a.timeoutOnError)
            }
        }
    },
    saveLog: function() {
        var a = this;
        a.restartTimeout();
        if (!a.logs.length) {
            return
        }
        a.saveLogToServer(a.logs);
        a.logs = []
    },
    saveLogToServer: function(a) {
        Ext.Ajax.request({
            url: this.serviceUrl,
            method: 'POST',
            jsonData: a
        })
    },
    normalizeArgs: function(a) {
        var b = 'log',
            c;
        if (typeof a !== 'string') {
            c = a;
            a = c.msg || '';
            b = c.level || b
        }
        if (arguments.length > 1) {
            a += Array.prototype.slice.call(arguments, 1).join('')
        }
        if (b !== 'log') {
            a = '[' + b.charAt(0).toUpperCase() + '] ' + a
        }
        return {
            level: b,
            message: a
        }
    },
    init: function() {
        var a = this,
            b = Ext.log;

        function trackedLog() {
            a.trackLog.apply(a, arguments);
            b.apply(this, arguments)
        }

        function logx(e, a) {
            var b = arguments && arguments.callee && arguments.callee.caller,
                c, d;
            for (d = 0; b && d < 5; d += 1) {
                c = b.displayName || b.$owner && b.$owner.$className;
                if (c) {
                    break
                }
                b = b.caller
            }
            if (typeof a[0] === 'string') {
                a.unshift({})
            }
            a[0].level = e;
            if (typeof a[1] === 'string') {
                a[1] = '[' + (c || '???') + '] ' + a[1]
            }
            trackedLog.apply(this, a)
        }
        trackedLog.error = function() {
            logx('error', Array.prototype.slice.call(arguments))
        };
        trackedLog.info = function() {
            logx('info', Array.prototype.slice.call(arguments))
        };
        trackedLog.warn = function() {
            logx('warn', Array.prototype.slice.call(arguments))
        };
        if (a.trackExtLogs) {
            Ext.log = trackedLog
        }
        if (a.trackExtErrors) {
            Ext.Error.handle = function(b) {
                a.trackError(b)
            }
        }
        if (a.trackJsErrors) {
            window.onerror = function() {
                a.trackJsError.apply(a, arguments)
            }
        }
    }
}, 1, 0, 0, 0, 0, 0, [Wuis.util, 'Logger'], 0);
Ext.cmd.derive('TimesSquare.overrides.Date', Ext.Base, {}, 0, 0, 0, 0, 0, 0, [TimesSquare.overrides, 'Date'], function() {
    var a = Ext.Date;
    a.diff = function(e, d, f) {
        var b, c = +d - e;
        switch (f) {
            case a.MILLI:
                return c;
            case a.SECOND:
                return Math.floor(c / 1000);
            case a.MINUTE:
                return Math.floor(c / 60000);
            case a.HOUR:
                return Math.floor(c / 3600000);
            case a.DAY:
                return Math.floor(c / 86400000);
            case 'w':
                return Math.floor(c / 604800000);
            case a.MONTH:
                b = d.getFullYear() * 12 + d.getMonth() - (e.getFullYear() * 12 + e.getMonth());
                if (a.add(e, f, b) > d) {
                    return b - 1
                };
                return b;
            case a.YEAR:
                b = d.getFullYear() - e.getFullYear();
                if (a.add(e, f, b) > d) {
                    return b - 1
                };
                return b;
            default:
        }
    }
});
Ext.cmd.derive('TimesSquare.util.Time', Ext.Base, {
    singleton: !0,
    timeMode: 'utc',
    localAirport: null,
    localAirportTime: null,
    convert: function(b) {
        if (this.timeMode === 'utc' || !this.localAirport || !this.localAirportTime || !b) {
            return b
        }
        var a = new Date(b),
            f = this.localAirportTime,
            g = f.dstList || [],
            h = g.length,
            e = 0,
            d, c;
        a.setMinutes(a.getMinutes() + f.timezone.utcDifference * 1);
        d = Ext.Date.format(b, 'Y-m-d\\TH:i:s');
        for (; e < h; e += 1) {
            c = g[e];
            if (c.startDateTimeLocal <= d && d < c.endDateTimeLocal) {
                a.setMinutes(a.getMinutes() + c.diffLstDst * 1);
                break
            }
        }
        return a
    },
    createRederer: function(a) {
        var b = this;
        return function(c) {
            if (c) {
                return Ext.Date.format(b.convert(c), a)
            }
        }
    },
    getNextLocal: function(c, g, j, f) {
        f = arguments.length < 4 ? 1 : f;
        var h = TimesSquare.util.Time,
            d = h.convert(c),
            l = c - d,
            a, k, e, b, i;
        a = h.getNextOriginal(d, g, j, f);
        e = a - d;
        b = new Date(c + e);
        k = h.convert(b);
        i = b - k;
        if (l === i) {
            return b
        }
        d = new Date(c.getTime() - i);
        a = new Date(d);
        do {
            a = h.getNextOriginal(a, g, j, f);
            e = a - d;
            b = new Date(c + e)
        } while (b.getTime() <= c.getTime());
        if ((g === 'd' || g === 'w') && b.getTime() - c.getTime() < 8 * 3600 * 1000) {
            a = h.getNextOriginal(a, g, j, f);
            e = a - d;
            b = new Date(c + e)
        }
        return b
    },
    getNextOriginal: null,
    airportTimesCache: {},
    setAirport: function(b, d, e) {
        var a = this,
            c;
        if (!b) {
            a.localAirport = null;
            a.localAirportTime = null;
            return !0
        }
        c = a.getAirportTimeServiceKey(b, d, e);
        if (!a.airportTimesCache[c]) {
            return !1
        }
        a.localAirport = b;
        a.localAirportTime = a.airportTimesCache[c];
        return !0
    },
    isCached: function(a, d, e) {
        var c = this,
            b;
        if (!a) {
            return !0
        }
        b = c.getAirportTimeServiceKey(a, d, e);
        return !!c.airportTimesCache[b]
    },
    loadAirportTime: function(c, g, h, e, f) {
        var a = this,
            d = a.getAirportTimeServiceKey(c, g, h),
            b;
        b = {
            me: a,
            airport: c,
            callback: e,
            scope: f,
            key: d
        };
        TimesSquare.service.Oss.getAirportTimes({
            key: d
        }, a.loadAirportTimeCallback, b)
    },
    loadAirportTimeCallback: function(b) {
        var a = this.me,
            e = this.airport,
            d = this.callback,
            f = this.scope,
            c = this.key;
        if (b && b.success && b.result) {
            a.airportTimesCache[c] = b.result;
            a.localAirport = e;
            a.localAirportTime = a.airportTimesCache[c];
            d.apply(f || a, b.result)
        }
    },
    getAirportTimeServiceKey: function(a, b, c) {
        var d = [a, Ext.Date.format(b, 'dMy').toUpperCase(), c];
        return d.join('-')
    }
}, 0, 0, 0, 0, 0, 0, [TimesSquare.util, 'Time'], function() {
    var b = this,
        a = Sch.util.Date,
        c = a.getNext;
    b.getNextOriginal = function() {
        return c.apply(a, arguments)
    };
    a.getNext = b.getNextLocal
});
Ext.cmd.derive('TimesSquare.util.AjaxTracker', Ext.Base, {
    singleton: !0,
    loggingLvl: 'info',
    excludedUrls: ['/NetLine/oss/sendGuiLog'],
    trackingRequests: {},
    tpl: 'AJAX {0} {1} | {2}ms',
    constructor: function() {
        this.mixins.observable.constructor.call(this)
    },
    init: function() {
        this.mon(Ext.Ajax, {
            beforerequest: 'onBeforeRequest',
            requestcomplete: 'onRequestComplete',
            requestexception: 'onRequestException'
        })
    },
    registerRequest: function(b) {
        var a = Ext.data.Connection.requestId + 1;
        this.trackingRequests[a] = {
            options: b,
            start: Date.now()
        }
    },
    unregisterRequest: function(a) {
        delete this.trackingRequests[a.id]
    },
    logRequest: function(b, e) {
        var a = this.trackingRequests[b.id],
            c, d;
        if (a) {
            c = Date.now() - a.start;
            d = Ext.String.format(this.tpl, a.options.url, e, c);
            Ext.log[this.loggingLvl](d);
            this.unregisterRequest(b)
        }
    },
    onBeforeRequest: function(c, a) {
        var b = Ext.Array.some(this.excludedUrls, function(b) {
            return b.match(a.url)
        });
        if (!b) {
            this.registerRequest(a)
        }
    },
    onRequestComplete: function(b, a) {
        this.logRequest(a.request, 'COMPLETE')
    },
    onRequestException: function(b, a) {
        this.logRequest(a.request, 'EXCEPTION')
    }
}, 1, 0, 0, 0, 0, [
    ['observable', Ext.util.Observable]
], [TimesSquare.util, 'AjaxTracker'], function() {
    TimesSquare.util.AjaxTracker.init()
});
Ext.cmd.derive('TimesSquare.view.Viewport', Ext.container.Viewport, {
    layout: 'border'
}, 0, 0, ['component', 'box', 'container', 'viewport'], {
    'component': !0,
    'box': !0,
    'container': !0,
    'viewport': !0
}, 0, 0, [TimesSquare.view, 'Viewport'], 0);
Ext.cmd.derive('TimesSquare.view.Login', WuisLogin.view.Login, {
    afterRender: function() {
        WuisLogin.view.Login.prototype.afterRender.call(this);
        this.getUserField().setUpperCase(!0)
    }
}, 0, ['TSLogin'], ['component', 'box', 'container', 'panel', 'window', 'WuisLogin', 'TSLogin'], {
    'component': !0,
    'box': !0,
    'container': !0,
    'panel': !0,
    'window': !0,
    'WuisLogin': !0,
    'TSLogin': !0
}, ['widget.TSLogin'], 0, [TimesSquare.view, 'Login'], 0);
Ext.cmd.derive('TimesSquare.controller.Login', WuisLogin.controller.LoginEx, {
    refs: [{
        ref: 'viewport',
        selector: 'viewport'
    }],
    loginWidget: 'TSLogin',
    messageMap: {
        'iocc.sec.identity.password.weak': 'Credentials not changed. Password strength is not sufficient.',
        'iocc.sec.identity.password.alreadyused': 'Password matches a password from history',
        'iocc.sec.identity.password.incorrect': 'Credentials not changed. No valid current credentials provided.',
        'iocc.sec.identity.password.notallowed': 'Credentials not changed. Password change not allowed.'
    },
    autoLoadSecurityConfig: !1,
    init: function() {
        var a = this,
            b;
        if (!a.getViewport()) {
            Ext.create('TimesSquare.view.Viewport')
        }
        if (window.location.href.match(/\?testing=true/)) {
            return
        }
        a.control({
            'maintoolbar button[action=logout]': {
                click: 'onLogoutButtonClick'
            }
        });
        a.listen({
            global: {
                unauthorizedstatus: 'onSessionTimeout'
            }
        });
        a.applicationId = 'opsTimesSquare';
        a.restPrefix = '/NetLine/';
        b = WuisLogin.Common.applications[a.applicationId];
        a.loginViewConfig = {
            iconCls: 'icon-ops',
            title: 'NetLine/Ops ++ Compact',
            headerHtml: ['<div style="font-size:14px;color:#194C7F;font-weight:bold;margin-bottom:10px">Login</div>', '<img src="resources/images/lsy-logo-small.png" style="max-width:460px;height:30px;" />'].join(''),
            showPasswordChange: !(b && b.pwdChangeDisabled)
        };
        a.on({
            userauthorized: a.authorizationSuccess,
            scope: a
        });
        WuisLogin.controller.LoginEx.prototype.init.call(this);
        a.application.authorizing = !0;
        a.doAuthorization()
    },
    authorizationSuccess: function() {
        this.getController('Main').switchToInitPerspective();
        this.application.authorizing = !1
    },
    onSessionTimeout: function() {
        var a = this.application.authorizing;
        if (!a) {
            Ext.Msg.show({
                title: 'Session timeout',
                msg: 'The user has been logged out due to session timeout.',
                buttons: Ext.Msg.OK,
                closable: !1,
                icon: Ext.Msg.WARNING,
                fn: function() {
                    window.location.reload()
                }
            });
            return !1
        }
    },
    onLogoutButtonClick: function() {
        var a = this,
            c = a.getViewport(),
            b = a.getController('gantt.Gantt');
        a.getController('gantt.Gantt').stopPolling();
        Ext.Ajax.request({
            serviceName: 'Logout',
            url: a.restPrefix + 'authentication',
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json'
            },
            success: function(e, f) {
                var d = Ext.JSON.decode(e.responseText);
                if (!d || !d.success) {
                    a.fireEvent('serviceError', e, f, d);
                    return
                }
                if (c) {
                    c.destroy()
                }
                if (b) {
                    b.stopPolling()
                }
                window.location.reload()
            },
            failure: function(d, e) {
                a.fireEvent('serviceError', d, e);
                if (c) {
                    c.destroy()
                }
                if (b) {
                    b.stopPolling()
                }
                a.init()
            }
        })
    },
    onPasswordChange: function(e, a) {
        var b = this,
            c = {},
            d;
        c.oldPassword = a.oldPassword;
        c.newPassword = a.password1;
        d = b.restPrefix + 'identity/password/' + encodeURIComponent(a.user);
        Ext.Ajax.request({
            url: d,
            method: 'PUT',
            disableCaching: !0,
            jsonData: c,
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            success: function(c, d) {
                b.onPasswordChangeSuccess(e, a, c, d)
            },
            failure: function(c, d) {
                b.fireEvent('serviceError', c, d, null, function() {
                    b.onCancelPasswordChange(e, a)
                })
            }
        })
    },
    onPasswordChangeSuccess: function(f, e, b, d) {
        var c = this,
            a = Ext.JSON.decode(b.responseText, !0);
        if (a && a.success) {
            Ext.Msg.alert('Password change', 'Successfully password change. Please login with your new password!', function() {
                c.onCancelPasswordChange(f, e)
            });
            return
        }
        c.fireEvent('serviceError', b, d, a, function() {})
    },
    onLogin: function(d, b) {
        var a = this,
            c = {
                password: b.password
            };
        d.setLoading('Login...');
        a.authenticate(a.restPrefix + 'authentication/' + encodeURIComponent(b.user), c, {
            success: a.onSuccessLogin,
            failure: a.onFailureLogin,
            scope: a
        })
    },
    authenticate: function(c, d, a) {
        var b = WuisLogin.Security;
        if (!c) {
            Ext.log.error('WuisLogin.Security.authenticate() method requires at least url parameter to be set!')
        }
        Ext.Ajax.request({
            url: c,
            headers: d,
            method: 'POST',
            disableCaching: !0,
            success: function(e, f) {
                var g = Ext.JSON.decode(e.responseText);
                if (g && g.success) {
                    if (a && a.success) {
                        a.success.call(a.scope || b, e, f)
                    }
                } else {
                    if (a && a.failure) {
                        a.failure.call(a.scope || b, e, f)
                    }
                }
            },
            failure: function(f, e) {
                if (a && a.failure) {
                    a.failure.call(a.scope || b, f, e)
                }
            }
        })
    },
    processMessages: function(e, f, b) {
        var c = this,
            a = [],
            g = c.messageMap,
            d = f && f.serviceName && ' - ' + f.serviceName || '';
        if (!e) {
            a.push({
                icon: Ext.Msg.ERROR,
                title: 'Error in Service' + d,
                message: 'An unexpected error occurred while trying to process your request!<br/>Please try again or notify the system administrator if the problem persists!'
            });
            return a
        }
        if (!b && e.responseText) {
            try {
                b = Ext.JSON.decode(e.responseText, !0)
            } catch (h) {
                Ext.log.warn('Unable to decode response text.', h)
            }
        }
        if (b) {
            if (Ext.isString(b)) {
                a.push({
                    icon: Ext.Msg.ERROR,
                    title: c.titleMap.ERROR + d,
                    message: b
                })
            } else {
                if (b.errState && b.errState.errMessage) {
                    a.push({
                        icon: Ext.Msg.ERROR,
                        title: c.titleMap.ERROR + d,
                        message: b.errState.errMessage
                    })
                } else {
                    if (b.messages) {
                        Ext.each(b.messages, function(h) {
                            var i = Ext.isObject(g) && g[h.messageKey] || h.messageKey,
                                j = Ext.isArray(h.params) ? h.params : [];
                            if (!i) {
                                Ext.iterate(h, function(a, c) {
                                    if (a !== 'params' && a !== 'messageKey' && a !== 'popUpType' && a !== 'severity') {
                                        i = c;
                                        return !1
                                    }
                                })
                            }
                            a.push({
                                icon: c.iconMap[h.severity] || Ext.Msg.ERROR,
                                title: (c.titleMap[h.severity] || c.titleMap.ERROR) + d,
                                message: Ext.String.format(i, j.join(', ')) || 'An unrecongnized error occurred'
                            })
                        })
                    }
                }
            }
        } else {
            if (e.status === 401) {
                a.push({
                    icon: Ext.Msg.ERROR,
                    title: 'Unauthorized Operation' + d,
                    message: 'It is not allowed to complete the operation!<br/>Please log in again with your username and retry the operation.<br/>If the problem persists please notify the system administrator!'
                })
            }
        }
        if (a.length) {
            return a
        }
        a.push({
            icon: Ext.Msg.ERROR,
            title: c.titleMap.ERROR + d,
            message: 'An unexpected error (status: ' + (e.status || 'none') + ') occurred while trying to process your request!<br/>Please try again or notify the system administrator if the problem persists!'
        });
        return a
    },
    handleServiceErrorReauthenticate: function() {
        var d = this,
            a = WuisLogin.Security.identity,
            b = this.getLoginWin(),
            c = a && a.name;
        if (!a && b && !b.isHidden()) {
            c = b.getUserField().getValue()
        }
        d.errorState.rights = WuisLogin.Security.rights;
        d.showLoginWindow({
            userName: c,
            userNameReadOnly: !!a
        })
    },
    doAuthorization: function() {
        this.errorState = null;
        WuisLogin.controller.LoginEx.prototype.doAuthorization.call(this)
    }
}, 0, 0, 0, 0, 0, 0, [TimesSquare.controller, 'Login'], 0);
Ext.cmd.derive('TimesSquare.view.Selection', Ext.panel.Panel, {
    region: 'west',
    title: 'Selections',
    width: '25%',
    collapsible: !0,
    split: !0,
    layout: 'border',
    items: [{
        layout: 'hbox',
        anchor: '100%',
        flex: 1,
        region: 'north',
        split: !0,
        dockedItems: [{
            xtype: 'toolbar',
            dock: 'top',
            items: [{
                xtype: 'button',
                iconCls: 'icon-apply',
                action: 'loadGantt',
                tooltip: 'Apply Selection',
                clickEvent: 'mousedown',
                disabled: !0
            }]
        }],
        items: [{
            html: 'Selections: ',
            border: !1,
            margin: 10,
            width: 70
        }, {
            xtype: 'grid',
            id: 'namedSelections',
            height: '100%',
            flex: 1,
            hideHeaders: !0,
            store: 'NamedSelections',
            selModel: {
                mode: 'single'
            },
            columns: [{
                flex: 1,
                dataIndex: 'selectionID',
                renderer: function(b, c, a) {
                    return b + ' (' + (a.getAircraftSelections().getCount() + a.getLogicalAircraftSubfleets().getCount()) + ' selections)'
                }
            }]
        }]
    }, {
        xtype: 'grid',
        region: 'center',
        id: 'aircrafts',
        flex: 2,
        store: 'SelectableAircrafts',
        dockedItems: [{
            xtype: 'toolbar',
            dock: 'top',
            defaults: {
                margin: '0 3'
            },
            items: [{
                xtype: 'datefield',
                fieldLabel: 'Date',
                labelWidth: 25,
                allowBlank: !1,
                width: 120,
                value: new Date()
            }, {
                xtype: 'numberfield',
                fieldLabel: 'Days',
                hideTrigger: !1,
                labelWidth: 25,
                allowDecimals: !1,
                allowBlank: !1,
                minValue: 1,
                maxValue: 99,
                value: 1,
                width: 80
            }, {
                xtype: 'checkbox',
                margin: '0 3 0 10',
                labelWidth: 25,
                name: 'autoLoadPhysicalAircrafts',
                fieldLabel: 'Auto',
                value: !1
            }, {
                xtype: 'button',
                name: 'carriers',
                text: 'Carriers',
                menu: {
                    plain: !0,
                    defaults: {
                        xtype: 'checkbox',
                        margin: '0 0 0 5',
                        checked: !1
                    }
                }
            }]
        }],
        viewConfig: {
            markDirty: !1
        },
        plugins: 'gridfilters',
        columns: [{
            text: 'Owner',
            flex: 1,
            dataIndex: 'owner',
            filter: {
                type: 'list'
            }
        }, {
            text: 'Subtype',
            flex: 1,
            dataIndex: 'subtype',
            active: !0,
            filter: {
                type: 'list'
            }
        }, {
            text: 'Registration',
            flex: 2,
            dataIndex: 'registration',
            filter: !0
        }, {
            text: 'State',
            flex: 2,
            dataIndex: 'state',
            filter: {
                type: 'list'
            },
            renderer: function(a, b) {
                b.tdCls = 'icon-aircraft-' + a;
                return a
            }
        }, {
            text: 'Selected',
            flex: 1,
            dataIndex: 'selected',
            xtype: 'checkcolumn',
            filter: !0
        }, {
            text: 'Owner Name',
            flex: 3,
            dataIndex: 'ownerName',
            filter: !0
        }, {
            text: 'Subtype Name',
            flex: 3,
            dataIndex: 'subtypeName',
            filter: !0
        }],
        split: !0
    }],
    toggleCollapse: function() {
        return this.collapsed || this.floatedFromCollapse ? this.expand(!1) : this.collapse()
    }
}, 0, ['SelectionView'], ['component', 'box', 'container', 'panel', 'SelectionView'], {
    'component': !0,
    'box': !0,
    'container': !0,
    'panel': !0,
    'SelectionView': !0
}, ['widget.SelectionView'], 0, [TimesSquare.view, 'Selection'], 0);
Ext.cmd.derive('TimesSquare.view.MainToolbar', Ext.toolbar.Toolbar, {
    region: 'north',
    split: !1,
    border: !1,
    height: 32,
    items: [{
        xtype: 'image',
        alt: 'lsy-logo',
        inspect: 'app-logo',
        src: TimesSquare.CONFIG.appLogo,
        autoRender: !0,
        height: 24
    }, '->', {
        iconCls: 'icon-searchleg',
        action: 'searchleg',
        clickEvent: 'mousedown',
        tooltip: 'Search Leg'
    }, {
        xtype: 'tbspacer',
        width: 7
    }, '-', {
        xtype: 'tbspacer',
        width: 7
    }, {
        text: 'Logout',
        action: 'logout',
        iconCls: 'icon-key'
    }, {
        xtype: 'tbspacer',
        width: 7
    }]
}, 0, ['maintoolbar'], ['component', 'box', 'container', 'toolbar', 'maintoolbar'], {
    'component': !0,
    'box': !0,
    'container': !0,
    'toolbar': !0,
    'maintoolbar': !0
}, ['widget.maintoolbar'], 0, [TimesSquare.view, 'MainToolbar'], 0);
Ext.cmd.derive('TimesSquare.view.SystemMessage', Ext.Component, {
    cls: 'system-message',
    region: 'north',
    split: !1,
    border: !1,
    normalHeight: 30,
    animated: !1,
    animConfig: {
        duration: 100,
        easing: 'linear',
        dynamic: !1
    },
    config: {
        text: undefined,
        closable: !1
    },
    childEls: ['innerEl', 'messageEl'],
    renderTpl: ['<div id="{id}-innerEl" data-ref="innerEl" class="{$comp.cls}-inner">', '<div id="{id}-messageEl" data-ref="messageEl" class="{$comp.cls}-message">{ text }</div>', '<div id="{id}-closeEl" data-ref="closeEl" class="{$comp.cls}-close">', '{% this.renderCloseTool(out, values) %}', '</div>', '</div>', {
        renderCloseTool: function(c, a) {
            var d = a.$comp,
                b = d.closeTool;
            Ext.DomHelper.generateMarkup(b.getRenderTree(), c)
        }
    }],
    constructor: function() {
        Ext.Component.prototype.constructor.apply(this, arguments);
        this.createTool()
    },
    initComponent: function() {
        this.height = this.text ? this.normalHeight : 0;
        Ext.Component.prototype.initComponent.call(this)
    },
    createTool: function() {
        this.closeTool = new Ext.panel.Tool({
            type: 'close',
            callback: 'close',
            scope: this,
            hidden: !this.closable
        })
    },
    close: function(a) {
        if (a || this.animated) {
            this.animate(Ext.apply({}, this.animConfig, {
                to: {
                    height: 0
                }
            }))
        } else {
            this.setHeight(0)
        }
    },
    open: function(a) {
        if (a || this.animated) {
            this.animate(Ext.apply({}, this.animConfig, {
                to: {
                    height: this.normalHeight
                }
            }))
        } else {
            this.setHeight(this.normalHeight)
        }
    },
    setText: function(a) {
        this.text = a;
        this.setHeight(this.normalHeight);
        if (this.messageEl) {
            this.messageEl.setHtml(a)
        }
    },
    setClosable: function(a) {
        this.closable = a;
        if (this.closeTool) {
            this.closeTool.setHidden(!a)
        }
    },
    initRenderData: function() {
        var a = Ext.Component.prototype.initRenderData.apply(this, arguments);
        return Ext.apply({
            text: this.text
        }, a)
    },
    privates: {
        finishRenderChildren: function() {
            Ext.Component.prototype.finishRenderChildren.apply(this, arguments);
            this.closeTool.finishRender()
        }
    }
}, 1, ['systemmessage'], ['component', 'box', 'systemmessage'], {
    'component': !0,
    'box': !0,
    'systemmessage': !0
}, ['widget.systemmessage'], 0, [TimesSquare.view, 'SystemMessage'], 0);
Ext.cmd.derive('TimesSquare.controller.Main', Ext.app.Controller, {
    views: ['MainToolbar'],
    refs: [{
        ref: 'viewport',
        selector: 'viewport'
    }, {
        ref: 'loginWin',
        selector: 'WuisLogin'
    }, {
        ref: 'msgCmp',
        selector: 'systemmessage'
    }],
    init: function() {
        var a = this;
        a.control({
            'maintoolbar button[action=searchleg]': {
                click: a.onClickTbarSearchLeg
            }
        })
    },
    onClickTbarSearchLeg: function() {
        this.getController('details.Main').open(TimesSquare.controller.details.Main.view.SEARCHLEG)
    },
    switchToInitPerspective: function() {
        var a = this,
            c = a.getViewport(),
            b = a.getLoginWin();
        if (b) {
            b.close()
        }
        c.removeAll();
        c.add([new TimesSquare.view.Selection(), new TimesSquare.view.MainToolbar(), new TimesSquare.view.SystemMessage()]);
        a.getController('Clock').start();
        a.getController('SearchLeg').loadOperators(function() {
            a.setMessageOfTheDay(TimesSquare.CONFIG.messageOfTheDay)
        });
        a.getController('Messaging').start()
    },
    setMessageOfTheDay: function(a) {
        var b = this.getMsgCmp();
        if (a && b) {
            b.setText(a)
        }
    }
}, 0, 0, 0, 0, 0, 0, [TimesSquare.controller, 'Main'], 0);
Ext.cmd.derive('TimesSquare.model.gantt.Timeline', Ext.data.Model, {
    fields: ['Date', 'Color', 'Width'],
    setDate: function(a) {
        this.set('Date', a)
    },
    getDate: function() {
        return this.get('Date')
    }
}, 0, 0, 0, 0, 0, 0, [TimesSquare.model.gantt, 'Timeline'], 0);
Ext.cmd.derive('TimesSquare.store.gantt.Timelines', Ext.data.Store, {
    model: 'TimesSquare.model.gantt.Timeline',
    storeId: 'gantt.Timelines'
}, 0, 0, 0, 0, 0, 0, [TimesSquare.store.gantt, 'Timelines'], 0);
Ext.cmd.derive('TimesSquare.controller.Clock', Ext.app.Controller, {
    expiry: 3600000,
    lastQueried: undefined,
    lastKnown: undefined,
    task: undefined,
    model: undefined,
    stores: ['gantt.Timelines'],
    refs: [{
        ref: 'gantt',
        selector: 'gantt'
    }],
    start: function() {
        var a = this;
        if (!a.model) {
            a.loadCurrentTime(function(b) {
                a.model = Ext.create('TimesSquare.model.gantt.Timeline');
                a.setCurrentTime(b);
                a.getGanttTimelinesStore().add(a.model)
            })
        } else {
            a.loadCurrentTime(a.setCurrentTime)
        }
        if (!a.task) {
            a.task = Ext.util.TaskManager.newTask({
                run: a.refreshClock,
                interval: 60000,
                scope: a
            })
        }
        a.task.start()
    },
    refreshClock: function() {
        var a = this,
            d = Ext.Date.now(),
            b = d - a.lastQueried,
            c;
        if (b > a.expiry) {
            a.loadCurrentTime(a.setCurrentTime)
        } else {
            c = new Date(a.lastKnown + b);
            a.setCurrentTime(c)
        }
    },
    loadCurrentTime: function(b) {
        var a = this;
        TimesSquare.service.Oss.getCurrentTime(function(d) {
            var c;
            if (d) {
                c = Ext.Date.parse(d.result.currentTime, 'c');
                a.lastQueried = Ext.Date.now();
                a.lastKnown = c.getTime();
                if (b) {
                    b.call(a, c)
                }
            }
        }, a)
    },
    setCurrentTime: function(b) {
        var d = this,
            c = this.getGantt(),
            a = c && c.getPlugin('lines');
        d.model.setDate(b);
        d.fireEvent('opsclockchanged', b);
        if (a) {
            a.renderElements()
        }
    },
    getCurrentTime: function() {
        return this.model.getDate()
    },
    setTimelineColor: function(b, c) {
        var a = this.model;
        if (a) {
            a.set('Color', b);
            a.set('Width', c || 1)
        }
    }
}, 0, 0, 0, 0, 0, 0, [TimesSquare.controller, 'Clock'], 0);
Ext.cmd.derive('TimesSquare.mixin.ExecutionTimeLogger', Ext.Base, {
    executionTrackMap: {},
    trackingTpl: '{0} | Execution time: {1}ms',
    trackingDefaults: {
        level: 'info'
    },
    track: function(a) {
        var b = this;
        a = b.assembleConfig(a);
        b.configure(a);
        Ext.Object.each(a, function(e, c) {
            var f = Ext.isObject(a) ? c.level : c,
                d = Ext.isObject(a) ? c.tpl || b.trackingTpl : b.trackingTpl;
            b.trackMethod(e, {
                lvl: f,
                tpl: d
            })
        })
    },
    untrack: function(a) {
        var b = this.executionTrackMap[a].original;
        if (b) {
            this[a] = b;
            delete this.executionTrackMap[a]
        }
    },
    assembleConfig: function(a) {
        var b = {};
        if (Ext.isString(a)) {
            b[a] = {}
        } else {
            if (Ext.isArray(a)) {
                Ext.each(a, function(c) {
                    b[c] = {}
                })
            } else {
                if (Ext.isObject(a)) {
                    Ext.Object.each(a, function(d, c) {
                        if (Ext.isString(c)) {
                            b[d] = {
                                level: c
                            }
                        } else {
                            b[d] = c
                        }
                    })
                } else {
                    b = a
                }
            }
        }
        return b
    },
    configure: function(a) {
        var b = Ext.Object.merge(this.trackingDefaults || {}, a.defaults || {});
        Ext.Object.each(a, function(d, c) {
            a[d] = Ext.Object.merge(b, c)
        });
        if (a.defaults) {
            delete a.defaults
        }
        return a
    },
    trackMethod: function(a, c) {
        var b = this,
            d = b[a],
            e = function() {
                var h = d.displayName,
                    g = c.lvl || 'info',
                    i = Ext.Function.createInterceptor(d, function() {
                        var b = this.executionTrackMap[a];
                        b.start = b.start || new Date();
                        b.step = b.step || 0;
                        b.options = b.options || c;
                        b.step += 1
                    }, b),
                    f = function() {
                        var b = this.executionTrackMap[a],
                            d, e;
                        b.step -= 1;
                        if (b.step <= 0) {
                            d = new Date() - this.executionTrackMap[a].start;
                            e = Ext.String.format(c.tpl, h, d);
                            Ext.log[g](e);
                            delete b.start;
                            delete b.step;
                            delete b.options
                        }
                    },
                    e = Ext.Function.createSequence(i, f, b);
                e.options = function(b, d) {
                    Ext.callback(b, d, [c])
                };
                e.stepIn = function() {
                    b.executionTrackMap[a].step += 1
                };
                e.stepOut = function() {
                    f.apply(b)
                };
                return e
            }();
        b.executionTrackMap[a] = {
            original: d
        };
        b[a] = e
    }
}, 0, 0, 0, 0, 0, 0, [TimesSquare.mixin, 'ExecutionTimeLogger'], 0);
Ext.cmd.derive('TimesSquare.model.SelectableAircraft', Ext.data.Model, {
    proxy: {
        type: 'memory',
        reader: {
            type: 'json'
        }
    },
    fields: [{
        name: 'owner',
        type: 'string'
    }, {
        name: 'ownerName',
        type: 'string'
    }, {
        name: 'subtype',
        type: 'string'
    }, {
        name: 'subtypeName',
        type: 'string'
    }, {
        name: 'state',
        type: 'string'
    }, {
        name: 'selected',
        type: 'boolean',
        defaultValue: !1
    }, {
        name: 'registration',
        type: 'string',
        convert: function(b, a) {
            if (a.isLogical()) {
                return Ext.String.format('{0}/{1}', a.getOwner(), a.getSubtype())
            }
            return b
        }
    }],
    equalsAircraft: function(a) {
        var b = this.getRegistration() === a.getRegistration() && this.getOwner() === a.getOwner() && this.getSubtype() === a.getSubtype();
        return b
    },
    equalsLogicalAircraft: function(a) {
        var b = this.isLogical() && this.getOwner() === a.getOwner() && this.getSubtype() === a.getSubtype();
        return b
    },
    isLogical: function() {
        return this.get('state') === TimesSquare.model.gantt.Resource.TYPE.LOGICAL
    },
    isSelected: function() {
        return this.get('selected')
    },
    setSelected: function(a) {
        this.set('selected', a)
    },
    getRegistration: function() {
        return this.get('registration')
    },
    getOwner: function() {
        return this.get('owner')
    },
    getSubtype: function() {
        return this.get('subtype')
    },
    getAircraftSelection: function() {
        return {
            registration: this.getRegistration(),
            owner: this.getOwner(),
            subtype: this.getSubtype()
        }
    },
    getLogicalAircraftSubfleet: function() {
        return {
            owner: this.getOwner(),
            subtype: this.getSubtype()
        }
    }
}, 0, 0, 0, 0, 0, 0, [TimesSquare.model, 'SelectableAircraft'], 0);
Ext.cmd.derive('TimesSquare.store.SelectableAircrafts', Ext.data.Store, {
    model: 'TimesSquare.model.SelectableAircraft',
    getUnfilteredData: function() {
        var a = this;
        return a.snapshot || a.data
    }
}, 0, 0, 0, 0, 0, 0, [TimesSquare.store, 'SelectableAircrafts'], 0);
Ext.cmd.derive('TimesSquare.model.NamedSelection', Ext.data.Model, {
    idProperty: 'selectionID',
    proxy: {
        type: 'memory',
        reader: {
            type: 'json'
        }
    },
    fields: [{
        name: 'selectionID',
        type: 'string'
    }, {
        name: 'beginDate',
        type: 'date',
        dateFormat: 'c'
    }, {
        name: 'numberOfDays',
        type: 'int',
        convert: function(a) {
            var b = a;
            if (!a || a < 1) {
                b = 1
            }
            return b
        }
    }],
    getBeginDate: function() {
        return this.get('beginDate')
    },
    getNumberOfDays: function() {
        return this.get('numberOfDays')
    },
    associations: [{
        name: 'getAircraftSelections',
        type: 'hasMany',
        model: 'TimesSquare.model.SelectableAircraft',
        associationKey: 'aircraftSelections'
    }, {
        name: 'getLogicalAircraftSubfleets',
        type: 'hasMany',
        model: 'TimesSquare.model.SelectableAircraft',
        associationKey: 'logicalAircraftSubfleets'
    }]
}, 0, 0, 0, 0, 0, 0, [TimesSquare.model, 'NamedSelection'], 0);
Ext.cmd.derive('TimesSquare.store.NamedSelections', Ext.data.Store, {
    model: 'TimesSquare.model.NamedSelection'
}, 0, 0, 0, 0, 0, 0, [TimesSquare.store, 'NamedSelections'], 0);
Ext.cmd.derive('TimesSquare.controller.Selection', Ext.app.Controller, {
    refs: [{
        ref: 'topButton',
        selector: 'SelectionView button[action=loadGantt]'
    }, {
        ref: 'selectionView',
        selector: 'SelectionView'
    }, {
        ref: 'namedSelection',
        selector: 'SelectionView #namedSelections'
    }, {
        ref: 'aircraftsView',
        selector: 'SelectionView #aircrafts'
    }, {
        ref: 'ownerColumn',
        selector: 'SelectionView #aircrafts gridcolumn[dataIndex=owner]'
    }, {
        ref: 'subtypeColumn',
        selector: 'SelectionView #aircrafts gridcolumn[dataIndex=subtype]'
    }, {
        ref: 'stateColumn',
        selector: 'SelectionView #aircrafts gridcolumn[dataIndex=state]'
    }, {
        ref: 'startDate',
        selector: 'SelectionView datefield'
    }, {
        ref: 'days',
        selector: 'SelectionView numberfield'
    }, {
        ref: 'autoLoad',
        selector: 'SelectionView checkbox'
    }, {
        ref: 'carriers',
        selector: 'SelectionView button[name=carriers]'
    }],
    stores: ['SelectableAircrafts', 'NamedSelections'],
    init: function() {
        var a = this,
            b = a.getSelectableAircraftsStore();
        a.track(['onClickSelectionsItem', 'loadGantt']);
        b.on('datachanged', a.loadOptions, a);
        b.on('update', a.setTopButtonState, a);
        a.control({
            'SelectionView button[action=loadGantt]': {
                click: a.onClickLoadGanttButton
            },
            'SelectionView': {
                afterrender: a.afterRender
            },
            'SelectionView #namedSelections': {
                selectionchange: a.onClickSelectionsItem,
                itemdblclick: a.onDblClickSelectionsItem
            },
            'SelectionView datefield': {
                validitychange: a.setTopButtonState
            },
            'SelectionView numberfield': {
                validitychange: a.setTopButtonState
            }
        })
    },
    setTopButtonState: function() {
        var a = this,
            f = a.getTopButton(),
            b, d = !1,
            e = a.getSelectableAircraftsStore().getUnfilteredData(),
            c = e.collect('selected', 'data');
        if (a.getStartDate().isValid() === !0 && a.getDays().isValid() === !0) {
            for (b = 0; b < c.length; b += 1) {
                if (c[b] === !0) {
                    d = !0;
                    break
                }
            }
        }
        f.setDisabled(!d)
    },
    findSelections: function() {
        var a = this;
        TimesSquare.service.Aircraft.findSelections(function(b) {
            if (b) {
                a.getNamedSelectionsStore().loadRawData(b.result.namedSelections);
                a.getSelectableAircraftsStore().loadRawData(b.result.aircraftList);
                a.setDefaultCarriers(b.result.defaultCarriers)
            }
        })
    },
    afterRender: function() {
        this.findSelections()
    },
    loadOptions: function() {
        var b = this,
            a = b.getSelectableAircraftsStore();
        this.getOwnerColumn().initialConfig.filter.options = a.collect('owner').sort();
        this.getSubtypeColumn().initialConfig.filter.options = a.collect('subtype').sort();
        this.getStateColumn().initialConfig.filter.options = a.collect('state').sort()
    },
    onClickSelectionsItem: function() {
        var a = this,
            h = !1,
            b = a.getNamedSelection().getSelectionModel().getSelection(),
            g = a.getSelectableAircraftsStore(),
            i = g.getUnfilteredData(),
            d, c, f, e;
        if (b) {
            b = b[0];
            Ext.log.info('[Selection] Selection change: ' + b.data.selectionID);
            Ext.suspendLayouts();
            g.un('update', a.setTopButtonState, a);
            f = b.getAircraftSelections().data.items;
            e = b.getLogicalAircraftSubfleets().data.items;
            a.getStartDate().setValue(b.getBeginDate());
            a.getDays().setValue(b.getNumberOfDays());
            a.getAutoLoad().setValue(b.get('autoLoadPhysicalAircrafts'));
            a.populateCarriers(b.get('flightCarriers'));
            i.each(function(a) {
                c = !1;
                for (d = 0; d < f.length; d += 1) {
                    c = a.equalsAircraft(f[d]);
                    if (c === !0) {
                        break
                    }
                }
                if (!c) {
                    for (d = 0; d < e.length; d += 1) {
                        c = a.equalsLogicalAircraft(e[d]);
                        if (c === !0) {
                            break
                        }
                    }
                }
                if (!h) {
                    h = a.data.selected !== c
                }
                a.data.selected = c
            });
            if (h) {
                a.getAircraftsView().getView().refresh()
            }
            g.on('update', a.setTopButtonState, a);
            a.setTopButtonState();
            Ext.resumeLayouts();
            a.onClickSelectionsItem.options(function(h) {
                var j = ' | Selectable Aircrafts: {0}; Aircraft selections: {1}; Logical Aircraft selections: {2}',
                    d = i.length,
                    c = f.length,
                    b = e.length,
                    g = Ext.String.format(j, d, c, b);
                h.tpl = a.trackingTpl + g
            }, a)
        }
    },
    onClickLoadGanttButton: function() {
        this.loadGantt()
    },
    onDblClickSelectionsItem: function() {
        var a = this,
            b = a.getTopButton();
        if (!b.isDisabled()) {
            a.loadGantt()
        }
    },
    loadGantt: function() {
        var d = this,
            e, b, a = {
                aircraftSelections: [],
                logicalAircraftSubfleets: [],
                beginDate: d.getStartDate().getValue(),
                numberOfDays: d.getDays().getValue()
            },
            c = d.getSelectableAircraftsStore().getUnfilteredData();
        c = c.items;
        Ext.log.info('[Selection] Load gantt... Number of days: ' + a.numberOfDays + ', begin date: ' + Ext.Date.format(a.beginDate, 'Y-m-d'));
        for (e = 0; e < c.length; e += 1) {
            b = c[e];
            if (b.isSelected()) {
                if (b.isLogical()) {
                    a.logicalAircraftSubfleets.push(b.getLogicalAircraftSubfleet())
                } else {
                    a.aircraftSelections.push(b.getAircraftSelection())
                }
            }
        }
        a.autoLoadPhysicalAircrafts = this.getAutoLoad().getValue();
        a.flightCarriers = this.getSelectedCarriers();
        d.getController('gantt.Gantt').loadGantt(a)
    },
    getSelectionDates: function(g) {
        var e = this,
            a = Ext.Date,
            b = a.format,
            d = e.getStartDate().getValue() || new Date(),
            h = e.getDays().getValue() || 1,
            f = a.add(d, a.DAY, h),
            c = g || 'Y-m-d';
        return {
            beginDate: b(d, c),
            endDate: b(f, c)
        }
    },
    setDefaultCarriers: function(a) {
        this.defaultCarriers = a || [];
        this.populateCarriers()
    },
    getSelectedCarriers: function() {
        var a = [];
        this.getCarriers().getMenu().items.each(function(b) {
            if (!b.isCheckbox) {
                return
            }
            if (b.getValue()) {
                a.push(b.name)
            }
        });
        return a
    },
    populateCarriers: function(b) {
        var c = this.defaultCarriers,
            a = this.getCarriers().getMenu(),
            d;
        c = c || [];
        b = b || [];
        this.selectionCarriers = b;
        a.removeAll();
        Ext.Array.each(c, function(c) {
            a.add({
                boxLabel: c,
                name: c,
                checked: !1
            })
        });
        if (b.length > 0) {
            a.add({
                xtype: 'menuseparator',
                margin: '3 0'
            })
        }
        Ext.Array.each(b, function(c) {
            var d = a.down('[name=' + c + ']');
            if (d) {
                d.setValue(!0)
            } else {
                a.add({
                    boxLabel: c,
                    name: c,
                    checked: !0
                })
            }
        });
        d = a.add({
            xtype: 'textfield',
            hideLabel: !0,
            emptyText: 'Add carrier...',
            triggers: {
                add: {
                    cls: 'add-trigger',
                    handler: 'addCarrier',
                    scope: this
                }
            },
            listeners: {
                specialkey: function(c, a) {
                    if (a.getKey() === a.ENTER) {
                        this.addCarrier(d)
                    }
                },
                scope: this
            }
        })
    },
    addCarrier: function(e) {
        var a = Ext.String.trim(e.getValue()),
            c = this.getCarriers().getMenu(),
            b = this.selectionCarriers,
            f = this.defaultCarriers,
            d = Ext.Array.contains;
        if (Ext.isEmpty(a) || d(b, a) || d(f, a)) {
            return
        }
        if (b.length <= 0) {
            c.add({
                xtype: 'menuseparator',
                margin: '3 0'
            })
        }
        b.push(a);
        c.insert(c.items.length - 1, {
            boxLabel: a,
            name: a,
            checked: !0
        });
        e.selectText()
    }
}, 0, 0, 0, 0, 0, [
    ['logger', TimesSquare.mixin.ExecutionTimeLogger]
], [TimesSquare.controller, 'Selection'], 0);
Ext.cmd.derive('messaging.Base64', Ext.Base, {
    singleton: !0,
    alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',
    lookup: null,
    ie: /MSIE /.test(navigator.userAgent),
    ieo: /MSIE [67]/.test(navigator.userAgent),
    encode: function(j) {
        var b = this;
        var f = b.toUtf8(j),
            c = -1,
            i = f.length,
            g, d, e, a = new Array(3);
        if (b.ie) {
            var h = [];
            while (++c < i) {
                g = f[c];
                d = f[++c];
                a[0] = g >> 2;
                a[1] = (g & 3) << 4 | d >> 4;
                if (isNaN(d)) {
                    a[2] = a[3] = 64
                } else {
                    e = f[++c];
                    a[2] = (d & 15) << 2 | e >> 6;
                    a[3] = isNaN(e) ? 64 : e & 63
                }
                h.push(b.alphabet.charAt(a[0]), b.alphabet.charAt(a[1]), b.alphabet.charAt(a[2]), b.alphabet.charAt(a[3]))
            }
            return h.join('')
        } else {
            var h = '';
            while (++c < i) {
                g = f[c];
                d = f[++c];
                a[0] = g >> 2;
                a[1] = (g & 3) << 4 | d >> 4;
                if (isNaN(d)) {
                    a[2] = a[3] = 64
                } else {
                    e = f[++c];
                    a[2] = (d & 15) << 2 | e >> 6;
                    a[3] = isNaN(e) ? 64 : e & 63
                }
                h += b.alphabet[a[0]] + b.alphabet[a[1]] + b.alphabet[a[2]] + b.alphabet[a[3]]
            }
            return h
        }
    },
    decode: function(f) {
        var d = this;
        if (f.length % 4) {
            throw new Error("InvalidCharacterError: 'B64.decode' failed: The string to be decoded is not correctly encoded.")
        }
        var b = d.fromUtf8(f),
            a = 0,
            e = b.length;
        if (d.ieo) {
            var c = [];
            while (a < e) {
                if (b[a] < 128) {
                    c.push(String.fromCharCode(b[a++]))
                } else {
                    if (b[a] > 191 && b[a] < 224) {
                        c.push(String.fromCharCode((b[a++] & 31) << 6 | b[a++] & 63))
                    } else {
                        c.push(String.fromCharCode((b[a++] & 15) << 12 | (b[a++] & 63) << 6 | b[a++] & 63))
                    }
                }
            }
            return c.join('')
        } else {
            var c = '';
            while (a < e) {
                if (b[a] < 128) {
                    c += String.fromCharCode(b[a++])
                } else {
                    if (b[a] > 191 && b[a] < 224) {
                        c += String.fromCharCode((b[a++] & 31) << 6 | b[a++] & 63)
                    } else {
                        c += String.fromCharCode((b[a++] & 15) << 12 | (b[a++] & 63) << 6 | b[a++] & 63)
                    }
                }
            }
            return c
        }
    },
    toUtf8: function(d) {
        var f = this;
        var c = -1,
            e = d.length,
            a, b = [];
        if (/^[\x00-\x7f]*$/.test(d)) {
            while (++c < e) {
                b.push(d.charCodeAt(c))
            }
        } else {
            while (++c < e) {
                a = d.charCodeAt(c);
                if (a < 128) {
                    b.push(a)
                } else {
                    if (a < 2048) {
                        b.push(a >> 6 | 192, a & 63 | 128)
                    } else {
                        b.push(a >> 12 | 224, a >> 6 & 63 | 128, a & 63 | 128)
                    }
                }
            }
        }
        return b
    },
    fromUtf8: function(d) {
        var c = this;
        var b = -1,
            f, e = [],
            a = new Array(3);
        if (!c.lookup) {
            f = c.alphabet.length;
            c.lookup = {};
            while (++b < f) {
                c.lookup[c.alphabet.charAt(b)] = b
            }
            b = -1
        }
        f = d.length;
        while (++b < f) {
            a[0] = c.lookup[d.charAt(b)];
            a[1] = c.lookup[d.charAt(++b)];
            e.push(a[0] << 2 | a[1] >> 4);
            a[2] = c.lookup[d.charAt(++b)];
            if (a[2] == 64) {
                break
            }
            e.push((a[1] & 15) << 4 | a[2] >> 2);
            a[3] = c.lookup[d.charAt(++b)];
            if (a[3] == 64) {
                break
            }
            e.push((a[2] & 3) << 6 | a[3])
        }
        return e
    }
}, 0, 0, 0, 0, 0, 0, [messaging, 'Base64'], 0);
Ext.cmd.derive('messaging.ActiveMQ', Ext.app.Controller, {
    url: null,
    destination: null,
    normalTimeout: 5000,
    consumeNextTimeout: 30 * 1000,
    waitOnError: 5000,
    waitBetween: 1000,
    autoStart: !1,
    run: !1,
    connection: null,
    subscriptionId: 1,
    oldSubscriptionId: 0,
    clientId: null,
    selector: null,
    subsUrl: '',
    nextUrl: '',
    init: function() {
        var a = this;
        a.connection = Ext.create('Ext.data.Connection')
    },
    restart: function(b, a, c) {
        this.start(b, a, c)
    },
    start: function(c, d, e) {
        var a = this,
            f = Ext.create('Ext.data.identifier.Uuid'),
            b;
        a.subscriptionId += 1;
        b = a.subscriptionId;
        if (d) {
            a.stop(e)
        }
        if (!a.clientId) {
            a.clientId = f.generate()
        }
        a.run = !0;
        if (c !== undefined) {
            a.selector = c || null
        }
        setTimeout(function() {
            if (b !== a.subscriptionId || !a.run) {
                return
            }
            a.startListening()
        })
    },
    stop: function(c) {
        var a = this,
            b = a.clientId;
        if (a.connection) {
            a.oldSubscriptionId = 0;
            a.connection.abortAll();
            Ext.log.info('[ActiveMQ] All connections are aborted by stop request.')
        }
        if (a.run) {
            a.oldSubscriptionId = 0;
            a.run = !1;
            if (c) {
                Ext.log.info('[ActiveMQ] Unsubscribing from listening queue (clientId: ' + b + ')...');
                Ext.defer(function() {
                    a.connection.request({
                        url: a.url,
                        method: 'POST',
                        params: {
                            type: 'unlisten',
                            clientId: b
                        },
                        success: function() {
                            Ext.log.info('[ActiveMQ] Successfully unsubscribed from listening queue (clientId: ' + b + ').')
                        }
                    })
                }, 1)
            }
        }
    },
    startListening: function() {
        var a = this,
            b = a.subscriptionId;
        if (!a.run) {
            return
        }
        Ext.log.info('[ActiveMQ] Subscribing to listening queue (clientId: ' + a.clientId + ')...');
        a.connection.request({
            url: a.url,
            method: 'POST',
            headers: {
                'selector': a.selector
            },
            params: {
                type: 'listen',
                destination: a.destination,
                clientId: a.clientId,
                message: a.clientId
            },
            timeout: a.normalTimeout,
            success: function(c) {
                if (b !== a.subscriptionId || !a.run) {
                    return
                }
                a.currentServerId = c.getResponseHeader('x-server-id');
                Ext.log.info('[ActiveMQ] Subscribed to listening queue (serverId: ' + a.currentServerId + ', clientId: ' + a.clientId + ')...');
                a.consumeNext()
            },
            failure: function(c) {
                if (b !== a.subscriptionId || !a.run) {
                    return
                }
                if (!c || !c.aborted) {
                    Ext.log.error('[ActiveMQ] Could not subscribe to listening queue (' + a.clientId + '), restarting with timeout!')
                } else {
                    Ext.log.info('[ActiveMQ] Subscribing to listening queue transaction is aborted normally, restarting with timeout.')
                }
                a.restartWithTimeout()
            }
        })
    },
    consumeNext: function() {
        var a = this,
            b = a.subscriptionId;
        if (!a.run || !a.url) {
            return
        }
        if (!a.oldSubscriptionId) {
            a.oldSubscriptionId = b
        }
        a.connection.request({
            url: a.url,
            headers: {
                'Accept': 'application/json'
            },
            params: {
                clientId: a.clientId,
                timeout: a.consumeNextTimeout
            },
            method: 'GET',
            timeout: a.consumeNextTimeout + 11000,
            success: function(c) {
                var d;
                if ((b === a.subscriptionId || b === a.oldSubscriptionId) && a.run) {
                    a.oldSubscriptionId = 0;
                    d = c.getResponseHeader('x-server-id');
                    if (a.currentServerId !== d) {
                        Ext.log.error('[ActiveMQ] Message received with invalid serverId (' + d + ' instead of ' + a.currentServerId + '), restarting with timeout!');
                        a.restartWithTimeout();
                        return
                    }
                    try {
                        if (a.processResponseXML(c.responseXML, b)) {
                            return
                        }
                    } catch (e) {
                        try {
                            if (a.processResponseXML((new DOMParser()).parseFromString(c.responseText, 'text/xml'), b)) {
                                return
                            }
                            Ext.log.error(e.toString());
                            Ext.log.error('[ActiveMQ] Exception occured while parsing queue XML data (responseXML), restarting with timeout!')
                        } catch (f) {
                            Ext.log.error(f.toString());
                            Ext.log.error('[ActiveMQ] Exception occured while parsing queue XML data (DOMParser), restarting with timeout!')
                        }
                    }
                    a.restartWithTimeout()
                }
                a.oldSubscriptionId = 0
            },
            failure: function(c) {
                a.oldSubscriptionId = 0;
                if (b !== a.subscriptionId || !a.run) {
                    return
                }
                if (!c || !c.aborted) {
                    Ext.log.error('[ActiveMQ] Error occured while receiving queue message, restarting with timeout!')
                } else {
                    Ext.log.info('[ActiveMQ] Message receiving transaction is aborted normally, restarting with timeout.')
                }
                a.restartWithTimeout()
            }
        })
    },
    processResponseXML: function(c, g) {
        var a = this,
            h = a.clientId,
            f, e, b, d;
        if (c && c.firstChild) {
            f = c.firstChild;
            e = c.firstChild.childNodes;
            if (f.nodeName !== 'parseerror') {
                for (d = 0; d < e.length; d += 1) {
                    b = e[d];
                    if (!b.getAttribute) {
                        continue
                    }
                    if (b.getAttribute('id') === h) {
                        a.updateStores(messaging.Base64.decode(b.textContent))
                    } else {
                        Ext.log.error('Message id is not valid: ' + b.getAttribute('id'))
                    }
                }
                if (g !== a.subscriptionId || !a.run) {
                    return !0
                }
                Ext.defer(a.consumeNext, a.waitBetween, a);
                return !0
            }
        }
        return !1
    },
    restartWithTimeout: function() {
        var a = this,
            b = a.subscriptionId;
        setTimeout(function() {
            if (b !== a.subscriptionId || !a.run) {
                return
            }
            a.start(a.selector, !0)
        }, a.waitOnError)
    },
    updateStores: function() {}
}, 0, 0, 0, 0, 0, 0, [messaging, 'ActiveMQ'], 0);
Ext.cmd.derive('TimesSquare.classes.MessageEvent', Ext.Base, {
    statics: {
        TYPE: {
            UPDATE: 'UPDATE',
            DELETE: 'DELETE',
            MESSAGE: 'MESSAGE',
            NEW_AIRCRAFT: 'INSERT_AIRCRAFT'
        }
    },
    updatedObjects: null,
    deletedObjects: null,
    messages: null,
    newAircrafts: null,
    constructor: function(b) {
        var a = this,
            c = b && b.data;
        a.updatedObjects = [];
        a.deletedObjects = [];
        a.messages = [];
        a.newAircrafts = [];
        if (c) {
            a.consumeMessages(c)
        }
    },
    destroy: function() {
        this.updatedObjects = null;
        this.deletedObjects = null;
        this.messages = null;
        this.newAircrafts = null;
        return this.callParent(arguments)
    },
    consumeMessages: function(a) {
        var c = this,
            b;
        if (!a) {
            return
        }
        if (Ext.isObject(a)) {
            c.consumeMessage(a)
        } else {
            if (Ext.isArray(a)) {
                for (b = 0; b < a.length; b++) {
                    c.consumeMessage(a[b])
                }
            }
        }
    },
    consumeMessage: function(a) {
        var b = this,
            d, c;
        if (a.notificationType === b.self.TYPE.UPDATE) {
            d = b.addRawObject(b.updatedObjects, a);
            if (a.legType === TimesSquare.model.IdFactory.TYPE.LEG || a.legType === TimesSquare.model.IdFactory.TYPE.CHECK) {
                if (!Ext.isEmpty(a.oldRegistration, !0)) {
                    a.legDetail.schedule.rotationIdentifier.registration = a.oldRegistration
                }
                if (a.oldIdentifier) {
                    a.identifier = a.oldIdentifier
                }
                if (a.oldEventType === 'ACTUAL' && a.eventType === 'SCHEDULED') {
                    a.eventType = a.oldEventType;
                    a.layoutActual = a.layoutSchedule;
                    a.legDetail.actuals = {
                        offblockTime: {
                            value: undefined
                        },
                        onblockTime: {
                            value: undefined
                        }
                    };
                    c = b.addRawObject(b.deletedObjects, a)
                } else {
                    if (!Ext.isEmpty(a.oldRegistration, !0) || a.oldIdentifier) {
                        c = b.addRawObject(b.deletedObjects, a)
                    }
                }
                if (c && d) {
                    d.original = c
                }
            }
        } else {
            if (a.notificationType === b.self.TYPE.DELETE) {
                b.addRawObject(b.deletedObjects, a)
            } else {
                if (a.notificationType === b.self.TYPE.MESSAGE) {
                    b.addMessage(a)
                } else {
                    if (a.notificationType === b.self.type.NEW_AIRCRAFT) {
                        b.newAircrafts.push(a)
                    }
                }
            }
        }
    },
    getStateContainer: function(d, e) {
        var a = this,
            c, b;
        if (e === TimesSquare.model.IdFactory.TYPE.LEG) {
            b = 'TimesSquare.model.gantt.Leg'
        } else {
            if (e === TimesSquare.model.IdFactory.TYPE.CHECK) {
                b = 'TimesSquare.model.gantt.Check'
            }
        }
        c = a.getStateContainerFromArray(a.deletedObjects, d, b, a.self.TYPE.DELETE);
        if (c) {
            if (a.updatedObjects.length) {
                return a.getStateContainerFromArray(a.updatedObjects, null, b, a.self.TYPE.UPDATE)
            }
            return c
        }
        return a.getStateContainerFromArray(a.updatedObjects, d, b, a.self.TYPE.UPDATE)
    },
    getStateContainerFromArray: function(b, c, d, e) {
        var a;
        for (a = 0; a < b.length; a += 1) {
            if (b[a].$className === d) {
                if (!c || b[a].getNaturalId() === c) {
                    return {
                        state: e,
                        o: b[a]
                    }
                }
            }
        }
    },
    getUpdatedObjects: function() {
        return this.updatedObjects
    },
    getDeletedObjects: function() {
        return this.deletedObjects
    },
    getMessages: function() {
        return this.messages
    },
    getNewAircrafts: function() {
        return this.newAircrafts
    },
    hasChanges: function() {
        return this.updatedObjects.length > 0 || this.deletedObjects.length > 0 || this.newAircrafts.length > 0
    },
    hasMessages: function() {
        return this.messages.length > 0
    },
    addRawObject: function(c, a) {
        var b;
        if (!Ext.isArray(a)) {
            a = [a]
        }
        b = TimesSquare.store.gantt.Events.transformEvents(a);
        Ext.Array.push(c, b);
        return b[0]
    },
    addMessage: function(a) {
        this.messages.push(a)
    },
    clearChanges: function() {
        this.updatedObjects = [];
        this.deletedObjects = []
    }
}, 1, 0, 0, 0, 0, 0, [TimesSquare.classes, 'MessageEvent'], 0);
Ext.cmd.derive('TimesSquare.controller.Messaging', messaging.ActiveMQ, {
    url: TimesSquare.CONFIG.application.urls.AMQUrlPrefix,
    destination: 'topic://netline/ops/jms/topic/REST_NOTIFICATION_OUT',
    consumeNextTimeout: TimesSquare.CONFIG.application.hornetQueue.consumeNextTimeout,
    normalTimeout: TimesSquare.CONFIG.application.hornetQueue.normalTimeout,
    waitForNextUpdateTimeout: TimesSquare.CONFIG.application.hornetQueue.waitForNextUpdateTimeout,
    maxWaitForUpdatesTimeout: TimesSquare.CONFIG.application.hornetQueue.maxWaitForUpdatesTimeout,
    messageEvents: null,
    collectedMessageEvents: Ext.create('TimesSquare.classes.MessageEvent'),
    updateStores: function(b) {
        var c = this,
            a = Ext.decode(b);
        if (a) {
            c.collectUpdates(a)
        }
    },
    _waitForNextUpdateTimeout: null,
    _maxWaitForUpdatesTimeout: null,
    collectUpdates: function(c) {
        var a = this,
            b;
        b = Ext.create('TimesSquare.classes.MessageEvent', {
            data: c
        });
        if (b.hasMessages()) {
            a.displayMessages(b.getMessages())
        }
        if (!b.hasChanges()) {
            b.destroy();
            return
        }
        if (!a.messageEvents) {
            a.messageEvents = []
        }
        a.messageEvents.push(b);
        a.collectedMessageEvents.consumeMessages(c);
        Ext.log.info('[HQ] Update cames from the server. (Re)start timeouts.');
        window.clearTimeout(a._waitForNextUpdateTimeout);
        a._waitForNextUpdateTimeout = Ext.defer(a.sendUpdates, a.waitForNextUpdateTimeout, a);
        if (!a._maxWaitForUpdatesTimeout) {
            a._maxWaitForUpdatesTimeout = Ext.defer(a.sendUpdates, a.maxWaitForUpdatesTimeout, a)
        }
    },
    sendUpdates: function() {
        var a = this,
            b;
        if (!a.messageEvents) {
            return
        }
        Ext.log.info('[HQ] Apply updates...');
        a.clearUpdateTimeouts();
        a.fireEvent('opsdatachanged', a.messageEvents);
        for (b in a.messageEvents) {
            if (a.messageEvents.hasOwnProperty(b)) {
                a.messageEvents[b].destroy()
            }
        }
        a.messageEvents = null
    },
    clearUpdateTimeouts: function() {
        var a = this;
        window.clearTimeout(a._waitForNextUpdateTimeout);
        window.clearTimeout(a._maxWaitForUpdatesTimeout);
        a._waitForNextUpdateTimeout = null;
        a._maxWaitForUpdatesTimeout = null
    },
    stop: function() {
        var a = this;
        Ext.log.info('[HQ] Stop Messaging');
        a.clearUpdateTimeouts();
        messaging.ActiveMQ.prototype.stop.apply(this, arguments)
    },
    start: function(a) {
        var b = this;
        Ext.log.info('[HQ] Start Messaging. Selector: ' + a);
        b.applySettings(a);
        messaging.ActiveMQ.prototype.start.apply(this, arguments)
    },
    applySettings: function(c) {
        var b = this,
            a = b.getController('gantt.Gantt').parameterList;
        b.selector = c || '';
        if (!a) {
            return
        }
        if (!Ext.isEmpty(a.WAIT_FOR_NEXT_UPDATE_TIMEOUT)) {
            b.waitForNextUpdateTimeout = a.WAIT_FOR_NEXT_UPDATE_TIMEOUT * 1
        }
        if (!Ext.isEmpty(a.MAX_WAIT_FOR_UPDATES_TIMEOUT)) {
            b.maxWaitForUpdatesTimeout = a.MAX_WAIT_FOR_UPDATES_TIMEOUT * 1
        }
    },
    restartWithTimeout: function() {
        var a = this,
            b = a.subscriptionId;
        window.setTimeout(function() {
            if (b !== a.subscriptionId || !a.run) {
                return
            }
            a.showOutOfSyncMessage()
        }, 100)
    },
    showOutOfSyncMessage: function() {
        var a = this;
        a.stop(!0);
        Ext.log.info('Show Out of sync message');
        Ext.Msg.show({
            title: 'Out of sync',
            msg: ['The Gantt chart is out of sync due to network or server error.', '', 'Would you like to reload the Gantt chart?'].join('<br>'),
            buttons: Ext.Msg.OKCANCEL,
            closable: !1,
            buttonText: {
                ok: '<b>Reload gantt chart</b>',
                cancel: 'Close gantt chart'
            },
            icon: Ext.Msg.WARNING,
            fn: a.outOfSyncCallback,
            scope: a
        })
    },
    outOfSyncCallback: function(c) {
        var d = this,
            a = d.getController('gantt.Gantt'),
            b = a.getGantt();
        if (c === 'cancel') {
            if (b) {
                b.close()
            }
            return
        }
        a.loadGantt()
    },
    consumeNext: function() {
        var a = this,
            b = a.subscriptionId,
            c = a.consumeNextTimeout,
            d = {
                clientId: a.clientId
            };
        if (!a.run || !a.url) {
            return
        }
        if (!a.oldSubscriptionId) {
            a.oldSubscriptionId = b
        }
        if (c) {
            d.timeout = c
        }
        a.connection.request({
            url: a.url,
            headers: {
                'Accept': 'application/json'
            },
            params: d,
            method: 'GET',
            timeout: c ? c + 11000 : a.normalTimeout,
            success: function(c) {
                var d;
                if ((b === a.subscriptionId || b === a.oldSubscriptionId) && a.run) {
                    a.oldSubscriptionId = 0;
                    d = c.getResponseHeader('x-server-id');
                    if (a.currentServerId !== d) {
                        Ext.log.error('[ActiveMQ] Message received with invalid serverId (' + d + ' instead of ' + a.currentServerId + '), restarting with timeout!');
                        a.restartWithTimeout();
                        return
                    }
                    try {
                        if (a.processResponseXML(c.responseXML, b)) {
                            return
                        }
                    } catch (e) {
                        try {
                            if (a.processResponseXML((new DOMParser()).parseFromString(c.responseText, 'text/xml'), b)) {
                                return
                            }
                            Ext.log.error(e.toString());
                            Ext.log.error('[ActiveMQ] Exception occured while parsing queue XML data (responseXML), restarting with timeout!')
                        } catch (f) {
                            Ext.log.error(f.toString());
                            Ext.log.error('[ActiveMQ] Exception occured while parsing queue XML data (DOMParser), restarting with timeout!')
                        }
                    }
                    a.restartWithTimeout()
                }
                a.oldSubscriptionId = 0
            },
            failure: function(c) {
                a.oldSubscriptionId = 0;
                if (b !== a.subscriptionId || !a.run) {
                    return
                }
                if (!c || !c.aborted) {
                    Ext.log.error('[ActiveMQ] Error occured while receiving queue message, restarting with timeout!')
                } else {
                    Ext.log.info('[ActiveMQ] Message receiving transaction is aborted normally, restarting with timeout.')
                }
                a.restartWithTimeout()
            }
        })
    },
    displayMessages: function(b) {
        var a = TimesSquare.view.common.MessageWindow;
        Ext.Array.each(b, function(c) {
            a.show({
                title: 'Message from Server',
                msg: [c.message].join('<br>'),
                buttons: Ext.Msg.OK,
                buttonText: {
                    ok: 'Close'
                }
            })
        })
    }
}, 0, 0, 0, 0, 0, 0, [TimesSquare.controller, 'Messaging'], 0);
Ext.cmd.derive('TimesSquare.classes.ParameterList', Ext.Base, {
    _map: undefined,
    constructor: function(a, b, c) {
        var d = this._map = {};
        if (Ext.isArray(a)) {
            Ext.Array.each(a, function(e) {
                d[e.key] = e.value
            })
        } else {
            if (Ext.isObject(a)) {
                this._map = a
            }
        }
        if (b) {
            return this.get(b, c)
        }
    },
    get: function(b, e) {
        var d = this._map,
            c, a;
        if (this._map.hasOwnProperty(b)) {
            return d[b]
        }
        c = this.self;
        a = {};
        Ext.Object.each(d, function(c, d) {
            if (c.match(b)) {
                c = c.replace(b, '').replace(/^\./, '');
                a[c] = d
            }
        });
        if (!e) {
            a = new c(a)
        }
        return a
    }
}, 1, 0, 0, 0, 0, 0, [TimesSquare.classes, 'ParameterList'], 0);
Ext.cmd.derive('TimesSquare.model.details.Leg', Ext.data.Model, {
    proxy: {
        type: 'rest',
        appendId: !1,
        reader: {
            type: 'json',
            rootProperty: 'result'
        }
    },
    getCrewDetailUrl: function() {
        var a = this.get('hyperMedia'),
            b = a && a.urlCrewDetail;
        return b
    },
    getFlightLogUrl: function() {
        var a = this.get('hyperMedia'),
            b = a && a.urlFlightlog || null;
        return b
    },
    fields: [{
        name: 'hyperMedia',
        type: 'auto'
    }, {
        name: 'naturalId',
        type: 'auto',
        mapping: 'identifier',
        convert: function(a) {
            return a && TimesSquare.model.IdFactory.getEventNaturalIdString(a)
        }
    }, {
        name: 'flight',
        type: 'auto',
        mapping: 'identifier.natKey.flight',
        convert: function(a) {
            if (!a) {
                return a
            }
            var b = '';
            if (a.fnSuffix) {
                b = a.fnSuffix
            }
            return a.fnCarrier + a.fnNumber + b
        }
    }, {
        name: 'flightDoo',
        type: 'date',
        dateFormat: 'c',
        mapping: 'identifier.natKey.dayOfOrigin'
    }, {
        name: 'ldoOffset',
        type: 'auto',
        mapping: 'legDetail.schedule.ldoOffset'
    }, {
        name: 'flightLdo',
        type: 'date',
        mapping: 'identifier.natKey.dayOfOrigin',
        convert: function(a, b) {
            a = Ext.Date.parse(a, 'c');
            if (a && b.data.ldoOffset) {
                a = Ext.Date.add(a, Ext.Date.DAY, b.data.ldoOffset)
            }
            return a
        }
    }, {
        name: 'callSign',
        type: 'string',
        mapping: 'callsign'
    }, {
        name: 'serviceType',
        type: 'string',
        mapping: 'legDetail.schedule.serviceType'
    }, {
        name: 'problem',
        type: 'string'
    }, {
        name: 'departureAirport',
        type: 'string',
        mapping: 'legDetail.schedule.departureAirport'
    }, {
        name: 'departure',
        type: 'date',
        dateFormat: 'c',
        mapping: 'legDetail.schedule.departure'
    }, {
        name: 'arrivalAirport',
        type: 'string',
        mapping: 'legDetail.schedule.arrivalAirport'
    }, {
        name: 'arrival',
        type: 'date',
        dateFormat: 'c',
        mapping: 'legDetail.schedule.arrival'
    }, {
        name: 'localDeparture',
        type: 'date',
        dateFormat: 'c',
        mapping: 'depTimeLocalAtAirport'
    }, {
        name: 'bestDepartureTime',
        type: 'date',
        dateFormat: 'c',
        mapping: 'bestDepTime'
    }, {
        name: 'localArrival',
        type: 'date',
        dateFormat: 'c',
        mapping: 'arrTimeLocalAtAirport'
    }, {
        name: 'bestArrivalTime',
        type: 'date',
        dateFormat: 'c',
        mapping: 'bestArrTime'
    }, {
        name: 'aircraftOwner',
        type: 'string',
        mapping: 'legDetail.schedule.aircraftOwner'
    }, {
        name: 'aircraftSubtype',
        type: 'string',
        mapping: 'legDetail.schedule.aircraftSubtype'
    }, {
        name: 'rotation',
        type: 'string',
        mapping: 'rotation'
    }, {
        name: 'registration',
        type: 'string',
        mapping: 'legDetail.schedule.rotationIdentifier.registration'
    }, {
        name: 'aircraftConfiguration',
        type: 'string',
        mapping: 'legDetail.schedule.aircraftConfiguration'
    }, {
        name: 'prbd',
        type: 'string'
    }, {
        name: 'employerCockpit',
        type: 'string',
        mapping: 'legDetail.schedule.employerCockpit'
    }, {
        name: 'employerCabin',
        type: 'string',
        mapping: 'legDetail.schedule.employerCabin'
    }, {
        name: 'operatingCarrier',
        type: 'string'
    }, {
        name: 'commercialCarrier',
        type: 'string'
    }, {
        name: 'dispatchOffice',
        type: 'string'
    }, {
        name: 'jointOperator',
        type: 'auto'
    }, {
        name: 'changeReason',
        type: 'auto',
        mapping: 'legDetail.changeInfo.changeReason',
        convert: function(a) {
            if (Ext.isArray(a)) {
                return a.join(',')
            }
            return a
        }
    }, {
        name: 'initialSubtype',
        type: 'string'
    }, {
        name: 'actualFrom',
        type: 'string',
        mapping: 'actualDepartureAirport'
    }, {
        name: 'adviseTime',
        type: 'date',
        dateFormat: 'c',
        mapping: 'legDetail.actuals.adviseTime'
    }, {
        name: 'taxiOut',
        type: 'string',
        mapping: 'taxiOutTime',
        convert: function(a) {
            return a && Ext.util.Format.durationRenderer(a)
        }
    }, {
        name: 'estimatedTimeDeparture',
        type: 'date',
        dateFormat: 'c',
        mapping: 'legDetail.actuals.estimatedTimeDeparture.value'
    }, {
        name: 'mvtEstimatedTakeOffTime',
        type: 'date',
        dateFormat: 'c',
        mapping: 'mvtEstimatedTakeOffTime'
    }, {
        name: 'airborneTime',
        type: 'date',
        dateFormat: 'c',
        mapping: 'legDetail.actuals.airborneTime.value'
    }, {
        name: 'offblockTime',
        type: 'date',
        dateFormat: 'c',
        mapping: 'legDetail.actuals.offblockTime.value'
    }, {
        name: 'mvtAfterPushbackTime',
        type: 'date',
        dateFormat: 'c',
        mapping: 'legDetail.actuals.mvtAfterPushbackTime'
    }, {
        name: 'delay',
        type: 'auto',
        mapping: 'legDetail.actuals.delay',
        convert: function(a) {
            var b;
            if (a && a.length) {
                for (b = 0; b < a.length; b += 1) {
                    a[b].delayTime = Ext.util.Format.delayDurationRenderer(a[b].delayTime)
                }
            }
            return a
        }
    }, {
        name: 'toDelayCode',
        type: 'string',
        mapping: 'toDelayCode'
    }, {
        name: 'toDelayTime',
        type: 'string',
        mapping: 'toDelayTime',
        convert: function(a) {
            return a && Ext.util.Format.delayDurationRenderer(a)
        }
    }, {
        name: 'depStand',
        type: 'string',
        mapping: 'legDetail.misc.depStand'
    }, {
        name: 'depGate',
        type: 'string',
        mapping: 'legDetail.misc.depGate'
    }, {
        name: 'isk',
        type: 'boolean',
        mapping: 'isk'
    }, {
        name: 'actualTo',
        type: 'string',
        mapping: 'actualArrivalAirport'
    }, {
        name: 'eet',
        type: 'string',
        mapping: 'estimatedEnrouteTime',
        convert: function(a) {
            return a && Ext.util.Format.durationRenderer(a)
        }
    }, {
        name: 'taxiIn',
        type: 'string',
        mapping: 'taxiInTime',
        convert: function(a) {
            return a && Ext.util.Format.durationRenderer(a)
        }
    }, {
        name: 'mvtEstimatedTouchdownTime',
        type: 'date',
        dateFormat: 'c'
    }, {
        name: 'estimatedTimeArrival',
        type: 'date',
        dateFormat: 'c',
        mapping: 'legDetail.actuals.estimatedTimeArrival'
    }, {
        name: 'landingTime',
        type: 'date',
        dateFormat: 'c',
        mapping: 'legDetail.actuals.landingTime.value'
    }, {
        name: 'onblockTime',
        type: 'date',
        dateFormat: 'c',
        mapping: 'legDetail.actuals.onblockTime.value'
    }, {
        name: 'arrStand',
        type: 'string',
        mapping: 'legDetail.misc.arrStand'
    }, {
        name: 'arrGate',
        type: 'string',
        mapping: 'legDetail.misc.arrGate'
    }, {
        name: 'diversionReason',
        type: 'string',
        mapping: 'legDetail.changeInfo.diversionReason'
    }, {
        name: 'cycles',
        type: 'string',
        mapping: 'legDetail.performance.cycles'
    }, {
        name: 'flightHours',
        type: 'auto',
        mapping: 'legDetail.performance.flightHours',
        convert: function(a) {
            return a && Ext.util.Format.durationRenderer(a)
        }
    }, {
        name: 'internalRemark',
        type: 'auto',
        mapping: 'internalRemark',
        defaultValue: null,
        allowNull: !0
    }, {
        name: 'opsRemark',
        type: 'string',
        mapping: 'opsRemark'
    }, {
        name: 'userMarkers',
        type: 'auto',
        mapping: 'userMarkers',
        convert: function(a) {
            return Ext.Array.map(a || [], function(b) {
                return TimesSquare.model.gantt.UserMarker.create(b)
            })
        }
    }, {
        name: 'acarsFrom',
        type: 'string',
        mapping: 'actualDepartureAirport'
    }, {
        name: 'acarsState',
        type: 'string',
        mapping: 'acarsState'
    }, {
        name: 'acarsInit',
        type: 'date',
        dateFormat: 'c'
    }, {
        name: 'acarsDoorsClosed',
        type: 'date',
        dateFormat: 'c'
    }, {
        name: 'acarsEstimatedTimeDeparture',
        type: 'date',
        dateFormat: 'c',
        mapping: 'acars.estimatedTimeDeparture'
    }, {
        name: 'acarsEstimatedTakeOffTime',
        type: 'date',
        dateFormat: 'c'
    }, {
        name: 'acarsOffblockTime',
        type: 'date',
        dateFormat: 'c',
        mapping: 'acars.offblockTime.value'
    }, {
        name: 'acarsAirborneTime',
        type: 'date',
        dateFormat: 'c',
        mapping: 'acars.airborneTime.value'
    }, {
        name: 'acarsTo',
        type: 'string',
        mapping: 'actualArrivalAirport'
    }, {
        name: 'acarsEstimatedTouchdownTime',
        type: 'date',
        dateFormat: 'c'
    }, {
        name: 'acarsEstimatedTimeArrival',
        type: 'date',
        dateFormat: 'c',
        mapping: 'acars.estimatedTimeArrival'
    }, {
        name: 'acarsLandingTime',
        type: 'date',
        dateFormat: 'c',
        mapping: 'acars.landingTime.value'
    }, {
        name: 'acarsOnblockTime',
        type: 'date',
        dateFormat: 'c',
        mapping: 'acars.onblockTime.value'
    }, {
        name: 'state',
        type: 'string',
        mapping: 'legDetail.state',
        convert: function(b, a) {
            if (a.get('isk')) {
                return 'ISK'
            }
            return b
        }
    }]
}, 0, 0, 0, 0, 0, 0, [TimesSquare.model.details, 'Leg'], 0);
Ext.cmd.derive('Alf.data.proxy.AlfRest', Ext.data.proxy.Rest, {
    actionMethods: {
        create: 'POST',
        read: 'POST',
        update: 'PUT',
        destroy: 'DELETE'
    },
    pageParam: undefined,
    applyEncoding: function(a) {
        return a
    },
    getMethod: function(a) {
        var b = this.actionMethods[a.getAction()],
            c = a.getOperation();
        if (c.action === 'read' && c.getId()) {
            b = 'GET'
        }
        return b
    },
    buildRequest: function(a) {
        if (a.action !== 'read' || a.getId()) {
            return Ext.data.proxy.Rest.prototype.buildRequest.apply(this, arguments)
        }
        var d = this,
            c = Ext.applyIf(a.params || {}, d.extraParams || {}),
            b;
        c = Ext.applyIf(c, d.getParams(a));
        if (a.getId() !== undefined && c.id === undefined) {
            c.id = a.id
        }
        b = new Ext.data.Request({
            jsonData: c,
            action: a.action,
            records: a.records,
            operation: a,
            url: a.url,
            disableCaching: !0,
            proxy: d
        });
        b.url = d.buildUrl(b);
        a.request = b;
        return b
    }
}, 0, 0, 0, 0, ['proxy.alfrest'], 0, [Alf.data.proxy, 'AlfRest'], 0);
Ext.cmd.derive('TimesSquare.model.searchleg.Leg', TimesSquare.model.details.Leg, {
    proxy: {
        type: 'alfrest',
        url: '/NetLine/oss/searchLeg',
        pageParam: undefined,
        sortParam: undefined,
        limitParam: 'pageSize',
        opsId: 'searchleg',
        reader: {
            type: 'json',
            rootProperty: 'result.listLegDetailShorts',
            totalProperty: 'result.total'
        }
    }
}, 0, 0, 0, 0, 0, 0, [TimesSquare.model.searchleg, 'Leg'], 0);
Ext.cmd.derive('TimesSquare.store.common.Lovs', Ext.data.Store, {
    fields: [{
        name: 'key'
    }, {
        name: 'value'
    }],
    remoteFilter: !1,
    proxy: 'memory',
    statics: {
        getMemoryStore: function(b) {
            var c, a = TimesSquare.CONFIG && TimesSquare.CONFIG.listOfValues;
            if (!a || !a[b]) {
                Ext.Error.raise('List of values not found: ' + b)
            }
            c = this.create({
                data: a[b]
            });
            return c
        },
        getRestStore: function(d, c, a) {
            var b = this.create();
            c = c || 'result';
            b.setProxy({
                type: 'rest',
                url: d,
                reader: {
                    type: 'json',
                    rootProperty: c
                }
            });
            if (a && a.excludeOptions && a.excludeOptions.length && a.excludeKey) {
                b.addLovFilter(a.excludeKey, a.excludeOptions)
            }
            return b
        }
    },
    setCache: function(b) {
        var a = this;
        if (b) {
            a.loadData(b)
        }
        a.on('beforeload', function(a) {
            return !a.getCount()
        });
        return a
    },
    addLovFilter: function(c, b) {
        var a = this;
        a.filterOnLoad = !0;
        a.addFilter([function(a) {
            return Ext.Array.indexOf(b, a.data[c]) === -1
        }], !1)
    }
}, 0, 0, 0, 0, 0, 0, [TimesSquare.store.common, 'Lovs'], 0);
Ext.cmd.derive('TimesSquare.store.searchleg.Legs', Ext.data.Store, {
    model: 'TimesSquare.model.searchleg.Leg',
    pageSize: 100,
    autoLoad: !1,
    remoteStore: !0,
    remoteSort: !1,
    abortRequest: function() {
        var d = this,
            c = !1,
            b = Ext.Ajax.requests,
            a;
        if (!Ext.isObject(b)) {
            return !1
        }
        Ext.Object.each(b, function(e, b) {
            a = b && b.options && b.options.proxy && b.options.proxy.opsId;
            if (!a) {
                return !0
            }
            if (a === d.proxy.opsId) {
                Ext.Ajax.abort(b);
                c = !0;
                return !1
            }
        });
        return c
    }
}, 0, 0, 0, 0, 0, 0, [TimesSquare.store.searchleg, 'Legs'], 0);
Ext.cmd.derive('TimesSquare.view.common.SearchLegDateField', Ext.form.field.Date, {
    clearable: !0,
    sisterFieldName: '',
    sisterField: null,
    submitFormat: 'Y-m-d\\TH:i:s',
    initComponent: function() {
        var a = this;
        a.addBehaviours();
        Ext.form.field.Date.prototype.initComponent.apply(this, arguments)
    },
    addBehaviours: function() {
        var a = this;
        if (a.clearable) {
            a.trigger2Cls = 'x-form-clear-trigger';
            a.onTrigger2Click = a.onClearClick
        }
        if (a.sisterFieldName) {
            a.initRelation()
        }
    },
    onClearClick: function() {
        this.setValue(null);
        this.fireEvent('select', this, !1)
    },
    initRelation: function() {
        var a = this;
        a.on('afterrender', function() {
            var b = a.getSisterField();
            if (!b) {
                return
            }
            a.on('select', a.onBrotherSelect)
        })
    },
    onBrotherSelect: function(e, b) {
        var d = this,
            a = d.getSisterField(),
            c;
        if (!a || !a.setMinValue) {
            return
        }
        c = Ext.form.field.VTypes;
        if (b && !c.searchLegDate(b, e)) {
            a.setValue(null);
            d.clearInvalid()
        }
        a.setMinValue(b)
    },
    getSisterField: function() {
        var a = this,
            b;
        if (a.sisterField) {
            return a.sisterField
        }
        b = a.up('form') || a.up('panel');
        a.sisterField = b && b.down('[name=' + a.sisterFieldName + ']');
        return a.sisterField
    }
}, 0, ['searchleg_datefield'], ['component', 'box', 'field', 'textfield', 'pickerfield', 'datefield', 'searchleg_datefield'], {
    'component': !0,
    'box': !0,
    'field': !0,
    'textfield': !0,
    'pickerfield': !0,
    'datefield': !0,
    'searchleg_datefield': !0
}, ['widget.searchleg_datefield'], 0, [TimesSquare.view.common, 'SearchLegDateField'], 0);
Ext.cmd.derive('TimesSquare.view.common.LovCombo', Ext.form.field.ComboBox, {
    fieldLabel: '',
    name: '',
    forceSelection: !0,
    editable: !1,
    displayField: 'key',
    valueField: 'value',
    emptyText: '(none)',
    triggers: {
        clear: {
            cls: 'x-form-clear-trigger',
            handler: 'clearValue'
        }
    },
    initComponent: function() {
        var a = this;
        if (!a.store) {
            a.initLovStore()
        }
        Ext.form.field.ComboBox.prototype.initComponent.call(this)
    },
    excludeOptions: [],
    initLovStore: function() {
        var a = this,
            b;
        if (a.lovName) {
            a.store = TimesSquare.store.common.Lovs.getMemoryStore(a.lovName);
            a.queryMode = 'local';
            return
        }
        if (a.restUrl) {
            if (a.excludeOptions.length) {
                b = {
                    excludeOptions: a.excludeOptions,
                    excludeKey: 'value'
                }
            }
            a.store = TimesSquare.store.common.Lovs.getRestStore(a.restUrl, a.root, b);
            a.queryMode = 'remote';
            return
        }
    }
}, 0, ['lovcombo'], ['component', 'box', 'field', 'textfield', 'pickerfield', 'combobox', 'combo', 'lovcombo'], {
    'component': !0,
    'box': !0,
    'field': !0,
    'textfield': !0,
    'pickerfield': !0,
    'combobox': !0,
    'combo': !0,
    'lovcombo': !0
}, ['widget.lovcombo'], 0, [TimesSquare.view.common, 'LovCombo'], 0);
Ext.cmd.derive('TimesSquare.view.searchleg.Operators', TimesSquare.view.common.LovCombo, {
    value: '',
    initComponent: function() {
        var b = this,
            a = b.value;
        TimesSquare.view.common.LovCombo.prototype.initComponent.apply(this, arguments);
        if (a) {
            b.setValue(a)
        }
    }
}, 0, ['searchleg_operators'], ['component', 'box', 'field', 'textfield', 'pickerfield', 'combobox', 'combo', 'lovcombo', 'searchleg_operators'], {
    'component': !0,
    'box': !0,
    'field': !0,
    'textfield': !0,
    'pickerfield': !0,
    'combobox': !0,
    'combo': !0,
    'lovcombo': !0,
    'searchleg_operators': !0
}, ['widget.searchleg_operators'], 0, [TimesSquare.view.searchleg, 'Operators'], 0);
Ext.cmd.derive('TimesSquare.mixin.FieldSizeMixin', Ext.Base, {
    mxCreateItems: function() {
        var b = this,
            a = TimesSquare.CONFIG.detailViewFieldSize,
            f = a.smallField,
            c = a.mediumField,
            e = a.largeField,
            g = a.margin,
            d = a.labelStyle;
        if (b.createItems) {
            b.createItems(f, c, e, g, d)
        }
    }
}, 0, 0, 0, 0, 0, 0, [TimesSquare.mixin, 'FieldSizeMixin'], 0);
Ext.cmd.derive('TimesSquare.view.searchleg.Search', Ext.form.Panel, {
    border: !1,
    layout: {
        type: 'table',
        columns: 8
    },
    initComponent: function() {
        var a = this;
        a.mxCreateItems();
        Ext.form.Panel.prototype.initComponent.apply(this, arguments)
    },
    getRequestObject: function() {
        var c = this,
            b = {},
            a = c.getForm().getValues();
        Ext.merge(b, c.convertToStringList('flight', a.flightOp, a.flightValue));
        Ext.merge(b, c.convertToDateRange('doo', a.dooStartOp, a.dooStartValue, a.dooEndValue));
        Ext.merge(b, c.convertToDateRange('ldo', a.ldoStartOp, a.ldoStartValue, a.ldoEndValue));
        Ext.merge(b, c.convertToStringList('dep', a.depOp, a.depValue));
        Ext.merge(b, c.convertToDateRange('depDate', a.depDateStartOp, a.depDateStartValue, a.depDateEndValue));
        Ext.merge(b, c.convertToStringList('arr', a.arrOp, a.arrValue));
        Ext.merge(b, c.convertToDateRange('arrDate', a.arrDateStartOp, a.arrDateStartValue, a.arrDateEndValue));
        Ext.merge(b, c.convertToObject('state', a.stateOp, a.stateValue));
        Ext.merge(b, c.convertToObject('serviceType', a.serviceTypeOp, a.serviceTypeValue));
        Ext.merge(b, c.convertToStringList('owner', a.ownerOp, a.ownerValue));
        Ext.merge(b, c.convertToStringList('subtype', a.subtypeOp, a.subtypeValue));
        Ext.merge(b, c.convertToStringList('registration', a.registrationOp, a.registrationValue));
        return b
    },
    convertToStringList: function(b, d, c) {
        var a = this.convertToObject(b, d, c);
        if (a && a[b] && a[b].value) {
            a[b].values = a[b].value.split(/\s*,\s*/);
            delete a[b].value
        }
        return a
    },
    convertToDateRange: function(c, b, e, f) {
        var d = this,
            a = {};
        Ext.merge(a, d.convertToObject(c, b, e, 'startOperation', 'startValue'));
        Ext.merge(a, d.convertToObject(c, b, f, 'endOperation', 'endValue'));
        return a
    },
    convertToObject: function(b, d, c, e, g) {
        var a = {},
            f = e || 'operation',
            h = g || 'value';
        if (!Ext.isEmpty(d)) {
            if (!Ext.isEmpty(c)) {
                a[b] = {};
                a[b][f] = d;
                a[b][h] = c
            }
        }
        return a
    },
    createItems: function(f, i, a, j) {
        var d = this,
            e = TimesSquare.CONFIG.expressionOperationList,
            g = '/NetLine/oss/findAllCompactParameters',
            h = 'result.expressionOperationList',
            c = TimesSquare.store.common.Lovs.getRestStore(g, h).setCache(e),
            b = TimesSquare.store.common.Lovs.getRestStore(g, h, {
                excludeOptions: ['CONTAINS', 'NOT_CONTAINS', 'IN_LIST', 'NOT_IN_LIST'],
                excludeKey: 'value'
            }).setCache(e);
        d.defaults = {
            margin: j
        };
        d.items = [{
            xtype: 'label',
            text: 'Flight'
        }, {
            xtype: 'searchleg_operators',
            store: c,
            width: a,
            name: 'flightOp',
            cls: 'test-id-searchleg-search-flightOp',
            value: 'EQUAL'
        }, {
            xtype: 'textfield',
            upperCase: !0,
            fieldLabel: '',
            width: a,
            name: 'flightValue',
            colspan: 2,
            cls: 'test-id-searchleg-search-flightValue'
        }, {
            xtype: 'box',
            colspan: 4
        }, {
            xtype: 'label',
            text: 'DOO'
        }, {
            xtype: 'searchleg_operators',
            store: b,
            width: a,
            group: 'doo',
            role: 'operator',
            name: 'dooStartOp',
            cls: 'test-id-searchleg-search-dooStartOp',
            value: 'EQUAL'
        }, {
            xtype: 'searchleg_datefield',
            sisterFieldName: 'dooEndValue',
            vtype: 'searchLegDate',
            fieldLabel: '',
            group: 'doo',
            role: 'start',
            name: 'dooStartValue',
            colspan: 2,
            width: a,
            cls: 'test-id-searchleg-search-dooStartValue'
        }, {
            xtype: 'searchleg_datefield',
            width: a,
            fieldLabel: '',
            group: 'doo',
            role: 'end',
            name: 'dooEndValue',
            enableKeyEvents: !0,
            colspan: 4,
            cls: 'test-id-searchleg-search-dooEndValue'
        }];
        if (TimesSquare.CONFIG.localDoo) {
            d.items.push({
                xtype: 'label',
                text: 'LDO'
            }, {
                xtype: 'searchleg_operators',
                store: b,
                width: a,
                group: 'ldo',
                role: 'operator',
                name: 'ldoStartOp',
                cls: 'test-id-searchleg-search-ldoStartOp',
                value: 'EQUAL'
            }, {
                xtype: 'searchleg_datefield',
                sisterFieldName: 'ldoEndValue',
                vtype: 'searchLegDate',
                fieldLabel: '',
                group: 'ldo',
                role: 'start',
                name: 'ldoStartValue',
                colspan: 2,
                width: a,
                cls: 'test-id-searchleg-search-ldoStartValue'
            }, {
                xtype: 'searchleg_datefield',
                width: a,
                fieldLabel: '',
                group: 'ldo',
                role: 'end',
                name: 'ldoEndValue',
                enableKeyEvents: !0,
                colspan: 3,
                cls: 'test-id-searchleg-search-ldoEndValue'
            })
        }
        d.items.push({
            xtype: 'label',
            text: 'Dep'
        }, {
            xtype: 'searchleg_operators',
            store: c,
            width: a,
            name: 'depOp',
            cls: 'test-id-searchleg-search-depOp',
            value: 'EQUAL'
        }, {
            xtype: 'textfield',
            upperCase: !0,
            fieldLabel: '',
            width: f,
            name: 'depValue',
            cls: 'test-id-searchleg-search-depValue'
        }, {
            xtype: 'label',
            text: 'Dep Date'
        }, {
            xtype: 'searchleg_operators',
            store: b,
            width: a,
            group: 'depDate',
            role: 'operator',
            name: 'depDateStartOp',
            cls: 'test-id-searchleg-search-depDateStartOp',
            value: 'EQUAL'
        }, {
            xtype: 'searchleg_datefield',
            width: a,
            sisterFieldName: 'depDateEndValue',
            fieldLabel: '',
            group: 'depDate',
            role: 'start',
            name: 'depDateStartValue',
            cls: 'test-id-searchleg-search-depDateStartValue'
        }, {
            xtype: 'searchleg_datefield',
            width: a,
            fieldLabel: '',
            group: 'depDate',
            role: 'end',
            name: 'depDateEndValue',
            enableKeyEvents: !0,
            colspan: 3,
            cls: 'test-id-searchleg-search-depDateEndValue'
        }, {
            xtype: 'label',
            text: 'Arr'
        }, {
            xtype: 'searchleg_operators',
            store: c,
            width: a,
            name: 'arrOp',
            cls: 'test-id-searchleg-search-arrOp',
            value: 'EQUAL'
        }, {
            xtype: 'textfield',
            upperCase: !0,
            fieldLabel: '',
            width: f,
            name: 'arrValue',
            cls: 'test-id-searchleg-search-arrValue'
        }, {
            xtype: 'label',
            text: 'Arr Date'
        }, {
            xtype: 'searchleg_operators',
            store: b,
            width: a,
            group: 'arrDate',
            role: 'operator',
            name: 'arrDateStartOp',
            cls: 'test-id-searchleg-search-arrDateStartOp',
            value: 'EQUAL'
        }, {
            xtype: 'searchleg_datefield',
            width: a,
            sisterFieldName: 'arrDateEndValue',
            fieldLabel: '',
            group: 'arrDate',
            role: 'start',
            name: 'arrDateStartValue',
            cls: 'test-id-searchleg-search-arrDateStartValue'
        }, {
            xtype: 'searchleg_datefield',
            width: a,
            fieldLabel: '',
            group: 'arrDate',
            role: 'end',
            name: 'arrDateEndValue',
            enableKeyEvents: !0,
            colspan: 3,
            cls: 'test-id-searchleg-search-arrDateEndValue'
        }, {
            xtype: 'label',
            text: 'State'
        }, {
            xtype: 'searchleg_operators',
            store: b,
            width: a,
            name: 'stateOp',
            cls: 'test-id-searchleg-search-stateOp',
            value: 'EQUAL'
        }, {
            xtype: 'lovcombo',
            restUrl: '/NetLine/oss/findAllLegStates',
            root: 'result.listAllLegStates',
            name: 'stateValue',
            colspan: 2,
            width: a,
            cls: 'test-id-searchleg-search-stateValue'
        }, {
            xtype: 'box',
            colspan: 4
        }, {
            xtype: 'label',
            text: 'Service Type'
        }, {
            xtype: 'searchleg_operators',
            store: b,
            width: a,
            name: 'serviceTypeOp',
            cls: 'test-id-searchleg-search-serviceTypeOp',
            value: 'EQUAL'
        }, {
            xtype: 'lovcombo',
            valueField: 'key',
            restUrl: '/NetLine/oss/findAllLegServiceTypes',
            root: 'result.listAllServiceTypes',
            name: 'serviceTypeValue',
            colspan: 2,
            width: i,
            cls: 'test-id-searchleg-search-serviceTypeValue'
        }, {
            xtype: 'box',
            colspan: 4
        }, {
            xtype: 'label',
            text: 'Owner'
        }, {
            xtype: 'searchleg_operators',
            store: c,
            width: a,
            name: 'ownerOp',
            cls: 'test-id-searchleg-search-ownerOp',
            value: 'EQUAL'
        }, {
            xtype: 'textfield',
            upperCase: !0,
            fieldLabel: '',
            name: 'ownerValue',
            colspan: 2,
            width: a,
            cls: 'test-id-searchleg-search-ownerValue'
        }, {
            xtype: 'box',
            colspan: 4
        }, {
            xtype: 'label',
            text: 'Subtype'
        }, {
            xtype: 'searchleg_operators',
            store: c,
            width: a,
            name: 'subtypeOp',
            cls: 'test-id-searchleg-search-subtypeOp',
            value: 'EQUAL'
        }, {
            xtype: 'textfield',
            upperCase: !0,
            fieldLabel: '',
            name: 'subtypeValue',
            colspan: 2,
            width: a,
            cls: 'test-id-searchleg-search-subtypeValue'
        }, {
            xtype: 'box',
            colspan: 4
        }, {
            xtype: 'label',
            text: 'Registration'
        }, {
            xtype: 'searchleg_operators',
            store: c,
            width: a,
            name: 'registrationOp',
            cls: 'test-id-searchleg-search-registrationOp',
            value: 'EQUAL'
        }, {
            xtype: 'textfield',
            upperCase: !0,
            fieldLabel: '',
            name: 'registrationValue',
            colspan: 2,
            width: a,
            cls: 'test-id-searchleg-search-registrationValue'
        })
    }
}, 0, ['searchleg_search'], ['component', 'box', 'container', 'panel', 'form', 'searchleg_search'], {
    'component': !0,
    'box': !0,
    'container': !0,
    'panel': !0,
    'form': !0,
    'searchleg_search': !0
}, ['widget.searchleg_search'], [
    ['fieldSizeMixin', TimesSquare.mixin.FieldSizeMixin]
], [TimesSquare.view.searchleg, 'Search'], 0);
Ext.cmd.derive('TimesSquare.view.searchleg.Legs', Ext.grid.Panel, {
    loadLegs: function() {
        var b = this,
            a = b.getStore();
        a.loadPage(1)
    },
    initComponent: function() {
        var a = this,
            b = 'searchleg.Legs';
        a.columns = a.getGridColumns();
        a.store = b;
        a.dockedItems = [{
            xtype: 'pagingtoolbar',
            store: b,
            dock: 'bottom',
            displayInfo: !0
        }];
        a.viewConfig = {
            loadMask: !1
        };
        Ext.grid.Panel.prototype.initComponent.apply(this, arguments)
    },
    getGridColumns: function() {
        var b = 'dMy',
            a = 'dMy Hi';
        return {
            defaults: {
                type: 'string',
                flex: 1,
                menuDisabled: !0,
                sortable: !0,
                draggable: !0,
                hideable: !1,
                lockable: !1
            },
            items: [{
                header: 'Flight',
                dataIndex: 'flight'
            }, {
                xtype: 'datecolumn',
                header: 'DOO',
                format: b,
                dataIndex: 'flightDoo'
            }, {
                xtype: 'datecolumn',
                header: 'LDO',
                format: b,
                dataIndex: 'flightLdo',
                hidden: !TimesSquare.CONFIG.localDoo
            }, {
                header: 'Dep',
                dataIndex: 'departureAirport'
            }, {
                xtype: 'datecolumn',
                format: a,
                header: 'STD',
                dataIndex: 'departure'
            }, {
                header: 'Arr',
                dataIndex: 'arrivalAirport'
            }, {
                xtype: 'datecolumn',
                format: a,
                header: 'STA',
                dataIndex: 'arrival'
            }, {
                header: 'Act Arr',
                dataIndex: 'actualTo'
            }, {
                xtype: 'datecolumn',
                format: a,
                header: 'Act Arr Dt',
                dataIndex: 'landingTime'
            }, {
                header: 'Registration',
                dataIndex: 'registration'
            }]
        }
    }
}, 0, ['searchleg_legs'], ['component', 'box', 'container', 'panel', 'tablepanel', 'gridpanel', 'grid', 'searchleg_legs'], {
    'component': !0,
    'box': !0,
    'container': !0,
    'panel': !0,
    'tablepanel': !0,
    'gridpanel': !0,
    'grid': !0,
    'searchleg_legs': !0
}, ['widget.searchleg_legs'], 0, [TimesSquare.view.searchleg, 'Legs'], 0);
Ext.cmd.derive('TimesSquare.view.searchleg.SearchLeg', Ext.panel.Panel, {
    autoScroll: !0,
    border: !1,
    closable: !0,
    width: 910,
    title: 'Search Leg',
    initComponent: function() {
        var a = this;
        a.createDockedItems();
        a.createItems();
        Ext.panel.Panel.prototype.initComponent.apply(this, arguments)
    },
    createItems: function() {
        var a = this;
        a.items = [{
            xtype: 'container',
            id: 'searchleg_mask',
            padding: 10,
            items: [{
                xtype: 'searchleg_search'
            }, {
                xtype: 'searchleg_legs',
                margin: '20px 0 0 0'
            }]
        }]
    },
    createDockedItems: function() {
        var a = this;
        a.dockedItems = [{
            xtype: 'toolbar',
            items: [{
                text: '',
                clickEvent: 'mousedown',
                iconCls: 'icon-searchLeg',
                action: 'search'
            }, '-', {
                text: '',
                clickEvent: 'mousedown',
                iconCls: 'icon-stop',
                action: 'stopSearch',
                disabled: !0
            }]
        }]
    }
}, 0, ['searchleg_searchleg'], ['component', 'box', 'container', 'panel', 'searchleg_searchleg'], {
    'component': !0,
    'box': !0,
    'container': !0,
    'panel': !0,
    'searchleg_searchleg': !0
}, ['widget.searchleg_searchleg'], 0, [TimesSquare.view.searchleg, 'SearchLeg'], 0);
Ext.cmd.derive('TimesSquare.controller.SearchLeg', Ext.app.Controller, {
    stores: ['common.Lovs', 'searchleg.Legs'],
    models: ['TimesSquare.model.searchleg.Leg'],
    views: ['common.SearchLegDateField', 'common.LovCombo', 'searchleg.Operators', 'searchleg.Search', 'searchleg.Legs', 'searchleg.SearchLeg'],
    refs: [{
        ref: 'searchPanel',
        selector: 'searchleg_searchleg'
    }, {
        ref: 'filterForm',
        selector: 'searchleg_search'
    }, {
        ref: 'legGrid',
        selector: 'searchleg_legs'
    }, {
        ref: 'searchButton',
        selector: 'searchleg_searchleg button[action=search]'
    }, {
        ref: 'stopSearchButton',
        selector: 'searchleg_searchleg button[action=stopSearch]'
    }, {
        ref: 'searchMask',
        selector: '#searchleg_mask'
    }],
    init: function() {
        var a = this;
        a.listen({
            component: {
                'searchleg_searchleg button[action=search]': {
                    click: a.onSearchlegButtonClick
                },
                'searchleg_searchleg button[action=stopSearch]': {
                    click: a.onStopSearchButtonClick
                },
                'searchleg_searchleg [role=operator]': {
                    change: a.onGroupOperatorChange
                },
                'searchleg_searchleg [role=end]': {
                    change: a.onGroupEndChange,
                    keyup: a.onGroupEndChange
                },
                'searchleg_legs': {
                    itemdblclick: a.onLegDoubleClick
                }
            },
            store: {
                '#searchleg.Legs': {
                    beforeload: a.onLegsBeforeLoad,
                    load: a.onLegsLoad
                }
            }
        })
    },
    onLegsBeforeLoad: function(e) {
        var a = this,
            f = a.getFilterForm(),
            d = a.getSearchMask().getEl(),
            c = a.getSearchButton(),
            b = a.getStopSearchButton();
        d.mask('Searching...');
        b.setDisabled(!1);
        c.setDisabled(!0);
        e.proxy.extraParams = f.getRequestObject()
    },
    onGroupOperatorChange: function(b, a) {
        if (a !== 'BETWEEN') {
            this.getFilterForm().down('[group=' + b.group + '][role="end"]').setValue('')
        }
    },
    onGroupEndChange: function(a) {
        var b = a.rawValue;
        if (b) {
            this.getFilterForm().down('[group=' + a.group + '][role="operator"]').setValue('BETWEEN')
        }
    },
    onLegsLoad: function() {
        var a = this,
            d = a.getSearchMask().getEl(),
            c = a.getSearchButton(),
            b = a.getStopSearchButton();
        d.unmask();
        b.setDisabled(!0);
        c.setDisabled(!1)
    },
    onSearchlegButtonClick: function() {
        var b = this,
            c = b.getFilterForm(),
            a;
        if (!c.isValid()) {
            return
        }
        a = b.getLegGrid();
        a.loadLegs()
    },
    onStopSearchButtonClick: function() {
        var b = this,
            a = b.getLegGrid();
        a.getStore().abortRequest()
    },
    onLegDoubleClick: function(d, a) {
        var c = this,
            b = c.getController('details.Main');
        b.open(TimesSquare.controller.details.Main.view.LEG, a)
    },
    loadOperators: function(b, a) {
        TimesSquare.service.Oss.findAllCompactParameters(null, function(c) {
            this.loadOperatorsCallback(c);
            Ext.callback(b, a, [c])
        }, this)
    },
    loadOperatorsCallback: function(a) {
        var c, b;
        if (a && a.success && a.result) {
            c = a.result.parameterList;
            b = new TimesSquare.classes.ParameterList(c, 'com.lhsystems.ops.profile.server.dataimpl.parameterconfiguration');
            TimesSquare.CONFIG.expressionOperationList = a.result.expressionOperationList;
            TimesSquare.CONFIG.messageOfTheDay = b.get('COMPACT_MESSAGE_OF_THE_DAY');
            TimesSquare.CONFIG.localDoo = b.get('LOCAL_DOO') === 'true';
            TimesSquare.CONFIG.paxDetailShowCheckedIn = b.get('PAX_DETAIL_SHOW_CHECKED_IN') === 'true'
        }
    }
}, 0, 0, 0, 0, 0, 0, [TimesSquare.controller, 'SearchLeg'], 0);
Ext.cmd.derive('TimesSquare.util.SortProvider', Ext.Base, {
    singleton: !0,
    config: {
        store: null,
        selected: undefined
    },
    constructor: function(a) {
        this.callParent(arguments);
        this.mixins.observable.constructor.call(this, a);
        if (this.store) {
            this.observeStore(this.store)
        }
    },
    observeStore: function(a) {
        this.mon(a, {
            add: 'onDataChanged',
            remove: 'onDataChanged',
            update: 'onDataChanged',
            scope: this
        });
        this.defaultSorters = a.getSorters()
    },
    unobserveStore: function(a) {
        this.mun(a, {
            add: 'onDataChanged',
            remove: 'onDataChanged',
            update: 'onDataChanged',
            scope: this
        })
    },
    setStore: function(a) {
        if (this.store) {
            this.unobserveStore(this.store)
        }
        this.store = a;
        if (a) {
            this.observeStore(a)
        }
    },
    paramRegexp: /^com\.lhsystems\.ops\.profile\.server\.dataimpl\.parameterconfiguration\.ops\.gantt\.ac\.sorter/,
    paramMatcher: function(a) {
        return a.key.match(this.paramRegexp)
    },
    idRegexp: /^\d+$/,
    extractId: function(a) {
        var c = this,
            b = a.key.split('.');
        return Ext.Array.findBy(b, function(b) {
            return b.match(c.idRegexp)
        })
    },
    loadParameters: function(c) {
        var b = this,
            a = Ext.Array.filter(c, b.paramMatcher, this);
        a = Ext.Array.map(a, function(a) {
            return {
                id: b.extractId(a),
                name: a.value
            }
        });
        this.sorts = Ext.Array.sort(a, function(a, b) {
            return a.id > b.id
        });
        this.fireEvent('menuchanged')
    },
    onDataChanged: function() {
        this.fireEvent('menuchanged')
    },
    getSort: function(a) {
        return {
            prop: 'custom_sorter_' + a.sortData.id,
            direction: 'ASC'
        }
    },
    getMenuItems: function() {
        var a = this,
            b = Ext.Array.map(this.sorts || [], function(b) {
                return {
                    boxLabel: b.name,
                    sortData: b,
                    selected: a.selected === b.id,
                    handler: a.sortHandler,
                    margin: '0 0 0 5',
                    scope: a
                }
            }),
            c = [{
                boxLabel: 'Default',
                selected: !a.selected,
                handler: a.defaultSortHandler,
                margin: '0 0 0 5',
                scope: a
            }];
        Ext.Array.insert(b, 0, c);
        return {
            entries: b
        }
    },
    sortHandler: function(b, c) {
        if (!c) {
            return
        }
        var d = this.store,
            a;
        a = this.getSort(b);
        d.sort(a.prop, a.direction, this.multiColumnSort ? 'multi' : 'replace');
        this.selected = b.sortData.id
    },
    defaultSortHandler: function(d, a) {
        if (!a) {
            return
        }
        var c = this.store,
            b = this.defaultSorters;
        this.selected = null;
        c.sort(b)
    }
}, 1, 0, 0, 0, 0, [
    ['observable', Ext.util.Observable]
], [TimesSquare.util, 'SortProvider'], 0);
Ext.cmd.derive('TimesSquare.model.gantt.Resource', Sch.model.Resource, {
    statics: {
        TYPE: {
            PHYSICAL: 'PHYSICAL',
            OVERFLOW: 'OVERFLOW',
            LOGICAL: 'LOGICAL'
        },
        transformResource: function(a) {
            var b = this.transformCommon(a);
            return Ext.create('TimesSquare.model.gantt.Resource', b)
        },
        transformLogicalResource: function(a) {
            var b = this.transformCommon(a);
            b.ac = a.ac;
            b.Id = a.id;
            return Ext.create('TimesSquare.model.gantt.Resource', b)
        },
        transformCommon: function(a) {
            var b = {
                owner: a.aircraft.owner,
                state: a.aircraft.state,
                subtype: a.aircraft.subtype,
                bgColor: a.layout.bgColor,
                fgColor: a.layout.fgColor,
                url: a.hyperMedia.urlAircraftDetail,
                registration: a.aircraft.registration,
                alternativeRegistration: a.aircraft.alternativeRegistration,
                isRotational: a.aircraft.isRotational,
                isOwn: a.aircraft.isOwn,
                ac: a.aircraft.ac,
                Id: a.aircraft.registration
            };
            if (a.customSort && a.customSort.length) {
                Ext.each(a.customSort, function(c) {
                    b['custom_sorter_' + c.id] = c.hashValue
                })
            }
            return b
        }
    },
    fields: [{
        name: 'ac',
        type: 'string'
    }, {
        name: 'owner',
        type: 'string'
    }, {
        name: 'registration',
        type: 'string'
    }, {
        name: 'alternativeRegistration',
        type: 'string'
    }, {
        name: 'state',
        type: 'string'
    }, {
        name: 'subtype',
        type: 'string'
    }, {
        name: 'isRotational',
        type: 'boolean'
    }, {
        name: 'isOwn',
        type: 'boolean'
    }, {
        name: 'bgColor',
        type: 'string'
    }, {
        name: 'fgColor',
        type: 'string'
    }, {
        name: 'url',
        type: 'string'
    }, {
        name: 'custom_sorter_1',
        type: 'string'
    }, {
        name: 'custom_sorter_2',
        type: 'string'
    }, {
        name: 'custom_sorter_3',
        type: 'string'
    }, {
        name: 'custom_sorter_4',
        type: 'string'
    }, {
        name: 'custom_sorter_5',
        type: 'string'
    }],
    getOwner: function() {
        return this.get('owner')
    },
    getSubtype: function() {
        return this.get('subtype')
    },
    getRegistration: function() {
        return this.get('registration')
    },
    getBgColor: function() {
        return this.get('bgColor')
    },
    getFgColor: function() {
        return this.get('fgColor')
    },
    getUrl: function() {
        return this.get('url')
    },
    isRotational: function() {
        return this.get('isRotational')
    },
    isOwn: function() {
        return this.get('isOwn')
    }
}, 0, 0, 0, 0, 0, 0, [TimesSquare.model.gantt, 'Resource'], 0);
Ext.cmd.derive('ExSch.data.EventStore', Sch.data.EventStore, {
    getEventsForResource: function(c) {
        var h = this,
            e = h.data.items,
            f = e.length,
            d = [],
            g = c.getId() || c.internalId,
            a, b;
        for (b = 0; b < f; b++) {
            a = e[b];
            if (a.data[a.resourceIdField] === g) {
                d.push(a)
            }
        }
        return d
    },
    getAt: function(a) {
        return this.data.items[a]
    },
    binaryIndexOf: function(e, g) {
        var d = 0,
            f = e.length,
            c = f - 1,
            b, a;
        while (d <= c) {
            a = Math.floor((c + d) / 2);
            b = g.compare(e[a]);
            if (!b) {
                return a
            }
            if (b > 0) {
                d = a + 1
            } else {
                c = a - 1
            }
        }
        return a === f ? -1 : a
    },
    insertSorted: function(e) {
        var a = this,
            f = (a.snapshot || a.data).items,
            g = e.length,
            b, d, c;
        for (c = 0; c < g; c += 1) {
            b = e[c];
            d = a.binaryIndexOf(f, b);
            if (d < 0) {
                a.add(b)
            } else {
                a.insert(d, b)
            }
        }
    },
    addOptimized: function(b) {
        var a = this;
        if (Ext.isEmpty(b)) {
            return
        }
        a.runOptimized(a.convertRecords(b), a.insertSorted, a)
    },
    removeOptimized: function(b) {
        var a = this;
        if (Ext.isEmpty(b)) {
            return
        }
        a.runOptimized(a.convertRecords(b, !0), a.remove, a)
    },
    convertRecords: function(a, h) {
        var i = this,
            f = {},
            g, d, e, b, c;
        if (Ext.isObject(a)) {
            return a
        }
        if (!Ext.isArray(a)) {
            a = [a]
        }
        g = a.length;
        for (b = 0; b < g; b++) {
            c = a[b];
            d = c.getResourceId();
            e = f[d] || [];
            e.push(h && i.getById(c.getId()) || c);
            f[d] = e
        }
        return f
    },
    runOptimized: function(c, b, f) {
        var g = this,
            a, e, d;
        for (d in c) {
            a = c[d];
            e = a.length;
            if (e > 1) {
                g.suspendEvents(!1);
                b.call(f, a.slice(1));
                g.resumeEvents()
            }
            b.call(f, [a[0]])
        }
    },
    debugListeners: function() {
        Ext.iterate(this.events, function(b, a) {
            Ext.log.info(b + ': ' + (a.listeners && a.listeners.length || 0))
        })
    }
}, 0, 0, 0, 0, 0, 0, [ExSch.data, 'EventStore'], 0);
Ext.cmd.derive('TimesSquare.store.gantt.Events', ExSch.data.EventStore, {
    model: 'Sch.model.Event',
    storeId: 'gantt.Events',
    sorters: [{
        sorterFn: function(a, b) {
            return a.compare(b)
        }
    }],
    statics: {
        transformEvent: function(a) {
            var c = [],
                g = TimesSquare.getApplication(),
                b = TimesSquare.model,
                d, f, e;
            if (a.legType === b.IdFactory.TYPE.LEG) {
                d = a.eventType;
                if (d === 'SCHEDULED' || d === 'ACTUAL') {
                    f = b.gantt.Leg.transformScheduledLeg(a);
                    c.push(f);
                    if (a.atcSlotList && a.atcSlotList.length) {
                        for (e = 0; e < a.atcSlotList.length; e += 1) {
                            c.push(b.gantt.AtcSlot.transformAtcSlot(a.atcSlotList[e], f, a))
                        }
                    }
                    if (d === 'ACTUAL') {
                        c.push(b.gantt.Leg.transformActualLeg(a))
                    }
                }
            } else {
                if (a.legType === b.IdFactory.TYPE.CHECK) {
                    c.push(b.gantt.Check.transformCheck(a))
                }
            }
            g.getController('gantt.LogicalAircraft').handleLogicalAircrafts(c);
            g.getController('gantt.NonRotationalAircraft').handleNonRotationalAircrafts(a);
            return c
        },
        transformEvents: function(d) {
            var e = [],
                f = d.length,
                c = 0,
                b, a;
            for (; c < f; c += 1) {
                b = this.transformEvent(d[c]);
                for (a = 0; a < b.length; a += 1) {
                    e.push(b[a])
                }
            }
            return e
        },
        mergeAmqUpdates: function(a, b) {
            this.applyEventsChanges(a, b.getUpdatedObjects(), function(d, e, c) {
                if (e.get('updateKey') < c.get('updateKey')) {
                    Ext.Array.splice(a, d, 1, c)
                }
            });
            this.applyEventsChanges(a, b.getDeletedObjects(), function(c) {
                Ext.Array.splice(a, c, 1)
            });
            b.clearChanges();
            return a
        },
        applyEventsChanges: function(c, a, b) {
            if (Ext.isEmpty(a)) {
                return
            }
            Ext.Array.forEach(a, function(d) {
                Ext.Array.some(c, function(e, f) {
                    if (e.get('Id') === d.get('Id')) {
                        b(f, e, d);
                        return !0
                    }
                })
            }, this)
        }
    },
    addRawEvents: function(e, d) {
        var b = this.self.transformEvents(e),
            c = TimesSquare.getApplication(),
            a = c.getController('gantt.AtcSlot');
        a.handleAtcSlots(b);
        a.setAtcSlotTemplates(d);
        this.loadData(this.self.mergeAmqUpdates(b, c.getController('Messaging').collectedMessageEvents))
    }
}, 0, 0, 0, 0, 0, 0, [TimesSquare.store.gantt, 'Events'], 0);
Ext.cmd.derive('TimesSquare.store.gantt.Resources', Sch.data.ResourceStore, {
    model: 'TimesSquare.model.gantt.Resource',
    storeId: 'gantt.Resources',
    sorters: [{
        property: 'isOwn',
        direction: 'DESC'
    }, {
        property: 'owner',
        direction: 'ASC'
    }, {
        property: 'subtype',
        direction: 'ASC'
    }, {
        property: 'state',
        direction: 'ASC'
    }, {
        property: 'ac',
        direction: 'ASC'
    }],
    addRawAircrafts: function(e) {
        var c = [],
            d = [],
            g = e.length,
            b = 0,
            f = TimesSquare.getApplication(),
            a;
        for (b; b < g; b += 1) {
            a = e[b];
            if (a.aircraft.state === TimesSquare.model.gantt.Resource.TYPE.LOGICAL) {
                d.push(a)
            } else {
                c.push(TimesSquare.model.gantt.Resource.transformResource(a))
            }
        }
        f.getController('gantt.LogicalAircraft').setLogicalAircraftTemplates(d);
        f.getController('gantt.NonRotationalAircraft').setNonRotationalAircrafts(c);
        this.loadData(c)
    },
    addRawLogicalAircrafts: function(b) {
        var c = [],
            d = b.length,
            a;
        for (a = 0; a < d; a += 1) {
            c.push(TimesSquare.model.gantt.Resource.transformLogicalResource(b[a]))
        }
        this.loadData(c, !0)
    },
    addNonExisitingNonRotationalAircraft: function(a, c) {
        var d = this,
            b = [];
        b.push(TimesSquare.model.gantt.Resource.transformResource({
            aircraft: {
                owner: a.getOwner(),
                subtype: a.getSubtype(),
                isRotational: !1,
                registration: c,
                ac: c,
                state: TimesSquare.model.gantt.Resource.TYPE.PHYSICAL
            },
            layout: {
                bgColor: d.increase_brightness(a.getBgColor(), 50),
                fgColor: a.getFgColor()
            },
            hyperMedia: {}
        }));
        this.loadData(b, !0)
    },
    isExists: function(d) {
        var b = this.data.items,
            c = b.length,
            a = 0;
        for (; a < c; a += 1) {
            if (b[a].data.Id === d) {
                return !0
            }
        }
        return !1
    },
    increase_brightness: function(a, b) {
        a = a.replace(/^\s*#|\s*$/g, '');
        if (a.length === 3) {
            a = a.replace(/(.)/g, '$1$1')
        }
        var e = parseInt(a.substr(0, 2), 16),
            d = parseInt(a.substr(2, 2), 16),
            c = parseInt(a.substr(4, 2), 16);
        return '#' + (0 | (1 << 8) + e + (256 - e) * b / 100).toString(16).substr(1) + (0 | (1 << 8) + d + (256 - d) * b / 100).toString(16).substr(1) + (0 | (1 << 8) + c + (256 - c) * b / 100).toString(16).substr(1)
    },
    loadDataBuffer: !1,
    _buffer: null,
    enableLoadDataBuffer: function() {
        this.loadDataBuffer = !0;
        this._buffer = []
    },
    flushLoadDataBuffer: function() {
        this.loadDataBuffer = !1;
        this.loadData(this._buffer);
        this._buffer = null
    },
    loadData: function(b, a) {
        if (!this.loadDataBuffer) {
            return Sch.data.ResourceStore.prototype.loadData.apply(this, arguments)
        }
        if (!a) {
            this._buffer = []
        }
        Array.prototype.push.apply(this._buffer, b)
    },
    findRecord: function(d, e) {
        if (!this.loadDataBuffer) {
            return Sch.data.ResourceStore.prototype.findRecord.apply(this, arguments)
        }
        var c = this._buffer,
            f = c.length,
            a, b;
        for (b = 0; b < f; b++) {
            a = c[b];
            if (a.data && a.data[d] === e) {
                return a
            }
        }
        return null
    },
    debugListeners: function() {
        Ext.iterate(this.events, function(b, a) {
            Ext.log.info(b + ': ' + (a.listeners && a.listeners.length || 0))
        })
    }
}, 0, 0, 0, 0, 0, 0, [TimesSquare.store.gantt, 'Resources'], 0);
Ext.cmd.derive('ExSch.eventlayout.Horizontal', Ext.Base, {
    timeAxisViewModel: null,
    clearCache: Ext.emptyFn,
    constructor: function(a) {
        Ext.apply(this, a)
    },
    getRowHeight: function(b, a) {
        return this.timeAxisViewModel.rowHeightHorizontal
    }
}, 1, 0, 0, 0, 0, 0, [ExSch.eventlayout, 'Horizontal'], 0);
Ext.cmd.derive('ExSch.view.SchedulerGridView', Sch.view.SchedulerGridView, {
    eventAnimations: !1,
    dynamicRowHeight: !1,
    horizontalLayoutCls: 'ExSch.eventlayout.Horizontal',
    horizontalViewClass: 'ExSch.view.Horizontal'
}, 0, ['exschedulergridview'], ['component', 'box', 'dataview', 'tableview', 'gridview', 'schedulergridview', 'exschedulergridview'], {
    'component': !0,
    'box': !0,
    'dataview': !0,
    'tableview': !0,
    'gridview': !0,
    'schedulergridview': !0,
    'exschedulergridview': !0
}, ['widget.exschedulergridview'], 0, [ExSch.view, 'SchedulerGridView'], 0);
Ext.define('TimesSquare.overrides.SchedulerGridView', {
    override: 'ExSch.view.SchedulerGridView',
    initComponent: function() {
        (arguments.callee.$previous || Sch.view.SchedulerGridView.prototype.initComponent).call(this);
        this.getEventSelectionModel().on({
            'select': this.onEventSelect,
            'deselect': this.onEventDeselect,
            scope: this
        })
    },
    onEventSelect: function(a, c) {
        var d = this,
            b;
        b = d.getAdjacentEvents(c);
        if (a.view.onInitialEventSelect) {
            a.view.onInitialEventSelect(c)
        }
        Ext.each(b, function(b) {
            a.view.onEventBarSelect(b)
        })
    },
    onEventDeselect: function(c, b) {
        var d = this,
            a;
        a = d.getAdjacentEvents(b);
        Ext.each(a, function(a) {
            c.view.onEventBarDeselect(a)
        })
    },
    getAdjacentEvents: function(c) {
        var b = c.data.Id,
            f = b.substr(0, b.length - 1),
            d = c.store,
            e = [],
            a, g;
        if (!d) {
            return
        }
        if (c.data.legId) {
            a = g = d.findRecord('Id', c.data.legId);
            if (a) {
                e.push(a);
                a = null
            }
            if (g) {
                b = g.data.Id;
                f = b.substr(0, b.length - 1)
            }
        }
        if (Ext.String.endsWith(b, 'S')) {
            a = d.findRecord('Id', f + 'A')
        } else {
            if (Ext.String.endsWith(b, 'A')) {
                a = d.findRecord('Id', f + 'S')
            }
        }
        if (a) {
            e.push(a);
            a = null
        }
        a = d.findRecord('legId', c.data.Id);
        if (a) {
            e.push(a)
        }
        return e
    }
});
Ext.cmd.derive('ExSch.panel.SchedulerGrid', Sch.panel.SchedulerGrid, {
    viewType: 'exschedulergridview',
    useSpacer: !1,
    eventResizeHandles: 'none',
    enableDragCreation: !1,
    destroy: function() {
        var c = this,
            a = c.lockedGrid && c.lockedGrid.getView(),
            b = c.getEventSelectionModel();
        if (a && a.store) {
            a.store.un('refresh', a.onDataRefresh, a)
        }
        if (b.store) {
            b.unbindStoreListeners(b.store)
        }
        Sch.panel.SchedulerGrid.prototype.destroy.apply(this, arguments)
    },
    onResize: function() {
        var c = this,
            b = c.getSchedulingView(),
            d = b.timeAxisViewModel,
            e = d._scrollRestoreDate,
            a = c.getRegion();
        Sch.panel.SchedulerGrid.prototype.onResize.call(this);
        d._scrollRestoreDate = null;
        c.restoreScrollToDate(e);
        a.setWidth(a.x + a.getWidth());
        a.setPosition([0, a.y]);
        if (b.tip) {
            b.tip.setMaxHeight(a.height);
            b.tip.constrainTo = a
        } else {
            b.tipCfg.maxHeight = a.height;
            b.tipCfg.constrainTo = a
        }
    },
    zoomToLevel: function() {
        var c = this,
            b = c.getSchedulingView(),
            d = b.getViewportCenterDate(),
            a;
        Sch.panel.SchedulerGrid.prototype.zoomToLevel.apply(this, arguments);
        a = b.on('scroll', function() {
            c.restoreScrollToDate(d, !0)
        }, null, {
            single: !0,
            destroyable: !0
        });
        Ext.asap(function() {
            a.destroy()
        })
    },
    restoreScrollToDate: function(d, e) {
        var a = this,
            c = a.getSchedulingView(),
            b;
        c.ignoreNextHorizontalScroll = !0;
        if (d) {
            if (e) {
                a.scrollToDateCentered(d, !1)
            } else {
                a.scrollToDate(d, !1)
            }
        }
        b = c.getScrollX();
        c.panel.scrollLeftPos = b;
        c.headerCt.setScrollX(b);
        a.lastScrollPos.x = b;
        a.normalScrollbarScroller._element.dom.scrollLeft = b;
        a._scrollRestoreDate = null
    },
    scrollToDateCentered: function(f, e) {
        var a = this.getSchedulingView(),
            d = this.getStartDate(),
            b = 0,
            c;
        if (a.isHorizontal()) {
            b = a.getBox().width / 2
        } else {
            b = a.getBox().height / 2
        }
        c = Math.round(a.getCoordinateFromDate(f, !0) - b);
        if (c >= 0) {
            return Sch.panel.SchedulerGrid.prototype.scrollToDateCentered.apply(this, arguments)
        }
        this.scrollToCoordinate(0, d, e, !1)
    }
}, 0, ['exschedulergrid'], ['component', 'box', 'container', 'panel', 'tablepanel', 'gridpanel', 'grid', 'timelinegrid', 'schedulergrid', 'schedulerpanel', 'exschedulergrid'], {
    'component': !0,
    'box': !0,
    'container': !0,
    'panel': !0,
    'tablepanel': !0,
    'gridpanel': !0,
    'grid': !0,
    'timelinegrid': !0,
    'schedulergrid': !0,
    'schedulerpanel': !0,
    'exschedulergrid': !0
}, ['widget.exschedulergrid'], 0, [ExSch.panel, 'SchedulerGrid'], 0);
Ext.cmd.derive('TimesSquare.mixin.PostProcessor', Ext.Mixin, {
    registerPostProcessor: function(a) {
        this.postProcessors = this.postProcessors.length || [];
        if (Ext.isArray(a)) {
            this.postProcessors += a
        }
        if (Ext.isObject(a)) {
            this.postProcessors += Ext.Object.getValues(a)
        } else {
            this.postProcessors.push(a)
        }
    },
    registerPostProcessors: function() {
        return this.registerPostProcessor.apply(this, arguments)
    },
    invokePostProcessors: function() {
        var a = arguments;
        Ext.defer(function() {
            Ext.each(this.postProcessors, function(b) {
                b.apply(this, a)
            }, this)
        }, 1, this)
    },
    addPostProcessingListeners: function() {
        var a = this.getResourceStore();
        this.mon(a, {
            refresh: 'invokePostProcessors',
            scope: this
        });
        this.on({
            zoomchange: 'invokePostProcessors',
            scope: this
        })
    },
    initPostProcessors: function() {
        this.addPostProcessingListeners();
        if (Ext.isObject(this.postProcessors)) {
            this.postProcessors = Ext.Object.getValues(this.postProcessors)
        }
    },
    mixinConfig: {
        after: {
            initComponent: 'initPostProcessors'
        }
    },
    postProcessors: {}
}, 0, 0, 0, 0, 0, 0, [TimesSquare.mixin, 'PostProcessor'], 0);
Ext.cmd.derive('TimesSquare.view.Gantt', ExSch.panel.SchedulerGrid, {
    title: 'Gantt',
    region: 'center',
    closable: !0,
    loadMask: !0,
    readOnly: !0,
    enableEventDragDrop: !1,
    forceFit: !0,
    suppressFit: !1,
    eventStore: 'gantt.Events',
    resourceStore: 'gantt.Resources',
    viewPreset: 'opsHourAndDay',
    zoomLevels: [{
        width: 100,
        increment: 1,
        resolution: 2,
        preset: 'opsWeekAndDay',
        label: '2 weeks',
        zoomId: 0
    }, {
        width: 50,
        increment: 1,
        resolution: 1,
        preset: 'opsWeekAndDay',
        label: '1 week',
        zoomId: 1
    }, {
        width: 100,
        increment: 3,
        resolution: 1,
        preset: 'opsHourAndDay',
        label: '3 days',
        zoomId: 2
    }, {
        width: 60,
        increment: 2,
        resolution: 1,
        preset: 'opsHourAndDay',
        label: '2 days',
        zoomId: 3
    }, {
        width: 60,
        increment: 1,
        resolution: 1,
        preset: 'opsHourAndDay',
        label: '1 day',
        zoomId: 4
    }, {
        width: 30,
        increment: 15,
        resolution: 1,
        preset: 'opsMinuteAndHour',
        label: '12 hours',
        zoomId: 5
    }, {
        width: 45,
        increment: 15,
        resolution: 2 / 3,
        preset: 'opsMinuteAndHour',
        label: '8 hours',
        zoomId: 6
    }, {
        width: 60,
        increment: 15,
        resolution: 0.5,
        preset: 'opsMinuteAndHour',
        label: '6 hours',
        zoomId: 7
    }, {
        width: 60,
        increment: 10,
        resolution: 0.5,
        preset: 'opsMinuteAndHour',
        label: '4 hours',
        zoomId: 8
    }],
    zoomKeepsOriginalTimespan: !0,
    rowHeight: 60,
    variableRowHeight: !1,
    config: {
        bufferVerticalScroll: 0
    },
    viewConfig: {
        dynamicRowHeight: !1,
        managedEventSizing: !1,
        timeMode: 'utc'
    },
    lockedGridConfig: {
        resizeHandles: 'e',
        resizable: {
            width: 108,
            pinned: !0,
            minWidth: 108
        },
        width: 200
    },
    dockedItems: [{
        xtype: 'panel',
        itemId: 'statusLine',
        cls: 'status-line',
        dock: 'bottom',
        layout: 'hbox',
        hidden: !0,
        height: 40,
        items: [{
            xtype: 'button',
            inspect: 'status-line-left',
            itemId: 'statusLineScrollLeft',
            action: 'status-line-scroll-left',
            iconCls: 'icon-jump-previous',
            hidden: !0,
            repeat: !0,
            padding: '10 0 0 0',
            width: 20,
            height: '100%'
        }, {
            xtype: 'box',
            itemId: 'statusLineContent',
            flex: 1,
            scrollable: 'x',
            cls: 'status-line-content',
            height: 55,
            padding: 4,
            html: '',
            style: 'font-size: 24px; overflow: hidden; display: relative !important;'
        }, {
            xtype: 'button',
            inspect: 'status-line-right',
            itemId: 'statusLineScrollRight',
            action: 'status-line-scroll-right',
            hidden: !0,
            repeat: !0,
            iconCls: 'icon-jump-next',
            padding: '10 0 0 2',
            width: 20,
            height: '100%'
        }]
    }],
    tooltipTpl: new Ext.Template('{tooltipForDisplay}'),
    tipCfg: {
        cls: 'sch-tip',
        showDelay: 500,
        dismissDelay: 0,
        hideDelay: 0,
        liquidLayout: !0,
        anchorToTarget: !0,
        defaultAlign: 'tl-r50?',
        constrainPosition: !0
    },
    onBeforeTooltipShow: function(i, b) {
        var c = this,
            d = c.getSchedulingView(),
            a = d.tip,
            g = d.timeMode === 'local' ? 'tooltipLocal' : 'tooltip',
            h = d.timeMode === 'local' ? 'urlTooltipLocal' : 'urlTooltip',
            e = b.data[h],
            f;
        if (!c.down('checkbox[action=show-smart-info]').checked) {
            return !1
        }
        c.currentTooltipRec = b;
        if (!e) {
            Ext.log.warn('[Gantt Tooltip] No urlTooltip: ' + b.data.Id);
            return !1
        }
        a.beforeDataFetch();
        f = {
            me: c,
            rec: b,
            tip: a,
            tooltipField: g
        };
        Ext.log.info('[Gantt Tooltip] Load tooltip for ' + b.data.Id + ', URL: ' + e);
        if (a._loadDefer) {
            window.clearTimeout(a._loadDefer);
            a._loadDefer = null
        }
        if (a._hideTimeout) {
            window.clearTimeout(a._hideTimeout);
            a._hideTimeout = null;
            a.hide()
        }
        Ext.Ajax.request({
            url: e,
            success: c.tooltipServiceCallback,
            scope: f
        })
    },
    tooltipServiceCallback: function(e) {
        var b = this.me,
            a = this.rec,
            g = this.tip,
            d = b.getSchedulingView(),
            c = Ext.decode(e.responseText, !0),
            f = d.getElementsFromEventRecord(b.currentTooltipRec)[0];
        a.data[this.tooltipField] = c && c.success && c.result && c.result.tooltip || null;
        a.data.tooltipForDisplay = a.data[this.tooltipField];
        if (b.currentTooltipRec === a && a.data.tooltipForDisplay) {
            Ext.log.info('[Gantt Tooltip] Show tooltip for ' + a.data.Id);
            g.showData(d.getDataForTooltipTpl(a), b.tooltipTpl, f)
        }
    },
    eventTpl: new Ext.XTemplate('<tpl for=".">', '<div id="{wrapperPrefix}{id}" ', 'style="opacity:{[values.eventData.filteredOut ? 0.5 : 1]};right:{right}px;left:{left}px;top:{top}px;height:{height}px;width:{width}px;" ', 'class="{wrapperCls} {cls} {internalCls} ', 'overlap-{eventData.overlapCount} ', '{[ this.getEventSelector(values) ]} ', '{eventData.Id}">', '<div class="x-event-ontop-wrapper">', '{systemMarkers}', '{userMarkers}', '{remarks}', '</div>', '<div unselectable="on" id="{eventPrefix}{id}" style="{style};position:initial;height:100%" data-tooltip-type="event" class="x-event-tooltipable sch-event x-unselectable">', '<div unselectable="on" class="sch-event-inner {iconCls}">', '<tpl if="eventData.eventType==\'AS\'">', '<div class="event-atc-slot-state" style="{atcSlotStyle}">{eventData.displayState}</div>', '<div class="event-atc-slot-time" style="{atcSlotStyle}">{eventData.displayTime}</div>', '<tpl else>', '<div class="event-leg-departure" style="{startStyle}"><tpl if="useLocalTime">{eventData.StartDateLocal:date("H:i")}<tpl else>{eventData.StartDate:date("H:i")}</tpl></div>', '<div class="event-leg-arrival" style="{endStyle}"><tpl if="useLocalTime">{eventData.EndDateLocal:date("H:i")}<tpl else>{eventData.EndDate:date("H:i")}</tpl></div>', '<div class="event-leg-name">{eventData.Name}</div>', '</tpl>', '</div>', '</div>', '</div>', '<tpl if="airportMarker">', '<div style="left:{airportMarker.left}px;top:{top}px" ', 'class="', '{[ this.getAirportSelector(values) ]} ', 'event-airport">', '{airportMarker.airport}<br>{airportMarker.time}', '</div>', '</tpl>', '</tpl>', {
        getEventSelector: function(b) {
            var e = Inspector.Config.prefix || '',
                a = b.eventData,
                d = Ext.Array.filter,
                c;
            c = d([a.Name || a.eventType, Ext.Date.format(a.dayOfOrigin, 'dMy'), a.ResourceId, a.departureAirport + '-' + a.arrivalAirport, Ext.Date.format(a.StartDate, 'dMy-Hi'), Ext.Date.format(a.EndDate, 'dMy-Hi'), b.eventData.state, b.eventData.counter], function(a) {
                return !Ext.isEmpty(a)
            });
            return e + c.join('/')
        },
        getAirportSelector: function(a) {
            var b = Inspector.Config.prefix || '';
            return b + [a.airportMarker.airport, a.airportMarker.time.replace(':', '-')].join('-')
        }
    }),
    eventRenderer: function(b, c, a) {
        a.style = ['background-color:' + b.getBgColor(), 'color:' + b.getFgColor()].join(';');
        a.eventData = b.data;
        if (a.width < 80) {
            a.startStyle = 'display:none;'
        }
        if (a.width < 110) {
            a.endStyle = 'display:none;'
        }
        if (a.width < 10) {
            a.atcSlotStyle = 'display:none;'
        }
        a.eventPrefix = this.eventPrefix;
        a.wrapperPrefix = this.eventWrapperPrefix;
        a.wrapperCls = this.eventWrapperCls;
        this.renderAdditionalElements(arguments)
    },
    initComponent: function() {
        var a = this;
        a.plugins = a.plugins || [];
        a.plugins.push(Ext.create('Sch.plugin.Lines', {
            store: 'gantt.Timelines',
            pluginId: 'lines'
        }));
        a.columns = a.createColumns();
        a.tbar = a.createToolbar();
        ExSch.panel.SchedulerGrid.prototype.initComponent.apply(this, arguments);
        a.normalGrid.on({
            resize: a.onNormalGridResize,
            scope: a
        });
        a.normalGrid.getView().on('scroll', a.onNormalGridViewScroll, a);
        a.on('beforetooltipshow', a.onBeforeTooltipShow)
    },
    onNormalGridResize: function(d) {
        if (!d.scrollConfig) {
            return
        }
        var a = d.scrollConfig;
        var c = a.wasEndOfScroll;
        var b = a.dateScrollValue;
        var e = a.wasBeginOfScroll;
        if (c || e) {
            this.getSchedulingView().scrollHorizontallyTo(c ? Infinity : 0, !0)
        } else {
            if (b) {
                this.scrollToDateCentered(b)
            }
        }
    },
    onNormalGridViewScroll: function(c) {
        var a = c.getScrollable();
        var b = Math.round(a.getPosition().x);
        var d = Math.round(a.getMaxPosition().x);
        this.normalGrid.scrollConfig = {
            dateScrollValue: this.getViewportCenterDate(),
            wasEndOfScroll: b >= d,
            wasBeginOfScroll: b === 0
        }
    },
    toggleAltRegistrationColumn: function(b) {
        var c = this,
            a = c.getColumnManager().getHeaderById('alternativeRegistration');
        if (a.isVisible() !== b) {
            Ext.defer(a[b ? 'show' : 'hide'], 1, a)
        }
    },
    createColumns: function() {
        var a = this;
        return [{
            header: 'AC',
            dataIndex: 'ac',
            width: 108,
            renderer: a.aircraftColumnRenderer
        }, {
            header: 'Registration',
            dataIndex: 'registration',
            width: 80,
            renderer: a.aircraftColumnRenderer
        }, {
            header: 'Alt. Registration',
            dataIndex: 'alternativeRegistration',
            itemId: 'alternativeRegistration',
            width: 80,
            renderer: a.aircraftColumnRenderer,
            hideable: !1,
            hidden: !0
        }, {
            header: 'Subtype',
            dataIndex: 'subtype',
            width: 50,
            renderer: a.aircraftColumnRenderer
        }, {
            header: 'Owner',
            dataIndex: 'owner',
            width: 50,
            renderer: a.aircraftColumnRenderer
        }, {
            xtype: 'checkcolumn',
            header: 'Own',
            dataIndex: 'isOwn',
            width: 50,
            disabled: !0,
            renderer: a.aircraftColumnRenderer
        }, {
            header: 'State',
            dataIndex: 'state',
            width: 100,
            renderer: a.aircraftColumnRenderer
        }]
    },
    createToolbar: function() {
        var a = this;
        return [{
            iconCls: 'icon-jump-first',
            action: 'jump-first',
            clickEvent: 'mousedown',
            tooltip: 'Scroll selection backward'
        }, {
            iconCls: 'icon-jump-previous',
            action: 'jump-previous',
            clickEvent: 'mousedown',
            tooltip: 'Scroll selection backward one day'
        }, {
            iconCls: 'icon-jump-next',
            action: 'jump-next',
            clickEvent: 'mousedown',
            tooltip: 'Scroll selection forward one day'
        }, {
            iconCls: 'icon-jump-last',
            action: 'jump-last',
            clickEvent: 'mousedown',
            tooltip: 'Scroll selection forward'
        }, {
            iconCls: 'icon-jump-now',
            action: 'jump-now',
            clickEvent: 'mousedown',
            tooltip: 'Goto now'
        }, {
            xtype: 'tbseparator'
        }, {
            xtype: 'combobox',
            queryMode: 'local',
            name: 'zoom',
            editable: !1,
            width: 80,
            forceSelection: !0,
            displayField: 'label',
            valueField: 'zoomId',
            value: 4,
            store: Ext.create('Ext.data.Store', {
                fields: ['zoomId', 'label'],
                proxy: {
                    type: 'memory',
                    reader: {
                        type: 'json'
                    }
                },
                data: a.zoomLevels
            })
        }, {
            xtype: 'tbseparator'
        }, {
            xtype: 'button',
            text: 'Show',
            menu: {
                plain: !0,
                defaults: {
                    xtype: 'checkbox',
                    margin: '0 0 0 5',
                    checked: !1
                },
                items: [{
                    action: 'show-status-line',
                    boxLabel: 'Status Line'
                }, {
                    action: 'show-smart-info',
                    boxLabel: 'Smart Info'
                }]
            }
        }, {
            xtype: 'tbseparator'
        }, {
            xtype: 'gantt.sorter',
            store: this.getResourceStore(),
            provider: TimesSquare.util.SortProvider
        }, {
            xtype: 'tbseparator'
        }, {
            xtype: 'timemodebutton',
            itemId: 'timemode'
        }, {
            xtype: 'tbseparator'
        }, {
            xtype: 'airportfilter',
            minLength: 3,
            maxLength: 3,
            fields: ['arrivalAirport', 'departureAirport', 'diversionAirport']
        }]
    },
    refreshSelection: function() {
        var a = this.getEventSelectionModel(),
            b = a.getSelection()[0];
        if (b) {
            a.deselect(b);
            a.select(b)
        }
    },
    aircraftColumnRenderer: function(d, c, b) {
        var a = this.defaultRenderer;
        c.style = ['background-color:' + b.getBgColor(), 'color:' + b.getFgColor()].join(';');
        return a ? a.apply(this, arguments) : d
    },
    isInRange: function(d) {
        var a = this,
            b = a.getStartDate(),
            c = a.getEndDate();
        return Ext.Date.between(d, b, c)
    },
    setTitle: function(a) {
        (arguments.callee.$previous || ExSch.panel.SchedulerGrid.prototype.setTitle).call(this, 'Gantt ' + a)
    }
}, 0, ['gantt'], ['component', 'box', 'container', 'panel', 'tablepanel', 'gridpanel', 'grid', 'timelinegrid', 'schedulergrid', 'schedulerpanel', 'exschedulergrid', 'gantt'], {
    'component': !0,
    'box': !0,
    'container': !0,
    'panel': !0,
    'tablepanel': !0,
    'gridpanel': !0,
    'grid': !0,
    'timelinegrid': !0,
    'schedulergrid': !0,
    'schedulerpanel': !0,
    'exschedulergrid': !0,
    'gantt': !0
}, ['widget.gantt'], [
    ['postprocessing', TimesSquare.mixin.PostProcessor]
], [TimesSquare.view, 'Gantt'], 0);
Ext.cmd.derive('TimesSquare.controller.gantt.Gantt', Ext.app.Controller, {
    stores: ['gantt.Events', 'gantt.Resources', 'gantt.Timelines', 'TimesSquare.mixin.ExecutionTimeLogger'],
    views: ['Gantt'],
    refs: [{
        ref: 'gantt',
        selector: 'gantt'
    }, {
        ref: 'viewport',
        selector: 'viewport'
    }, {
        ref: 'resourceGrid',
        selector: 'gantt grid[isLocked=true]'
    }, {
        ref: 'ganttInfo',
        selector: 'gantt #ganttInfo'
    }],
    findLegsRequest: undefined,
    statusLineLeg: null,
    statusLineRequest: null,
    parameterList: undefined,
    titleTpl: new Ext.XTemplate('({0:date("dMy")} - {1:date("dMy")})'),
    localAirport: null,
    statusLineScrollStep: 50,
    ganttLoaded: !1,
    init: function() {
        var a = this;
        a.track(['loadGantt', 'loadEvents', 'onPanelClose']);
        a.listen({
            controller: {
                '#Messaging': {
                    opsdatachanged: a.dataChanged
                }
            },
            component: {
                'gantt': {
                    eventdblclick: a.onEventDblClick,
                    eventselectionchange: a.onSelectionChange,
                    close: a.onPanelClose,
                    beforeclose: a.removeAirportFilters,
                    afterrender: a.onGanttAfterRender,
                    resize: a.checkStatusLineScrolling
                },
                'gantt grid[isLocked=true]': {
                    itemdblclick: a.onResourceGridItemDblClick,
                    columnresize: a.setResizerBounds,
                    columnschanged: a.setResizerBounds,
                    viewready: function(b) {
                        a.setResizerBounds(b.headerCt)
                    }
                },
                'gantt button[action=jump-first]': {
                    click: a.onClickTbarJumpFirst
                },
                'gantt button[action=jump-previous]': {
                    click: a.onClickTbarJumpPrevious
                },
                'gantt button[action=jump-next]': {
                    click: a.onClickTbarJumpNext
                },
                'gantt button[action=jump-last]': {
                    click: a.onClickTbarJumpLast
                },
                'gantt button[action=jump-now]': {
                    click: a.onClickTbarJumpNow
                },
                'gantt checkbox[action=show-status-line]': {
                    change: a.onShowStatusLineChange
                },
                'gantt #statusLine': {
                    show: a.onStatusLineShow
                },
                'gantt button[action=status-line-scroll-left]': {
                    click: a.onStatusLineScrollLeft
                },
                'gantt button[action=status-line-scroll-right]': {
                    click: a.onStatusLineScrollRight
                },
                'gantt toolbar combobox[name=zoom]': {
                    change: a.onZoomComboBoxChange
                },
                'gantt toolbar timemodebutton#timemode': {
                    timemodechange: a.onTimeModeChange
                },
                'gantt toolbar airportfilter': {
                    filter: a.onAirportFilter
                }
            }
        })
    },
    startPolling: function() {
        var a = this,
            b = a.getController('Messaging'),
            c = a.getController('gantt.AtcSlot');
        b.stop();
        b.start(a.getMessagingSelector());
        c.start()
    },
    getMessagingSelector: function() {
        return Ext.String.format('OpsLegStart<{0} AND OpsLegEnd>={1}', Ext.Date.format(this.endDate, 'Ymd'), Ext.Date.format(this.originalStartDate, 'Ymd'))
    },
    stopPolling: function() {
        var a = this,
            b = a.getController('Messaging'),
            c = a.getController('gantt.AtcSlot');
        c.stop();
        b.stop()
    },
    onPanelClose: function() {
        var a = this;
        TimesSquare.util.Time.timeMode = 'utc';
        a.currentZoomLevel = 4;
        a.stopPolling();
        a.clearStores();
        a.ganttLoaded = !1;
        a.getController('Messaging').start()
    },
    currentZoomLevel: 4,
    onZoomComboBoxChange: function(d, a) {
        var c = this,
            b = c.getGantt();
        this.currentZoomLevel = a;
        b.zoomToLevel(a, !1)
    },
    getCorrectedStartDate: function(b, a) {
        var d = this,
            c;
        a = a || d.originalStartDate;
        b = Ext.isEmpty(b) ? d.currentZoomLevel : b;
        if (b !== 1 && b !== 2 && b !== 3) {
            return a
        }
        c = TimesSquare.util.Time.convert(a);
        if (a === c) {
            return a
        }
        a = new Date(a);
        while ((c.getHours() * 60 + c.getMinutes()) % (b === 3 ? 120 : 360) !== 0) {
            a.setMinutes(a.getMinutes() - 1);
            c = TimesSquare.util.Time.convert(a)
        }
        return a
    },
    setResizerBounds: function(e) {
        var f = this,
            a = f.getResourceGrid(),
            d = e.getGridColumns(),
            b, c;
        b = Ext.Array.reduce(d, function(b, a) {
            if (a.isFirstVisible) {
                c = a.width
            }
            return a.hidden && !a.hideable ? b : b + a.width
        }, 0);
        a.setMinWidth(c);
        a.setMaxWidth(b + 1)
    },
    dataChanged: function(c) {
        var a = this,
            b = !1,
            f = a.getGanttEventsStore(),
            e, d;
        if (!a.ganttLoaded) {
            return
        }
        for (d in c) {
            if (c.hasOwnProperty(d)) {
                b = a.dataChanged_OneEvent(c[d], b)
            }
        }
        if (b) {
            e = Date.now();
            Ext.resumeLayouts(!0);
            f.resumeEvents();
            a.getGantt().refreshViews();
            Ext.log.info('[Gantt controller] Update gantt, resume layouts: ' + (Date.now() - e) + ' ms');
            a.getGantt().refreshSelection()
        }
    },
    dataChanged_OneEvent: function(l, f) {
        if (!l) {
            return f
        }
        var e = this,
            c = l.getUpdatedObjects(),
            d = l.getDeletedObjects(),
            i = l.getNewAircrafts(),
            p = e.getGanttEventsStore(),
            k = e.statusLineEvent,
            n = e.getGantt(),
            u = n.getResourceStore(),
            v = e.getGanttResourcesStore().collect('Id'),
            s = n.getEventSelectionModel(),
            h = s.getSelection()[0],
            t = {},
            q = 0,
            j, m, r, a, o, g, b;
        if (!d.length && !c.length && !i.length) {
            return f
        }
        if (!f) {
            p.suspendEvents(!1);
            Ext.suspendLayouts();
            f = !0
        }
        e.getController('gantt.AtcSlot').handleAtcSlotUpdates(c, d);
        if (d.length) {
            if (k) {
                j = k.getId();
                for (b = 0; b < d.length; b += 1) {
                    a = d[b];
                    if (a.getId() === j) {
                        e.updateStatusLine(null)
                    }
                    if (h && a.getId() === h.getId()) {
                        s.deselect(h)
                    }
                }
            }
            o = Date.now();
            p.removeOptimized(d);
            Ext.log.info('[Gantt controller] Removed ' + d.length + ' events by HQ: ' + (Date.now() - o) + ' ms')
        }
        if (c.length) {
            if (k) {
                j = k.getId();
                for (b = 0; b < c.length; b += 1) {
                    a = c[b];
                    g = a.original;
                    if (g && g.getId() === j) {
                        e.updateStatusLine(a)
                    }
                    if (g && h && g.getId() === h.getId()) {
                        s.select(a)
                    }
                }
            }
            for (b = 0; b < c.length; b += 1) {
                a = c[b];
                m = a.getResourceId();
                if (Ext.Array.contains(v, m) && (n.isInRange(a.get('StartDate')) || n.isInRange(a.get('EndDate')))) {
                    r = t[m] || [];
                    r.push(a);
                    t[m] = r;
                    q++
                }
            }
            if (q) {
                o = Date.now();
                p.addOptimized(t);
                Ext.log.info('[Gantt controller] Events store updated by HQ, ' + q + ' events: ' + (Date.now() - o) + ' ms')
            }
        }
        if (i.length) {
            i = Ext.Array.map(i, function(a) {
                return TimesSquare.model.gantt.Resource.transformResource(a)
            });
            u.add(i)
        }
        return f
    },
    numberOfDays: null,
    startDate: null,
    originalStartDate: null,
    endDate: null,
    loadGantt: function(f) {
        var a = this,
            c = a.getGantt(),
            b, d, e, h = c && c.normalGrid,
            g = h && h.getView();
        if (g) {
            c.setBufferVerticalScroll(g.getVerticalScroll())
        }
        a.stopPolling();
        a.clearStores();
        a.ganttLoaded = !0;
        if (f) {
            a.findLegsRequest = Ext.clone(f)
        }
        d = a.findLegsRequest.numberOfDays;
        b = a.findLegsRequest.beginDate;
        e = Ext.Date.add(b, Ext.Date.DAY, d);
        if (c && TimesSquare.util.Time.timeMode === 'local' && a.localAirport && !TimesSquare.util.Time.isCached(a.localAirport, b, d)) {
            TimesSquare.util.Time.loadAirportTime(a.localAirport, b, d, function() {
                Ext.log.info('Set local airport: timezone information loaded.');
                a.setAirport(a.localAirport);
                Ext.log.info('Recall the loadGantt method.');
                a.loadGantt(f)
            });
            return
        }
        a.numberOfDays = d;
        a.originalStartDate = new Date(b);
        b = a.getCorrectedStartDate(b);
        a.startDate = new Date(b);
        a.endDate = new Date(e);
        Ext.suspendLayouts();
        if (!c) {
            c = a.getViewport().add(Ext.create('TimesSquare.view.Gantt', {
                startDate: b,
                endDate: e
            }))
        } else {
            c.setTimeSpan(b, e)
        }
        c.setTitle(a.titleTpl.apply([b, Ext.Date.add(e, Ext.Date.DAY, -1)]));
        Ext.resumeLayouts();
        a.startPolling();
        a.getController('Messaging').collectedMessageEvents.clearChanges();
        setTimeout(function() {
            TimesSquare.service.Oss.findLegs(a.findLegsRequest, a.loadEvents, a)
        })
    },
    clearStores: function() {
        var a = this;
        a.getGanttResourcesStore().removeAll();
        a.getGanttEventsStore().removeAll()
    },
    onSelectionChange: function(c, a) {
        var b = this;
        Ext.Array.each(a, function(d) {
            if (d.data.eventType) {
                Ext.log.info('[Gantt] Selection change ' + (d ? '(eventType = "' + d.data.eventType + '", naturalId = "' + d.data.naturalId + '", Id = "' + d.data.Id + '")' : '(deselect)'));
                b.updateStatusLine(d);
                return !1
            }
        })
    },
    onStatusLineShow: function() {
        this.updateStatusLine(this.statusLineEvent)
    },
    updateStatusLine: function(b) {
        var a = this,
            f = a.getGantt(),
            g = f.getSchedulingView(),
            c = f.down('#statusLine{isVisible()}'),
            d = b && b.get(g.timeMode === 'local' ? 'urlStatusLineLocal' : 'urlStatusLine'),
            e = c && c.down('#statusLineContent');
        a.statusLineEvent = b;
        if (!e) {
            return
        }
        e.update('');
        a.checkStatusLineScrolling();
        if (a.statusLineRequest) {
            Ext.Ajax.abort(a.statusLineRequest);
            a.statusLineRequest = null
        }
        if (!b || !d) {
            return
        }
        a.statusLineRequest = Ext.Ajax.request({
            method: 'GET',
            url: d,
            success: function(i) {
                var e = i && Ext.decode(i.responseText, !0) || null,
                    h = e && e.success && Ext.isObject(e.result) && e.result.statusLine,
                    g = c && c.down('#statusLineContent'),
                    f;
                a.statusLineRequest = null;
                if (!Ext.isString(h)) {
                    f = 'Errorneous or missing Status Line Service response!';
                    Ext.log.warn('Unable to retrieve status line (' + d + '): ' + f);
                    Ext.Msg.show({
                        icon: Ext.Msg.WARNING,
                        buttons: Ext.Msg.OK,
                        title: 'Flighlog Load Service',
                        msg: f
                    });
                    return
                }
                if (g) {
                    g.update('<div class="scrolling-content" style="position: absolute;white-space: nowrap;overflow: visible;">' + h + '</div>');
                    a.checkStatusLineScrolling()
                }
            }
        })
    },
    onEventDblClick: function(f, b) {
        var e = this.getGantt().getSchedulingView().tip,
            c = this.getController('details.Main'),
            d = TimesSquare.controller.details.Main.view,
            a;
        if (b instanceof TimesSquare.model.gantt.Leg) {
            a = b.getUrl();
            c.open(d.LEG, a)
        } else {
            if (b instanceof TimesSquare.model.gantt.Check) {
                a = b.getUrl();
                if (a) {
                    c.open(d.CHECK, a)
                }
            }
        }
        if (e) {
            Ext.defer(function() {
                e.hide()
            }, 100)
        }
    },
    onResourceGridItemDblClick: function(d, b) {
        var c = this,
            a = b.getUrl();
        if (a) {
            c.getController('details.Main').open(TimesSquare.controller.details.Main.view.AIRCRAFT, a)
        }
    },
    loadEvents: function(b) {
        var a = this,
            e = a.getGanttResourcesStore(),
            k = a.getGanttEventsStore(),
            i = a.getGanttInfo(),
            j = a.beforeShiftScrollPos,
            c, d, h, g, f;
        a.beforeShiftScrollPos = null;
        if (b && b.result) {
            d = Date.now();
            Ext.suspendLayouts();
            a.statusLineLeg = null;
            a.setParameterList(b.result.parameterList);
            e.enableLoadDataBuffer();
            e.addRawAircrafts(b.result.aircraftList);
            k.addRawEvents(b.result.legList, b.result.atcSlotList);
            e.flushLoadDataBuffer();
            Ext.resumeLayouts();
            d = Date.now() - d;
            Ext.log.info('Gantt Load time: ' + d + ' ms');
            if (i) {
                i.setText(Ext.String.format(i.tplText, d, e.getCount(), k.getCount()))
            }
            c = a.getGantt();
            h = c && c.normalGrid;
            g = h && h.getView();
            if (g) {
                f = c.getSchedulingView().el.down('table');
                if (f) {
                    f.setWidth(0)
                }
                g.scrollVerticallyTo(c.getBufferVerticalScroll())
            }
            a.removeAirportFilters();
            a.getController('Clock').setTimelineColor(a.parameterList['com.lhsystems.ops.profile.server.dataimpl.parameterconfiguration.ops.gantt.now.line.color'], a.parameterList['com.lhsystems.ops.profile.server.dataimpl.parameterconfiguration.ops.compact.gantt.now.line.width']);
            if (j) {
                a.getGantt().getScrollable().scrollTo(j.x, j.y)
            }
            a.loadEvents.options(function(c) {
                c.tpl = a.trackingTpl + Ext.String.format(' | Legs: {0}; Aircrafts: {1}', b.result.legList.length, b.result.aircraftList.length)
            }, a)
        }
    },
    setParameterList: function(b) {
        var c = this,
            a;
        c.parameterList = {};
        for (a = 0; a < b.length; a += 1) {
            c.parameterList[b[a].key] = b[a].value
        }
        c.applySettings();
        TimesSquare.util.SortProvider.loadParameters(b)
    },
    applySettings: function() {
        var c = this,
            h = c.parameterList.ENABLE_FINE_LOG,
            a = c.parameterList['com.lhsystems.ops.profile.server.dataimpl.parameterconfiguration.HANDLE_ALTERNATE_REGISTRATION'],
            f = c.parameterList['com.lhsystems.ops.profile.server.dataimpl.parameterconfiguration.COMPACT_STATUS_LINE_DISPLAY'],
            g = c.parameterList['com.lhsystems.ops.profile.server.dataimpl.parameterconfiguration.COMPACT_SMART_INFO_DISPLAY'],
            b = c.getGantt(),
            e = b && b.down('checkbox[action=show-smart-info]'),
            d = b && b.down('checkbox[action=show-status-line]');
        TimesSquare.util.Logger.enableFineLog = h === !0 || h === 'true' || !1;
        a = a === !0 || a === 'true' || !1;
        b.toggleAltRegistrationColumn(a);
        TimesSquare.view.details.aircraft.Aircraft.showAlternativeRegistration = a;
        if (d) {
            d.setValue(f === !0 || f === 'true' || !1)
        }
        if (e) {
            e.setValue(g === !0 || g === 'true' || !1)
        }
    },
    onClickTbarJumpFirst: function() {
        var a = this,
            b = a.findLegsRequest.numberOfDays;
        a.shift(-b)
    },
    onClickTbarJumpPrevious: function() {
        this.shift(-1)
    },
    onClickTbarJumpNext: function() {
        this.shift(1)
    },
    onClickTbarJumpLast: function() {
        var a = this,
            b = a.findLegsRequest.numberOfDays;
        a.shift(b)
    },
    onClickTbarJumpNow: function() {
        var a = this,
            d = a.getGantt(),
            f = a.getController('Clock'),
            b = f.getCurrentTime(),
            c = d.getSchedulingView(),
            g = c.getBox().width / 2,
            e = Math.max(0, Math.round(c.getCoordinateFromDate(b, !0) - g));
        if (!d.isInRange(b)) {
            a.findLegsRequest.beginDate = Ext.Date.clearTime(b, !0);
            a.loadGantt()
        }
        c.scrollHorizontallyTo(e)
    },
    shift: function(c) {
        var a = this,
            b = a.findLegsRequest.beginDate;
        a.findLegsRequest.beginDate = Ext.Date.add(b, Ext.Date.DAY, c);
        a.beforeShiftScrollPos = Ext.clone(a.getGantt().getScrollable().getPosition());
        a.loadGantt()
    },
    onTimeModeChange: function(b, g) {
        var c = this,
            f = c.getGantt(),
            a = f.getSchedulingView(),
            h = Date.now(),
            e, d = a.el.down('table');
        a.timeMode = b;
        TimesSquare.util.Time.timeMode = b;
        Ext.log.info('[Gantt] Time mode is changed to "' + b + '", current local airport: "' + (this.localAirport || '') + '"');
        e = a.hasLoadingHeight;
        a.hasLoadingHeight = !0;
        f.refreshViews();
        a.hasLoadingHeight = e;
        if (d) {
            d.setWidth(0)
        }
        Ext.log.info('[Gantt controller] Time mode change: ' + (Date.now() - h) + ' ms');
        if (b === 'local') {
            this.selectLocalAirportHandler(g)
        } else {
            this.refreshTimeline()
        }
        c.updateStatusLine(c.statusLineEvent)
    },
    selectLocalAirportHandler: function(a) {
        var b = this,
            c, d, e;
        if (a) {
            a = a.toUpperCase();
            if (!a.match(/^[A-Z]{3}$/)) {
                Ext.Msg.show({
                    title: 'Select local airport',
                    msg: 'Wrong airport code!',
                    icon: Ext.Msg.ERROR,
                    buttons: Ext.Msg.OK
                });
                return
            }
        }
        if (!a) {
            TimesSquare.util.Time.setAirport(null);
            b.setAirport(null);
            return
        }
        c = b.startDate;
        d = b.numberOfDays;
        e = TimesSquare.util.Time.setAirport(a, c, d);
        if (e) {
            Ext.log.info('Set local airport: the timezone information is already in the cache.');
            b.setAirport(a);
            return
        }
        Ext.log.info('Set local airport: load the timezone information...');
        TimesSquare.util.Time.loadAirportTime(a, c, d, function() {
            Ext.log.info('Set local airport: timezone information loaded.');
            b.setAirport(a)
        })
    },
    setAirport: function(b) {
        var a = this;
        a.localAirport = b;
        if (TimesSquare.util.Time.timeMode === 'local') {
            a.refreshTimeline()
        }
    },
    refreshTimeline: function() {
        var b = this.getGantt(),
            a = b.timeAxis;
        a.reconfigure({
            start: this.getCorrectedStartDate(),
            end: a.end
        })
    },
    onGanttAfterRender: function() {
        TimesSquare.util.Time.timeMode = 'utc'
    },
    onAirportFilter: function(a, c) {
        var b = Ext.getStore('gantt.Resources'),
            d = Ext.getStore('gantt.Events');
        d.each(a.events);
        if (c.resources) {
            b.removeFilter(c.resources, !a.resources)
        }
        if (a.resources) {
            b.addFilter(a.resources)
        } else {
            this.getGantt().refreshViews()
        }
    },
    removeAirportFilters: function() {
        this.getGantt().down('airportfilter').clearFilters()
    },
    checkStatusLineScrolling: function() {
        var f = this,
            e = f.getGantt(),
            b = e && e.down('#statusLine{isVisible()}'),
            a = b && b.down('#statusLineContent'),
            c, d;
        if (a) {
            c = a.getEl().down('.scrolling-content');
            d = a && c && c.getWidth() > a.getWidth() || !1;
            b.items.getByKey('statusLineScrollLeft')[d ? 'show' : 'hide']();
            b.items.getByKey('statusLineScrollRight')[d ? 'show' : 'hide']()
        }
    },
    onShowStatusLineChange: function(e, b) {
        var d = this,
            c = d.getGantt(),
            a = c.down('#statusLine');
        a[b ? 'show' : 'hide']()
    },
    onStatusLineScrollLeft: function() {
        var d = this,
            c = d.getGantt(),
            b = c && c.down('#statusLine{isVisible()}'),
            a = b && b.down('#statusLineContent');
        if (a) {
            a.scrollBy(-d.statusLineScrollStep)
        }
    },
    onStatusLineScrollRight: function() {
        var d = this,
            c = d.getGantt(),
            b = c && c.down('#statusLine{isVisible()}'),
            a = b && b.down('#statusLineContent');
        if (a) {
            a.scrollBy(d.statusLineScrollStep)
        }
    }
}, 0, 0, 0, 0, 0, [
    ['logger', TimesSquare.mixin.ExecutionTimeLogger]
], [TimesSquare.controller.gantt, 'Gantt'], 0);
Ext.cmd.derive('TimesSquare.controller.gantt.LogicalAircraft', Ext.app.Controller, {
    logicalAcMap: null,
    labelNoMap: null,
    logicalAircraftTemplates: null,
    logicalNameTpl: new Ext.XTemplate('{0}/{1}'),
    stores: ['gantt.Resources'],
    init: function() {
        var a = this;
        a.clearCache();
        a.listen({
            store: {
                '#gantt.Resources': {
                    clear: a.clearCache
                }
            }
        })
    },
    clearCache: function() {
        var a = this;
        a.logicalAcMap = {};
        a.labelNoMap = {};
        a.logicalAircraftTemplates = {}
    },
    getLogicalName: function(b, a) {
        return this.logicalNameTpl.apply([b, a])
    },
    getNextLabelNo: function(e, d) {
        var b = this,
            c = b.getLogicalName(e, d),
            a = b.labelNoMap[c];
        if (a) {
            a = a + 1
        } else {
            a = 1
        }
        b.labelNoMap[c] = a;
        return a
    },
    getLogicalAircraftLabels: function(b) {
        var d = this,
            c = Ext.String.format('{0}/{1}/{2}', b.getAircraftOwner(), b.getAircraftSubtype(), b.getLogicalNo()),
            a = d.logicalAcMap[c];
        if (!a) {
            a = d.getNextLabelNo(b.getAircraftOwner(), b.getAircraftSubtype());
            d.logicalAcMap[c] = a
        }
        a = Ext.String.leftPad(a, 2, '0');
        return {
            id: c,
            ac: Ext.String.format('{0} {1}', b.getAircraftSubtype(), a)
        }
    },
    handleLogicalAircrafts: function(g) {
        var d = this,
            i = g.length,
            f = d.getGanttResourcesStore(),
            e = 0,
            a, b, c, h;
        for (; e < i; e += 1) {
            b = g[e];
            if (b.isLogical()) {
                c = d.getLogicalAircraftLabels(b);
                b.setResourceId(c.id);
                if (!f.isExists(c.id)) {
                    h = d.getLogicalName(b.getAircraftOwner(), b.getAircraftSubtype());
                    a = d.logicalAircraftTemplates[h];
                    a = Ext.clone(a);
                    if (!a) {
                        continue
                    }
                    Ext.Object.merge(a, c);
                    f.addRawLogicalAircrafts([a])
                }
            }
        }
    },
    setLogicalAircraftTemplates: function(b) {
        var d = this,
            e = b.length,
            a, c;
        for (a = 0; a < e; a += 1) {
            c = d.getLogicalName(b[a].aircraft.owner, b[a].aircraft.subtype);
            d.logicalAircraftTemplates[c] = b[a]
        }
    }
}, 0, 0, 0, 0, 0, 0, [TimesSquare.controller.gantt, 'LogicalAircraft'], 0);
Ext.cmd.derive('TimesSquare.controller.gantt.NonRotationalAircraft', Ext.app.Controller, {
    nonRotationalAircrafts: [],
    stores: ['gantt.Resources'],
    init: function() {
        var a = this;
        a.clearCache();
        a.listen({
            store: {
                '#gantt.Resources': {
                    clear: a.clearCache
                }
            }
        })
    },
    clearCache: function() {
        var a = this;
        a.nonRotationalAircrafts = []
    },
    handleNonRotationalAircrafts: function(a) {
        var c = this,
            i = c.getGanttResourcesStore(),
            h, g, e, d, f, b;
        if (a && a.legDetail && a.legDetail.schedule && a.legDetail.schedule.rotationIdentifier && a.legDetail.schedule.rotationIdentifier.registration) {
            h = a.legDetail.schedule.aircraftOwner;
            g = a.legDetail.schedule.aircraftSubtype;
            e = a.legDetail.schedule.rotationIdentifier.registration;
            for (b = 0; b < c.nonRotationalAircrafts.length; b += 1) {
                if (c.nonRotationalAircrafts[b].getSubtype() === g && c.nonRotationalAircrafts[b].getOwner() === h) {
                    d = c.nonRotationalAircrafts[b];
                    break
                }
            }
            if (d) {
                if (d.getRegistration() !== e) {
                    f = i.findRecord('registration', e);
                    if (!f) {
                        i.addNonExisitingNonRotationalAircraft(d, e)
                    }
                }
            }
        }
    },
    setNonRotationalAircrafts: function(b) {
        var c = this,
            a;
        for (a = 0; a < b.length; a += 1) {
            if (!b[a].isRotational()) {
                c.nonRotationalAircrafts.push(b[a])
            }
        }
    }
}, 0, 0, 0, 0, 0, 0, [TimesSquare.controller.gantt, 'NonRotationalAircraft'], 0);
Ext.cmd.derive('TimesSquare.controller.gantt.AtcSlot', Ext.app.Controller, {
    loadedAtcSlots: undefined,
    atcSlotTemplates: undefined,
    started: !1,
    init: function() {
        var a = this;
        a.clearCache();
        a.listen({
            controller: {
                '#Clock': {
                    opsclockchanged: a.clockChanged
                }
            },
            store: {
                '#gantt.Events': {
                    clear: a.clearCache
                }
            }
        })
    },
    clearCache: function() {
        var a = this;
        a.loadedAtcSlots = {};
        a.atcSlotTemplates = {}
    },
    start: function() {
        this.started = !0
    },
    stop: function() {
        this.started = !1
    },
    handleAtcSlots: function(b) {
        var d = this,
            c, a;
        for (a = 0; a < b.length; a += 1) {
            if (b[a].$className === 'TimesSquare.model.gantt.AtcSlot') {
                c = b[a].getLegId();
                if (!d.loadedAtcSlots[c]) {
                    d.loadedAtcSlots[c] = []
                }
                d.loadedAtcSlots[c].push(b[a])
            }
        }
    },
    handleAtcSlotUpdates: function(d, e) {
        var f = this,
            a, c = {},
            b;
        for (b = 0; b < d.length; b += 1) {
            if (d[b].$className === 'TimesSquare.model.gantt.Leg' || d[b].$className === 'TimesSquare.model.gantt.Check') {
                a = d[b].getId();
                c[a] = []
            }
            if (d[b].$className === 'TimesSquare.model.gantt.AtcSlot') {
                a = d[b].getLegId();
                if (!c[a]) {
                    c[a] = []
                }
                c[a].push(d[b])
            }
        }
        for (b = 0; b < e.length; b += 1) {
            if (e[b].$className === 'TimesSquare.model.gantt.Leg' || e[b].$className === 'TimesSquare.model.gantt.Check') {
                a = e[b].getId();
                c[a] = []
            }
        }
        for (a in c) {
            if (c.hasOwnProperty(a)) {
                if (f.loadedAtcSlots[a]) {
                    Ext.Array.push(e, f.loadedAtcSlots[a])
                }
                if (c[a].length) {
                    f.loadedAtcSlots[a] = c[a]
                } else {
                    delete f.loadedAtcSlots[a]
                }
            }
        }
    },
    setAtcSlotTemplates: function(b) {
        var c = this,
            a;
        for (a = 0; a < b.length; a += 1) {
            c.atcSlotTemplates[b[a].templateType] = b[a].layout
        }
    },
    clockChanged: function(k) {
        var b = this,
            l = Date.now(),
            h = !1,
            j, e, i, a, c, d, g, f;
        if (b.started) {
            j = b.getController('gantt.Gantt');
            i = j.parameterList;
            for (e in b.loadedAtcSlots) {
                if (b.loadedAtcSlots.hasOwnProperty(e)) {
                    for (f = 0; f < b.loadedAtcSlots[e].length; f += 1) {
                        a = b.loadedAtcSlots[e][f];
                        d = a.getTemplateType();
                        if (d && d !== 'PROPOSED') {
                            c = b.getTiming(a, i, k);
                            if (c && c !== d) {
                                g = b.atcSlotTemplates[c];
                                if (!h) {
                                    Ext.suspendLayouts();
                                    h = !0
                                }
                                a.beginEdit();
                                a.setTemplateType(c);
                                a.setBgColor(g.bgColor);
                                a.setFgColor(g.fgColor);
                                a.endEdit()
                            }
                        }
                    }
                }
            }
        }
        if (h) {
            Ext.resumeLayouts(!0);
            Ext.log.info('[AtcSlot#clockChanged] Update atc slots: ' + (Date.now() - l) + ' ms')
        }
    },
    getTiming: function(a, c, o) {
        if (!a.getCtot()) {
            return
        }
        var h = c['com.lhsystems.ops.profile.server.dataimpl.defaultsapplconfiguration.ATC_DLY_TOLERANCE'],
            k = c['com.lhsystems.ops.profile.server.dataimpl.parameterconfiguration.ATC_TIMING_WITH_CTOT'],
            l = c['com.lhsystems.ops.profile.server.dataimpl.defaultsapplconfiguration.ATC_BUFFER_MINUS'],
            m = c['com.lhsystems.ops.profile.server.dataimpl.defaultsapplconfiguration.ATC_BUFFER_PLUS'],
            b, n = a.getBestDepTime(),
            g = a.getTaxiTime(),
            e = a.getCtot(),
            f, d, j, i;
        if (k === 'true') {
            f = e;
            d = e
        } else {
            f = Ext.Date.subtract(e, Ext.Date.MINUTE, l);
            d = Ext.Date.add(e, Ext.Date.MINUTE, m)
        }
        if (g && g !== 0) {
            b = Ext.Date.add(n, Ext.Date.MINUTE, g)
        } else {
            if (!b) {
                b = a.getBestTakeoffTime()
            }
        }
        if (!a.isDeparted() || a.isCancelled() || a.isReturnToRamp()) {
            j = Ext.Date.subtract(o, Ext.Date.MINUTE, h);
            if (d < j) {
                return 'MISSED'
            }
        }
        i = Ext.Date.subtract(f, Ext.Date.MINUTE, h);
        if (i > b) {
            return 'LATE'
        }
        if (d < b) {
            return 'CRITICAL'
        }
        return 'OK'
    }
}, 0, 0, 0, 0, 0, 0, [TimesSquare.controller.gantt, 'AtcSlot'], 0);
Ext.cmd.derive('TimesSquare.Application', Ext.app.Application, {
    name: 'TimesSquare',
    views: [],
    controllers: ['Login', 'Wuis.controller.EventLogger', 'Main', 'Clock', 'Selection', 'Messaging', 'SearchLeg', 'gantt.Gantt', 'gantt.LogicalAircraft', 'gantt.NonRotationalAircraft', 'gantt.AtcSlot'],
    stores: [],
    init: function() {
        Ext.Ajax.setTimeout(TimesSquare.CONFIG.application.ajaxTimeout);
        Ext.override(Ext.data.proxy.Server, {
            timeout: Ext.Ajax.timeout
        });
        Ext.override(Ext.data.Connection, {
            timeout: Ext.Ajax.timeout
        });
        Ext.override(Ext.form.Basic, {
            timeout: Ext.Ajax.timeout / 1000
        });
        TimesSquare.CONFIG.detailViewFieldSize.set(40, [0, 6, 6, 0]);
        Sch.preset.Manager.registerPreset('opsHourAndDay', {
            timeColumnWidth: 60,
            rowHeight: 60,
            resourceColumnWidth: 100,
            displayDateFormat: 'G:i',
            shiftIncrement: 1,
            shiftUnit: 'DAY',
            defaultSpan: 24,
            timeResolution: {
                unit: 'DAY',
                increment: 1
            },
            headerConfig: {
                middle: {
                    unit: 'HOUR',
                    align: 'left',
                    dateFormat: 'G',
                    renderer: TimesSquare.util.Time.createRederer('G')
                },
                top: {
                    unit: 'DAY',
                    align: 'center',
                    dateFormat: 'D dMy',
                    renderer: TimesSquare.util.Time.createRederer('D dMy')
                }
            }
        });
        Sch.preset.Manager.registerPreset('opsMinuteAndHour', {
            timeColumnWidth: 100,
            rowHeight: 60,
            resourceColumnWidth: 100,
            displayDateFormat: 'G:i',
            shiftIncrement: 1,
            shiftUnit: 'HOUR',
            defaultSpan: 48,
            timeResolution: {
                unit: 'MINUTE',
                increment: 15
            },
            headerConfig: {
                top: {
                    unit: 'HOUR',
                    align: 'center',
                    dateFormat: 'D dMy, G',
                    renderer: TimesSquare.util.Time.createRederer('D dMy, G')
                },
                middle: {
                    unit: 'MINUTE',
                    align: 'left',
                    dateFormat: 'i',
                    renderer: TimesSquare.util.Time.createRederer('i')
                }
            }
        });
        Sch.preset.Manager.registerPreset('opsWeekAndDay', {
            timeColumnWidth: 100,
            rowHeight: 60,
            resourceColumnWidth: 100,
            displayDateFormat: 'Y-m-d',
            shiftUnit: 'WEEK',
            shiftIncrement: 1,
            defaultSpan: 7,
            timeResolution: {
                unit: 'DAY',
                increment: 1
            },
            headerConfig: {
                top: {
                    unit: 'WEEK',
                    align: 'center',
                    dateFormat: 'D dMy',
                    renderer: TimesSquare.util.Time.createRederer('D dMy')
                },
                middle: {
                    unit: 'DAY',
                    align: 'center',
                    dateFormat: 'dMy',
                    renderer: TimesSquare.util.Time.createRederer('dMy')
                }
            }
        });
        Wuis.ajax.DirectService.useMsgBoxDialog = !1;
        Wuis.ajax.DirectService.provide(TimesSquare.CONFIG.application.services, 'TimesSquare.service.');
        Ext.Ajax.on('requestexception', this.handleRequestException, this);
        Ext.app.Application.prototype.init.apply(this, arguments)
    },
    handleRequestException: function(g, e, a) {
        var c = this,
            b = e.status,
            f, d;
        if (c.skipExceptionHandling(e, a)) {
            return
        }
        if (b === 401) {
            if (/\/NetLine\/oss\/sendGuiLog/.test(a.url)) {
                return
            }
            c.showRequestException(a, 'Unauthorized', 'Unauthorized access. Press OK to authenticate.', function() {
                window.location.reload();
                throw new Error('Unauthorized.')
            }, !1, b);
            return
        }
        if (b === 0) {
            if (/\/NetLine\/oss\/sendGuiLog/.test(a.url)) {
                return
            }
            c.showRequestException(a, !1, 'Connection to the server is lost.', !1, !1, b);
            return
        }
        f = e.timedout;
        if (f) {
            c.showRequestException(a, 'Timeout', 'Communication failure: timeout.', !1, !1, b);
            return
        }
        d = Ext.JSON.decode(e.responseText, !0);
        if (b === 500 && d && d.result) {
            c.showRequestException(a, !1, d.result.cause, !1, d.result.stackTrace, b);
            return
        }
        c.showRequestException(a, !1, 'Status code: ' + b)
    },
    skipExceptionHandling: function(a, f) {
        var h = this,
            g = a.status,
            b = a.request.options.url,
            e = h.getController('Login').restPrefix,
            d, c;
        if (a.aborted) {
            return !0
        }
        if (g === 503 && b.indexOf(TimesSquare.CONFIG.application.urls.notificationTopicUrl) > -1) {
            return !0
        }
        d = e + 'authorization';
        c = e + 'authentication';
        if (g === 401 && b.indexOf(d) > -1 || b.indexOf(c) > -1) {
            return !0
        }
        if (/\/NetLine\/(hornetq|amq)\//.test(f && f.url)) {
            return !0
        }
    },
    showRequestException: function(c, h, g, f, d, e) {
        var j = h || 'Communication failure',
            b = g || 'Communication failure',
            i = f || Ext.emptyFn,
            a = {
                title: j,
                buttons: Ext.MessageBox.OK,
                icon: Ext.MessageBox.ERROR,
                fn: i
            };
        if (e !== undefined) {
            b += '<br />Status code: ' + e
        }
        if (c && c.url) {
            b += '<br />Request URL: ';
            b += c.url
        }
        a.msg = b;
        if (d) {
            a.multiline = !0;
            a.value = d;
            a.width = 600;
            a.defaultTextHeight = 200
        }
        TimesSquare.Msg.show(a)
    },
    launch: function() {}
}, 0, 0, 0, 0, 0, 0, [TimesSquare, 'Application'], 0);
Ext.cmd.derive('TimesSquare.Msg', Ext.window.MessageBox, {
    singleton: !0,
    initComponent: function() {
        var a = this;
        a.callParent(arguments);
        a.textArea.setReadOnly(!0);
        a.showDetailsLink = a.promptContainer.insert(2, {
            xtype: 'button',
            text: 'Details',
            width: 75,
            margin: '0 0 10 0',
            handler: a.toggleDetailsView,
            scope: a
        })
    },
    show: function(b) {
        var a = this;
        if (b && b.msg && Ext.isString(b.msg) && b.msg.match(/:\s*$/)) {
            b.msg = b.msg.replace(/:\s*$/, '')
        }
        a.callParent(arguments);
        if (a.textArea.isVisible()) {
            a.textArea.hide();
            a.showDetailsLink.setText('Details');
            a.showDetailsLink.show()
        } else {
            a.showDetailsLink.hide()
        }
        return a
    },
    toggleDetailsView: function() {
        var a = this;
        if (a.textArea.isVisible()) {
            a.textArea.hide();
            a.showDetailsLink.setText('Details')
        } else {
            a.textArea.show();
            a.textArea.el.setWidth('100%');
            a.showDetailsLink.setText('Hide');
            a.textArea.inputEl.setWidth('100%')
        }
    }
}, 0, 0, ['component', 'box', 'container', 'panel', 'window', 'messagebox'], {
    'component': !0,
    'box': !0,
    'container': !0,
    'panel': !0,
    'window': !0,
    'messagebox': !0
}, 0, 0, [TimesSquare, 'Msg'], 0);
Ext.cmd.derive('TimesSquare.util.Window', Ext.Base, {
    wnd: null,
    cachedMessage: null,
    constructor: function(a) {
        a = a || {};
        this.config = a;
        this.open();
        this.addWindowListeners()
    },
    open: function() {
        if (!this.wnd) {
            this.createWindow(this.config)
        }
    },
    close: function() {
        this.wnd.close()
    },
    send: function(a) {
        if (this.wnd) {
            this.wnd.postMessage(a, window.location.origin)
        } else {
            this.cachedMessage = a;
            this.createWindow(this.config)
        }
    },
    createWindow: function(a) {
        var d = a.path,
            c = a.title,
            b = a.options,
            e = window.open(d, c, this.parseOptions(b));
        this.wnd = e
    },
    addWindowListeners: function() {
        var a = this;
        window.addEventListener('message', function(b) {
            a.onMessage(b)
        });
        window.addEventListener('beforeunload', function() {
            a.onUnload()
        })
    },
    parseOptions: function(a) {
        a = a || {};
        return Ext.Array.map(Object.keys(a), function(b) {
            return b + '=' + a[b]
        }).join(',')
    },
    onMessage: function(b) {
        var a = b.data;
        if (!a) {
            return
        }
        switch (a.type) {
            case 'closed':
                this.onWindowClosed();
                break;
            case 'opened':
                this.onWindowOpened();
                break;
            default:
                break;
        }
    },
    onWindowClosed: function() {
        this.wnd = null
    },
    onWindowOpened: function() {
        if (this.cachedMessage) {
            this.send(this.cachedMessage);
            this.cachedMessage = null
        }
    },
    onUnload: function() {
        if (this.wnd) {
            this.wnd.close()
        }
    }
}, 1, 0, 0, 0, 0, 0, [TimesSquare.util, 'Window'], 0);
Ext.cmd.derive('TimesSquare.controller.Inspector', Inspector.Controller, {
    enabled: !1,
    wnd: null,
    wndOptions: {
        height: 300,
        width: 900,
        menubar: 0,
        toolbar: 0,
        location: 0,
        personalbar: 0,
        chrome: 1,
        dialog: 1,
        resizable: 0,
        dependent: 1
    },
    init: function() {},
    onKeyDown: function(a) {
        if (a.getKeyName() === 'I' && a.ctrlKey) {
            this[this.enabled ? 'disable' : 'enable']()
        }
    },
    enable: function() {
        Inspector.Controller.prototype.enable.apply(this, arguments);
        this.enabled = !0;
        if (!this.wnd) {
            this.wnd = new TimesSquare.util.Window({
                path: 'resources/inspector.html',
                title: 'Inspector Tool',
                options: this.wndOptions
            })
        }
        this.wnd.open()
    },
    disable: function() {
        Inspector.Controller.prototype.disable.apply(this, arguments);
        this.enabled = !1
    },
    publishTarget: function() {
        var b = this.target,
            c = b && b.getInspectionChain(),
            a = c && c.map(function(a) {
                return a.getInspectionSelector()
            }).join(' -> ');
        if (a) {
            this.wnd.send({
                type: 'selected',
                payload: a
            });
            this.disable()
        }
    },
    setTarget: function(a) {
        this.target = a;
        this.highlight(a)
    },
    onWindowClick: function() {
        if (this.enabled) {
            this.publishTarget()
        }
    }
}, 0, 0, 0, 0, 0, 0, [TimesSquare.controller, 'Inspector'], 0);
Ext.cmd.derive('TimesSquare.model.details.Aircraft', Ext.data.Model, {
    proxy: {
        type: 'rest',
        appendId: !1,
        reader: {
            type: 'json',
            rootProperty: 'result'
        }
    },
    getPerformanceUrl: function() {
        var a = this.get('hyperMedia'),
            b = a && a.urlPerformance;
        return b
    },
    fields: [{
        name: 'hyperMedia',
        type: 'auto'
    }, {
        name: 'registration',
        type: 'string',
        mapping: 'acBase.registration'
    }, {
        name: 'alternativeRegistration',
        type: 'string',
        mapping: 'acBase.alternativeRegistration'
    }, {
        name: 'owner',
        type: 'string',
        mapping: 'acBase.owner'
    }, {
        name: 'ownerName',
        type: 'string',
        mapping: 'acBase.ownerName'
    }, {
        name: 'subtype',
        type: 'string',
        mapping: 'acBase.subtype'
    }, {
        name: 'subtypeName',
        type: 'string',
        mapping: 'acBase.subtypeName'
    }, {
        name: 'validSince',
        type: 'date',
        dateFormat: 'c',
        mapping: 'acBase.validSince'
    }, {
        name: 'validUntil',
        type: 'date',
        dateFormat: 'c',
        mapping: 'acBase.validUntil'
    }, {
        name: 'operator',
        type: 'string',
        mapping: 'acBase.operator'
    }, {
        name: 'apRestriction',
        type: 'boolean',
        mapping: 'acEquipment.apRestriction',
        convert: function(a) {
            return Ext.util.Format.booleanToString(a)
        }
    }, {
        name: 'weight',
        type: 'number',
        mapping: 'acWeight.dryOperatingWeight'
    }, {
        name: 'acIndex',
        type: 'string',
        mapping: 'acBase.acIndex'
    }, {
        name: 'callSign',
        type: 'string',
        mapping: 'acContact.callSign'
    }, {
        name: 'mtow',
        type: 'number',
        mapping: 'acWeight.maxTakeoffWeight'
    }, {
        name: 'logicalNo',
        type: 'string',
        mapping: 'acBase.logicalNo'
    }, {
        name: 'radio',
        type: 'string',
        mapping: 'acContact.radio'
    }, {
        name: 'cargoCapacity',
        type: 'number',
        mapping: 'acWeight.cargoCapacity'
    }, {
        name: 'state',
        type: 'string',
        mapping: 'acBase.state'
    }, {
        name: 'acars',
        type: 'string',
        mapping: 'acContact.acars'
    }, {
        name: 'fuelCapacity',
        type: 'number',
        mapping: 'acFuel.fuelCapacity'
    }, {
        name: 'noiseFactor',
        type: 'boolean',
        mapping: 'acEquipment.noiseFactor',
        convert: function(a) {
            return Ext.util.Format.booleanToString(a)
        }
    }, {
        name: 'phone',
        type: 'string',
        mapping: 'acContact.phone'
    }, {
        name: 'averageFuelConsumption',
        type: 'number',
        mapping: 'acFuel.averageFuelConsumption'
    }, {
        name: 'standardVersion',
        type: 'string',
        mapping: 'acEquipment.standardVersion'
    }, {
        name: 'versionName',
        type: 'string',
        mapping: 'acEquipment.versionName'
    }, {
        name: 'compartments',
        type: 'string',
        mapping: 'acEquipment.compartments'
    }, {
        name: 'cockpitCrewSize',
        type: 'number',
        mapping: 'acEquipment.cockpitCrewSize'
    }, {
        name: 'cabinCrewSize',
        type: 'number',
        mapping: 'acEquipment.cabinCrewSize'
    }, {
        name: 'specialEquipment',
        type: 'string',
        mapping: 'acEquipment.specialEquipment'
    }, {
        name: 'remark',
        type: 'string',
        mapping: 'acBase.remark'
    }, {
        name: 'restrictionsList',
        type: 'auto'
    }]
}, 0, 0, 0, 0, 0, 0, [TimesSquare.model.details, 'Aircraft'], 0);
Ext.cmd.derive('TimesSquare.model.details.Restriction', Ext.data.Model, {
    proxy: {
        type: 'memory'
    },
    fields: [{
        name: 'type',
        type: 'string'
    }, {
        name: 'validFrom',
        type: 'date',
        dateFormat: 'c'
    }, {
        name: 'validUntil',
        type: 'date',
        dateFormat: 'c'
    }, {
        name: 'acknowledgeState',
        type: 'string'
    }, {
        name: 'acknowledgeUser',
        type: 'string'
    }, {
        name: 'acknowledgeDate',
        type: 'date',
        dateFormat: 'c'
    }, {
        name: 'remarks',
        type: 'string'
    }, {
        name: 'missingRequirements',
        type: 'string'
    }, {
        name: 'expireDate',
        type: 'date',
        dateFormat: 'c'
    }, {
        name: 'totalFlightHours',
        type: 'auto',
        convert: function(a) {
            return Ext.util.Format.durationRenderer(a)
        }
    }, {
        name: 'totalCycles',
        type: 'number'
    }, {
        name: 'ataCode',
        type: 'string',
        mapping: 'ataChapter',
        convert: function(c, b) {
            var a = ['ataChapter', 'ataSubChapter', 'ataSection', 'ataItem'];
            return Ext.util.Format.concatRecordFields(b, a, ' / ')
        }
    }, {
        name: 'ataChapter',
        type: 'string'
    }, {
        name: 'ataSubChapter',
        type: 'string'
    }, {
        name: 'ataSection',
        type: 'string'
    }, {
        name: 'ataItem',
        type: 'string'
    }, {
        name: 'ataDescription',
        type: 'string'
    }, {
        name: 'description',
        type: 'string'
    }, {
        name: 'limitations',
        type: 'string'
    }, {
        name: 'technicalReason',
        type: 'string'
    }, {
        name: 'aircraftFeature',
        type: 'string'
    }]
}, 0, 0, 0, 0, 0, 0, [TimesSquare.model.details, 'Restriction'], 0);
Ext.cmd.derive('TimesSquare.view.details.DetailPanel', Ext.form.Panel, {
    title: 'Detail Panel',
    autoScroll: !0,
    border: !1,
    closable: !0,
    bodyPadding: 10,
    minWidth: 865,
    cls: 'detail-panel',
    initComponent: function() {
        var a = this;
        a.mxCreateItems();
        Ext.form.Panel.prototype.initComponent.apply(this, arguments)
    },
    detailType: null,
    modelName: null,
    afterModelLoadedIntoForm: null,
    updateView: function(b, c) {
        var a = this;
        if (!a.modelName) {
            return
        }
        if (Ext.isObject(c)) {
            a.loadRecord(c);
            b.setLoading(!1);
            a.setLoading(!1);
            a.down('tabpanel').setActiveTab(1)
        } else {
            TimesSquare.model.details[a.modelName].getProxy().url = c;
            TimesSquare.model.details[a.modelName].load(undefined, {
                failure: function() {
                    b.setLoading(!1);
                    a.setLoading(!1)
                },
                success: function(d) {
                    a.loadRecord(d);
                    if (a.afterModelLoadedIntoForm) {
                        a.afterModelLoadedIntoForm(a, d)
                    }
                    b.setLoading(!1);
                    a.setLoading(!1);
                    a.down('tabpanel').setActiveTab(a.is('details_aircraft_aircraft') ? 0 : 1)
                }
            })
        }
    },
    clearView: function() {
        var a = this;
        if (a.down('details_aircraft_allrestrictions')) {
            a.down('details_aircraft_allrestrictions').getSelectionModel().suspendEvent('selectionchange')
        }
        a.getForm().reset(!0);
        if (a.down('details_aircraft_allrestrictions')) {
            a.down('details_aircraft_allrestrictions').getSelectionModel().resumeEvent('selectionchange')
        }
        if (a.resetToDefaultState) {
            a.resetToDefaultState()
        }
        a.setLoading(!1)
    }
}, 0, ['details_detailpanel'], ['component', 'box', 'container', 'panel', 'form', 'details_detailpanel'], {
    'component': !0,
    'box': !0,
    'container': !0,
    'panel': !0,
    'form': !0,
    'details_detailpanel': !0
}, ['widget.details_detailpanel'], [
    ['fieldSizeMixin', TimesSquare.mixin.FieldSizeMixin]
], [TimesSquare.view.details, 'DetailPanel'], 0);
Ext.cmd.derive('TimesSquare.model.IdFactory', Ext.Base, {
    statics: {
        TYPE: {
            LEG: 'LEG',
            CHECK: 'CHECK',
            AIRCRAFT: 'AIRCRAFT'
        },
        getEventName: function(a) {
            return this.getLegName(a.natKey.flight)
        },
        getLegName: function(a) {
            var b = a.fnCarrier;
            if (!Ext.isEmpty(a.fnNumber)) {
                b = b + a.fnNumber
            }
            if (!Ext.isEmpty(a.fnSuffix) && a.fnSuffix !== ' ') {
                b = b + a.fnSuffix
            }
            return b
        },
        getEventNaturalIdString: function(a) {
            return this.getNaturalIdString(this.getEventName, a)
        },
        getNaturalIdString: function(d, a) {
            var b = d.call(this, a),
                c = Ext.String.format('{0}-{1}-{2}', b, a.departureSched, a.natKey.depApSched);
            return c
        },
        getEventId: function(e, b) {
            var a = ['{0}-{1}-{2}', e, b.ResourceId, b.eventType],
                c = b.counter,
                d;
            if (Ext.isNumber(c)) {
                a[0] += '-{3}';
                Ext.Array.insert(a, 3, [c])
            }
            d = Ext.String.format.apply(null, a);
            return d.replace(/:/g, '-')
        }
    }
}, 0, 0, 0, 0, 0, 0, [TimesSquare.model, 'IdFactory'], 0);
Ext.cmd.derive('TimesSquare.view.details.aircraft.Aircraft', TimesSquare.view.details.DetailPanel, {
    title: 'Aircraft Details',
    modelName: 'Aircraft',
    statics: {
        showAlternativeRegistration: !1
    },
    constructor: function() {
        this.detailType = TimesSquare.model.IdFactory.TYPE.AIRCRAFT;
        return TimesSquare.view.details.DetailPanel.prototype.constructor.apply(this, arguments)
    },
    width: 970,
    afterModelLoadedIntoForm: function() {
        var a = this,
            e = a.down('#spacer1'),
            d = a.down('#alternativeRegistrationLabel'),
            c = a.down('#alternativeRegistrationField'),
            b = a.self.showAlternativeRegistration;
        e[b ? 'hide' : 'show']();
        d[b ? 'show' : 'hide']();
        c[b ? 'show' : 'hide']()
    },
    clearView: function() {
        var a = this,
            b = a.down('details_aircraft_allrestrictions').getSelectionModel();
        b.suspendEvent('selectionchange');
        a.getForm().reset(!0);
        b.resumeEvent('selectionchange');
        a.setLoading(!1)
    },
    createItems: function(c, a, b, d) {
        var e = this;
        e.items = [{
            xtype: 'container',
            defaults: {
                margin: d,
                readOnly: !0
            },
            layout: {
                type: 'table',
                columns: 8
            },
            items: [{
                xtype: 'label',
                text: 'Registration'
            }, {
                xtype: 'textfield',
                fieldLabel: '',
                width: a,
                name: 'registration',
                cls: 'test-id-aircraftdetail-registration'
            }, {
                xtype: 'box',
                itemId: 'spacer1',
                colspan: 2,
                hidden: !0
            }, {
                xtype: 'label',
                text: 'Alt. Registration',
                itemId: 'alternativeRegistrationLabel'
            }, {
                xtype: 'textfield',
                fieldLabel: '',
                width: a,
                name: 'alternativeRegistration',
                cls: 'test-id-aircraftdetail-alternativeRegistration',
                itemId: 'alternativeRegistrationField'
            }, {
                xtype: 'label',
                text: 'Owner'
            }, {
                xtype: 'textfield',
                fieldLabel: '',
                width: c,
                name: 'owner',
                cls: 'test-id-aircraftdetail-owner'
            }, {
                xtype: 'label',
                text: '/'
            }, {
                xtype: 'textfield',
                fieldLabel: '',
                width: b,
                name: 'ownerName',
                cls: 'test-id-aircraftdetail-ownerName'
            }, {
                xtype: 'label',
                text: 'Valid From'
            }, {
                xtype: 'datefield',
                fieldLabel: '',
                hideTrigger: !0,
                name: 'validSince',
                cls: 'test-id-aircraftdetail-validSince'
            }, {
                xtype: 'label',
                text: 'Until'
            }, {
                xtype: 'datefield',
                fieldLabel: '',
                hideTrigger: !0,
                name: 'validUntil',
                cls: 'test-id-aircraftdetail-validUntil'
            }, {
                xtype: 'label',
                text: 'Sub Type'
            }, {
                xtype: 'textfield',
                fieldLabel: '',
                width: c,
                name: 'subtype',
                cls: 'test-id-aircraftdetail-subtype'
            }, {
                xtype: 'label',
                text: '/'
            }, {
                xtype: 'textfield',
                fieldLabel: '',
                width: b,
                name: 'subtypeName',
                cls: 'test-id-aircraftdetail-subtypeName'
            }]
        }, {
            xtype: 'details_aircraft_tabs',
            margin: '15px 0 0 0'
        }]
    }
}, 1, ['details_aircraft_aircraft'], ['component', 'box', 'container', 'panel', 'form', 'details_detailpanel', 'details_aircraft_aircraft'], {
    'component': !0,
    'box': !0,
    'container': !0,
    'panel': !0,
    'form': !0,
    'details_detailpanel': !0,
    'details_aircraft_aircraft': !0
}, ['widget.details_aircraft_aircraft'], 0, [TimesSquare.view.details.aircraft, 'Aircraft'], 0);
Ext.cmd.derive('TimesSquare.view.details.aircraft.Tabs', Ext.tab.Panel, {
    plain: !0,
    items: [{
        title: 'Basic',
        xtype: 'details_aircraft_basictab'
    }, {
        title: 'Performance',
        xtype: 'details_aircraft_performancetab'
    }, {
        title: 'Restrictions & Features',
        xtype: 'details_aircraft_restrictionstab'
    }]
}, 0, ['details_aircraft_tabs'], ['component', 'box', 'container', 'panel', 'tabpanel', 'details_aircraft_tabs'], {
    'component': !0,
    'box': !0,
    'container': !0,
    'panel': !0,
    'tabpanel': !0,
    'details_aircraft_tabs': !0
}, ['widget.details_aircraft_tabs'], 0, [TimesSquare.view.details.aircraft, 'Tabs'], 0);
Ext.cmd.derive('TimesSquare.view.details.aircraft.BasicTab', Ext.container.Container, {
    padding: '10px 5px',
    layout: {
        type: 'table',
        columns: 7
    },
    initComponent: function() {
        var a = this;
        a.mxCreateItems();
        Ext.container.Container.prototype.initComponent.apply(this, arguments)
    },
    createItems: function(e, d, a, c) {
        var b = this;
        b.defaults = {
            margin: c,
            readOnly: !0
        };
        b.items = [{
            xtype: 'label',
            text: 'Operator'
        }, {
            xtype: 'textfield',
            fieldLabel: '',
            width: a,
            name: 'operator',
            cls: 'test-id-aircraftdetail-basic-operator'
        }, {
            xtype: 'label',
            text: 'Restriction'
        }, {
            xtype: 'textfield',
            fieldLabel: '',
            width: a,
            name: 'apRestriction',
            cls: 'test-id-aircraftdetail-basic-apRestriction'
        }, {
            xtype: 'label',
            text: 'Weight'
        }, {
            xtype: 'numberfield',
            fieldLabel: '',
            width: a,
            name: 'weight',
            cls: 'test-id-aircraftdetail-basic-weight'
        }, {
            xtype: 'label',
            text: 'Kg'
        }, {
            xtype: 'label',
            text: 'Index'
        }, {
            xtype: 'textfield',
            fieldLabel: '',
            width: a,
            name: 'acIndex',
            cls: 'test-id-aircraftdetail-basic-acIndex'
        }, {
            xtype: 'label',
            text: 'Call Sign'
        }, {
            xtype: 'textfield',
            fieldLabel: '',
            width: a,
            name: 'callSign',
            cls: 'test-id-aircraftdetail-basic-callSign'
        }, {
            xtype: 'label',
            text: 'MTOW'
        }, {
            xtype: 'numberfield',
            fieldLabel: '',
            width: a,
            name: 'mtow',
            cls: 'test-id-aircraftdetail-basic-mtow'
        }, {
            xtype: 'label',
            text: 'Kg'
        }, {
            xtype: 'label',
            text: 'Logical No.'
        }, {
            xtype: 'textfield',
            fieldLabel: '',
            width: a,
            name: 'logicalNo',
            cls: 'test-id-aircraftdetail-basic-logicalNo'
        }, {
            xtype: 'label',
            text: 'Radio'
        }, {
            xtype: 'textfield',
            fieldLabel: '',
            width: a,
            name: 'radio',
            cls: 'test-id-aircraftdetail-basic-radio'
        }, {
            xtype: 'label',
            text: 'Cargo Cap.'
        }, {
            xtype: 'numberfield',
            fieldLabel: '',
            width: a,
            name: 'cargoCapacity',
            cls: 'test-id-aircraftdetail-basic-cargoCapacity'
        }, {
            xtype: 'label',
            text: 'Kg'
        }, {
            xtype: 'label',
            text: 'State'
        }, {
            xtype: 'textfield',
            fieldLabel: '',
            width: a,
            name: 'state',
            cls: 'test-id-aircraftdetail-basic-state'
        }, {
            xtype: 'label',
            text: 'ACARS'
        }, {
            xtype: 'textfield',
            fieldLabel: '',
            width: a,
            name: 'acars',
            cls: 'test-id-aircraftdetail-basic-acars'
        }, {
            xtype: 'label',
            text: 'Fuel Cap.'
        }, {
            xtype: 'numberfield',
            fieldLabel: '',
            width: a,
            name: 'fuelCapacity',
            cls: 'test-id-aircraftdetail-basic-fuelCapacity'
        }, {
            xtype: 'label',
            text: 'Kg'
        }, {
            xtype: 'label',
            text: 'Noise Factor'
        }, {
            xtype: 'textfield',
            fieldLabel: '',
            width: a,
            name: 'noiseFactor',
            cls: 'test-id-aircraftdetail-basic-noiseFactor'
        }, {
            xtype: 'label',
            text: 'Phone'
        }, {
            xtype: 'textfield',
            fieldLabel: '',
            width: a,
            name: 'phone',
            cls: 'test-id-aircraftdetail-basic-phone'
        }, {
            xtype: 'label',
            text: 'Avg. Fuel Cons.'
        }, {
            xtype: 'numberfield',
            fieldLabel: '',
            width: a,
            name: 'averageFuelConsumption',
            cls: 'test-id-aircraftdetail-basic-averageFuelConsumption'
        }, {
            xtype: 'label',
            text: 'Kg'
        }, {
            xtype: 'label',
            text: 'Standard Version'
        }, {
            xtype: 'textfield',
            colspan: 3,
            fieldLabel: '',
            width: 324,
            name: 'standardVersion',
            cls: 'test-id-aircraftdetail-basic-standardVersion'
        }, {
            xtype: 'label',
            text: 'Compartments'
        }, {
            xtype: 'textfield',
            colspan: 2,
            fieldLabel: '',
            name: 'compartments',
            cls: 'test-id-aircraftdetail-basic-compartments'
        }, {
            xtype: 'label',
            text: ''
        }, {
            xtype: 'textfield',
            colspan: 3,
            fieldLabel: '',
            width: 324,
            name: 'versionName',
            cls: 'test-id-aircraftdetail-basic-versionName'
        }, {
            xtype: 'box',
            colspan: 3
        }, {
            xtype: 'label',
            text: 'Cockpit Crew'
        }, {
            xtype: 'numberfield',
            fieldLabel: '',
            width: a,
            name: 'cockpitCrewSize',
            cls: 'test-id-aircraftdetail-basic-cockpitCrewSize'
        }, {
            xtype: 'label',
            text: 'Cabin Crew'
        }, {
            xtype: 'numberfield',
            colspan: 4,
            fieldLabel: '',
            width: a,
            name: 'cabinCrewSize',
            cls: 'test-id-aircraftdetail-basic-cabinCrewSize'
        }, {
            xtype: 'label',
            text: 'Special Equipment'
        }, {
            xtype: 'textfield',
            colspan: 6,
            fieldLabel: '',
            width: 550,
            name: 'specialEquipment',
            cls: 'test-id-aircraftdetail-basic-specialEquipment'
        }, {
            xtype: 'label',
            text: 'Remarks'
        }, {
            xtype: 'textarea',
            colspan: 6,
            fieldLabel: '',
            width: 550,
            name: 'remark',
            cls: 'test-id-aircraftdetail-basic-remark'
        }]
    }
}, 0, ['details_aircraft_basictab'], ['component', 'box', 'container', 'details_aircraft_basictab'], {
    'component': !0,
    'box': !0,
    'container': !0,
    'details_aircraft_basictab': !0
}, ['widget.details_aircraft_basictab'], [
    ['fieldSizeMixin', TimesSquare.mixin.FieldSizeMixin]
], [TimesSquare.view.details.aircraft, 'BasicTab'], 0);
Ext.cmd.derive('TimesSquare.view.details.aircraft.RestrictionsTab', Ext.container.Container, {
    padding: '10px 5px',
    initComponent: function() {
        var a = this;
        a.createItems();
        Ext.container.Container.prototype.initComponent.apply(this, arguments)
    },
    createItems: function() {
        var a = this;
        a.items = [{
            xtype: 'fieldset',
            title: 'Restrictions',
            cls: 'dwFieldset',
            items: [{
                xtype: 'details_aircraft_allrestrictions'
            }]
        }, {
            xtype: 'fieldset',
            title: 'Restriction Details',
            cls: 'dwFieldset',
            items: [{
                xtype: 'details_aircraft_restrictiondetails'
            }]
        }]
    }
}, 0, ['details_aircraft_restrictionstab'], ['component', 'box', 'container', 'details_aircraft_restrictionstab'], {
    'component': !0,
    'box': !0,
    'container': !0,
    'details_aircraft_restrictionstab': !0
}, ['widget.details_aircraft_restrictionstab'], 0, [TimesSquare.view.details.aircraft, 'RestrictionsTab'], 0);
Ext.cmd.derive('Alf.form.field.Grid', Ext.grid.Panel, {
    enableColumnHide: !1,
    useGetWriteData: !1,
    getValue: function() {
        var c = this.store,
            b = this.filterFn,
            e = this.useGetWriteData,
            d = c.snapshot || c.data,
            a = [];
        if (!d) {
            return null
        }
        d.each(function(c) {
            if (!b || b(c) !== !1) {
                a[a.length] = e ? c.getWriteData() : c.data
            }
        });
        return a
    },
    setValue: function(b) {
        var a = this;
        if (b) {
            a.store.loadData(b)
        } else {
            a.store.removeAll()
        }
        a.fireEvent('change', a, b);
        return a
    },
    checkChange: function() {},
    isDirty: function() {},
    initComponent: function() {
        var a = this;
        if (!a.store && a.model) {
            a.store = Ext.create('Ext.data.Store', {
                proxy: 'memory',
                model: a.model
            })
        }
        if (!a.store && a.fields) {
            a.store = Ext.create('Ext.data.Store', {
                proxy: 'memory',
                fields: a.fields
            })
        }
        Ext.grid.Panel.prototype.initComponent.call(this);
        a.initField()
    }
}, 0, ['gridfield'], ['component', 'box', 'container', 'panel', 'tablepanel', 'gridpanel', 'grid', 'gridfield'], {
    'component': !0,
    'box': !0,
    'container': !0,
    'panel': !0,
    'tablepanel': !0,
    'gridpanel': !0,
    'grid': !0,
    'gridfield': !0
}, ['widget.gridfield'], [
    ['field', Ext.form.field.Field]
], [Alf.form.field, 'Grid'], 0);
Ext.cmd.derive('TimesSquare.view.details.aircraft.AllRestrictions', Alf.form.field.Grid, {
    name: 'restrictionsList',
    model: 'TimesSquare.model.details.Restriction',
    readOnly: !0,
    initComponent: function() {
        var a = this;
        a.columns = a.getGridColumns();
        Alf.form.field.Grid.prototype.initComponent.apply(this, arguments)
    },
    displayRestrictions: function() {},
    getGridColumns: function() {
        return {
            defaults: {
                type: 'string',
                flex: 1,
                menuDisabled: !0,
                sortable: !1,
                draggable: !1,
                hideable: !1,
                lockable: !1
            },
            items: [{
                header: 'Type',
                dataIndex: 'type'
            }, {
                xtype: 'datecolumn',
                header: 'Valid From',
                format: 'dMy H:i',
                dataIndex: 'validFrom'
            }, {
                xtype: 'datecolumn',
                header: 'Valid Until',
                format: 'dMy H:i',
                dataIndex: 'validUntil'
            }, {
                header: 'Remark',
                dataIndex: 'remarks'
            }, {
                header: 'ATA Code',
                dataIndex: 'ataCode'
            }, {
                header: 'ATA Description',
                dataIndex: 'ataDescription'
            }, {
                header: 'Missing Requirements',
                dataIndex: 'missingRequirements'
            }, {
                header: 'Feature',
                dataIndex: 'aircraftFeature'
            }, {
                header: 'Technical',
                dataIndex: 'technicalReason'
            }, {
                header: 'ACK State',
                dataIndex: 'acknowledgeState'
            }, {
                header: 'ACK User',
                dataIndex: 'acknowledgeUser'
            }, {
                xtype: 'datecolumn',
                header: 'ACK Date',
                format: 'dMy H:i',
                dataIndex: 'acknowledgeDate'
            }]
        }
    }
}, 0, ['details_aircraft_allrestrictions'], ['component', 'box', 'container', 'panel', 'tablepanel', 'gridpanel', 'grid', 'gridfield', 'details_aircraft_allrestrictions'], {
    'component': !0,
    'box': !0,
    'container': !0,
    'panel': !0,
    'tablepanel': !0,
    'gridpanel': !0,
    'grid': !0,
    'gridfield': !0,
    'details_aircraft_allrestrictions': !0
}, ['widget.details_aircraft_allrestrictions'], 0, [TimesSquare.view.details.aircraft, 'AllRestrictions'], 0);
Ext.cmd.derive('TimesSquare.view.details.aircraft.RestrictionDetails', Ext.form.Panel, {
    padding: '10px 5px',
    border: !1,
    layout: {
        type: 'table',
        columns: 11
    },
    initComponent: function() {
        var a = this;
        a.createItems();
        Ext.form.Panel.prototype.initComponent.apply(this, arguments)
    },
    createItems: function() {
        var b = this,
            a;
        a = b.getAreaLayout();
        b.items = Alf.MetaManager.decorateFields('AircraftDetail.fields', a)
    },
    displayFields: function(d) {
        var a = this,
            c = a.getFieldsLayout(d),
            b;
        a.removeAll();
        b = Alf.MetaManager.decorateFields('AircraftDetail.fields', c);
        a.add(b)
    },
    getFieldsLayout: function(b) {
        var a = this;
        b = b.toLowerCase();
        switch (b) {
            case 'mel_item':
                return a.getMelItemLayout();
            case 'area':
                return a.getAreaLayout();
            case 'technical':
                return a.getTechnicalLayout();
            case 'feature':
                return a.getFeatureLayout();
            default:
                return undefined;
        }
    },
    getMelItemLayout: function() {
        return [{
            mtype: 'typeLabel',
            colspan: 1
        }, {
            mtype: 'type',
            colspan: 2
        }, {
            xtype: 'box',
            colspan: 3
        }, {
            mtype: 'acknowledgeStateLabel',
            colspan: 1
        }, {
            mtype: 'acknowledgeState',
            colspan: 1
        }, {
            xtype: 'box',
            colspan: 3
        }, {
            mtype: 'validFromLabel'
        }, {
            mtype: 'validFrom'
        }, {
            mtype: 'validFromTF'
        }, {
            mtype: 'validUntilLabel'
        }, {
            mtype: 'validUntil'
        }, {
            mtype: 'validUntilTF'
        }, {
            mtype: 'acknowledgeUserLabel'
        }, {
            mtype: 'acknowledgeUser'
        }, {
            mtype: 'acknowledgeDateLabel'
        }, {
            mtype: 'acknowledgeDate'
        }, {
            mtype: 'acknowledgeDateTF'
        }, {
            mtype: 'remarksLabel',
            colspan: 1
        }, {
            mtype: 'remarks',
            colspan: 10
        }, {
            mtype: 'expireDateLabel'
        }, {
            mtype: 'expireDate'
        }, {
            mtype: 'expireDateTF'
        }, {
            mtype: 'ataChapterLabel'
        }, {
            mtype: 'ataChapter',
            colspan: 2
        }, {
            mtype: 'ataSubChapter',
            colspan: 2
        }, {
            mtype: 'ataSection',
            colspan: 2
        }, {
            mtype: 'ataItem',
            colspan: 2
        }, {
            mtype: 'totalFlightHoursLabel',
            colspan: 1
        }, {
            mtype: 'totalFlightHours',
            colspan: 2
        }, {
            mtype: 'ataDescriptionLabel',
            colspan: 1,
            rowspan: 2
        }, {
            mtype: 'ataDescription',
            colspan: 7,
            rowspan: 2
        }, {
            mtype: 'totalCyclesLabel',
            colspan: 1
        }, {
            mtype: 'totalCycles',
            colspan: 2
        }, {
            mtype: 'descriptionLabel',
            colspan: 1
        }, {
            mtype: 'description',
            colspan: 10
        }, {
            mtype: 'limitationsLabel',
            colspan: 1
        }, {
            mtype: 'limitations',
            colspan: 10
        }, {
            mtype: 'missingRequirementsLabel',
            colspan: 1
        }, {
            mtype: 'missingRequirements',
            colspan: 10
        }]
    },
    getTechnicalLayout: function() {
        return [{
            mtype: 'typeLabel'
        }, {
            mtype: 'type',
            colspan: 10
        }, {
            mtype: 'validFromLabel'
        }, {
            mtype: 'validFrom'
        }, {
            mtype: 'validFromTF'
        }, {
            mtype: 'validUntilLabel'
        }, {
            mtype: 'validUntil'
        }, {
            mtype: 'validUntilTF'
        }, {
            xtype: 'box',
            width: 500,
            colspan: 6
        }, {
            mtype: 'remarksLabel'
        }, {
            mtype: 'remarks',
            colspan: 10
        }, {
            mtype: 'technicalReasonLabel'
        }, {
            mtype: 'technicalReason',
            colspan: 10
        }]
    },
    getAreaLayout: function() {
        return [{
            mtype: 'typeLabel'
        }, {
            mtype: 'type',
            colspan: 10
        }, {
            mtype: 'validFromLabel'
        }, {
            mtype: 'validFrom'
        }, {
            mtype: 'validFromTF'
        }, {
            mtype: 'validUntilLabel'
        }, {
            mtype: 'validUntil'
        }, {
            mtype: 'validUntilTF'
        }, {
            xtype: 'box',
            width: 500,
            colspan: 6
        }, {
            mtype: 'remarksLabel',
            colspan: 1
        }, {
            mtype: 'remarks',
            colspan: 10
        }, {
            mtype: 'missingRequirementsLabel'
        }, {
            mtype: 'missingRequirements',
            colspan: 10
        }]
    },
    getFeatureLayout: function() {
        return [{
            mtype: 'typeLabel'
        }, {
            mtype: 'type',
            colspan: 10
        }, {
            mtype: 'validFromLabel'
        }, {
            mtype: 'validFrom'
        }, {
            mtype: 'validFromTF'
        }, {
            mtype: 'validUntilLabel'
        }, {
            mtype: 'validUntil'
        }, {
            mtype: 'validUntilTF'
        }, {
            xtype: 'box',
            width: 500,
            colspan: 6
        }, {
            mtype: 'remarksLabel',
            colspan: 1
        }, {
            mtype: 'remarks',
            colspan: 10
        }, {
            mtype: 'aircraftFeatureLabel'
        }, {
            mtype: 'aircraftFeature',
            colspan: 10
        }]
    }
}, 0, ['details_aircraft_restrictiondetails'], ['component', 'box', 'container', 'panel', 'form', 'details_aircraft_restrictiondetails'], {
    'component': !0,
    'box': !0,
    'container': !0,
    'panel': !0,
    'form': !0,
    'details_aircraft_restrictiondetails': !0
}, ['widget.details_aircraft_restrictiondetails'], 0, [TimesSquare.view.details.aircraft, 'RestrictionDetails'], 0);
Ext.cmd.derive('TimesSquare.view.details.aircraft.Meta', Ext.Base, {
    singleton: !0,
    constructor: function() {
        var b = TimesSquare.CONFIG.detailViewFieldSize,
            c = b.mediumField,
            a = b.largeField,
            d = b.margin;
        this.callParent(arguments);
        this.fieldsDefaults = {
            margin: d,
            readOnly: !0
        };
        this.fields = {
            typeLabel: {
                xtype: 'label',
                text: 'Restriction Type',
                width: 130
            },
            type: {
                xtype: 'textfield',
                fieldLabel: '',
                width: a,
                cls: 'test-id-aircraftdetail-restriction-type'
            },
            acknowledgeStateLabel: {
                xtype: 'label',
                text: 'ACK State',
                width: 130
            },
            acknowledgeState: {
                xtype: 'textfield',
                fieldLabel: '',
                width: c,
                cls: 'test-id-aircraftdetail-restriction-acknowledgeState'
            },
            validFromLabel: {
                xtype: 'label',
                text: 'Valid From'
            },
            validFrom: {
                xtype: 'datefield',
                hideTrigger: !0,
                fieldLabel: '',
                timeFieldName: 'validFromTF',
                cls: 'test-id-aircraftdetail-restriction-validFrom'
            },
            validFromTF: {
                xtype: 'timefield',
                fieldLabel: '',
                cls: 'test-id-aircraftdetail-restriction-validFromTF'
            },
            validUntilLabel: {
                xtype: 'label',
                text: 'Until'
            },
            validUntil: {
                xtype: 'datefield',
                hideTrigger: !0,
                fieldLabel: '',
                timeFieldName: 'validUntilTF',
                cls: 'test-id-aircraftdetail-restriction-validUntil'
            },
            validUntilTF: {
                xtype: 'timefield',
                fieldLabel: '',
                cls: 'test-id-aircraftdetail-restriction-validUntilTF'
            },
            acknowledgeUserLabel: {
                xtype: 'label',
                text: 'ACK User'
            },
            acknowledgeUser: {
                xtype: 'textfield',
                fieldLabel: '',
                width: c,
                cls: 'test-id-aircraftdetail-restriction-acknowledgeUser'
            },
            acknowledgeDateLabel: {
                xtype: 'label',
                text: 'ACK Date'
            },
            acknowledgeDate: {
                xtype: 'datefield',
                hideTrigger: !0,
                fieldLabel: '',
                timeFieldName: 'acknowledgeDateTF',
                cls: 'test-id-aircraftdetail-restriction-acknowledgeDate'
            },
            acknowledgeDateTF: {
                xtype: 'timefield',
                fieldLabel: '',
                cls: 'test-id-aircraftdetail-restriction-acknowledgeDateTF'
            },
            remarksLabel: {
                xtype: 'label',
                text: 'Remarks'
            },
            remarks: {
                xtype: 'textarea',
                width: '100%',
                fieldLabel: '',
                cls: 'test-id-aircraftdetail-restriction-remarks'
            },
            expireDateLabel: {
                xtype: 'label',
                text: 'Expire Date'
            },
            expireDate: {
                xtype: 'datefield',
                fieldLabel: '',
                timeFieldName: 'expireDateTF',
                cls: 'test-id-aircraftdetail-restriction-expireDate'
            },
            expireDateTF: {
                xtype: 'timefield',
                fieldLabel: '',
                cls: 'test-id-aircraftdetail-restriction-expireDateTF'
            },
            ataChapterLabel: {
                xtype: 'label',
                text: 'ATA Code'
            },
            ataChapter: {
                xtype: 'textfield',
                fieldLabel: '',
                cls: 'test-id-aircraftdetail-restriction-ataChapter'
            },
            ataSubChapter: {
                xtype: 'textfield',
                fieldLabel: '',
                cls: 'test-id-aircraftdetail-restriction-ataSubChapter'
            },
            ataSection: {
                xtype: 'textfield',
                fieldLabel: '',
                cls: 'test-id-aircraftdetail-restriction-ataSection'
            },
            ataItem: {
                xtype: 'textfield',
                fieldLabel: '',
                cls: 'test-id-aircraftdetail-restriction-ataItem'
            },
            totalFlightHoursLabel: {
                xtype: 'label',
                text: 'Total Flight Hours',
                width: 130
            },
            totalFlightHours: {
                xtype: 'textfield',
                fieldLabel: '',
                width: a,
                cls: 'test-id-aircraftdetail-restriction-totalFlightHours'
            },
            ataDescriptionLabel: {
                xtype: 'label',
                text: 'ATA Description',
                width: 130
            },
            ataDescription: {
                xtype: 'textarea',
                width: '100%',
                fieldLabel: '',
                cls: 'test-id-aircraftdetail-restriction-ataDescription'
            },
            totalCyclesLabel: {
                xtype: 'label',
                text: 'Total Cycles'
            },
            totalCycles: {
                xtype: 'textfield',
                fieldLabel: '',
                width: a,
                cls: 'test-id-aircraftdetail-restriction-totalCycles'
            },
            descriptionLabel: {
                xtype: 'label',
                text: 'Description'
            },
            description: {
                xtype: 'textarea',
                fieldLabel: '',
                width: '100%',
                cls: 'test-id-aircraftdetail-restriction-description'
            },
            limitationsLabel: {
                xtype: 'label',
                text: 'Limitations'
            },
            limitations: {
                xtype: 'textarea',
                fieldLabel: '',
                width: '100%',
                cls: 'test-id-aircraftdetail-restriction-limitations'
            },
            missingRequirementsLabel: {
                xtype: 'label',
                text: 'Missing Requirements',
                width: 130
            },
            missingRequirements: {
                xtype: 'textfield',
                fieldLabel: '',
                width: '100%',
                cls: 'test-id-aircraftdetail-restriction-missingRequirements'
            },
            aircraftFeatureLabel: {
                xtype: 'label',
                text: 'Aircraft Feature',
                width: 130
            },
            aircraftFeature: {
                xtype: 'textfield',
                fieldLabel: '',
                width: '100%',
                cls: 'test-id-aircraftdetail-restriction-aircraftFeature'
            },
            technicalReasonLabel: {
                xtype: 'label',
                text: 'Technical Description'
            },
            technicalReason: {
                xtype: 'textfield',
                fieldLabel: '',
                width: '100%',
                cls: 'test-id-aircraftdetail-restriction-technicalReason'
            }
        }
    }
}, 1, 0, 0, 0, ['meta.AircraftDetail'], 0, [TimesSquare.view.details.aircraft, 'Meta'], 0);
Ext.cmd.derive('TimesSquare.controller.details.Aircraft', Ext.app.Controller, {
    stores: [],
    models: ['details.Aircraft', 'details.Restriction'],
    views: ['details.aircraft.Aircraft', 'details.aircraft.Tabs', 'details.aircraft.BasicTab', 'details.aircraft.RestrictionsTab', 'details.aircraft.AllRestrictions', 'details.aircraft.RestrictionDetails', 'details.aircraft.Meta'],
    refs: [{
        ref: 'viewport',
        selector: 'viewport'
    }, {
        ref: 'performanceTab',
        selector: 'details_aircraft_tabs details_aircraft_performancetab'
    }],
    performanceInterval: 60000,
    init: function() {
        var a = this;
        a.control({
            'details_aircraft_allrestrictions': {
                selectionchange: a.onAllrestrictionsSelectionchange
            },
            'details_aircraft_tabs details_aircraft_performancetab': {
                show: a.reloadPerformance,
                hide: a.clearPerformanceTimeout,
                destroy: a.clearPerformanceTimeout
            }
        })
    },
    onAllrestrictionsSelectionchange: function(c, d) {
        var a = d[0],
            e = c.view.ownerCt,
            b = e.up('details_aircraft_restrictionstab').down('details_aircraft_restrictiondetails');
        if (!a) {
            b.displayFields('area');
            return
        }
        b.displayFields(a.get('type'));
        b.loadRecord(a)
    },
    clearPerformanceTimeout: function() {
        window.clearTimeout(this._performanceTimeout);
        this._performanceTimeout = null
    },
    reloadPerformance: function(e) {
        var d = this,
            a = d.getPerformanceTab(),
            b, c;
        if (!a || a.isHidden()) {
            return
        }
        b = a.up('form').getRecord();
        c = b && b.getPerformanceUrl();
        if (e !== !1) {
            a.reset()
        }
        if (!c) {
            Ext.log.warn('getAircraftPerformance service URL not found!');
            return
        }
        if (e !== !1) {
            a.setLoading('Loading...')
        }
        Ext.Ajax.request({
            url: c,
            callback: d.getPerformanceCallback,
            scope: d
        })
    },
    getPerformanceCallback: function(e, d, a) {
        var b = this,
            c = b.getPerformanceTab();
        if (!c || c.isHidden()) {
            return
        }
        b._performanceTimeout = Ext.defer(b.reloadPerformance, b.performanceInterval, b, [!1]);
        c.setLoading(!1);
        a = d && a && Ext.decode(a.responseText);
        if (!a || !a.success || !a.result) {
            Ext.Msg.show({
                icon: Ext.Msg.WARNING,
                buttons: Ext.Msg.OK,
                title: 'getAircraftPerformance service',
                msg: 'Error on loading Performance data!'
            })
        }
        c.loadDataToForm(a.result)
    }
}, 0, 0, 0, 0, 0, 0, [TimesSquare.controller.details, 'Aircraft'], 0);
Ext.cmd.derive('TimesSquare.view.details.leg.CrewTab', Ext.grid.Panel, {
    store: 'details.Crews',
    border: 0,
    initComponent: function() {
        var a = this;
        a.columns = a.getGridColumns();
        Ext.grid.Panel.prototype.initComponent.apply(this, arguments)
    },
    afterRender: function() {
        var c = this,
            b, a;
        Ext.grid.Panel.prototype.afterRender.apply(this, arguments);
        b = c.getView();
        a = b.headerCt.getMenu();
        a.add('-', {
            text: 'Default sorting',
            handler: function() {
                c.getStore().resetSorters()
            }
        })
    },
    displayCrewList: function() {
        var c = this,
            e = c.up('form'),
            a = c.getStore(),
            b, d;
        a.removeAll();
        b = e.getRecord();
        if (!b) {
            return
        }
        d = b.getCrewDetailUrl();
        a.getProxy().url = d;
        a.load()
    },
    tooltipRenderer: function(a, b) {
        if (a) {
            a = Ext.htmlEncode(a);
            b.tdAttr = ' data-qtip="' + a + '" '
        }
        return a
    },
    getGridColumns: function() {
        return {
            defaults: {
                type: 'string',
                flex: 1,
                menuDisabled: !1,
                sortable: !0,
                draggable: !1,
                hideable: !1,
                lockable: !1
            },
            items: [{
                header: 'Prev Leg',
                dataIndex: 'prevLeg',
                renderer: this.tooltipRenderer
            }, {
                header: 'Id',
                dataIndex: 'crewMemberID'
            }, {
                header: 'Rank',
                dataIndex: 'rank'
            }, {
                header: 'Full Name',
                dataIndex: 'crewMemberFullName'
            }, {
                header: 'First Name',
                dataIndex: 'crewMemberFirstName'
            }, {
                header: 'Last Name',
                dataIndex: 'crewMemberName'
            }, {
                header: 'Address',
                dataIndex: 'crewMemberAddress'
            }, {
                header: 'Phone',
                dataIndex: 'crewMemberPhone',
                renderer: this.tooltipRenderer
            }, {
                header: 'Qualifications',
                dataIndex: 'qualifications'
            }, {
                xtype: 'checkcolumn',
                disabled: !0,
                maskOnDisable: !1,
                disabledCls: 'x-item-enabled',
                header: 'AC Change',
                dataIndex: 'acChange'
            }, {
                header: 'Next Leg',
                dataIndex: 'nextLeg',
                renderer: this.tooltipRenderer
            }]
        }
    }
}, 0, ['details_leg_crewtab'], ['component', 'box', 'container', 'panel', 'tablepanel', 'gridpanel', 'grid', 'details_leg_crewtab'], {
    'component': !0,
    'box': !0,
    'container': !0,
    'panel': !0,
    'tablepanel': !0,
    'gridpanel': !0,
    'grid': !0,
    'details_leg_crewtab': !0
}, ['widget.details_leg_crewtab'], 0, [TimesSquare.view.details.leg, 'CrewTab'], 0);
Ext.cmd.derive('TimesSquare.model.details.Crew', Ext.data.Model, {
    idProperty: 'crewMemberID',
    proxy: {
        type: 'rest',
        appendId: !1,
        reader: {
            type: 'json',
            rootProperty: 'result'
        }
    },
    fields: [{
        name: 'crewMemberID',
        type: 'string',
        mapping: 'crew.crewMemberID'
    }, {
        name: 'rank',
        type: 'string'
    }, {
        name: 'crewMemberFirstName',
        mapping: 'crew.crewMemberFirstName'
    }, {
        name: 'crewMemberName',
        mapping: 'crew.crewMemberName'
    }, {
        name: 'crewMemberFullName',
        type: 'string',
        presist: !1,
        mapping: 'crew',
        convert: function(a) {
            var b = a.crewMemberFirstName || '',
                c = a.crewMemberName || '';
            return b + ' ' + c
        }
    }, {
        name: 'crewMemberAddress',
        type: 'string',
        mapping: 'crew.crewMemberAddress',
        convert: function(a) {
            return Ext.util.Format.crewAddressRenderer(a)
        }
    }, {
        name: 'crewMemberPhone',
        type: 'string',
        mapping: 'crew.crewMemberContact',
        convert: function(a) {
            return Ext.util.Format.crewPhoneRenderer(a)
        }
    }, {
        name: 'qualifications',
        type: 'string'
    }, {
        name: 'acChange',
        type: 'boolean'
    }, {
        name: 'prevLeg',
        type: 'string',
        mapping: 'legPrevious'
    }, {
        name: 'nextLeg',
        type: 'string',
        mapping: 'legNext'
    }, {
        name: 'crewGroup',
        type: 'string',
        sortType: function(b) {
            var a = {
                'F': 1,
                'C': 2,
                'D': 3
            };
            return a[b] || 4
        }
    }, {
        name: 'priorityInGroup',
        type: 'int'
    }]
}, 0, 0, 0, 0, 0, 0, [TimesSquare.model.details, 'Crew'], 0);
Ext.cmd.derive('TimesSquare.store.details.Crews', Ext.data.Store, {
    model: 'TimesSquare.model.details.Crew',
    autoLoad: !1,
    remoteStore: !0,
    constructor: function() {
        var a = this;
        Ext.data.Store.prototype.constructor.apply(this, arguments);
        a.resetSorters()
    },
    resetSorters: function() {
        this.sort(Ext.clone(this.defaultSorters))
    },
    defaultSorters: [{
        property: 'crewGroup'
    }, {
        property: 'priorityInGroup'
    }]
}, 1, 0, 0, 0, 0, 0, [TimesSquare.store.details, 'Crews'], 0);
Ext.cmd.derive('TimesSquare.view.details.leg.Leg', TimesSquare.view.details.DetailPanel, {
    title: 'Leg Details',
    modelName: 'Leg',
    constructor: function() {
        this.detailType = TimesSquare.model.IdFactory.TYPE.LEG;
        return TimesSquare.view.details.DetailPanel.prototype.constructor.apply(this, arguments)
    },
    afterModelLoadedIntoForm: function(a, e) {
        var c = a.down('#legDetailCrewTab'),
            f = a.down('#legDetailsAcarsTab'),
            d = a.down('#legDetailFlightLogTab'),
            b = a.down('details_leg_tabs');
        a.resetToDefaultState();
        if (!e.getCrewDetailUrl()) {
            if (!c.disabled) {
                c.setDisabled(!0)
            }
        } else {
            if (c.disabled) {
                c.setDisabled(!1)
            }
        }
        if (b) {
            if (d) {
                b.remove(d)
            }
            if (e.getFlightLogUrl()) {
                b.insert(b.items.indexOf(f) + 1, {
                    title: 'Flightlog',
                    xtype: 'details_leg_flightlogtab',
                    itemId: 'legDetailFlightLogTab'
                })
            }
        }
    },
    resetToDefaultState: function() {
        var a = this;
        a.down('details_leg_tabs').setActiveTab(1)
    },
    createItems: function(d, a, c, e, b) {
        var f = this;
        f.items = [{
            xtype: 'container',
            defaults: {
                margin: e,
                readOnly: !0
            },
            layout: {
                type: 'table',
                columns: 12
            },
            items: [{
                xtype: 'label',
                text: 'Flight',
                style: b
            }, {
                xtype: 'textfield',
                colspan: 1,
                fieldLabel: '&nbsp;',
                labelSeparator: '',
                labelAlign: 'top',
                width: a,
                name: 'flight',
                cls: 'test-id-legdetail-flight'
            }, {
                xtype: 'datefield',
                fieldLabel: '&nbsp;',
                colspan: 3,
                labelSeparator: '',
                labelAlign: 'top',
                hideTrigger: !0,
                name: 'flightDoo',
                cls: 'test-id-legdetail-flightDoo'
            }, {
                xtype: 'textfield',
                colspan: 3,
                fieldLabel: 'Call Sign',
                labelAlign: 'top',
                width: a,
                name: 'callSign',
                cls: 'test-id-legdetail-callSign'
            }, {
                xtype: 'textfield',
                colspan: 2,
                fieldLabel: 'Service',
                labelAlign: 'top',
                name: 'serviceType',
                width: d,
                cls: 'test-id-legdetail-serviceType'
            }, {
                xtype: 'textfield',
                fieldLabel: 'State',
                labelAlign: 'top',
                name: 'state',
                width: d,
                cls: 'test-id-legdetail-state'
            }, {
                xtype: 'textfield',
                colspan: 1,
                fieldLabel: 'Problem',
                labelAlign: 'top',
                name: 'problem',
                width: c,
                cls: 'test-id-legdetail-problem'
            }, {
                xtype: 'label',
                text: 'Departure',
                style: b
            }, {
                xtype: 'textfield',
                fieldLabel: '&nbsp;',
                labelSeparator: '',
                labelAlign: 'top',
                name: 'departureAirport',
                width: a,
                cls: 'test-id-legdetail-departureAirport'
            }, {
                xtype: 'datefield',
                colspan: 2,
                hideTrigger: !0,
                fieldLabel: 'UTC',
                labelAlign: 'top',
                name: 'departure',
                timeFieldName: 'departureTime',
                cls: 'test-id-legdetail-departure'
            }, {
                xtype: 'timefield',
                fieldLabel: '&nbsp;',
                labelSeparator: '',
                labelAlign: 'top',
                name: 'departureTime',
                cls: 'test-id-legdetail-departureTime'
            }, {
                xtype: 'datefield',
                colspan: 2,
                hideTrigger: !0,
                fieldLabel: 'Local Airport',
                labelAlign: 'top',
                name: 'localDeparture',
                timeFieldName: 'localDepartureTime',
                cls: 'test-id-legdetail-localDeparture'
            }, {
                xtype: 'timefield',
                colspan: 1,
                fieldLabel: '&nbsp;',
                labelSeparator: '',
                labelAlign: 'top',
                name: 'localDepartureTime',
                cls: 'test-id-legdetail-localDepartureTime'
            }, {
                xtype: 'datefield',
                colspan: 2,
                hideTrigger: !0,
                fieldLabel: 'Best Time',
                labelAlign: 'top',
                name: 'bestDepartureTime',
                timeFieldName: 'bestDepartureTimeFT',
                cls: 'test-id-legdetail-bestDepartureTime'
            }, {
                xtype: 'timefield',
                colspan: 1,
                fieldLabel: '&nbsp;',
                labelSeparator: '',
                labelAlign: 'top',
                name: 'bestDepartureTimeFT',
                cls: 'test-id-legdetail-bestDepartureTimeFT'
            }, {
                xtype: 'box',
                colspan: 1
            }, {
                xtype: 'label',
                text: 'Arrival'
            }, {
                xtype: 'textfield',
                fieldLabel: '',
                name: 'arrivalAirport',
                width: a,
                cls: 'test-id-legdetail-arrivalAirport'
            }, {
                xtype: 'datefield',
                colspan: 2,
                hideTrigger: !0,
                fieldLabel: '',
                name: 'arrival',
                timeFieldName: 'arrivalTime',
                cls: 'test-id-legdetail-arrival'
            }, {
                xtype: 'timefield',
                fieldLabel: '',
                name: 'arrivalTime',
                cls: 'test-id-legdetail-arrivalTime'
            }, {
                xtype: 'datefield',
                colspan: 2,
                hideTrigger: !0,
                fieldLabel: '',
                name: 'localArrival',
                timeFieldName: 'localArrivalTime',
                cls: 'test-id-legdetail-localArrival'
            }, {
                xtype: 'timefield',
                colspan: 1,
                fieldLabel: '',
                name: 'localArrivalTime',
                cls: 'test-id-legdetail-localArrivalTime'
            }, {
                xtype: 'datefield',
                colspan: 2,
                hideTrigger: !0,
                fieldLabel: '',
                name: 'bestArrivalTime',
                timeFieldName: 'bestArrivalTimeTF',
                cls: 'test-id-legdetail-bestArrivalTime'
            }, {
                xtype: 'timefield',
                colspan: 1,
                fieldLabel: '',
                name: 'bestArrivalTimeTF',
                cls: 'test-id-legdetail-bestArrivalTimeTF'
            }, {
                xtype: 'box',
                colspan: 1
            }, {
                xtype: 'label',
                text: 'Aircraft',
                style: b
            }, {
                xtype: 'textfield',
                fieldLabel: 'Owner',
                labelAlign: 'top',
                name: 'aircraftOwner',
                width: a,
                cls: 'test-id-legdetail-aircraftOwner'
            }, {
                xtype: 'textfield',
                fieldLabel: 'Subtype',
                labelAlign: 'top',
                name: 'aircraftSubtype',
                width: a,
                cls: 'test-id-legdetail-aircraftSubtype'
            }, {
                xtype: 'textfield',
                colspan: 2,
                fieldLabel: 'Registration',
                labelAlign: 'top',
                name: 'registration',
                width: a,
                cls: 'test-id-legdetail-registration'
            }, {
                xtype: 'textfield',
                colspan: 3,
                fieldLabel: 'Version',
                labelAlign: 'top',
                name: 'aircraftConfiguration',
                width: a,
                cls: 'test-id-legdetail-aircraftConfiguration'
            }, {
                xtype: 'textfield',
                colspan: 3,
                fieldLabel: 'PRBD',
                labelAlign: 'top',
                name: 'prbd',
                width: c,
                cls: 'test-id-legdetail-prbd'
            }, {
                xtype: 'textfield',
                colspan: 1,
                fieldLabel: 'Rotation',
                labelAlign: 'top',
                name: 'rotation',
                width: a,
                cls: 'test-id-legdetail-rotation'
            }]
        }, {
            xtype: 'details_leg_tabs',
            margin: '15px 0 0 0'
        }]
    }
}, 1, ['details_leg_leg'], ['component', 'box', 'container', 'panel', 'form', 'details_detailpanel', 'details_leg_leg'], {
    'component': !0,
    'box': !0,
    'container': !0,
    'panel': !0,
    'form': !0,
    'details_detailpanel': !0,
    'details_leg_leg': !0
}, ['widget.details_leg_leg'], 0, [TimesSquare.view.details.leg, 'Leg'], 0);
Ext.cmd.derive('TimesSquare.view.details.leg.Tabs', Ext.tab.Panel, {
    plain: !0,
    activeTab: 1,
    items: [{
        title: 'Schedule',
        xtype: 'details_leg_scheduletab'
    }, {
        title: 'Actual',
        xtype: 'details_leg_actualtab'
    }, {
        title: 'ACARS',
        xtype: 'details_leg_acarstab',
        itemId: 'legDetailsAcarsTab'
    }, {
        title: 'Flightlog',
        xtype: 'details_leg_flightlogtab',
        itemId: 'legDetailFlightLogTab'
    }, {
        title: 'Remarks',
        xtype: 'details_leg_remarkstab'
    }, {
        title: 'Crew',
        itemId: 'legDetailCrewTab'
    }, {
        title: 'Pax + Load',
        xtype: 'details_leg_paxloadtab'
    }]
}, 0, ['details_leg_tabs'], ['component', 'box', 'container', 'panel', 'tabpanel', 'details_leg_tabs'], {
    'component': !0,
    'box': !0,
    'container': !0,
    'panel': !0,
    'tabpanel': !0,
    'details_leg_tabs': !0
}, ['widget.details_leg_tabs'], 0, [TimesSquare.view.details.leg, 'Tabs'], 0);
Ext.cmd.derive('TimesSquare.view.details.leg.ScheduleTab', Ext.container.Container, {
    initComponent: function() {
        var a = this;
        a.mxCreateItems();
        Ext.container.Container.prototype.initComponent.apply(this, arguments)
    },
    createItems: function(a, e, c, b) {
        var d = this;
        d.items = [{
            xtype: 'fieldset',
            margin: '10px 5px',
            cls: 'dwFieldset',
            title: 'Carriers',
            layout: {
                type: 'table',
                columns: 10
            },
            defaults: {
                margin: b,
                readOnly: !0
            },
            items: [{
                xtype: 'label',
                text: 'Empl. Cockpit',
                tdAttrs: {
                    style: 'text-align: right'
                },
                style: {
                    display: 'inline-block'
                }
            }, {
                xtype: 'textfield',
                fieldLabel: '',
                colspan: 2,
                name: 'employerCockpit',
                width: a,
                cls: 'test-id-legdetail-scheduletab-employerCockpit'
            }, {
                xtype: 'label',
                text: 'Empl. Cabin',
                width: a * 2 + 6,
                tdAttrs: {
                    style: 'text-align: right'
                },
                style: {
                    display: 'inline-block'
                }
            }, {
                xtype: 'textfield',
                fieldLabel: '',
                colspan: 6,
                name: 'employerCabin',
                width: a,
                cls: 'test-id-legdetail-scheduletab-employerCabin'
            }, {
                xtype: 'label',
                text: 'Operating',
                tdAttrs: {
                    style: 'text-align: right'
                },
                style: {
                    display: 'inline-block'
                }
            }, {
                xtype: 'textfield',
                fieldLabel: '',
                colspan: 2,
                name: 'operatingCarrier',
                width: a,
                cls: 'test-id-legdetail-scheduletab-operatingCarrier'
            }, {
                xtype: 'label',
                text: 'Commercial',
                width: a * 2 + 6,
                tdAttrs: {
                    style: 'text-align: right'
                },
                style: {
                    display: 'inline-block'
                }
            }, {
                xtype: 'textfield',
                fieldLabel: '',
                colspan: 1,
                name: 'commercialCarrier',
                width: a,
                cls: 'test-id-legdetail-scheduletab-commercialCarrier'
            }, {
                xtype: 'label',
                text: 'Dispatch Office',
                style: {
                    display: 'inline-block'
                }
            }, {
                xtype: 'textfield',
                fieldLabel: '',
                colspan: 4,
                name: 'dispatchOffice',
                width: c
            }, {
                xtype: 'label',
                text: 'Joint Ops',
                tdAttrs: {
                    style: 'text-align: right'
                },
                style: {
                    display: 'inline-block'
                }
            }, {
                xtype: 'mappingfieldcontainer',
                name: 'jointOperator',
                colspan: 9,
                layout: {
                    type: 'table',
                    columns: 3
                },
                margin: 0,
                defaults: {
                    margin: b,
                    readOnly: !0
                },
                items: [{
                    xtype: 'textfield',
                    fieldLabel: '',
                    name: '',
                    width: a,
                    dataIndex: 0
                }, {
                    xtype: 'textfield',
                    fieldLabel: '',
                    name: '',
                    width: a,
                    dataIndex: 1
                }, {
                    xtype: 'textfield',
                    fieldLabel: '',
                    colspan: 2,
                    name: '',
                    width: a,
                    dataIndex: 2
                }]
            }, {
                xtype: 'component',
                colspan: 10,
                margin: 0,
                height: 7
            }, {
                xtype: 'label',
                text: 'Change Reason',
                tdAttrs: {
                    style: 'text-align: right'
                },
                style: {
                    display: 'inline-block'
                }
            }, {
                xtype: 'textfield',
                fieldLabel: '',
                colspan: 9,
                name: 'changeReason',
                width: a * 4 + 6.4 * 3,
                cls: 'test-id-legdetail-scheduletab-changeReason'
            }, {
                xtype: 'label',
                text: 'Initial Subtype',
                style: {
                    display: 'inline-block'
                }
            }, {
                xtype: 'textfield',
                fieldLabel: '',
                name: 'initialSubtype',
                tdAttrs: {
                    style: 'text-align: right'
                },
                width: a,
                cls: 'test-id-legdetail-scheduletab-initialSubtype'
            }]
        }]
    }
}, 0, ['details_leg_scheduletab'], ['component', 'box', 'container', 'details_leg_scheduletab'], {
    'component': !0,
    'box': !0,
    'container': !0,
    'details_leg_scheduletab': !0
}, ['widget.details_leg_scheduletab'], [
    ['fieldSizeMixin', TimesSquare.mixin.FieldSizeMixin]
], [TimesSquare.view.details.leg, 'ScheduleTab'], 0);
Ext.cmd.derive('TimesSquare.view.details.leg.DelaysGrid', Alf.form.field.Grid, {
    columnsConfig: {
        delayCode: {
            header: 'Delay Code',
            minWidth: 50
        },
        subDelayCode: {
            header: 'Sub Delay',
            minWidth: 50
        },
        delayTime: {
            header: 'Duration',
            minWidth: 50
        },
        delayResponsibilityCode: {
            header: 'Responsibility',
            minWidth: 50
        },
        delayResponsibilityDescription: {
            header: 'Responsibility Description',
            minWidth: 100,
            flex: 2,
            align: 'left'
        },
        delayImputation: {
            header: 'Imputation',
            minWidth: 50
        },
        delayReason: {
            header: 'Reason',
            minWidth: 50
        },
        'irregularities.delayCode': {
            header: 'Irregularity Nature',
            minWidth: 50
        },
        'irregularities.delayReason': {
            header: 'Irregularity Reason',
            minWidth: 50
        }
    },
    initComponent: function() {
        var a = this,
            c = a.columnsConfig,
            d = a.fields || [],
            b = [];
        Ext.Array.each(d, function(a) {
            var d = Ext.isObject(a) ? a.name : a,
                e = Ext.isObject(a) && a || {},
                f = e && e.columnCfg || {},
                g = c[d] || {};
            b.push(Ext.apply(Ext.apply({
                header: d,
                dataIndex: d
            }, g), f))
        });
        a.columns = {
            defaults: {
                type: 'string',
                flex: 1,
                menuDisabled: !1,
                sortable: !0,
                draggable: !1,
                hideable: !1,
                lockable: !1,
                align: 'left'
            },
            items: b
        };
        Alf.form.field.Grid.prototype.initComponent.apply(this, arguments)
    }
}, 0, ['details_leg_delaysgrid'], ['component', 'box', 'container', 'panel', 'tablepanel', 'gridpanel', 'grid', 'gridfield', 'details_leg_delaysgrid'], {
    'component': !0,
    'box': !0,
    'container': !0,
    'panel': !0,
    'tablepanel': !0,
    'gridpanel': !0,
    'grid': !0,
    'gridfield': !0,
    'details_leg_delaysgrid': !0
}, ['widget.details_leg_delaysgrid'], 0, [TimesSquare.view.details.leg, 'DelaysGrid'], 0);
Ext.cmd.derive('TimesSquare.view.details.leg.ActualTab', Ext.container.Container, {
    layout: {
        type: 'hbox'
    },
    initComponent: function() {
        var a = this;
        a.mxCreateItems();
        Ext.container.Container.prototype.initComponent.apply(this, arguments)
    },
    createItems: function(a, h, i, d, c) {
        var g = this,
            b = TimesSquare.app.getController('gantt.Gantt'),
            f = 'com.lhsystems.ops.profile.server.dataimpl.parameterconfiguration.EFF_DATE_RANGE_DELAY_CODE',
            e = b && b.parameterList && b.parameterList[f] === 'true' || !1;
        g.items = [{
            xtype: 'fieldset',
            width: '55%',
            cls: 'dwFieldset',
            title: 'Departure',
            margin: '10 5',
            layout: {
                type: 'table',
                tableAttrs: {
                    style: {
                        width: '100%'
                    }
                },
                columns: 9
            },
            defaults: {
                margin: d,
                readOnly: !0
            },
            items: [{
                xtype: 'label',
                text: 'From',
                tdAttrs: {
                    style: 'text-align: right'
                },
                style: {
                    display: 'inline-block'
                }
            }, {
                xtype: 'textfield',
                colspan: 8,
                fieldLabel: '',
                width: a,
                name: 'actualFrom',
                cls: 'test-id-legdetail-actualtab-actualFrom'
            }, {
                xtype: 'label',
                text: 'NI',
                tdAttrs: {
                    style: 'text-align: right'
                },
                style: {
                    display: 'inline-block'
                }
            }, {
                xtype: 'datefield',
                colspan: 2,
                hideTrigger: !0,
                fieldLabel: '',
                name: 'adviseTime',
                timeFieldName: 'adviseTimeTF',
                cls: 'test-id-legdetail-actualtab-adviseTime'
            }, {
                xtype: 'timefield',
                fieldLabel: '',
                name: 'adviseTimeTF',
                cls: 'test-id-legdetail-actualtab-adviseTimeTF'
            }, {
                xtype: 'box',
                colspan: 1
            }, {
                xtype: 'label',
                text: 'Taxi Out',
                tdAttrs: {
                    style: 'text-align: right'
                },
                style: {
                    display: 'inline-block'
                }
            }, {
                xtype: 'textfield',
                colspan: 4,
                fieldLabel: '',
                name: 'taxiOut',
                width: a,
                cls: 'test-id-legdetail-actualtab-taxiOut'
            }, {
                xtype: 'label',
                text: 'ED',
                tdAttrs: {
                    style: 'text-align: right'
                },
                style: Ext.apply({
                    display: 'inline-block'
                }, c)
            }, {
                xtype: 'datefield',
                colspan: 2,
                hideTrigger: !0,
                fieldLabel: 'Off Block',
                labelSeparator: '',
                labelAlign: 'top',
                name: 'estimatedTimeDeparture',
                timeFieldName: 'estimatedTimeDepartureTF',
                cls: 'test-id-legdetail-actualtab-estimatedTimeDeparture'
            }, {
                xtype: 'timefield',
                fieldLabel: '&nbsp;',
                labelSeparator: '',
                labelAlign: 'top',
                name: 'estimatedTimeDepartureTF',
                cls: 'test-id-legdetail-actualtab-estimatedTimeDepartureTF'
            }, {
                xtype: 'box',
                colspan: 1
            }, {
                xtype: 'datefield',
                colspan: 2,
                hideTrigger: !0,
                fieldLabel: 'Take Off',
                labelSeparator: '',
                labelAlign: 'top',
                name: 'mvtEstimatedTakeOffTime',
                timeFieldName: 'mvtEstimatedTakeOffTimeTF',
                cls: 'test-id-legdetail-actualtab-mvtEstimatedTakeOffTime'
            }, {
                xtype: 'timefield',
                fieldLabel: '&nbsp;',
                labelSeparator: '',
                labelAlign: 'top',
                name: 'mvtEstimatedTakeOffTimeTF',
                cls: 'test-id-legdetail-actualtab-mvtEstimatedTakeOffTimeTF'
            }, {
                xtype: 'checkboxfield',
                fieldLabel: '',
                boxLabel: 'ISK',
                name: 'isk',
                cls: 'test-id-legdetail-actualtab-isk',
                margin: '22 25 6 0'
            }, {
                xtype: 'label',
                text: 'AD',
                tdAttrs: {
                    style: 'text-align: right'
                },
                style: {
                    display: 'inline-block'
                }
            }, {
                xtype: 'datefield',
                colspan: 2,
                hideTrigger: !0,
                fieldLabel: '',
                name: 'offblockTime',
                timeFieldName: 'offblockTimeTF',
                cls: 'test-id-legdetail-actualtab-offblockTime'
            }, {
                xtype: 'timefield',
                fieldLabel: '',
                name: 'offblockTimeTF',
                cls: 'test-id-legdetail-actualtab-offblockTimeTF'
            }, {
                xtype: 'box',
                colspan: 1
            }, {
                xtype: 'datefield',
                colspan: 2,
                hideTrigger: !0,
                fieldLabel: '',
                name: 'airborneTime',
                timeFieldName: 'airborneTimeTF',
                cls: 'test-id-legdetail-actualtab-airborneTime'
            }, {
                xtype: 'timefield',
                colspan: 2,
                fieldLabel: '',
                name: 'airborneTimeTF',
                cls: 'test-id-legdetail-actualtab-airborneTimeTF'
            }, {
                xtype: 'label',
                text: 'MAP',
                tdAttrs: {
                    style: 'text-align: right'
                },
                style: {
                    display: 'inline-block'
                }
            }, {
                xtype: 'datefield',
                colspan: 2,
                hideTrigger: !0,
                fieldLabel: '',
                name: 'mvtAfterPushbackTime',
                timeFieldName: 'mvtAfterPushbackTimeTF',
                cls: 'test-id-legdetail-actualtab-mvtAfterPushbackTime'
            }, {
                xtype: 'timefield',
                colspan: 6,
                fieldLabel: '',
                name: 'mvtAfterPushbackTimeTF',
                cls: 'test-id-legdetail-actualtab-mvtAfterPushbackTimeTF'
            }, {
                xtype: 'fieldset',
                colspan: 9,
                cls: 'dwFieldset',
                title: 'Departure Delays',
                margin: '0px 0px 5px 0px',
                items: [{
                    xtype: 'details_leg_delaysgrid',
                    name: 'delay',
                    fields: Ext.Array.merge(['delayCode', 'subDelayCode', 'delayTime'], e ? ['delayResponsibilityCode', 'delayResponsibilityDescription'] : []),
                    height: 130
                }]
            }, {
                xtype: 'label',
                text: 'TO Delay',
                tdAttrs: {
                    style: 'text-align: right'
                },
                style: {
                    display: 'inline-block'
                }
            }, {
                xtype: 'textfield',
                fieldLabel: '',
                labelAlign: 'top',
                width: a,
                name: 'toDelayCode',
                cls: 'test-id-legdetail-actualtab-toDelayCode'
            }, {
                xtype: 'textfield',
                colspan: 1,
                fieldLabel: '',
                labelAlign: 'top',
                width: a,
                name: 'toDelayTime',
                cls: 'test-id-legdetail-actualtab-toDelayTime'
            }, {
                xtype: 'box',
                colspan: 6
            }, {
                xtype: 'box',
                colspan: 9,
                height: 26
            }, {
                xtype: 'label',
                text: 'Position/Gate',
                style: {
                    display: 'inline-block'
                }
            }, {
                xtype: 'textfield',
                fieldLabel: '',
                width: a,
                name: 'depStand',
                cls: 'test-id-legdetail-actualtab-depStand'
            }, {
                xtype: 'textfield',
                colspan: 7,
                fieldLabel: '',
                width: a,
                name: 'depGate',
                cls: 'test-id-legdetail-actualtab-depGate'
            }]
        }, {
            xtype: 'fieldset',
            width: '45%',
            cls: 'dwFieldset',
            title: 'Arrival',
            margin: '10 5',
            layout: {
                type: 'table',
                tableAttrs: {
                    style: {
                        width: '100%'
                    }
                },
                columns: 6
            },
            defaults: {
                margin: d,
                readOnly: !0
            },
            items: [{
                xtype: 'label',
                text: 'To',
                tdAttrs: {
                    style: 'text-align: right'
                },
                style: {
                    display: 'inline-block'
                }
            }, {
                xtype: 'textfield',
                colspan: 5,
                name: 'actualTo',
                width: a,
                cls: 'test-id-legdetail-actualtab-actualTo'
            }, {
                xtype: 'label',
                text: 'EET',
                tdAttrs: {
                    style: 'text-align: right'
                },
                style: {
                    display: 'inline-block'
                }
            }, {
                xtype: 'textfield',
                fieldLabel: '',
                name: 'eet',
                width: a,
                cls: 'test-id-legdetail-actualtab-eet'
            }, {
                xtype: 'label',
                text: 'Taxi In',
                style: {
                    display: 'inline-block'
                }
            }, {
                xtype: 'textfield',
                colspan: 3,
                fieldLabel: '',
                width: a,
                name: 'taxiIn',
                cls: 'test-id-legdetail-actualtab-taxiIn'
            }, {
                xtype: 'label',
                text: 'EA',
                tdAttrs: {
                    style: 'text-align: right'
                },
                style: Ext.apply({
                    display: 'inline-block'
                }, c)
            }, {
                xtype: 'datefield',
                colspan: 2,
                hideTrigger: !0,
                fieldLabel: 'Touch Down',
                labelSeparator: '',
                labelAlign: 'top',
                name: 'mvtEstimatedTouchdownTime',
                timeFieldName: 'mvtEstimatedTouchdownTimeTF',
                cls: 'test-id-legdetail-actualtab-mvtEstimatedTouchdownTime'
            }, {
                xtype: 'timefield',
                fieldLabel: '&nbsp;',
                labelSeparator: '',
                labelAlign: 'top',
                name: 'mvtEstimatedTouchdownTimeTF',
                cls: 'test-id-legdetail-actualtab-mvtEstimatedTouchdownTimeTF'
            }, {
                xtype: 'datefield',
                hideTrigger: !0,
                fieldLabel: 'On Block',
                labelSeparator: '',
                labelAlign: 'top',
                name: 'estimatedTimeArrival',
                timeFieldName: 'estimatedTimeArrivalTF',
                cls: 'test-id-legdetail-actualtab-estimatedTimeArrival'
            }, {
                xtype: 'timefield',
                fieldLabel: '&nbsp;',
                labelSeparator: '',
                labelAlign: 'top',
                name: 'estimatedTimeArrivalTF',
                cls: 'test-id-legdetail-actualtab-estimatedTimeArrivalTF'
            }, {
                xtype: 'label',
                text: 'AA',
                tdAttrs: {
                    style: 'text-align: right'
                },
                style: {
                    display: 'inline-block'
                }
            }, {
                xtype: 'datefield',
                colspan: 2,
                hideTrigger: !0,
                fieldLabel: '',
                name: 'landingTime',
                timeFieldName: 'landingTimeTF',
                cls: 'test-id-legdetail-actualtab-landingTime'
            }, {
                xtype: 'timefield',
                fieldLabel: '',
                name: 'landingTimeTF',
                cls: 'test-id-legdetail-actualtab-landingTimeTF'
            }, {
                xtype: 'datefield',
                hideTrigger: !0,
                fieldLabel: '',
                name: 'onblockTime',
                timeFieldName: 'onblockTimeTF',
                cls: 'test-id-legdetail-actualtab-onblockTime'
            }, {
                xtype: 'timefield',
                fieldLabel: '',
                name: 'onblockTimeTF',
                cls: 'test-id-legdetail-actualtab-onblockTimeTF'
            }, {
                xtype: 'box',
                colspan: 6,
                height: 189
            }, {
                xtype: 'label',
                text: 'DIV/RR/FR Reason',
                tdAttrs: {
                    style: 'text-align: right'
                },
                style: {
                    display: 'inline-block'
                }
            }, {
                xtype: 'textfield',
                colspan: 5,
                fieldLabel: '',
                name: 'diversionReason',
                width: a,
                cls: 'test-id-legdetail-actualtab-diversionReason'
            }, {
                xtype: 'label',
                text: 'Fh/Cycles',
                tdAttrs: {
                    style: 'text-align: right'
                },
                style: {
                    display: 'inline-block'
                }
            }, {
                xtype: 'textfield',
                fieldLabel: '',
                name: 'flightHours',
                width: a,
                cls: 'test-id-legdetail-actualtab-flightHours'
            }, {
                xtype: 'textfield',
                colspan: 4,
                fieldLabel: '',
                width: a,
                name: 'cycles',
                cls: 'test-id-legdetail-actualtab-cycles'
            }, {
                xtype: 'label',
                text: 'Position/Gate',
                tdAttrs: {
                    style: 'text-align: right'
                },
                style: {
                    display: 'inline-block'
                }
            }, {
                xtype: 'textfield',
                fieldLabel: '',
                name: 'arrStand',
                width: a,
                cls: 'test-id-legdetail-actualtab-arrStand'
            }, {
                xtype: 'textfield',
                fieldLabel: '',
                colspan: 4,
                name: 'arrGate',
                width: a,
                cls: 'test-id-legdetail-actualtab-arrGate'
            }]
        }]
    }
}, 0, ['details_leg_actualtab'], ['component', 'box', 'container', 'details_leg_actualtab'], {
    'component': !0,
    'box': !0,
    'container': !0,
    'details_leg_actualtab': !0
}, ['widget.details_leg_actualtab'], [
    ['fieldSizeMixin', TimesSquare.mixin.FieldSizeMixin]
], [TimesSquare.view.details.leg, 'ActualTab'], 0);
Ext.cmd.derive('TimesSquare.view.details.leg.AcarsTab', Ext.container.Container, {
    layout: {
        type: 'hbox'
    },
    initComponent: function() {
        var a = this;
        a.mxCreateItems();
        Ext.container.Container.prototype.initComponent.apply(this, arguments)
    },
    createItems: function(a, c, e, b) {
        var d = this;
        d.items = [{
            xtype: 'fieldset',
            flex: 1,
            cls: 'dwFieldset',
            title: 'Departure',
            margin: '10px 5px',
            layout: {
                type: 'table',
                columns: 5
            },
            defaults: {
                margin: b,
                readOnly: !0
            },
            items: [{
                xtype: 'label',
                text: 'From',
                tdAttrs: {
                    style: 'text-align: right'
                },
                style: {
                    display: 'inline-block'
                }
            }, {
                xtype: 'textfield',
                colspan: 4,
                fieldLabel: '',
                width: a,
                name: 'acarsFrom',
                cls: 'test-id-legdetail-acarstab-acarsFrom'
            }, {
                xtype: 'label',
                text: 'State',
                tdAttrs: {
                    style: 'text-align: right'
                },
                style: {
                    display: 'inline-block'
                }
            }, {
                xtype: 'textfield',
                colspan: 4,
                fieldLabel: '',
                name: 'acarsState',
                width: c,
                cls: 'test-id-legdetail-acarstab-acarsState'
            }, {
                xtype: 'label',
                text: 'ACARS Init',
                tdAttrs: {
                    style: 'text-align: right'
                },
                style: {
                    display: 'inline-block'
                }
            }, {
                xtype: 'datefield',
                hideTrigger: !0,
                fieldLabel: '',
                name: 'acarsInit',
                timeFieldName: 'acarsInitTF',
                cls: 'test-id-legdetail-acarstab-acarsInit'
            }, {
                xtype: 'timefield',
                colspan: 3,
                fieldLabel: '',
                name: 'acarsInitTF',
                cls: 'test-id-legdetail-acarstab-acarsInitTF'
            }, {
                xtype: 'label',
                text: 'Doors Closed',
                tdAttrs: {
                    style: 'text-align: right'
                },
                style: {
                    display: 'inline-block'
                }
            }, {
                xtype: 'datefield',
                hideTrigger: !0,
                fieldLabel: '',
                name: 'acarsDoorsClosed',
                timeFieldName: 'acarsDoorsClosedTF',
                cls: 'test-id-legdetail-acarstab-acarsDoorsClosed'
            }, {
                xtype: 'timefield',
                colspan: 3,
                fieldLabel: '',
                name: 'acarsDoorsClosedTF',
                cls: 'test-id-legdetail-acarstab-acarsDoorsClosedTF'
            }, {
                xtype: 'label',
                text: 'ED',
                tdAttrs: {
                    style: 'text-align: right'
                },
                margin: '22 6 6 0',
                style: {
                    display: 'inline-block'
                }
            }, {
                xtype: 'datefield',
                hideTrigger: !0,
                fieldLabel: 'OUT',
                labelSeparator: '',
                labelAlign: 'top',
                name: 'acarsEstimatedTimeDeparture',
                timeFieldName: 'acarsEstimatedTimeDepartureTF',
                cls: 'test-id-legdetail-acarstab-acarsEstimatedTimeDeparture'
            }, {
                xtype: 'timefield',
                fieldLabel: '&nbsp;',
                labelSeparator: '',
                labelAlign: 'top',
                name: 'acarsEstimatedTimeDepartureTF',
                cls: 'test-id-legdetail-acarstab-acarsEstimatedTimeDepartureTF'
            }, {
                xtype: 'datefield',
                hideTrigger: !0,
                fieldLabel: 'OFF',
                labelSeparator: '',
                labelAlign: 'top',
                name: 'acarsEstimatedTakeOffTime',
                timeFieldName: 'acarsEstimatedTakeOffTimeTF',
                cls: 'test-id-legdetail-acarstab-acarsEstimatedTakeOffTime'
            }, {
                xtype: 'timefield',
                fieldLabel: '&nbsp;',
                labelSeparator: '',
                labelAlign: 'top',
                name: 'acarsEstimatedTakeOffTimeTF',
                cls: 'test-id-legdetail-acarstab-acarsEstimatedTakeOffTimeTF'
            }, {
                xtype: 'label',
                text: 'AD',
                tdAttrs: {
                    style: 'text-align: right'
                },
                style: {
                    display: 'inline-block'
                }
            }, {
                xtype: 'datefield',
                hideTrigger: !0,
                fieldLabel: '',
                name: 'acarsOffblockTime',
                timeFieldName: 'acarsOffblockTimeTF',
                cls: 'test-id-legdetail-acarstab-acarsOffblockTime'
            }, {
                xtype: 'timefield',
                fieldLabel: '',
                name: 'acarsOffblockTimeTF',
                cls: 'test-id-legdetail-acarstab-acarsOffblockTimeTF'
            }, {
                xtype: 'datefield',
                hideTrigger: !0,
                fieldLabel: '',
                name: 'acarsAirborneTime',
                timeFieldName: 'acarsAirborneTimeTF',
                cls: 'test-id-legdetail-acarstab-acarsAirborneTime'
            }, {
                xtype: 'timefield',
                fieldLabel: '',
                name: 'acarsAirborneTimeTF',
                cls: 'test-id-legdetail-acarstab-acarsAirborneTimeTF'
            }]
        }, {
            xtype: 'fieldset',
            flex: 1,
            cls: 'dwFieldset',
            title: 'Arrival',
            margin: '10px 5px',
            layout: {
                type: 'table',
                columns: 5
            },
            defaults: {
                margin: b,
                readOnly: !0
            },
            items: [{
                xtype: 'label',
                text: 'To',
                style: {
                    display: 'inline-block'
                }
            }, {
                xtype: 'textfield',
                colspan: 4,
                fieldLabel: '',
                width: a,
                name: 'acarsTo',
                cls: 'test-id-legdetail-acarstab-acarsTo'
            }, {
                xtype: 'box',
                colspan: 5,
                height: 80
            }, {
                xtype: 'label',
                text: 'EA',
                margin: '22px 6px 6px 0',
                style: {
                    display: 'inline-block'
                }
            }, {
                xtype: 'datefield',
                hideTrigger: !0,
                fieldLabel: 'ON',
                labelSeparator: '',
                labelAlign: 'top',
                name: 'acarsEstimatedTouchdownTime',
                timeFieldName: 'acarsEstimatedTouchdownTimeTF',
                cls: 'test-id-legdetail-acarstab-acarsEstimatedTouchdownTime'
            }, {
                xtype: 'timefield',
                fieldLabel: '&nbsp;',
                labelSeparator: '',
                labelAlign: 'top',
                name: 'acarsEstimatedTouchdownTimeTF',
                cls: 'test-id-legdetail-acarstab-acarsEstimatedTouchdownTimeTF'
            }, {
                xtype: 'datefield',
                hideTrigger: !0,
                fieldLabel: 'IN',
                labelSeparator: '',
                labelAlign: 'top',
                name: 'acarsEstimatedTimeArrival',
                timeFieldName: 'acarsEstimatedTimeArrivalTF',
                cls: 'test-id-legdetail-acarstab-acarsEstimatedTimeArrival'
            }, {
                xtype: 'timefield',
                fieldLabel: '&nbsp;',
                labelSeparator: '',
                labelAlign: 'top',
                name: 'acarsEstimatedTimeArrivalTF',
                cls: 'test-id-legdetail-acarstab-acarsEstimatedTimeArrivalTF'
            }, {
                xtype: 'label',
                text: 'AA',
                style: {
                    display: 'inline-block'
                }
            }, {
                xtype: 'datefield',
                hideTrigger: !0,
                fieldLabel: '',
                name: 'acarsLandingTime',
                timeFieldName: 'acarsLandingTimeTF',
                cls: 'test-id-legdetail-acarstab-acarsLandingTime'
            }, {
                xtype: 'timefield',
                fieldLabel: '',
                name: 'acarsLandingTimeTF',
                cls: 'test-id-legdetail-acarstab-acarsLandingTimeTF'
            }, {
                xtype: 'datefield',
                hideTrigger: !0,
                fieldLabel: '',
                name: 'acarsOnblockTime',
                timeFieldName: 'acarsOnblockTimeTF',
                cls: 'test-id-legdetail-acarstab-acarsOnblockTime'
            }, {
                xtype: 'timefield',
                fieldLabel: '',
                name: 'acarsOnblockTimeTF',
                cls: 'test-id-legdetail-acarstab-acarsOnblockTimeTF'
            }]
        }]
    }
}, 0, ['details_leg_acarstab'], ['component', 'box', 'container', 'details_leg_acarstab'], {
    'component': !0,
    'box': !0,
    'container': !0,
    'details_leg_acarstab': !0
}, ['widget.details_leg_acarstab'], [
    ['fieldSizeMixin', TimesSquare.mixin.FieldSizeMixin]
], [TimesSquare.view.details.leg, 'AcarsTab'], 0);
Ext.cmd.derive('TimesSquare.controller.details.Leg', Ext.app.Controller, {
    stores: ['details.Crews'],
    models: ['details.Leg', 'details.Crew'],
    views: ['details.leg.Leg', 'details.leg.Tabs', 'details.leg.ScheduleTab', 'details.leg.ActualTab', 'details.leg.AcarsTab', 'details.leg.CrewTab'],
    refs: [{
        ref: 'viewport',
        selector: 'viewport'
    }, {
        ref: 'paxAndLoadTab',
        selector: 'details_leg_tabs details_leg_paxloadtab'
    }],
    paxAndLoadInterval: 60000,
    init: function() {
        var a = this;
        a.track(['reloadPaxAndLoad', 'getPaxAndLoadCallback', 'onCrewTabActivate']);
        a.control({
            'details_leg_tabs panel[itemId=legDetailCrewTab]': {
                activate: a.onCrewTabActivate
            },
            'details_leg_tabs details_leg_flightlogtab': {
                activate: a.onFlightLogTabActive
            },
            'details_leg_tabs details_leg_paxloadtab': {
                show: a.reloadPaxAndLoad,
                hide: a.clearPaxAndLoadTimeout,
                destroy: a.clearPaxAndLoadTimeout
            }
        })
    },
    onCrewTabActivate: function(b) {
        var a = b.down('details_leg_crewtab');
        if (!a) {
            a = Ext.create('TimesSquare.view.details.leg.CrewTab');
            b.add(a)
        }
        a.displayCrewList()
    },
    onFlightLogTabActive: function(a) {
        var c = a.up('form'),
            d = c && c.getRecord(),
            b = d && d.getFlightLogUrl();
        if (!b) {
            Ext.log.warn('Unable to retrieve leg info to display flightlog data!');
            return
        }
        a.setLoading('Loading...');
        Ext.Ajax.request({
            method: 'GET',
            url: b,
            success: function(f) {
                var c = f && Ext.decode(f.responseText, !0) || null,
                    e = c && c.success && Ext.isObject(c.result) && Ext.create('TimesSquare.model.details.FlightLog', c.result),
                    d;
                a.setLoading(!1);
                if (!e) {
                    d = 'Errorneous or missing Flightlog service response!';
                    Ext.log.warn('Unable to retrieve Flightlog data (' + b + '): ' + d);
                    Ext.Msg.show({
                        icon: Ext.Msg.WARNING,
                        buttons: Ext.Msg.OK,
                        title: 'Flighlog Load Service',
                        msg: d
                    });
                    return
                }
                a.loadRecord(e)
            },
            failure: function() {
                a.setLoading(!1)
            }
        })
    },
    clearPaxAndLoadTimeout: function() {
        window.clearTimeout(this._paxAndLoadTimeout);
        this._paxAndLoadTimeout = null
    },
    reloadPaxAndLoad: function(f) {
        var e = this,
            a = e.getPaxAndLoadTab(),
            c, b, d;
        if (!a || a.isHidden()) {
            return
        }
        c = a.up('form').getRecord();
        if (!c) {
            return
        }
        b = c.data.hyperMedia;
        d = b && b.urlPaxAndLoad;
        if (f !== !1) {
            a.getForm().reset()
        }
        if (!d) {
            Ext.log.warn('getPaxLoad service URl not found!');
            return
        }
        if (f !== !1) {
            a.setLoading('Loading...')
        }
        Ext.Ajax.request({
            url: d,
            callback: e.getPaxAndLoadCallback,
            scope: e
        })
    },
    getPaxAndLoadCallback: function(e, d, a) {
        var b = this,
            c = b.getPaxAndLoadTab();
        if (!c || c.isHidden()) {
            return
        }
        b._paxAndLoadTimeout = Ext.defer(b.reloadPaxAndLoad, b.paxAndLoadInterval, b, [!1]);
        c.setLoading(!1);
        a = d && a && Ext.decode(a.responseText);
        if (!a || !a.success || !a.result) {
            Ext.Msg.show({
                icon: Ext.Msg.WARNING,
                buttons: Ext.Msg.OK,
                title: 'Pax + Load service',
                msg: 'Error on loading Pax and Load data!'
            })
        }
        c.loadDataToForm(a && a.result)
    }
}, 0, 0, 0, 0, 0, [
    ['logger', TimesSquare.mixin.ExecutionTimeLogger]
], [TimesSquare.controller.details, 'Leg'], 0);
Ext.cmd.derive('TimesSquare.view.details.TabPanel', Ext.tab.Panel, {
    autoScroll: !0,
    border: 0,
    deferredRender: !1,
    items: []
}, 0, ['details_tabpanel'], ['component', 'box', 'container', 'panel', 'tabpanel', 'details_tabpanel'], {
    'component': !0,
    'box': !0,
    'container': !0,
    'panel': !0,
    'tabpanel': !0,
    'details_tabpanel': !0
}, ['widget.details_tabpanel'], 0, [TimesSquare.view.details, 'TabPanel'], 0);
Ext.cmd.derive('TimesSquare.model.details.Check', Ext.data.Model, {
    idProperty: 'naturalId',
    proxy: {
        type: 'rest',
        appendId: !1,
        reader: {
            type: 'json',
            rootProperty: 'result'
        }
    },
    fields: [{
        name: 'naturalId',
        type: 'auto',
        mapping: 'identifier',
        convert: function(a) {
            return TimesSquare.model.IdFactory.getEventNaturalIdString(a)
        }
    }, {
        name: 'code',
        type: 'string',
        mapping: 'groundEvent.check.name'
    }, {
        name: 'begin',
        type: 'date',
        dateFormat: 'c',
        mapping: 'groundEvent.start'
    }, {
        name: 'end',
        type: 'date',
        dateFormat: 'c',
        mapping: 'groundEvent.end'
    }, {
        name: 'sequentialCode',
        type: 'string',
        mapping: 'groundEvent.check.seq',
        convert: function(a) {
            if (a === -1) {
                return null
            }
            return a
        }
    }, {
        name: 'airport',
        type: 'string',
        mapping: 'groundEvent.airport'
    }, {
        name: 'duration',
        type: 'auto',
        convert: function(a) {
            return Ext.util.Format.durationRenderer(a)
        }
    }, {
        name: 'carriedOut',
        type: 'boolean',
        mapping: 'groundEvent.carriedOut'
    }, {
        name: 'minAssembleTime',
        type: 'auto',
        convert: function(a) {
            return Ext.util.Format.durationRenderer(a)
        }
    }, {
        name: 'defaultDuration',
        type: 'auto',
        convert: function(a) {
            return Ext.util.Format.durationRenderer(a)
        }
    }, {
        name: 'owner',
        type: 'string',
        mapping: 'groundEvent.logicalAircraft.owner'
    }, {
        name: 'subtype',
        type: 'string',
        mapping: 'groundEvent.logicalAircraft.subtype'
    }, {
        name: 'logicalNo',
        type: 'string',
        mapping: 'groundEvent.logicalAircraft.number'
    }, {
        name: 'registration',
        type: 'string',
        mapping: 'groundEvent.aircraft'
    }, {
        name: 'origRegistration',
        type: 'string',
        mapping: 'origRegistration'
    }, {
        name: 'deicing',
        type: 'boolean',
        mapping: 'deicing'
    }, {
        name: 'engineRun',
        type: 'boolean',
        mapping: 'engineRun'
    }, {
        name: 'etopsProhibit',
        type: 'boolean',
        mapping: 'etopsProhibit'
    }, {
        name: 'state',
        type: 'string',
        mapping: 'state'
    }, {
        name: 'workpackage',
        type: 'auto',
        mapping: 'groundEvent.workPackage',
        convert: function(a) {
            return Ext.util.Format.objToString(a, 'packageName')
        }
    }, {
        name: 'hangar',
        type: 'string',
        mapping: 'groundEvent.hangar'
    }, {
        name: 'remarks',
        type: 'string',
        mapping: 'groundEvent.checkComment'
    }, {
        name: 'priority',
        type: 'string',
        mapping: 'groundEvent.priority'
    }, {
        name: 'checkIncluded',
        type: 'auto',
        convert: function(a) {
            a = a || [];
            return a.join('\n')
        }
    }]
}, 0, 0, 0, 0, 0, 0, [TimesSquare.model.details, 'Check'], 0);
Ext.cmd.derive('TimesSquare.view.common.MappingFieldContainer', Ext.form.FieldContainer, {
    name: '',
    setValue: function(b) {
        var d = this,
            c = d.items,
            a;
        c.each(function(c) {
            a = null;
            if (!b || !c.setValue || !c.hasOwnProperty('dataIndex') && !c.hasOwnProperty('dataProperty')) {
                return !0
            }
            if (c.hasOwnProperty('dataIndex')) {
                a = b[c.dataIndex] || null
            }
            if (c.dataProperty) {
                if (!a) {
                    a = b[c.dataProperty] || null
                } else {
                    a = a[c.dataProperty] || null
                }
            }
            c.setValue(a)
        });
        return this
    }
}, 0, ['mappingfieldcontainer'], ['component', 'box', 'container', 'fieldcontainer', 'mappingfieldcontainer'], {
    'component': !0,
    'box': !0,
    'container': !0,
    'fieldcontainer': !0,
    'mappingfieldcontainer': !0
}, ['widget.mappingfieldcontainer'], [
    ['field', Ext.form.field.Field]
], [TimesSquare.view.common, 'MappingFieldContainer'], 0);
Ext.cmd.derive('TimesSquare.view.details.check.Check', TimesSquare.view.details.DetailPanel, {
    title: 'Check Details',
    modelName: 'Check',
    constructor: function() {
        this.detailType = TimesSquare.model.IdFactory.TYPE.CHECK;
        return TimesSquare.view.details.DetailPanel.prototype.constructor.apply(this, arguments)
    },
    createItems: function(c, b, a, d) {
        var e = this;
        e.items = [{
            xtype: 'container',
            defaults: {
                margin: d,
                readOnly: !0
            },
            layout: {
                type: 'table',
                columns: 7
            },
            items: [{
                xtype: 'label',
                text: 'Code'
            }, {
                xtype: 'textfield',
                colspan: 2,
                fieldLabel: '',
                width: a,
                name: 'code',
                cls: 'test-id-checkdetail-code'
            }, {
                xtype: 'label',
                text: 'Sequential'
            }, {
                xtype: 'textfield',
                fieldLabel: '',
                width: c,
                name: 'sequentialCode',
                cls: 'test-id-checkdetail-sequentialCode'
            }, {
                xtype: 'label',
                text: 'Carried Out'
            }, {
                xtype: 'checkboxfield',
                fieldLabel: '',
                boxLabel: '',
                name: 'carriedOut',
                cls: 'test-id-checkdetail-carriedOut'
            }, {
                xtype: 'label',
                text: 'Begin'
            }, {
                xtype: 'datefield',
                fieldLabel: '',
                hideTrigger: !0,
                name: 'begin',
                timeFieldName: 'beginTF',
                cls: 'test-id-checkdetail-begin'
            }, {
                xtype: 'timefield',
                fieldLabel: '',
                name: 'beginTF',
                cls: 'test-id-checkdetail-beginTF'
            }, {
                xtype: 'label',
                text: 'Airport'
            }, {
                xtype: 'textfield',
                fieldLabel: '',
                width: a,
                name: 'airport',
                cls: 'test-id-checkdetail-airport'
            }, {
                xtype: 'label',
                text: 'Min. Assemble Time'
            }, {
                xtype: 'textfield',
                fieldLabel: '',
                width: a,
                name: 'minAssembleTime',
                cls: 'test-id-checkdetail-minAssembleTime'
            }, {
                xtype: 'label',
                text: 'End'
            }, {
                xtype: 'datefield',
                fieldLabel: '',
                hideTrigger: !0,
                name: 'end',
                timeFieldName: 'endTF',
                cls: 'test-id-checkdetail-end'
            }, {
                xtype: 'timefield',
                fieldLabel: '',
                name: 'endTF',
                cls: 'test-id-checkdetail-endTF'
            }, {
                xtype: 'label',
                text: 'Duration'
            }, {
                xtype: 'textfield',
                fieldLabel: '',
                width: a,
                name: 'duration',
                cls: 'test-id-checkdetail-duration'
            }, {
                xtype: 'label',
                text: 'Default Duration'
            }, {
                xtype: 'textfield',
                fieldLabel: '',
                width: a,
                name: 'defaultDuration',
                cls: 'test-id-checkdetail-defaultDuration'
            }, {
                xtype: 'label',
                text: 'Aircraft'
            }, {
                xtype: 'textfield',
                fieldLabel: 'Owner',
                labelAlign: 'top',
                width: b,
                name: 'owner',
                cls: 'test-id-checkdetail-equipment-owner'
            }, {
                xtype: 'textfield',
                fieldLabel: 'Subtype',
                labelAlign: 'top',
                width: b,
                name: 'subtype',
                cls: 'test-id-checkdetail-equipment-subtype'
            }, {
                xtype: 'textfield',
                fieldLabel: 'Registration',
                labelAlign: 'top',
                width: b,
                name: 'registration',
                cls: 'test-id-checkdetail-equipment-registration'
            }, {
                xtype: 'textfield',
                fieldLabel: 'Logical No.',
                labelAlign: 'top',
                width: b,
                name: 'logicalNo',
                cls: 'test-id-checkdetail-equipment-logicalNo'
            }]
        }, {
            xtype: 'details_checks_tabs',
            margin: '15px 0 0 0'
        }]
    }
}, 1, ['details_check_check'], ['component', 'box', 'container', 'panel', 'form', 'details_detailpanel', 'details_check_check'], {
    'component': !0,
    'box': !0,
    'container': !0,
    'panel': !0,
    'form': !0,
    'details_detailpanel': !0,
    'details_check_check': !0
}, ['widget.details_check_check'], 0, [TimesSquare.view.details.check, 'Check'], 0);
Ext.cmd.derive('TimesSquare.view.details.check.Tabs', Ext.tab.Panel, {
    plain: !0,
    items: [{
        title: 'Equipment',
        xtype: 'details_check_equipmenttab'
    }, {
        title: 'Remarks',
        xtype: 'details_check_remarkstab'
    }, {
        title: 'Included checks',
        xtype: 'details_check_includedtab'
    }]
}, 0, ['details_checks_tabs'], ['component', 'box', 'container', 'panel', 'tabpanel', 'details_checks_tabs'], {
    'component': !0,
    'box': !0,
    'container': !0,
    'panel': !0,
    'tabpanel': !0,
    'details_checks_tabs': !0
}, ['widget.details_checks_tabs'], 0, [TimesSquare.view.details.check, 'Tabs'], 0);
Ext.cmd.derive('TimesSquare.view.details.check.EquipmentTab', Ext.container.Container, {
    initComponent: function() {
        var a = this;
        a.mxCreateItems();
        Ext.container.Container.prototype.initComponent.apply(this, arguments)
    },
    createItems: function(e, b, d, a) {
        var c = this;
        c.items = [{
            xtype: 'container',
            margin: '10px 5px',
            layout: {
                type: 'hbox'
            },
            items: [{
                xtype: 'container',
                layout: 'hbox',
                defaults: {
                    margin: a,
                    readOnly: !0
                },
                items: [{
                    xtype: 'label',
                    text: 'Orig. Registration'
                }, {
                    xtype: 'textfield',
                    fieldLabel: '',
                    width: b,
                    name: 'origRegistration',
                    cls: 'test-id-checkdetail-equipment-origRegistration'
                }]
            }, {
                xtype: 'container',
                layout: 'vbox',
                defaults: {
                    margin: a,
                    readOnly: !0
                },
                items: [{
                    xtype: 'checkboxfield',
                    fieldLabel: 'Deicing',
                    boxLabel: '',
                    name: 'deicing',
                    cls: 'test-id-checkdetail-equipment-deicing'
                }, {
                    xtype: 'checkboxfield',
                    fieldLabel: 'Engine Run',
                    boxLabel: '',
                    name: 'engineRun',
                    cls: 'test-id-checkdetail-equipment-engineRun'
                }, {
                    xtype: 'checkboxfield',
                    fieldLabel: 'ETOPS Prohibit',
                    boxLabel: '',
                    name: 'etopsProhibit',
                    cls: 'test-id-checkdetail-equipment-etopsProhibit'
                }]
            }]
        }]
    }
}, 0, ['details_check_equipmenttab'], ['component', 'box', 'container', 'details_check_equipmenttab'], {
    'component': !0,
    'box': !0,
    'container': !0,
    'details_check_equipmenttab': !0
}, ['widget.details_check_equipmenttab'], [
    ['fieldSizeMixin', TimesSquare.mixin.FieldSizeMixin]
], [TimesSquare.view.details.check, 'EquipmentTab'], 0);
Ext.cmd.derive('TimesSquare.view.details.check.RemarksTab', Ext.container.Container, {
    padding: '10px 5px',
    layout: {
        type: 'table',
        columns: 6
    },
    initComponent: function() {
        var a = this;
        a.mxCreateItems();
        Ext.container.Container.prototype.initComponent.apply(this, arguments)
    },
    createItems: function(e, d, a, c) {
        var b = this;
        b.defaults = {
            margin: c,
            readOnly: !0
        };
        b.items = [{
            xtype: 'label',
            text: 'State'
        }, {
            xtype: 'textfield',
            fieldLabel: '',
            width: a,
            name: 'state',
            cls: 'test-id-checkdetail-remarks-state'
        }, {
            xtype: 'label',
            text: 'Workpackage'
        }, {
            xtype: 'textfield',
            fieldLabel: '',
            width: a,
            name: 'workpackage',
            cls: 'test-id-checkdetail-remarks-workpackage'
        }, {
            xtype: 'label',
            text: 'Hangar'
        }, {
            xtype: 'textfield',
            fieldLabel: '',
            width: a,
            name: 'hangar',
            cls: 'test-id-checkdetail-remarks-hangar'
        }, {
            xtype: 'label',
            text: 'Remarks'
        }, {
            xtype: 'textarea',
            colspan: 5,
            width: '100%',
            fieldLabel: '',
            name: 'remarks',
            cls: 'test-id-checkdetail-remarks-remarks'
        }, {
            xtype: 'label',
            text: 'Priority'
        }, {
            xtype: 'textfield',
            fieldLabel: '',
            width: a,
            name: 'priority',
            cls: 'test-id-checkdetail-remarks-priority'
        }]
    }
}, 0, ['details_check_remarkstab'], ['component', 'box', 'container', 'details_check_remarkstab'], {
    'component': !0,
    'box': !0,
    'container': !0,
    'details_check_remarkstab': !0
}, ['widget.details_check_remarkstab'], [
    ['fieldSizeMixin', TimesSquare.mixin.FieldSizeMixin]
], [TimesSquare.view.details.check, 'RemarksTab'], 0);
Ext.cmd.derive('TimesSquare.view.details.check.IncludedTab', Ext.container.Container, {
    padding: '10px 5px',
    initComponent: function() {
        var a = this;
        a.mxCreateItems();
        Ext.container.Container.prototype.initComponent.apply(this, arguments)
    },
    createItems: function() {
        var a = this;
        a.defaults = {
            readOnly: !0
        };
        a.items = [{
            xtype: 'textarea',
            fieldLabel: 'Included',
            labelAlign: 'top',
            width: '100%',
            name: 'checkIncluded',
            cls: 'test-id-checkdetail-included-includedChecks'
        }]
    }
}, 0, ['details_check_includedtab'], ['component', 'box', 'container', 'details_check_includedtab'], {
    'component': !0,
    'box': !0,
    'container': !0,
    'details_check_includedtab': !0
}, ['widget.details_check_includedtab'], [
    ['fieldSizeMixin', TimesSquare.mixin.FieldSizeMixin]
], [TimesSquare.view.details.check, 'IncludedTab'], 0);
Ext.cmd.derive('TimesSquare.controller.details.Main', Ext.app.Controller, {
    stores: [],
    models: ['details.Check'],
    views: ['common.MappingFieldContainer', 'details.TabPanel', 'details.DetailPanel', 'details.check.Check', 'details.check.Tabs', 'details.check.EquipmentTab', 'details.check.RemarksTab', 'details.check.IncludedTab'],
    refs: [{
        ref: 'viewport',
        selector: 'viewport'
    }, {
        ref: 'detailsTabpanel',
        selector: 'details_tabpanel'
    }],
    statics: {
        view: {
            LEG: 'details_leg_leg',
            CHECK: 'details_check_check',
            AIRCRAFT: 'details_aircraft_aircraft',
            SEARCHLEG: 'searchleg_searchleg'
        }
    },
    init: function() {
        var a = this;
        a.track(['open', 'onServerPush']);
        a.getController('details.Leg');
        a.getController('details.Aircraft');
        a.getController('SearchLeg');
        a.listen({
            controller: {
                '#Messaging': {
                    opsdatachanged: a.onServerPush
                }
            },
            component: {
                'details_detailpanel': {
                    removed: a.onDetailPanelRemoved
                },
                'searchleg_searchleg': {
                    removed: a.onDetailPanelRemoved
                }
            }
        })
    },
    open: function(f, g) {
        var a = this,
            d = a.getViewport(),
            b, c, e;
        Ext.log.info('[Details] Open details (panel = "' + f + '", id = "' + g + '")');
        d.setLoading('Please wait...');
        b = a.hasDetailContainer();
        a.open.stepIn();
        a.open.options(function(b) {
            b.tpl = a.trackingTpl + Ext.String.format(' | ID: {0}', g)
        });
        Ext.defer(function() {
            if (!b) {
                b = a.createDetailContainer()
            }
            e = b.down('details_tabpanel');
            c = a.hasDetailView(b, f);
            if (!c) {
                c = a.createDetailView(f);
                e.add(c)
            }
            if (!a.hasDetailContainer()) {
                d.add(b)
            }
            e.setActiveTab(c);
            if (b.collapsed) {
                b.expand()
            }
            if (c.updateView) {
                c.updateView(d, g)
            } else {
                d.setLoading(!1)
            }
            a.open.stepOut()
        }, 100)
    },
    createDetailContainer: function() {
        return Ext.create('Ext.panel.Panel', {
            region: 'east',
            width: 870,
            autoScroll: !0,
            collapsible: !0,
            animCollapse: !1,
            split: !0,
            layout: 'fit',
            items: {
                xtype: 'details_tabpanel'
            }
        })
    },
    hasDetailContainer: function() {
        var b = this,
            a = b.getViewport();
        return a.down('panel[region=east]')
    },
    createDetailView: function(a) {
        return Ext.createByAlias('widget.' + a)
    },
    hasDetailView: function(a, b) {
        if (!a || !b) {
            return
        }
        return a.down(b)
    },
    onDetailPanelRemoved: function() {
        var c = this,
            d = c.getViewport(),
            a = c.hasDetailContainer(),
            b = a && a.down('details_tabpanel');
        if (b && !b.items.getCount()) {
            d.remove(a)
        }
    },
    onServerPush: function(a) {
        var c = this,
            b;
        if (!c.hasOpenDetailPanel()) {
            return
        }
        for (b in a) {
            if (a.hasOwnProperty(b)) {
                c.updateDataInOpenedDetailPanels(a[b])
            }
        }
    },
    hasOpenDetailPanel: function() {
        var a = this,
            b = a.hasDetailContainer(),
            c = a.getDetailsTabpanel();
        return b && c.items.getCount()
    },
    updateDataInOpenedDetailPanels: function(f) {
        var e = this,
            d = e.getDetailsTabpanel(),
            g = d.getActiveTab(),
            c, b, a;
        d.items.each(function(d) {
            c = d.getRecord && d.getRecord();
            if (!d.detailType || !c) {
                return !0
            }
            b = c.get('naturalId');
            a = f.getStateContainer(b, d.detailType);
            if (a) {
                if (g.detailType === d.detailType) {
                    d.setLoading('Updating...')
                }
                e.takeActionByState(d, b, a)
            }
        })
    },
    takeActionByState: function(b, e, a) {
        var d = this,
            c = d.getViewport();
        switch (a.state) {
            case TimesSquare.classes.MessageEvent.TYPE.UPDATE:
                b.updateView(c, a.o.getUrl());
                break;
            case TimesSquare.classes.MessageEvent.TYPE.DELETE:
                Ext.defer(function() {
                    b.clearView()
                }, 100);
                break;
            default:
        }
    }
}, 0, 0, 0, 0, 0, [
    ['logger', TimesSquare.mixin.ExecutionTimeLogger]
], [TimesSquare.controller.details, 'Main'], 0);
Ext.cmd.derive('TimesSquare.data.field.TSDate', Ext.data.field.Field, {
    sortType: Ext.data.SortTypes.asDate,
    convert: function(a) {
        if (!a) {
            return null
        }
        if (a instanceof Date) {
            return a
        }
        return new Date(+a.substr(0, 4), a.substr(5, 2) - 1, +a.substr(8, 2), +a.substr(11, 2), +a.substr(14, 2), +a.substr(17, 2))
    }
}, 0, 0, 0, 0, ['data.field.tsdate'], 0, [TimesSquare.data.field, 'TSDate'], 0);
Ext.cmd.derive('TimesSquare.model.details.FlightLog', Ext.data.Model, {
    idProperty: 'crewMemberID',
    proxy: {
        type: 'rest',
        appendId: !1,
        reader: {
            type: 'json',
            rootProperty: 'result'
        }
    },
    fields: [{
        name: 'flRefNo',
        type: 'int'
    }, {
        name: 'checkedByLog',
        type: 'boolean'
    }, {
        name: 'arrivalAirport',
        type: 'string'
    }, {
        name: 'offblockDate',
        persist: !1,
        convert: function(a, b) {
            a = b.data.offblockTime;
            return a && (a instanceof Date ? a : Ext.Date.parse(a.value, 'c')) || null
        }
    }, {
        name: 'offblockTime',
        convert: function(a, b) {
            a = b.data.offblockTime;
            return a && (a instanceof Date ? a : Ext.Date.parse(a.value, 'c')) || null
        }
    }, {
        name: 'takeoffDate',
        persist: !1,
        convert: function(a, b) {
            a = b.data.takeoffTime;
            return a && (a instanceof Date ? a : Ext.Date.parse(a.value, 'c')) || null
        }
    }, {
        name: 'takeoffTime',
        convert: function(a, b) {
            a = b.data.takeoffTime;
            return a && (a instanceof Date ? a : Ext.Date.parse(a.value, 'c')) || null
        }
    }, {
        name: 'touchdownDate',
        persist: !1,
        convert: function(a, b) {
            a = b.data.touchdownTime;
            return a && (a instanceof Date ? a : Ext.Date.parse(a.value, 'c')) || null
        }
    }, {
        name: 'touchdownTime',
        convert: function(a, b) {
            a = b.data.touchdownTime;
            return a && (a instanceof Date ? a : Ext.Date.parse(a.value, 'c')) || null
        }
    }, {
        name: 'onblockDate',
        persist: !1,
        convert: function(a, b) {
            a = b.data.onblockTime;
            return a && (a instanceof Date ? a : Ext.Date.parse(a.value, 'c')) || null
        }
    }, {
        name: 'onblockTime',
        convert: function(a, b) {
            a = b.data.onblockTime;
            return a && (a instanceof Date ? a : Ext.Date.parse(a.value, 'c')) || null
        }
    }, {
        name: 'departureDelay',
        type: 'auto'
    }, {
        name: 'departureIrregularities',
        type: 'auto'
    }, {
        name: 'arrivalDelays',
        type: 'auto'
    }, {
        name: 'instrFlightTime',
        type: 'string'
    }, {
        name: 'cycles',
        type: 'int'
    }, {
        name: 'touchAndGo',
        type: 'int'
    }],
    getCalculatedFieldValues: function() {
        var b = this,
            c = b.get('arrivalDelays') || null,
            i = b.get('onblockTime'),
            h = b.get('offblockTime'),
            e = i && h ? (+i - +h) / 60000 : null,
            g = b.get('touchdownTime'),
            j = b.get('takeoffTime'),
            f = g && j ? (+g - +j) / 60000 : null,
            a = {
                mergedArrivalDelays: [],
                mergedDepartureDelays: []
            },
            d;
        Ext.each(b.get('departureDelay') || [], function(c, b) {
            Ext.iterate(c, function(e, d) {
                if (e === 'delayTime' && Ext.isNumeric(d)) {
                    d = Ext.util.Format.delayDurationRenderer(d)
                }
                if (!a.mergedDepartureDelays[b]) {
                    a.mergedDepartureDelays[b] = {}
                }
                a.mergedDepartureDelays[b][e] = d
            });
            a.departureTotal = (a.departureTotal || 0) + c.delayTime
        });
        Ext.each(b.get('departureIrregularities') || [], function(c, b) {
            Ext.iterate(c, function(e, d) {
                if (!a.mergedDepartureDelays[b]) {
                    a.mergedDepartureDelays[b] = {}
                }
                a.mergedDepartureDelays[b]['irregularities.' + e] = d
            })
        });
        a.hasArrivalDelays = !!c;
        if (c) {
            if (c.calcDelayAtArrival) {
                d = c.inflightDelay;
                if (d) {
                    d.delayTime += a.departureTotal || 0
                }
            } else {
                d = c.arrivalDelay
            }
            Ext.each(d || [], function(c, b) {
                Ext.iterate(c, function(e, d) {
                    if (e === 'delayTime' && Ext.isNumeric(d)) {
                        d = Ext.util.Format.delayDurationRenderer(d)
                    }
                    if (!a.mergedArrivalDelays[b]) {
                        a.mergedArrivalDelays[b] = {}
                    }
                    a.mergedArrivalDelays[b][e] = d
                });
                a.arrivalTotal = (a.arrivalTotal || 0) + c.delayTime
            });
            Ext.each(c.arrivalIrregularities || [], function(c, b) {
                Ext.iterate(c, function(e, d) {
                    if (!a.mergedArrivalDelays[b]) {
                        a.mergedArrivalDelays[b] = {}
                    }
                    a.mergedArrivalDelays[b]['irregularities.' + e] = d
                })
            });
            a.arrivalTotal = Ext.util.Format.delayDurationRenderer(a.arrivalTotal)
        }
        a.blockFlightTimeMin = Ext.util.Format.delayDurationRenderer(e);
        a.blockFlightTimeDec = e === null ? '' : Ext.Number.toFixed(e / 60, 2);
        a.airFlightTimeMin = Ext.util.Format.delayDurationRenderer(f);
        a.airFlightTimeDec = f === null ? '' : Ext.Number.toFixed(f / 60, 2);
        a.departureTotal = Ext.util.Format.delayDurationRenderer(a.departureTotal);
        return a
    }
}, 0, 0, 0, 0, 0, 0, [TimesSquare.model.details, 'FlightLog'], 0);
Ext.cmd.derive('TimesSquare.model.gantt.UserMarker', Ext.data.Model, {
    fields: ['number'],
    constructor: function() {
        var a = Ext.Array.from(arguments),
            b = a[0];
        if (b && Ext.isNumeric(b)) {
            b = {
                number: a.shift()
            };
            a.unshift(b)
        }
        Ext.data.Model.prototype.constructor.apply(this, a)
    },
    composeAttributes: function(b) {
        var a = this.getInfoFromParameters(b);
        if (Ext.Object.getKeys(a).length > 0) {
            return {
                'data-qtip': a.name.replace('\n', '<br>'),
                style: {
                    'border-color': 'transparent transparent ' + a.color + ' transparent'
                }
            }
        }
        return null
    },
    getInfoFromParameters: function(b) {
        var c = 'com.lhsystems.ops.profile.server.dataimpl.parameterconfiguration.MARKER_',
            a = Ext.Object.getKeys(b),
            e = new RegExp(Ext.String.format('{0}.+_{1}$', c, this.get('number'))),
            d = {};
        a = Ext.Array.filter(a, function(a) {
            return e.test(a)
        });
        Ext.each(a, function(a) {
            var e = a.replace(c, '').replace(/_\d+$/, '').toLowerCase();
            d[e] = b[a]
        });
        return d
    }
}, 1, 0, 0, 0, 0, 0, [TimesSquare.model.gantt, 'UserMarker'], 0);
Ext.cmd.derive('TimesSquare.model.gantt.SystemMarker', Ext.data.Model, {
    fields: ['tooltip', 'icon', 'layout'],
    composeAttributes: function() {
        var d = this.internalId,
            c = this.get('icon'),
            b = this.get('layout'),
            a = {
                'data-identifier': d,
                'data-qtip': this.getTooltip(),
                style: {}
            };
        if (c) {
            a.style['background-size'] = 'contain';
            a.style['background-image'] = 'url("resources/icons/marker/' + c + '.png")'
        } else {
            if (b && b.bgColor) {
                a.style['background-color'] = b.bgColor;
                a.style.border = 'solid 1px #585858'
            }
        }
        return a
    },
    getTooltip: function() {
        var b = (this.get('tooltip') || '').split('\n'),
            d = b.shift(),
            c = b.join('<br>'),
            a = ["<span class='ops-remark-tooltip-header'>" + d + '</span>'];
        if (!Ext.isEmpty(c)) {
            a.push('<br>', "<p class='ops-remark-tooltip-text'>", c, '</p>')
        }
        return Ext.String.htmlEncode(a.join(''))
    }
}, 0, 0, 0, 0, 0, 0, [TimesSquare.model.gantt, 'SystemMarker'], 0);
Ext.cmd.derive('TimesSquare.model.gantt.Remark', Ext.data.Model, {
    fields: ['urlTooltip', 'urlTooltipLocal', 'icon'],
    composeAttributes: function() {
        var a = this.internalId;
        return {
            'data-identifier': a,
            'data-url-tooltip': this.get('urlTooltip'),
            'data-url-tooltip-local': this.get('urlTooltipLocal'),
            style: {
                'background-image': 'url(' + this.get('icon') + ')',
                'background-size': 'contain'
            }
        }
    }
}, 0, 0, 0, 0, 0, 0, [TimesSquare.model.gantt, 'Remark'], 0);
Ext.cmd.derive('TimesSquare.model.gantt.Event', Sch.model.Event, {
    statics: {
        convertCommon: function(a) {
            var b = {
                ResourceId: a.legDetail.schedule.rotationIdentifier.registration,
                departureAirport: a.legDetail.schedule.departureAirport,
                arrivalAirport: a.legDetail.schedule.arrivalAirport,
                aircraftOwner: a.legDetail.schedule.aircraftOwner,
                aircraftSubtype: a.legDetail.schedule.aircraftSubtype,
                diversionAirport: a.legDetail.actuals && a.legDetail.actuals.diversionAirport,
                urlStatusLine: a.hyperMedia && a.hyperMedia.urlStatusLine,
                urlStatusLineLocal: a.hyperMedia && a.hyperMedia.urlStatusLineLocalAtAirport,
                dayOfOrigin: a.identifier.natKey.dayOfOrigin,
                state: a.legDetail.state,
                userMarkers: Ext.Array.map(a.userMarkers || [], function(b) {
                    return TimesSquare.model.gantt.UserMarker.create(b)
                }),
                systemMarkers: Ext.Array.map(a.systemMarkers || [], function(b) {
                    return TimesSquare.model.gantt.SystemMarker.create(b)
                }),
                remarks: Ext.Array.map(a.legDetail.remarks || [], function(b) {
                    return TimesSquare.model.gantt.Remark.create(b)
                })
            };
            return b
        }
    },
    fields: [{
        name: 'StartDate',
        type: 'tsdate'
    }, {
        name: 'EndDate',
        type: 'tsdate'
    }, {
        name: 'StartDateLocal',
        type: 'tsdate'
    }, {
        name: 'EndDateLocal',
        type: 'tsdate'
    }, {
        name: 'bgColor',
        type: 'string'
    }, {
        name: 'fgColor',
        type: 'string'
    }, {
        name: 'departureAirport',
        type: 'string'
    }, {
        name: 'arrivalAirport',
        type: 'string'
    }, {
        name: 'diversionAirport',
        type: 'string',
        defaultValue: null,
        allowNull: !0
    }, {
        name: 'aircraftOwner',
        type: 'string'
    }, {
        name: 'aircraftSubtype',
        type: 'string'
    }, {
        name: 'eventType',
        type: 'string'
    }, {
        name: 'state',
        type: 'string'
    }, {
        name: 'naturalId',
        type: 'string'
    }, {
        name: 'url',
        type: 'string'
    }, {
        name: 'tooltip',
        type: 'auto',
        defaultValue: null,
        allowNull: !0
    }, {
        name: 'urlTooltip',
        type: 'string'
    }, {
        name: 'tooltipLocal',
        type: 'auto',
        defaultValue: null,
        allowNull: !0
    }, {
        name: 'urlTooltipLocal',
        type: 'string'
    }, {
        name: 'urlStatusLine',
        type: 'string'
    }, {
        name: 'urlStatusLineLocal',
        type: 'string'
    }, {
        name: 'logicalNo',
        defaultValue: null,
        allowNull: !0,
        type: 'int'
    }, {
        name: 'dayOfOrigin',
        type: 'tsdate'
    }, {
        name: 'ActualStartDate',
        type: 'tsdate'
    }, {
        name: 'ActualEndDate',
        type: 'tsdate'
    }, {
        name: 'overlapCount',
        type: 'int',
        defaultValue: 0,
        persist: !1
    }, {
        name: 'userMarkers',
        type: 'auto'
    }, {
        name: 'systemMarkers',
        type: 'auto'
    }, {
        name: 'remarks',
        type: 'auto'
    }, {
        name: 'updateKey',
        type: 'int',
        useNull: !1
    }],
    getNestedBy: function(d, a, c) {
        var b = this.get(d);
        if (!Ext.isArray(b)) {
            return
        }
        return Ext.Array.findBy(b, function(b) {
            return b.get(a) === c || b[a] === c
        })
    },
    isLogical: function() {
        return !Ext.isEmpty(this.getLogicalNo())
    },
    getLogicalNo: function() {
        return this.get('logicalNo')
    },
    getDepartureAirport: function() {
        return this.get('departureAirport')
    },
    getArrivalAirport: function() {
        return this.get('arrivalAirport')
    },
    getAircraftOwner: function() {
        return this.get('aircraftOwner')
    },
    getAircraftSubtype: function() {
        return this.get('aircraftSubtype')
    },
    getBgColor: function() {
        return this.get('bgColor')
    },
    getFgColor: function() {
        return this.get('fgColor')
    },
    getNaturalId: function() {
        return this.get('naturalId')
    },
    getUrl: function() {
        return this.get('url')
    },
    getTooltip: function() {
        return this.get('tooltip')
    },
    compare: function(g) {
        var a = this.data,
            b = g.data,
            c = a.StartDate.utc,
            d = b.StartDate.utc,
            e = a.EndDate.utc,
            f = b.EndDate.utc;
        if (c === d) {
            if (e === f && a.counter !== null && b.counter !== null) {
                return a.counter - b.counter
            }
            return e > f ? -1 : 1
        }
        return c < d ? -1 : 1
    }
}, 0, 0, 0, 0, 0, 0, [TimesSquare.model.gantt, 'Event'], 0);
Ext.cmd.derive('TimesSquare.model.gantt.AtcSlot', TimesSquare.model.gantt.Event, {
    statics: {
        transformAtcSlot: function(a, d, b) {
            var c = {
                displayState: a.displayState,
                displayTime: a.displayTime,
                ResourceId: a.registration,
                StartDate: a.startDate,
                EndDate: a.endDate,
                bgColor: a.layout.bgColor,
                fgColor: a.layout.fgColor,
                state: a.state,
                urlTooltip: a.hyperMedia && a.hyperMedia.urlTooltip,
                urlTooltipLocal: a.hyperMedia && a.hyperMedia.urlTooltipLocalAtAirport,
                urlStatusLine: a.hyperMedia && a.hyperMedia.urlStatusLine,
                urlStatusLineLocal: a.hyperMedia && a.hyperMedia.urlStatusLineLocalAtAirport,
                templateType: a.templateType,
                ctot: a.ctot,
                taxiTime: a.taxiTime,
                eventType: 'AS',
                Cls: 'event-atc-slot'
            };
            Ext.Object.merge(c, {
                bestDepTime: b.bestDepTime,
                bestTakeoffTime: b.bestTakeoffTime,
                isDeparted: b.isDeparted,
                isCancelled: b.isCancelled,
                isReturnToRamp: b.isReturnToRamp,
                departureAirport: b.legDetail.schedule.departureAirport,
                arrivalAirport: b.legDetail.schedule.arrivalAirport,
                dayOfOrigin: b.identifier.natKey.dayOfOrigin
            });
            if (c.state === 'SLC') {
                c.Cls = 'event-atc-slot-slc'
            }
            c.legId = d.getId();
            c.naturalId = d.getNaturalId();
            return new this(c)
        }
    },
    fields: [{
        name: 'legId',
        type: 'string'
    }, {
        name: 'state',
        type: 'string'
    }, {
        name: 'displayState',
        type: 'string'
    }, {
        name: 'displayTime',
        type: 'string'
    }, {
        name: 'templateType',
        type: 'string'
    }, {
        name: 'ctot',
        type: 'tsdate'
    }, {
        name: 'bestDepTime',
        type: 'tsdate'
    }, {
        name: 'bestTakeoffTime',
        type: 'tsdate'
    }, {
        name: 'isDeparted',
        type: 'boolean'
    }, {
        name: 'isCancelled',
        type: 'boolean'
    }, {
        name: 'isReturnToRamp',
        type: 'boolean'
    }, {
        name: 'taxiTime',
        type: 'int',
        convert: function(a) {
            var b = 0;
            if (a) {
                b = a.hours * 60 + a.minutes
            }
            return b
        }
    }],
    getLegId: function() {
        return this.get('legId')
    },
    getTemplateType: function() {
        return this.get('templateType')
    },
    setTemplateType: function(a) {
        this.set('templateType', a)
    },
    getCtot: function() {
        return this.get('ctot')
    },
    getBestDepTime: function() {
        return this.get('bestDepTime')
    },
    getBestTakeoffTime: function() {
        return this.get('bestTakeoffTime')
    },
    getTaxiTime: function() {
        return this.get('taxiTime')
    },
    setBgColor: function(a) {
        this.set('bgColor', a)
    },
    setFgColor: function(a) {
        this.set('fgColor', a)
    },
    isDeparted: function() {
        return this.get('isDeparted')
    },
    isCancelled: function() {
        return this.get('isCancelled')
    },
    isReturnToRamp: function() {
        return this.get('isReturnToRamp')
    }
}, 0, 0, 0, 0, 0, 0, [TimesSquare.model.gantt, 'AtcSlot'], 0);
Ext.cmd.derive('TimesSquare.model.gantt.Check', TimesSquare.model.gantt.Event, {
    statics: {
        transformCheck: function(a) {
            var c = a.identifier,
                b = TimesSquare.model.gantt.Event.convertCommon(a);
            Ext.Object.merge(b, {
                StartDate: a.legDetail.schedule.departure,
                EndDate: a.legDetail.schedule.arrival,
                StartDateLocal: a.localTimes && a.localTimes.departureSched,
                EndDateLocal: a.localTimes && a.localTimes.arrivalSched,
                bgColor: a.layoutSchedule.bgColor,
                fgColor: a.layoutSchedule.fgColor,
                url: a.hyperMedia.urlCheckDetail,
                urlTooltip: a.hyperMedia.urlTooltip,
                urlTooltipLocal: a.hyperMedia.urlTooltipLocalAtAirport,
                urlStatusLine: a.hyperMedia && a.hyperMedia.urlStatusLine,
                urlStatusLineLocal: a.hyperMedia && a.hyperMedia.urlStatusLineLocalAtAirport,
                eventType: 'C',
                Cls: 'event-check-planned',
                naturalId: TimesSquare.model.IdFactory.getEventNaturalIdString(c),
                Name: a.name
            });
            if (a.eventType === 'ACTUAL') {
                b.Cls = 'event-check-unplanned'
            }
            b.Id = TimesSquare.model.IdFactory.getEventId(b.naturalId, b);
            return new this(b)
        }
    }
}, 0, 0, 0, 0, 0, 0, [TimesSquare.model.gantt, 'Check'], 0);
Ext.cmd.derive('TimesSquare.model.gantt.Leg', TimesSquare.model.gantt.Event, {
    statics: {
        transformActualLeg: function(a) {
            var c = a.identifier,
                b = TimesSquare.model.gantt.Event.convertCommon(a);
            Ext.Object.merge(b, {
                StartDate: a.legDetail.actuals.offblockTime.value,
                EndDate: a.legDetail.actuals.onblockTime.value,
                StartDateLocal: a.localTimes && a.localTimes.departureActual,
                EndDateLocal: a.localTimes && a.localTimes.arrivalActual,
                bgColor: a.layoutActual.bgColor,
                fgColor: a.layoutActual.fgColor,
                url: a.hyperMedia.urlLegDetail,
                urlTooltip: a.hyperMedia.urlTooltip,
                urlTooltipLocal: a.hyperMedia.urlTooltipLocalAtAirport,
                urlStatusLine: a.hyperMedia && a.hyperMedia.urlStatusLine,
                urlStatusLineLocal: a.hyperMedia && a.hyperMedia.urlStatusLineLocalAtAirport,
                eventType: 'A',
                Cls: 'event-leg-actual',
                logicalNo: a.legDetail.schedule.rotationIdentifier.logicalNo,
                Name: a.name
            });
            b.naturalId = TimesSquare.model.IdFactory.getEventNaturalIdString(c);
            b.counter = c.natKey.counter;
            b.updateKey = a.updateKey;
            b.Id = TimesSquare.model.IdFactory.getEventId(b.naturalId, b);
            return new this(b)
        },
        transformScheduledLeg: function(a) {
            var c = a.identifier,
                b = TimesSquare.model.gantt.Event.convertCommon(a);
            Ext.apply(b, {
                StartDate: a.legDetail.schedule.departure,
                EndDate: a.legDetail.schedule.arrival,
                StartDateLocal: a.localTimes && a.localTimes.departureSched,
                EndDateLocal: a.localTimes && a.localTimes.arrivalSched,
                bgColor: a.layoutSchedule.bgColor,
                fgColor: a.layoutSchedule.fgColor,
                url: a.hyperMedia.urlLegDetail,
                urlTooltip: a.hyperMedia.urlTooltip,
                urlTooltipLocal: a.hyperMedia.urlTooltipLocalAtAirport,
                urlStatusLine: a.hyperMedia && a.hyperMedia.urlStatusLine,
                urlStatusLineLocal: a.hyperMedia && a.hyperMedia.urlStatusLineLocalAtAirport,
                eventType: 'S',
                Cls: 'event-leg-scheduled',
                logicalNo: a.legDetail.schedule.rotationIdentifier.logicalNo,
                ActualStartDate: a.eventType === 'ACTUAL' ? a.legDetail.actuals.offblockTime.value : null,
                ActualEndDate: a.eventType === 'ACTUAL' ? a.legDetail.actuals.onblockTime.value : null,
                Name: a.name
            });
            b.naturalId = TimesSquare.model.IdFactory.getEventNaturalIdString(c);
            b.counter = c.natKey.counter;
            b.updateKey = a.updateKey;
            b.Id = TimesSquare.model.IdFactory.getEventId(b.naturalId, b);
            return new this(b)
        }
    }
}, 0, 0, 0, 0, 0, 0, [TimesSquare.model.gantt, 'Leg'], 0);
Ext.cmd.derive('TimesSquare.store.common.Operators', Ext.data.Store, {
    fields: [{
        name: 'key'
    }, {
        name: 'value'
    }],
    remoteFilter: !1,
    key: 'value',
    excludeOptions: [],
    constructor: function() {
        var a = this;
        Ext.data.Store.prototype.constructor.apply(this, arguments);
        if (a.excludeOptions.length) {
            a.addLovFilter()
        }
        a.on('beforeload', function(a) {
            return !a.getCount()
        })
    },
    addLovFilter: function() {
        var a = this;
        a.filterOnLoad = !0;
        a.addFilter([function(b) {
            return Ext.Array.indexOf(a.excludeOptions, b.data[a.key]) === -1
        }], !1)
    }
}, 1, 0, 0, 0, 0, 0, [TimesSquare.store.common, 'Operators'], 0);
Ext.cmd.derive('TimesSquare.store.details.ControlledChecks', Ext.data.Store, {
    autoLoad: !1,
    remoteStore: !1,
    fields: ['code', 'checkCode', 'flightHours', 'cycles', 'time', 'begin', 'end', 'airport'],
    sorters: [{
        property: 'code',
        direction: 'ASC'
    }],
    loadControlledChecksData: function(b) {
        var a = [];
        Ext.Array.each(b, function(d) {
            var c = d.last || {};
            c.code = d.checkCode.name;
            a.push(c)
        });
        this.loadData(a)
    }
}, 0, 0, 0, 0, 0, 0, [TimesSquare.store.details, 'ControlledChecks'], 0);
Ext.cmd.derive('TimesSquare.util.Logger', Wuis.util.Logger, {
    singleton: !0,
    sizeLimit: 40,
    enableFineLog: !1,
    checkLogSize: function() {
        var a = this;
        if (a.enableFineLog && a.logs.length >= a.sizeLimit) {
            a.postLogs();
            a.logs = [];
            return
        }
        if (a.logs.length > a.sizeLimit) {
            a.logs.shift()
        }
    },
    addLog: function(c, b) {
        var a = this;
        if (c === 'error') {
            a.postError(b)
        } else {
            a.callParent(arguments)
        }
    },
    trackJsError: function() {
        var a = this;
        a.jsErrorArgs = arguments;
        a.callParent(arguments)
    },
    restartTimeout: Ext.emptyFn,
    saveLog: Ext.emptyFn,
    postLogs: function() {
        var a = this;
        a.jsErrorArgs = null;
        a.postError(null)
    },
    postError: function(c) {
        var f = this,
            h = f.logs,
            i = h.length,
            g = Ext.ComponentQuery.query('gantt')[0],
            b = WuisLogin && WuisLogin.Security,
            e, d, a;
        if (c !== null) {
            c += '\nTime: ' + Ext.Date.format(new Date(), 'Y-m-d H:i:s.u')
        }
        d = {
            browser: window.navigator && window.navigator.userAgent,
            user: b && b.data && b.data.name || '',
            selection: g && g.title || '',
            lastActions: [],
            error: c
        };
        for (a = 0; a < i; a += 1) {
            e = h[a];
            d.lastActions.push(Ext.Date.format(new Date(e.timestamp), 'Y-m-d H:i:s.u') + ' ' + e.message + '\n')
        }
        Ext.Ajax.request({
            url: '/NetLine/oss/sendGuiLog',
            method: 'POST',
            jsonData: d
        });
        if (window.errorReporter && f.jsErrorArgs) {
            window.errorReporter.apply(window, f.jsErrorArgs)
        }
    },
    init: function() {
        var a = this;
        a.callParent(arguments);
        if (a.trackExtErrors) {
            Ext.Error.handle = function(b) {
                if (Ext.Error.ignore) {
                    return !0
                }
                a.trackError(b)
            }
        }
    }
}, 0, 0, 0, 0, 0, 0, [TimesSquare.util, 'Logger'], function() {
    this.init()
});
Ext.cmd.derive('TimesSquare.view.common.MessageWindow', Ext.window.MessageBox, {
    closable: !0,
    draggable: !1,
    closeDelay: undefined,
    closeTimer: undefined,
    focusOnToFront: !1,
    closeAction: 'destroy',
    statics: {
        _cache: [],
        windows: [],
        maxWindows: 5,
        stackOffsets: [0, -10],
        offsets: [-10, -10],
        animated: !0,
        cache: !1,
        maxCache: !1,
        animConfig: {
            duration: 200,
            easing: 'linear'
        },
        show: function(b) {
            var a;
            if (this.cache && this.windows.length >= this.maxWindows) {
                if (this.maxCache !== !1 && this._cache.length >= this.maxCache) {
                    this._cache.shift()
                }
                this._cache.push(b);
                return
            }
            a = (new this()).show(b);
            a.on({
                beforeClose: this.onBeforeClose,
                close: this.onClose,
                scope: this
            });
            this.windows.unshift(a);
            while (this.windows.length > this.maxWindows) {
                this.windows.pop().close()
            }
            this.repositionWindows();
            this.organizeZIndex();
            return a
        },
        onBeforeClose: function(a) {
            Ext.Array.remove(this.windows, a);
            this.repositionWindows()
        },
        onClose: function() {
            var b = this._cache,
                a = b.shift(),
                c = this.windows.length < this.maxWindows;
            if (a && c) {
                this.show(a)
            } else {
                this.organizeZIndex()
            }
        },
        repositionWindows: function(a) {
            var c = Ext.getBody(),
                h = this.windows,
                i = h.length,
                f = this.animConfig,
                g = this.offsets,
                e = this.stackOffsets,
                d, b;
            a = a || !this.animated;
            Ext.Array.each(h, function(h, j) {
                d = c.getWidth() - h.getWidth() + g[0] + e[0] * (i - j - 1);
                b = c.getHeight() - h.getHeight() + g[1] + e[1] * (i - j - 1);
                if (!h.initiallyPositioned) {
                    h.constrain = !1;
                    h.setPosition(c.getWidth() + 200, b);
                    h.constrain = !0;
                    h.setPosition(d, b, a ? !1 : f);
                    h.initiallyPositioned = !0
                } else {
                    h.setPosition(d, b, a ? !1 : f)
                }
            })
        },
        organizeZIndex: function() {
            var b = this.windows,
                a;
            for (a = 0; a < b.length; a++) {
                b[a].toFront(!0)
            }
        }
    },
    onShow: function() {
        var a = this,
            b = a.closeDelay;
        Ext.window.MessageBox.prototype.onShow.apply(this, arguments);
        if (b) {
            a.closeTimer = Ext.defer(a.close, b, a);
            a.el.on('mouseenter', function() {
                Ext.undefer(a.closeTimer)
            });
            a.el.on('mouseleave', function() {
                Ext.defer(a.close, b, a)
            })
        }
    },
    setIcon: function(d, c, b) {
        var a = this.iconComponent;
        if (a) {
            (arguments.callee.$previous || Ext.window.MessageBox.prototype.setIcon).apply(this, arguments)
        } else {
            this.icon = [d, c, b]
        }
    },
    afterRender: function() {
        Ext.window.MessageBox.prototype.afterRender.apply(this, arguments);
        if (this.icon) {
            this.setIcon.apply(this, this.icon)
        }
    },
    reconfigure: function(a) {
        if (!Ext.isDefined(a.modal)) {
            a.modal = !1
        }
        if (a.closeDelay) {
            this.closeDelay = a.closeDelay
        }
        Ext.window.MessageBox.prototype.reconfigure.apply(this, arguments)
    },
    btnCallback: function() {
        this.close()
    },
    close: function() {
        if (this.fireEvent('beforeclose', this) === !1) {
            return
        }
        if (!this.self.animated) {
            return this.doClose()
        }
        var a = this,
            c = Ext.getBody(),
            d = c.getWidth() + 200,
            e = a.getY(),
            b = this.self.animConfig;
        a.constrain = !1;
        a.setPosition(d, e, Ext.apply({
            callback: function() {
                a.doClose()
            }
        }, b))
    }
}, 0, 0, ['component', 'box', 'container', 'panel', 'window', 'messagebox'], {
    'component': !0,
    'box': !0,
    'container': !0,
    'panel': !0,
    'window': !0,
    'messagebox': !0
}, 0, 0, [TimesSquare.view.common, 'MessageWindow'], function(a) {
    Ext.onReady(function() {
        Ext.getBody().on('resize', function() {
            a.repositionWindows(!0)
        })
    })
});
Ext.cmd.derive('TimesSquare.view.common.NumberFormatedTextField', Ext.form.field.Text, {
    setValue: function(a) {
        if (Ext.isEmpty(a) || !Ext.isNumber(a)) {
            return Ext.form.field.Text.prototype.setValue.apply(this, arguments)
        }
        a = Ext.util.Format.number(a, '0.00');
        return Ext.form.field.Text.prototype.setValue.call(this, a)
    }
}, 0, ['numberformatedtextfield'], ['component', 'box', 'field', 'textfield', 'numberformatedtextfield'], {
    'component': !0,
    'box': !0,
    'field': !0,
    'textfield': !0,
    'numberformatedtextfield': !0
}, ['widget.numberformatedtextfield'], 0, [TimesSquare.view.common, 'NumberFormatedTextField'], 0);
Ext.cmd.derive('TimesSquare.view.common.OptionalTextArea', Ext.form.field.TextArea, {
    config: {
        optionalValues: [null, undefined]
    },
    setValue: function(d) {
        var a = this.up(),
            c = a && a.down('[forId="id-legdetail-remarks-internal"]'),
            b = Ext.Array.contains(this.optionalValues, d);
        Ext.form.field.TextArea.prototype.setValue.apply(this, arguments);
        if (a && c) {
            this[b ? 'hide' : 'show']();
            c[b ? 'hide' : 'show']()
        }
    }
}, 0, ['textarea-optional'], ['component', 'box', 'field', 'textfield', 'textareafield', 'textarea', 'textarea-optional'], {
    'component': !0,
    'box': !0,
    'field': !0,
    'textfield': !0,
    'textareafield': !0,
    'textarea': !0,
    'textarea-optional': !0
}, ['widget.textarea-optional'], 0, [TimesSquare.view.common, 'OptionalTextArea'], 0);
Ext.cmd.derive('TimesSquare.view.details.aircraft.PerformanceTab', Ext.form.Panel, {
    padding: 10,
    layout: 'anchor',
    initComponent: function() {
        var a = this;
        a.createItems();
        Ext.form.Panel.prototype.initComponent.apply(this, arguments)
    },
    createItems: function() {
        var a = this;
        a.defaults = {
            xtype: 'textfield',
            width: 220,
            labelSeparator: '',
            readOnly: !0
        };
        a.items = [{
            fieldLabel: 'Total Flight Hours',
            name: 'totalFlightHours'
        }, {
            fieldLabel: 'Total Cycles',
            name: 'totalCycles'
        }, {
            fieldLabel: 'Last Arrived Leg',
            name: 'lastArrivedLeg',
            width: 340
        }, {
            xtype: 'fieldset',
            margin: '20 0 5 0',
            title: 'Controlled Checks',
            anchor: '100%',
            cls: 'dwFieldset',
            items: []
        }, {
            xtype: 'grid',
            anchor: '100%',
            store: Ext.create('TimesSquare.store.details.ControlledChecks'),
            columns: a.getControlledChecksGridColumns()
        }]
    },
    getControlledChecksGridColumns: function() {
        return [{
            text: 'Code',
            menuDisabled: !0,
            dataIndex: 'code',
            width: 80
        }, {
            text: 'Last',
            menuDisabled: !0,
            columns: [{
                text: 'Chk Code',
                menuDisabled: !0,
                dataIndex: 'checkCode',
                width: 100,
                renderer: function(a) {
                    return a && a.name
                }
            }, {
                text: 'FH',
                menuDisabled: !0,
                dataIndex: 'flightHours',
                align: 'right',
                width: 100,
                renderer: function(a) {
                    return Ext.util.Format.durationRenderer(a)
                }
            }, {
                text: 'Cycles',
                menuDisabled: !0,
                dataIndex: 'cycles',
                align: 'right',
                width: 100
            }, {
                text: 'Begin',
                menuDisabled: !0,
                dataIndex: 'begin',
                width: 100,
                renderer: function(a) {
                    if (a) {
                        return Ext.Date.format(Ext.Date.parse(a, 'c'), 'dMy H:i')
                    }
                }
            }, {
                text: 'End',
                menuDisabled: !0,
                dataIndex: 'end',
                width: 100,
                renderer: function(a) {
                    if (a) {
                        return Ext.Date.format(Ext.Date.parse(a, 'c'), 'dMy H:i')
                    }
                }
            }, {
                text: 'Airport',
                menuDisabled: !0,
                dataIndex: 'airport',
                width: 100
            }]
        }]
    },
    loadDataToForm: function(a) {
        var b = this;
        a.totalFlightHours = a.totalFlightHours && Ext.isObject(a.totalFlightHours) ? Ext.util.Format.durationRenderer(a.totalFlightHours) : a.totalFlightHours;
        b.getForm().setValues(a);
        b.down('grid').store.loadControlledChecksData(a.controlledChecks)
    },
    reset: function() {
        var a = this;
        a.getForm().reset();
        a.down('grid').store.removeAll()
    }
}, 0, ['details_aircraft_performancetab'], ['component', 'box', 'container', 'panel', 'form', 'details_aircraft_performancetab'], {
    'component': !0,
    'box': !0,
    'container': !0,
    'panel': !0,
    'form': !0,
    'details_aircraft_performancetab': !0
}, ['widget.details_aircraft_performancetab'], 0, [TimesSquare.view.details.aircraft, 'PerformanceTab'], 0);
Ext.cmd.derive('TimesSquare.view.details.leg.FlightLogsTab', Ext.form.Panel, {
    layout: {
        type: 'vbox'
    },
    cls: 'flight-log-tab',
    initComponent: function() {
        var a = this;
        a.mxCreateItems();
        Ext.form.Panel.prototype.initComponent.apply(this, arguments)
    },
    createItems: function(e, c, d, a) {
        var b = this;
        b.items = [{
            xtype: 'fieldset',
            flex: 1,
            cls: 'dwFieldset',
            title: 'General',
            margin: '10px 2px',
            width: '100%',
            layout: 'hbox',
            defaults: {
                margin: a,
                readOnly: !0
            },
            items: [{
                xtype: 'textfield',
                name: 'flRefNo',
                fieldLabel: 'Ref No',
                labelWidth: 50,
                width: 100
            }, {
                xtype: 'checkbox',
                name: 'checkedByLog',
                margin: '0 0 0 50',
                boxLabel: 'checked By Log',
                boxLabelAlign: 'after'
            }]
        }, {
            xtype: 'container',
            width: '100%',
            border: !1,
            layout: 'hbox',
            items: [b.createDelayTable(!0, a), b.createDelayTable(!1, a)]
        }, {
            xtype: 'fieldset',
            cls: 'dwFieldset',
            title: 'Miscellaneous',
            margin: '10px 2px',
            width: '100%',
            layout: 'hbox',
            defaults: {
                readOnly: !0,
                margin: '10px 2px'
            },
            items: Ext.Array.merge({
                xtype: 'box',
                flex: 1
            }, b.createMiscellaneousTable(a))
        }]
    },
    createMiscellaneousTable: function(a) {
        return {
            xtype: 'container',
            flex: 1,
            cls: 'miscellaneous-table',
            border: !1,
            layout: {
                type: 'table',
                columns: 6,
                tableAttrs: {
                    style: {
                        width: '100%'
                    }
                }
            },
            defaults: {
                xtype: 'box',
                margin: a,
                readOnly: !0,
                cellCls: 'normal-cell'
            },
            items: [{
                html: '',
                cellCls: 'left-label'
            }, {
                html: 'Flight Times',
                colspan: 2
            }, {
                html: 'Instr. Flight time',
                colspan: 3
            }, {
                html: '',
                cellCls: 'left-label'
            }, {
                html: '(min)'
            }, {
                html: '(dec)'
            }, {
                colspan: 3
            }, {
                html: 'Block',
                cellCls: 'left-label'
            }, {
                xtype: 'textfield',
                name: 'blockFlightTimeMin'
            }, {
                xtype: 'textfield',
                name: 'blockFlightTimeDec'
            }, {
                xtype: 'textfield',
                name: 'instrFlightTime'
            }, {
                colspan: 2
            }, {
                html: 'Air',
                cellCls: 'left-label'
            }, {
                xtype: 'textfield',
                name: 'airFlightTimeMin'
            }, {
                xtype: 'textfield',
                name: 'airFlightTimeDec'
            }, {
                colspan: 3
            }, {
                html: '',
                cellCls: 'left-label'
            }, {
                html: 'Cycles'
            }, {
                html: 'Touch And Go',
                colspan: 4
            }, {
                html: '',
                cellCls: 'left-label'
            }, {
                xtype: 'textfield',
                name: 'cycles'
            }, {
                xtype: 'textfield',
                name: 'touchAndGo'
            }, {
                colspan: 2
            }]
        }
    },
    createDelayTable: function(a, d) {
        var b = this,
            c = a ? {
                xtype: 'box',
                height: 24,
                colspan: 5
            } : [{
                xtype: 'box',
                html: 'To',
                cellCls: 'x-form-item-label-right'
            }, {
                xtype: 'textfield',
                name: 'arrivalAirport',
                width: 60,
                colspan: 4
            }];
        return {
            xtype: 'fieldset',
            flex: 1,
            margin: '10px 5px',
            padding: '0 0 0 10',
            title: a ? 'Departure' : 'Arrival',
            cls: (a ? 'departure-ad' : 'arrival-aa') + ' dwFieldset',
            layout: {
                type: 'table',
                columns: 5,
                tableAttrs: {
                    style: {
                        width: '100%'
                    }
                }
            },
            defaults: {
                margin: d,
                readOnly: !0
            },
            items: Ext.Array.merge(c, {
                xtype: 'box',
                cellCls: 'left-label'
            }, {
                xtype: 'box',
                html: a ? 'Off Block' : 'Touch Down',
                colspan: 2
            }, {
                xtype: 'box',
                html: a ? 'Take Off' : 'On Block',
                colspan: 2
            }, {
                xtype: 'box',
                cellCls: 'left-label',
                html: a ? 'AD' : 'AA'
            }, {
                xtype: 'datefield',
                cellCls: a ? 'offblock-date' : 'touchdown-date',
                name: a ? 'offblockDate' : 'touchdownDate',
                format: 'dMy',
                width: 70
            }, {
                xtype: 'timefield',
                cellCls: a ? 'offblock-time' : 'touchdown-time',
                name: a ? 'offblockTime' : 'touchdownTime',
                format: 'H:i',
                width: 45
            }, {
                xtype: 'datefield',
                cellCls: a ? 'takeoff-date' : 'onblock-date',
                name: a ? 'takeoffDate' : 'onblockDate',
                format: 'dMy',
                width: 70
            }, {
                xtype: 'timefield',
                cellCls: a ? 'takeoff-time' : 'onblock-time',
                name: a ? 'takeoffTime' : 'onblockTime',
                format: 'H:i',
                width: 45
            }, {
                xtype: 'fieldset',
                colspan: 5,
                title: a ? 'Departure Delays' : 'Arrival Delays',
                layout: 'vbox',
                name: a ? 'departureDelayCodeTale' : 'arrivalDelayCodeTable',
                margin: 0,
                cls: 'dwFieldset',
                items: Ext.Array.merge(b.createDelayCodeTableGrid(a), b.createDelayCodeTableSumRow(a))
            })
        }
    },
    createDelayCodeTableGrid: function(b) {
        var a = TimesSquare.app.getController('gantt.Gantt'),
            d = 'com.lhsystems.ops.profile.server.dataimpl.parameterconfiguration.EFF_DATE_RANGE_DELAY_CODE',
            c = a && a.parameterList && a.parameterList[d] === 'true' || !1;
        return {
            xtype: 'details_leg_delaysgrid',
            colspan: 4,
            width: '100%',
            name: b ? 'mergedDepartureDelays' : 'mergedArrivalDelays',
            fields: Ext.Array.merge(b ? ['delayCode', 'subDelayCode', 'delayTime', 'delayImputation', 'delayReason', 'irregularities.delayCode', 'irregularities.delayReason'] : ['delayCode', 'delayTime', 'delayImputation', 'delayReason', 'irregularities.delayCode', 'irregularities.delayReason'], c ? ['delayResponsibilityCode', 'delayResponsibilityDescription'] : []),
            height: 130
        }
    },
    createDelayCodeTableSumRow: function(a) {
        return {
            xtype: 'textfield',
            name: a ? 'departureTotal' : 'arrivalTotal',
            readOnly: !0,
            margin: '5 0 0 0',
            width: a ? 145 : 95,
            labelWidth: a ? 98 : 48,
            labelAlign: 'right',
            labelSeparator: '',
            fieldLabel: 'Total'
        }
    },
    loadRecord: function(d) {
        var a = this,
            c = a.getForm(),
            b = d.getCalculatedFieldValues();
        a.down('[name=arrivalDelayCodeTable]')[b.hasArrivalDelays ? 'show' : 'hide']();
        c.reset(!0);
        c.setValues(b);
        Ext.form.Panel.prototype.loadRecord.apply(this, arguments);
        a.items.each(function(a) {
            a.show()
        })
    }
}, 0, ['details_leg_flightlogtab'], ['component', 'box', 'container', 'panel', 'form', 'details_leg_flightlogtab'], {
    'component': !0,
    'box': !0,
    'container': !0,
    'panel': !0,
    'form': !0,
    'details_leg_flightlogtab': !0
}, ['widget.details_leg_flightlogtab'], [
    ['fieldSizeMixin', TimesSquare.mixin.FieldSizeMixin]
], [TimesSquare.view.details.leg, 'FlightLogsTab'], 0);
Ext.cmd.derive('TimesSquare.view.details.leg.LoadFieldSet', Ext.form.FieldSet, {
    flex: 2,
    cls: 'dwFieldset',
    title: 'CBM',
    margin: '10 5',
    layout: 'hbox',
    defaults: {
        margin: '0 6 6 0',
        readOnly: !0
    },
    initComponent: function() {
        var a = this;
        a.items = a.createItems();
        Ext.form.FieldSet.prototype.initComponent.apply(this, arguments)
    },
    createItems: function() {
        return [{
            xtype: 'container',
            layout: 'anchor',
            width: 65,
            defaultType: 'box',
            defaults: {
                anchor: '100%',
                height: 22
            },
            items: [{
                html: 'Booked',
                margin: '66 6 0 0'
            }, {
                html: 'Baggages',
                style: 'text-align:right',
                margin: '6 6 0 0'
            }, {
                html: 'Cargo',
                style: 'text-align:right',
                margin: '6 6 0 0'
            }, {
                html: 'Mail',
                style: 'text-align:right',
                margin: '6 6 0 0'
            }, {
                html: 'Flown',
                margin: '38 6 0 0'
            }, {
                html: 'Baggages',
                style: 'text-align:right',
                margin: '6 6 0 0'
            }, {
                html: 'Cargo',
                style: 'text-align:right',
                margin: '6 6 0 0'
            }, {
                html: 'Mail',
                style: 'text-align:right',
                margin: '6 6 0 0'
            }, {
                html: 'TW',
                style: 'text-align:right',
                margin: '6 6 0 0'
            }]
        }, {
            xtype: 'container',
            layout: 'anchor',
            width: 60,
            margin: '0 6 0 0',
            defaultType: 'numberformatedtextfield',
            defaults: {
                anchor: '100%',
                fieldStyle: 'text-align:right',
                margin: '0 0 6 0',
                readOnly: !0
            },
            items: [{
                name: 'deadloadBooked_baggageMass',
                margin: '89 0 6 0'
            }, {
                name: 'deadloadBooked_cargoMass'
            }, {
                name: 'deadloadBooked_mailMass'
            }, {
                name: 'deadloadFlown_baggageMass',
                margin: '65 0 6 0'
            }, {
                name: 'deadloadFlown_cargoMass'
            }, {
                name: 'deadloadFlown_mailMass'
            }, {
                xtype: 'textfield',
                name: 'deadloadFlown_grossWeight'
            }]
        }, {
            xtype: 'container',
            layout: 'anchor',
            width: 32,
            margin: '0 2 0 0',
            defaultType: 'box',
            defaults: {
                anchor: '100%',
                height: 22,
                margin: '0 0 6 0'
            },
            items: [{
                name: 'massUnit',
                margin: '94 0 6 0'
            }, {
                name: 'massUnit'
            }, {
                name: 'massUnit'
            }, {
                name: 'massUnit',
                margin: '66 0 6 0'
            }, {
                name: 'massUnit'
            }, {
                name: 'massUnit'
            }, {
                name: 'massUnit'
            }]
        }, {
            xtype: 'container',
            layout: 'anchor',
            width: 32,
            margin: '0 6 0 0',
            defaultType: 'textfield',
            defaults: {
                anchor: '100%',
                fieldStyle: 'text-align:right',
                margin: '0 0 6 0',
                readOnly: !0
            },
            items: [{
                name: 'deadloadBooked_baggagePieces',
                margin: '89 0 6 0'
            }, {
                name: 'deadloadBooked_cargoVolume'
            }, {
                name: 'deadloadFlown_baggagePieces',
                margin: '93 0 6 0'
            }, {
                name: 'deadloadFlown_cargoVolume'
            }]
        }, {
            xtype: 'container',
            layout: 'anchor',
            width: 32,
            defaultType: 'box',
            defaults: {
                anchor: '100%',
                margin: '0 0 6 0',
                height: 22
            },
            items: [{
                margin: '94 0 4 0',
                html: '(p)'
            }, {
                html: '(m<sup>3</sup>)'
            }, {
                margin: '94 0 4 0',
                html: '(p)'
            }, {
                html: '(m<sup>3</sup>)'
            }]
        }]
    }
}, 0, ['details_leg_loadfieldset'], ['component', 'box', 'container', 'fieldset', 'details_leg_loadfieldset'], {
    'component': !0,
    'box': !0,
    'container': !0,
    'fieldset': !0,
    'details_leg_loadfieldset': !0
}, ['widget.details_leg_loadfieldset'], 0, [TimesSquare.view.details.leg, 'LoadFieldSet'], 0);
Ext.cmd.derive('TimesSquare.view.details.leg.PaxFieldSet', Ext.form.FieldSet, {
    flex: 3,
    minWidth: 485,
    cls: 'dwFieldset',
    title: 'Passenger',
    margin: '10 5',
    layout: 'anchor',
    defaults: {
        readOnly: !0
    },
    initComponent: function() {
        var a = this;
        a.items = [{
            xtype: 'container',
            layout: 'hbox',
            anchor: '100%',
            items: a.createItemsBlock1()
        }, {
            xtype: 'container',
            layout: 'hbox',
            anchor: '100%',
            margin: '10 0 0 0',
            items: a.createItemsBlock2()
        }];
        Ext.form.FieldSet.prototype.initComponent.apply(this, arguments)
    },
    createItemsBlock1: function() {
        var b = this,
            c = TimesSquare.CONFIG.paxDetailShowCheckedIn,
            a = [];
        a.push({
            xtype: 'container',
            layout: 'anchor',
            width: 85,
            defaultType: 'box',
            defaults: {
                anchor: '100%',
                height: 22
            },
            items: [{
                html: 'Forecast',
                margin: '7 6 0 0'
            }, {
                html: 'PAX',
                style: 'text-align:right',
                margin: '6 6 0 0'
            }, {
                html: 'Booked',
                margin: '9 6 0 0'
            }, {
                html: 'PAX',
                style: 'text-align:right',
                margin: '6 6 0 0'
            }, {
                html: 'PAX in Transit',
                style: 'text-align:right',
                margin: '6 6 0 0'
            }, {
                html: 'PAD',
                style: 'text-align:right',
                margin: '10 6 0 0'
            }, {
                html: 'PAD in Transit',
                style: 'text-align:right',
                margin: '6 6 0 0'
            }, c && {
                html: 'Checked',
                margin: '14 6 0 0'
            }, {
                html: 'PAX',
                style: 'text-align:right',
                margin: '4 6 0 0'
            }, {
                html: 'PAD',
                style: 'text-align:right',
                margin: '8 6 0 0'
            }, {
                html: 'Flown',
                margin: '13 6 0 0'
            }, {
                html: 'PAX',
                style: 'text-align:right',
                margin: '6 6 0 0'
            }, {
                html: 'PAX in Transit',
                style: 'text-align:right',
                margin: '6 6 0 0'
            }, {
                html: 'PAD',
                style: 'text-align:right',
                margin: '9 6 0 0'
            }, {
                html: 'PAD in Transit',
                style: 'text-align:right',
                margin: '8 6 0 0'
            }].filter(function(a) {
                return !!a
            })
        });
        a.push(b.createColumn('1', '&nbsp;'));
        a.push(b.createColumn('2', '&nbsp;'));
        a.push(b.createColumn('3', '&nbsp;'));
        a.push(b.createColumn('4', '&nbsp;'));
        a.push(b.createColumn('5', '&nbsp;'));
        a.push(b.createColumn('6', '&nbsp;'));
        a.push(b.createColumn('total', 'Total'));
        a.push({
            xtype: 'container',
            layout: 'anchor',
            width: 85,
            margin: '5 0 0 0',
            defaults: {
                anchor: '100%',
                readOnly: !0
            },
            items: [{
                xtype: 'box',
                html: 'Date',
                height: 22,
                margin: '2 6 0 4'
            }, {
                xtype: 'datefield',
                name: 'forecastDate',
                margin: '1 0 0 4'
            }]
        });
        return a
    },
    createColumn: function(a, b) {
        var c = TimesSquare.CONFIG.paxDetailShowCheckedIn;
        return {
            xtype: 'container',
            itemId: 'comp_column_' + a,
            layout: 'anchor',
            width: 40,
            margin: '0 2 0 0',
            defaultType: 'textfield',
            defaults: {
                anchor: '100%',
                fieldStyle: 'text-align:right',
                margin: '0 0 6 0',
                readOnly: !0
            },
            items: [{
                xtype: 'displayfield',
                fieldStyle: null,
                margin: '4 0 0 0',
                compartmentLabel: !0,
                value: b
            }, {
                xtype: 'textfield',
                name: 'paxForecast_' + a
            }, {
                xtype: 'displayfield',
                fieldStyle: null,
                margin: '10 0 0 0',
                compartmentLabel: !0,
                value: b
            }, {
                xtype: 'textfield',
                name: 'paxBooked_' + a
            }, {
                xtype: 'textfield',
                name: 'paxTransitBooked_' + a
            }, {
                xtype: 'textfield',
                name: 'padBooked_' + a
            }, {
                xtype: 'textfield',
                name: 'padTransitBooked_' + a
            }, c && {
                xtype: 'displayfield',
                fieldStyle: null,
                margin: '10 0 0 0',
                compartmentLabel: !0,
                value: b
            }, {
                xtype: 'textfield',
                name: 'paxCheckedIn_' + a
            }, {
                xtype: 'textfield',
                name: 'padCheckedIn_' + a
            }, {
                xtype: 'displayfield',
                fieldStyle: null,
                margin: '10 0 0 0',
                compartmentLabel: !0,
                value: b
            }, {
                xtype: 'textfield',
                name: 'paxFlown_' + a
            }, {
                xtype: 'textfield',
                name: 'paxTransitFlown_' + a
            }, {
                xtype: 'textfield',
                name: 'padFlown_' + a
            }, {
                xtype: 'textfield',
                name: 'padTransitFlown_' + a
            }].filter(function(c) {
                return !!c
            })
        }
    },
    createItemsBlock2: function() {
        return [{
            xtype: 'box',
            html: 'Crew',
            width: 79,
            style: 'text-align:right',
            margin: '87 6 0 0'
        }, {
            xtype: 'container',
            layout: 'anchor',
            width: 40,
            margin: '0 2 0 0',
            defaultType: 'textfield',
            defaults: {
                anchor: '100%',
                fieldStyle: 'text-align:right',
                readOnly: !0
            },
            items: [{
                xtype: 'displayfield',
                fieldStyle: null,
                margin: '4 0 0 0',
                value: 'Male'
            }, {
                xtype: 'textfield',
                name: 'male'
            }, {
                xtype: 'displayfield',
                fieldStyle: null,
                margin: '2 0 0 0',
                value: 'DHC'
            }, {
                xtype: 'textfield',
                name: 'deadheadCrew'
            }]
        }, {
            xtype: 'container',
            layout: 'anchor',
            width: 40,
            margin: '0 2 0 42',
            defaultType: 'textfield',
            defaults: {
                anchor: '100%',
                fieldStyle: 'text-align:right',
                readOnly: !0
            },
            items: [{
                xtype: 'displayfield',
                fieldStyle: null,
                margin: '4 0 0 0',
                value: 'Female'
            }, {
                xtype: 'textfield',
                name: 'female'
            }, {
                xtype: 'displayfield',
                fieldStyle: null,
                margin: '2 0 0 0',
                value: 'XCR'
            }, {
                xtype: 'textfield',
                name: 'extraCrew'
            }]
        }, {
            xtype: 'container',
            layout: 'vbox',
            margin: '0 6 0 42',
            defaultType: 'textfield',
            defaults: {
                fieldStyle: 'text-align:right',
                readOnly: !0
            },
            items: [{
                xtype: 'displayfield',
                fieldStyle: null,
                margin: '4 0 0 0',
                value: 'Children'
            }, {
                xtype: 'textfield',
                name: 'children',
                margin: '0 0 0 4',
                width: 40
            }]
        }, {
            xtype: 'container',
            layout: 'anchor',
            width: 40,
            margin: '0 2 0 0',
            defaultType: 'textfield',
            defaults: {
                anchor: '100%',
                fieldStyle: 'text-align:right',
                readOnly: !0
            },
            items: [{
                xtype: 'displayfield',
                fieldStyle: null,
                margin: '4 0 0 0',
                value: 'Infants'
            }, {
                xtype: 'textfield',
                name: 'infants'
            }, {
                xtype: 'displayfield',
                fieldStyle: null,
                margin: '2 0 0 0',
                value: 'Total'
            }, {
                xtype: 'textfield',
                name: 'crew_total'
            }]
        }]
    }
}, 0, ['details_leg_paxfieldset'], ['component', 'box', 'container', 'fieldset', 'details_leg_paxfieldset'], {
    'component': !0,
    'box': !0,
    'container': !0,
    'fieldset': !0,
    'details_leg_paxfieldset': !0
}, ['widget.details_leg_paxfieldset'], 0, [TimesSquare.view.details.leg, 'PaxFieldSet'], 0);
Ext.cmd.derive('TimesSquare.view.details.leg.PaxLoadTab', Ext.form.Panel, {
    layout: {
        type: 'hbox'
    },
    items: [{
        xtype: 'details_leg_paxfieldset'
    }, {
        xtype: 'details_leg_loadfieldset'
    }],
    loadDataToForm: function(h) {
        var d = this,
            b = d.convertToFlat(h),
            e = d.query('[name=massUnit]'),
            f = b && b.compartments && b.compartments.length || 0,
            i = e.length,
            c, g, a;
        d.getForm().setValues(b);
        for (a = 0; a < i; a++) {
            if (e[a] && e[a].getEl) {
                g = e[a].getEl();
                if (g && g.setHtml) {
                    g.setHtml(b.massUnit)
                }
            }
        }
        for (a = 1; a <= 6; a++) {
            c = d.down('#comp_column_' + a);
            if (a <= f && c.isHidden() || a > f && !c.isHidden()) {
                c[a <= f ? 'show' : 'hide']()
            }
            if (a <= f) {
                d.updateCompartmentLabels(c, b.compartments[a - 1])
            }
        }
    },
    updateCompartmentLabels: function(e, d) {
        var c = e.query('[compartmentLabel]'),
            f = c.length,
            b = 0,
            a;
        for (; b < f; b++) {
            a = c[b] && c[b].inputEl;
            if (a && a.setHtml) {
                a.setHtml(d)
            }
        }
    },
    convertToFlat: function(e) {
        var d = this,
            a = {},
            g, c, b, f;
        if (!e) {
            a.compartments = ' ';
            a.massUnit = ' ';
            return a
        }
        for (b in e) {
            if (e.hasOwnProperty(b)) {
                c = e[b];
                if (b !== 'legId' && Ext.isObject(c)) {
                    for (f in c) {
                        if (c.hasOwnProperty(f)) {
                            a[f] = c[f]
                        }
                    }
                } else {
                    a[b] = c
                }
            }
        }
        d.convertToFlatHelper1(a, 'deadloadBooked');
        d.convertToFlatHelper1(a, 'deadloadFlown');
        g = d.calculateCompartmentIndexes(a.compartments);
        for (b in a) {
            if (Ext.isArray(a[b])) {
                d.convertToFlatHelper2(a, b, g)
            }
        }
        a.forecastDate = a.forecastDate ? Ext.Date.parse(a.forecastDate, 'Y-m-d\\TH:i:s') : null;
        if (Ext.isEmpty(a.deadheadCrew) && Ext.isEmpty(a.extraCrew)) {
            a.crew_total = ''
        } else {
            a.crew_total = (a.deadheadCrew || 0) + (a.extraCrew || 0)
        }
        Ext.applyIf(a, d.EMPTY_DATA);
        return a
    },
    convertToFlatHelper1: function(b, a) {
        Ext.Object.each(b[a], function(d, c) {
            b[a + '_' + d] = c
        })
    },
    convertToFlatHelper2: function(b, a, d) {
        var c = 0;
        Ext.Array.each(b[a], function(e) {
            var f = d[e.comp];
            if (f) {
                b[a + '_' + f] = e.value;
                c += e.value
            }
        });
        b[a + '_total'] = c
    },
    EMPTY_DATA: {
        paxForecast_1: 0,
        paxBooked_1: 0,
        paxTransitBooked_1: 0,
        padBooked_1: 0,
        padTransitBooked_1: 0,
        paxCheckedIn_1: 0,
        padCheckedIn_1: 0,
        paxFlown_1: 0,
        paxTransitFlown_1: 0,
        padFlown_1: 0,
        padTransitFlown_1: 0,
        paxForecast_2: 0,
        paxBooked_2: 0,
        paxTransitBooked_2: 0,
        padBooked_2: 0,
        padTransitBooked_2: 0,
        paxCheckedIn_2: 0,
        padCheckedIn_2: 0,
        paxFlown_2: 0,
        paxTransitFlown_2: 0,
        padFlown_2: 0,
        padTransitFlown_2: 0,
        paxForecast_3: 0,
        paxBooked_3: 0,
        paxTransitBooked_3: 0,
        padBooked_3: 0,
        padTransitBooked_3: 0,
        paxCheckedIn_3: 0,
        padCheckedIn_3: 0,
        paxFlown_3: 0,
        paxTransitFlown_3: 0,
        padFlown_3: 0,
        padTransitFlown_3: 0,
        paxForecast_4: 0,
        paxBooked_4: 0,
        paxTransitBooked_4: 0,
        padBooked_4: 0,
        padTransitBooked_4: 0,
        paxCheckedIn_4: 0,
        padCheckedIn_4: 0,
        paxFlown_4: 0,
        paxTransitFlown_4: 0,
        padFlown_4: 0,
        padTransitFlown_4: 0,
        paxForecast_5: 0,
        paxBooked_5: 0,
        paxTransitBooked_5: 0,
        padBooked_5: 0,
        padTransitBooked_5: 0,
        paxCheckedIn_5: 0,
        padCheckedIn_5: 0,
        paxFlown_5: 0,
        paxTransitFlown_5: 0,
        padFlown_5: 0,
        padTransitFlown_5: 0,
        paxForecast_6: 0,
        paxBooked_6: 0,
        paxTransitBooked_6: 0,
        padBooked_6: 0,
        padTransitBooked_6: 0,
        paxCheckedIn_6: 0,
        padCheckedIn_6: 0,
        paxFlown_6: 0,
        paxTransitFlown_6: 0,
        padFlown_6: 0,
        padTransitFlown_6: 0
    },
    calculateCompartmentIndexes: function(a) {
        var c = {},
            d, b;
        if (!a) {
            return c
        }
        a = a.split('');
        d = a.length;
        for (b = 0; b < d; b++) {
            c[a[b]] = b + 1
        }
        return c
    }
}, 0, ['details_leg_paxloadtab'], ['component', 'box', 'container', 'panel', 'form', 'details_leg_paxloadtab'], {
    'component': !0,
    'box': !0,
    'container': !0,
    'panel': !0,
    'form': !0,
    'details_leg_paxloadtab': !0
}, ['widget.details_leg_paxloadtab'], 0, [TimesSquare.view.details.leg, 'PaxLoadTab'], 0);
Ext.cmd.derive('TimesSquare.view.details.leg.UserMarkerFieldSet', Ext.form.CheckboxGroup, {
    fieldLabel: '',
    vertical: !0,
    bodyPadding: 10,
    config: {
        amount: 0,
        labelMarkerTpl: '<span class="details-marker-icon"></span>'
    },
    setAmount: function(b) {
        var a = this,
            f = a.amount || a.items && a.items.length || 0,
            d = a.items,
            e = d && d.getCount() || 0,
            c;
        a.amount = b;
        if (b < e) {
            Ext.Array.each(d.data, function(d, c) {
                if (c >= b) {
                    a.remove(d)
                }
            })
        } else {
            for (c = f; c < b; c++) {
                a.add({
                    name: (c + 1).toString(),
                    cls: 'details-marker-checkbox',
                    boxLabel: '',
                    readOnly: !0
                })
            }
        }
    },
    setValue: function(e) {
        var a = this,
            c = {},
            d = TimesSquare.getApplication().getController('gantt.Gantt').parameterList,
            b = a.extractMarkerData(d);
        a.setAmount(b.length);
        Ext.Array.each(b, function(b) {
            var d = a.items.findBy(function(a) {
                    return a.name === b.index.toString()
                }),
                f = Ext.Array.findBy(e, function(a) {
                    return a.get('number') === b.index
                });
            d.setBoxLabel(a.labelMarkerTpl + '<span style="vertical-align:top; line-height: 16px">' + b.name + '</span>');
            a.setCheckboxMarkerColor(d, b.color);
            c[d.name] = !!f
        });
        Ext.form.CheckboxGroup.prototype.setValue.call(this, c)
    },
    extractMarkerData: function(b) {
        var c = Ext.create('TimesSquare.model.gantt.UserMarker', 0),
            e = Ext.Array.filter(Ext.Object.getKeys(b), function(a) {
                return a.match('MARKER_NAME_')
            }).length,
            a, d = [];
        for (a = 1; a <= e; a++) {
            c.set('number', a);
            d.push(Ext.apply(c.getInfoFromParameters(b), {
                index: a
            }))
        }
        return d
    },
    setCheckboxMarkerColor: function(a, d) {
        if (!a.rendered) {
            a.on('afterrender', Ext.bind(this.setCheckboxMarkerColor, this, arguments), this, {
                single: !0
            });
            return
        }
        var b = a.boxLabelEl,
            c = b && b.down('span.details-marker-icon');
        if (c) {
            c.setStyle('background-color', d)
        }
    }
}, 0, ['leg-details-user-markers'], ['component', 'box', 'container', 'fieldcontainer', 'checkboxgroup', 'leg-details-user-markers'], {
    'component': !0,
    'box': !0,
    'container': !0,
    'fieldcontainer': !0,
    'checkboxgroup': !0,
    'leg-details-user-markers': !0
}, ['widget.leg-details-user-markers'], 0, [TimesSquare.view.details.leg, 'UserMarkerFieldSet'], 0);
Ext.cmd.derive('TimesSquare.view.details.leg.RemarksTab', Ext.container.Container, {
    layout: {
        type: 'fit'
    },
    initComponent: function() {
        var a = this;
        a.mxCreateItems();
        Ext.container.Container.prototype.initComponent.apply(this, arguments)
    },
    createItems: function(e, c, d, a) {
        var b = this;
        b.items = {
            xtype: 'fieldset',
            cls: 'dwFieldset',
            title: 'Remarks',
            margin: '10px 5px',
            layout: {
                type: 'table',
                columns: 6,
                tableAttrs: {
                    width: '99%'
                }
            },
            defaults: {
                margin: a,
                readOnly: !0
            },
            items: [{
                xtype: 'label',
                text: 'Internal',
                forId: 'id-legdetail-remarks-internal',
                cellCls: 'details-ceiling-label-cell'
            }, {
                xtype: 'textarea-optional',
                colspan: 5,
                width: '100%',
                fieldLabel: '',
                name: 'internalRemark',
                cls: 'test-id-legdetail-remarks-internal',
                id: 'id-legdetail-remarks-internal'
            }, {
                xtype: 'label',
                text: 'Ops',
                cellCls: 'details-ceiling-label-cell'
            }, {
                xtype: 'textarea',
                colspan: 5,
                width: '100%',
                fieldLabel: '',
                name: 'opsRemark',
                cls: 'test-id-checkdetail-remarks-remarks'
            }, {
                xtype: 'label',
                text: 'Marker',
                cellCls: 'details-ceiling-label-cell'
            }, {
                xtype: 'leg-details-user-markers',
                name: 'userMarkers',
                cls: 'test-id-checkdetail-remarks-markers',
                columns: 1
            }]
        }
    }
}, 0, ['details_leg_remarkstab'], ['component', 'box', 'container', 'details_leg_remarkstab'], {
    'component': !0,
    'box': !0,
    'container': !0,
    'details_leg_remarkstab': !0
}, ['widget.details_leg_remarkstab'], [
    ['fieldSizeMixin', TimesSquare.mixin.FieldSizeMixin]
], [TimesSquare.view.details.leg, 'RemarksTab'], 0);
Ext.cmd.derive('TimesSquare.view.gantt.AirportFilter', Ext.form.field.Text, {
    upperCase: !0,
    hideTrigger: !0,
    emptyText: 'Filter by Airport',
    config: {
        fields: []
    },
    listeners: {
        specialkey: 'onSpecialKeyHandler',
        change: 'onChangeHandler'
    },
    triggers: {
        clear: {
            cls: 'x-form-clear-trigger',
            handler: 'clearFilters'
        },
        search: {
            cls: 'x-form-search-trigger',
            handler: 'fireFilterEvent'
        }
    },
    initComponent: function() {
        Ext.form.field.Text.prototype.initComponent.call(this);
        this.cachedFilters = {
            resources: undefined,
            events: undefined
        };
        this.isFilterApplied = !1
    },
    applyTriggers: function(a) {
        delete a.picker;
        return Ext.form.field.Text.prototype.applyTriggers.call(this, a)
    },
    clearFilters: function() {
        this.setValue(null);
        this.fireFilterEvent()
    },
    fireFilterEvent: function() {
        var c = this.isValid(),
            a = this.getValue(),
            b;
        a = Ext.isArray(a) ? undefined : a;
        if (c) {
            b = {
                resources: this.getResourceFilter(a),
                events: this.getEventFilter(a)
            };
            this.isFilterApplied = a;
            this.fireEvent('filter', b, this.cachedFilters);
            this.cacheFilters(b)
        }
        this.focus(!0);
        this.updateTriggersVisibility()
    },
    updateTriggersVisibility: function() {
        this.setHideTrigger(!this.isDirty() && !this.isFilterApplied)
    },
    getResourceFilter: function(a) {
        if (!a) {
            return
        }
        var b = this.getFields();
        return Ext.create('Ext.util.Filter', {
            filterFn: function(c) {
                return Ext.Array.some(c.getEvents(), function(d) {
                    return Ext.Array.some(b, function(b) {
                        var e = d.get(b) || '';
                        return a.toUpperCase() === e.toUpperCase()
                    })
                })
            }
        })
    },
    getEventFilter: function(a) {
        var b = this.getFields();
        return function(c) {
            var e = c.get('legId'),
                f = e ? c.store.getById(e) : c,
                d;
            if (a) {
                d = Ext.Array.every(b, function(b) {
                    var d = f.get(b) || '';
                    return a.toUpperCase() !== d.toUpperCase()
                })
            } else {
                d = !1
            }
            c.data.filteredOut = d
        }
    },
    cacheFilters: function(a) {
        this.cachedFilters = a
    },
    onSpecialKeyHandler: function(b, a) {
        if (a.getKey() === a.ENTER && b.isValid()) {
            this.fireFilterEvent()
        }
    },
    onChangeHandler: function(a) {
        a.updateTriggersVisibility()
    }
}, 0, ['airportfilter'], ['component', 'box', 'field', 'textfield', 'airportfilter'], {
    'component': !0,
    'box': !0,
    'field': !0,
    'textfield': !0,
    'airportfilter': !0
}, ['widget.airportfilter'], 0, [TimesSquare.view.gantt, 'AirportFilter'], 0);
Ext.cmd.derive('TimesSquare.view.gantt.Sorter', Ext.button.Button, {
    config: {
        provider: undefined,
        store: undefined
    },
    text: 'Aircraft',
    constructor: function(a) {
        Ext.button.Button.prototype.constructor.apply(this, arguments);
        this.mixins.observable.constructor.call(this, a)
    },
    initComponent: function() {
        Ext.button.Button.prototype.initComponent.apply(this, arguments);
        if (this.provider) {
            this.setProviderStore();
            this.observeProvider()
        }
    },
    setProvider: function(a) {
        var b = this.provider;
        if (b) {
            this.unobserveProvider()
        }
        this.provider = a;
        if (a) {
            this.observeProvider();
            this.setProviderStore();
            this.refreshMenu()
        }
    },
    setProviderStore: function() {
        var b = this.provider,
            a = this.getStore();
        if (Ext.isString(a)) {
            this.store = a = Ext.getStore(a)
        }
        if (b) {
            b.setStore(a)
        }
    },
    observeProvider: function() {
        var a = this.provider;
        if (a) {
            this.mon(a, {
                menuchanged: 'onProviderMenuChanged',
                scope: this
            })
        }
    },
    unobserveProvider: function() {
        var a = this.provider;
        if (a) {
            this.mun(a, {
                menuchanged: 'onProviderMenuChanged',
                scope: this
            })
        }
    },
    onProviderMenuChanged: function() {
        this.refreshMenu()
    },
    refreshMenu: function() {
        var b = this.provider,
            a = b.getMenuItems().entries;
        Ext.each(a, function(a) {
            if (a.selected) {
                delete a.selected;
                a.checked = !0;
                return !1
            }
        });
        if (b && a && a.length) {
            this.enable();
            this.setMenu({
                plain: !0,
                defaults: {
                    xtype: 'radiofield',
                    name: 'sort'
                },
                items: a
            })
        } else {
            this.setMenu(undefined);
            this.disable()
        }
    },
    getMenuFromProvider: function() {
        var a = this.provider;
        return a ? a.getMenuItems() : undefined
    },
    setMenu: function() {
        Ext.button.Button.prototype.setMenu.apply(this, arguments);
        Ext.defer(function() {
            this.updateLayout()
        }, 200, this)
    }
}, 1, ['gantt.sorter'], ['component', 'box', 'button', 'gantt.sorter'], {
    'component': !0,
    'box': !0,
    'button': !0,
    'gantt.sorter': !0
}, ['widget.gantt.sorter'], [
    ['observable', Ext.util.Observable]
], [TimesSquare.view.gantt, 'Sorter'], 0);
Ext.cmd.derive('TimesSquare.view.gantt.TimeModeButton', Ext.button.Button, {
    config: {
        timemode: 'utc',
        airport: undefined,
        codeLength: 3,
        labelTpl: 'Time mode: {0}'
    },
    listeners: {
        menuhide: 'fireChangeMode',
        menushow: 'focusAirportField'
    },
    modes: {
        UTC: 'utc',
        LOCAL: 'local'
    },
    initComponent: function() {
        this.menu = this.buildMenu();
        Ext.button.Button.prototype.initComponent.call(this);
        this.lastFired = {
            airport: undefined,
            mode: undefined
        };
        this.airport_textfield = this.down('textfield[name=timemode_airport_code]');
        this.setLabelTpl(new Ext.Template(this.getLabelTpl()));
        this.setInitialValues();
        this.updateLabel()
    },
    buildMenu: function() {
        var a = this;
        return {
            plain: !0,
            items: [{
                xtype: 'radio',
                name: 'timeMode',
                inputValue: a.modes.UTC,
                boxLabel: 'UTC',
                listeners: {
                    change: {
                        fn: a.onTimeModeRadioChange,
                        scope: a
                    }
                }
            }, {
                xtype: 'container',
                layout: 'hbox',
                focusable: !0,
                getFocusEl: function() {
                    return this.down('radio')
                },
                items: [{
                    xtype: 'radio',
                    name: 'timeMode',
                    boxLabel: 'Local at Airport',
                    inputValue: a.modes.LOCAL,
                    margin: '0 10 0 0',
                    listeners: {
                        change: {
                            fn: a.onTimeModeRadioChange,
                            scope: a
                        }
                    }
                }, {
                    xtype: 'textfield',
                    name: 'timemode_airport_code',
                    disabled: !0,
                    upperCase: !0,
                    minLength: a.getCodeLength(),
                    maxLength: a.getCodeLength(),
                    listeners: {
                        specialkey: {
                            fn: a.onAirportCodeTextfieldSpecialKey,
                            scope: a
                        },
                        change: {
                            fn: a.onAirportCodeTextfieldChange,
                            scope: a
                        }
                    }
                }]
            }]
        }
    },
    fireChangeMode: function() {
        var b = this.getAirport(),
            a = this.getTimemode(),
            d = this.modes.LOCAL,
            c = this.modes.UTC;
        if (a === d && (!b || !this.airport_textfield.isValid() || this.lastFired.airport === b) || this.lastFired.mode === c && a === c) {
            return
        }
        if (a) {
            this.fireEvent('timemodechange', a, b);
            this.updateLabel();
            this.cacheFiredValues(a, b)
        }
    },
    updateLabel: function() {
        var a = [this.getTimemode() === this.modes.UTC ? 'UTC' : this.getAirport()];
        this.setText(this.getLabelTpl().apply(a))
    },
    focusAirportField: function functionName() {
        if (!this.airport_textfield.isDisabled()) {
            this.airport_textfield.focus(!0)
        }
    },
    setInitialValues: function() {
        this.airport_textfield.setValue(this.getAirport());
        if (this.getTimemode()) {
            this.down('radio[inputValue=' + this.getTimemode() + ']').setValue(!0)
        }
    },
    cacheFiredValues: function(a, b) {
        this.lastFired.mode = a;
        this.lastFired.airport = a === this.modes.UTC ? undefined : b
    },
    onTimeModeRadioChange: function(b, a) {
        if (b.inputValue === this.modes.LOCAL) {
            this.airport_textfield.setDisabled(!a);
            this.focusAirportField()
        }
        if (a) {
            this.setTimemode(b.inputValue)
        }
    },
    onAirportCodeTextfieldChange: function(a, b) {
        this.setAirport(a.isValid() ? b : undefined)
    },
    onAirportCodeTextfieldSpecialKey: function(b, a) {
        if (a.getKey() === a.ENTER && b.isValid()) {
            this.hideMenu()
        }
    }
}, 0, ['timemodebutton'], ['component', 'box', 'button', 'timemodebutton'], {
    'component': !0,
    'box': !0,
    'button': !0,
    'timemodebutton': !0
}, ['widget.timemodebutton'], 0, [TimesSquare.view.gantt, 'TimeModeButton'], 0);
Ext.cmd.derive('Alf.data.Util', Ext.Base, {
    singleton: !0,
    transformData: function(g, d, a) {
        var f = {},
            b, c, e;
        a = a || '.';
        for (c in d) {
            if (d.hasOwnProperty(c)) {
                b = d[c];
                e = typeof b === 'string' ? this.extractField(g, b, a) : b;
                this.writeField(f, c, e, a)
            }
        }
        return f
    },
    extractField: function(a, b, d) {
        var c = b.split(d);
        do {
            b = c.shift();
            a = a && typeof a === 'object' ? a[b] : undefined
        } while (c.length);
        return a
    },
    writeField: function(b, a, e, d) {
        var c = a.split(d);
        while (c.length > 1) {
            a = c.shift();
            if (!b[a] || typeof b[a] !== 'object') {
                b[a] = {}
            }
            b = b[a]
        }
        a = c.shift();
        b[a] = e
    },
    createRecordThroughReader: function(b, c) {
        var a;
        a = Ext.create('Ext.data.Store', {
            autoLoad: !0,
            model: b,
            data: [c],
            proxy: {
                type: 'memory'
            }
        });
        return a.first()
    }
}, 0, 0, 0, 0, 0, 0, [Alf.data, 'Util'], 0);
Ext.cmd.derive('Alf.meta.Column', Ext.Base, {
    singleton: !0,
    generate: function(f, d) {
        var c = f.fields,
            e = [],
            b, a;
        for (a in c) {
            if (c.hasOwnProperty(a)) {
                b = {
                    dataIndex: a
                };
                Ext.apply(b, c[a]);
                if (d && d[a]) {
                    Ext.apply(b, d[a])
                }
                e.push(b)
            }
        }
        return e
    }
}, 0, 0, 0, 0, 0, 0, [Alf.meta, 'Column'], 0);
Ext.cmd.derive('Alf.meta.Documentation', Ext.Base, {
    singleton: !0,
    tpl: ['<h1>{reourceName}</h1>', '<tpl for="fields">', '<h1>{fieldLabel}<h1>', '<p>Details of the field...</tpl>', '</tpl>'],
    generate: function(a) {}
}, 0, 0, 0, 0, 0, 0, [Alf.meta, 'Documentation'], 0);
Ext.cmd.derive('Alf.meta.Field', Ext.Base, {
    singleton: !0,
    decorate: function(d, e, f) {
        var h = d.fields,
            g = d.defaults,
            i = e.length,
            c, a, b;
        for (c = 0; c < i; c += 1) {
            a = e[c];
            if (a.items) {
                if (a.meta !== !1 && f !== !1 && Ext.isArray(a.items)) {
                    this.decorate(d, a.items)
                }
            } else {
                b = a.mtype || a.name;
                if (b && a.meta !== !1) {
                    Ext.applyIf(a, h[b]);
                    Ext.applyIf(a, g);
                    this.applyExtraConfig(a);
                    if (a.name === undefined) {
                        a.name = b
                    }
                }
            }
        }
        return e
    },
    generate: function(e) {
        var d = e.fields,
            f = e.defaults,
            c = [],
            a, b;
        for (b in d) {
            if (d.hasOwnProperty(b)) {
                a = {
                    name: b
                };
                Ext.apply(a, d[b], f);
                this.applyExtraConfig(a);
                c[c.length] = a
            }
        }
        return c
    },
    applyExtraConfig: function(a) {
        if (a.inputWidth !== undefined && a.labelWidth !== undefined && a.width === undefined) {
            a.width = a.inputWidth + a.labelWidth + (a.labelPad === undefined ? 5 : a.labelPad)
        }
    }
}, 0, 0, 0, 0, 0, 0, [Alf.meta, 'Field'], 0);
Ext.cmd.derive('Alf.meta.Manager', Ext.Base, {
    getResource: function(c, d) {
        var e = 'meta.' + c.split('.')[0],
            b = c.split('.')[1] || d,
            a = Ext.ClassManager.getByAlias(e);
        if (a && a[b]) {
            this.applyExtends(a[b], a);
            return {
                fields: a[b],
                defaults: Ext.apply({}, a[b + 'Defaults'] || a.defaults)
            }
        }
    },
    applyExtends: function(b, d) {
        var c, a;
        for (c in b) {
            if (b.hasOwnProperty(c)) {
                a = b[c];
                if (a && a.extend) {
                    Ext.applyIf(a, this.getBaseField(a.extend, d));
                    delete a.extend
                }
            }
        }
    },
    getBaseField: function(d, c) {
        var e = d.split('.'),
            b, a;
        if (e.length === 1) {
            if (c && c[d]) {
                b = c;
                a = c[d]
            } else {
                b = Ext.ClassManager.getByAlias('meta.Base');
                a = b[d]
            }
        } else {
            b = Ext.ClassManager.getByAlias('meta.' + e[0]);
            a = b[e[1]]
        }
        if (a.extend) {
            Ext.applyIf(a, this.getBaseField(a.extend, b));
            delete a.extend
        }
        return a
    },
    decorateFields: function(c, d, a) {
        var b = this.getResource(c, 'fields');
        return Alf.meta.Field.decorate(b, d, a)
    },
    generateFields: function(b) {
        var a = this.getResource(b, 'fields');
        return Alf.meta.Field.generate(a)
    },
    useFieldGenerator: function(a) {
        var b = a.metaItems;
        if (Ext.isEmpty(a.items)) {
            a.items = this.generateFields(b)
        } else {
            this.decorateFields(b, a.items)
        }
    },
    generateColumns: function(c, a) {
        var b = this.getResource(c, 'columns');
        return Alf.meta.Column.generate(b, a)
    },
    useColumnGenerator: function(a) {
        var c = a.metaColumns,
            b = Ext.isObject(a.columns) ? a.columns : null;
        if (Ext.isEmpty(a.columns) || b) {
            a.columns = this.generateColumns(c, b)
        } else {}
    }
}, 0, 0, 0, 0, 0, 0, [Alf.meta, 'Manager'], function() {
    Alf.MetaManager = new this()
});
Ext.cmd.derive('Alf.meta.Model', Ext.Base, {
    singleton: !0,
    generate: function(a) {}
}, 0, 0, 0, 0, 0, 0, [Alf.meta, 'Model'], 0);
Ext.cmd.derive('ExSch.view.Horizontal', Sch.view.Horizontal, {
    onEventRemove: function(j, a) {
        var b = this.view;
        var h = this.resourceStore;
        var i = Ext.tree && Ext.tree.View && b instanceof Ext.tree.View;
        if (!Ext.isArray(a)) {
            a = [a]
        }
        var d = function(c) {
            if (b.store.indexOf(c) >= 0) {
                b.repaintEventsForResource(c)
            }
        };
        for (var c = 0; c < a.length; c++) {
            var e = a[c].getResources(b.eventStore);
            if (e.length > 1) {
                Ext.each(e, d, this)
            } else {
                var f = b.getNodeByRecord(a[c]);
                if (f) {
                    var g = b.resolveResource(f);
                    d(g)
                }    name: 'TimesSquare',
    autoCreateViewport: !1,
    extend: 'TimesSquare.Application',
    controllers: ['Login', 'Wuis.controller.EventLogger', 'Main', 'Clock', 'Selection', 'Messaging', 'SearchLeg', 'gantt.Gantt', 'gantt.LogicalAircraft', 'gantt.NonRotationalAircraft', 'gantt.AtcSlot'],
    stores: [],

    init: function() {
        Ext.Ajax.setTimeout(TimesSquare.CONFIG.application.ajaxTimeout);
        Ext.override(Ext.data.proxy.Server, {
            timeout: Ext.Ajax.timeout
        });
        Ext.override(Ext.data.Connection, {
            timeout: Ext.Ajax.timeout
        });
        Ext.override(Ext.form.Basic, {
            timeout: Ext.Ajax.timeout / 1000
        });
        TimesSquare.CONFIG.detailViewFieldSize.set(40, [0, 6, 6, 0]);
        Sch.preset.Manager.registerPreset('opsHourAndDay', {
            timeColumnWidth: 60,
            rowHeight: 60,
            resourceColumnWidth: 100,
            displayDateFormat: 'G:i',
            shiftIncrement: 1,
            shiftUnit: 'DAY',
            defaultSpan: 24,
            timeResolution: {
                unit: 'DAY',
                increment: 1
            },
            headerConfig: {
                middle: {
                    unit: 'HOUR',
                    align: 'left',
                    dateFormat: 'G',
                    renderer: TimesSquare.util.Time.createRederer('G')
                },
                top: {
                    unit: 'DAY',
                    align: 'center',
                    dateFormat: 'D dMy',
                    renderer: TimesSquare.util.Time.createRederer('D dMy')
                }
            }
        });
        Sch.preset.Manager.registerPreset('opsMinuteAndHour', {
            timeColumnWidth: 100,
            rowHeight: 60,
            resourceColumnWidth: 100,
            displayDateFormat: 'G:i',
            shiftIncrement: 1,
            shiftUnit: 'HOUR',
            defaultSpan: 48,
            timeResolution: {
                unit: 'MINUTE',
                increment: 15
            },
            headerConfig: {
                top: {
                    unit: 'HOUR',
                    align: 'center',
                    dateFormat: 'D dMy, G',
                    renderer: TimesSquare.util.Time.createRederer('D dMy, G')
                },
                middle: {
                    unit: 'MINUTE',
                    align: 'left',
                    dateFormat: 'i',
                    renderer: TimesSquare.util.Time.createRederer('i')
                }
            }
        });
        Sch.preset.Manager.registerPreset('opsWeekAndDay', {
            timeColumnWidth: 100,
            rowHeight: 60,
            resourceColumnWidth: 100,
            displayDateFormat: 'Y-m-d',
            shiftUnit: 'WEEK',
            shiftIncrement: 1,
            defaultSpan: 7,
            timeResolution: {
                unit: 'DAY',
                increment: 1
            },
            headerConfig: {
                top: {
                    unit: 'WEEK',
                    align: 'center',
                    dateFormat: 'D dMy',
                    renderer: TimesSquare.util.Time.createRederer('D dMy')
                },
                middle: {
                    unit: 'DAY',
                    align: 'center',
                    dateFormat: 'dMy',
                    renderer: TimesSquare.util.Time.createRederer('dMy')
                }
            }
        });
        Wuis.ajax.DirectService.useMsgBoxDialog = !1;
        Wuis.ajax.DirectService.provide(TimesSquare.CONFIG.application.services, 'TimesSquare.service.');
        Ext.Ajax.on('requestexception', this.handleRequestException, this);
        Ext.app.Application.prototype.init.apply(this, arguments)
    },
    handleRequestException: function(g, e, a) {
        var c = this,
            b = e.status,
            f, d;
        if (c.skipExceptionHandling(e, a)) {
            return
        }
        if (b === 401) {
            if (/\/NetLine-1.0\/oss\/sendGuiLog/.test(a.url)) {
                return
            }
            c.showRequestException(a, 'Unauthorized', 'Unauthorized access. Press OK to authenticate.', function() {
                window.location.reload();
                throw new Error('Unauthorized.')
            }, !1, b);
            return
        }
        if (b === 0) {
            if (/\/NetLine-1.0\/oss\/sendGuiLog/.test(a.url)) {
                return
            }
            c.showRequestException(a, !1, 'Connection to the server is lost.', !1, !1, b);
            return
        }
        f = e.timedout;
        if (f) {
            c.showRequestException(a, 'Timeout', 'Communication failure: timeout.', !1, !1, b);
            return
        }
        d = Ext.JSON.decode(e.responseText, !0);
        if (b === 500 && d && d.result) {
            c.showRequestException(a, !1, d.result.cause, !1, d.result.stackTrace, b);
            return
        }
        c.showRequestException(a, !1, 'Status code: ' + b)
    },
    skipExceptionHandling: function(a, f) {
        var h = this,
            g = a.status,
            b = a.request.options.url,
            e = h.getController('Login').restPrefix,
            d, c;
        if (a.aborted) {
            return !0
        }
        if (g === 503 && b.indexOf(TimesSquare.CONFIG.application.urls.notificationTopicUrl) > -1) {
            return !0
        }
        d = e + 'authorization';
        c = e + 'authentication';
        if (g === 401 && b.indexOf(d) > -1 || b.indexOf(c) > -1) {
            return !0
        }
        if (/\/NetLine-1.0\/(hornetq|amq)\//.test(f && f.url)) {
            return !0
        }
    },
    showRequestException: function(c, h, g, f, d, e) {
        var j = h || 'Communication failure',
            b = g || 'Communication failure',
            i = f || Ext.emptyFn,
            a = {
                title: j,
                buttons: Ext.MessageBox.OK,
                icon: Ext.MessageBox.ERROR,
                fn: i
            };
        if (e !== undefined) {
            b += '<br />Status code: ' + e
        }
        if (c && c.url) {
            b += '<br />Request URL: ';
            b += c.url
        }
        a.msg = b;
        if (d) {
            a.multiline = !0;
            a.value = d;
            a.width = 600;
            a.defaultTextHeight = 200
        }
        TimesSquare.Msg.show(a)
    },
    launch: function() {},

            }
        }
    }
}, 0, 0, 0, 0, 0, 0, [ExSch.view, 'Horizontal'], 0);
Ext.Loader.setConfig({
    disableCaching: !1,
    enabled: !0
});
Ext.application({
    extend: TimesSquare.Application,
    name: 'TimesSquare',
    autoCreateViewport: !1,
    launch: function() {
        this.initUpdateListener();
        if (!window.location.href.match(/\?testing=true/)) {
            this.callParent(arguments)
        }
    },
    initUpdateListener: function() {
        var b = this,
            a = navigator && navigator.serviceWorker && navigator.serviceWorker.controller;
        if (a) {
            a.onstatechange = function(a) {
                if (a.target.state === 'redundant') {
                    b.onAppUpdate()
                }
            }
        }
    },
    onAppUpdate: function() {
        Ext.Msg.renderTo = Ext.getBody();
        Ext.defer(this.updatePrompt, this.updateDelay)
    },
    updateDelay: 5000,
    updatePrompt: function() {
        Ext.Msg.confirm('Application Update', 'This application received an update, reload now?', function(a) {
            if (a === 'yes') {
                window.location.reload()
            }
        })
    }
});
