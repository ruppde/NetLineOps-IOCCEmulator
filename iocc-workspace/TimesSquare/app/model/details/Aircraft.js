Ext.define('TimesSquare.model.details.Aircraft', {
    extend: 'Ext.data.Model',
    proxy: {
        type: 'rest',
        appendId: !1,
        reader: {
            type: 'json',
            rootProperty: 'result'
        }
    },
    getPerformanceUrl: function() {
        var a = this.get('hyperMedia'),
            b = a && a.urlPerformance;
        return b
    },
    fields: [{
        name: 'hyperMedia',
        type: 'auto'
    }, {
        name: 'registration',
        type: 'string',
        mapping: 'acBase.registration'
    }, {
        name: 'alternativeRegistration',
        type: 'string',
        mapping: 'acBase.alternativeRegistration'
    }, {
        name: 'owner',
        type: 'string',
        mapping: 'acBase.owner'
    }, {
        name: 'ownerName',
        type: 'string',
        mapping: 'acBase.ownerName'
    }, {
        name: 'subtype',
        type: 'string',
        mapping: 'acBase.subtype'
    }, {
        name: 'subtypeName',
        type: 'string',
        mapping: 'acBase.subtypeName'
    }, {
        name: 'validSince',
        type: 'date',
        dateFormat: 'c',
        mapping: 'acBase.validSince'
    }, {
        name: 'validUntil',
        type: 'date',
        dateFormat: 'c',
        mapping: 'acBase.validUntil'
    }, {
        name: 'operator',
        type: 'string',
        mapping: 'acBase.operator'
    }, {
        name: 'apRestriction',
        type: 'boolean',
        mapping: 'acEquipment.apRestriction',
        convert: function(a) {
            return Ext.util.Format.booleanToString(a)
        }
    }, {
        name: 'weight',
        type: 'number',
        mapping: 'acWeight.dryOperatingWeight'
    }, {
        name: 'acIndex',
        type: 'string',
        mapping: 'acBase.acIndex'
    }, {
        name: 'callSign',
        type: 'string',
        mapping: 'acContact.callSign'
    }, {
        name: 'mtow',
        type: 'number',
        mapping: 'acWeight.maxTakeoffWeight'
    }, {
        name: 'logicalNo',
        type: 'string',
        mapping: 'acBase.logicalNo'
    }, {
        name: 'radio',
        type: 'string',
        mapping: 'acContact.radio'
    }, {
        name: 'cargoCapacity',
        type: 'number',
        mapping: 'acWeight.cargoCapacity'
    }, {
        name: 'state',
        type: 'string',
        mapping: 'acBase.state'
    }, {
        name: 'acars',
        type: 'string',
        mapping: 'acContact.acars'
    }, {
        name: 'fuelCapacity',
        type: 'number',
        mapping: 'acFuel.fuelCapacity'
    }, {
        name: 'noiseFactor',
        type: 'boolean',
        mapping: 'acEquipment.noiseFactor',
        convert: function(a) {
            return Ext.util.Format.booleanToString(a)
        }
    }, {
        name: 'phone',
        type: 'string',
        mapping: 'acContact.phone'
    }, {
        name: 'averageFuelConsumption',
        type: 'number',
        mapping: 'acFuel.averageFuelConsumption'
    }, {
        name: 'standardVersion',
        type: 'string',
        mapping: 'acEquipment.standardVersion'
    }, {
        name: 'versionName',
        type: 'string',
        mapping: 'acEquipment.versionName'
    }, {
        name: 'compartments',
        type: 'string',
        mapping: 'acEquipment.compartments'
    }, {
        name: 'cockpitCrewSize',
        type: 'number',
        mapping: 'acEquipment.cockpitCrewSize'
    }, {
        name: 'cabinCrewSize',
        type: 'number',
        mapping: 'acEquipment.cabinCrewSize'
    }, {
        name: 'specialEquipment',
        type: 'string',
        mapping: 'acEquipment.specialEquipment'
    }, {
        name: 'remark',
        type: 'string',
        mapping: 'acBase.remark'
    }, {
        name: 'restrictionsList',
        type: 'auto'
    }]
});
