Ext.define('Sch.util.Patch', {target:null, minVersion:null, maxVersion:null, reportUrl:null, description:null, applyFn:null, ieOnly:false, onClassExtended:function(a, b) {
  if (Sch.disableOverrides) {
    return;
  }
  if (b.ieOnly && !Ext.isIE) {
    return;
  }
  if (b.applyFn) {
    b.applyFn();
  } else {
    if ((!b.minVersion || Ext.versions.extjs.equals(b.minVersion) || Ext.versions.extjs.isGreaterThan(b.minVersion)) && (!b.maxVersion || Ext.versions.extjs.equals(b.maxVersion) || Ext.versions.extjs.isLessThan(b.maxVersion))) {
      b.requires[0].override(b.overrides);
    }
  }
}});
Ext.define('Sch.patches.LoadMask', {extend:'Sch.util.Patch', requires:['Ext.view.AbstractView'], minVersion:'4.1.0b3', reportURL:'http://www.sencha.com/forum/showthread.php?187700-4.1.0-B3-Ext.AbstractView-no-longer-binds-its-store-to-load-mask', description:'In Ext4.1 loadmask no longer bind the store', overrides:{}});
Ext.define('Sch.patches.Table', {extend:'Sch.util.Patch', requires:['Ext.view.Table'], minVersion:'4.1.1', maxVersion:'4.1.1', reportURL:'http://www.sencha.com/forum/showthread.php?238026-4.1.1-Alt-row-styling-lost-after-record-update\x26p\x3d874190#post874190', description:'In Ext4.1.1 when record is updated, the alternate row styling is lost', overrides:{onUpdate:function(c, a, b, e) {
  var d = this.store.indexOf(a);
  this.callParent(arguments);
  this.doStripeRows(d, d);
}}});
Ext.define('Sch.patches.TreeView', {extend:'Sch.util.Patch', requires:['Ext.tree.View'], applyFn:function() {
  Ext.tree.View.addMembers({providedStore:null, initComponent:function() {
    var a = this, b = a.panel.getStore();
    if (a.initialConfig.animate === undefined) {
      a.animate = Ext.enableFx;
    }
    a.store = a.providedStore || new Ext.data.NodeStore({treeStore:b, recursive:true, rootVisible:a.rootVisible});
    a.store.on({beforeexpand:a.onBeforeExpand, expand:a.onExpand, beforecollapse:a.onBeforeCollapse, collapse:a.onCollapse, write:a.onStoreWrite, datachanged:a.onStoreDataChanged, scope:a});
    if (a.node && !a.store.node) {
      a.setRootNode(a.node);
    }
    a.animQueue = {};
    a.animWraps = {};
    a.addEvents('afteritemexpand', 'afteritemcollapse');
    a.callParent(arguments);
    a.on({element:'el', scope:a, delegate:a.expanderSelector, mouseover:a.onExpanderMouseOver, mouseout:a.onExpanderMouseOut});
    a.on({element:'el', scope:a, delegate:a.checkboxSelector, click:a.onCheckboxChange});
  }});
}});
Ext.define('Sch.patches.DataOperation', {extend:'Sch.util.Patch', requires:['Ext.data.Operation'], reportURL:'http://www.sencha.com/forum/showthread.php?198894-4.1-Ext.data.TreeStore-CRUD-regression.', description:'In Ext 4.1.0 newly created records do not get the Id returned by server applied', maxVersion:'4.1.0', overrides:{commitRecords:function(j) {
  var g = this, h, f, a, c, b, d, e;
  if (!g.actionSkipSyncRe.test(g.action)) {
    a = g.records;
    if (a && a.length) {
      if (a.length > 1) {
        if (g.action == 'update' || a[0].clientIdProperty) {
          h = new Ext.util.MixedCollection();
          h.addAll(j);
          for (f = a.length; f--;) {
            b = a[f];
            c = h.findBy(g.matchClientRec, b);
            b.copyFrom(c);
          }
        } else {
          for (d = 0, e = a.length; d < e; ++d) {
            b = a[d];
            c = j[d];
            if (b && c) {
              g.updateRecord(b, c);
            }
          }
        }
      } else {
        this.updateRecord(a[0], j[0]);
      }
      if (g.actionCommitRecordsRe.test(g.action)) {
        for (f = a.length; f--;) {
          a[f].commit();
        }
      }
    }
  }
}, updateRecord:function(a, b) {
  if (b && (a.phantom || a.getId() === b.getId())) {
    a.copyFrom(b);
  }
}}});
Ext.define('Sch.patches.TreeStore', {extend:'Sch.util.Patch', requires:['Ext.data.TreeStore'], description:'http://www.sencha.com/forum/showthread.php?208602-Model-s-Id-field-not-defined-after-sync-in-TreeStore-%28CRUD%29', maxVersion:'4.1.0', overrides:{onCreateRecords:function(c) {
  this.callParent(arguments);
  var d = 0, b = c.length, a = this.tree, e;
  for (; d < b; ++d) {
    e = c[d];
    a.onNodeIdChanged(e, null, e.getId());
  }
}, setRootNode:function(a, e) {
  var d = this, c = d.model, b = c.prototype.idProperty;
  a = a || {};
  if (!a.isModel) {
    Ext.applyIf(a, {text:'Root', allowDrag:false});
    if (a[b] === undefined) {
      a[b] = d.defaultRootId;
    }
    Ext.data.NodeInterface.decorate(c);
    a = Ext.ModelManager.create(a, c);
  } else {
    if (a.isModel && !a.isNode) {
      Ext.data.NodeInterface.decorate(c);
    }
  }
  d.getProxy().getReader().buildExtractors(true);
  d.tree.setRootNode(a);
  if (e !== true && !a.isLoaded() && (d.autoLoad === true || a.isExpanded())) {
    d.load({node:a});
  }
  return a;
}}});
Ext.define('Sch.util.Date', {requires:'Ext.Date', singleton:true, unitsByName:{}, constructor:function() {
  var b = Ext.Date;
  var d = {MILLI:b.MILLI, SECOND:b.SECOND, MINUTE:b.MINUTE, HOUR:b.HOUR, DAY:b.DAY, WEEK:'w', MONTH:b.MONTH, QUARTER:'q', YEAR:b.YEAR};
  Ext.apply(this, d);
  var c = this;
  this.units = [c.MILLI, c.SECOND, c.MINUTE, c.HOUR, c.DAY, c.WEEK, c.MONTH, c.QUARTER, c.YEAR];
  for (var a in d) {
    if (d.hasOwnProperty(a)) {
      var e = d[a];
      c.unitNames[e] = c.unitNames[a];
      c.unitsByName[a] = e;
      c.unitsByName[e] = e;
    }
  }
}, betweenLesser:function(b, d, a) {
  var c = b.getTime();
  return d.getTime() <= c && c < a.getTime();
}, constrain:function(b, c, a) {
  return this.min(this.max(b, c), a);
}, compareUnits:function(c, b) {
  var a = Ext.Array.indexOf(this.units, c), d = Ext.Array.indexOf(this.units, b);
  return a > d ? 1 : a < d ? -1 : 0;
}, isUnitGreater:function(b, a) {
  return this.compareUnits(b, a) > 0;
}, copyTimeValues:function(b, a) {
  b.setHours(a.getHours());
  b.setMinutes(a.getMinutes());
  b.setSeconds(a.getSeconds());
  b.setMilliseconds(a.getMilliseconds());
}, add:function(b, c, e) {
  var f = Ext.Date.clone(b);
  if (!c || e === 0) {
    return f;
  }
  switch(c.toLowerCase()) {
    case this.MILLI:
      f = new Date(b.getTime() + e);
      break;
    case this.SECOND:
      f = new Date(b.getTime() + e * 1000);
      break;
    case this.MINUTE:
      f = new Date(b.getTime() + e * 60000);
      break;
    case this.HOUR:
      f = new Date(b.getTime() + e * 3600000);
      break;
    case this.DAY:
      f.setDate(b.getDate() + e);
      break;
    case this.WEEK:
      f.setDate(b.getDate() + e * 7);
      break;
    case this.MONTH:
      var a = b.getDate();
      if (a > 28) {
        a = Math.min(a, Ext.Date.getLastDateOfMonth(this.add(Ext.Date.getFirstDateOfMonth(b), this.MONTH, e)).getDate());
      }
      f.setDate(a);
      f.setMonth(f.getMonth() + e);
      break;
    case this.QUARTER:
      f = this.add(b, this.MONTH, e * 3);
      break;
    case this.YEAR:
      f.setFullYear(b.getFullYear() + e);
      break;
  }
  return f;
}, getMeasuringUnit:function(a) {
  if (a === this.WEEK) {
    return this.DAY;
  }
  return a;
}, getDurationInUnit:function(d, a, c) {
  var b;
  switch(c) {
    case this.YEAR:
      b = Math.round(this.getDurationInYears(d, a));
      break;
    case this.QUARTER:
      b = Math.round(this.getDurationInMonths(d, a) / 3);
      break;
    case this.MONTH:
      b = Math.round(this.getDurationInMonths(d, a));
      break;
    case this.WEEK:
      b = Math.round(this.getDurationInDays(d, a)) / 7;
      break;
    case this.DAY:
      b = Math.round(this.getDurationInDays(d, a));
      break;
    case this.HOUR:
      b = Math.round(this.getDurationInHours(d, a));
      break;
    case this.MINUTE:
      b = Math.round(this.getDurationInMinutes(d, a));
      break;
    case this.SECOND:
      b = Math.round(this.getDurationInSeconds(d, a));
      break;
    case this.MILLI:
      b = Math.round(this.getDurationInMilliseconds(d, a));
      break;
  }
  return b;
}, getUnitToBaseUnitRatio:function(b, a) {
  if (b === a) {
    return 1;
  }
  switch(b) {
    case this.YEAR:
      switch(a) {
        case this.QUARTER:
          return 1 / 4;
        case this.MONTH:
          return 1 / 12;
      }break;
    case this.QUARTER:
      switch(a) {
        case this.YEAR:
          return 4;
        case this.MONTH:
          return 1 / 3;
      }break;
    case this.MONTH:
      switch(a) {
        case this.YEAR:
          return 12;
        case this.QUARTER:
          return 3;
      }break;
    case this.WEEK:
      switch(a) {
        case this.DAY:
          return 1 / 7;
        case this.HOUR:
          return 1 / 168;
      }break;
    case this.DAY:
      switch(a) {
        case this.WEEK:
          return 7;
        case this.HOUR:
          return 1 / 24;
        case this.MINUTE:
          return 1 / 1440;
      }break;
    case this.HOUR:
      switch(a) {
        case this.DAY:
          return 24;
        case this.MINUTE:
          return 1 / 60;
      }break;
    case this.MINUTE:
      switch(a) {
        case this.HOUR:
          return 60;
        case this.SECOND:
          return 1 / 60;
        case this.MILLI:
          return 1 / 60000;
      }break;
    case this.SECOND:
      switch(a) {
        case this.MILLI:
          return 1 / 1000;
      }break;
    case this.MILLI:
      switch(a) {
        case this.SECOND:
          return 1000;
      }break;
  }
  return -1;
}, getDurationInMilliseconds:function(b, a) {
  return a - b;
}, getDurationInSeconds:function(b, a) {
  return (a - b) / 1000;
}, getDurationInMinutes:function(b, a) {
  return (a - b) / 60000;
}, getDurationInHours:function(b, a) {
  return (a - b) / 3600000;
}, getDurationInDays:function(b, a) {
  return (a - b) / 86400000;
}, getDurationInBusinessDays:function(g, b) {
  var c = Math.round((b - g) / 86400000), a = 0, f;
  for (var e = 0; e < c; e++) {
    f = this.add(g, this.DAY, e).getDay();
    if (f !== 6 && f !== 0) {
      a++;
    }
  }
  return a;
}, getDurationInMonths:function(b, a) {
  return (a.getFullYear() - b.getFullYear()) * 12 + (a.getMonth() - b.getMonth());
}, getDurationInYears:function(b, a) {
  return this.getDurationInMonths(b, a) / 12;
}, min:function(b, a) {
  return b < a ? b : a;
}, max:function(b, a) {
  return b > a ? b : a;
}, intersectSpans:function(c, d, b, a) {
  return this.betweenLesser(c, b, a) || this.betweenLesser(b, c, d);
}, getNameOfUnit:function(a) {
  a = this.getUnitByName(a);
  switch(a.toLowerCase()) {
    case this.YEAR:
      return 'YEAR';
    case this.QUARTER:
      return 'QUARTER';
    case this.MONTH:
      return 'MONTH';
    case this.WEEK:
      return 'WEEK';
    case this.DAY:
      return 'DAY';
    case this.HOUR:
      return 'HOUR';
    case this.MINUTE:
      return 'MINUTE';
    case this.SECOND:
      return 'SECOND';
    case this.MILLI:
      return 'MILLI';
  }
  throw 'Incorrect UnitName';
}, unitNames:{YEAR:{single:'year', plural:'years', abbrev:'yr'}, QUARTER:{single:'quarter', plural:'quarters', abbrev:'q'}, MONTH:{single:'month', plural:'months', abbrev:'mon'}, WEEK:{single:'week', plural:'weeks', abbrev:'w'}, DAY:{single:'day', plural:'days', abbrev:'d'}, HOUR:{single:'hour', plural:'hours', abbrev:'h'}, MINUTE:{single:'minute', plural:'minutes', abbrev:'min'}, SECOND:{single:'second', plural:'seconds', abbrev:'s'}, MILLI:{single:'ms', plural:'ms', abbrev:'ms'}}, getReadableNameOfUnit:function(b, 
a) {
  return this.unitNames[b][a ? 'plural' : 'single'];
}, getShortNameOfUnit:function(a) {
  return this.unitNames[a].abbrev;
}, getUnitByName:function(a) {
  if (!this.unitsByName[a]) {
    Ext.Error.raise('Unknown unit name: ' + a);
  }
  return this.unitsByName[a];
}, getNext:function(c, f, a, e) {
  var d = Ext.Date.clone(c);
  a = a || 1;
  switch(f) {
    case this.DAY:
      Ext.Date.clearTime(d);
      d = this.add(d, this.DAY, a);
      break;
    case this.WEEK:
      var b = d.getDay();
      d = this.add(d, this.DAY, 7 * (a - 1) + (b < e ? e - b : 7 - b + e));
      break;
    case this.MONTH:
      d = this.add(d, this.MONTH, a);
      d.setDate(1);
      break;
    case this.QUARTER:
      d = this.add(d, this.MONTH, (a - 1) * 3 + (3 - d.getMonth() % 3));
      break;
    case this.YEAR:
      d = new Date(d.getFullYear() + a, 0, 1);
      break;
    default:
      d = this.add(c, f, a);
      break;
  }
  return d;
}, getNumberOfMsFromTheStartOfDay:function(a) {
  return a - Ext.Date.clearTime(a, true) || 86400000;
}, getNumberOfMsTillTheEndOfDay:function(a) {
  return this.getStartOfNextDay(a, true) - a;
}, getStartOfNextDay:function(b, e) {
  var d = this.add(Ext.Date.clearTime(b, e), this.DAY, 1);
  if (d.getDate() == b.getDate()) {
    var c = this.add(Ext.Date.clearTime(b, e), this.DAY, 2).getTimezoneOffset();
    var a = b.getTimezoneOffset();
    d = this.add(d, this.MINUTE, a - c);
  }
  return d;
}, getEndOfPreviousDay:function(b) {
  var a = Ext.Date.clearTime(b, true);
  if (a - b) {
    return a;
  } else {
    return this.add(a, this.DAY, -1);
  }
}, timeSpanContains:function(c, b, d, a) {
  return d - c >= 0 && b - a >= 0;
}});
Ext.define('Sch.util.DragTracker', {extend:'Ext.dd.DragTracker', xStep:1, yStep:1, setXStep:function(a) {
  this.xStep = a;
}, setYStep:function(a) {
  this.yStep = a;
}, getRegion:function() {
  var e = this.startXY, d = this.getXY(), b = Math.min(e[0], d[0]), f = Math.min(e[1], d[1]), c = Math.abs(e[0] - d[0]), a = Math.abs(e[1] - d[1]);
  return new Ext.util.Region(f, b + c, f + a, b);
}, onMouseDown:function(f, d) {
  if (this.disabled || f.dragTracked) {
    return;
  }
  var c = f.getXY(), g, b, a = c[0], h = c[1];
  if (this.xStep > 1) {
    g = this.el.getX();
    a -= g;
    a = Math.round(a / this.xStep) * this.xStep;
    a += g;
  }
  if (this.yStep > 1) {
    b = this.el.getY();
    h -= b;
    h = Math.round(h / this.yStep) * this.yStep;
    h += b;
  }
  this.dragTarget = this.delegate ? d : this.handle.dom;
  this.startXY = this.lastXY = [a, h];
  this.startRegion = Ext.fly(this.dragTarget).getRegion();
  if (this.fireEvent('mousedown', this, f) === false || this.fireEvent('beforedragstart', this, f) === false || this.onBeforeStart(f) === false) {
    return;
  }
  this.mouseIsDown = true;
  f.dragTracked = true;
  if (this.preventDefault !== false) {
    f.preventDefault();
  }
  Ext.getDoc().on({scope:this, mouseup:this.onMouseUp, mousemove:this.onMouseMove, selectstart:this.stopSelect});
  if (this.autoStart) {
    this.timer = Ext.defer(this.triggerStart, this.autoStart === true ? 1000 : this.autoStart, this, [f]);
  }
}, onMouseMove:function(g, f) {
  if (this.active && Ext.isIE && !g.browserEvent.button) {
    g.preventDefault();
    this.onMouseUp(g);
    return;
  }
  g.preventDefault();
  var d = g.getXY(), b = this.startXY;
  if (!this.active) {
    if (Math.max(Math.abs(b[0] - d[0]), Math.abs(b[1] - d[1])) > this.tolerance) {
      this.triggerStart(g);
    } else {
      return;
    }
  }
  var a = d[0], h = d[1];
  if (this.xStep > 1) {
    a -= this.startXY[0];
    a = Math.round(a / this.xStep) * this.xStep;
    a += this.startXY[0];
  }
  if (this.yStep > 1) {
    h -= this.startXY[1];
    h = Math.round(h / this.yStep) * this.yStep;
    h += this.startXY[1];
  }
  var c = this.xStep > 1 || this.yStep > 1;
  if (!c || a !== d[0] || h !== d[1]) {
    this.lastXY = [a, h];
    if (this.fireEvent('mousemove', this, g) === false) {
      this.onMouseUp(g);
    } else {
      this.onDrag(g);
      this.fireEvent('drag', this, g);
    }
  }
}});
Ext.define('Sch.util.HeaderRenderers', {singleton:true, requires:['Sch.util.Date', 'Ext.XTemplate'], constructor:function() {
  var b = Ext.create('Ext.XTemplate', '\x3ctable class\x3d"sch-nested-hdr-tbl ' + Ext.baseCSSPrefix + 'column-header-text" cellpadding\x3d"0" cellspacing\x3d"0"\x3e\x3ctr\x3e\x3ctpl for\x3d"."\x3e\x3ctd style\x3d"width:{[100/xcount]}%" class\x3d"{cls} sch-dayheadercell-{dayOfWeek}"\x3e{text}\x3c/td\x3e\x3c/tpl\x3e\x3c/tr\x3e\x3c/table\x3e').compile();
  var a = Ext.create('Ext.XTemplate', '\x3ctable class\x3d"sch-nested-hdr-tbl" cellpadding\x3d"0" cellspacing\x3d"0"\x3e\x3ctr\x3e\x3ctpl for\x3d"."\x3e\x3ctd style\x3d"width:{[100/xcount]}%" class\x3d"{cls}"\x3e{text}\x3c/td\x3e\x3c/tpl\x3e\x3c/tr\x3e\x3c/table\x3e').compile();
  return {quarterMinute:function(f, d, c, e) {
    c.headerCls = 'sch-nested-hdr-pad';
    return '\x3ctable class\x3d"sch-nested-hdr-tbl" cellpadding\x3d"0" cellspacing\x3d"0"\x3e\x3ctr\x3e\x3ctd\x3e00\x3c/td\x3e\x3ctd\x3e15\x3c/td\x3e\x3ctd\x3e30\x3c/td\x3e\x3ctd\x3e45\x3c/td\x3e\x3c/tr\x3e\x3c/table\x3e';
  }, dateCells:function(d, c, e) {
    return function(j, g, f) {
      f.headerCls = 'sch-nested-hdr-nopad';
      var i = [], h = Ext.Date.clone(j);
      while (h < g) {
        i.push({text:Ext.Date.format(h, e)});
        h = Sch.util.Date.add(h, d, c);
      }
      i[0].cls = 'sch-nested-hdr-cell-first';
      i[i.length - 1].cls = 'sch-nested-hdr-cell-last';
      return a.apply(i);
    };
  }, dateNumber:function(g, d, c) {
    c.headerCls = 'sch-nested-hdr-nopad';
    var f = [], e = Ext.Date.clone(g);
    while (e < d) {
      f.push({dayOfWeek:e.getDay(), text:e.getDate()});
      e = Sch.util.Date.add(e, Sch.util.Date.DAY, 1);
    }
    return b.apply(f);
  }, dayLetter:function(g, d, c) {
    c.headerCls = 'sch-nested-hdr-nopad';
    var f = [], e = g;
    while (e < d) {
      f.push({dayOfWeek:e.getDay(), text:Ext.Date.dayNames[e.getDay()].substr(0, 1)});
      e = Sch.util.Date.add(e, Sch.util.Date.DAY, 1);
    }
    f[0].cls = 'sch-nested-hdr-cell-first';
    f[f.length - 1].cls = 'sch-nested-hdr-cell-last';
    return b.apply(f);
  }, dayStartEndHours:function(e, d, c) {
    c.headerCls = 'sch-hdr-startend';
    return Ext.String.format('\x3cspan class\x3d"sch-hdr-start"\x3e{0}\x3c/span\x3e\x3cspan class\x3d"sch-hdr-end"\x3e{1}\x3c/span\x3e', Ext.Date.format(e, 'G'), Ext.Date.format(d, 'G'));
  }};
}});
Ext.define('Sch.model.Customizable', {extend:'Ext.data.Model', customizableFields:null, onClassExtended:function(b, d, a) {
  var c = a.onBeforeCreated;
  a.onBeforeCreated = function(f, k) {
    c.call(this, f, k);
    var j = f.prototype;
    if (!j.customizableFields) {
      return;
    }
    j.customizableFields = (f.superclass.customizableFields || []).concat(j.customizableFields);
    var g = j.customizableFields;
    var i = {};
    Ext.Array.each(g, function(l) {
      if (typeof l == 'string') {
        l = {name:l};
      }
      i[l.name] = l;
    });
    var e = j.fields;
    var h = [];
    e.each(function(l) {
      if (l.isCustomizableField) {
        h.push(l);
      }
    });
    e.removeAll(h);
    Ext.Object.each(i, function(l, o) {
      o.isCustomizableField = true;
      var p = o.name;
      var t = p === 'Id' ? 'idProperty' : p.charAt(0).toLowerCase() + p.substr(1) + 'Field';
      var q = j[t];
      var s = q || p;
      if (e.containsKey(s)) {
        e.getByKey(s).isCustomizableField = true;
        g.push(new Ext.data.Field(Ext.applyIf({name:p, isCustomizableField:true}, e.getByKey(s))));
      } else {
        e.add(new Ext.data.Field(Ext.applyIf({name:s, isCustomizableField:true}, o)));
      }
      var n = Ext.String.capitalize(p);
      if (n != 'Id') {
        var r = 'get' + n;
        var m = 'set' + n;
        if (!j[r] || j[r].__getterFor__ && j[r].__getterFor__ != s) {
          j[r] = function() {
            return this.data[s];
          };
          j[r].__getterFor__ = s;
        }
        if (!j[m] || j[m].__setterFor__ && j[m].__setterFor__ != s) {
          j[m] = function(u) {
            return this.set(s, u);
          };
          j[m].__setterFor__ = s;
        }
      }
    });
  };
}, set:function(c, b) {
  if (arguments.length === 2) {
    this.previous = this.previous || {};
    var a = this.get(c);
    if (a !== b) {
      this.previous[c] = a;
    }
  }
  this.callParent(arguments);
}, afterEdit:function() {
  this.callParent(arguments);
  delete this.previous;
}, reject:function() {
  var b = this, a = b.modified, c;
  b.previous = b.previous || {};
  for (c in a) {
    if (a.hasOwnProperty(c)) {
      if (typeof a[c] != 'function') {
        b.previous[c] = b.get(c);
      }
    }
  }
  b.callParent(arguments);
  delete b.previous;
}});
Ext.define('Sch.patches.Model', {extend:'Sch.util.Patch', requires:'Sch.model.Customizable', reportURL:'http://www.sencha.com/forum/showthread.php?198250-4.1-Ext.data.Model-regression', description:'In Ext 4.1 Models cannot be subclassed', maxVersion:'4.1.0', applyFn:function() {
  try {
    Ext.define('Sch.foo', {extend:'Ext.data.Model', fields:['a']});
    Ext.define('Sch.foo.Sub', {extend:'Sch.foo', fields:['a']});
  } catch (a) {
    Ext.data.Types.AUTO.convert = function(b) {
      return b;
    };
  }
}});
Ext.define('Sch.model.Range', {extend:'Sch.model.Customizable', requires:['Sch.util.Date', 'Sch.patches.DataOperation'], startDateField:'StartDate', endDateField:'EndDate', nameField:'Name', clsField:'Cls', customizableFields:[{name:'StartDate', type:'date', dateFormat:'c'}, {name:'EndDate', type:'date', dateFormat:'c'}, {name:'Cls', type:'string'}, {name:'Name', type:'string'}], setStartEndDate:function(b, a) {
  this.beginEdit();
  this.set(this.startDateField, b);
  this.set(this.endDateField, a);
  this.endEdit();
}, getDates:function() {
  var c = [], b = this.getEndDate();
  for (var a = Ext.Date.clearTime(this.getStartDate(), true); a < b; a = Sch.util.Date.add(a, Sch.util.Date.DAY, 1)) {
    c.push(a);
  }
  return c;
}, forEachDate:function(b, a) {
  return Ext.each(this.getDates(), b, a);
}, isValid:function() {
  var b = this.callParent(arguments);
  if (b) {
    var c = this.getStartDate(), a = this.getEndDate();
    b = !c || !a || a - c >= 0;
  }
  return b;
}, shift:function(b, a) {
  this.setStartEndDate(Sch.util.Date.add(this.getStartDate(), b, a), Sch.util.Date.add(this.getEndDate(), b, a));
}});
Ext.define('Sch.model.Resource', {extend:'Sch.model.Customizable', idProperty:'Id', nameField:'Name', customizableFields:['Id', {name:'Name', type:'string'}], getEventStore:function() {
  return this.stores[0] && this.stores[0].eventStore || this.parentNode && this.parentNode.getEventStore();
}, getEvents:function(d) {
  var c = [], e, f = this.getId() || this.internalId;
  d = d || this.getEventStore();
  for (var b = 0, a = d.getCount(); b < a; b++) {
    e = d.getAt(b);
    if (e.data[e.resourceIdField] === f) {
      c.push(e);
    }
  }
  return c;
}});
Ext.define('Sch.data.mixin.ResourceStore', {});
Ext.define('Sch.data.ResourceStore', {extend:'Ext.data.Store', model:'Sch.model.Resource', mixins:['Sch.data.mixin.ResourceStore']});
Ext.define('Sch.data.TimeAxis', {extend:'Ext.util.Observable', requires:['Ext.data.JsonStore', 'Sch.util.Date'], continuous:true, autoAdjust:true, constructor:function(a) {
  Ext.apply(this, a);
  this.originalContinuous = this.continuous;
  this.addEvents('beforereconfigure', 'reconfigure');
  this.tickStore = new Ext.data.JsonStore({fields:['start', 'end']});
  this.tickStore.on('datachanged', function() {
    this.fireEvent('reconfigure', this);
  }, this);
  this.callParent(arguments);
}, reconfigure:function(a) {
  Ext.apply(this, a);
  var c = this.tickStore, b = this.generateTicks(this.start, this.end, this.unit, this.increment || 1, this.mainUnit);
  if (this.fireEvent('beforereconfigure', this, this.start, this.end) !== false) {
    c.suspendEvents(true);
    c.loadData(b);
    if (c.getCount() === 0) {
      Ext.Error.raise('Invalid time axis configuration or filter, please check your input data.');
    }
    c.resumeEvents();
  }
}, setTimeSpan:function(b, a) {
  this.reconfigure({start:b, end:a});
}, filterBy:function(b, a) {
  this.continuous = false;
  a = a || this;
  var c = this.tickStore;
  c.clearFilter(true);
  c.suspendEvents(true);
  c.filter([{filterFn:function(e, d) {
    return b.call(a, e.data, d);
  }}]);
  if (c.getCount() === 0) {
    Ext.Error.raise('Invalid time axis filter - no columns passed through the filter. Please check your filter method.');
    this.clearFilter();
  }
  c.resumeEvents();
}, isContinuous:function() {
  return this.continuous && !this.tickStore.isFiltered();
}, clearFilter:function() {
  this.continuous = this.originalContinuous;
  this.tickStore.clearFilter();
}, generateTicks:function(a, d, g, i) {
  var h = [], f, b = Sch.util.Date, e = 0;
  g = g || this.unit;
  i = i || this.increment;
  if (this.autoAdjust) {
    a = this.floorDate(a || this.getStart(), false);
    d = this.ceilDate(d || b.add(a, this.mainUnit, this.defaultSpan), false);
  }
  while (a < d) {
    f = this.getNext(a, g, i);
    if (g === b.HOUR && i > 1 && h.length > 0 && e === 0) {
      var c = h[h.length - 1];
      e = (c.start.getHours() + i) % 24 - c.end.getHours();
      if (e !== 0) {
        f = b.add(f, b.HOUR, e);
      }
    }
    h.push({start:a, end:f});
    a = f;
  }
  return h;
}, getTickFromDate:function(c) {
  if (this.getStart() > c || this.getEnd() < c) {
    return -1;
  }
  var f = this.tickStore.getRange(), e, a, d, b;
  for (d = 0, b = f.length; d < b; d++) {
    a = f[d].data.end;
    if (c <= a) {
      e = f[d].data.start;
      return d + (c > e ? (c - e) / (a - e) : 0);
    }
  }
  return -1;
}, getDateFromTick:function(d, f) {
  var g = this.tickStore.getCount();
  if (d === g) {
    return this.getEnd();
  }
  var a = Math.floor(d), e = d - a, c = this.getAt(a);
  var b = Sch.util.Date.add(c.start, Sch.util.Date.MILLI, e * (c.end - c.start));
  if (f) {
    b = this[f + 'Date'](b);
  }
  return b;
}, getAt:function(a) {
  return this.tickStore.getAt(a).data;
}, getCount:function() {
  return this.tickStore.getCount();
}, getTicks:function() {
  var a = [];
  this.tickStore.each(function(b) {
    a.push(b.data);
  });
  return a;
}, getStart:function() {
  return Ext.Date.clone(this.tickStore.first().data.start);
}, getEnd:function() {
  return Ext.Date.clone(this.tickStore.last().data.end);
}, roundDate:function(r) {
  var l = Ext.Date.clone(r), b = this.getStart(), s = this.resolutionIncrement;
  switch(this.resolutionUnit) {
    case Sch.util.Date.MILLI:
      var e = Sch.util.Date.getDurationInMilliseconds(b, l), d = Math.round(e / s) * s;
      l = Sch.util.Date.add(b, Sch.util.Date.MILLI, d);
      break;
    case Sch.util.Date.SECOND:
      var i = Sch.util.Date.getDurationInSeconds(b, l), q = Math.round(i / s) * s;
      l = Sch.util.Date.add(b, Sch.util.Date.MILLI, q * 1000);
      break;
    case Sch.util.Date.MINUTE:
      var n = Sch.util.Date.getDurationInMinutes(b, l), a = Math.round(n / s) * s;
      l = Sch.util.Date.add(b, Sch.util.Date.SECOND, a * 60);
      break;
    case Sch.util.Date.HOUR:
      var m = Sch.util.Date.getDurationInHours(this.getStart(), l), j = Math.round(m / s) * s;
      l = Sch.util.Date.add(b, Sch.util.Date.MINUTE, j * 60);
      break;
    case Sch.util.Date.DAY:
      var c = Sch.util.Date.getDurationInDays(b, l), f = Math.round(c / s) * s;
      l = Sch.util.Date.add(b, Sch.util.Date.DAY, f);
      break;
    case Sch.util.Date.WEEK:
      Ext.Date.clearTime(l);
      var o = l.getDay() - this.weekStartDay, t;
      if (o < 0) {
        o = 7 + o;
      }
      if (Math.round(o / 7) === 1) {
        t = 7 - o;
      } else {
        t = -o;
      }
      l = Sch.util.Date.add(l, Sch.util.Date.DAY, t);
      break;
    case Sch.util.Date.MONTH:
      var p = Sch.util.Date.getDurationInMonths(b, l) + l.getDate() / Ext.Date.getDaysInMonth(l), h = Math.round(p / s) * s;
      l = Sch.util.Date.add(b, Sch.util.Date.MONTH, h);
      break;
    case Sch.util.Date.QUARTER:
      Ext.Date.clearTime(l);
      l.setDate(1);
      l = Sch.util.Date.add(l, Sch.util.Date.MONTH, 3 - l.getMonth() % 3);
      break;
    case Sch.util.Date.YEAR:
      var k = Sch.util.Date.getDurationInYears(b, l), g = Math.round(k / s) * s;
      l = Sch.util.Date.add(b, Sch.util.Date.YEAR, g);
      break;
  }
  return l;
}, floorDate:function(t, d, v) {
  d = d !== false;
  var n = Ext.Date.clone(t), b = d ? this.getStart() : null, u = this.resolutionIncrement, k;
  if (v) {
    k = v;
  } else {
    k = d ? this.resolutionUnit : this.mainUnit;
  }
  switch(k) {
    case Sch.util.Date.MILLI:
      if (d) {
        var f = Sch.util.Date.getDurationInMilliseconds(b, n), e = Math.floor(f / u) * u;
        n = Sch.util.Date.add(b, Sch.util.Date.MILLI, e);
      }
      break;
    case Sch.util.Date.SECOND:
      if (d) {
        var j = Sch.util.Date.getDurationInSeconds(b, n), s = Math.floor(j / u) * u;
        n = Sch.util.Date.add(b, Sch.util.Date.MILLI, s * 1000);
      } else {
        n.setMilliseconds(0);
      }
      break;
    case Sch.util.Date.MINUTE:
      if (d) {
        var p = Sch.util.Date.getDurationInMinutes(b, n), a = Math.floor(p / u) * u;
        n = Sch.util.Date.add(b, Sch.util.Date.SECOND, a * 60);
      } else {
        n.setSeconds(0);
        n.setMilliseconds(0);
      }
      break;
    case Sch.util.Date.HOUR:
      if (d) {
        var o = Sch.util.Date.getDurationInHours(this.getStart(), n), l = Math.floor(o / u) * u;
        n = Sch.util.Date.add(b, Sch.util.Date.MINUTE, l * 60);
      } else {
        n.setMinutes(0);
        n.setSeconds(0);
        n.setMilliseconds(0);
      }
      break;
    case Sch.util.Date.DAY:
      if (d) {
        var c = Sch.util.Date.getDurationInDays(b, n), g = Math.floor(c / u) * u;
        n = Sch.util.Date.add(b, Sch.util.Date.DAY, g);
      } else {
        Ext.Date.clearTime(n);
      }
      break;
    case Sch.util.Date.WEEK:
      var r = n.getDay();
      Ext.Date.clearTime(n);
      if (r !== this.weekStartDay) {
        n = Sch.util.Date.add(n, Sch.util.Date.DAY, -(r > this.weekStartDay ? r - this.weekStartDay : 7 - r - this.weekStartDay));
      }
      break;
    case Sch.util.Date.MONTH:
      if (d) {
        var q = Sch.util.Date.getDurationInMonths(b, n), i = Math.floor(q / u) * u;
        n = Sch.util.Date.add(b, Sch.util.Date.MONTH, i);
      } else {
        Ext.Date.clearTime(n);
        n.setDate(1);
      }
      break;
    case Sch.util.Date.QUARTER:
      Ext.Date.clearTime(n);
      n.setDate(1);
      n = Sch.util.Date.add(n, Sch.util.Date.MONTH, -(n.getMonth() % 3));
      break;
    case Sch.util.Date.YEAR:
      if (d) {
        var m = Sch.util.Date.getDurationInYears(b, n), h = Math.floor(m / u) * u;
        n = Sch.util.Date.add(b, Sch.util.Date.YEAR, h);
      } else {
        n = new Date(t.getFullYear(), 0, 1);
      }
      break;
  }
  return n;
}, ceilDate:function(c, b, f) {
  var e = Ext.Date.clone(c);
  b = b !== false;
  var a = b ? this.resolutionIncrement : 1, g = false, d;
  if (f) {
    d = f;
  } else {
    d = b ? this.resolutionUnit : this.mainUnit;
  }
  switch(d) {
    case Sch.util.Date.DAY:
      if (e.getMinutes() > 0 || e.getSeconds() > 0 || e.getMilliseconds() > 0) {
        g = true;
      }
      break;
    case Sch.util.Date.WEEK:
      Ext.Date.clearTime(e);
      if (e.getDay() !== this.weekStartDay) {
        g = true;
      }
      break;
    case Sch.util.Date.MONTH:
      Ext.Date.clearTime(e);
      if (e.getDate() !== 1) {
        g = true;
      }
      break;
    case Sch.util.Date.QUARTER:
      Ext.Date.clearTime(e);
      if (e.getMonth() % 3 !== 0) {
        g = true;
      }
      break;
    case Sch.util.Date.YEAR:
      Ext.Date.clearTime(e);
      if (e.getMonth() !== 0 && e.getDate() !== 1) {
        g = true;
      }
      break;
    default:
      break;
  }
  if (g) {
    return this.getNext(e, d, a);
  } else {
    return e;
  }
}, getNext:function(b, c, a) {
  return Sch.util.Date.getNext(b, c, a, this.weekStartDay);
}, getResolution:function() {
  return {unit:this.resolutionUnit, increment:this.resolutionIncrement};
}, setResolution:function(b, a) {
  this.resolutionUnit = b;
  this.resolutionIncrement = a || 1;
}, shiftNext:function(a) {
  a = a || this.getShiftIncrement();
  var b = this.getShiftUnit();
  this.setTimeSpan(Sch.util.Date.add(this.getStart(), b, a), Sch.util.Date.add(this.getEnd(), b, a));
}, shiftPrevious:function(a) {
  a = -(a || this.getShiftIncrement());
  var b = this.getShiftUnit();
  this.setTimeSpan(Sch.util.Date.add(this.getStart(), b, a), Sch.util.Date.add(this.getEnd(), b, a));
}, getShiftUnit:function() {
  return this.shiftUnit || this.getMainUnit();
}, getShiftIncrement:function() {
  return this.shiftIncrement || 1;
}, getUnit:function() {
  return this.unit;
}, getIncrement:function() {
  return this.increment;
}, timeSpanInAxis:function(b, a) {
  if (this.continuous) {
    return Sch.util.Date.intersectSpans(b, a, this.getStart(), this.getEnd());
  } else {
    return a > b && this.getTickFromDate(b) !== this.getTickFromDate(a);
  }
}, forEachInterval:function(b, a, c) {
  c = c || this;
  if (b === 'top' || b === 'middle' && this.headerConfig.bottom) {
    this.forEachAuxInterval(b, a, c);
  } else {
    this.tickStore.each(function(e, d) {
      return a.call(c, e.data.start, e.data.end, d);
    });
  }
}, forEachMainInterval:function(a, b) {
  this.forEachInterval('middle', a, b);
}, forEachAuxInterval:function(b, a, f) {
  f = f || this;
  var c = this.getEnd(), g = this.getStart(), e = 0, d;
  while (g < c) {
    d = Sch.util.Date.min(this.getNext(g, this.headerConfig[b].unit, this.headerConfig[b].increment || 1), c);
    a.call(f, g, d, e);
    g = d;
    e++;
  }
}});
Ext.define('Sch.preset.Manager', {extend:'Ext.util.MixedCollection', requires:['Sch.util.Date', 'Sch.util.HeaderRenderers'], singleton:true, constructor:function() {
  this.callParent(arguments);
  this.registerDefaults();
}, registerPreset:function(b, a) {
  if (a) {
    var c = a.headerConfig;
    var d = Sch.util.Date;
    for (var e in c) {
      if (c.hasOwnProperty(e)) {
        if (d[c[e].unit]) {
          c[e].unit = d[c[e].unit.toUpperCase()];
        }
      }
    }
    if (!a.timeColumnWidth) {
      a.timeColumnWidth = 50;
    }
    if (a.timeResolution && d[a.timeResolution.unit]) {
      a.timeResolution.unit = d[a.timeResolution.unit.toUpperCase()];
    }
    if (a.shiftUnit && d[a.shiftUnit]) {
      a.shiftUnit = d[a.shiftUnit.toUpperCase()];
    }
  }
  if (this.isValidPreset(a)) {
    if (this.containsKey(b)) {
      this.removeAtKey(b);
    }
    this.add(b, a);
  } else {
    throw 'Invalid preset, please check your configuration';
  }
}, isValidPreset:function(a) {
  var d = Sch.util.Date, b = true, c = Sch.util.Date.units;
  for (var e in a.headerConfig) {
    if (a.headerConfig.hasOwnProperty(e)) {
      b = b && Ext.Array.indexOf(c, a.headerConfig[e].unit) >= 0;
    }
  }
  if (a.timeResolution) {
    b = b && Ext.Array.indexOf(c, a.timeResolution.unit) >= 0;
  }
  if (a.shiftUnit) {
    b = b && Ext.Array.indexOf(c, a.shiftUnit) >= 0;
  }
  return b;
}, getPreset:function(a) {
  return this.get(a);
}, deletePreset:function(a) {
  this.removeAtKey(a);
}, registerDefaults:function() {
  var b = this, a = this.defaultPresets;
  for (var c in a) {
    b.registerPreset(c, a[c]);
  }
}, defaultPresets:{minuteAndHour:{timeColumnWidth:100, rowHeight:24, resourceColumnWidth:100, displayDateFormat:'G:i', shiftIncrement:1, shiftUnit:'HOUR', defaultSpan:24, timeResolution:{unit:'MINUTE', increment:30}, headerConfig:{middle:{unit:'MINUTE', increment:'30', dateFormat:'i'}, top:{unit:'HOUR', dateFormat:'D, GA/m'}}}, hourAndDay:{timeColumnWidth:60, rowHeight:24, resourceColumnWidth:100, displayDateFormat:'G:i', shiftIncrement:1, shiftUnit:'DAY', defaultSpan:24, timeResolution:{unit:'MINUTE', 
increment:30}, headerConfig:{middle:{unit:'HOUR', dateFormat:'G:i'}, top:{unit:'DAY', dateFormat:'D d/m'}}}, dayAndWeek:{timeColumnWidth:100, rowHeight:24, resourceColumnWidth:100, displayDateFormat:'Y-m-d G:i', shiftUnit:'DAY', shiftIncrement:1, defaultSpan:5, timeResolution:{unit:'HOUR', increment:1}, headerConfig:{middle:{unit:'DAY', dateFormat:'D d M'}, top:{unit:'WEEK', dateFormat:'W M Y', renderer:function(c, b, a) {
  return Sch.util.Date.getShortNameOfUnit('WEEK') + '.' + Ext.Date.format(c, 'W M Y');
}}}}, weekAndDay:{timeColumnWidth:100, rowHeight:24, resourceColumnWidth:100, displayDateFormat:'G:i', shiftIncrement:1, shiftUnit:'HOUR', defaultSpan:24, timeResolution:{unit:'MINUTE', increment:30}, headerConfig:{middle:{unit:'MINUTE', increment:'30', dateFormat:'i'}, top:{unit:'HOUR', dateFormat:'D, GA/m'}}}, hourAndDay:{timeColumnWidth:60, rowHeight:24, resourceColumnWidth:100, displayDateFormat:'G:i', shiftIncrement:1, shiftUnit:'DAY', defaultSpan:24, timeResolution:{unit:'MINUTE', increment:30}, 
headerConfig:{middle:{unit:'HOUR', dateFormat:'G:i'}, top:{unit:'DAY', dateFormat:'D d/m'}}}, dayAndWeek:{timeColumnWidth:100, rowHeight:24, resourceColumnWidth:100, displayDateFormat:'Y-m-d G:i', shiftUnit:'DAY', shiftIncrement:1, defaultSpan:5, timeResolution:{unit:'HOUR', increment:1}, headerConfig:{middle:{unit:'DAY', dateFormat:'D d M'}, top:{unit:'WEEK', dateFormat:'W M Y', renderer:function(c, b, a) {
  return Sch.util.Date.getShortNameOfUnit('WEEK') + '.' + Ext.Date.format(c, 'W M Y');
}}}}, weekAndDay:{timeColumnWidth:100, rowHeight:24, resourceColumnWidth:100, displayDateFormat:'Y-m-d', shiftUnit:'WEEK', shiftIncrement:1, defaultSpan:1, timeResolution:{unit:'DAY', increment:1}, headerConfig:{bottom:{unit:'DAY', increment:1, dateFormat:'d/m'}, middle:{unit:'WEEK', dateFormat:'D d M', align:'left'}}}, weekAndMonth:{timeColumnWidth:100, rowHeight:24, resourceColumnWidth:100, displayDateFormat:'Y-m-d', shiftUnit:'WEEK', shiftIncrement:5, defaultSpan:6, timeResolution:{unit:'DAY', 
increment:1}, headerConfig:{middle:{unit:'WEEK', renderer:function(c, b, a) {
  a.align = 'left';
  return Ext.Date.format(c, 'd M');
}}, top:{unit:'MONTH', dateFormat:'M Y'}}}, monthAndYear:{timeColumnWidth:110, rowHeight:24, resourceColumnWidth:100, displayDateFormat:'Y-m-d', shiftIncrement:3, shiftUnit:'MONTH', defaultSpan:12, timeResolution:{unit:'DAY', increment:1}, headerConfig:{middle:{unit:'MONTH', dateFormat:'M Y'}, top:{unit:'YEAR', dateFormat:'Y'}}}, year:{timeColumnWidth:100, rowHeight:24, resourceColumnWidth:100, displayDateFormat:'Y-m-d', shiftUnit:'YEAR', shiftIncrement:1, defaultSpan:1, timeResolution:{unit:'MONTH', 
increment:1}, headerConfig:{bottom:{unit:'QUARTER', renderer:function(c, b, a) {
  return Ext.String.format(Sch.util.Date.getShortNameOfUnit('QUARTER').toUpperCase() + '{0}', Math.floor(c.getMonth() / 3) + 1);
}}, middle:{unit:'YEAR', dateFormat:'Y'}}}, weekAndDayLetter:{timeColumnWidth:20, rowHeight:24, resourceColumnWidth:100, displayDateFormat:'Y-m-d', shiftUnit:'WEEK', shiftIncrement:1, defaultSpan:10, timeResolution:{unit:'DAY', increment:1}, headerConfig:{bottom:{unit:'DAY', increment:1, renderer:function(a) {
  return Ext.Date.dayNames[a.getDay()].substring(0, 1);
}}, middle:{unit:'WEEK', dateFormat:'D d M Y', align:'left'}}}, weekDateAndMonth:{timeColumnWidth:30, rowHeight:24, resourceColumnWidth:100, displayDateFormat:'Y-m-d', shiftUnit:'WEEK', shiftIncrement:1, defaultSpan:10, timeResolution:{unit:'DAY', increment:1}, headerConfig:{middle:{unit:'WEEK', dateFormat:'d'}, top:{unit:'MONTH', dateFormat:'Y F', align:'left'}}}}});
Ext.define('Sch.feature.AbstractTimeSpan', {extend:'Ext.AbstractPlugin', lockableScope:'normal', schedulerView:null, timeAxis:null, containerEl:null, expandToFitView:false, disabled:false, cls:null, template:null, store:null, renderElementsBuffered:false, renderDelay:15, constructor:function(a) {
  this.uniqueCls = this.uniqueCls || 'sch-timespangroup-' + Ext.id();
  Ext.apply(this, a);
}, setDisabled:function(a) {
  if (a) {
    this.removeElements();
  }
  this.disabled = a;
}, getElements:function() {
  if (this.containerEl) {
    return this.containerEl.select('.' + this.uniqueCls);
  }
  return null;
}, removeElements:function() {
  var a = this.getElements();
  if (a) {
    a.remove();
  }
}, init:function(a) {
  this.timeAxis = a.getTimeAxis();
  this.schedulerView = a.getSchedulingView();
  if (!this.store) {
    Ext.Error.raise('Error: You must define a store for this plugin');
  }
  this.schedulerView.on({afterrender:this.onAfterRender, destroy:this.onDestroy, scope:this});
}, onAfterRender:function(b) {
  var a = this.schedulerView;
  this.containerEl = a.el;
  a.mon(this.store, {load:this.renderElements, datachanged:this.renderElements, clear:this.renderElements, add:this.renderElements, remove:this.renderElements, update:this.refreshSingle, scope:this});
  if (Ext.data.NodeStore && a.store instanceof Ext.data.NodeStore) {
    if (a.animate) {
    } else {
      a.mon(a.store, {expand:this.renderElements, collapse:this.renderElements, scope:this});
    }
  }
  a.on({refresh:this.renderElements, itemadd:this.renderElements, itemremove:this.renderElements, itemupdate:this.renderElements, groupexpand:this.renderElements, groupcollapse:this.renderElements, columnwidthchange:this.renderElements, resize:this.renderElements, scope:this});
  a.headerCt.on({add:this.renderElements, remove:this.renderElements, scope:this});
  a.ownerCt.up('panel').on({viewchange:this.renderElements, orientationchange:this.renderElements, scope:this});
  this.renderElements();
}, renderElements:function() {
  if (this.renderElementsBuffered || this.disabled || this.schedulerView.headerCt.getColumnCount() === 0) {
    return;
  }
  this.renderElementsBuffered = true;
  Ext.Function.defer(this.renderElementsInternal, this.renderDelay, this);
}, renderElementsInternal:function() {
  this.renderElementsBuffered = false;
  if (this.disabled || this.schedulerView.isDestroyed || this.schedulerView.headerCt.getColumnCount() === 0) {
    return;
  }
  this.removeElements();
  var c = this.timeAxis.getStart(), a = this.timeAxis.getEnd(), b = this.getElementData(c, a);
  this.template.insertFirst(this.containerEl, b);
}, getElementData:function(b, a) {
  throw 'Abstract method call';
}, onDestroy:function() {
  if (this.store.autoDestroy) {
    this.store.destroy();
  }
}, refreshSingle:function(c, b) {
  var e = Ext.get(this.uniqueCls + '-' + b.internalId);
  if (e) {
    var g = this.timeAxis.getStart(), a = this.timeAxis.getEnd(), f = this.getElementData(g, a, [b])[0], d = b.clsField || 'Cls';
    e.dom.className = this.cls + ' ' + this.uniqueCls + ' ' + (f[d] || '');
    e.setTop(f.top);
    e.setLeft(f.left);
    e.setSize(f.width, f.height);
  } else {
    this.renderElements();
  }
}});
Ext.define('Sch.plugin.Lines', {extend:'Sch.feature.AbstractTimeSpan', cls:'sch-timeline', showTip:true, innerTpl:null, init:function(b) {
  this.callParent(arguments);
  var a = this.schedulerView;
  if (Ext.isString(this.innerTpl)) {
    this.innerTpl = new Ext.XTemplate(this.innerTpl);
  }
  var c = this.innerTpl;
  if (!this.template) {
    this.template = new Ext.XTemplate('\x3ctpl for\x3d"."\x3e', '\x3cdiv id\x3d"' + this.uniqueCls + '-{id}"' + (this.showTip ? 'title\x3d"{[this.getTipText(values)]}" ' : '') + 'class\x3d"' + this.cls + ' ' + this.uniqueCls + ' {Cls}" style\x3d"left:{left}px;top:{top}px;height:{height}px;width:{width}px"\x3e' + (c ? '{[this.renderInner(values)]}' : '') + '\x3c/div\x3e', '\x3c/tpl\x3e', {getTipText:function(d) {
      return a.getFormattedDate(d.Date) + ' ' + (d.Text || '');
    }, renderInner:function(d) {
      return c.apply(d);
    }});
  }
}, getElementData:function(k, n, d) {
  var p = this.store, j = this.schedulerView, f = d || p.getRange(), h = [], o = this.containerEl.lastBox ? this.containerEl.lastBox.height : this.containerEl.getHeight(), a, c, m, b;
  for (var g = 0, e = f.length; g < e; g++) {
    a = f[g];
    c = a.get('Date');
    if (c && Ext.Date.between(c, k, n)) {
      m = j.getTimeSpanRegion(c, null, this.expandToFitView);
      h[h.length] = Ext.apply({id:a.internalId, left:m.left, top:m.top, width:Math.max(1, m.right - m.left), height:m.bottom - m.top}, a.data);
    }
  }
  return h;
}});
Ext.define('Sch.plugin.Zones', {extend:'Sch.feature.AbstractTimeSpan', innerTpl:null, requires:['Sch.model.Range'], cls:'sch-zone', init:function(a) {
  if (Ext.isString(this.innerTpl)) {
    this.innerTpl = new Ext.XTemplate(this.innerTpl);
  }
  var b = this.innerTpl;
  if (!this.template) {
    this.template = new Ext.XTemplate('\x3ctpl for\x3d"."\x3e\x3cdiv id\x3d"' + this.uniqueCls + '-{id}" class\x3d"' + this.cls + ' ' + this.uniqueCls + ' {Cls}" style\x3d"left:{left}px;top:{top}px;height:{height}px;width:{width}px"\x3e' + (b ? '{[this.renderInner(values)]}' : '') + '\x3c/div\x3e\x3c/tpl\x3e', {renderInner:function(c) {
      return b.apply(c);
    }});
  }
  this.callParent(arguments);
}, getElementData:function(j, n, c) {
  var o = this.store, h = this.schedulerView, e = c || o.getRange(), g = [], a, m, b, k;
  for (var f = 0, d = e.length; f < d; f++) {
    a = e[f];
    m = a.getStartDate();
    b = a.getEndDate();
    if (m && b && Sch.util.Date.intersectSpans(m, b, j, n)) {
      k = h.getTimeSpanRegion(Sch.util.Date.max(m, j), Sch.util.Date.min(b, n), this.expandToFitView);
      g[g.length] = Ext.apply({id:a.internalId, left:k.left, top:k.top, width:k.right - k.left, height:k.bottom - k.top, Cls:a.getCls()}, a.data);
    }
  }
  return g;
}});
Ext.define('Sch.plugin.Pan', {alias:'plugin.pan', extend:'Ext.AbstractPlugin', lockableScope:'normal', enableVerticalPan:true, panel:null, constructor:function(a) {
  Ext.apply(this, a);
}, init:function(a) {
  this.panel = a.normalGrid || a;
  this.view = a.getSchedulingView();
  this.view.on('afterrender', this.onRender, this);
}, onRender:function(a) {
  this.view.el.on('mousedown', this.onMouseDown, this, {delegate:'.' + this.view.timeCellCls});
}, onMouseDown:function(b, a) {
  if (b.getTarget('.' + this.view.timeCellCls) && !b.getTarget(this.view.eventSelector)) {
    this.mouseX = b.getPageX();
    this.mouseY = b.getPageY();
    Ext.getBody().on('mousemove', this.onMouseMove, this);
    Ext.getDoc().on('mouseup', this.onMouseUp, this);
  }
}, onMouseMove:function(d) {
  d.stopEvent();
  var a = d.getPageX(), f = d.getPageY(), c = a - this.mouseX, b = f - this.mouseY;
  this.panel.scrollByDeltaX(-c);
  this.mouseX = a;
  this.mouseY = f;
  if (this.enableVerticalPan) {
    this.panel.scrollByDeltaY(-b);
  }
}, onMouseUp:function(a) {
  Ext.getBody().un('mousemove', this.onMouseMove, this);
  Ext.getDoc().un('mouseup', this.onMouseUp, this);
}});
Ext.define('Sch.view.Locking', {extend:'Ext.grid.LockingView', scheduleEventRelayRe:/^(schedule|event|beforeevent|afterevent|dragcreate|beforedragcreate|afterdragcreate|beforetooltipshow)/, constructor:function(b) {
  this.callParent(arguments);
  var e = this, g = [], a = e.scheduleEventRelayRe, f = b.normal.getView(), c = f.events, d;
  for (d in c) {
    if (c.hasOwnProperty(d) && a.test(d)) {
      g.push(d);
    }
  }
  e.relayEvents(f, g);
}, getElementFromEventRecord:function(a) {
  return this.normal.getView().getElementFromEventRecord(a);
}, onClear:function() {
  this.relayFn('onClear', arguments);
}, beginBulkUpdate:function() {
  this.relayFn('beginBulkUpdate', arguments);
}, endBulkUpdate:function() {
  this.relayFn('endBulkUpdate', arguments);
}, refreshKeepingScroll:function() {
  this.locked.getView().refresh();
  this.normal.getView().refreshKeepingScroll();
}});
Ext.define('Sch.column.Time', {extend:'Ext.grid.column.Column', alias:'timecolumn', draggable:false, groupable:false, hideable:false, sortable:false, fixed:true, align:'center', tdCls:'sch-timetd', menuDisabled:true, initComponent:function() {
  this.addEvents('timeheaderdblclick');
  this.enableBubble('timeheaderdblclick');
  this.callParent();
}, initRenderData:function() {
  var a = this;
  a.renderData.headerCls = a.renderData.headerCls || a.headerCls;
  return a.callParent(arguments);
}, onElDblClick:function(b, a) {
  this.callParent(arguments);
  this.fireEvent('timeheaderdblclick', this, this.startDate, this.endDate, b);
}}, function() {
  Sch.column.Time.prototype.renderTpl = Sch.column.Time.prototype.renderTpl.replace('column-header-inner', 'column-header-inner sch-timeheader {headerCls}');
});
Ext.define('Sch.column.timeAxis.Horizontal', {extend:'Ext.grid.column.Column', alias:'widget.timeaxiscolumn', requires:['Ext.Date', 'Ext.XTemplate', 'Sch.column.Time', 'Sch.preset.Manager'], cls:'sch-timeaxiscolumn', timeAxis:null, renderTpl:'\x3cdiv id\x3d"{id}-titleEl" class\x3d"' + Ext.baseCSSPrefix + 'column-header-inner"\x3e\x3cspan id\x3d"{id}-textEl" style\x3d"display:none" class\x3d"' + Ext.baseCSSPrefix + 'column-header-text"\x3e\x3c/span\x3e\x3ctpl if\x3d"topHeaderCells"\x3e{topHeaderCells}\x3c/tpl\x3e\x3ctpl if\x3d"middleHeaderCells"\x3e{middleHeaderCells}\x3c/tpl\x3e\x3c/div\x3e{%this.renderContainer(out,values)%}', 
headerRowTpl:'\x3ctable border\x3d"0" cellspacing\x3d"0" cellpadding\x3d"0" style\x3d"{tstyle}" class\x3d"sch-header-row sch-header-row-{position}"\x3e\x3cthead\x3e\x3ctr\x3e{cells}\x3c/tr\x3e\x3c/thead\x3e\x3c/table\x3e', headerCellTpl:'\x3ctpl for\x3d"."\x3e\x3ctd class\x3d"sch-column-header x-column-header {headerCls}" style\x3d"position : static; text-align: {align}; {style}" tabIndex\x3d"0" id\x3d"{headerId}" headerPosition\x3d"{position}" headerIndex\x3d"{index}"\x3e\x3cdiv class\x3d"x-column-header-inner"\x3e{header}\x3c/div\x3e\x3c/td\x3e\x3c/tpl\x3e', 
columnConfig:{}, timeCellRenderer:null, timeCellRendererScope:null, columnWidth:null, previousWidth:null, previousHeight:null, initComponent:function() {
  if (!(this.headerRowTpl instanceof Ext.Template)) {
    this.headerRowTpl = Ext.create('Ext.XTemplate', this.headerRowTpl);
  }
  if (!(this.headerCellTpl instanceof Ext.Template)) {
    this.headerCellTpl = Ext.create('Ext.XTemplate', this.headerCellTpl);
  }
  this.columns = [{}];
  this.addEvents('timeheaderdblclick', 'timeaxiscolumnreconfigured');
  this.enableBubble('timeheaderdblclick');
  this.stubForResizer = new Ext.Component({isOnLeftEdge:function() {
    return false;
  }, isOnRightEdge:function() {
    return false;
  }, el:{dom:{style:{}}}});
  this.callParent(arguments);
  this.onTimeAxisReconfigure();
  this.mon(this.timeAxis, 'reconfigure', this.onTimeAxisReconfigure, this);
}, getSchedulingView:function() {
  return this.getOwnerHeaderCt().view;
}, onTimeAxisReconfigure:function() {
  var e = this.timeAxis, d = e.preset.timeColumnWidth, f = this.rendered && this.getSchedulingView(), g = e.headerConfig, b = e.getStart(), c = e.getEnd(), h = {renderer:this.timeColumnRenderer, scope:this, width:this.rendered ? f.calculateTimeColumnWidth(d) : d};
  delete this.previousWidth;
  delete this.previousHeight;
  var j = this.columnConfig = this.createColumns(this.timeAxis, g, h);
  Ext.suspendLayouts();
  this.removeAll();
  if (this.rendered) {
    var a = this.el.child('.x-column-header-inner');
    a.select('table').remove();
    var i = this.initRenderData();
    if (j.top) {
      Ext.core.DomHelper.append(a, i.topHeaderCells);
    }
    if (j.middle) {
      Ext.core.DomHelper.append(a, i.middleHeaderCells);
    }
    if (!j.top && !j.middle) {
      this.addCls('sch-header-single-row');
    } else {
      this.removeCls('sch-header-single-row');
    }
  }
  Ext.resumeLayouts();
  this.add(j.bottom);
  if (this.rendered) {
    if (this.fireEvent('timeaxiscolumnreconfigured', this) !== false) {
      f.refresh();
    }
  }
}, beforeRender:function() {
  var a = this.columnConfig;
  if (!a.middle && !a.top) {
    this.addCls('sch-header-single-row');
  }
  this.callParent(arguments);
}, timeColumnRenderer:function(i, e, f, l, d, c, k) {
  var a = '';
  if (Ext.isIE) {
    e.style += ';z-index:' + (this.items.getCount() - d);
  }
  if (this.timeCellRenderer) {
    var h = this.timeAxis, b = h.getAt(d), g = b.start, j = b.end;
    a = this.timeCellRenderer.call(this.timeCellRendererScope || this, e, f, l, d, c, g, j);
  }
  return a;
}, initRenderData:function() {
  var a = this.columnConfig;
  var c = a.top ? this.headerRowTpl.apply({cells:this.headerCellTpl.apply(a.top), position:'top', tstyle:'border-top : 0; width : 100px'}) : '';
  var b = a.middle ? this.headerRowTpl.apply({cells:this.headerCellTpl.apply(a.middle), position:'middle', tstyle:a.top ? 'width : 100px' : 'border-top : 0; width : 100px'}) : '';
  return Ext.apply(this.callParent(arguments), {topHeaderCells:c, middleHeaderCells:b});
}, defaultRenderer:function(c, b, a) {
  return Ext.Date.format(c, a);
}, createColumns:function(f, d, g) {
  if (!f || !d) {
    throw 'Invalid parameters passed to createColumns';
  }
  var c = [], a = d.bottom || d.middle, h, e = this;
  f.forEachInterval(d.bottom ? 'bottom' : 'middle', function(l, j, k) {
    h = {align:a.align || 'center', headerCls:'', startDate:l, endDate:j};
    if (a.renderer) {
      h.header = a.renderer.call(a.scope || e, l, j, h, k);
    } else {
      h.header = e.defaultRenderer(l, j, a.dateFormat);
    }
    c[c.length] = Ext.create('Sch.column.Time', Ext.apply(h, g));
  });
  var b = this.createHeaderRows(f, d);
  return {bottom:c, middle:b.middle, top:b.top};
}, createHeaderRows:function(e, c) {
  var d = {};
  if (c.top) {
    var a;
    if (c.top.cellGenerator) {
      a = c.top.cellGenerator.call(this, e.getStart(), e.getEnd());
    } else {
      a = this.createHeaderRow(e, c.top);
    }
    d.top = this.processHeaderRow(a, 'top');
  }
  if (c.bottom) {
    var b;
    if (c.middle.cellGenerator) {
      b = c.middle.cellGenerator.call(this, e.getStart(), e.getEnd());
    } else {
      b = this.createHeaderRow(e, c.middle);
    }
    d.middle = this.processHeaderRow(b, 'middle');
  }
  return d;
}, processHeaderRow:function(c, a) {
  var b = this;
  Ext.each(c, function(d, e) {
    d.index = e;
    d.position = a;
    d.headerId = b.stubForResizer.id;
  });
  return c;
}, createHeaderRow:function(e, k) {
  var n = [], l, a = e.getStart(), c = e.getEnd(), m = c - a, j = [], b = a, d = 0, f, g = k.align || 'center', h;
  while (b < c) {
    h = Sch.util.Date.min(e.getNext(b, k.unit, k.increment || 1), c);
    l = {align:g, start:b, end:h, headerCls:''};
    if (k.renderer) {
      l.header = k.renderer.call(k.scope || this, b, h, l, d);
    } else {
      l.header = this.defaultRenderer(b, h, k.dateFormat, l, d);
    }
    n.push(l);
    b = h;
    d++;
  }
  return n;
}, afterLayout:function() {
  delete this.columnWidth;
  this.callParent(arguments);
  var b = this.getWidth();
  var g = this.getHeight();
  if (b === this.previousWidth && g === this.previousHeight) {
    return;
  }
  this.previousWidth = b;
  this.previousHeight = g;
  var i = this.columnConfig;
  var e = this;
  var c = this.el;
  var f = i.top;
  var d = 0;
  var a = 0;
  if (f) {
    c.select('.sch-header-row-top').setWidth(this.lastBox.width);
    c.select('.sch-header-row-top td').each(function(l, m, j) {
      var k = e.getHeaderGroupCellWidth(f[j].start, f[j].end);
      l.setVisibilityMode(Ext.Element.DISPLAY);
      if (k) {
        d += k;
        l.show();
        l.setWidth(k);
      } else {
        l.hide();
      }
    });
  }
  var h = i.middle;
  if (h) {
    c.select('.sch-header-row-middle').setWidth(this.lastBox.width);
    c.select('.sch-header-row-middle td').each(function(l, m, j) {
      var k = e.getHeaderGroupCellWidth(h[j].start, h[j].end);
      l.setVisibilityMode(Ext.Element.DISPLAY);
      if (k) {
        a += k;
        l.show();
        l.setWidth(k);
      } else {
        l.hide();
      }
    });
  }
}, getHeaderGroupCellWidth:function(h, b) {
  var e = this.timeAxis.unit, d = this.timeAxis.increment, c, g = Sch.util.Date.getMeasuringUnit(e), a = Sch.util.Date.getDurationInUnit(h, b, g), f = this.getSchedulingView();
  if (this.timeAxis.isContinuous()) {
    c = a * f.getSingleUnitInPixels(g);
  } else {
    c = f.getXYFromDate(b)[0] - f.getXYFromDate(h)[0];
  }
  return c;
}, onElDblClick:function(d, f) {
  this.callParent(arguments);
  var e = d.getTarget('.sch-column-header');
  if (e) {
    var a = Ext.fly(e).getAttribute('headerPosition'), b = Ext.fly(e).getAttribute('headerIndex'), c = this.columnConfig[a][b];
    this.fireEvent('timeheaderdblclick', this, c.start, c.end, d);
  }
}, getTimeColumnWidth:function() {
  if (this.columnWidth === null) {
    this.columnWidth = this.items.get(0).getWidth();
  }
  return this.columnWidth;
}, setTimeColumnWidth:function(a) {
  this.suspendEvents();
  this.items.each(function(b) {
    b.setWidth(a);
  });
  this.resumeEvents();
}});
Ext.define('Sch.column.timeAxis.HorizontalSingle', {extend:'Sch.column.Time', alias:'widget.singletimeaxiscolumn', requires:['Ext.Date', 'Ext.XTemplate', 'Sch.preset.Manager'], cls:'sch-simple-timeaxis', timeAxis:null, trackHeaderOver:true, compactCellWidthThreshold:16, renderTpl:'\x3cdiv id\x3d"{id}-titleEl" class\x3d"' + Ext.baseCSSPrefix + 'column-header-inner"\x3e\x3cspan id\x3d"{id}-textEl" style\x3d"display:none" class\x3d"' + Ext.baseCSSPrefix + 'column-header-text"\x3e\x3c/span\x3e\x3ctpl if\x3d"topHeaderCells"\x3e{topHeaderCells}\x3c/tpl\x3e\x3ctpl if\x3d"middleHeaderCells"\x3e{middleHeaderCells}\x3c/tpl\x3e\x3ctpl if\x3d"bottomHeaderCells"\x3e{bottomHeaderCells}\x3c/tpl\x3e\x3c/div\x3e{%this.renderContainer(out,values)%}', 
headerRowTpl:'\x3ctable border\x3d"0" cellspacing\x3d"0" cellpadding\x3d"0" style\x3d"{tstyle}" class\x3d"sch-header-row sch-header-row-{position}"\x3e\x3cthead\x3e\x3ctr\x3e\x3ctpl for\x3d"cells"\x3e\x3ctd class\x3d"sch-column-header x-column-header {headerCls}" style\x3d"position : static; text-align: {align}; {style}" tabIndex\x3d"0" id\x3d"{headerId}" headerPosition\x3d"{parent.position}" headerIndex\x3d"{[xindex-1]}"\x3e\x3cdiv class\x3d"sch-simple-timeheader"\x3e{header}\x3c/div\x3e\x3c/td\x3e\x3c/tpl\x3e\x3c/tr\x3e\x3c/thead\x3e\x3c/table\x3e', 
columnConfig:{}, columnWidth:null, nbrTimeColumns:null, initComponent:function() {
  this.tdCls += ' sch-singletimetd';
  if (!(this.headerRowTpl instanceof Ext.Template)) {
    this.headerRowTpl = Ext.create('Ext.XTemplate', this.headerRowTpl);
  }
  this.addEvents('timeheaderdblclick', 'timeaxiscolumnreconfigured');
  this.enableBubble('timeheaderdblclick');
  this.callParent(arguments);
  this.onTimeAxisReconfigure();
  this.mon(this.timeAxis, 'reconfigure', this.onTimeAxisReconfigure, this);
  this.on('resize', this.refreshHeaderSizes, this);
  this.ownHoverCls = this.hoverCls;
  this.hoverCls = '';
}, getSchedulingView:function() {
  return this.getOwnerHeaderCt().view;
}, onTimeAxisReconfigure:function() {
  var h = this.timeAxis, g = h.preset.timeColumnWidth, j = this.rendered && this.getSchedulingView(), l = h.headerConfig, c = h.getStart(), f = h.getEnd(), d = this.rendered ? j.calculateTimeColumnWidth(g) : g;
  var o = this.columnConfig = this.createHeaderRows(l);
  var a = o.bottom || o.middle;
  if (this.rendered) {
    var e;
    var b = this.el.child('.x-column-header-inner');
    var i = b.dom;
    var k = i.style.display;
    var m = i.parentNode;
    i.style.display = 'none';
    m.removeChild(i);
    i.innerHTML = '';
    var n = this.initRenderData();
    if (o.top) {
      e = Ext.core.DomHelper.append(b, n.topHeaderCells);
      this.refreshHeaderRow('top', e);
    }
    if (o.middle) {
      e = Ext.core.DomHelper.append(b, n.middleHeaderCells);
      this.refreshHeaderRow('middle', e);
    }
    if (o.bottom) {
      e = Ext.core.DomHelper.append(b, n.bottomHeaderCells);
      this.refreshHeaderRow('bottom', e);
    }
    if (!o.top && !o.middle) {
      this.addCls('sch-header-single-row');
    } else {
      this.removeCls('sch-header-single-row');
    }
    m.appendChild(i);
    i.style.display = k;
    if (d !== this.columnWidth || this.nbrTimeColumns !== a.length) {
      this.nbrTimeColumns = a.length;
      this.setTimeColumnWidth(d);
    }
    if (this.fireEvent('timeaxiscolumnreconfigured', this) !== false) {
      j.refreshKeepingResourceScroll(true);
    }
  } else {
    if (d !== this.columnWidth || this.nbrTimeColumns !== a.length) {
      this.nbrTimeColumns = a.length;
      this.setTimeColumnWidth(d);
    }
  }
}, beforeRender:function() {
  var b = this, a = this.columnConfig;
  if (!a.middle && !a.top) {
    b.addCls('sch-header-single-row');
  }
  b.callParent(arguments);
}, afterRender:function() {
  var a = this;
  if (this.trackHeaderOver) {
    a.el.on({mousemove:a.highlightCell, delegate:'div.sch-simple-timeheader', scope:a});
    a.el.on({mouseleave:a.clearHighlight, scope:a});
  }
  a.callParent(arguments);
}, initRenderData:function() {
  var a = this.columnConfig;
  var c = a.top ? this.headerRowTpl.apply({cells:a.top, position:'top', tstyle:'border-top : 0; width : 100px'}) : '';
  var b = a.middle ? this.headerRowTpl.apply({cells:a.middle, position:'middle', tstyle:a.top ? 'width : 100px' : 'border-top : 0; width : 100px'}) : '';
  var d = a.bottom ? this.headerRowTpl.apply({cells:a.bottom, position:'bottom', tstyle:'width : 100px'}) : '';
  return Ext.apply(this.callParent(arguments), {topHeaderCells:c, middleHeaderCells:b, bottomHeaderCells:d});
}, defaultRenderer:function(c, b, a) {
  return Ext.Date.format(c, a);
}, createHeaderRows:function(a) {
  var b = {};
  for (var c in a) {
    if (a[c].cellGenerator) {
      b[c] = a[c].cellGenerator.call(this, this.timeAxis.getStart(), this.timeAxis.getEnd());
    } else {
      b[c] = this.createHeaderRow(c, a[c]);
    }
  }
  return b;
}, createHeaderRow:function(a, c) {
  var b = [], d = this, f, e = c.align || 'center';
  this.timeAxis.forEachInterval(a, function(j, g, h) {
    f = {align:e, start:j, end:g, headerCls:''};
    if (c.renderer) {
      f.header = c.renderer.call(c.scope || d, j, g, f, h);
    } else {
      f.header = d.defaultRenderer(j, g, c.dateFormat, f, h);
    }
    if (c.unit === Sch.util.Date.DAY && (!c.increment || c.increment === 1)) {
      f.headerCls += ' sch-dayheadercell-' + j.getDay();
    }
    b.push(f);
  });
  return b;
}, afterLayout:function() {
  this.callParent(arguments);
  this.refreshHeaderSizes();
}, refreshHeaderSizes:function() {
  var a = this.columnConfig;
  if (a.top) {
    this.refreshHeaderRow('top');
  }
  if (a.middle) {
    this.refreshHeaderRow('middle');
  }
  if (a.bottom) {
    this.refreshHeaderRow('bottom');
  }
}, refreshHeaderRow:function(a, b) {
  var e = this.el;
  var f = this.columnConfig[a];
  var d = this;
  var c;
  b = b || e.down('.sch-header-row-' + a, true);
  Ext.fly(b).setWidth(d.getTotalWidth());
  Ext.fly(b).select(' thead \x3e tr \x3e td').each(function(h, i, g) {
    c = d.getHeaderGroupCellWidth(f[g].start, f[g].end);
    h.setVisibilityMode(Ext.Element.DISPLAY);
    if (c) {
      if (Ext.isSafari && Ext.isMac) {
        c -= 2;
      }
      h.show();
      h.setWidth(c - (Ext.chromeVersion === 19 ? g ? 1 : 0 : 0));
    } else {
      h.hide();
    }
  });
  if (a === 'bottom') {
    if (c < this.compactCellWidthThreshold) {
      Ext.fly(b).addCls('sch-header-row-compact');
    } else {
      Ext.fly(b).removeCls('sch-header-row-compact');
    }
  }
}, getHeaderGroupCellWidth:function(h, b) {
  var e = this.timeAxis.unit, d = this.timeAxis.increment, c, g = Sch.util.Date.getMeasuringUnit(e), a = Sch.util.Date.getDurationInUnit(h, b, g), f = this.getSchedulingView();
  if (this.timeAxis.isContinuous()) {
    c = a * f.getSingleUnitInPixels(g);
  } else {
    c = f.getXYFromDate(b)[0] - f.getXYFromDate(h)[0];
  }
  return c;
}, onElDblClick:function(d, f) {
  var e = d.getTarget('.sch-column-header');
  if (e) {
    var a = Ext.fly(e).getAttribute('headerPosition'), b = Ext.fly(e).getAttribute('headerIndex'), c = this.columnConfig[a][b];
    this.fireEvent('timeheaderdblclick', this, c.start, c.end, d);
  }
}, getTimeColumnWidth:function() {
  if (this.columnWidth === null) {
    this.columnWidth = this.getWidth() / this.nbrTimeColumns;
  }
  return this.columnWidth;
}, setTimeColumnWidth:function(a) {
  this.columnWidth = a;
  if (this.rendered) {
    Ext.suspendLayouts();
    this.setWidth(a * this.nbrTimeColumns);
    Ext.resumeLayouts();
    this.refreshHeaderSizes();
    this.ownerCt.updateLayout();
  } else {
    this.setWidth(a * this.nbrTimeColumns);
  }
}, getTotalWidth:function() {
  return this.columnWidth * this.nbrTimeColumns;
}, highlightCell:function(c, a) {
  var b = this;
  if (a !== b.highlightedCell) {
    b.clearHighlight();
    b.highlightedCell = a;
    Ext.fly(a).addCls(b.ownHoverCls);
  }
}, clearHighlight:function() {
  var b = this, a = b.highlightedCell;
  if (a) {
    Ext.fly(a).removeCls(b.ownHoverCls);
    delete b.highlightedCell;
  }
}});
Ext.define('Sch.mixin.Lockable', {extend:'Ext.grid.Lockable', requires:['Sch.column.timeAxis.Horizontal', 'Sch.column.timeAxis.HorizontalSingle'], findEditingPlugin:function() {
  var b = this.plugins || [];
  var c = this;
  var a;
  Ext.each(b, function(e, d) {
    if (Ext.grid.plugin && Ext.grid.plugin.CellEditing && e instanceof Ext.grid.plugin.CellEditing) {
      a = e;
      Ext.Array.remove(b, e);
      return false;
    }
  });
  return a;
}, processSchedulerPlugins:function() {
  var e = [];
  var d = [];
  var g = [];
  var a = this.plugins || [];
  var c = this;
  for (var b = a.length - 1; b >= 0; b--) {
    var f = a[b];
    if (f.lockableScope) {
      switch(f.lockableScope) {
        case 'top':
          g.push(f);
          break;
        case 'locked':
          e.push(f);
          break;
        case 'normal':
          d.push(f);
          break;
      }
      Ext.Array.remove(a, f);
    }
  }
  if (e.length > 0) {
    c.lockedGridConfig.plugins = (c.lockedGridConfig.plugins || []).concat(e);
  }
  if (d.length > 0) {
    c.normalGridConfig.plugins = (c.normalGridConfig.plugins || []).concat(d);
  }
  c.topPlugins = g;
}, injectLockable:function() {
  var d = this.findEditingPlugin();
  var i = this;
  var f = Ext.data.TreeStore && i.store instanceof Ext.data.TreeStore;
  var j = i.store.buffered;
  var c = i.getEventSelectionModel ? i.getEventSelectionModel() : i.getSelectionModel();
  i.lockedGridConfig = i.lockedGridConfig || {};
  i.normalGridConfig = i.schedulerConfig || i.normalGridConfig || {};
  var a = i.lockedGridConfig, h = i.normalGridConfig;
  Ext.applyIf(i.lockedGridConfig, {enableLocking:false, lockable:false, useArrows:true, xtype:i.lockedXType, columnLines:i.columnLines, rowLines:i.rowLines, stateful:i.stateful, id:i.id + '_locked', delayScroll:function() {
    if (this.rendered) {
      return this.self.prototype.delayScroll.apply(this, arguments);
    }
  }, split:true, animCollapse:false, collapseDirection:'left', region:'west'});
  if (d) {
    i.lockedGridConfig.plugins = (i.lockedGridConfig.plugins || []).concat(d);
  }
  i.processSchedulerPlugins();
  Ext.applyIf(i.normalGridConfig, {layout:'fit', xtype:i.normalXType, viewType:i.viewType, enableLocking:false, lockable:false, sortableColumns:false, enableColumnMove:false, enableColumnResize:false, enableColumnHide:false, selModel:c, eventSelModel:c, _top:i, orientation:i.orientation, viewPreset:i.viewPreset, timeAxis:i.timeAxis, columnLines:i.columnLines, rowLines:i.rowLines, collapseDirection:'right', animCollapse:false, region:'center'});
  i.bothCfgCopy = i.bothCfgCopy || Ext.grid.Panel && Ext.grid.Panel.prototype.bothCfgCopy || ['invalidateScrollerOnRefresh', 'hideHeaders', 'enableColumnHide', 'enableColumnMove', 'enableColumnResize', 'sortableColumns'];
  if (i.orientation === 'vertical') {
    a.store = h.store = i.timeAxis.tickStore;
    i.mon(i.resourceStore, {clear:i.refreshResourceColumns, datachanged:i.refreshResourceColumns, load:i.refreshResourceColumns, scope:i});
  }
  if (a.width) {
    i.syncLockedWidth = Ext.emptyFn;
    a.scroll = 'horizontal';
    a.scrollerOwner = true;
  }
  if (i.resourceStore) {
    h.resourceStore = i.resourceStore;
  }
  if (i.eventStore) {
    h.eventStore = i.eventStore;
  }
  if (i.dependencyStore) {
    h.dependencyStore = i.dependencyStore;
  }
  i.lockedViewConfig = i.lockedViewConfig || {};
  i.normalViewConfig = i.normalViewConfig || {};
  if (f && j && Ext.getScrollbarSize().width === 0) {
    i.lockedGridConfig.scroll = 'horizontal';
  }
  i.lockedViewConfig.enableAnimations = i.normalViewConfig.enableAnimations = false;
  if (f) {
    i.normalViewConfig.providedStore = i.lockedViewConfig.providedStore = i.createNodeStore(j, i.store);
  }
  var e = i.layout;
  this.callParent(arguments);
  if (i.topPlugins) {
    i.plugins = i.topPlugins;
  }
  if (a.width) {
    i.lockedGrid.setWidth(a.width);
    i.normalGrid.getView().addCls('sch-timeline-horizontal-scroll');
  } else {
    if (i.normalGrid.collapsed) {
      i.normalGrid.collapsed = false;
      i.normalGrid.view.on('boxready', function() {
        i.normalGrid.collapse();
      }, i, {delay:10});
    }
  }
  var k = i.lockedGrid.getView();
  var b = i.normalGrid.getView();
  if (j) {
    k.on('render', this.onLockedViewRender, this);
    this.fixPagingScroller(i.normalGrid.verticalScroller);
    if (Ext.getScrollbarSize().width > 0) {
      k.on({scroll:{fn:i.onLockedViewScroll, element:'el', scope:i}});
    }
  }
  if (Ext.getScrollbarSize().width === 0) {
    k.addCls('sch-ganttpanel-force-locked-scroll');
  }
  if (f) {
    this.setupLockableTree();
  }
  if (!b.deferInitialRefresh) {
    var g = b.onRender;
    b.onRender = function() {
      this.doFirstRefresh = function() {
      };
      g.apply(this, arguments);
      delete this.doFirstRefresh;
    };
  }
  if (j) {
    b.el = {un:function() {
    }};
    i.normalGrid.verticalScroller.bindView(b);
    delete b.el;
  }
  i.view.clearListeners();
  k.on({refresh:i.updateSpacer, scope:i});
  i.view = Ext.create('Sch.view.Locking', {locked:i.lockedGrid, normal:i.normalGrid, panel:i});
  if (i.syncRowHeight) {
    k.on('refresh', this.onLockedViewRefresh, this);
    if (f) {
      i.mon(i.store, {beforeload:function() {
        k.un({itemadd:i.onViewItemAdd, scope:i});
        b.un({itemadd:i.onViewItemAdd, scope:i});
      }, load:function() {
        k.un({itemadd:i.onViewItemAdd, scope:i});
        b.un({itemadd:i.onViewItemAdd, scope:i});
        i.prepareFullRowHeightSync();
        i.syncRowHeights();
      }});
      i.normalGrid.on('afteritemexpand', i.afterNormalGridItemExpand, i);
    }
    k.on({itemadd:i.onViewItemAdd, scope:i});
    b.on({itemadd:i.onViewItemAdd, itemupdate:i.onNormalViewItemUpdate, groupexpand:i.onNormalViewGroupExpand, scope:i});
    if (Ext.isIE9 && Ext.isStrict) {
      i.onNormalViewItemUpdate = function(l, m, o) {
        if (i.lockedGridDependsOnSchedule) {
          var n = i.lockedGrid.getView();
          n.suspendEvents();
          n.onUpdate(i.lockedGrid.store, l);
          n.resumeEvents();
        }
        var p = i.normalGrid.getView().getNode(m);
        p.style.height = o.style.height;
        i.normalHeights[m] = o.style.height;
        i.syncRowHeights();
      };
    }
  }
  if (e !== 'fit') {
    i.layout = e;
  }
  i.normalGrid.on({collapse:i.onNormalGridCollapse, expand:i.onNormalGridExpand, scope:i});
  i.lockedGrid.on({collapse:i.onLockedGridCollapse, scope:i});
  if (this.lockedGrid.view.store !== this.normalGrid.view.store) {
    Ext.Error.raise('Sch.mixin.Lockable setup failed, not sharing store between the two views');
  }
}, onLockedGridCollapse:function() {
  if (this.normalGrid.collapsed) {
    this.normalGrid.expand();
  }
}, onNormalGridCollapse:function() {
  var a = this;
  if (!a.normalGrid.reExpander) {
    a.normalGrid.reExpander = a.normalGrid.placeholder;
  }
  if (!a.lockedGrid.rendered) {
    a.lockedGrid.on('render', a.onNormalGridCollapse, a, {delay:1});
  } else {
    a.lastLockedWidth = a.lockedGrid.getWidth();
    a.lockedGrid.setWidth(a.getWidth() - 35);
    if (a.lockedGrid.collapsed) {
      a.lockedGrid.expand();
    }
    a.addCls('sch-normalgrid-collapsed');
  }
}, onNormalGridExpand:function() {
  this.removeCls('sch-normalgrid-collapsed');
  this.lockedGrid.setWidth(this.lastLockedWidth);
}, fixPagingScroller:function(a) {
  var b = a.onViewRefresh;
  a.onViewRefresh = function() {
    b.apply(this, arguments);
    var g = this, f = g.store;
    if (f.getCount() === f.getTotalCount() || f.isFiltered() && !f.remoteFilter) {
      g.stretcher.setHeight(g.getScrollHeight());
    }
  };
  var d = a.view.lockingPartner;
  if (d) {
    var e = a.onLockRefresh;
    var c = function(f) {
      if (f.table.dom) {
        e.apply(this, arguments);
      }
    };
    d.un('refresh', e, a);
    d.on('refresh', c, a);
    a.onLockRefresh = c;
  }
  a.view.un('render', a.onViewRender, a);
  a.onViewRender = function() {
    var g = this, f = g.view.el;
    f.setStyle('position', 'relative');
    g.stretcher = f.createChild({style:{position:'absolute', width:'1px', height:0, top:0, left:0}}, f.dom.firstChild);
  };
  a.view.on('render', a.onViewRender, a);
}, createNodeStore:function(a, b) {
  return new Ext.data.NodeStore({buffered:a, purgePageCount:0, pageSize:1.0E10, treeStore:b, recursive:true, refreshFromTree:function() {
    var e = this.eventsSuspended;
    this.suspendEvents();
    this.removeAll();
    var c = b.getRootNode(), f = [];
    var d = function(i) {
      if (i != c) {
        f[f.length] = i;
      }
      if (i.isExpanded()) {
        var j = i.childNodes, h = j.length;
        for (var g = 0; g < h; g++) {
          d(j[g]);
        }
      }
    };
    d(c);
    this.totalCount = f.length;
    this.cachePage(f, 1);
    if (Ext.isNumber(this.eventsSuspended) || !e) {
      this.resumeEvents();
    }
  }});
}, setupLockableTree:function() {
  var j;
  var g;
  var i = this;
  var k = i.store.buffered;
  var d = i.getView();
  var o = i.lockedGrid.getView();
  var e = i.normalGrid.getView();
  var l = e.store;
  var c = i.store;
  var h = i.normalGrid.verticalScroller;
  var m = function(t, s) {
    var q = c.viewSize || 50;
    var p = l.getTotalCount();
    if (p) {
      var r = s - t + 1;
      if (r < q && p >= r) {
        s = t + q - 1;
      }
      if (s >= p) {
        t = p - (s - t);
        s = p - 1;
        t = Math.max(0, t);
      }
      l.guaranteeRange(t, s);
    }
  };
  this.mon(c, 'root-fill-start', function() {
    g = true;
    l.suspendEvents();
    if (k) {
      j = l.node;
      l.setNode();
    }
  });
  this.mon(c, 'root-fill-end', function() {
    g = false;
    if (k) {
      l.refreshFromTree();
      l.resumeEvents();
      m(0, c.viewSize || 50);
    } else {
      l.resumeEvents();
      d.refresh();
    }
  });
  if (k) {
    var n, a;
    this.mon(l, 'guaranteedrange', function(q, r, p) {
      n = r;
      a = p;
    });
    var f = function() {
      if (g) {
        return;
      }
      l.refreshFromTree();
      m(n || 0, a || 50);
      if (e.rendered) {
        i.onNormalViewScroll();
      }
    };
    this.mon(c, {append:f, insert:f, remove:f, move:f, expand:f, collapse:f, sort:f, buffer:1});
  }
  this.mon(c, 'filter', function(q, p) {
    l.filter.apply(l, p);
    d.refresh();
  });
  this.mon(c, 'clearfilter', function(p) {
    l.clearFilter();
    d.refresh();
  });
  this.mon(c, 'beforecascade', function(p) {
    l.suspendEvents();
  });
  this.mon(c, 'cascade', function(q, p) {
    l.resumeEvents();
    if (p.nbrAffected > 0) {
      e.refreshKeepingScroll(true);
      setTimeout(function() {
        o.saveScrollState();
        o.refresh();
        o.restoreScrollState();
      }, 0);
    }
  });
  if (k && h) {
    var b = h.onGuaranteedRange;
    h.onGuaranteedRange = function() {
      b.apply(this, arguments);
      Ext.suspendLayouts();
      d.refresh();
      Ext.resumeLayouts();
    };
  }
}, onNormalViewItemUpdate:function(a, b, d) {
  if (this.lockedGridDependsOnSchedule) {
    var c = this.lockedGrid.getView();
    c.suspendEvents();
    c.onUpdate(this.lockedGrid.store, a);
    c.resumeEvents();
  }
  var f = this.normalGrid.getView().getNode(b);
  var e = f.style.height !== d.style.height;
  f.style.height = d.style.height;
  this.normalHeights[b] = d.style.height;
  this.syncRowHeights(e);
}, afterNormalGridItemExpand:function(a) {
  var c = this;
  var b = c.getSchedulingView();
  a.cascadeBy(function(f) {
    if (f !== a) {
      var e = b.getNode(f);
      if (e) {
        var d = b.indexOf(e);
        c.normalHeights[d] = e.style.height;
      }
    }
  });
  c.syncRowHeights(true);
}, onViewItemAdd:function(c, d, b) {
  var e = this.normalGrid.getView();
  var f = this.lockedGrid.getView();
  if (e.getNodes().length !== f.getNodes().length) {
    return;
  }
  var a = this.normalHeights;
  Ext.each(c, function(h, g) {
    var i = e.getNode(h);
    if (i) {
      a[i.viewIndex] = i.style.height;
    }
  });
  this.syncRowHeights();
}, processColumns:function(b) {
  var a = this.callParent(arguments);
  var c = [];
  Ext.each(b, function(d) {
    if (d.position == 'right') {
      d.processed = true;
      if (!Ext.isNumber(d.width)) {
        Ext.Error.raise('"Right" columns must have a fixed width');
      }
      c.push(d);
      Ext.Array.remove(a.locked.items, d);
      a.lockedWidth -= d.width;
    }
  });
  if (this.orientation === 'horizontal') {
    a.normal.items = [{xtype:this.lightWeight ? 'singletimeaxiscolumn' : 'timeaxiscolumn', timeAxis:this.timeAxis, timeCellRenderer:this.timeCellRenderer, timeCellRendererScope:this.timeCellRendererScope, trackHeaderOver:this.trackHeaderOver}].concat(c);
  } else {
    a.locked.items = [Ext.apply({xtype:'verticaltimeaxis', width:100, timeAxis:this.timeAxis}, this.timeAxisColumnCfg || {})];
    a.lockedWidth = a.locked.items[0].width;
  }
  return a;
}, prepareFullRowHeightSync:function() {
  var g = this, h = g.normalGrid.getView(), j = g.lockedGrid.getView();
  if (!h.rendered || !j.rendered) {
    return;
  }
  var a = h.el, d = j.el, f = a.query(h.getItemSelector()), b = d.query(j.getItemSelector()), e = f.length, c = 0;
  g.lockedHeights = [];
  g.normalHeights = [];
  if (b.length !== e) {
    return;
  }
  for (; c < e; c++) {
    g.normalHeights[c] = f[c].style.height;
  }
}, onLockedViewRefresh:function() {
  this.prepareFullRowHeightSync();
  this.syncRowHeights();
}, onNormalViewRefresh:function() {
  var a = this.lockedGrid.getView();
  if (this.lockedGridDependsOnSchedule) {
    a.un('refresh', this.onLockedViewRefresh, this);
    this.lockedGrid.getView().refresh();
    a.on('refresh', this.onLockedViewRefresh, this);
  }
  this.prepareFullRowHeightSync();
  this.syncRowHeights();
}, syncRowHeights:function(b) {
  if (!this.lockedGrid.getView().rendered || !this.normalGrid.getView().rendered) {
    return;
  }
  var j = this, c = j.lockedHeights, k = j.normalHeights, a = [], h = c.length || k.length, f = 0, l, d, e, g;
  if (c.length || k.length) {
    l = j.lockedGrid.getView();
    d = j.normalGrid.getView();
    e = l.el.query(l.getItemSelector());
    g = d.el.query(d.getItemSelector());
    if (g.length !== e.length) {
      return;
    }
    for (; f < h; f++) {
      if (e[f] && k[f]) {
        e[f].style.height = k[f];
      }
    }
    j.lockedHeights = [];
    j.normalHeights = [];
  }
  if (b !== false) {
    j.updateSpacer();
  }
}, getMenuItems:function() {
  return function() {
    return Ext.grid.header.Container.prototype.getMenuItems.call(this);
  };
}, applyColumnsState:Ext.emptyFn, updateSpacer:function() {
  var g = this.lockedGrid.getView();
  var e = this.normalGrid.getView();
  if (g.rendered && e.rendered && g.el.child('table') && !this.getSchedulingView().__lightRefresh) {
    var f = this, c = g.el, d = e.el.dom, b = c.dom.id + '-spacer', h = d.offsetHeight - d.clientHeight + 'px';
    f.spacerEl = Ext.getDom(b);
    if (f.spacerEl) {
      f.spacerEl.style.height = h;
    } else {
      var a;
      if (this.store.buffered) {
        a = f.normalGrid.verticalScroller.stretcher.item(0).dom.parentNode === c.dom ? f.normalGrid.verticalScroller.stretcher.item(0) : f.normalGrid.verticalScroller.stretcher.item(1);
      } else {
        a = c;
      }
      Ext.core.DomHelper.append(a, {id:b, cls:this.store.buffered ? 'sch-locked-buffered-spacer' : '', style:'height: ' + h});
    }
  }
}, onLockedViewRender:function() {
  var d = this.normalGrid;
  if (!this.lockedStretcher) {
    var c = this.lockedGrid.getView().el;
    var a = this.lockedStretcher = c.createChild({cls:'x-stretcher', style:{position:'absolute', width:'1px', height:0, top:0, left:0}}, c.dom.firstChild);
  }
  if (!d.rendered) {
    d.getView().on('render', this.onLockedViewRender, this);
    return;
  }
  d.getView().el.un('scroll', this.onNormalViewScroll, this);
  d.getView().el.on('scroll', this.onNormalViewScroll, this);
  var b = d.verticalScroller;
  b.stretcher.addCls('x-stretcher');
  b.stretcher = new Ext.dom.CompositeElement([this.lockedStretcher, b.stretcher]);
}, onNormalViewGroupExpand:function() {
  this.prepareFullRowHeightSync();
  this.syncRowHeights();
}});
Ext.define('Sch.plugin.TreeCellEditing', {extend:'Ext.grid.plugin.CellEditing', init:function(a) {
  this._grid = a;
  this.on('beforeedit', this.checkReadOnly, this);
  this.callParent(arguments);
}, checkReadOnly:function() {
  var a = this._grid;
  if (!(a instanceof Sch.panel.TimelineTreePanel)) {
    a = a.up('tablepanel');
  }
  return !a.isReadOnly();
}, startEditByClick:function(c, a, h, b, g, d, f) {
  if (f.getTarget(c.expanderSelector)) {
    return;
  }
  this.callParent(arguments);
}, startEdit:function(a, f) {
  if (!a || !f) {
    return;
  }
  var d = this, b = d.getEditor(a, f), e = a.get(f.dataIndex), c = d.getEditingContext(a, f);
  a = c.record;
  f = c.column;
  d.completeEdit();
  if (f && !f.getEditor(a)) {
    return false;
  }
  if (b) {
    c.originalValue = c.value = e;
    if (d.beforeEdit(c) === false || d.fireEvent('beforeedit', c) === false || c.cancel) {
      return false;
    }
    d.context = c;
    d.setActiveEditor(b);
    d.setActiveRecord(a);
    d.setActiveColumn(f);
    d.grid.view.focusCell({column:c.colIdx, row:c.rowIdx});
    d.editTask.delay(15, b.startEdit, b, [d.getCell(a, f), c.value, c]);
  } else {
    d.grid.getView().getEl(f).focus(Ext.isWebKit || Ext.isIE ? 10 : false);
  }
}, getEditingContext:function(e, c) {
  var f = this, a = f.grid, i = a.store, b, d, g = a.getView(), h;
  if (Ext.isNumber(e)) {
    b = e;
    e = i.getAt(b);
  } else {
    if (i.indexOf) {
      b = i.indexOf(e);
    } else {
      b = g.indexOf(g.getNode(e));
    }
  }
  if (Ext.isNumber(c)) {
    d = c;
    c = a.headerCt.getHeaderAtIndex(d);
  } else {
    d = c.getIndex();
  }
  h = e.get(c.dataIndex);
  return {grid:a, record:e, field:c.dataIndex, value:h, row:g.getNode(b), column:c, rowIdx:b, colIdx:d};
}, startEditByPosition:function(a) {
  var f = this, d = f.grid, h = d.getSelectionModel(), b = f.view, e = this.view.getNode(a.row), g = d.headerCt.getHeaderAtIndex(a.column), c = b.getRecord(e);
  if (h.selectByPosition) {
    h.selectByPosition(a);
  }
  f.startEdit(c, g);
}, onEditComplete:function(c, g, b) {
  var f = this, d = f.grid, e = f.getActiveColumn(), h = d.getSelectionModel(), a;
  if (e) {
    a = f.context.record;
    f.setActiveEditor(null);
    f.setActiveColumn(null);
    f.setActiveRecord(null);
    if (!f.validateEdit()) {
      return;
    }
    if (!f.context.doNotUpdateRecord && !a.isEqual(g, b)) {
      a.set(e.dataIndex, g);
    }
    if (h.setCurrentPosition) {
      h.setCurrentPosition(h.getCurrentPosition());
    }
    d.getView().getEl(e).focus();
    f.context.value = g;
    f.fireEvent('edit', f, f.context);
  }
}});
Ext.define('Sch.feature.ColumnLines', {extend:'Sch.plugin.Lines', cls:'sch-column-line', showTip:false, requires:['Ext.data.Store'], init:function(b) {
  this.timeAxis = b.getTimeAxis();
  this.store = Ext.create('Ext.data.JsonStore', {model:Ext.define('Sch.model.TimeLine', {extend:'Ext.data.Model', fields:['start', {name:'Date', convert:function(d, c) {
    return c.data.start;
  }}]}), data:b.getOrientation() === 'horizontal' ? this.getData() : []});
  this.callParent(arguments);
  var a = this.schedulerView;
  a.timeAxis.on('reconfigure', this.populate, this);
}, populate:function() {
  var a = this.schedulerView;
  var b = a.getOrientation() === 'horizontal' && a.store.getCount() > 0;
  this.store.removeAll(b);
  if (b) {
    this.store.add(this.getData());
  }
}, getElementData:function() {
  var a = this.schedulerView;
  if (a.getOrientation() === 'horizontal' && a.store.getCount() > 0) {
    return this.callParent(arguments);
  }
  return [];
}, getData:function() {
  var a = [];
  this.timeAxis.forEachMainInterval(function(d, b, c) {
    if (c > 0) {
      a.push({start:d});
    }
  });
  a.push({start:this.timeAxis.getEnd()});
  return a;
}});
Ext.define('Sch.plugin.CurrentTimeLine', {extend:'Sch.plugin.Lines', tooltipText:'Current time', updateInterval:60000, autoUpdate:true, init:function(c) {
  var b = Ext.create('Ext.data.JsonStore', {model:Ext.define('TimeLineEvent', {extend:'Ext.data.Model', fields:['Date', 'Cls', 'Text']}), data:[{Date:new Date(), Cls:'sch-todayLine', Text:this.tooltipText}]});
  var a = b.first();
  if (this.autoUpdate) {
    this.runner = Ext.create('Ext.util.TaskRunner');
    this.runner.start({run:function() {
      a.set('Date', new Date());
    }, interval:this.updateInterval});
  }
  c.on('destroy', this.onHostDestroy, this);
  this.store = b;
  this.callParent(arguments);
}, onHostDestroy:function() {
  if (this.runner) {
    this.runner.stopAll();
  }
  if (this.store.autoDestroy) {
    this.store.destroy();
  }
}});
Ext.define('Sch.mixin.TimelineView', {requires:['Sch.column.Time', 'Sch.data.TimeAxis'], orientation:'horizontal', overScheduledEventClass:'sch-event-hover', selectedEventCls:'sch-event-selected', altColCls:'sch-col-alt', timeCellCls:'sch-timetd', timeCellSelector:'.sch-timetd', ScheduleEventMap:{click:'Click', dblclick:'DblClick', contextmenu:'ContextMenu', keydown:'KeyDown'}, suppressFitCheck:0, forceFit:false, inheritables:function() {
  return {cellBorderWidth:1, initComponent:function() {
    this.setOrientation(this.panel._top.orientation || this.orientation);
    this.addEvents('beforetooltipshow', 'scheduleclick', 'scheduledblclick', 'schedulecontextmenu', 'columnwidthchange');
    this.enableBubble('columnwidthchange');
    var a = {}, c = Sch.util.Date;
    a[c.DAY] = a[c.WEEK] = a[c.MONTH] = a[c.QUARTER] = a[c.YEAR] = null;
    Ext.applyIf(this, {eventPrefix:this.id + '-', largeUnits:a});
    this.callParent(arguments);
    if (this.orientation === 'horizontal') {
      this.getTimeAxisColumn().on('timeaxiscolumnreconfigured', this.checkHorizontalFit, this);
    }
    var b = this.panel._top;
    Ext.apply(this, {eventRendererScope:b.eventRendererScope, eventRenderer:b.eventRenderer, eventBorderWidth:b.eventBorderWidth, timeAxis:b.timeAxis, dndValidatorFn:b.dndValidatorFn || Ext.emptyFn, resizeValidatorFn:b.resizeValidatorFn || Ext.emptyFn, createValidatorFn:b.createValidatorFn || Ext.emptyFn, tooltipTpl:b.tooltipTpl, validatorFnScope:b.validatorFnScope || this, snapToIncrement:b.snapToIncrement, timeCellRenderer:b.timeCellRenderer, timeCellRendererScope:b.timeCellRendererScope, readOnly:b.readOnly, 
    eventResizeHandles:b.eventResizeHandles, enableEventDragDrop:b.enableEventDragDrop, enableDragCreation:b.enableDragCreation, dragConfig:b.dragConfig, dropConfig:b.dropConfig, resizeConfig:b.resizeConfig, createConfig:b.createConfig, tipCfg:b.tipCfg, orientation:b.orientation, getDateConstraints:b.getDateConstraints || Ext.emptyFn});
    if (this.emptyText) {
      this.emptyText = '\x3cspan class\x3d"sch-empty-text"\x3e' + this.emptyText + '\x3c/span\x3e';
    }
  }, onDestroy:function() {
    if (this.tip) {
      this.tip.destroy();
    }
    this.callParent(arguments);
  }, afterComponentLayout:function() {
    this.callParent(arguments);
    var b = this.getWidth();
    var a = this.getHeight();
    if (b === this.__prevWidth && a === this.__prevHeight) {
      return;
    }
    this.__prevWidth = b;
    this.__prevHeight = a;
    if (!this.lockable && !this.suppressFitCheck) {
      this.checkHorizontalFit();
    }
  }, beforeRender:function() {
    this.callParent(arguments);
    this.addCls('sch-timelineview');
    if (this.readOnly) {
      this.addCls(this._cmpCls + '-readonly');
    }
  }, afterRender:function() {
    this.callParent(arguments);
    if (this.overScheduledEventClass) {
      this.mon(this.el, {mouseover:this.onMouseOver, mouseout:this.onMouseOut, delegate:this.eventSelector, scope:this});
    }
    if (this.tooltipTpl) {
      this.el.on('mousemove', this.setupTooltip, this, {single:true});
    }
    this.setupTimeCellEvents();
  }, processUIEvent:function(f) {
    var c = this, a = f.getTarget(this.eventSelector), d = c.ScheduleEventMap, b = f.type;
    if (a && b in d) {
      this.fireEvent(this.scheduledEventName + b, this, this.resolveEventRecord(a), f);
    } else {
      this.callParent(arguments);
    }
  }, refresh:function() {
    this.fixedNodes = 0;
    this.callParent(arguments);
  }, clearViewEl:function() {
    var c = this, b = c.getTargetEl();
    b.down('table').remove();
    if (this.emptyText) {
      var a = b.down('.sch-empty-text');
      if (a) {
        a.remove();
      }
    }
  }, onMouseOver:function(b, a) {
    if (a !== this.lastItem) {
      this.lastItem = a;
      Ext.fly(a).addCls(this.overScheduledEventClass);
      this.fireEvent('eventmouseenter', this, this.resolveEventRecord(a), b);
    }
  }, onMouseOut:function(b, a) {
    if (this.lastItem) {
      if (!b.within(this.lastItem, true, true)) {
        Ext.fly(this.lastItem).removeCls(this.overScheduledEventClass);
        this.fireEvent('eventmouseleave', this, this.resolveEventRecord(this.lastItem), b);
        delete this.lastItem;
      }
    }
  }, highlightItem:function(b) {
    if (b) {
      var a = this;
      a.clearHighlight();
      a.highlightedItem = b;
      Ext.fly(b).addCls(a.overItemCls);
    }
  }, shouldUpdateCell:function() {
    return true;
  }};
}, hasRightColumns:function() {
  return this.headerCt.items.getCount() > 1;
}, checkHorizontalFit:function() {
  if (this.orientation === 'horizontal') {
    var a = this.getActualTimeColumnWidth();
    var c = this.getFittingColumnWidth();
    if (this.forceFit) {
      if (c != a) {
        this.fitColumns();
      }
    } else {
      if (this.snapToIncrement) {
        var b = this.calculateTimeColumnWidth(a);
        if (b > 0 && b !== a) {
          this.setColumnWidth(b);
        }
      } else {
        if (a < c) {
          this.fitColumns();
        }
      }
    }
  }
}, getTimeAxisColumn:function() {
  return this.headerCt.items.get(0);
}, getFirstTimeColumn:function() {
  return this.headerCt.getGridColumns()[0];
}, getFormattedDate:function(a) {
  return Ext.Date.format(a, this.getDisplayDateFormat());
}, getFormattedEndDate:function(d, a) {
  var b = this.timeAxis, c = b.getResolution().unit;
  if (c in this.largeUnits && d.getHours() === 0 && d.getMinutes() === 0 && !(d.getYear() === a.getYear() && d.getMonth() === a.getMonth() && d.getDate() === a.getDate())) {
    d = Sch.util.Date.add(d, Sch.util.Date.DAY, -1);
  }
  return Ext.Date.format(d, this.getDisplayDateFormat());
}, getDisplayDateFormat:function() {
  return this.displayDateFormat;
}, setDisplayDateFormat:function(a) {
  this.displayDateFormat = a;
}, getSingleUnitInPixels:function(a) {
  return Sch.util.Date.getUnitToBaseUnitRatio(this.timeAxis.getUnit(), a) * this.getSingleTickInPixels() / this.timeAxis.getIncrement();
}, getSingleTickInPixels:function() {
  throw 'Must be implemented by horizontal/vertical';
}, scrollEventIntoView:function(c, a) {
  var b = this.getOuterElementFromEventRecord(c);
  if (b) {
    b.scrollIntoView(this.el);
    if (a) {
      if (typeof a === 'boolean') {
        b.highlight();
      } else {
        b.highlight(null, a);
      }
    }
  }
}, calculateTimeColumnWidth:function(e) {
  if (!this.panel.rendered) {
    return e;
  }
  var h = this.forceFit;
  var b = 0, d = this.timeAxis.getUnit(), k = this.timeAxis.getCount(), g = Number.MAX_VALUE;
  if (this.snapToIncrement) {
    var i = this.timeAxis.getResolution(), j = i.unit, c = i.increment;
    g = Sch.util.Date.getUnitToBaseUnitRatio(d, j) * c;
  }
  var f = Sch.util.Date.getMeasuringUnit(d);
  g = Math.min(g, Sch.util.Date.getUnitToBaseUnitRatio(d, f));
  var a = Math.floor(this.getAvailableWidthForSchedule() / k);
  b = h || e < a ? a : e;
  if (g > 0 && (!h || g < 1)) {
    b = Math.round(Math.max(1, Math[h ? 'floor' : 'round'](g * b)) / g);
  }
  return b;
}, getFittingColumnWidth:function() {
  var a = Math.floor(this.getAvailableWidthForSchedule() / this.timeAxis.getCount());
  return this.calculateTimeColumnWidth(a);
}, fitColumns:function(b) {
  var a = 0;
  if (this.orientation === 'horizontal') {
    a = this.getFittingColumnWidth();
  } else {
    a = Math.floor((this.panel.getWidth() - Ext.getScrollbarSize().width - 1) / this.headerCt.getColumnCount());
  }
  this.setColumnWidth(a, b);
}, getAvailableWidthForSchedule:function() {
  var c = this.lastBox && this.lastBox.width || this.getWidth();
  var a = this.headerCt.items.items;
  for (var b = 1; b < a.length; b++) {
    c -= a[b].getWidth();
  }
  return c - Ext.getScrollbarSize().width - 1;
}, getRightColumnsWidth:function() {
  var c = 0;
  var a = this.headerCt.items.items;
  for (var b = 1; b < a.length; b++) {
    c += a[b].getWidth();
  }
  return c;
}, fixRightColumnsPositions:function() {
  var a = this.headerCt.items.items;
  var c = a[0].getWidth();
  for (var b = 1; b < a.length; b++) {
    var d = a[b];
    d.el.setLeft(c);
    c += d.getWidth();
  }
}, getElementFromEventRecord:function(a) {
  return Ext.get(this.eventPrefix + a.internalId);
}, getEventNodeByRecord:function(a) {
  return document.getElementById(this.eventPrefix + a.internalId);
}, getOuterElementFromEventRecord:function(a) {
  return Ext.get(this.eventPrefix + a.internalId);
}, resolveColumnIndex:function(a) {
  return Math.floor(a / this.getActualTimeColumnWidth());
}, getStartEndDatesFromRegion:function(b, a) {
  throw 'Must be implemented by horizontal/vertical';
}, setupTooltip:function() {
  var b = this, a = Ext.apply({renderTo:Ext.getBody(), delegate:b.eventSelector, target:b.el, anchor:'b'}, b.tipCfg);
  b.tip = Ext.create('Ext.ToolTip', a);
  b.tip.on({beforeshow:function(d) {
    if (!d.triggerElement || !d.triggerElement.id) {
      return false;
    }
    var c = this.resolveEventRecord(d.triggerElement);
    if (!c || this.fireEvent('beforetooltipshow', this, c) === false) {
      return false;
    }
    d.update(this.tooltipTpl.apply(this.getDataForTooltipTpl(c)));
    return true;
  }, scope:this});
}, getDataForTooltipTpl:function(a) {
  return a.data;
}, getTimeResolution:function() {
  return this.timeAxis.getResolution();
}, setTimeResolution:function(b, a) {
  this.timeAxis.setResolution(b, a);
  if (this.snapToIncrement) {
    this.refreshKeepingScroll();
  }
}, getEventIdFromDomNodeId:function(a) {
  return a.substring(this.eventPrefix.length);
}, getDateFromDomEvent:function(b, a) {
  return this.getDateFromXY(b.getXY(), a);
}, handleScheduleEvent:function(c) {
  var b = c.getTarget('.' + this.timeCellCls, 2);
  if (b) {
    var a = this.getDateFromDomEvent(c, 'floor');
    this.fireEvent('schedule' + c.type, this, a, this.indexOf(this.findItemByChild(b)), c);
  }
}, setupTimeCellEvents:function() {
  this.mon(this.el, {click:this.handleScheduleEvent, dblclick:this.handleScheduleEvent, contextmenu:this.handleScheduleEvent, scope:this}, this);
}, getSnapPixelAmount:function() {
  if (this.snapToIncrement) {
    var a = this.timeAxis.getResolution();
    return (a.increment || 1) * this.getSingleUnitInPixels(a.unit);
  } else {
    return 1;
  }
}, getActualTimeColumnWidth:function() {
  return this.headerCt.items.get(0).getTimeColumnWidth();
}, setSnapEnabled:function(a) {
  this.snapToIncrement = a;
  if (a) {
    this.refreshKeepingScroll();
  }
}, setReadOnly:function(a) {
  this.readOnly = a;
  this[a ? 'addCls' : 'removeCls'](this._cmpCls + '-readonly');
}, isReadOnly:function() {
  return this.readOnly;
}, setOrientation:function(a) {
  this.orientation = a;
  Ext.apply(this, Sch.view[Ext.String.capitalize(a)].prototype.props);
}, getOrientation:function() {
  return this.orientation;
}, translateToScheduleCoordinate:function(a) {
  throw 'Abstract method call!';
}, translateToPageCoordinate:function(a) {
  throw 'Abstract method call!';
}, getDateFromXY:function(c, b, a) {
  throw 'Abstract method call!';
}, getXYFromDate:function(a, b) {
  throw 'Abstract method call!';
}, getTimeSpanRegion:function(a, b) {
  throw 'Abstract method call!';
}, getStart:function() {
  return this.timeAxis.getStart();
}, getEnd:function() {
  return this.timeAxis.getEnd();
}, setBarMargin:function(b, a) {
  this.barMargin = b;
  if (!a) {
    this.refreshKeepingScroll();
  }
}, setRowHeight:function(a, b) {
  this.rowHeight = a || 24;
  if (this.rendered && !b) {
    this.refreshKeepingScroll();
  }
}, refreshKeepingScroll:function(a) {
  this.saveScrollState();
  if (this.lightRefresh) {
    this.lightRefresh();
  } else {
    this.refresh();
  }
  this.restoreScrollState();
}, refreshKeepingResourceScroll:function(c) {
  var d = this.el.dom, b = d.scrollTop, a = d.scrollLeft;
  if (this.lightRefresh) {
    this.lightRefresh();
  } else {
    this.refresh();
  }
  if (this.getOrientation() === 'horizontal') {
    d.scrollTop = b;
  } else {
    d.scrollLeft = a;
  }
}, lightRefresh:function() {
  var a = this.refreshSize;
  Ext.suspendLayouts();
  this.refreshSize = Ext.emptyFn;
  this.__lightRefresh = true;
  this.refresh();
  delete this.__lightRefresh;
  this.refreshSize = a;
  Ext.resumeLayouts();
}});
Ext.apply(Sch, {VERSION:'2.1.7'});
Ext.define('Sch.view.Horizontal', {props:{translateToScheduleCoordinate:function(a) {
  return a - this.el.getX() + this.el.getScroll().left;
}, translateToPageCoordinate:function(a) {
  return a + this.el.getX() - this.el.getScroll().left;
}, getDateFromXY:function(h, f, e) {
  var b, a = e ? h[0] : this.translateToScheduleCoordinate(h[0]), d = a / this.getActualTimeColumnWidth(), c = this.timeAxis.getCount();
  if (d < 0 || d > c) {
    b = null;
  } else {
    var g = d - this.resolveColumnIndex(a);
    if (g > 2 && d >= c) {
      return null;
    }
    b = this.timeAxis.getDateFromTick(d, f);
  }
  return b;
}, getXYFromDate:function(b, d) {
  var a, c = this.timeAxis.getTickFromDate(b);
  if (c >= 0) {
    a = this.getActualTimeColumnWidth() * c;
  }
  if (d === false) {
    a = this.translateToPageCoordinate(a);
  }
  return [a, 0];
}, getEventBox:function(e, b) {
  var a = Math.floor(this.getXYFromDate(e)[0]), c = Math.floor(this.getXYFromDate(b)[0]), d = Math;
  if (this.managedEventSizing) {
    return {top:Math.max(0, this.barMargin - (Ext.isIE && !Ext.isStrict) ? 0 : this.eventBorderWidth - this.cellBorderWidth), left:d.min(a, c), width:d.max(1, d.abs(a - c) - this.eventBorderWidth), height:this.rowHeight - 2 * this.barMargin - this.eventBorderWidth};
  }
  return {left:d.min(a, c), width:d.max(1, d.abs(a - c))};
}, layoutEvents:function(a) {
  var c = Ext.Array.clone(a);
  c.sort(this.sortEvents);
  var b = this.layoutEventsInBands(0, c);
  return b;
}, layoutEventsInBands:function(d, a) {
  var c = a[0], b = d === 0 ? this.barMargin : d * this.rowHeight - (d - 1) * this.barMargin;
  if (b >= this.cellBorderWidth) {
    b -= this.cellBorderWidth;
  }
  while (c) {
    c.top = b;
    Ext.Array.remove(a, c);
    c = this.findClosestSuccessor(c, a);
  }
  d++;
  if (a.length > 0) {
    return this.layoutEventsInBands(d, a);
  } else {
    return d;
  }
}, getScheduleRegion:function(d, f) {
  var h = d ? Ext.fly(this.getNodeByRecord(d)).getRegion() : this.el.down('.x-grid-table').getRegion(), e = this.timeAxis.getStart(), j = this.timeAxis.getEnd(), b = this.getDateConstraints(d, f) || {start:e, end:j}, c = this.translateToPageCoordinate(this.getXYFromDate(b.start)[0]), i = this.translateToPageCoordinate(this.getXYFromDate(b.end)[0]) - this.eventBorderWidth, g = h.top + this.barMargin, a = h.bottom - this.barMargin - this.eventBorderWidth;
  return new Ext.util.Region(g, Math.max(c, i), a, Math.min(c, i));
}, getResourceRegion:function(h, d, g) {
  var k = Ext.fly(this.getNodeByRecord(h)).getRegion(), i = this.timeAxis.getStart(), n = this.timeAxis.getEnd(), c = d ? Sch.util.Date.max(i, d) : i, e = g ? Sch.util.Date.min(n, g) : n, f = this.getXYFromDate(c)[0], m = this.getXYFromDate(e)[0] - this.eventBorderWidth, l = this.el.getTop(), b = this.el.getScroll(), j = k.top + 1 - l + b.top, a = k.bottom - 1 - l + b.top;
  return new Ext.util.Region(j, Math.max(f, m), a, Math.min(f, m));
}, collectRowData:function(g, p, o) {
  var c = this.eventStore.getEventsForResource(p);
  if (c.length === 0 || this.headerCt.getColumnCount() === 0) {
    g.rowHeight = this.rowHeight;
    return g;
  }
  var a = Sch.util.Date, m = this.timeAxis, n = m.getStart(), r = m.getEnd(), k = [], j, f;
  for (j = 0, f = c.length; j < f; j++) {
    var b = c[j], d = b.getStartDate(), h = b.getEndDate();
    if (d && h && m.timeSpanInAxis(d, h)) {
      var q = this.generateTplData(b, n, r, p, o);
      k[k.length] = q;
    }
  }
  var e = 1;
  if (this.dynamicRowHeight) {
    e = this.layoutEvents(k);
  }
  g.rowHeight = e * this.rowHeight - (e - 1) * this.barMargin;
  g[this.getFirstTimeColumn().id] += '\x26#160;' + this.eventTpl.apply(k);
  return g;
}, resolveResource:function(a) {
  var b = this.findItemByChild(a);
  if (b) {
    return this.getRecord(b);
  }
  return null;
}, getTimeSpanRegion:function(b, h, g) {
  var d = this.getXYFromDate(b)[0], f = this.getXYFromDate(h || b)[0], a, c;
  if (this.store.buffered) {
    var e;
    if (this.panel.verticalScroller.stretcher instanceof Ext.CompositeElement) {
      e = this.panel.verticalScroller.stretcher.first();
    } else {
      e = this.el.down('.x-stretcher');
    }
    if (e.dom.clientHeight) {
      c = e;
    }
  }
  if (!c) {
    c = this.el.down('.x-grid-table');
  }
  if (g) {
    a = Math.max(c ? c.dom.clientHeight : 0, this.el.dom.clientHeight);
  } else {
    a = c ? c.dom.clientHeight : 0;
  }
  return new Ext.util.Region(0, Math.max(d, f), a, Math.min(d, f));
}, getStartEndDatesFromRegion:function(c, b) {
  var a = this.getDateFromXY([c.left, 0], b), d = this.getDateFromXY([c.right, 0], b);
  if (d && a) {
    return {start:Sch.util.Date.min(a, d), end:Sch.util.Date.max(a, d)};
  } else {
    return null;
  }
}, onEventAdd:function(c, e) {
  var f = {};
  for (var b = 0, a = e.length; b < a; b++) {
    var d = e[b].getResource();
    if (d) {
      f[d.getId()] = d;
    }
  }
  Ext.Object.each(f, function(h, g) {
    this.onUpdate(this.resourceStore, g);
  }, this);
}, onEventRemove:function(c, a) {
  var b = this.getElementFromEventRecord(a);
  if (b) {
    var d = this.resolveResource(b);
    b.fadeOut({callback:function() {
      if (Ext.tree.View && this instanceof Ext.tree.View && this.store.indexOf(d)) {
        this.onUpdate(this.store, d);
      } else {
        if (this.resourceStore.indexOf(d) >= 0) {
          this.onUpdate(this.resourceStore, d);
        }
      }
    }, scope:this});
  }
}, onEventUpdate:function(b, c, a) {
  var e, d = c.previous;
  if (d && d[c.resourceIdField]) {
    e = c.getResource(d[c.resourceIdField]);
    if (e) {
      this.onUpdate(this.resourceStore, e);
    }
  }
  e = c.getResource();
  if (e) {
    this.onUpdate(this.resourceStore, e);
  }
}, getSingleTickInPixels:function() {
  return this.getActualTimeColumnWidth();
}, getColumnWidth:function() {
  if (this.getTimeAxisColumn()) {
    return this.getTimeAxisColumn().getTimeColumnWidth();
  }
}, setColumnWidth:function(b, a) {
  if (this.getTimeAxisColumn()) {
    this.getTimeAxisColumn().setTimeColumnWidth(b);
    if (!a) {
      this.refreshKeepingScroll();
    }
  }
  this.fireEvent('columnwidthchange', this, b);
}, getVisibleDateRange:function() {
  if (!this.rendered) {
    return null;
  }
  var c = this.getEl().getScroll(), b = this.panel.getStart(), f = this.panel.getEnd(), e = this.getWidth(), d = this.getEl().down('.x-grid-table').dom, a = d.clientWidth;
  if (a < e) {
    return {startDate:b, endDate:f};
  }
  return {startDate:this.getDateFromXY([c.left, 0], null, true), endDate:this.getDateFromXY([Math.min(c.left + e, a), 0], null, true)};
}}});
Ext.define('Sch.view.TimelineTreeView', {extend:'Ext.tree.View', mixins:['Sch.mixin.TimelineView'], requires:['Sch.patches.TreeView'], cellBorderWidth:0, beforeRender:function() {
  this.addCls('sch-timelinetreeview');
  this.callParent(arguments);
}}, function() {
  this.override(Sch.mixin.TimelineView.prototype.inheritables() || {});
});
Ext.define('Sch.mixin.Zoomable', {zoomLevels:[{width:200, increment:1, resolution:1, preset:'year'}, {width:100, increment:1, resolution:7, preset:'monthAndYear'}, {width:30, increment:1, resolution:1, preset:'weekDateAndMonth'}, {width:35, increment:1, resolution:1, preset:'weekAndMonth'}, {width:50, increment:1, resolution:1, preset:'weekAndMonth'}, {width:85, increment:1, resolution:1, preset:'weekAndMonth'}, {width:50, increment:1, resolution:1, preset:'weekAndDay', resolutionUnit:'HOUR'}, {width:100, 
increment:1, resolution:1, preset:'weekAndDay', resolutionUnit:'HOUR'}, {width:50, increment:6, resolution:30, preset:'hourAndDay', resolutionUnit:'MINUTE'}, {width:100, increment:6, resolution:30, preset:'hourAndDay', resolutionUnit:'MINUTE'}, {width:60, increment:2, resolution:30, preset:'hourAndDay', resolutionUnit:'MINUTE'}, {width:60, increment:1, resolution:30, preset:'hourAndDay', resolutionUnit:'MINUTE'}, {width:30, increment:15, resolution:5, preset:'minuteAndHour'}, {width:60, increment:15, 
resolution:5, preset:'minuteAndHour'}, {width:130, increment:15, resolution:5, preset:'minuteAndHour'}, {width:60, increment:5, resolution:5, preset:'minuteAndHour'}, {width:100, increment:5, resolution:5, preset:'minuteAndHour'}], minZoomLevel:null, maxZoomLevel:null, visibleZoomFactor:5, cachedCenterDate:null, isFirstZoom:true, isZooming:false, initializeZooming:function() {
  this.zoomLevels = this.zoomLevels.slice();
  this.setMinZoomLevel(this.minZoomLevel || 0);
  this.setMaxZoomLevel(this.maxZoomLevel !== null ? this.maxZoomLevel : this.zoomLevels.length - 1);
  this.on('viewchange', this.clearCenterDateCache, this);
}, getZoomLevelUnit:function(b) {
  var a = Sch.preset.Manager.getPreset(b.preset).headerConfig;
  return a.bottom ? a.bottom.unit : a.middle.unit;
}, getMilliSecondsPerPixelForZoomLevel:function(b) {
  var a = Sch.util.Date;
  return Math.round((a.add(new Date(1, 0, 1), this.getZoomLevelUnit(b), b.increment) - new Date(1, 0, 1)) / b.width);
}, presetToZoomLevel:function(e) {
  var d = Sch.preset.Manager.getPreset(e);
  var c = d.headerConfig;
  var a = c.bottom;
  var b = c.middle;
  return {preset:e, increment:(a ? a.increment : b.increment) || 1, resolution:d.timeResolution.increment, resolutionUnit:d.timeResolution.unit, width:d.timeColumnWidth};
}, calculateCurrentZoomLevel:function() {
  var d = this.presetToZoomLevel(this.viewPreset);
  var c = this.timeAxis.headerConfig;
  var a = c.bottom;
  var b = c.middle;
  d.width = this.timeAxis.preset.timeColumnWidth;
  d.increment = (a ? a.increment : b.increment) || 1;
  return d;
}, getCurrentZoomLevelIndex:function() {
  var f = this.calculateCurrentZoomLevel();
  var b = this.getMilliSecondsPerPixelForZoomLevel(f);
  var e = this.zoomLevels;
  for (var c = 0; c < e.length; c++) {
    var d = this.getMilliSecondsPerPixelForZoomLevel(e[c]);
    if (d == b) {
      return c;
    }
    if (c === 0 && b > d) {
      return -0.5;
    }
    if (c == e.length - 1 && b < d) {
      return e.length - 1 + 0.5;
    }
    var a = this.getMilliSecondsPerPixelForZoomLevel(e[c + 1]);
    if (d > b && b > a) {
      return c + 0.5;
    }
  }
  throw "Can't find current zoom level index";
}, setMaxZoomLevel:function(a) {
  if (a < 0 || a >= this.zoomLevels.length) {
    throw new Error('Invalid range for `setMinZoomLevel`');
  }
  this.maxZoomLevel = a;
}, setMinZoomLevel:function(a) {
  if (a < 0 || a >= this.zoomLevels.length) {
    throw new Error('Invalid range for `setMinZoomLevel`');
  }
  this.minZoomLevel = a;
}, getViewportCenterDateCached:function() {
  if (this.cachedCenterDate) {
    return this.cachedCenterDate;
  }
  return this.cachedCenterDate = this.getViewportCenterDate();
}, clearCenterDateCache:function() {
  this.cachedCenterDate = null;
}, zoomToLevel:function(b) {
  b = Ext.Number.constrain(b, this.minZoomLevel, this.maxZoomLevel);
  var n = this.calculateCurrentZoomLevel();
  var d = this.getMilliSecondsPerPixelForZoomLevel(n);
  var i = this.zoomLevels[b];
  var a = this.getMilliSecondsPerPixelForZoomLevel(i);
  if (d == a) {
    return null;
  }
  var p = this;
  var j = this.getSchedulingView();
  var f = j.getEl();
  if (this.isFirstZoom) {
    this.isFirstZoom = false;
    f.on('scroll', this.clearCenterDateCache, this);
  }
  var h = this.orientation == 'vertical';
  var e = this.getViewportCenterDateCached();
  var k = h ? f.getHeight() : f.getWidth();
  var l = Ext.clone(Sch.preset.Manager.getPreset(i.preset));
  var o = this.calculateOptimalDateRange(e, k, i);
  var c = l.headerConfig;
  var g = c.bottom;
  var r = c.middle;
  l[h ? 'rowHeight' : 'timeColumnWidth'] = i.width;
  if (g) {
    g.increment = i.increment;
  } else {
    r.increment = i.increment;
  }
  this.isZooming = true;
  this.viewPreset = i.preset;
  var m = g ? g.unit : r.unit;
  this.timeAxis.reconfigure({preset:l, headerConfig:c, unit:m, increment:i.increment, resolutionUnit:Sch.util.Date.getUnitByName(i.resolutionUnit || m), resolutionIncrement:i.resolution, weekStartDay:this.weekStartDay, mainUnit:r.unit, shiftUnit:l.shiftUnit, shiftIncrement:l.shiftIncrement || 1, defaultSpan:l.defaultSpan || 1, start:o.startDate || this.getStart(), end:o.endDate || this.getEnd()});
  var q = j.getXYFromDate(e, true);
  f.on('scroll', function() {
    p.cachedCenterDate = e;
  }, this, {single:true});
  if (h) {
    f.scrollTo('top', q[1] - k / 2);
  } else {
    f.scrollTo('left', q[0] - k / 2);
  }
  p.isZooming = false;
  this.fireEvent('zoomchange', this, b);
  return b;
}, zoomIn:function(a) {
  a = a || 1;
  var b = this.getCurrentZoomLevelIndex();
  if (b >= this.zoomLevels.length - 1) {
    return null;
  }
  return this.zoomToLevel(Math.floor(b) + a);
}, zoomOut:function(a) {
  a = a || 1;
  var b = this.getCurrentZoomLevelIndex();
  if (b <= 0) {
    return null;
  }
  return this.zoomToLevel(Math.ceil(b) - a);
}, zoomInFull:function() {
  return this.zoomToLevel(this.maxZoomLevel);
}, zoomOutFull:function() {
  return this.zoomToLevel(this.minZoomLevel);
}, calculateOptimalDateRange:function(c, h, e) {
  var b = Sch.util.Date;
  var i = Sch.preset.Manager.getPreset(e.preset).headerConfig;
  var f = i.top ? i.top.unit : i.middle.unit;
  var j = this.getZoomLevelUnit(e);
  var d = Math.ceil(h / e.width * e.increment * this.visibleZoomFactor / 2);
  var a = b.add(c, j, -d);
  var g = b.add(c, j, d);
  return {startDate:this.timeAxis.floorDate(a, false, f), endDate:this.timeAxis.ceilDate(g, false, f)};
}});
Ext.define('Sch.mixin.TimelinePanel', {requires:['Sch.util.Patch', 'Sch.patches.LoadMask', 'Sch.patches.Model', 'Sch.patches.Table', 'Sch.data.TimeAxis', 'Sch.feature.ColumnLines', 'Sch.view.Locking', 'Sch.mixin.Lockable', 'Sch.preset.Manager'], mixins:['Sch.mixin.Zoomable'], orientation:'horizontal', weekStartDay:1, snapToIncrement:false, readOnly:false, eventResizeHandles:'both', viewPreset:'weekAndDay', trackHeaderOver:true, startDate:null, endDate:null, eventBorderWidth:1, syncCellHeight:Ext.emptyFn, 
tooltipTpl:null, tipCfg:{cls:'sch-tip', showDelay:1000, hideDelay:0, autoHide:true, anchor:'b'}, lightWeight:true, timeCellRenderer:null, timeCellRendererScope:null, inheritables:function() {
  return {columnLines:true, enableColumnMove:false, enableLocking:true, lockable:true, lockedXType:null, normalXType:null, initComponent:function() {
    this.lightWeight = this.lightWeight && !this.timeCellRenderer;
    this.addEvents('timeheaderdblclick', 'beforeviewchange', 'viewchange');
    if (!this.timeAxis) {
      this.timeAxis = Ext.create('Sch.data.TimeAxis');
    }
    if (!this.columns && !this.colModel) {
      this.columns = [];
    }
    this.timeAxis.on('reconfigure', this.onTimeAxisReconfigure, this);
    if (this.enableLocking) {
      this.self.mixin('lockable', Sch.mixin.Lockable);
      var b = 0, a = this.columns.length, c;
      for (; b < a; ++b) {
        c = this.columns[b];
        if (c.locked !== false) {
          c.locked = true;
        }
      }
      this.switchViewPreset(this.viewPreset, this.startDate, this.endDate, true);
    }
    this.callParent(arguments);
    if (this.lockable) {
      this.applyViewSettings(this.timeAxis.preset);
      if (!this.viewPreset) {
        throw 'You must define a valid view preset object. See Sch.preset.Manager class for reference';
      }
      if (this.lightWeight && this.columnLines) {
        this.columnLinesFeature = new Sch.feature.ColumnLines();
        this.columnLinesFeature.init(this);
      }
    }
    this.initializeZooming();
    this.relayEvents(this.getView(), ['beforetooltipshow', 'scheduleclick', 'scheduledblclick', 'schedulecontextmenu']);
  }, getState:function() {
    var a = this, b = a.callParent(arguments);
    Ext.apply(b, {viewPreset:a.viewPreset, startDate:a.getStart(), endDate:a.getEnd(), zoomMinLevel:a.zoomMinLevel, zoomMaxLevel:a.zoomMaxLevel, currentZoomLevel:a.currentZoomLevel});
    return b;
  }, getOrientation:function() {
    return this.orientation;
  }, applyState:function(b) {
    var a = this;
    a.callParent(arguments);
    if (b && b.viewPreset) {
      a.switchViewPreset(b.viewPreset, b.startDate, b.endDate);
    }
    if (b && b.currentZoomLevel) {
      a.zoomToLevel(b.currentZoomLevel);
    }
  }, beforeRender:function() {
    this.callParent(arguments);
    if (this.lockable) {
      this.addCls('sch-' + this.orientation);
    }
  }, afterRender:function() {
    this.callParent(arguments);
    if (this.lockable) {
      this.lockedGrid.on('itemdblclick', function(d, c, e, g, f) {
        if (this.orientation == 'vertical' && c) {
          this.fireEvent('timeheaderdblclick', this, c.get('start'), c.get('end'), g, f);
        }
      }, this);
    } else {
      var b = this.headerCt;
      if (b && b.reorderer && b.reorderer.dropZone) {
        var a = b.reorderer.dropZone;
        a.positionIndicator = Ext.Function.createSequence(a.positionIndicator, function() {
          this.valid = false;
        });
      }
    }
  }, delayScroll:function() {
    var a = this.getScrollTarget().el;
    if (a) {
      this.scrollTask.delay(10, function() {
        if (a.dom) {
          this.syncHorizontalScroll(a.dom.scrollLeft);
        }
      }, this);
    }
  }};
}, setReadOnly:function(a) {
  this.getSchedulingView().setReadOnly(a);
}, isReadOnly:function() {
  return this.getSchedulingView().isReadOnly();
}, switchViewPreset:function(d, a, f, b) {
  if (this.fireEvent('beforeviewchange', this, d, a, f) !== false) {
    if (Ext.isString(d)) {
      this.viewPreset = d;
      d = Sch.preset.Manager.getPreset(d);
    }
    if (!d) {
      throw 'View preset not found';
    }
    var e = d.headerConfig;
    var c = {unit:e.bottom ? e.bottom.unit : e.middle.unit, increment:(e.bottom ? e.bottom.increment : e.middle.increment) || 1, resolutionUnit:d.timeResolution.unit, resolutionIncrement:d.timeResolution.increment, weekStartDay:this.weekStartDay, mainUnit:e.middle.unit, shiftUnit:d.shiftUnit, headerConfig:d.headerConfig, shiftIncrement:d.shiftIncrement || 1, preset:d, defaultSpan:d.defaultSpan || 1};
    if (b) {
      c.start = a || new Date();
      c.end = f;
    } else {
      c.start = a || this.timeAxis.getStart();
      c.end = f;
    }
    if (!b) {
      this.applyViewSettings(d);
    }
    this.timeAxis.reconfigure(c);
  }
}, applyViewSettings:function(b) {
  var a = this.getSchedulingView();
  a.setDisplayDateFormat(b.displayDateFormat);
  if (this.orientation === 'horizontal') {
    a.setRowHeight(this.rowHeight || b.rowHeight, true);
  }
}, getStart:function() {
  return this.timeAxis.getStart();
}, getEnd:function() {
  return this.timeAxis.getEnd();
}, getViewportCenterDate:function() {
  var b = this.getSchedulingView(), c = b.getEl(), a = c.getScroll(), d;
  if (this.orientation === 'vertical') {
    d = [0, a.top + c.getHeight() / 2];
  } else {
    d = [a.left + c.getWidth() / 2, 0];
  }
  return b.getDateFromXY(d, null, true);
}, setTimeColumnWidth:function(b, a) {
  this.getSchedulingView().setColumnWidth(b, a);
}, onTimeAxisReconfigure:function() {
  this.fireEvent('viewchange', this);
  if (this.stateful && this.lockedGrid) {
    this.saveState();
  }
}, getColumnsState:function() {
  var b = this, a = b.lockedGrid.headerCt.getColumnsState();
  return a;
}, shiftNext:function(a) {
  this.timeAxis.shiftNext(a);
}, shiftPrevious:function(a) {
  this.timeAxis.shiftPrevious(a);
}, goToNow:function() {
  this.setTimeSpan(new Date());
}, setTimeSpan:function(b, a) {
  if (this.timeAxis) {
    this.timeAxis.setTimeSpan(b, a);
  }
}, setStart:function(a) {
  this.setTimeSpan(a);
}, setEnd:function(a) {
  this.setTimeSpan(null, a);
}, getTimeAxis:function() {
  return this.timeAxis;
}, getResourceByEventRecord:function(a) {
  return a.getResource();
}, scrollToDate:function(c, b) {
  var a = this.getSchedulingView(), d = a.getXYFromDate(c, true);
  if (this.orientation == 'horizontal') {
    a.getEl().scrollTo('left', Math.max(0, d[0]), b);
  } else {
    a.getEl().scrollTo('top', Math.max(0, d[1]), b);
  }
}, getSchedulingView:function() {
  return this.lockable ? this.normalGrid.getView() : this.getView();
}, setOrientation:function(a) {
  this.removeCls('sch-' + this.orientation);
  this.addCls('sch-' + a);
  this.orientation = a;
}});
Ext.define('Sch.panel.TimelineTreePanel', {extend:'Ext.tree.Panel', requires:['Ext.data.TreeStore'], mixins:['Sch.mixin.TimelinePanel'], useArrows:true, rootVisible:false, constructor:function(a) {
  a = a || {};
  a.animate = false;
  this.callParent(arguments);
}, initComponent:function() {
  this.callParent(arguments);
  if (this.lockable && this.lockedGrid.headerCt.query('treecolumn').length === 0) {
    Ext.Error.raise("You must define an Ext.tree.Column (or use xtype : 'treecolumn').");
  }
}, onRootChange:function(a) {
  if (!this.lockable) {
    this.callParent(arguments);
  }
}}, function() {
  this.override(Sch.mixin.TimelinePanel.prototype.inheritables() || {});
});
Ext.define('Sch.plugin.Printable', {extend:'Ext.AbstractPlugin', lockableScope:'top', docType:'\x3c!DOCTYPE HTML\x3e', beforePrint:Ext.emptyFn, afterPrint:Ext.emptyFn, autoPrintAndClose:true, fakeBackgroundColor:true, scheduler:null, constructor:function(a) {
  Ext.apply(this, a);
}, init:function(a) {
  this.scheduler = a;
  a.print = Ext.Function.bind(this.print, this);
}, mainTpl:'{docType}\x3chtml class\x3d"x-border-box {htmlClasses}"\x3e\x3chead\x3e\x3cmeta content\x3d"text/html; charset\x3dUTF-8" http-equiv\x3d"Content-Type" /\x3e\x3ctitle\x3e{title}\x3c/title\x3e{styles}\x3c/head\x3e\x3cbody class\x3d"sch-print-body {bodyClasses}"\x3e\x3cdiv class\x3d"sch-print-ct {componentClasses}" style\x3d"width:{totalWidth}px"\x3e\x3cdiv class\x3d"sch-print-headerbg" style\x3d"border-left-width:{totalWidth}px;height:{headerHeight}px;"\x3e\x3c/div\x3e\x3cdiv class\x3d"sch-print-header-wrap"\x3e\x3cdiv style\x3d"left:-{lockedScroll}px;margin-right:-{lockedScroll}px;width:{[values.lockedWidth + values.lockedScroll]}px" class\x3d"sch-print-lockedheader x-grid-header-ct x-grid-header-ct-default x-docked x-docked-top x-grid-header-ct-docked-top x-grid-header-ct-default-docked-top x-box-layout-ct x-docked-noborder-top x-docked-noborder-right x-docked-noborder-left"\x3e{lockedHeader}\x3c/div\x3e\x3cdiv style\x3d"left:{lockedWidth}px;width:{normalWidth}px;" class\x3d"sch-print-normalheader x-grid-header-ct x-grid-header-ct-default x-docked x-docked-top x-grid-header-ct-docked-top x-grid-header-ct-default-docked-top x-box-layout-ct x-docked-noborder-top x-docked-noborder-right x-docked-noborder-left"\x3e\x3cdiv style\x3d"margin-left:-{normalScroll}px"\x3e{normalHeader}\x3c/div\x3e\x3c/div\x3e\x3c/div\x3e\x3cdiv id\x3d"lockedRowsCt" style\x3d"left:-{lockedScroll}px;margin-right:-{lockedScroll}px;width:{[values.lockedWidth + values.lockedScroll]}px;top:{headerHeight}px;" class\x3d"sch-print-locked-rows-ct {innerLockedClasses} x-grid-inner-locked"\x3e{lockedRows}\x3c/div\x3e\x3cdiv id\x3d"normalRowsCt" style\x3d"left:{lockedWidth}px;top:{headerHeight}px;width:{normalWidth}px" class\x3d"sch-print-normal-rows-ct {innerNormalClasses}"\x3e\x3cdiv style\x3d"position:relative;overflow:visible;margin-left:-{normalScroll}px"\x3e{normalRows}\x3c/div\x3e\x3c/div\x3e\x3c/div\x3e\x3cscript type\x3d"text/javascript"\x3e{setupScript}\x3c/script\x3e\x3c/body\x3e\x3c/html\x3e', 
getGridContent:function(l) {
  var k = l.normalGrid, c = l.lockedGrid, m = c.getView(), d = k.getView(), f, b, j, e, i;
  this.beforePrint(l);
  var a = m.store.getRange();
  b = m.tpl.apply(m.collectData(a, 0));
  j = d.tpl.apply(d.collectData(a, 0));
  e = m.el.getScroll().left;
  i = d.el.getScroll().left;
  if (l.columnLinesFeature) {
    var h = l.columnLinesFeature;
    var g = h.containerEl;
    h.containerEl = Ext.get(document.createElement('div'));
    h.renderElementsInternal();
    j = h.containerEl.dom.innerHTML + j;
    h.containerEl = g;
  }
  this.afterPrint(l);
  return {normalHeader:k.headerCt.el.dom.innerHTML, lockedHeader:c.headerCt.el.dom.innerHTML, lockedRows:b, normalRows:j, lockedScroll:e, normalScroll:i, lockedWidth:c.getWidth(), normalWidth:k.getWidth(), headerHeight:k.headerCt.getHeight(), innerLockedClasses:c.view.el.dom.className, innerNormalClasses:k.view.el.dom.className + (this.fakeBackgroundColor ? ' sch-print-fake-background' : ''), width:l.getWidth()};
}, getStylesheets:function() {
  return Ext.getDoc().select('link[rel\x3d"stylesheet"]');
}, print:function() {
  var g = this.scheduler;
  if (!(this.mainTpl instanceof Ext.Template)) {
    var a = 22;
    this.mainTpl = Ext.create('Ext.XTemplate', this.mainTpl, {compiled:true, disableFormats:true});
  }
  var h = g.getView(), i = this.getStylesheets(), e = Ext.get(Ext.core.DomHelper.createDom({tag:'div'})), b;
  i.each(function(j) {
    e.appendChild(j.dom.cloneNode(true));
  });
  b = e.dom.innerHTML + '';
  var f = this.getGridContent(g), c = this.mainTpl.apply(Ext.apply({waitText:this.waitText, docType:this.docType, htmlClasses:'', bodyClasses:Ext.getBody().dom.className, componentClasses:g.el.dom.className, title:g.title || '', styles:b, totalWidth:g.getWidth(), setupScript:'(' + this.setupScript.toString() + ')();'}, f));
  var d = window.open('', 'printgrid');
  d.document.write(c);
  d.document.close();
  if (this.autoPrintAndClose) {
    d.print();
    if (!Ext.isChrome) {
      d.close();
    }
  }
}, setupScript:function() {
  var f = document.getElementById('lockedRowsCt'), d = document.getElementById('normalRowsCt'), b = f.getElementsByTagName('tr'), a = d.getElementsByTagName('tr'), e = a.length, c = 0;
  for (; c < e; c++) {
    b[c].style.height = a[c].style.height;
  }
}});
Ext.define('Sch.plugin.PdfExport', {extend:'Ext.util.Observable', mixins:['Ext.AbstractPlugin'], lockableScope:'top', printServer:undefined, tpl:new Ext.XTemplate('\x3c!DOCTYPE html\x3e\x3chtml class\x3d"x-border-box {htmlClasses}"\x3e\x3chead\x3e\x3cmeta content\x3d"text/html; charset\x3dUTF-8" http-equiv\x3d"Content-Type" /\x3e\x3ctitle\x3e{column}/{row}\x3c/title\x3e{styles}\x3c/head\x3e\x3cbody class\x3d"{bodyClasses}"\x3e{[this.showHeader(values)]}\x3cdiv class\x3d"{componentClasses}" style\x3d"height:{bodyHeight}px; width:{totalWidth}px"\x3e{HTML}\x3c/div\x3e\x3c/body\x3e\x3c/html\x3e', 
{disableFormats:true, showHeader:function(a) {
  if (a.showHeader) {
    return '\x3cdiv class\x3d"sch-pdfprint-header" style\x3d"width:' + a.totalWidth + 'px"\x3e\x3ch2\x3e' + a.column + '/' + a.row + '\x3c/h2\x3e\x3c/div\x3e';
  }
  return '';
}}), exportDialogClassName:'Sch.widget.PdfExportDialog', exportDialogConfig:{}, defaultConfig:{format:'A4', orientation:'portrait', range:'complete', showHeader:true}, pageSizes:{A5:{width:5.8, height:8.3}, A4:{width:8.3, height:11.7}, A3:{width:11.7, height:16.5}, Letter:{width:8.5, height:11}}, openAfterExport:true, DPI:72, constructor:function(a) {
  this.callParent(arguments);
  this.addEvents('hidedialogwindow', 'showdialogerror', 'updateprogressbar');
}, init:function(a) {
  this.scheduler = a;
  a.showExportDialog = Ext.Function.bind(this.showExportDialog, this);
  a.doExport = Ext.Function.bind(this.doExport, this);
}, showExportDialog:function() {
  var b = this, a = b.scheduler.getSchedulingView();
  if (!b.win) {
    b.win = Ext.create(b.exportDialogClassName, {plugin:b, exportDialogConfig:Ext.apply({startDate:this.scheduler.getStart(), endDate:this.scheduler.getEnd(), rowHeight:a.rowHeight, columnWidth:a.getSingleTickInPixels()}, b.exportDialogConfig)});
  }
  b.win.show();
}, getStylesheets:function() {
  var c = Ext.getDoc().select('link[rel\x3d"stylesheet"]'), a = Ext.get(Ext.core.DomHelper.createDom({tag:'div'})), b;
  c.each(function(d) {
    a.appendChild(d.dom.cloneNode(true));
  });
  b = a.dom.innerHTML + '';
  return b;
}, doExport:function(l, i, n) {
  var A = this, m = A.scheduler, o = m.getSchedulingView(), k = A.getStylesheets(), y = l || A.defaultConfig;
  A.mask();
  A.fireEvent('updateprogressbar', 0.1);
  if (m.expandAll) {
    m.expandAll();
  }
  var w = m.lockedGrid, p = m.normalGrid, f = o.rowHeight, z = m.timeAxis.getTicks(), q = o.getSingleTickInPixels(), b = {width:m.getWidth(), height:m.getHeight(), rowHeight:f, columnWidth:q, startDate:m.getStart(), endDate:m.getEnd(), normalWidth:p.getWidth(), normalPosition:p.getPosition()}, u, g;
  if (y.orientation === 'landscape') {
    u = A.pageSizes[y.format].height * A.DPI;
    g = A.pageSizes[y.format].width * A.DPI;
  } else {
    u = A.pageSizes[y.format].width * A.DPI;
    g = A.pageSizes[y.format].height * A.DPI;
  }
  var x = 41, t = p.headerCt.getHeight(), e = Math.floor(g) - t - (y.showHeader ? x : 0);
  if (y.range !== 'complete') {
    var d, a, j, c, r;
    if (y.range === 'date') {
      d = new Date(y.dateFrom);
      a = new Date(y.dateTo);
      a = Sch.util.Date.add(a, Sch.util.Date.DAY, 1);
    } else {
      if (y.range === 'current') {
        j = o.getVisibleDateRange();
        d = j.startDate;
        a = j.endDate;
      }
    }
    c = Math.floor(o.timeAxis.getTickFromDate(d));
    r = Math.floor(o.timeAxis.getTickFromDate(a));
    z = z.filter(function(C, B) {
      return B >= c && B <= r;
    });
    m.setTimeSpan(d, a);
  }
  m.setWidth(u);
  m.setTimeColumnWidth(q);
  if (m.ownerCt) {
    m.ownerCt.suspendLayouts();
  }
  var h = A.calculatePages(y, z, q, u, e), v = {ticks:z, printHeight:e, paperWidth:u, headerHeight:t, styles:k, config:y}, s = A.getExportJsonHtml(h, v);
  A.fireEvent('updateprogressbar', 0.4);
  if (A.printServer) {
    Ext.Ajax.request({type:'POST', url:A.printServer, params:{html:{array:s}, format:y.format, orientation:y.orientation, range:y.range}, success:function(B) {
      A.onSuccess(B, i);
    }, failure:function(B) {
      A.onFailure(B, n);
    }, scope:A});
  } else {
    throw 'Server url not defined !';
  }
  A.restorePanel(b);
}, calculatePages:function(c, p, h, l, b) {
  var m = this, n = m.scheduler, e = n.lockedGrid, a = n.getSchedulingView().rowHeight, k = e.getWidth(), j = Math.floor(l / h), g = Math.floor((l - k) / h), d = Math.ceil((p.length - g) / j) + 1, o = n.getSchedulingView().store.getCount(), i = Math.floor(b / a), f = Math.ceil(o / i);
  return {columnsAmountLocked:g, columnsAmountNormal:j, rowsAmount:i, rowPages:f, columnPages:d, timeColumnWidth:h, lockedGridWidth:k, rowHeight:a, panelHTML:{}};
}, getExportJsonHtml:function(g, y) {
  var B = this, n = B.scheduler, q = g.columnsAmountLocked, s = g.columnsAmountNormal, h = g.rowsAmount, r = g.rowPages, a = g.columnPages, o = g.panelHTML, p = g.timeColumnWidth, x = y.paperWidth, d = y.printHeight, v = y.headerHeight, l = y.styles, z = y.config, A = y.ticks, u = [], j, c, m, e, b, f;
  for (var w = 0; w < a; w += 1) {
    if (w === 0) {
      j = Ext.Number.constrain(q - 1, w, A.length - 1);
      n.setTimeSpan(A[w].start, A[j].end);
    } else {
      if (!c) {
        c = n.lockedGrid.hide();
      }
      if (A[j + s]) {
        n.setTimeSpan(A[j + 1].start, A[j + s].end);
        j = j + s;
      } else {
        n.setTimeSpan(A[j + 1].start, A[A.length - 1].end);
      }
    }
    n.setTimeColumnWidth(p);
    for (var t = 0; t < r; t += 1) {
      B.hideRows(h, t);
      o.dom = n.body.dom.innerHTML;
      o.k = t;
      o.i = w;
      e = B.resizePanelHTML(o);
      m = B.tpl.apply(Ext.apply({bodyClasses:Ext.getBody().dom.className, bodyHeight:d + v, componentClasses:n.el.dom.className, styles:l, showHeader:z.showHeader, HTML:e.dom.innerHTML, totalWidth:x, headerHeight:v, column:w + 1, row:t + 1}));
      f = {html:m};
      u.push(f);
      B.showRows();
    }
  }
  return Ext.JSON.encode(u);
}, resizePanelHTML:function(f) {
  var g = Ext.get(Ext.core.DomHelper.createDom({tag:'div', html:f.dom})), b = this.scheduler, e = b.lockedGrid, c = b.normalGrid;
  var d = [g.select('#' + b.id + '-targetEl').first(), g.select('#' + e.id).first(), g.select('#' + e.body.id).first(), g.select('#' + e.body.child('.x-grid-view').id).first()], a = [g.select('#' + c.id).first(), g.select('#' + c.headerCt.id).first(), g.select('#' + c.body.id).first(), g.select('#' + c.getView().id).first()];
  Ext.Array.each(d, function(h) {
    if (h) {
      h.setHeight('100%');
    }
  });
  Ext.Array.each(a, function(i, h) {
    if (h === 1) {
      i.setWidth('100%');
    } else {
      i.applyStyles({height:'100%', width:'100%'});
    }
  });
  return g;
}, onSuccess:function(a, d) {
  var b = this, c = Ext.JSON.decode(a.responseText);
  b.fireEvent('updateprogressbar', 1);
  if (c.success === true) {
    setTimeout(function() {
      b.fireEvent('hidedialogwindow');
      b.unmask();
      if (b.openAfterExport) {
        window.open(c.url, 'PDF_Print');
      }
    }, b.win ? b.win.hideTime : 3000);
  } else {
    b.fireEvent('showdialogerror', c.msg);
    b.unmask();
  }
  if (d) {
    d.call(this, a);
  }
}, onFailure:function(b, a) {
  this.fireEvent('showdialogerror', this);
  if (a) {
    a.call(this, b);
  }
}, hideRows:function(d, f) {
  var c = this.scheduler.lockedGrid.getEl().select('.x-grid-row'), a = this.scheduler.normalGrid.getEl().select('.x-grid-row'), g = d * f, b = g + d;
  for (var e = 0; e < a.elements.length; e += 1) {
    if (e < g || e >= b) {
      c.elements[e].className += ' sch-none';
      a.elements[e].className += ' sch-none';
    }
  }
}, showRows:function() {
  var b = this.scheduler.lockedGrid.getEl().select('.x-grid-row'), a = this.scheduler.normalGrid.getEl().select('.x-grid-row');
  b.each(function(c) {
    c.removeCls('sch-none');
  });
  a.each(function(c) {
    c.removeCls('sch-none');
  });
}, mask:function() {
  var a = Ext.getBody().mask();
  a.addCls('sch-pdf-mask');
}, unmask:function() {
  Ext.getBody().unmask();
}, restorePanel:function(a) {
  var b = this.scheduler;
  b.setWidth(a.width);
  b.setHeight(a.height);
  b.setTimeSpan(a.startDate, a.endDate);
  b.setTimeColumnWidth(a.columnWidth, true);
  b.getSchedulingView().setRowHeight(a.rowHeight);
  b.lockedGrid.show();
  b.normalGrid.setWidth(a.normalWidth);
  b.normalGrid.setPosition(a.normalPosition[0]);
  b.ownerCt && b.ownerCt.resumeLayouts();
}, destroy:function() {
  if (this.win) {
    this.win.destroy();
  }
}});
Ext.define('Sch.widget.ResizePicker', {extend:'Ext.Panel', alias:'widget.dualrangepicker', width:200, height:200, border:true, collapsible:false, bodyStyle:'position:relative;margin:5px', verticalCfg:{height:120, value:24, increment:2, minValue:20, maxValue:80, reverse:true}, horizontalCfg:{width:120, value:100, minValue:25, increment:5, maxValue:200}, initComponent:function() {
  var a = this;
  a.addEvents('change', 'changecomplete', 'select');
  a.horizontalCfg.value = a.dialog.columnWidth;
  a.verticalCfg.value = a.dialog.rowHeight;
  a.dockedItems = [a.vertical = new Ext.slider.Single(Ext.apply({dock:'left', style:'margin-top:10px', vertical:true, listeners:{change:a.onSliderChange, changecomplete:a.onSliderChangeComplete, scope:a}}, a.verticalCfg)), a.horizontal = new Ext.slider.Single(Ext.apply({dock:'top', style:'margin-left:28px', listeners:{change:a.onSliderChange, changecomplete:a.onSliderChangeComplete, scope:a}}, a.horizontalCfg))];
  a.callParent(arguments);
}, afterRender:function() {
  var b = this;
  b.addCls('sch-ux-range-picker');
  b.valueHandle = this.body.createChild({cls:'sch-ux-range-value', cn:{tag:'span'}});
  b.valueSpan = this.valueHandle.down('span');
  var a = new Ext.dd.DD(this.valueHandle);
  Ext.apply(a, {startDrag:function() {
    b.dragging = true;
    this.constrainTo(b.body);
  }, onDrag:function() {
    b.onHandleDrag.apply(b, arguments);
  }, endDrag:function() {
    b.onHandleEndDrag.apply(b, arguments);
    b.dragging = false;
  }, scope:this});
  this.setValues(this.getValues());
  this.callParent(arguments);
  this.body.on('click', this.onBodyClick, this);
}, onBodyClick:function(c, a) {
  var b = [c.getXY()[0] - 8 - this.body.getX(), c.getXY()[1] - 8 - this.body.getY()];
  this.valueHandle.setLeft(Ext.Number.constrain(b[0], 0, this.getAvailableWidth()));
  this.valueHandle.setTop(Ext.Number.constrain(b[1], 0, this.getAvailableHeight()));
  this.setValues(this.getValuesFromXY([this.valueHandle.getLeft(true), this.valueHandle.getTop(true)]));
  this.onSliderChangeComplete();
}, getAvailableWidth:function() {
  return this.body.getWidth() - 18;
}, getAvailableHeight:function() {
  return this.body.getHeight() - 18;
}, onHandleDrag:function() {
  this.setValues(this.getValuesFromXY([this.valueHandle.getLeft(true), this.valueHandle.getTop(true)]));
}, onHandleEndDrag:function() {
  this.setValues(this.getValuesFromXY([this.valueHandle.getLeft(true), this.valueHandle.getTop(true)]));
}, getValuesFromXY:function(d) {
  var c = d[0] / this.getAvailableWidth();
  var a = d[1] / this.getAvailableHeight();
  var e = Math.round((this.horizontalCfg.maxValue - this.horizontalCfg.minValue) * c);
  var b = Math.round((this.verticalCfg.maxValue - this.verticalCfg.minValue) * a) + this.verticalCfg.minValue;
  return [e + this.horizontalCfg.minValue, b];
}, getXYFromValues:function(d) {
  var b = this.horizontalCfg.maxValue - this.horizontalCfg.minValue;
  var f = this.verticalCfg.maxValue - this.verticalCfg.minValue;
  var a = Math.round((d[0] - this.horizontalCfg.minValue) * this.getAvailableWidth() / b);
  var c = d[1] - this.verticalCfg.minValue;
  var e = Math.round(c * this.getAvailableHeight() / f);
  return [a, e];
}, updatePosition:function() {
  var a = this.getValues();
  var b = this.getXYFromValues(this.getValues());
  this.valueHandle.setLeft(Ext.Number.constrain(b[0], 0, this.getAvailableWidth()));
  this.valueHandle.setTop(Ext.Number.constrain(b[1], 0, this.getAvailableHeight()));
  this.positionValueText();
  this.valueSpan.update('[' + a.toString() + ']');
}, positionValueText:function() {
  var a = this.valueHandle.getTop(true);
  var b = this.valueHandle.getLeft(true);
  this.valueSpan.setLeft(b > 30 ? -30 : 10);
  this.valueSpan.setTop(a > 10 ? -20 : 20);
}, setValues:function(a) {
  this.horizontal.setValue(a[0]);
  if (this.verticalCfg.reverse) {
    this.vertical.setValue(this.verticalCfg.maxValue + this.verticalCfg.minValue - a[1]);
  } else {
    this.vertical.setValue(a[1]);
  }
  if (!this.dragging) {
    this.updatePosition();
  }
  this.positionValueText();
  this.valueSpan.update('[' + a.toString() + ']');
}, getValues:function() {
  var a = this.vertical.getValue();
  if (this.verticalCfg.reverse) {
    a = this.verticalCfg.maxValue - a + this.verticalCfg.minValue;
  }
  return [this.horizontal.getValue(), a];
}, onSliderChange:function() {
  this.fireEvent('change', this, this.getValues());
  if (!this.dragging) {
    this.updatePosition();
  }
}, onSliderChangeComplete:function() {
  this.fireEvent('changecomplete', this, this.getValues());
}, afterLayout:function() {
  this.callParent(arguments);
  this.updatePosition();
}});
Ext.define('Sch.widget.ExportDialogForm', {extend:'Ext.form.Panel', dialog:null, layout:{type:'vbox'}, requires:['Sch.widget.ResizePicker'], border:false, bodyPadding:10, initComponent:function() {
  var b = this, a = b.dialog;
  Ext.apply(this, {fieldDefaults:{labelAlign:'top', labelWidth:100, labelStyle:'font-weight:bold'}, items:[{width:a.getWidth() - 40, xtype:'combo', value:'complete', triggerAction:'all', forceSelection:true, editable:false, fieldLabel:a.rangeFieldLabel, name:'range', itemId:'rangeField', queryMode:'local', displayField:'name', valueField:'value', store:Ext.create('Ext.data.Store', {fields:['name', 'value'], data:[{name:a.completeView, value:'complete'}, {name:a.dateRange, value:'date'}, {name:a.currentView, 
  value:'current'}]})}, {xtype:'dualrangepicker', itemId:'rangePicker', beforeSubTpl:new Ext.XTemplate('\x3cspan class\x3d"sch-pdfexportdialog-pickertext"\x3e' + a.pickerText + ':\x3c/span\x3e'), dialog:a, hidden:true}, {width:a.getWidth() - 40, xtype:'datefield', fieldLabel:b.dateRangeFrom, name:'dateFrom', itemId:'dateFromField', hidden:true, allowBlank:false, cls:'sch-pdfexportdialog-date', beforeSubTpl:new Ext.XTemplate('\x3cspan class\x3d"sch-pdfexportdialog-datelabel"\x3e' + a.dateRangeFrom + 
  ':\x3c/span\x3e'), maxValue:a.endDate, minValue:a.startDate, value:a.startDate, validator:function(e) {
    var d = new Date(e);
    return d >= a.startDate;
  }}, {width:a.getWidth() - 40, xtype:'datefield', name:'dateTo', itemId:'dateToField', hidden:true, allowBlank:false, cls:'sch-pdfexportdialog-date', beforeSubTpl:new Ext.XTemplate('\x3cspan class\x3d"sch-pdfexportdialog-datelabel"\x3e' + a.dateRangeTo + ':\x3c/span\x3e'), maxValue:a.endDate, minValue:a.startDate, value:a.endDate, validator:function(e) {
    var d = new Date(e);
    return d <= a.endDate;
  }}, {width:a.getWidth() - 40, xtype:'checkboxfield', fieldLabel:a.showHeaderLabel, name:'showHeader', checked:true}, {width:a.getWidth() - 40, xtype:'combo', value:'A4', triggerAction:'all', forceSelection:true, editable:false, fieldLabel:a.formatFieldLabel, name:'format', queryMode:'local', store:['A5', 'A4', 'A3', 'Letter']}, {width:a.getWidth() - 40, xtype:'combo', value:'portrait', triggerAction:'all', forceSelection:true, editable:false, afterSubTpl:new Ext.XTemplate('\x3cspan id\x3d"sch-pdfexportdialog-imagePortrait"\x3e\x3c/span\x3e\x3cspan id\x3d"sch-pdfexportdialog-imageLandscape" class\x3d"sch-none"\x3e\x3c/span\x3e'), 
  fieldLabel:a.orientationFieldLabel, name:'orientation', cls:'sch-pdfexportdialog-orientation', itemId:'orientationField', displayField:'name', valueField:'value', queryMode:'local', store:Ext.create('Ext.data.Store', {fields:['name', 'value'], data:[{name:a.orientationPortrait, value:'portrait'}, {name:a.orientationLandscape, value:'landscape'}]})}, new Ext.ProgressBar({text:a.progressBarText, width:a.getWidth() - 40, animate:true, hidden:true, itemId:'progressBar', id:'print-widget-progressbar'})]});
  b.callParent(arguments);
  if (!b.progressBar) {
    b.progressBar = new Ext.ProgressBar({text:a.progressBarText, width:a.getWidth() - 40, animate:true, hidden:true, itemId:'progressBar', id:'print-widget-progressbar'});
  }
  b.items.add(b.progressBar);
  b.dateFromField = b.getComponent('dateFromField');
  b.dateToField = b.getComponent('dateToField');
  b.rangePicker = b.getComponent('rangePicker');
  b.getComponent('orientationField').on('change', b.onChange, b);
  b.getComponent('rangeField').on('change', b.onChange, b);
  b.form.relayEvents(b.dialog, ['updateprogressbar', 'hideprogressbar', 'showprogressbar']);
  var c = {hideprogressbar:b.hideProgressBar, showprogressbar:b.showProgressBar, updateprogressbar:b.updateProgressBar, scope:b};
  b.form.on(c);
}, onChange:function(b, a) {
  if (b.name === 'range') {
    switch(a) {
      case 'complete':
        this.dateFromField.hide();
        this.dateToField.hide();
        this.rangePicker.hide();
        break;
      case 'date':
        this.dateFromField.show();
        this.dateToField.show();
        this.rangePicker.hide();
        break;
      case 'current':
        this.dateFromField.hide();
        this.dateToField.hide();
        this.rangePicker.show();
        this.rangePicker.expand(true);
        break;
    }
  }
  if (b.name === 'orientation') {
    switch(a) {
      case 'landscape':
        Ext.get('sch-pdfexportdialog-imagePortrait').toggleCls('sch-none');
        Ext.get('sch-pdfexportdialog-imageLandscape').toggleCls('sch-none');
        break;
      case 'portrait':
        Ext.get('sch-pdfexportdialog-imagePortrait').toggleCls('sch-none');
        Ext.get('sch-pdfexportdialog-imageLandscape').toggleCls('sch-none');
        break;
    }
  }
}, showProgressBar:function() {
  this.progressBar && this.progressBar.show();
}, hideProgressBar:function() {
  this.progressBar && this.progressBar.hide();
}, updateProgressBar:function(a) {
  this.progressBar && this.progressBar.updateProgress(a);
}, destroy:function() {
  this.progressBar && this.progressBar.destroy();
  this.callParent(arguments);
}});
Ext.define('Sch.widget.ExportDialogButtons', {extend:'Ext.panel.Panel', dialog:null, height:35, border:false, collapsible:false, items:[], initComponent:function() {
  Ext.apply(this, {width:this.dialog.getWidth(), items:[{xtype:'button', scale:'medium', text:this.dialog.exportButtonText, handler:function() {
    var b = this.dialog.form.getForm();
    if (b.isValid()) {
      var a = b.getValues();
      this.dialog.fireEvent('showprogressbar');
      this.dialog.plugin.doExport(a);
    }
  }, scope:this}, {xtype:'button', scale:'medium', text:this.dialog.cancelButtonText, handler:function() {
    this.dialog.hideDialog();
  }, scope:this}]});
  this.callParent(arguments);
}});
Ext.define('Sch.widget.PdfExportDialog', {extend:'Ext.window.Window', alias:'widget.exportdialog', modal:false, width:240, height:310, cls:'sch-pdfexportdialog', frame:false, header:false, title:null, layout:'fit', resizable:false, draggable:true, plugin:null, hideTime:2000, formPanel:null, buttonsPanel:null, progressBar:null, items:[], tpl:Ext.create('Ext.XTemplate', '\x3cdiv class\x3d"sch-pdfexportdialog-header"\x3e\x3ch4\x3e{headerText}\x3c/h4\x3e\x3cspan id\x3d"sch-pdfexportdialog-close"\x3e\x3c/span\x3e\x3c/div\x3e\x3cdiv class\x3d"sch-pdfexportdialog-form" id\x3d"sch-pdfexportdialog-form"\x3e\x3c/div\x3e\x3cdiv class\x3d"sch-pdfexportdialog-msg sch-none"\x3e\x3cspan id\x3d"sch-pdfexportdialog-msg"\x3e\x3c/span\x3e\x3c/div\x3e\x3cdiv class\x3d"sch-pdfexportdialog-button" id\x3d"sch-pdfexportdialog-button"\x3e\x3c/div\x3e', 
{compiled:true}), generalError:'An error occured, try again.', dialogHeader:'PDF Settings', formatFieldLabel:'Paper format', orientationFieldLabel:'Orientation', rangeFieldLabel:'Export range', showHeaderLabel:'Add page number', orientationPortrait:'Portrait', orientationLandscape:'Landscape', completeView:'Complete schedule', currentView:'Current view', dateRange:'Date range', dateRangeFrom:'Export from', pickerText:'Resize column/rows to desired value', dateRangeTo:'Export to', exportButtonText:'Export', 
cancelButtonText:'Cancel', progressBarText:'Exporting...', requires:['Ext.ProgressBar', 'Sch.widget.ExportDialogForm'], constructor:function(a) {
  Ext.apply(this, a.exportDialogConfig);
  this.callParent(arguments);
}, initComponent:function() {
  var b = this, a = {hidedialogwindow:b.hideDialog, showdialogerror:b.showError, updateprogressbar:function(c) {
    b.fireEvent('updateprogressbar', c);
  }, scope:this};
  b.html = b.tpl.apply({headerText:b.dialogHeader});
  b.plugin.on(a);
  b.callParent(arguments);
}, destroy:function() {
  this.form.destroy();
  this.buttons.destroy();
  this.callParent(arguments);
}, afterRender:function() {
  var a = this;
  a.buttons = a.buttonsPanel || new Sch.widget.ExportDialogButtons({renderTo:'sch-pdfexportdialog-button', dialog:a, width:a.getWidth(), height:35});
  a.form = a.formPanel || new Sch.widget.ExportDialogForm({dialog:a, renderTo:'sch-pdfexportdialog-form'});
  a.on('changecomplete', function(c, b) {
    a.plugin.scheduler.setTimeColumnWidth(b[0], true);
    if (a.form.rangePicker.verticalCfg.reverse) {
      var d = b[1] - a.form.rangePicker.verticalCfg.maxValue + a.form.rangePicker.verticalCfg.minValue;
      a.plugin.scheduler.getSchedulingView().setRowHeight(d);
    } else {
      a.plugin.scheduler.getSchedulingView().setRowHeight(b[1]);
    }
  });
  a.form.on('resize', a.setTipHeight, a);
  a.relayEvents(a.form.rangePicker, ['change', 'changecomplete', 'select']);
  Ext.get('sch-pdfexportdialog-close').on('click', a.hideDialog, a);
}, setTipHeight:function() {
  var c = this, a = c.getHeight(), b = c.form.getHeight();
  if (!c.oldFormHeight) {
    c.oldFormHeight = b;
  } else {
    c.form.suspendEvents();
    c.setHeight(c.getHeight() + b - c.oldFormHeight);
    c.form.resumeEvents();
    c.oldFormHeight = b;
  }
}, hideDialog:function() {
  var a = this;
  a.fireEvent('updateprogressbar', 0);
  a.fireEvent('hideprogressbar');
  a.form.show();
  a.form.getForm().reset();
  a.buttons.show();
  a.hide();
}, showError:function(c) {
  var b = this, a;
  c = c || b.generalErrorText;
  b.fireEvent('hideprogressbar');
  b.form.hide();
  b.buttons.hide();
  a = b.getEl().select('.sch-pdfexportdialog-msg').first();
  a.dom.innerHTML = c;
  a.removeCls('sch-none');
  setTimeout(function() {
    a.dom.innerHTML = '';
    a.addCls('sch-none');
    b.hideDialog();
  }, b.hideTime);
}});
Ext.define('Gnt.model.WeekAvailability', {extend:'Sch.model.Range', customizableFields:[{name:'Availability'}], availabilityField:'Availability', set:function(b, a) {
  if (b === this.nameField) {
    Ext.Array.each(this.getAvailability(), function(c) {
      c.setName(a);
    });
  }
  this.callParent(arguments);
}, getAvailability:function() {
  return this.get(this.availabilityField) || [];
}, setAvailability:function(b) {
  var a = this.getName();
  Ext.Array.each(b, function(c) {
    c.setName(a);
  });
  this.set(this.availabilityField, b);
}});
Ext.define('Gnt.model.CalendarDay', {requires:['Ext.data.Types'], extend:'Sch.model.Customizable', idProperty:'Id', customizableFields:[{name:'Date', type:'date', dateFormat:'c', convert:function(b, a) {
  if (!b) {
    return;
  }
  var c = Ext.data.Types.DATE.convert.call(this, b);
  if (c) {
    Ext.Date.clearTime(c);
  }
  if (a.data[a.idProperty] == null) {
    a.data[a.idProperty] = c - 0;
  }
  return c;
}}, {name:'Id'}, {name:'IsWorkingDay', type:'boolean', defaultValue:false}, {name:'Cls', defaultValue:'gnt-holiday'}, 'Name', {name:'Availability', convert:function(b, a) {
  if (b) {
    return Ext.typeOf(b) === 'string' ? [b] : b;
  } else {
    return [];
  }
}}], availabilityCache:null, dateField:'Date', isWorkingDayField:'IsWorkingDay', clsField:'Cls', nameField:'Name', availabilityField:'Availability', setDate:function(b) {
  var a = Ext.Date.clearTime(b, true);
  this.data[this.idProperty] = a - 0;
  this.set(this.dateField, a);
}, clearDate:function() {
  this.data[this.idProperty] = null;
}, getAvailability:function(b) {
  var c = this;
  if (b) {
    return this.get(this.availabilityField);
  }
  if (this.availabilityCache) {
    return this.availabilityCache;
  }
  var a = [];
  Ext.Array.each(this.get(this.availabilityField), function(d) {
    a.push(Ext.typeOf(d) === 'string' ? c.parseInterval(d) : d);
  });
  this.verifyAvailability(a);
  return this.availabilityCache = a;
}, setAvailability:function(a) {
  this.availabilityCache = null;
  this.set(this.availabilityField, this.stringifyIntervals(a));
  this.getAvailability();
}, verifyAvailability:function(b) {
  b.sort(function(f, e) {
    return f.startTime - e.startTime;
  });
  Ext.Array.each(b, function(e) {
    if (e.startTime > e.endTime) {
      throw 'Start time is greater than end time';
    }
  });
  for (var a = 1; a < b.length; a++) {
    var c = b[a - 1];
    var d = b[a];
    if (c.endTime > d.startTime) {
      throw 'Availability intervals should not intersect';
    }
  }
}, prependZero:function(a) {
  return a < 10 ? '0' + a : a;
}, stringifyInterval:function(b) {
  var c = b.startTime;
  var a = b.endTime;
  return this.prependZero(c.getHours()) + ':' + this.prependZero(c.getMinutes()) + '-' + this.prependZero(a.getHours()) + ':' + this.prependZero(a.getMinutes());
}, stringifyIntervals:function(b) {
  var c = this;
  var a = [];
  Ext.Array.each(b, function(d) {
    if (Ext.typeOf(d) === 'string') {
      a.push(d);
    } else {
      a.push(c.stringifyInterval(d));
    }
  });
  return a;
}, parseInterval:function(b) {
  var a = /(\d\d):(\d\d)-(\d\d):(\d\d)/.exec(b);
  if (!a) {
    throw 'Invalid format for availability string: ' + b + '. It should have exact format: hh:mm-hh:mm';
  }
  return {startTime:new Date(0, 0, 0, a[1], a[2]), endTime:new Date(0, 0, 0, a[3], a[4])};
}, getTotalHours:function() {
  return this.getTotalMS() / 1000 / 60 / 60;
}, getTotalMS:function() {
  var a = 0;
  Ext.Array.each(this.getAvailability(), function(b) {
    a += b.endTime - b.startTime;
  });
  return a;
}, addAvailabilityInterval:function(d, b) {
  var a;
  if (d instanceof Date) {
    a = {startTime:d, endTime:b};
  } else {
    a = this.parseInterval(d + (b ? '-' + b : ''));
  }
  var c = this.getAvailability().concat(a);
  this.verifyAvailability(c);
  this.setAvailability(c);
}, removeAvailbilityInterval:function(a) {
  var b = this.getAvailability();
  b.splice(a, 1);
  this.setAvailability(b);
}, getAvailabilityIntervalsFor:function(d) {
  d = typeof d == 'number' ? new Date(d) : d;
  var c = d.getFullYear();
  var e = d.getMonth();
  var b = d.getDate();
  var a = [];
  Ext.Array.each(this.getAvailability(), function(f) {
    var g = f.endTime.getDate();
    a.push({startDate:new Date(c, e, b, f.startTime.getHours(), f.startTime.getMinutes()), endDate:new Date(c, e, b + (g == 1 ? 1 : 0), f.endTime.getHours(), f.endTime.getMinutes())});
  });
  return a;
}, getAvailabilityStartFor:function(b) {
  var a = this.getAvailabilityIntervalsFor(b);
  if (!a.length) {
    return null;
  }
  return a[0].startDate;
}, getAvailabilityEndFor:function(b) {
  var a = this.getAvailabilityIntervalsFor(b);
  if (!a.length) {
    return null;
  }
  return a[a.length - 1].endDate;
}});
Ext.define('Gnt.model.Assignment', {extend:'Sch.model.Customizable', idProperty:'Id', customizableFields:[{name:'Id'}, {name:'ResourceId'}, {name:'TaskId'}, {name:'Units', type:'float', defaultValue:100}], resourceIdField:'ResourceId', taskIdField:'TaskId', unitsField:'Units', isPersistable:function() {
  var a = this.getTask(), b = this.getResource();
  return a && !a.phantom && b && !b.phantom;
}, getUnits:function() {
  return Math.max(0, this.get(this.unitsField));
}, setUnits:function(a) {
  if (a < 0) {
    throw "`Units` value for an assignment can't be less than 0";
  }
  this.set(this.unitsField, a);
}, getResourceName:function() {
  var a = this.stores[0].getResourceStore().getById(this.getResourceId());
  if (a) {
    return a.getName();
  }
  return '';
}, getTask:function(a) {
  return (a || this.stores[0].getTaskStore()).getById(this.getTaskId());
}, getResource:function() {
  return this.stores[0].getResourceStore().getByInternalId(this.getResourceId());
}, getInternalId:function() {
  return this.getId() || this.internalId;
}, getEffort:function(b) {
  var a = this.getTask();
  var c = 0;
  a.forEachAvailabilityIntervalWithResources({startDate:a.getStartDate(), endDate:a.getEndDate(), resources:[this.getResource()]}, function(g, f, e) {
    var h;
    for (var d in e) {
      h = e[d].units;
    }
    c += (f - g) * h / 100;
  });
  return a.getProjectCalendar().convertMSDurationToUnit(c, b || a.getEffortUnit());
}});
Ext.define('Gnt.model.Dependency', {extend:'Sch.model.Customizable', inheritableStatics:{Type:{StartToStart:0, StartToEnd:1, EndToStart:2, EndToEnd:3}}, idProperty:'Id', customizableFields:[{name:'Id'}, {name:'From'}, {name:'To'}, {name:'Type', type:'int', defaultValue:2}, {name:'Lag', type:'int', defaultValue:0}, {name:'Cls'}], fromField:'From', toField:'To', typeField:'Type', lagField:'Lag', clsField:'Cls', constructor:function(a) {
  this.callParent(arguments);
  if (a) {
    if (a.fromTask) {
      if (a.fromTask instanceof Gnt.model.Task) {
        this.setSourceTask(a.fromTask);
      } else {
        this.setSourceId(a.fromTask);
      }
    }
    if (a.toTask) {
      if (a.toTask instanceof Gnt.model.Task) {
        this.setTargetTask(a.toTask);
      } else {
        this.setTargetId(a.toTask);
      }
    }
    if (Ext.isDefined(a.type)) {
      this.setType(a.type);
    }
  }
}, getTaskStore:function() {
  return this.stores[0].taskStore;
}, getSourceTask:function(a) {
  return this.getTaskStore().getById(this.getSourceId());
}, setSourceTask:function(a) {
  this.setSourceId(a.getId() || a.internalId);
}, getTargetTask:function() {
  return this.getTaskStore().getById(this.getTargetId());
}, setTargetTask:function(a) {
  this.setTargetId(a.getId() || a.internalId);
}, getSourceId:function() {
  return this.get(this.fromField);
}, setSourceId:function(a) {
  this.set(this.fromField, a);
}, getTargetId:function() {
  return this.get(this.toField);
}, setTargetId:function(a) {
  this.set(this.toField, a);
}, isPersistable:function() {
  var a = this.getSourceTask(), b = this.getTargetTask();
  return a && !a.phantom && b && !b.phantom;
}, isValid:function(a) {
  var b = this.callParent(arguments);
  if (b && this.stores[0]) {
    b = this.stores[0].isValidDependency(this.getSourceId(), this.getTargetId(), true);
  }
  return b;
}});
Ext.define('Gnt.model.Resource', {extend:'Sch.model.Resource', customizableFields:['CalendarId'], calendarIdField:'CalendarId', getTaskStore:function() {
  return this.stores[0].getTaskStore();
}, getEventStore:function() {
  return this.getTaskStore();
}, getEvents:function() {
  return this.getTasks();
}, getTasks:function() {
  var a = [];
  this.forEachAssignment(function(b) {
    var c = b.getTask();
    if (c) {
      a.push(c);
    }
  });
  return a;
}, getCalendar:function(a) {
  return a ? this.getOwnCalendar() : this.getOwnCalendar() || this.getProjectCalendar();
}, getOwnCalendar:function() {
  var a = this.getCalendarId();
  return a ? Gnt.data.Calendar.getCalendar(a) : null;
}, getProjectCalendar:function() {
  return this.stores[0].getTaskStore().getCalendar();
}, setCalendar:function(a) {
}, getInternalId:function() {
  return this.getId() || this.internalId;
}, assignTo:function(a, c) {
  var b = a instanceof Gnt.model.Task ? a : this.getTaskStore().getById(a);
  return b.assign(this, c);
}, unassignFrom:function() {
  return this.unAssignFrom.apply(this, arguments);
}, unAssignFrom:function(a) {
  var b = a instanceof Gnt.model.Task ? a : this.getTaskStore().getById(a);
  b.unAssign(this);
}, forEachAssignment:function(b, a) {
  a = a || this;
  var c = this.getInternalId();
  this.getTaskStore().getAssignmentStore().each(function(d) {
    if (d.getResourceId() == c) {
      return b.call(a, d);
    }
  });
}, collectAvailabilityIntervalPoints:function(e, f, b, h, c) {
  for (var d = 0; d < e.length; d++) {
    var a = e[d];
    var g = a.startDate - 0;
    var i = a.endDate - 0;
    if (!h[g]) {
      h[g] = [];
      c.push(g);
    }
    h[g].push(f(g));
    if (!h[i]) {
      h[i] = [];
      c.push(i);
    }
    h[i].push(b(i));
  }
}, forEachAvailabilityIntervalWithTasks:function(d, f, a) {
  a = a || this;
  var c = d.startDate;
  var t = d.endDate;
  if (!c || !t) {
    throw 'Both `startDate` and `endDate` are required for `forEachAvailabilityIntervalWithTasks`';
  }
  var g = new Date(c);
  var u = d.includeAllIntervals;
  var p = this.getCalendar();
  var l = [];
  var n = [];
  var b = [];
  this.forEachAssignment(function(k) {
    var i = k.getTask();
    if (i.getStartDate() > t || i.getEndDate() < c) {
      return;
    }
    n.push(i);
    b.push(i.getCalendar());
    l.push(k);
  });
  if (!n.length) {
    return;
  }
  var e = Sch.util.Date;
  var y = [c - 0, t - 0];
  var j = {};
  j[c - 0] = [{type:'00-intervalStart'}];
  j[t - 0] = [{type:'00-intervalEnd'}];
  var s;
  while (g < t) {
    this.collectAvailabilityIntervalPoints(p.getAvailabilityIntervalsFor(g), function() {
      return {type:'00-resourceAvailabilityStart'};
    }, function() {
      return {type:'01-resourceAvailabilityEnd'};
    }, j, y);
    for (s = 0; s < b.length; s++) {
      this.collectAvailabilityIntervalPoints(b[s].getAvailabilityIntervalsFor(g), function() {
        return {type:'02-taskAvailabilityStart', assignment:l[s], taskId:n[s].getInternalId(), units:l[s].getUnits()};
      }, function() {
        return {type:'03-taskAvailabilityEnd', taskId:n[s].getInternalId()};
      }, j, y);
    }
    g = e.getStartOfNextDay(g);
  }
  y.sort();
  var v = false;
  var w = {};
  var m = 0;
  for (s = 0; s < y.length - 1; s++) {
    var r = j[y[s]];
    r.sort(function(k, i) {
      return k.type < i.type;
    });
    for (var q = 0; q < r.length; q++) {
      var o = r[q];
      if (o.type == '00-resourceAvailabilityStart') {
        v = true;
      }
      if (o.type == '01-resourceAvailabilityEnd') {
        v = false;
      }
      if (o.type == '02-taskAvailabilityStart') {
        w[o.taskId] = o;
        m++;
      }
      if (o.type == '03-taskAvailabilityEnd') {
        delete w[o.taskId];
        m--;
      }
    }
    if (u || v && m) {
      var x = y[s];
      var h = y[s + 1];
      if (x > t || h < c) {
        continue;
      }
      if (x < c) {
        x = c - 0;
      }
      if (h > t) {
        h = t - 0;
      }
      if (f.call(a, x, h, w) === false) {
        return false;
      }
    }
  }
}, getAllocationInfo:function(a) {
  var b = [];
  this.forEachAvailabilityIntervalWithTasks(a, function(h, g, f) {
    var e = 0;
    var c = [];
    for (var d in f) {
      e += f[d].units;
      c.push(f[d].assignment);
    }
    b.push({startDate:new Date(h), endDate:new Date(g), totalAllocation:e, assignments:c});
  });
  return b;
}});
Ext.define('Gnt.model.task.More', {indent:function() {
  var a = this.previousSibling;
  if (a) {
    this.isMove = true;
    a.appendChild(this);
    delete this.isMove;
    a.set('leaf', false);
    a.expand();
  }
}, outdent:function() {
  var a = this.parentNode;
  if (a && !a.isRoot()) {
    a.set('leaf', a.childNodes.length === 1);
    this.isMove = true;
    if (a.nextSibling) {
      a.parentNode.insertBefore(this, a.nextSibling);
    } else {
      a.parentNode.appendChild(this);
    }
    delete this.isMove;
  }
}, getAllDependencies:function(a) {
  a = a || this.getDependencyStore();
  return a.getDependenciesForTask(this);
}, hasIncomingDependencies:function(a) {
  var c = this.getId() || this.internalId;
  a = a || this.getDependencyStore();
  var b = a.findBy(function(d) {
    return d.getTargetId() == c;
  });
  return b >= 0;
}, getIncomingDependencies:function(a) {
  a = a || this.getDependencyStore();
  return a.getIncomingDependenciesForTask(this);
}, getOutgoingDependencies:function(a) {
  a = a || this.getDependencyStore();
  return a.getOutgoingDependenciesForTask(this);
}, constrain:function(c) {
  if (this.isManuallyScheduled()) {
    return false;
  }
  var e = false;
  c = c || this.getTaskStore();
  var b = this.getConstrainContext(c);
  if (b) {
    var a = b.startDate;
    var d = b.endDate;
    if (a && a - this.getStartDate() !== 0) {
      this.setStartDate(a, true, c.skipWeekendsDuringDragDrop);
      e = true;
    } else {
      if (d && d - this.getEndDate() !== 0) {
        this.setEndDate(d, true, c.skipWeekendsDuringDragDrop);
        e = true;
      }
    }
  }
  return e;
}, getConstrainContext:function(f) {
  var g = this.getIncomingDependencies();
  if (!g.length) {
    return null;
  }
  var h = f || this.getTaskStore(), a = Gnt.model.Dependency.Type, c = new Date(0), b = new Date(0), i = Ext.Date, e = this.getCalendar(), d;
  Ext.each(g, function(l) {
    var k = l.getSourceTask();
    if (k) {
      var n = l.getLag() || 0, m = k.getStartDate(), j = k.getEndDate();
      switch(l.getType()) {
        case a.StartToEnd:
          m = e.skipWorkingDays(m, n);
          if (b < m) {
            b = m;
            d = k;
          }
          break;
        case a.StartToStart:
          m = e.skipWorkingDays(m, n);
          if (c < m) {
            c = m;
            d = k;
          }
          break;
        case a.EndToStart:
          j = e.skipWorkingDays(j, n);
          if (c < j) {
            c = j;
            d = k;
          }
          break;
        case a.EndToEnd:
          j = e.skipWorkingDays(j, n);
          if (b < j) {
            b = j;
            d = k;
          }
          break;
        default:
          throw 'Invalid dependency type: ' + l.getType();
      }
    }
  });
  return {startDate:c > 0 ? c : null, endDate:b > 0 ? b : null, constrainingTask:d};
}, getCriticalPaths:function() {
  var b = [this], a = this.getConstrainContext();
  while (a) {
    b.push(a.constrainingTask);
    a = a.constrainingTask.getConstrainContext();
  }
  return b;
}, cascadeChanges:function(a, b) {
  a = a || this.getTaskStore();
  if (this.isLeaf()) {
    if (this.constrain(a)) {
      this.recalculateParents();
      b.nbrAffected++;
    }
  }
  Ext.each(this.getOutgoingDependencies(), function(c) {
    var d = c.getTargetTask();
    if (d && !d.isManuallyScheduled()) {
      d.cascadeChanges(a, b);
    }
  });
}, addSubtask:function(a) {
  this.set('leaf', false);
  this.appendChild(a);
  this.expand();
}, addSuccessor:function(b) {
  var c = this.rec, e = this.getTaskStore(), d = this.getDependencyStore();
  b = b || new this.self();
  b.calendar = b.calendar || this.getCalendar();
  b.taskStore = e;
  b.setStartDate(this.getEndDate(), true, e.skipWeekendsDuringDragDrop);
  b.setDuration(1, Sch.util.Date.DAY);
  this.addTaskBelow(b);
  var a = new d.model({fromTask:this, toTask:b, type:d.model.Type.EndToStart});
  d.add(a);
}, addMilestone:function(c) {
  var b = this.getTaskStore();
  c = c || new this.self();
  var a = this.getEndDate();
  if (a) {
    c.calendar = c.calendar || this.getCalendar();
    c.setStartEndDate(a, a, b.skipWeekendsDuringDragDrop);
  }
  this.addTaskBelow(c);
}, addPredecessor:function(c) {
  var b = this.getDependencyStore();
  c = c || new this.self();
  c.calendar = c.calendar || this.getCalendar();
  c.beginEdit();
  c.set(this.startDateField, c.calculateStartDate(this.getStartDate(), 1, Sch.util.Date.DAY));
  c.set(this.endDateField, this.getStartDate());
  c.set(this.durationField, 1);
  c.set(this.durationUnitField, Sch.util.Date.DAY);
  c.endEdit();
  this.addTaskAbove(c);
  var a = new b.model({fromTask:c, toTask:this, type:b.model.Type.EndToStart});
  b.add(a);
}, getSuccessors:function() {
  var h = this.getId() || this.internalId;
  var e = e || this.getDependencyStore();
  var c = this.getTaskStore(), g = [];
  for (var f = 0, a = e.getCount(); f < a; f++) {
    var d = e.getAt(f);
    if (d.getSourceId() == h) {
      var b = d.getTargetTask();
      if (b) {
        g.push(b);
      }
    }
  }
  return g;
}, getPredecessors:function() {
  var g = this.getId() || this.internalId;
  var d = d || this.getDependencyStore();
  var b = this.getTaskStore(), f = [];
  for (var e = 0, a = d.getCount(); e < a; e++) {
    var c = d.getAt(e);
    if (c.getTargetId() == g) {
      f.push(c.getSourceTask());
    }
  }
  return f;
}, addTaskAbove:function(a) {
  a = a || new this.self();
  this.parentNode.insertBefore(a, this);
}, addTaskBelow:function(a) {
  a = a || new this.self();
  if (this.nextSibling) {
    this.parentNode.insertBefore(a, this.nextSibling);
  } else {
    this.parentNode.appendChild(a);
  }
}, isAbove:function(a) {
  var b = this, c = Math.min(b.data.depth, a.data.depth);
  while (b.data.depth > c) {
    b = b.parentNode;
  }
  while (a.data.depth > c) {
    a = a.parentNode;
  }
  while (a.parentNode !== b.parentNode) {
    a = a.parentNode;
    b = b.parentNode;
  }
  return a.data.index > b.data.index;
}});
Ext.define('Gnt.model.Task', {extend:'Sch.model.Range', requires:['Sch.util.Date', 'Ext.data.NodeInterface'], mixins:['Gnt.model.task.More'], idProperty:'Id', customizableFields:[{name:'Id'}, {name:'Duration', type:'number', useNull:true}, {name:'Effort', type:'number', useNull:true}, {name:'EffortUnit', type:'string', defaultValue:'h'}, {name:'CalendarId', type:'string'}, {name:'DurationUnit', type:'string', defaultValue:'d', convert:function(a) {
  return a || 'd';
}}, {name:'PercentDone', type:'int', defaultValue:0}, {name:'ManuallyScheduled', type:'boolean', defaultValue:false}, {name:'SchedulingMode', type:'string', defaultValue:'Normal'}, {name:'BaselineStartDate', type:'date', dateFormat:'c'}, {name:'BaselineEndDate', type:'date', dateFormat:'c'}, {name:'BaselinePercentDone', type:'int', defaultValue:0}, {name:'Draggable', type:'boolean', persist:false, defaultValue:true}, {name:'Resizable', persist:false}, {name:'PhantomId', type:'string'}, {name:'PhantomParentId', 
type:'string'}], draggableField:'Draggable', resizableField:'Resizable', nameField:'Name', durationField:'Duration', durationUnitField:'DurationUnit', effortField:'Effort', effortUnitField:'EffortUnit', percentDoneField:'PercentDone', manuallyScheduledField:'ManuallyScheduled', schedulingModeField:'SchedulingMode', calendarIdField:'CalendarId', baselineStartDateField:'BaselineStartDate', baselineEndDateField:'BaselineEndDate', baselinePercentDoneField:'BaselinePercentDone', calendar:null, dependencyStore:null, 
taskStore:null, phantomIdField:'PhantomId', phantomParentIdField:'PhantomParentId', normalized:false, recognizedSchedulingModes:['Normal', 'Manual', 'FixedDuration', 'EffortDriven', 'DynamicAssignment'], constructor:function() {
  this.getModifiedFieldNames = function() {
    if (this.__isFilling__) {
      return [];
    }
    delete this.getModifiedFieldNames;
    return this.getModifiedFieldNames();
  };
  this.callParent(arguments);
}, normalize:function() {
  var c = this.getDuration(), g = this.getDurationUnit(), b = this.getStartDate(), f = this.getEndDate(), e = this.getSchedulingMode(), d = this.data;
  if (f && this.inclusiveEndDate) {
    var i = this.fields.getByKey(this.endDateField).dateFormat;
    var a = i && !Ext.Date.formatContainsHourInfo(i) || f.getHours() === 0 && f.getMinutes() === 0 && f.getSeconds() === 0 && f.getMilliseconds() === 0;
    if (a) {
      if (Ext.isNumber(c)) {
        f = d[this.endDateField] = this.calculateEndDate(b, c, g);
      } else {
        f = d[this.endDateField] = Ext.Date.add(f, Ext.Date.DAY, 1);
      }
    }
  }
  if (c == null && b && f) {
    d[this.durationField] = this.calculateDuration(b, f, g);
  }
  if ((e == 'Normal' || this.isManuallyScheduled()) && f == null && b && Ext.isNumber(c)) {
    d[this.endDateField] = this.calculateEndDate(b, c, g);
  }
  if (e == 'EffortDriven' || e == 'FixedDuration') {
    var j = this.get(this.effortField), h = this.getEffortUnit();
    if (j == null && b && f) {
      d[this.effortField] = this.calculateEffort(b, f, h);
    }
    if (f == null && b && j) {
      d[this.endDateField] = this.calculateEffortDrivenEndDate(b, j, h);
      if (c == null) {
        d[this.durationField] = this.calculateDuration(b, d[this.endDateField], g);
      }
    }
  }
  this.normalized = true;
}, normalizeEffort:function() {
  var c = this.childNodes;
  var b = 0;
  for (var a = 0; a < c.length; a++) {
    var d = c[a];
    if (!d.isLeaf()) {
      d.normalizeEffort();
    }
    b += d.getEffort('MILLI');
  }
  if (this.getEffort('MILLI') != b) {
    this.data[this.effortField] = this.getProjectCalendar().convertMSDurationToUnit(b, this.getEffortUnit());
  }
}, getInternalId:function() {
  return this.getId() || this.internalId;
}, getCalendar:function(a) {
  return a ? this.getOwnCalendar() : this.getOwnCalendar() || this.getProjectCalendar();
}, getOwnCalendar:function() {
  var a = this.get(this.calendarIdField);
  return a ? Gnt.data.Calendar.getCalendar(a) : this.calendar;
}, getProjectCalendar:function() {
  var a = this.stores[0];
  var b = a && a.getCalendar && a.getCalendar() || this.parentNode && this.parentNode.getProjectCalendar() || this.isRoot() && this.calendar;
  if (!b) {
    Ext.Error.raise("Can't find a project calendar in `getProjectCalendar`");
  }
  return b;
}, setCalendar:function(a) {
  this.calendar = a;
}, getDependencyStore:function() {
  var a = this.dependencyStore || this.getTaskStore().dependencyStore;
  if (!a) {
    Ext.Error.raise("Can't find a dependencyStore in `getDependencyStore`");
  }
  return a;
}, getResourceStore:function() {
  return this.getTaskStore().getResourceStore();
}, getAssignmentStore:function() {
  return this.getTaskStore().getAssignmentStore();
}, getTaskStore:function(b) {
  if (this.taskStore) {
    return this.taskStore;
  }
  var a = this.stores[0] && this.stores[0].taskStore || this.parentNode && this.parentNode.getTaskStore(b);
  if (!a && !b) {
    Ext.Error.raise("Can't find a taskStore in `getTaskStore`");
  }
  return this.taskStore = a;
}, isManuallyScheduled:function() {
  return this.get(this.schedulingModeField) == 'Manual' || this.get(this.manuallyScheduledField);
}, setManuallyScheduled:function(a) {
  if (a) {
    this.set(this.schedulingModeField, 'Manual');
  } else {
    if (this.get(this.schedulingModeField) == 'Manual') {
      this.set(this.schedulingModeField, 'Normal');
    }
  }
  return this.set(this.manuallyScheduledField, a);
}, setSchedulingMode:function(a) {
  if (Ext.Array.indexOf(this.recognizedSchedulingModes, a) == -1) {
    throw 'Unrecognized scheduling mode: ' + a;
  }
  this.beginEdit();
  this.set(this.schedulingModeField, a);
  if (a === 'FixedDuration') {
    this.updateEffortBasedOnDuration();
  }
  if (a === 'EffortDriven') {
    this.updateDurationBasedOnEffort();
  }
  this.endEdit();
}, skipNonWorkingTime:function(b, c) {
  var a = false;
  this.forEachAvailabilityIntervalWithResources(c ? {startDate:b} : {endDate:b, isForward:false}, function(f, e, d) {
    b = c ? f : e;
    a = true;
    return false;
  });
  return a ? new Date(b) : this.getCalendar().skipNonWorkingTime(b, c);
}, setStartDate:function(a, f, e) {
  this.beginEdit();
  var d = this.getCalendar();
  if (e && !this.isManuallyScheduled()) {
    if (!this.isMilestone() || d.isHoliday(a - 1)) {
      a = this.skipNonWorkingTime(a, true);
    }
  }
  var b = this.getSchedulingMode();
  this.set(this.startDateField, a);
  if (f !== false) {
    if (b == 'EffortDriven') {
      this.set(this.endDateField, this.calculateEffortDrivenEndDate(a, this.getEffort()));
    } else {
      var c = this.getDuration();
      if (Ext.isNumber(c)) {
        this.set(this.endDateField, this.calculateEndDate(a, c, this.getDurationUnit()));
      }
    }
  } else {
    if (this.getEndDate()) {
      this.set(this.durationField, this.calculateDuration(a, this.getEndDate(), this.getDurationUnit()));
    }
  }
  this.onPotentialEffortChange();
  this.endEdit();
}, setEndDate:function(a, e, d) {
  this.beginEdit();
  var c = this.getCalendar();
  if (d && !this.isManuallyScheduled()) {
    a = this.skipNonWorkingTime(a, false);
  }
  if (e !== false) {
    var b = this.getDuration();
    if (Ext.isNumber(b)) {
      this.set(this.startDateField, this.calculateStartDate(a, b, this.getDurationUnit()));
      this.set(this.endDateField, a);
    } else {
      this.set(this.endDateField, a);
    }
  } else {
    this.set(this.endDateField, a);
    if (this.getStartDate()) {
      this.set(this.durationField, this.calculateDuration(this.getStartDate(), a, this.getDurationUnit()));
    }
  }
  this.onPotentialEffortChange();
  this.endEdit();
}, setStartEndDate:function(a, b, c) {
  this.beginEdit();
  if (c && !this.isManuallyScheduled()) {
    a = a && this.skipNonWorkingTime(a, true);
    b = b && this.skipNonWorkingTime(b, false);
  }
  this.set(this.startDateField, a);
  this.set(this.endDateField, b);
  this.set(this.durationField, this.calculateDuration(a, b, this.getDurationUnit()));
  this.onPotentialEffortChange();
  this.endEdit();
}, getDuration:function(a) {
  if (!a) {
    return this.get(this.durationField);
  }
  var b = this.getProjectCalendar(), c = b.convertDurationToMs(this.get(this.durationField), this.get(this.durationUnitField));
  return b.convertMSDurationToUnit(c, a);
}, getEffort:function(a) {
  var b = this.get(this.effortField) || 0;
  if (!a) {
    return b;
  }
  var c = this.getProjectCalendar(), d = c.convertDurationToMs(b, this.get(this.effortUnitField));
  return c.convertMSDurationToUnit(d, a);
}, setEffort:function(b, a) {
  a = a || this.get(this.effortUnitField);
  this.beginEdit();
  this.set(this.effortField, b);
  this.set(this.effortUnitField, a);
  if (this.getSchedulingMode() === 'EffortDriven') {
    this.updateDurationBasedOnEffort();
  }
  if (this.getSchedulingMode() === 'DynamicAssignment') {
    this.updateAssignments();
  }
  this.endEdit();
}, getCalendarDuration:function(a) {
  return this.getProjectCalendar().convertMSDurationToUnit(this.getEndDate() - this.getStartDate(), a || this.get(this.durationUnitField));
}, setDuration:function(b, a) {
  a = a || this.get(this.durationUnitField);
  this.beginEdit();
  this.set(this.endDateField, this.calculateEndDate(this.getStartDate(), b, a));
  this.set(this.durationField, b);
  this.set(this.durationUnitField, a);
  this.onPotentialEffortChange();
  this.endEdit();
}, calculateStartDate:function(e, d, c) {
  c = c || this.getDurationUnit();
  if (this.isManuallyScheduled()) {
    return Sch.util.Date.add(a, c, -d);
  } else {
    if (this.getTaskStore(true) && this.hasAssignments()) {
      var b = this.getProjectCalendar().convertDurationToMs(d, c || this.getDurationUnit());
      var a;
      this.forEachAvailabilityIntervalWithResources({endDate:e, isForward:false}, function(i, h, g) {
        var f = h - i;
        if (f >= b) {
          a = new Date(h - b);
          return false;
        } else {
          b -= f;
        }
      });
      return a;
    } else {
      return this.getCalendar().calculateStartDate(e, d, c);
    }
  }
}, calculateEndDate:function(a, e, c) {
  c = c || this.getDurationUnit();
  if (this.isManuallyScheduled()) {
    return Sch.util.Date.add(a, c, e);
  } else {
    if (this.getTaskStore(true) && this.hasAssignments()) {
      var b = this.getProjectCalendar().convertDurationToMs(e, c || this.getDurationUnit());
      var d;
      this.forEachAvailabilityIntervalWithResources({startDate:a}, function(i, h, g) {
        var f = h - i;
        if (f >= b) {
          d = new Date(i + b);
          return false;
        } else {
          b -= f;
        }
      });
      return d;
    } else {
      return this.getCalendar().calculateEndDate(a, e, c);
    }
  }
}, calculateDuration:function(a, c, b) {
  b = b || this.getDurationUnit();
  if (!a || !c) {
    return 0;
  }
  if (this.isManuallyScheduled()) {
    return this.getProjectCalendar().convertMSDurationToUnit(c - a, b);
  } else {
    if (this.getTaskStore(true) && this.hasAssignments()) {
      var d = 0;
      this.forEachAvailabilityIntervalWithResources({startDate:a, endDate:c}, function(g, f, e) {
        d += f - g;
      });
      return this.getProjectCalendar().convertMSDurationToUnit(d, b);
    } else {
      return this.getCalendar().calculateDuration(a, c, b);
    }
  }
}, forEachAvailabilityIntervalWithResources:function(f, h, a) {
  a = a || this;
  var C = this;
  var d = f.startDate;
  var z = f.endDate;
  var p = f.isForward !== false;
  if (p ? !d : !z) {
    throw new Error('At least `startDate` or `endDate` is required, depending from the `isForward` option');
  }
  var j = new Date(p ? d : z);
  var b = f.includeEmptyIntervals;
  var c = this.getOwnCalendar();
  var G = Boolean(c);
  var E = this.getProjectCalendar();
  var A, v, r;
  if (f.resources) {
    A = f.resources;
    r = [];
    v = [];
    Ext.each(A, function(i) {
      v.push(i.getCalendar());
      r.push(C.getAssignmentFor(i));
    });
  } else {
    r = this.getAssignments();
    if (!r.length) {
      return;
    }
    A = [];
    v = [];
    Ext.each(r, function(k) {
      var i = k.getResource();
      A.push(i);
      v.push(i.getCalendar());
    });
  }
  var g = Sch.util.Date;
  var y, u, B, D, n;
  var t = p ? !z : !d;
  while (t || (p ? j < z : j > d)) {
    var q = {};
    var F = [];
    if (G) {
      var l = c.getAvailabilityIntervalsFor(j - (p ? 0 : 1));
      for (u = 0; u < l.length; u++) {
        B = l[u];
        D = B.startDate - 0;
        n = B.endDate - 0;
        if (!q[D]) {
          q[D] = [];
          F.push(D);
        }
        q[D].push({type:'00-taskAvailailabilityStart', typeBackward:'01-taskAvailailabilityStart'});
        F.push(n);
        q[n] = q[n] || [];
        q[n].push({type:'01-taskAvailailabilityEnd', typeBackward:'00-taskAvailailabilityEnd'});
      }
    }
    for (y = 0; y < v.length; y++) {
      var e = v[y].getAvailabilityIntervalsFor(j);
      for (u = 0; u < e.length; u++) {
        B = e[u];
        D = B.startDate - 0;
        n = B.endDate - 0;
        if (!q[D]) {
          q[D] = [];
          F.push(D);
        }
        q[D].push({type:'02-resourceAvailailabilityStart', typeBackward:'03-resourceAvailailabilityStart', assignment:r[y], resourceId:A[y].getInternalId(), units:r[y].getUnits()});
        if (!q[n]) {
          q[n] = [];
          F.push(n);
        }
        q[n].push({type:'03-resourceAvailailabilityEnd', typeBackward:'02-resourceAvailailabilityEnd', assignment:r[y], resourceId:A[y].getInternalId(), units:r[y].getUnits()});
      }
    }
    F.sort();
    var x = false;
    var o = {};
    var m = 0;
    var w, s;
    if (p) {
      for (y = 0; y < F.length; y++) {
        w = q[F[y]];
        w.sort(function(k, i) {
          return k.type < i.type;
        });
        for (u = 0; u < w.length; u++) {
          s = w[u];
          if (s.type == '00-taskAvailailabilityStart') {
            x = true;
          }
          if (s.type == '01-taskAvailailabilityEnd') {
            x = false;
          }
          if (s.type == '02-resourceAvailailabilityStart') {
            o[s.resourceId] = s;
            m++;
          }
          if (s.type == '03-resourceAvailailabilityEnd') {
            delete o[s.resourceId];
            m--;
          }
        }
        if ((x || !G) && (m || b)) {
          D = F[y];
          n = F[y + 1];
          if (D >= z || n <= d) {
            continue;
          }
          if (D < d) {
            D = d - 0;
          }
          if (n > z) {
            n = z - 0;
          }
          if (h.call(a, D, n, o) === false) {
            return false;
          }
        }
      }
    } else {
      for (y = F.length - 1; y >= 0; y--) {
        w = q[F[y]];
        w.sort(function(k, i) {
          return k.typeBackward < i.typeBackward;
        });
        for (u = 0; u < w.length; u++) {
          s = w[u];
          if (s.typeBackward == '00-taskAvailailabilityEnd') {
            x = true;
          }
          if (s.typeBackward == '01-taskAvailailabilityStart') {
            x = false;
          }
          if (s.typeBackward == '02-resourceAvailailabilityEnd') {
            o[s.resourceId] = s;
            m++;
          }
          if (s.typeBackward == '03-resourceAvailailabilityStart') {
            delete o[s.resourceId];
            m--;
          }
        }
        if ((x || !G) && (m || b)) {
          D = F[y - 1];
          n = F[y];
          if (D > z || n <= d) {
            continue;
          }
          if (D < d) {
            D = d - 0;
          }
          if (n > z) {
            n = z - 0;
          }
          if (h.call(a, D, n, o) === false) {
            return false;
          }
        }
      }
    }
    j = p ? g.getStartOfNextDay(j) : g.getEndOfPreviousDay(j);
  }
}, calculateEffortDrivenEndDate:function(a, c, b) {
  var e = this.getProjectCalendar().convertDurationToMs(c, b || this.getEffortUnit());
  var d = new Date(a);
  this.forEachAvailabilityIntervalWithResources({startDate:a}, function(l, k, j) {
    var m = 0;
    for (var h in j) {
      m += j[h].units;
    }
    var g = k - l;
    var f = m * g / 100;
    if (f >= e) {
      d = new Date(l + e / f * g);
      return false;
    } else {
      e -= f;
    }
  });
  return d;
}, recalculateParents:function() {
  var h = new Date(9999, 0, 0), e = new Date(0), m = this.parentNode;
  if (m && m.childNodes.length > 0) {
    var b = 0;
    for (var f = 0, j = m.childNodes.length; f < j; f++) {
      b += m.childNodes[f].getEffort('MILLI');
    }
    if (m.getEffort('MILLI') != b) {
      m.setEffort(this.getProjectCalendar().convertMSDurationToUnit(b, m.getEffortUnit()));
    }
  }
  var n, c;
  if (m && !m.isRoot() && m.childNodes.length > 0) {
    if (!m.isManuallyScheduled()) {
      for (var g = 0, d = m.childNodes.length; g < d; g++) {
        var a = m.childNodes[g];
        h = Sch.util.Date.min(h, a.getStartDate() || h);
        e = Sch.util.Date.max(e, a.getEndDate() || e);
      }
      n = h - new Date(9999, 0, 0) !== 0 && m.getStartDate() - h !== 0;
      c = e - new Date(0) !== 0 && m.getEndDate() - e !== 0;
      if (n && c) {
        m.setStartEndDate(h, e, false);
      } else {
        if (n) {
          m.setStartDate(h, c, false);
        } else {
          if (c) {
            m.setEndDate(e, false, false);
          }
        }
      }
    }
    if (!n && !c) {
      m.recalculateParents();
    }
  }
}, isMilestone:function() {
  return this.getDuration() === 0;
}, isBaselineMilestone:function() {
  var b = this.getBaselineStartDate(), a = this.getBaselineEndDate();
  if (b && a) {
    return a - b === 0;
  }
  return false;
}, afterEdit:function(b) {
  if (this.stores.length > 0 || !this.normalized) {
    this.callParent(arguments);
  } else {
    var a = this.taskStore || this.getTaskStore(true);
    if (a && !a.isFillingRoot) {
      a.afterEdit(this, b);
    }
    this.callParent(arguments);
  }
}, afterCommit:function() {
  this.callParent(arguments);
  if (this.stores.length > 0 || !this.normalized) {
    return;
  }
  var a = this.taskStore || this.getTaskStore(true);
  if (a && !a.isFillingRoot) {
    a.afterCommit(this);
  }
}, afterReject:function() {
  if (this.stores.length > 0) {
    this.callParent(arguments);
  } else {
    var a = this.getTaskStore(true);
    if (a && !a.isFillingRoot) {
      a.afterReject(this);
    }
    this.callParent(arguments);
  }
}, getDurationUnit:function() {
  return this.get(this.durationUnitField) || 'd';
}, getEffortUnit:function() {
  return this.get(this.effortUnitField) || 'd';
}, getBaselinePercentDone:function() {
  return this.get(this.baselinePercentDoneField) || 0;
}, isPersistable:function() {
  var a = this.parentNode;
  return !a.phantom;
}, getResources:function() {
  var b = this.getAssignmentStore(), c = this.getInternalId();
  var a = [];
  if (b) {
    b.each(function(d) {
      if (d.getTaskId() == c) {
        a.push(d.getResource());
      }
    });
  }
  return a;
}, getAssignments:function() {
  var b = this.getAssignmentStore(), c = this.getInternalId();
  var a = [];
  if (b) {
    b.each(function(d) {
      if (d.getTaskId() == c) {
        a.push(d);
      }
    });
  }
  return a;
}, hasAssignments:function() {
  var b = this.getAssignmentStore(), c = this.getInternalId();
  var a = false;
  if (b) {
    b.each(function(d) {
      if (d.getTaskId() == c) {
        a = true;
        return false;
      }
    });
  }
  return a;
}, getAssignmentFor:function(b) {
  var c = this.getAssignmentStore(), e = this.getInternalId(), d = b instanceof Gnt.model.Resource ? b.getInternalId() : b;
  var a;
  if (c) {
    c.each(function(f) {
      if (f.getTaskId() == e && f.getResourceId() == d) {
        a = f;
        return false;
      }
    });
  }
  return a || null;
}, unassign:function() {
  return this.unAssign.apply(this, arguments);
}, unAssign:function(a) {
  var b = this.getAssignmentStore();
  var c = a instanceof Gnt.model.Resource ? a.getInternalId() : a;
  b.removeAt(b.find('ResourceId', c));
}, assign:function(e, a) {
  var b = this.getTaskStore(), h = this.getInternalId(), f = b.getAssignmentStore(), d = b.getResourceStore();
  var g = e instanceof Gnt.model.Resource ? e.getInternalId() : e;
  f.each(function(i) {
    if (i.getTaskId() == h && i.getResourceId() == g) {
      throw "Resource can't be assigned twice to the same task";
    }
  });
  if (e instanceof Gnt.model.Resource && d.indexOf(e) == -1) {
    d.add(e);
  }
  var c = new Gnt.model.Assignment({TaskId:h, ResourceId:g, Units:a});
  f.add(c);
  return c;
}, calculateEffort:function(a, c, b) {
  var d = 0;
  this.forEachAvailabilityIntervalWithResources({startDate:a, endDate:c}, function(h, g, f) {
    var j = 0;
    for (var e in f) {
      j += f[e].units;
    }
    d += (g - h) * j / 100;
  });
  return this.getProjectCalendar().convertMSDurationToUnit(d, b || this.getEffortUnit());
}, updateAssignments:function() {
  var b = {};
  var a = this.getStartDate();
  var d = this.getEndDate();
  var c = 0;
  this.forEachAvailabilityIntervalWithResources({startDate:a, endDate:d}, function(h, g, f) {
    for (var i in f) {
      c += g - h;
    }
  });
  if (!c) {
    return;
  }
  var e = this.getEffort(Sch.util.Date.MILLI);
  Ext.Array.each(this.getAssignments(), function(f) {
    f.setUnits(e / c * 100);
  });
}, updateEffortBasedOnDuration:function() {
  this.setEffort(this.calculateEffort(this.getStartDate(), this.getEndDate()));
}, updateDurationBasedOnEffort:function() {
  this.setEndDate(this.calculateEffortDrivenEndDate(this.getStartDate(), this.getEffort(), this.getEffortUnit()), false);
}, onPotentialEffortChange:function() {
  if (this.getSchedulingMode() === 'FixedDuration') {
    this.updateEffortBasedOnDuration();
  }
  if (this.getSchedulingMode() === 'DynamicAssignment') {
    this.updateAssignments();
  }
}, onAssignmentMutation:function() {
  if (this.getSchedulingMode() === 'FixedDuration') {
    this.updateEffortBasedOnDuration();
  }
  if (this.getSchedulingMode() === 'EffortDriven') {
    this.updateDurationBasedOnEffort();
  }
}, onAssignmentStructureMutation:function() {
  if (this.getSchedulingMode() == 'FixedDuration') {
    this.updateEffortBasedOnDuration();
  }
  if (this.getSchedulingMode() === 'EffortDriven') {
    this.updateDurationBasedOnEffort();
  }
  if (this.getSchedulingMode() === 'DynamicAssignment') {
    this.updateAssignments();
  }
}, adjustToCalendar:function() {
  if (this.get('leaf') && !this.isManuallyScheduled()) {
    var a = this.hasIncomingDependencies();
    if (a) {
      this.constrain();
    } else {
      this.setStartDate(this.getStartDate(), true, true);
    }
  }
}, isEditable:function(a) {
  if ((a === this.durationField || a === this.endDateField) && this.getSchedulingMode() === 'EffortDriven') {
    return false;
  }
  if (a === this.effortField && this.getSchedulingMode() === 'FixedDuration') {
    return false;
  }
  return true;
}, isDraggable:function() {
  return this.getDraggable();
}, isResizable:function() {
  return this.getResizable();
}, ensureSingleSyncForMethod:function() {
  return function() {
    var a = this.getTaskStore(true);
    var c;
    if (a && a.autoSync && !a.autoSyncSuspended) {
      c = true;
      a.suspendAutoSync();
    }
    var b = this.callParent(arguments);
    if (c) {
      a.resumeAutoSync();
      a.sync();
    }
    return b;
  };
}, getId:function() {
  var a = this.data[this.idProperty];
  return a && a !== 'root' ? a : null;
}}, function() {
  Ext.data.NodeInterface.decorate(this);
  var a = ['addPredecessor', 'addSubtask', 'addSuccessor', 'indent', 'outdent', 'remove', 'insertBefore', 'appendChild'];
  this.override({remove:function() {
    var b = this.parentNode;
    var c = this.callParent(arguments);
    if (b.childNodes.length === 0 && this.getTaskStore().recalculateParents) {
      b.set('leaf', true);
    }
    return c;
  }, insertBefore:function(b) {
    if (this.phantom) {
      this.data[this.phantomIdField] = b.data[this.phantomParentIdField] = this.internalId;
    }
    return this.callParent(arguments);
  }, appendChild:function(b) {
    if (this.phantom) {
      this.data[this.phantomIdField] = b.data[this.phantomParentIdField] = this.internalId;
    }
    return this.callParent(arguments);
  }});
  Ext.each(a, function(c) {
    var b = {};
    b[c] = this.prototype.ensureSingleSyncForMethod(this.prototype[c]);
    this.override(b);
  }, this);
});
Ext.define('Gnt.data.Calendar', {extend:'Ext.data.Store', requires:['Ext.Date', 'Gnt.model.CalendarDay', 'Sch.model.Range', 'Sch.util.Date'], model:'Gnt.model.CalendarDay', daysPerMonth:30, daysPerWeek:7, hoursPerDay:24, unitsInMs:null, defaultNonWorkingTimeCssCls:'gnt-holiday', weekendsAreWorkdays:false, weekendFirstDay:6, weekendSecondDay:0, holidaysCache:null, availabilityIntervalsCache:null, weekAvailability:null, defaultWeekAvailability:null, nonStandardWeeksByStartDate:null, nonStandardWeeksStartDates:null, 
calendarId:null, parent:null, defaultAvailability:['00:00-24:00'], name:null, statics:{getCalendar:function(a) {
  if (a instanceof Gnt.data.Calendar) {
    return a;
  }
  return Ext.data.StoreManager.lookup('GNT_CALENDAR:' + a);
}, getAllCalendars:function() {
  var a = [];
  Ext.data.StoreManager.each(function(b) {
    if (b instanceof Gnt.data.Calendar) {
      a.push(b);
    }
  });
  return a;
}}, constructor:function(a) {
  a = a || {};
  if (a.calendarId) {
    this.storeId = 'GNT_CALENDAR:' + a.calendarId;
  }
  this.callParent(arguments);
  var c = this;
  var b = this.parent = Gnt.data.Calendar.getCalendar(a.parent);
  if (a.parent && !this.parent) {
    throw new Error('Invalid parent specified for calendar');
  }
  this.unitsInMs = {MILLI:1, SECOND:1000, MINUTE:60 * 1000, HOUR:60 * 60 * 1000, DAY:this.hoursPerDay * 60 * 60 * 1000, WEEK:this.daysPerWeek * this.hoursPerDay * 60 * 60 * 1000, MONTH:this.daysPerMonth * this.hoursPerDay * 60 * 60 * 1000, QUARTER:3 * this.daysPerMonth * 24 * 60 * 60 * 1000, YEAR:4 * 3 * this.daysPerMonth * 24 * 60 * 60 * 1000};
  this.defaultWeekAvailability = this.getDefaultWeekAvailability(this.weekendsAreWorkdays);
  Ext.Array.each(a.weekAvailability || [], function(e, d) {
    if (e) {
      e.setDate(new Date(0, 0, d));
      e.set(e.idProperty, 'WEEKDAY:' + d);
    }
    c.add(e);
  });
  this.holidaysCache = {};
  this.availabilityIntervalsCache = {};
  this.on({clear:this.clearCache, datachanged:this.clearCache, update:this.clearCache, load:this.updateAvailability, scope:this});
  b && b.on('clearcache', this.clearCache, this);
  this.updateAvailability();
}, getDefaultWeekAvailability:function(f) {
  var e = this.defaultAvailability;
  var d = this.weekendFirstDay;
  var a = this.weekendSecondDay;
  var c = [];
  for (var b = 0; b < 7; b++) {
    c.push(f || b != d && b != a ? new Gnt.model.CalendarDay({Availability:Ext.Array.clone(e), IsWorkingDay:true}) : new Gnt.model.CalendarDay({Availability:[]}));
  }
  return c;
}, updateAvailability:function() {
  var a = this.weekAvailability = [];
  var c = this.nonStandardWeeksStartDates = [];
  var b = this.nonStandardWeeksByStartDate = {};
  this.each(function(e) {
    var i = e.getId();
    var g = /^(\d)-(\d\d\d\d\/\d\d\/\d\d)-(\d\d\d\d\/\d\d\/\d\d)$/.exec(i);
    var f;
    if (g) {
      var d = Ext.Date.parse(g[2], 'Y/m/d') - 0;
      var h = Ext.Date.parse(g[3], 'Y/m/d') - 0;
      f = g[1];
      if (!b[d]) {
        b[d] = {startDate:new Date(d), endDate:new Date(h), name:e.getName(), weekAvailability:[]};
        c.push(d);
      }
      b[d].weekAvailability[f] = e;
    }
    g = /^WEEKDAY:(\d+)$/.exec(i);
    if (g) {
      f = g[1];
      if (f < 0 || f > 6) {
        throw new Error('Incorrect week day index');
      }
      a[f] = e;
    }
  });
  c.sort();
}, intersectsWithCurrentWeeks:function(b, d) {
  var e = this.nonStandardWeeksStartDates;
  var c = this.nonStandardWeeksByStartDate;
  var a = false;
  Ext.Array.each(e, function(h) {
    var f = c[h].startDate;
    var g = c[h].endDate;
    if (f <= b && b < g || f < d && d <= g) {
      a = true;
      return false;
    }
  });
  return a;
}, addNonStandardWeek:function(b, c, a) {
  b = Ext.Date.clearTime(new Date(b));
  c = Ext.Date.clearTime(new Date(c));
  if (this.intersectsWithCurrentWeeks(b, c)) {
    throw new Error('Can not add intersecting week');
  }
  Ext.Array.each(a, function(d, e) {
    if (d) {
      d.set(d.idProperty, e + '-' + Ext.Date.format(b, 'Y/m/d') + '-' + Ext.Date.format(c, 'Y/m/d'));
    }
  });
  b = b - 0;
  c = c - 0;
  this.nonStandardWeeksStartDates.push(b);
  this.nonStandardWeeksStartDates.sort();
  this.nonStandardWeeksByStartDate[b] = {startDate:new Date(b), endDate:new Date(c), weekAvailability:a};
  this.add(Ext.Array.clean(a));
}, getNonStandardWeekByStartDate:function(a) {
  return this.nonStandardWeeksByStartDate[Ext.Date.clearTime(new Date(a)) - 0];
}, getNonStandardWeekByDate:function(d) {
  d = Ext.Date.clearTime(new Date(d)) - 0;
  var e = this.nonStandardWeeksStartDates;
  var a = this.nonStandardWeeksByStartDate;
  for (var c = 0; c < e.length; c++) {
    var b = a[e[c]];
    if (b.startDate <= d && d <= b.endDate) {
      return b;
    }
  }
  return null;
}, removeNonStandardWeek:function(a) {
  a = Ext.Date.clearTime(new Date(a)) - 0;
  var b = this.getNonStandardWeekByStartDate(a);
  if (!b) {
    return;
  }
  this.remove(Ext.Array.clean(b.weekAvailability));
  delete this.nonStandardWeeksByStartDate[a];
  Ext.Array.remove(this.nonStandardWeeksStartDates, a);
}, clearCache:function() {
  this.holidaysCache = {};
  this.availabilityIntervalsCache = {};
  this.fireEvent('clearcache', this);
}, setWeekendsAreWorkDays:function(a) {
  if (a !== this.weekendsAreWorkdays) {
    this.weekendsAreWorkdays = a;
    this.clearCache();
    this.defaultWeekAvailability = this.getDefaultWeekAvailability(this.weekendsAreWorkdays);
  }
}, areWeekendsWorkDays:function() {
  return this.weekendsAreWorkdays;
}, getCalendarDay:function(b) {
  b = typeof b == 'number' ? new Date(b) : b;
  var a = this.getOverrideDay(b);
  if (a) {
    return a;
  }
  return this.getDefaultCalendarDay(b.getDay(), b);
}, getOverrideDay:function(a) {
  var b = this.getOwnCalendarDay(a);
  if (b) {
    return b;
  }
  if (this.parent) {
    return this.parent.getOverrideDay(a);
  }
  return null;
}, getOwnCalendarDay:function(a) {
  a = typeof a == 'number' ? new Date(a) : a;
  return this.getById(Ext.Date.clearTime(a, true) - 0);
}, getDefaultCalendarDay:function(c, b) {
  if (b) {
    var a = this.getNonStandardWeekByDate(b);
    if (a && a.weekAvailability[c]) {
      return a.weekAvailability[c];
    }
  }
  if (this.weekAvailability[c]) {
    return this.weekAvailability[c];
  }
  if (this.parent) {
    return this.parent.getDefaultCalendarDay(c);
  }
  return this.defaultWeekAvailability[c];
}, isHoliday:function(c) {
  var b = c - 0;
  var d = this.holidaysCache;
  if (d[b] != null) {
    return d[b];
  }
  c = typeof c == 'number' ? new Date(c) : c;
  var a = this.getCalendarDay(c);
  if (!a) {
    throw "Can't find day for " + c;
  }
  return d[b] = !a.getIsWorkingDay();
}, isWeekend:function(b) {
  var a = b.getDay();
  return a === this.weekendFirstDay || a === this.weekendSecondDay;
}, isWorkingDay:function(a) {
  return !this.isHoliday(a);
}, convertMSDurationToUnit:function(a, b) {
  return a / this.unitsInMs[Sch.util.Date.getNameOfUnit(b)];
}, convertDurationToMs:function(b, a) {
  return b * this.unitsInMs[Sch.util.Date.getNameOfUnit(a)];
}, getHolidaysRanges:function(d, g, a) {
  if (d > g) {
    Ext.Error.raise("startDate can't be bigger than endDate");
  }
  d = Ext.Date.clearTime(d, true);
  g = Ext.Date.clearTime(g, true);
  var c = [], h, e;
  for (e = d; e < g; e = Sch.util.Date.add(e, Sch.util.Date.DAY, 1)) {
    if (this.isHoliday(e) || this.weekendsAreWorkdays && a && this.isWeekend(e)) {
      var i = this.getCalendarDay(e);
      var j = i && i.getCls() || this.defaultNonWorkingTimeCssCls;
      var f = Sch.util.Date.add(e, Sch.util.Date.DAY, 1);
      if (!h) {
        h = {StartDate:e, EndDate:f, Cls:j};
      } else {
        if (h.Cls == j) {
          h.EndDate = f;
        } else {
          c.push(h);
          h = {StartDate:e, EndDate:f, Cls:j};
        }
      }
    } else {
      if (h) {
        c.push(h);
        h = null;
      }
    }
  }
  if (h) {
    c.push(h);
  }
  var b = [];
  Ext.each(c, function(k) {
    b.push(Ext.create('Sch.model.Range', {StartDate:k.StartDate, EndDate:k.EndDate, Cls:k.Cls}));
  });
  return b;
}, forEachAvailabilityInterval:function(r, f, p) {
  p = p || this;
  var l = this;
  var d = r.startDate;
  var j = r.endDate;
  var o = r.isForward !== false;
  if (o ? !d : !j) {
    throw new Error('At least `startDate` or `endDate` is required, depending from the `isForward` option');
  }
  var a = new Date(o ? d : j);
  var q = o ? !j : !d;
  var c = Sch.util.Date;
  while (q || (o ? a < j : a > d)) {
    var h = this.getAvailabilityIntervalsFor(a - (o ? 0 : 1));
    for (var g = o ? 0 : h.length - 1; o ? g < h.length : g >= 0; o ? g++ : g--) {
      var b = h[g];
      var k = b.startDate;
      var n = b.endDate;
      if (k >= j || n <= d) {
        continue;
      }
      var e = k < d ? d : k;
      var m = n > j ? j : n;
      if (f.call(p, e, m) === false) {
        return false;
      }
    }
    a = o ? c.getStartOfNextDay(a) : c.getEndOfPreviousDay(a);
  }
}, calculateDuration:function(a, d, b) {
  var c = 0;
  this.forEachAvailabilityInterval({startDate:a, endDate:d}, function(f, e) {
    c += e - f;
  });
  return this.convertMSDurationToUnit(c, b);
}, calculateEndDate:function(a, f, b) {
  if (!f) {
    return new Date(a);
  }
  var e = Sch.util.Date, d;
  f = this.convertDurationToMs(f, b);
  var c = f === 0 && Ext.Date.clearTime(a, true) - a === 0 ? e.add(a, Sch.util.Date.DAY, -1) : a;
  this.forEachAvailabilityInterval({startDate:c}, function(i, h) {
    var j = h - i;
    var g = i.getTimezoneOffset() - h.getTimezoneOffset();
    if (j >= f) {
      d = new Date(i - 0 + f);
      return false;
    } else {
      f -= j + g * 60 * 1000;
    }
  });
  return d;
}, calculateStartDate:function(d, c, b) {
  if (!c) {
    return new Date(d);
  }
  var a;
  c = this.convertDurationToMs(c, b);
  this.forEachAvailabilityInterval({endDate:d, isForward:false}, function(f, e) {
    var g = e - f;
    if (g >= c) {
      a = new Date(e - c);
      return false;
    } else {
      c -= g;
    }
  });
  return a;
}, skipNonWorkingTime:function(a, b) {
  this.forEachAvailabilityInterval(b ? {startDate:a} : {endDate:a, isForward:false}, function(d, c) {
    a = b ? d : c;
    return false;
  });
  return new Date(a);
}, skipWorkingDays:function(a, b) {
  var c = 0, d = b > 0, e = Sch.util.Date, f = Ext.Date.clone(a);
  b = Math.abs(b);
  while (c < b) {
    if (!this.isHoliday(f - (d ? 0 : 1))) {
      c++;
      if (d) {
        f = e.getStartOfNextDay(f, true);
      } else {
        f = e.getEndOfPreviousDay(f);
      }
    }
    if (d || c < b) {
      f = this.skipNonWorkingTime(f, d);
    }
  }
  e.copyTimeValues(f, a);
  return f;
}, getAvailabilityIntervalsFor:function(a) {
  a = Ext.Date.clearTime(new Date(a)) - 0;
  if (this.availabilityIntervalsCache[a]) {
    return this.availabilityIntervalsCache[a];
  }
  return this.availabilityIntervalsCache[a] = this.getCalendarDay(a).getAvailabilityIntervalsFor(a);
}, getParentableCalendars:function() {
  var c = this, a = [], d = Gnt.data.Calendar.getAllCalendars();
  var b = function(e) {
    if (!e.parent) {
      return false;
    }
    if (e.parent == c) {
      return true;
    }
    return b(e.parent);
  };
  Ext.Array.each(d, function(e) {
    if (e === c) {
      return;
    }
    if (!b(e)) {
      a.push({Id:e.calendarId, Name:e.name || e.calendarId});
    }
  });
  return a;
}});
Ext.define('Gnt.data.calendar.BusinessTime', {extend:'Gnt.data.Calendar', daysPerMonth:20, daysPerWeek:5, hoursPerDay:8, defaultAvailability:['08:00-12:00', '13:00-17:00']});
Ext.define('Gnt.data.TaskStore', {extend:'Ext.data.TreeStore', requires:['Sch.patches.TreeStore', 'Gnt.model.Task', 'Gnt.data.Calendar'], model:'Gnt.model.Task', calendar:null, dependencyStore:null, resourceStore:null, assignmentStore:null, weekendsAreWorkdays:false, buffered:false, pageSize:null, cascadeChanges:false, batchSync:true, recalculateParents:true, skipWeekendsDuringDragDrop:true, cascadeDelay:0, cascading:false, isFillingRoot:false, constructor:function(c) {
  this.addEvents('root-fill-start', 'root-fill-end', 'filter', 'clearfilter', 'beforecascade', 'cascade');
  c = c || {};
  if (!c.calendar) {
    var a = {};
    if (c.hasOwnProperty('weekendsAreWorkdays')) {
      a.weekendsAreWorkdays = c.weekendsAreWorkdays;
    } else {
      if (this.self.prototype.hasOwnProperty('weekendsAreWorkdays') && this.self != Gnt.data.TaskStore) {
        a.weekendsAreWorkdays = this.weekendsAreWorkdays;
      }
    }
    c.calendar = new Gnt.data.Calendar(a);
  }
  this.hasListeners = {};
  this.on({'root-fill-end':this.onRootFillEnd, remove:this.onTaskDeleted, beforesync:this.onTaskStoreBeforeSync, write:this.onTaskStoreWrite, scope:this});
  var b = c.dependencyStore;
  if (b) {
    delete c.dependencyStore;
    this.setDependencyStore(b);
  }
  var d = c.resourceStore;
  if (d) {
    delete c.resourceStore;
    this.setResourceStore(d);
  }
  var f = c.assignmentStore;
  if (f) {
    delete c.assignmentStore;
    this.setAssignmentStore(f);
  }
  var e = c.calendar;
  if (e) {
    delete c.calendar;
    this.setCalendar(e);
  }
  this.callParent([c]);
  if (Ext.data.reader.Xml && this.getProxy().getReader() instanceof Ext.data.reader.Xml) {
    Ext.override(this.getProxy().getReader(), {extractData:function(g) {
      var h = this.record;
      if (h != g.nodeName) {
        g = Ext.DomQuery.select('\x3e' + h, g);
      } else {
        g = [g];
      }
      return Ext.data.reader.Xml.superclass.extractData.apply(this, [g]);
    }});
  }
  if (this.autoSync && this.batchSync) {
    this.sync = Ext.Function.createBuffered(this.sync, 500);
  }
}, loadData:function(A, v) {
  var y = this, r = y.getRootNode(), c = v ? v.addRecords : false;
  if (!A.length) {
    return;
  } else {
    if (!r) {
      r = y.setRootNode();
    }
    y.suspendAutoSync();
    y.suspendEvents();
    if (!c) {
      r.removeAll();
    }
    var f = A.length, e = y.model, m = [], t = typeof A[0].get === 'function', b, p, o, w, x, z, u, n, h;
    for (var s = 0; s < f; s++) {
      p = y.getById(A[s].getId ? A[s].getId() : A[s].Id);
      b = 0;
      if (p) {
        w = t ? A[s].get('parentId') : A[s].parentId;
        x = p.get('parentId');
        z = t ? A[s].get('index') : A[s].index;
        u = p.get('index');
        if (t) {
          p.set(A[s].data);
        } else {
          p.set(A[s]);
        }
        if ((w || w === null ? w !== x : false) || (z ? z !== u : false)) {
          n = w === null ? r : y.getById(w);
          h = x === null ? r : y.getById(x);
        } else {
          b = 1;
        }
      } else {
        p = t ? new e(A[s].data) : new e(A[s]);
        x = p.get('parentId');
        if (x) {
          n = y.getById(x);
        } else {
          if (x === null) {
            n = r;
          }
        }
      }
      if (n && !b) {
        y.moveChildren(p, n, h);
      } else {
        if (typeof n === 'undefined' && !b) {
          o = {node:p, index:p.get('index') || 0, parentId:p.get('parentId')};
          m.push(o);
        }
      }
    }
    var g = 0, j = m.length, d, k;
    while (m.length) {
      if (g > m.length - 1) {
        g = 0;
      }
      d = m[g];
      k = d.parentId === null ? r : y.getById(d.parentId);
      if (k) {
        var a = y.nodeIsChild(d.node, n);
        if (a) {
          k.insertChild(d.index, d.node);
          y.fixNodeDates(d.node);
          m.splice(g, 1);
        }
      }
      g += 1;
      if (g === j - 1 && m.length === j) {
        throw 'Invalid data, possible infinite loop.';
      }
    }
    if (y.nodesToExpand) {
      s = 0;
      for (var q = y.nodesToExpand.length; s < q; s += 1) {
        p = y.nodesToExpand[s];
        if (p.childNodes.length) {
          p.expand();
        }
      }
      delete y.nodesToExpand;
    }
    this.fireEvent('datachanged');
    this.fireEvent('refresh');
    y.resumeAutoSync();
    y.resumeEvents();
    if (y.autoSync) {
      y.sync();
    }
  }
}, fixNodeDates:function(b) {
  var c = b.calculateDuration(b.getStartDate(), b.getEndDate(), b.getDurationUnit()), a;
  b.set({Duration:c});
  if (b.childNodes.length) {
    a = b.getChildAt(0);
    a.recalculateParents();
  } else {
    b.recalculateParents();
  }
}, nodeIsChild:function(c, b) {
  var d = b.getId(), a = true;
  if (c.childNodes.length) {
    c.cascadeBy(function(e) {
      if (e.getId() === d) {
        a = false;
        return false;
      }
    });
  }
  return a;
}, moveChildren:function(e, d, c) {
  if (e.get('expanded')) {
    if (!this.nodesToExpand) {
      this.nodesToExpand = [];
    }
    this.nodesToExpand.push(e);
    e.set('expanded', false);
  }
  var b, f = this.nodeIsChild(e, d), a = c || this.getById(e.get('parentId'));
  if (f) {
    if (e.childNodes.length) {
      b = e.copy(null, true);
      e.removeAll();
    }
    if (a && a.getId() !== d.getId()) {
      a.removeChild(e);
    }
    d.insertChild(e.get('index') || 0, e);
    if (b) {
      b.cascadeBy(function(h) {
        if (h !== b) {
          var g = h.copy(null);
          e.insertChild(g.get('index') || 0, g);
        }
      });
    }
    this.fixNodeDates(e);
  }
}, onNodeAdded:function(c, e) {
  if (!e.normalized && !e.isRoot()) {
    e.normalize();
  }
  if (Ext.isIE) {
    var d = this, b = d.getProxy(), a = b.getReader(), f = e.raw || e[e.persistenceProperty], g;
    Ext.Array.remove(d.removed, e);
    if (!e.isLeaf()) {
      g = a.getRoot(f);
      if (g) {
        d.fillNode(e, a.extractData(g));
        if (f[a.root]) {
          delete f[a.root];
        }
      }
    }
    if (d.autoSync && !d.autoSyncSuspended && (e.phantom || e.dirty)) {
      d.sync();
    }
  } else {
    this.callParent(arguments);
  }
}, setRootNode:function() {
  var b = this;
  this.tree.setRootNode = Ext.Function.createInterceptor(this.tree.setRootNode, function(c) {
    Ext.apply(c, {calendar:b.calendar, taskStore:b, dependencyStore:b.dependencyStore, phantom:false, dirty:false});
  });
  var a = this.callParent(arguments);
  delete this.tree.setRootNode;
  return a;
}, fillNode:function(g, c) {
  this.isFillingNode = true;
  if (g.isRoot()) {
    this.isFillingRoot = true;
    this.un({remove:this.onNodeUpdated, append:this.onNodeUpdated, insert:this.onNodeUpdated, update:this.onTaskUpdated, scope:this});
    this.fireEvent('root-fill-start', this, g, c);
  }
  var f = this, e = c ? c.length : 0, d = 0, b;
  if (e && f.sortOnLoad && !f.remoteSort && f.sorters && f.sorters.items) {
    b = Ext.create('Ext.util.MixedCollection');
    b.addAll(c);
    b.sort(f.sorters.items);
    c = b.items;
  }
  g.set('loaded', true);
  if (this.buffered) {
    for (; d < e; d++) {
      var a = c[d];
      a.__isFilling__ = true;
      g.appendChild(a, true, true);
      this.onNodeAdded(null, a);
      this.tree.registerNode(a);
    }
  } else {
    for (; d < e; d++) {
      c[d].__isFilling__ = true;
      g.appendChild(c[d], false, true);
    }
  }
  if (g.isRoot()) {
    this.getRootNode().cascadeBy(function(h) {
      delete h.__isFilling__;
    });
    this.isFillingRoot = false;
    this.on({remove:this.onNodeUpdated, append:this.onNodeUpdated, insert:this.onNodeUpdated, update:this.onTaskUpdated, scope:this});
    this.fireEvent('root-fill-end', this, g, c);
  }
  delete this.isFillingNode;
  return c;
}, onRootFillEnd:function(b, a) {
  a.normalizeEffort();
}, getById:function(a) {
  return this.tree.getNodeById(a);
}, setDependencyStore:function(a) {
  if (this.dependencyStore) {
    this.dependencyStore.un({add:this.onDependencyAddOrUpdate, update:this.onDependencyAddOrUpdate, beforesync:this.onBeforeDependencySync, scope:this});
  }
  this.dependencyStore = Ext.StoreMgr.lookup(a);
  if (a) {
    a.taskStore = this;
    a.on({add:this.onDependencyAddOrUpdate, update:this.onDependencyAddOrUpdate, scope:this});
  }
}, setResourceStore:function(a) {
  this.resourceStore = Ext.StoreMgr.lookup(a);
  a.taskStore = this;
}, getResourceStore:function() {
  return this.resourceStore || null;
}, setAssignmentStore:function(a) {
  if (this.assignmentStore) {
    this.assignmentStore.un({add:this.onAssignmentStructureMutation, update:this.onAssignmentMutation, remove:this.onAssignmentStructureMutation, scope:this});
  }
  this.assignmentStore = Ext.StoreMgr.lookup(a);
  a.taskStore = this;
  a.on({add:this.onAssignmentStructureMutation, update:this.onAssignmentMutation, remove:this.onAssignmentStructureMutation, scope:this});
}, getAssignmentStore:function() {
  return this.assignmentStore || null;
}, renormalizeTasks:function(b, a) {
  if (a instanceof Gnt.model.Task) {
    a.adjustToCalendar();
  } else {
    this.getRootNode().cascadeBy(function(c) {
      c.adjustToCalendar();
    });
  }
}, getCalendar:function() {
  return this.calendar || null;
}, setCalendar:function(c) {
  var b = {datachanged:this.renormalizeTasks, update:this.renormalizeTasks, clear:this.renormalizeTasks, scope:this};
  if (this.calendar) {
    this.calendar.un(b);
  }
  this.calendar = c;
  c.on(b);
  var a = this.tree && this.getRootNode();
  if (a) {
    a.calendar = c;
  }
}, filter:function() {
  this.fireEvent('filter', this, arguments);
}, clearFilter:function() {
  this.fireEvent('clearfilter', this);
}, getCriticalPaths:function() {
  var b = this.getRootNode(), a = [], d = new Date(0);
  b.cascadeBy(function(e) {
    d = Sch.util.Date.max(e.getEndDate(), d);
  });
  b.cascadeBy(function(e) {
    if (d - e.getEndDate() === 0 && !e.isRoot()) {
      a.push(e);
    }
  });
  var c = [];
  Ext.each(a, function(e) {
    c.push(e.getCriticalPaths());
  });
  return c;
}, onNodeUpdated:function(a, b) {
  if (!this.cascading && this.recalculateParents && !this.isFillingNode) {
    b.recalculateParents();
  }
}, onTaskUpdated:function(c, b, a) {
  var d = b.previous;
  if (!this.cascading && !this.isFillingNode && a !== Ext.data.Model.COMMIT && (d && (b.startDateField in d || b.endDateField in d || 'parentId' in d || b.effortField in d))) {
    if (this.cascadeChanges) {
      Ext.Function.defer(this.cascadeChangesForTask, this.cascadeDelay, this, [b]);
    }
    if (this.recalculateParents) {
      b.recalculateParents();
    }
  }
}, cascadeChangesForTask:function(a) {
  var c = this, b = {nbrAffected:0};
  Ext.each(a.getOutgoingDependencies(), function(d) {
    var e = d.getTargetTask();
    if (e) {
      if (!c.cascading) {
        c.fireEvent('beforecascade', c);
      }
      c.cascading = true;
      e.cascadeChanges(c, b);
    }
  });
  if (c.cascading) {
    c.cascading = false;
    c.fireEvent('cascade', c, b);
  }
}, onTaskDeleted:function(c, b) {
  var a = this.dependencyStore;
  if (a && !b.isReplace && !b.isMove) {
    a.remove(b.getAllDependencies(a));
  }
}, onAssignmentMutation:function(c, a) {
  var b = this;
  Ext.each(a, function(e) {
    var d = e.getTask(b);
    if (d) {
      d.onAssignmentMutation(e);
    }
  });
}, onAssignmentStructureMutation:function(c, a) {
  var b = this;
  Ext.each(a, function(d) {
    d.getTask(b).onAssignmentStructureMutation(d);
  });
}, onDependencyAddOrUpdate:function(b, d) {
  if (this.cascadeChanges) {
    var c = this, a;
    Ext.each(d, function(e) {
      a = e.getTargetTask();
      if (a) {
        a.constrain(c);
      }
    });
  }
}, getNewRecords:function() {
  return Ext.Array.filter(this.tree.flatten(), this.filterNew, this);
}, getUpdatedRecords:function() {
  return Ext.Array.filter(this.tree.flatten(), this.filterUpdated, this);
}, filterNew:function(a) {
  return a.phantom === true && a.isValid() && a != this.tree.root;
}, filterUpdated:function(a) {
  return a.dirty === true && a.phantom !== true && a.isValid() && a != this.tree.root;
}, onTaskStoreBeforeSync:function(b, c) {
  var a = b.create;
  if (a) {
    for (var e, d = a.length - 1; d >= 0; d--) {
      e = a[d];
      if (e.isPersistable()) {
        e._phantomId = e.internalId;
      } else {
        if (this.autoSync) {
          Ext.Array.remove(a, e);
        }
      }
    }
    if (a.length === 0) {
      delete b.create;
    }
  }
  return Boolean(b.create && b.create.length > 0 || b.update && b.update.length > 0 || b.destroy && b.destroy.length > 0);
}, onTaskStoreWrite:function(c, b) {
  var d = this.dependencyStore;
  if (!d || b.action !== 'create') {
    return;
  }
  var a = b.getRecords(), e;
  Ext.each(a, function(f) {
    e = f.getId();
    if (!f.phantom && e !== f._phantomId) {
      Ext.each(d.getNewRecords(), function(g) {
        var i = g.getSourceId();
        var h = g.getTargetId();
        if (i === f._phantomId) {
          g.setSourceId(e);
        } else {
          if (h === f._phantomId) {
            g.setTargetId(e);
          }
        }
      });
      Ext.each(f.childNodes, function(g) {
        if (g.phantom) {
          g.set('parentId', e);
        }
      });
      delete f._phantomId;
    }
  });
}, getTotalTimeSpan:function() {
  var a = new Date(9999, 0, 1), b = new Date(0), c = Sch.util.Date;
  this.getRootNode().cascadeBy(function(d) {
    if (d.getStartDate()) {
      a = c.min(d.getStartDate(), a);
    }
    if (d.getEndDate()) {
      b = c.max(d.getEndDate(), b);
    }
  });
  a = a < new Date(9999, 0, 1) ? a : null;
  b = b > new Date(0) ? b : null;
  return {start:a, end:b || a || null};
}, getCount:function(b) {
  var a = b === false ? 0 : -1;
  this.getRootNode().cascadeBy(function() {
    a++;
  });
  return a;
}, toArray:function() {
  var a = [];
  this.getRootNode().cascadeBy(function(b) {
    a.push(b);
  });
  return a;
}, remove:function(a) {
  Ext.each(a, function(b) {
    b.remove();
  });
}, indent:function(b) {
  b = Ext.isArray(b) ? b : [b];
  var a = Ext.Array.sort(b, function(d, c) {
    return d.data.index > c.data.index;
  });
  Ext.each(a, function(c) {
    c.indent();
  });
}, outdent:function(b) {
  var a = Ext.Array.sort(b, function(d, c) {
    return d.data.index > c.data.index;
  });
  Ext.each(a, function(c) {
    c.indent();
  });
  Ext.each(b, function(c) {
    c.outdent();
  });
}, getTasksForResource:function(a) {
  return a.getTasks();
}, getEventsForResource:function(a) {
  return this.getTasksForResource(a);
}, ensureSingleSyncForMethod:function() {
  return function() {
    var b;
    if (this.autoSync && !this.autoSyncSuspended) {
      b = true;
      this.suspendAutoSync();
    }
    var a = this.callParent(arguments);
    if (b) {
      this.resumeAutoSync();
      this.sync();
    }
    return a;
  };
}}, function() {
  var a = ['indent', 'outdent', 'afterEdit', 'remove'];
  Ext.each(a, function(c) {
    var b = {};
    b[c] = this.prototype.ensureSingleSyncForMethod(this.prototype[c]);
    this.override(b);
  }, this);
});
Ext.define('Gnt.data.DependencyStore', {extend:'Ext.data.Store', model:'Gnt.model.Dependency', constructor:function() {
  this.callParent(arguments);
  this.init();
}, init:function() {
  this.on({beforesync:this.onBeforeSyncOperation, scope:this});
}, onBeforeSyncOperation:function(a, b) {
  if (a.create) {
    for (var d, c = a.create.length - 1; c >= 0; c--) {
      d = a.create[c];
      if (!d.isPersistable()) {
        Ext.Array.remove(a.create, d);
      }
    }
    if (a.create.length === 0) {
      delete a.create;
    }
  }
  return Boolean(a.create && a.create.length > 0 || a.update && a.update.length > 0 || a.destroy && a.destroy.length > 0);
}, getDependenciesForTask:function(b) {
  var g = b.getId() || b.internalId;
  var e = [], f = this;
  for (var d = 0, a = f.getCount(); d < a; d++) {
    var c = f.getAt(d);
    if (c.getSourceId() == g || c.getTargetId() == g) {
      e.push(c);
    }
  }
  return e;
}, getIncomingDependenciesForTask:function(b) {
  var g = b.getId() || b.internalId;
  var e = [], f = this;
  for (var d = 0, a = f.getCount(); d < a; d++) {
    var c = f.getAt(d);
    if (c.getTargetId() == g) {
      e.push(c);
    }
  }
  return e;
}, getOutgoingDependenciesForTask:function(b) {
  var g = b.getId() || b.internalId;
  var e = [], f = this;
  for (var d = 0, a = f.getCount(); d < a; d++) {
    var c = f.getAt(d);
    if (c.getSourceId() == g) {
      e.push(c);
    }
  }
  return e;
}, hasTransitiveDependency:function(d, b, a) {
  var c = this;
  return this.findBy(function(f) {
    var e = f.getTargetId();
    if (f.getSourceId() === d) {
      return e === b && f !== a ? true : c.hasTransitiveDependency(f.getTargetId(), b, a);
    }
  }) >= 0;
}, isValidDependency:function(h, b, e) {
  var f = true;
  var d, c, a;
  if (h instanceof Gnt.model.Dependency) {
    d = h.getSourceId();
    c = this.getSourceTask(d);
    b = h.getTargetId();
    a = this.getTargetTask(b);
  } else {
    d = h;
    c = this.getSourceTask(d);
    a = this.getTargetTask(b);
  }
  if (!e && h instanceof Gnt.model.Dependency) {
    f = h.isValid();
  } else {
    f = d && b && d !== b;
  }
  if (f) {
    if (c && a && (c.contains(a) || a.contains(c))) {
      f = false;
    }
    var g = e || h instanceof Gnt.model.Dependency;
    if (f && (!g && this.areTasksLinked(d, b) || this.hasTransitiveDependency(b, d, g ? h : null))) {
      f = false;
    }
  }
  return f;
}, areTasksLinked:function(a, c) {
  var b = this;
  a = a instanceof Gnt.model.Task ? a.getId() || a.internalId : a;
  c = c instanceof Gnt.model.Task ? c.getId() || c.internalId : c;
  return this.findBy(function(f) {
    var d = f.getTargetId(), e = f.getSourceId();
    if (e === a && d === c || e === c && d === c) {
      return true;
    }
  }) >= 0;
}, getSourceTask:function(a) {
  var b = a instanceof Gnt.model.Dependency ? dependency.getSourceId() : a;
  return this.getTaskStore().getById(b);
}, getTargetTask:function(a) {
  var b = a instanceof Gnt.model.Dependency ? dependency.getSourceId() : a;
  return this.getTaskStore().getById(b);
}, getTaskStore:function() {
  return this.taskStore;
}});
Ext.define('Gnt.data.ResourceStore', {requires:['Gnt.model.Resource'], extend:'Sch.data.ResourceStore', model:'Gnt.model.Resource', taskStore:null, getTaskStore:function() {
  return this.taskStore || null;
}, getAssignmentStore:function() {
  return this.assignmentStore || null;
}, getByInternalId:function(a) {
  return this.data.getByKey(a) || this.getById(a);
}});
Ext.define('Gnt.data.AssignmentStore', {requires:['Gnt.model.Assignment'], extend:'Ext.data.Store', model:'Gnt.model.Assignment', taskStore:null, getTaskStore:function() {
  return this.taskStore;
}, getResourceStore:function() {
  return this.getTaskStore().resourceStore;
}, getByInternalId:function(a) {
  return this.data.getByKey(a) || this.getById(a);
}});
Ext.define('Gnt.template.Task', {extend:'Ext.XTemplate', constructor:function(a) {
  this.callParent(['\x3cdiv class\x3d"sch-event-wrap ' + a.baseCls + ' x-unselectable" style\x3d"left:{leftOffset}px;"\x3e' + (a.leftLabel ? '\x3cdiv class\x3d"sch-gantt-labelct sch-gantt-labelct-left"\x3e\x3clabel class\x3d"sch-gantt-label sch-gantt-label-left"\x3e{leftLabel}\x3c/label\x3e\x3c/div\x3e' : '') + '\x3cdiv id\x3d"' + a.prefix + '{id}" class\x3d"sch-gantt-item sch-gantt-task-bar {cls}" unselectable\x3d"on" style\x3d"width:{width}px;{style}"\x3e' + (a.enableDependencyDragDrop ? '\x3cdiv unselectable\x3d"on" class\x3d"sch-gantt-terminal sch-gantt-terminal-start"\x3e\x3c/div\x3e' : 
  '') + (a.resizeHandles === 'both' || a.resizeHandles === 'left' ? '\x3cdiv class\x3d"sch-resizable-handle sch-gantt-task-handle sch-resizable-handle-west"\x3e\x3c/div\x3e' : '') + '\x3cdiv class\x3d"sch-gantt-progress-bar" style\x3d"width:{percentDone}%;{progressBarStyle}" unselectable\x3d"on"\x3e\x26#160;\x3c/div\x3e' + (a.resizeHandles === 'both' || a.resizeHandles === 'right' ? '\x3cdiv class\x3d"sch-resizable-handle sch-gantt-task-handle sch-resizable-handle-east"\x3e\x3c/div\x3e' : '') + (a.enableDependencyDragDrop ? 
  '\x3cdiv unselectable\x3d"on" class\x3d"sch-gantt-terminal sch-gantt-terminal-end"\x3e\x3c/div\x3e' : '') + (a.enableProgressBarResize ? '\x3cdiv style\x3d"left:{percentDone}%" class\x3d"sch-gantt-progressbar-handle"\x3e\x3c/div\x3e' : '') + '\x3c/div\x3e' + (a.rightLabel ? '\x3cdiv class\x3d"sch-gantt-labelct sch-gantt-labelct-right" style\x3d"left:{width}px"\x3e\x3clabel class\x3d"sch-gantt-label sch-gantt-label-right"\x3e{rightLabel}\x3c/label\x3e\x3c/div\x3e' : '') + '\x3c/div\x3e', {compiled:true, 
  disableFormats:true}]);
}});
Ext.define('Gnt.template.Milestone', {extend:'Ext.XTemplate', constructor:function(a) {
  this.callParent(['\x3cdiv class\x3d"sch-event-wrap ' + a.baseCls + ' x-unselectable" style\x3d"left:{leftOffset}px"\x3e' + (a.leftLabel ? '\x3cdiv class\x3d"sch-gantt-labelct sch-gantt-labelct-left"\x3e\x3clabel class\x3d"sch-gantt-label sch-gantt-label-left"\x3e{leftLabel}\x3c/label\x3e\x3c/div\x3e' : '') + (a.printable ? '\x3cimg id\x3d"' + a.prefix + '{id}" src\x3d"' + a.imgSrc + '" class\x3d"sch-gantt-item sch-gantt-milestone-diamond {cls}" unselectable\x3d"on" style\x3d"{style}" /\x3e' : '\x3cdiv id\x3d"' + 
  a.prefix + '{id}" class\x3d"sch-gantt-item sch-gantt-milestone-diamond {cls}" unselectable\x3d"on" style\x3d"{style}"\x3e' + (a.enableDependencyDragDrop ? '\x3cdiv class\x3d"sch-gantt-terminal sch-gantt-terminal-start"\x3e\x3c/div\x3e\x3cdiv class\x3d"sch-gantt-terminal sch-gantt-terminal-end"\x3e\x3c/div\x3e' : '') + '\x3c/div\x3e') + (a.rightLabel ? '\x3cdiv class\x3d"sch-gantt-labelct sch-gantt-labelct-right" style\x3d"left:{width}px"\x3e\x3clabel class\x3d"sch-gantt-label sch-gantt-label-right"\x3e{rightLabel}\x3c/label\x3e\x3c/div\x3e' : 
  '') + '\x3c/div\x3e', {compiled:true, disableFormats:true}]);
}});
Ext.define('Gnt.template.ParentTask', {extend:'Ext.XTemplate', constructor:function(a) {
  this.callParent(['\x3cdiv class\x3d"sch-event-wrap ' + a.baseCls + ' x-unselectable" style\x3d"left:{leftOffset}px;"\x3e' + (a.leftLabel ? '\x3cdiv class\x3d"sch-gantt-labelct sch-gantt-labelct-left"\x3e\x3clabel class\x3d"sch-gantt-label sch-gantt-label-left"\x3e{leftLabel}\x3c/label\x3e\x3c/div\x3e' : '') + '\x3cdiv id\x3d"' + a.prefix + '{id}" class\x3d"sch-gantt-item sch-gantt-parenttask-bar {cls}" style\x3d"width:{width}px; {style}"\x3e\x3cdiv class\x3d"sch-gantt-progress-bar" style\x3d"width:{percentDone}%;{progressBarStyle}"\x3e\x26#160;\x3c/div\x3e' + 
  (a.enableDependencyDragDrop ? '\x3cdiv class\x3d"sch-gantt-terminal sch-gantt-terminal-start"\x3e\x3c/div\x3e' : '') + '\x3cdiv class\x3d"sch-gantt-parenttask-arrow sch-gantt-parenttask-leftarrow"\x3e\x3c/div\x3e\x3cdiv class\x3d"sch-gantt-parenttask-arrow sch-gantt-parenttask-rightarrow"\x3e\x3c/div\x3e' + (a.enableDependencyDragDrop ? '\x3cdiv class\x3d"sch-gantt-terminal sch-gantt-terminal-end"\x3e\x3c/div\x3e' : '') + '\x3c/div\x3e' + (a.rightLabel ? '\x3cdiv class\x3d"sch-gantt-labelct sch-gantt-labelct-right" style\x3d"left:{width}px"\x3e\x3clabel class\x3d"sch-gantt-label sch-gantt-label-right"\x3e{rightLabel}\x3c/label\x3e\x3c/div\x3e' : 
  '') + '\x3c/div\x3e', {compiled:true, disableFormats:true}]);
}});
Ext.define('Gnt.Tooltip', {extend:'Ext.ToolTip', requires:['Ext.Template'], startText:'Starts: ', endText:'Ends: ', durationText:'Duration:', mode:'startend', cls:'sch-tip', height:40, autoHide:false, anchor:'b-tl', maskOnDisable:false, initComponent:function() {
  if (this.mode === 'startend' && !this.startEndTemplate) {
    this.startEndTemplate = (new Ext.Template('\x3cdiv class\x3d"sch-timetipwrap {cls}"\x3e\x3cdiv\x3e' + this.startText + '{startText}\x3c/div\x3e\x3cdiv\x3e' + this.endText + '{endText}\x3c/div\x3e\x3c/div\x3e')).compile();
  }
  if (this.mode === 'duration' && !this.durationTemplate) {
    this.durationTemplate = (new Ext.Template('\x3cdiv class\x3d"sch-timetipwrap {cls}"\x3e', '\x3cdiv\x3e' + this.startText + ' {startText}\x3c/div\x3e', '\x3cdiv\x3e' + this.durationText + ' {duration} {unit}\x3c/div\x3e', '\x3c/div\x3e')).compile();
  }
  this.callParent(arguments);
}, update:function(e, b, d, a) {
  var c;
  if (this.mode === 'duration') {
    c = this.getDurationContent(e, b, d, a);
  } else {
    c = this.getStartEndContent(e, b, d, a);
  }
  this.callParent([c]);
}, getStartEndContent:function(b, f, a, h) {
  var e = this.gantt, i = e.getFormattedDate(b), d = i, g;
  if (f - b > 0) {
    d = e.getFormattedEndDate(f, b);
  }
  var c = {cls:a ? 'sch-tip-ok' : 'sch-tip-notok', startText:i, endText:d};
  if (this.showClock) {
    Ext.apply(c, {startHourDegrees:roundedStart.getHours() * 30, startMinuteDegrees:roundedStart.getMinutes() * 6});
    if (f) {
      Ext.apply(c, {endHourDegrees:g.getHours() * 30, endMinuteDegrees:g.getMinutes() * 6});
    }
  }
  return this.startEndTemplate.apply(c);
}, getDurationContent:function(f, b, d, a) {
  var c = a.getDurationUnit() || Sch.util.Date.DAY;
  var e = a.calculateDuration(f, b, c);
  return this.durationTemplate.apply({cls:d ? 'sch-tip-ok' : 'sch-tip-notok', startText:this.gantt.getFormattedDate(f), duration:parseFloat(Ext.Number.toFixed(e, 1)), unit:Sch.util.Date.getReadableNameOfUnit(c, e > 1)});
}, show:function(a) {
  if (a) {
    this.setTarget(a);
  }
  this.callParent([]);
}});
Ext.define('Gnt.feature.TaskDragDrop', {extend:'Ext.dd.DragZone', requires:['Gnt.Tooltip', 'Ext.dd.StatusProxy', 'Ext.dd.ScrollManager'], onDragEnter:Ext.emptyFn, onDragOut:Ext.emptyFn, constructor:function(a) {
  a = a || {};
  Ext.apply(this, a);
  this.proxy = this.proxy || Ext.create('Ext.dd.StatusProxy', {shadow:false, dropAllowed:'sch-gantt-dragproxy', dropNotAllowed:'sch-gantt-dragproxy', ensureAttachedToBody:Ext.emptyFn});
  var c = this, b = c.gantt;
  if (c.useTooltip) {
    c.tip = Ext.create('Gnt.Tooltip', {gantt:b});
  }
  c.callParent([b.el, Ext.apply(a, {ddGroup:c.gantt.id + '-task-dd'})]);
  c.scroll = false;
  c.isTarget = true;
  c.ignoreSelf = false;
  c.addInvalidHandleClass('sch-resizable-handle');
  c.addInvalidHandleClass('x-resizable-handle');
  c.addInvalidHandleClass('sch-gantt-terminal');
  c.addInvalidHandleClass('sch-gantt-progressbar-handle');
  Ext.dd.ScrollManager.register(c.gantt.el);
  c.gantt.ownerCt.el.appendChild(this.proxy.el);
  c.gantt.on({destroy:c.cleanUp, scope:c});
}, useTooltip:true, validatorFn:function(a, b, d, c) {
  return true;
}, validatorFnScope:null, cleanUp:function() {
  if (this.tip) {
    this.tip.destroy();
  }
  this.destroy();
}, containerScroll:false, dropAllowed:'sch-gantt-dragproxy', dropNotAllowed:'sch-gantt-dragproxy', destroy:function() {
  this.callParent(arguments);
  Ext.dd.ScrollManager.unregister(this.gantt.el);
}, autoOffset:function(a, e) {
  var d = this.dragData.repairXY, c = a - d[0], b = e - d[1];
  this.setDelta(c, b);
}, setXConstraint:function(c, b, a) {
  this.leftConstraint = c;
  this.rightConstraint = b;
  this.minX = c;
  this.maxX = b;
  if (a) {
    this.setXTicks(this.initPageX, a);
  }
  this.constrainX = true;
}, setYConstraint:function(a, c, b) {
  this.topConstraint = a;
  this.bottomConstraint = c;
  this.minY = a;
  this.maxY = c;
  if (b) {
    this.setYTicks(this.initPageY, b);
  }
  this.constrainY = true;
}, constrainTo:function(a, b) {
  this.resetConstraints();
  this.initPageX = a.left;
  this.initPageY = b.top;
  this.setXConstraint(a.left, a.right - (b.right - b.left), this.xTickSize);
  this.setYConstraint(b.top - 1, b.top - 1, this.yTickSize);
}, onDragOver:function(g, h) {
  var f = this.dragData, d = f.record, c = this.gantt, b = this.proxy.el.getX() + c.getXOffset(d), a = c.getDateFromXY([b, 0], 'round');
  if (!f.hidden) {
    Ext.fly(f.sourceNode).hide();
    f.hidden = true;
  }
  if (!a || a - f.start === 0) {
    return;
  }
  f.start = a;
  this.valid = this.validatorFn.call(this.validatorFnScope || c, d, a, f.duration, g) !== false;
  if (this.tip) {
    this.tip.update(a, d.calculateEndDate(a, d.getDuration(), d.getDurationUnit()), this.valid);
  }
}, onStartDrag:function() {
  var a = this.dragData.record;
  if (this.tip) {
    this.tip.enable();
    this.tip.show(Ext.get(this.dragData.sourceNode));
    this.tip.update(a.getStartDate(), a.getEndDate(), true);
  }
  this.gantt.fireEvent('taskdragstart', this.gantt, a);
}, getDragData:function(i) {
  var h = this.gantt, f = i.getTarget(h.eventSelector);
  if (f && !i.getTarget('.sch-gantt-baseline-item')) {
    var c = Ext.get(f), d = h.resolveTaskRecord(c);
    if (h.fireEvent('beforetaskdrag', h, d, i) === false) {
      return null;
    }
    var j = f.cloneNode(true), b = h.getSnapPixelAmount(), a = c.getXY();
    j.id = Ext.id();
    if (b <= 1) {
      Ext.fly(j).setStyle('left', 0);
    }
    this.constrainTo(Ext.fly(h.findItemByChild(f)).getRegion(), c.getRegion());
    if (b >= 1) {
      this.setXConstraint(this.leftConstraint, this.rightConstraint, b);
    }
    return {sourceNode:f, repairXY:a, ddel:j, record:d, duration:Sch.util.Date.getDurationInMinutes(d.getStartDate(), d.getEndDate())};
  }
  return null;
}, afterRepair:function() {
  Ext.fly(this.dragData.sourceNode).show();
  if (this.tip) {
    this.tip.hide();
  }
  this.dragging = false;
}, getRepairXY:function() {
  this.gantt.fireEvent('afterdnd', this.gantt);
  return this.dragData.repairXY;
}, onDragDrop:function(g, i) {
  var f = this.cachedTarget || Ext.dd.DragDropMgr.getDDById(i), d = this.dragData, b = this.gantt, a = d.record, h = d.start;
  var c = false;
  if (this.tip) {
    this.tip.disable();
  }
  if (this.valid && h && a.getStartDate() - h !== 0) {
    b.taskStore.on('update', function() {
      c = true;
    }, null, {single:true});
    a.setStartDate(h, true, b.taskStore.skipWeekendsDuringDragDrop);
    if (c) {
      b.fireEvent('taskdrop', b, a);
      if (Ext.isIE9) {
        this.proxy.el.setStyle('visibility', 'hidden');
        Ext.Function.defer(this.onValidDrop, 10, this, [f, g, i]);
      } else {
        this.onValidDrop(f, g, i);
      }
    }
  }
  if (!c) {
    this.onInvalidDrop(f, g, i);
  }
  b.fireEvent('aftertaskdrop', b, a);
}});
Ext.define('Gnt.feature.DependencyDragDrop', {extend:'Ext.util.Observable', constructor:function(b) {
  this.addEvents('beforednd', 'dndstart', 'drop', 'afterdnd');
  var a = b.ganttView;
  Ext.apply(this, {el:a.el, ddGroup:a.id + '-sch-dependency-dd', ganttView:a, dependencyStore:a.getDependencyStore()});
  this.el.on('mousemove', function() {
    this.setupDragZone();
    this.setupDropZone();
  }, this, {single:true});
  this.callParent(arguments);
}, fromText:'From: \x3cstrong\x3e{0}\x3c/strong\x3e {1}\x3cbr/\x3e', toText:'To: \x3cstrong\x3e{0}\x3c/strong\x3e {1}', startText:'Start', endText:'End', useLineProxy:true, terminalSelector:'.sch-gantt-terminal', destroy:function() {
  if (this.dragZone) {
    this.dragZone.destroy();
  }
  if (this.dropZone) {
    this.dropZone.destroy();
  }
  if (this.lineProxyEl) {
    this.lineProxyEl.destroy();
  }
}, initLineProxy:function(b, a) {
  var c = this.lineProxyEl = this.el.createChild({cls:'sch-gantt-connector-proxy'});
  c.alignTo(b, a ? 'l' : 'r');
  Ext.apply(this, {containerTop:this.el.getTop(), containerLeft:this.el.getLeft(), startXY:c.getXY(), startScrollLeft:this.el.dom.scrollLeft, startScrollTop:this.el.dom.scrollTop});
}, updateLineProxy:function(m) {
  var a = this.lineProxyEl, j = m[0] - this.startXY[0] + this.el.dom.scrollLeft - this.startScrollLeft, i = m[1] - this.startXY[1] + this.el.dom.scrollTop - this.startScrollTop, b = Math.max(1, Math.sqrt(Math.pow(j, 2) + Math.pow(i, 2)) - 2), h = Math.atan2(i, j) - Math.PI / 2, e;
  if (Ext.isIE) {
    var k = Math.cos(h), g = Math.sin(h), l = 'progid:DXImageTransform.Microsoft.Matrix(sizingMethod\x3d"auto expand", M11 \x3d ' + k + ', M12 \x3d ' + -g + ', M21 \x3d ' + g + ', M22 \x3d ' + k + ')', d, f;
    if (this.el.dom.scrollTop !== this.startScrollTop) {
      d = this.startScrollTop - this.containerTop;
    } else {
      d = this.el.dom.scrollTop - this.containerTop;
    }
    if (this.el.dom.scrollLeft !== this.startScrollLeft) {
      f = this.startScrollLeft - this.containerLeft;
    } else {
      f = this.el.dom.scrollLeft - this.containerLeft;
    }
    e = {height:b + 'px', top:Math.min(0, i) + this.startXY[1] + d + (i < 0 ? 2 : 0) + 'px', left:Math.min(0, j) + this.startXY[0] + f + (j < 0 ? 2 : 0) + 'px', filter:l, '-ms-filter':l};
  } else {
    var c = 'rotate(' + h + 'rad)';
    e = {height:b + 'px', '-o-transform':c, '-webkit-transform':c, '-moz-transform':c, transform:c};
  }
  a.show().setStyle(e);
}, setupDragZone:function() {
  var b = this, a = this.ganttView;
  this.dragZone = Ext.create('Ext.dd.DragZone', this.el, {ddGroup:this.ddGroup, onStartDrag:function() {
    this.el.addCls('sch-gantt-dep-dd-dragging');
    b.fireEvent('dndstart', b);
    if (b.useLineProxy) {
      var c = this.dragData;
      b.initLineProxy(c.sourceNode, c.isStart);
    }
  }, getDragData:function(g) {
    var f = g.getTarget(b.terminalSelector);
    if (f) {
      var d = a.resolveTaskRecord(f);
      if (b.fireEvent('beforednd', this, d) === false) {
        return null;
      }
      var c = !!f.className.match('sch-gantt-terminal-start'), h = Ext.core.DomHelper.createDom({cls:'sch-dd-dependency', children:[{tag:'span', cls:'sch-dd-dependency-from', html:Ext.String.format(b.fromText, d.getName(), c ? b.startText : b.endText)}, {tag:'span', cls:'sch-dd-dependency-to', html:Ext.String.format(b.toText, '', '')}]});
      return {fromId:d.getId() || d.internalId, isStart:c, repairXY:Ext.fly(f).getXY(), ddel:h, sourceNode:Ext.fly(f).up(a.eventSelector)};
    }
    return false;
  }, afterRepair:function() {
    this.el.removeCls('sch-gantt-dep-dd-dragging');
    this.dragging = false;
    b.fireEvent('afterdnd', this);
  }, onMouseUp:function() {
    this.el.removeCls('sch-gantt-dep-dd-dragging');
    if (b.lineProxyEl) {
      if (Ext.isIE) {
        Ext.destroy(b.lineProxyEl);
        b.lineProxyEl = null;
      } else {
        b.lineProxyEl.animate({to:{height:0}, duration:500, callback:function() {
          Ext.destroy(b.lineProxyEl);
          b.lineProxyEl = null;
        }});
      }
    }
  }, getRepairXY:function() {
    return this.dragData.repairXY;
  }});
}, setupDropZone:function() {
  var b = this, a = this.ganttView;
  this.dropZone = Ext.create('Ext.dd.DropZone', this.el, {ddGroup:this.ddGroup, getTargetFromEvent:function(c) {
    if (b.useLineProxy) {
      b.updateLineProxy(c.getXY());
    }
    return c.getTarget(b.terminalSelector);
  }, onNodeEnter:function(h, c, g, f) {
    var d = h.className.match('sch-gantt-terminal-start');
    Ext.fly(h).addCls(d ? 'sch-gantt-terminal-start-drophover' : 'sch-gantt-terminal-end-drophover');
  }, onNodeOut:function(h, c, g, f) {
    var d = h.className.match('sch-gantt-terminal-start');
    Ext.fly(h).removeCls(d ? 'sch-gantt-terminal-start-drophover' : 'sch-gantt-terminal-end-drophover');
  }, onNodeOver:function(k, c, j, i) {
    var d = a.resolveTaskRecord(k), f = d.getId() || d.internalId, g = k.className.match('sch-gantt-terminal-start'), h = Ext.String.format(b.toText, d.getName(), g ? b.startText : b.endText);
    c.proxy.el.down('.sch-dd-dependency-to').update(h);
    if (b.dependencyStore.isValidDependency(i.fromId, f)) {
      return this.dropAllowed;
    } else {
      return this.dropNotAllowed;
    }
  }, onNodeDrop:function(h, l, i, f) {
    var j, c = true, d = Gnt.model.Dependency.Type, g = a.resolveTaskRecord(h), k = g.getId() || g.internalId;
    if (b.lineProxyEl) {
      Ext.destroy(b.lineProxyEl);
      b.lineProxyEl = null;
    }
    this.el.removeCls('sch-gantt-dep-dd-dragging');
    if (f.isStart) {
      if (h.className.match('sch-gantt-terminal-start')) {
        j = d.StartToStart;
      } else {
        j = d.StartToEnd;
      }
    } else {
      if (h.className.match('sch-gantt-terminal-start')) {
        j = d.EndToStart;
      } else {
        j = d.EndToEnd;
      }
    }
    c = b.dependencyStore.isValidDependency(f.fromId, k);
    if (c) {
      b.fireEvent('drop', this, f.fromId, k, j);
    }
    b.fireEvent('afterdnd', this);
    return c;
  }});
}});
Ext.define('Gnt.feature.DragCreator', {requires:['Ext.Template', 'Sch.util.DragTracker', 'Gnt.Tooltip'], constructor:function(a) {
  Ext.apply(this, a || {});
  this.init();
}, disabled:false, showDragTip:true, dragTolerance:2, setDisabled:function(a) {
  this.disabled = a;
  if (this.dragTip) {
    this.dragTip.setDisabled(a);
  }
}, getProxy:function() {
  if (!this.proxy) {
    this.proxy = this.template.append(this.ganttView.ownerCt.el, {}, true);
  }
  return this.proxy;
}, onBeforeDragStart:function(f) {
  var c = this.ganttView, b = f.getTarget('.' + c.timeCellCls, 2);
  if (b) {
    var a = c.resolveTaskRecord(b);
    var d = c.getDateFromDomEvent(f);
    if (!this.disabled && b && !a.getStartDate() && !a.getEndDate() && c.fireEvent('beforedragcreate', c, a, d, f) !== false) {
      f.stopEvent();
      this.taskRecord = a;
      this.originalStart = d;
      this.rowRegion = c.getScheduleRegion(this.taskRecord, this.originalStart);
      this.dateConstraints = c.getDateConstraints(this.resourceRecord, this.originalStart);
      return true;
    }
  }
  return false;
}, onDragStart:function() {
  var c = this, a = c.ganttView, b = c.getProxy();
  c.start = c.originalStart;
  c.end = c.start;
  c.rowBoundaries = {top:c.rowRegion.top, bottom:c.rowRegion.bottom};
  b.setRegion({top:c.rowBoundaries.top, right:c.tracker.startXY[0], bottom:c.rowBoundaries.bottom, left:c.tracker.startXY[0]});
  b.show();
  c.ganttView.fireEvent('dragcreatestart', c.ganttView);
  if (c.showDragTip) {
    c.dragTip.update(c.start, c.end, true, this.taskRecord);
    c.dragTip.enable();
    c.dragTip.show(b);
  }
}, onDrag:function(g) {
  var d = this, c = d.ganttView, b = d.tracker.getRegion().constrainTo(d.rowRegion), f = c.getStartEndDatesFromRegion(b, 'round');
  if (!f) {
    return;
  }
  d.start = f.start || d.start;
  d.end = f.end || d.end;
  var a = d.dateConstraints;
  if (a) {
    d.end = Sch.util.Date.constrain(d.end, a.start, a.end);
    d.start = Sch.util.Date.constrain(d.start, a.start, a.end);
  }
  if (d.showDragTip) {
    d.dragTip.update(d.start, d.end, true, this.taskRecord);
  }
  Ext.apply(b, d.rowBoundaries);
  this.getProxy().setRegion(b);
}, onDragEnd:function(b) {
  var c = this.ganttView, a = true;
  if (this.showDragTip) {
    this.dragTip.disable();
  }
  if (!this.start || !this.end || this.end < this.start) {
    a = false;
  }
  if (a) {
    this.taskRecord.setStartEndDate(this.start, this.end);
    c.fireEvent('dragcreateend', c, this.taskRecord, b);
  }
  this.proxy.hide();
  c.fireEvent('afterdragcreate', c);
}, init:function() {
  var c = this.ganttView, a = c.el, b = Ext.Function.bind;
  this.lastTime = new Date();
  this.template = this.template || Ext.create('Ext.Template', '\x3cdiv class\x3d"sch-gantt-dragcreator-proxy"\x3e\x3c/div\x3e', {compiled:true, disableFormats:true});
  c.on({destroy:this.onGanttDestroy, scope:this});
  this.tracker = new Sch.util.DragTracker({el:a, tolerance:this.dragTolerance, onBeforeStart:b(this.onBeforeDragStart, this), onStart:b(this.onDragStart, this), onDrag:b(this.onDrag, this), onEnd:b(this.onDragEnd, this)});
  if (this.showDragTip) {
    this.dragTip = Ext.create('Gnt.Tooltip', {mode:'duration', cls:'sch-gantt-dragcreate-tip', gantt:c});
  }
}, onGanttDestroy:function() {
  if (this.dragTip) {
    this.dragTip.destroy();
  }
  if (this.tracker) {
    this.tracker.destroy();
  }
  if (this.proxy) {
    Ext.destroy(this.proxy);
    this.proxy = null;
  }
}});
Ext.define('Gnt.feature.LabelEditor', {extend:'Ext.Editor', labelPosition:'', constructor:function(b, a) {
  this.ganttView = b;
  this.ganttView.on('afterrender', this.onGanttRender, this);
  this.callParent([a]);
}, edit:function(a) {
  var b = this.ganttView.getElementFromEventRecord(a).up(this.ganttView.eventWrapSelector);
  this.record = a;
  this.startEdit(b.down(this.delegate), this.dataIndex ? a.get(this.dataIndex) : '');
}, delegate:'', dataIndex:'', shadow:false, completeOnEnter:true, cancelOnEsc:true, ignoreNoChange:true, onGanttRender:function(a) {
  if (!this.field.width) {
    this.autoSize = 'width';
  }
  this.on({beforestartedit:function(c, b, d) {
    return a.fireEvent('labeledit_beforestartedit', a, this.record, d, c);
  }, beforecomplete:function(c, d, b) {
    return a.fireEvent('labeledit_beforecomplete', a, d, b, this.record, c);
  }, complete:function(c, d, b) {
    this.record.set(this.dataIndex, d);
    a.fireEvent('labeledit_complete', a, d, b, this.record, c);
  }, scope:this});
  a.el.on('dblclick', function(c, b) {
    this.edit(a.resolveTaskRecord(b));
  }, this, {delegate:this.delegate});
}});
Ext.define('Gnt.feature.ProgressBarResize', {requires:['Ext.QuickTip', 'Ext.resizer.Resizer'], constructor:function(a) {
  Ext.apply(this, a || {});
  var b = this.gantt;
  b.on({destroy:this.cleanUp, scope:this});
  b.mon(b.el, 'mousedown', this.onMouseDown, this, {delegate:'.sch-gantt-progressbar-handle'});
  this.callParent(arguments);
}, useTooltip:true, increment:10, onMouseDown:function(d, b) {
  var c = this.gantt, f = c.resolveTaskRecord(b);
  if (c.fireEvent('beforeprogressbarresize', c, f) !== false) {
    var a = Ext.fly(b).prev('.sch-gantt-progress-bar');
    d.stopEvent();
    this.createResizable(a, f, d);
    c.fireEvent('progressbarresizestart', c, f);
  }
}, createResizable:function(d, a, h) {
  var c = h.getTarget(), i = d.up(this.gantt.eventSelector), g = i.getWidth() - 4, b = g * this.increment / 100;
  var f = Ext.create('Ext.resizer.Resizer', {target:d, taskRecord:a, handles:'e', minWidth:0, maxWidth:g, minHeight:1, widthIncrement:b, listeners:{resizedrag:this.partialResize, resize:this.afterResize, scope:this}});
  f.resizeTracker.onMouseDown(h, f.east.dom);
  i.select('.x-resizable-handle, .sch-gantt-terminal, .sch-gantt-progressbar-handle').hide();
  if (this.useTooltip) {
    if (!this.tip) {
      this.tip = Ext.create('Ext.ToolTip', {autoHide:false, anchor:'b', html:'%'});
    }
    this.tip.setTarget(d);
    this.tip.show();
    this.tip.body.update(a.getPercentDone() + '%');
  }
}, partialResize:function(c, b) {
  var a = Math.round(b * 100 / (c.maxWidth * this.increment)) * this.increment;
  if (this.tip) {
    this.tip.body.update(a + '%');
  }
}, afterResize:function(d, a, b, f) {
  var g = d.taskRecord;
  if (this.tip) {
    this.tip.hide();
  }
  var c = Math.round(a * 100 / (d.maxWidth * this.increment)) * this.increment;
  d.taskRecord.setPercentDone(c);
  d.destroy();
  this.gantt.fireEvent('afterprogressbarresize', this.gantt, g);
}, cleanUp:function() {
  if (this.tip) {
    this.tip.destroy();
  }
}});
Ext.define('Gnt.feature.TaskResize', {constructor:function(a) {
  Ext.apply(this, a);
  var b = this.gantt;
  b.on({destroy:this.cleanUp, scope:this});
  b.mon(b.el, 'mousedown', this.onMouseDown, this, {delegate:'.sch-resizable-handle'});
  this.callParent(arguments);
}, showDuration:true, useTooltip:true, validatorFn:Ext.emptyFn, validatorFnScope:null, onMouseDown:function(c) {
  var b = this.gantt, a = c.getTarget(b.eventSelector), d = b.resolveTaskRecord(a);
  if (b.fireEvent('beforetaskresize', b, d, c) === false) {
    return;
  }
  c.stopEvent();
  this.createResizable(Ext.get(a), d, c);
  b.fireEvent('taskresizestart', b, d);
}, createResizable:function(c, k, j) {
  var m = j.getTarget(), i = this.gantt, a = !!m.className.match('sch-resizable-handle-west'), d = i.getSnapPixelAmount(), f = c.getWidth(), l = c.up('.x-grid-row').getRegion();
  this.resizable = Ext.create('Ext.resizer.Resizer', {startLeft:c.getLeft(), startRight:c.getRight(), target:c, taskRecord:k, handles:a ? 'w' : 'e', constrainTo:l, minHeight:1, minWidth:d, widthIncrement:d, listeners:{resizedrag:this[a ? 'partialWestResize' : 'partialEastResize'], resize:this.afterResize, scope:this}});
  this.resizable.resizeTracker.onMouseDown(j, this.resizable[a ? 'west' : 'east'].dom);
  if (this.useTooltip) {
    if (!this.tip) {
      this.tip = Ext.create('Gnt.Tooltip', {mode:this.showDuration ? 'duration' : 'startend', gantt:this.gantt});
    }
    var b = k.getStartDate(), h = k.getEndDate();
    this.tip.show(c);
    this.tip.update(b, h, true, k);
  }
}, partialEastResize:function(i, f, b, g) {
  var c = this.gantt, a = c.getDateFromXY([i.startLeft + Math.min(f, this.resizable.maxWidth), 0], 'round');
  if (!a || i.end - a === 0) {
    return;
  }
  var h = i.taskRecord.getStartDate(), d = this.validatorFn.call(this.validatorFnScope || this, i.taskRecord, h, a) !== false;
  i.end = a;
  c.fireEvent('partialtaskresize', c, i.taskRecord, h, a, i.el, g);
  if (this.useTooltip) {
    this.tip.update(h, a, d, i.taskRecord);
  }
}, partialWestResize:function(i, f, b, g) {
  var c = this.gantt, h = c.getDateFromXY([i.startRight - Math.min(f, this.resizable.maxWidth), 0], 'round');
  if (!h || i.start - h === 0) {
    return;
  }
  var a = i.taskRecord.getEndDate(), d = this.validatorFn.call(this.validatorFnScope || this, i.taskRecord, h, a) !== false;
  i.start = h;
  c.fireEvent('partialtaskresize', c, i.taskRecord, h, a, i.el, g);
  if (this.useTooltip) {
    this.tip.update(h, a, d, i.taskRecord);
  }
}, afterResize:function(a, l, i, j) {
  if (this.useTooltip) {
    this.tip.hide();
  }
  var k = a.taskRecord, g = k.getStartDate(), m = k.getEndDate(), c = a.start || g, f = a.end || m, d = this.gantt;
  a.destroy();
  if (c && f && (c - g || f - m) && this.validatorFn.call(this.validatorFnScope || this, k, c, f, j) !== false) {
    var b = this.gantt.taskStore.skipWeekendsDuringDragDrop;
    if (c - g !== 0) {
      k.setStartDate(c <= f ? c : f, false, b);
    } else {
      k.setEndDate(c <= f ? f : c, false, b);
    }
  } else {
    d.refreshKeepingScroll();
  }
  d.fireEvent('aftertaskresize', d, k);
}, cleanUp:function() {
  if (this.tip) {
    this.tip.destroy();
  }
}});
Ext.define('Gnt.feature.WorkingTime', {extend:'Sch.plugin.Zones', requires:['Ext.data.Store', 'Sch.model.Range'], expandToFitView:true, calendar:null, init:function(a) {
  if (!this.calendar) {
    Ext.Error.raise("Required attribute 'calendar' missed during initialization of 'Gnt.feature.WorkingTime'");
  }
  this.bindCalendar(this.calendar);
  Ext.apply(this, {store:new Ext.data.Store({model:'Sch.model.Range'})});
  this.callParent(arguments);
  a.on('viewchange', this.onViewChange, this);
  this.onViewChange();
}, bindCalendar:function(b) {
  var a = {datachanged:this.refresh, update:this.refresh, scope:this, delay:1};
  if (this.calendar) {
    this.calendar.un(a);
  }
  b.on(a);
  this.calendar = b;
}, onViewChange:function() {
  var a = Sch.util.Date;
  if (a.compareUnits(this.timeAxis.unit, a.WEEK) > 0) {
    this.setDisabled(true);
  } else {
    this.setDisabled(false);
    this.refresh();
  }
}, refresh:function() {
  var a = this.schedulerView;
  this.store.removeAll(true);
  this.store.add(this.calendar.getHolidaysRanges(a.getStart(), a.getEnd(), true));
}});
Ext.define('Gnt.plugin.DependencyEditor', {extend:'Ext.form.FormPanel', mixins:['Ext.AbstractPlugin'], lockableScope:'normal', requires:['Ext.form.DisplayField', 'Ext.form.ComboBox', 'Ext.form.NumberField', 'Gnt.model.Dependency'], hideOnBlur:true, fromText:'From', toText:'To', typeText:'Type', lagText:'Lag', endToStartText:'Finish-To-Start', startToStartText:'Start-To-Start', endToEndText:'Finish-To-Finish', startToEndText:'Start-To-Finish', showLag:false, border:false, height:150, width:260, frame:true, 
labelWidth:60, constrain:false, initComponent:function() {
  Ext.apply(this, {items:this.buildFields(), defaults:{width:240}, floating:true, hideMode:'offsets'});
  this.callParent(arguments);
}, beforeRender:function() {
  this.addCls('sch-gantt-dependencyeditor');
  this.callParent(arguments);
}, init:function(a) {
  a.on('dependencydblclick', this.onDependencyDblClick, this);
  a.on('render', this.onGanttRender, this, {delay:50});
  this.gantt = a;
  this.taskStore = a.getTaskStore();
}, onGanttRender:function() {
  this.render(Ext.getBody());
  this.collapse(Ext.Component.DIRECTION_TOP, true);
  this.hide();
  if (this.hideOnBlur) {
    this.mon(Ext.getBody(), 'click', this.onMouseClick, this);
  }
}, show:function(a, b) {
  this.dependencyRecord = a;
  this.getForm().loadRecord(a);
  this.fromLabel.setValue(this.dependencyRecord.getSourceTask().getName());
  this.toLabel.setValue(this.dependencyRecord.getTargetTask().getName());
  this.callParent([]);
  this.el.setXY(b);
  this.expand(!this.constrain);
  if (this.constrain) {
    this.doConstrain(Ext.util.Region.getRegion(Ext.getBody()));
  }
}, buildFields:function() {
  var c = this, d = Gnt.model.Dependency, b = d.Type, a = [this.fromLabel = Ext.create('Ext.form.DisplayField', {fieldLabel:this.fromText}), this.toLabel = Ext.create('Ext.form.DisplayField', {fieldLabel:this.toText}), this.typeField = Ext.create('Ext.form.ComboBox', {name:d.prototype.nameField, fieldLabel:this.typeText, triggerAction:'all', queryMode:'local', valueField:'value', displayField:'text', editable:false, store:Ext.create('Ext.data.JsonStore', {fields:['text', 'value'], data:[{text:this.endToStartText, 
  value:b.EndToStart}, {text:this.startToStartText, value:b.StartToStart}, {text:this.endToEndText, value:b.EndToEnd}, {text:this.startToEndText, value:b.StartToEnd}]})})];
  if (this.showLag) {
    a.push(this.lagField = Ext.create('Ext.form.NumberField', {name:d.prototype.lagField, fieldLabel:this.lagText}));
  }
  return a;
}, onDependencyDblClick:function(c, a, d, b) {
  if (this.lagField) {
    this.lagField.name = a.lagField;
  }
  if (this.typeField) {
    this.typeField.name = a.typeField;
  }
  if (a != this.dependencyRecord) {
    this.show(a, d.getXY());
  }
}, onMouseClick:function(a) {
  if (this.collapsed || a.within(this.getEl()) || a.getTarget('.x-layer') || a.getTarget('.sch-ignore-click')) {
    return;
  }
  this.collapse();
}, afterCollapse:function() {
  delete this.dependencyRecord;
  this.hide();
  this.callParent(arguments);
}});
Ext.define('Gnt.plugin.TaskContextMenu', {extend:'Ext.menu.Menu', mixins:['Ext.AbstractPlugin'], lockableScope:'top', requires:['Gnt.model.Dependency'], plain:true, triggerEvent:'taskcontextmenu', texts:{newTaskText:'New task', newMilestoneText:'New milestone', deleteTask:'Delete task(s)', editLeftLabel:'Edit left label', editRightLabel:'Edit right label', add:'Add...', deleteDependency:'Delete dependency...', addTaskAbove:'Task above', addTaskBelow:'Task below', addMilestone:'Milestone', addSubtask:'Sub-task', 
addSuccessor:'Successor', addPredecessor:'Predecessor'}, grid:null, rec:null, lastHighlightedItem:null, createMenuItems:function() {
  var a = this.texts;
  return [{handler:this.deleteTask, requiresTask:true, scope:this, text:a.deleteTask}, {handler:this.editLeftLabel, requiresTask:true, scope:this, text:a.editLeftLabel}, {handler:this.editRightLabel, requiresTask:true, scope:this, text:a.editRightLabel}, {text:a.add, menu:{plain:true, items:[{handler:this.addTaskAboveAction, requiresTask:true, scope:this, text:a.addTaskAbove}, {handler:this.addTaskBelowAction, scope:this, text:a.addTaskBelow}, {handler:this.addMilestone, requiresTask:true, scope:this, 
  text:a.addMilestone}, {handler:this.addSubtask, requiresTask:true, scope:this, text:a.addSubtask}, {handler:this.addSuccessor, requiresTask:true, scope:this, text:a.addSuccessor}, {handler:this.addPredecessor, requiresTask:true, scope:this, text:a.addPredecessor}]}}, {text:a.deleteDependency, requiresTask:true, menu:{plain:true, listeners:{beforeshow:this.populateDependencyMenu, mouseover:this.onDependencyMouseOver, mouseleave:this.onDependencyMouseOut, scope:this}}}];
}, buildMenuItems:function() {
  this.items = this.createMenuItems();
}, initComponent:function() {
  this.buildMenuItems();
  this.callParent(arguments);
}, init:function(b) {
  b.on('destroy', this.cleanUp, this);
  var a = b.getSchedulingView(), c = b.lockedGrid.getView();
  if (this.triggerEvent === 'itemcontextmenu') {
    c.on('itemcontextmenu', this.onItemContextMenu, this);
    a.on('itemcontextmenu', this.onItemContextMenu, this);
  }
  a.on('taskcontextmenu', this.onTaskContextMenu, this);
  a.on('containercontextmenu', this.onContainerContextMenu, this);
  c.on('containercontextmenu', this.onContainerContextMenu, this);
  this.grid = b;
}, populateDependencyMenu:function(f) {
  var d = this.grid, b = d.getTaskStore(), e = this.rec.getAllDependencies(), a = d.dependencyStore;
  f.removeAll();
  if (e.length === 0) {
    return false;
  }
  var c = this.rec.getId() || this.rec.internalId;
  Ext.each(e, function(i) {
    var h = i.getSourceId(), g = b.getById(h == c ? i.getTargetId() : h);
    if (g) {
      f.add({depId:i.internalId, text:Ext.util.Format.ellipsis(g.getName(), 30), scope:this, handler:function(k) {
        var j;
        a.each(function(l) {
          if (l.internalId == k.depId) {
            j = l;
            return false;
          }
        });
        a.remove(j);
      }});
    }
  }, this);
}, onDependencyMouseOver:function(d, a, b) {
  if (a) {
    var c = this.grid.getSchedulingView();
    if (this.lastHighlightedItem) {
      c.unhighlightDependency(this.lastHighlightedItem.depId);
    }
    this.lastHighlightedItem = a;
    c.highlightDependency(a.depId);
  }
}, onDependencyMouseOut:function(b, a) {
  if (this.lastHighlightedItem) {
    this.grid.getSchedulingView().unhighlightDependency(this.lastHighlightedItem.depId);
  }
}, cleanUp:function() {
  this.destroy();
}, onTaskContextMenu:function(b, a, c) {
  this.activateMenu(a, c);
}, onItemContextMenu:function(b, a, d, c, f) {
  this.activateMenu(a, f);
}, onContainerContextMenu:function(a, b) {
  this.activateMenu(null, b);
}, activateMenu:function(c, b) {
  if (this.grid.isReadOnly()) {
    return;
  }
  b.stopEvent();
  this.rec = c;
  var a = this.query('[requiresTask]');
  Ext.each(a, function(d) {
    d.setDisabled(!c);
  });
  this.showAt(b.getXY());
}, copyTask:function(c) {
  var b = this.grid.getTaskStore().model;
  var a = new b({leaf:true});
  a.setPercentDone(0);
  a.setName(this.texts.newTaskText);
  a.set(a.startDateField, c && c.getStartDate() || null);
  a.set(a.endDateField, c && c.getEndDate() || null);
  a.set(a.durationField, c && c.getDuration() || null);
  a.set(a.durationUnitField, c && c.getDurationUnit() || 'd');
  return a;
}, addTaskAbove:function(a) {
  var b = this.rec;
  if (b) {
    b.addTaskAbove(a);
  } else {
    this.grid.taskStore.getRootNode().appendChild(a);
  }
}, addTaskBelow:function(a) {
  var b = this.rec;
  if (b) {
    b.addTaskBelow(a);
  } else {
    this.grid.taskStore.getRootNode().appendChild(a);
  }
}, deleteTask:function() {
  var a = this.grid.getSelectionModel().selected;
  this.grid.taskStore.remove(a.items);
}, editLeftLabel:function() {
  this.grid.getSchedulingView().editLeftLabel(this.rec);
}, editRightLabel:function() {
  this.grid.getSchedulingView().editRightLabel(this.rec);
}, addTaskAboveAction:function() {
  this.addTaskAbove(this.copyTask(this.rec));
}, addTaskBelowAction:function() {
  this.addTaskBelow(this.copyTask(this.rec));
}, addSubtask:function() {
  var a = this.rec;
  a.addSubtask(this.copyTask(a));
}, addSuccessor:function() {
  var a = this.rec;
  a.addSuccessor(this.copyTask(a));
}, addPredecessor:function() {
  var a = this.rec;
  a.addPredecessor(this.copyTask(a));
}, addMilestone:function() {
  var b = this.rec, a = this.copyTask(b);
  b.addTaskBelow(a);
  a.setStartEndDate(b.getEndDate(), b.getEndDate());
}});
Ext.define('Gnt.plugin.PdfExport', {extend:'Sch.plugin.PdfExport', getExportJsonHtml:function(d, g) {
  var b = this.scheduler.getSchedulingView(), c = b.dependencyView, a = c.painter.getDependencyTplData(b.dependencyStore.getRange()), e = c.lineTpl.apply(a), f = {dependencies:e, rowsAmount:d.rowsAmount, columnsAmountNormal:d.columnsAmountNormal, columnsAmountLocked:d.columnsAmountLocked, timeColumnWidth:d.timeColumnWidth, lockedGridWidth:d.lockedGridWidth, rowHeight:d.rowHeight};
  d.panelHTML = f;
  return this.callParent(arguments);
}, resizePanelHTML:function(e) {
  var f = this.callParent(arguments), b = f.select('.sch-dependencyview-ct').first(), d = e.k * e.rowsAmount * e.rowHeight, c = e.i * e.timeColumnWidth * (e.i === 1 ? e.columnsAmountLocked : e.columnsAmountNormal);
  b.dom.innerHTML = e.dependencies;
  b.applyStyles({top:-d + 'px', left:-c + 'px'});
  var a = f.select('.x-splitter').first();
  a.setHeight('100%');
  return f;
}});
Ext.define('Gnt.plugin.Printable', {extend:'Sch.plugin.Printable', getGridContent:function(c) {
  var f = this.callParent(arguments), d = c.getSchedulingView(), e = d.dependencyView, b = e.painter.getDependencyTplData(d.dependencyStore.getRange()), a;
  a = f.normalRows;
  f.normalRows = e.lineTpl.apply(b) + a;
  return f;
}});
Ext.define('Gnt.view.DependencyPainter', {extend:'Ext.util.Observable', requires:['Ext.util.Region'], constructor:function(a) {
  a = a || {};
  Ext.apply(this, a, {xOffset:8, yOffset:7, midRowOffset:6, arrowOffset:8});
}, getTaskBox:function(o) {
  var f = Sch.util.Date, h = o.getStartDate(), n = o.getEndDate(), c = this.ganttView.getStart(), b = this.ganttView.getEnd(), j = this.ganttView, a = j.getXYFromDate(f.max(h, c))[0], p = j.getXYFromDate(f.min(n, b))[0], i = this.taskStore.buffered, d, l = Ext.get(j.getEventNodeByRecord(o));
  if (!o.isVisible() || !h || !n || !f.intersectSpans(h, n, c, b)) {
    return null;
  }
  if (l || i) {
    var q = this.view.getXOffset(o), k, g, r = true;
    if (a > q) {
      a -= q;
    }
    p += q - 1;
    if (!o.isMilestone() && Ext.isIE) {
      if ((Ext.isIE7 || Ext.isIE6) && !Ext.isIEQuirks) {
        p += 5;
        a -= 2;
      } else {
        if ((Ext.isIE6 || Ext.isIE7 || Ext.isIE8) && Ext.isIEQuirks) {
          p += 1;
          a -= 2;
        }
      }
    }
    if (l) {
      d = l.getOffsetsTo(j.el);
      k = d[1] + j.el.getScroll().top;
      g = k + l.getHeight();
    } else {
      var e = j.store.first();
      var m = j.getNodes();
      if (o.isAbove(e)) {
        l = Ext.get(m[0]);
        d = l.getOffsetsTo(j.el);
        d[1] -= this.ganttView.rowHeight;
      } else {
        l = Ext.get(m[m.length - 1]);
        d = l.getOffsetsTo(j.el);
        d[1] += this.ganttView.rowHeight;
      }
      k = d[1] + j.el.getScroll().top;
      g = k + l.getHeight();
      r = false;
    }
    return {top:k, right:p, bottom:g, left:a, rendered:false};
  }
}, getRenderData:function(f) {
  var e = f.getSourceTask(), c = f.getTargetTask();
  if (!e || !c) {
    return null;
  }
  var a = this.getTaskBox(e);
  var d = this.getTaskBox(c);
  if (this.taskStore.buffered && a && !a.rendered && d && !d.rendered) {
    var g = this.ganttView.store.first();
    var b = this.ganttView.store.last();
    if (e.isAbove(g) && c.isAbove(g) || b.isAbove(e) && b.isAbove(c)) {
      return null;
    }
  }
  return {fromBox:a, toBox:d};
}, getDependencyTplData:function(q) {
  var n = this, j = n.taskStore;
  if (!Ext.isArray(q)) {
    q = [q];
  }
  if (q.length === 0 || j.getCount() <= 0) {
    return;
  }
  var c = [], b = Gnt.model.Dependency.Type, o = n.ganttView, p, k, g, m, h, a;
  for (var f = 0, d = q.length; f < d; f++) {
    a = q[f];
    var e = this.getRenderData(a);
    if (e) {
      m = e.fromBox;
      h = e.toBox;
      if (m && h) {
        switch(a.getType()) {
          case b.StartToEnd:
            p = n.getStartToEndCoordinates(m, h);
            break;
          case b.StartToStart:
            p = n.getStartToStartCoordinates(m, h);
            break;
          case b.EndToStart:
            p = n.getEndToStartCoordinates(m, h);
            break;
          case b.EndToEnd:
            p = n.getEndToEndCoordinates(m, h);
            break;
          default:
            throw 'Invalid dependency type: ' + a.getType();
        }
        if (p) {
          c.push({lineCoordinates:p, id:a.internalId, cls:a.getCls()});
        }
      }
    }
  }
  return c;
}, getStartToStartCoordinates:function(e, d, c, i) {
  var b = e.left, g = e.top - 1 + (e.bottom - e.top) / 2, a = d.left, f = d.top - 1 + (d.bottom - d.top) / 2, h = e.top < d.top ? f - this.yOffset - this.midRowOffset : f + this.yOffset + this.midRowOffset, j = this.xOffset + this.arrowOffset;
  if (b > a + this.xOffset) {
    j += b - a;
  }
  return [{x1:b, y1:g, x2:b - j, y2:g}, {x1:b - j, y1:g, x2:b - j, y2:f}, {x1:b - j, y1:f, x2:a - this.arrowOffset, y2:f}];
}, getStartToEndCoordinates:function(f, e) {
  var c = f.left, i = f.top - 1 + (f.bottom - f.top) / 2, a = e.right, g = e.top - 1 + (e.bottom - e.top) / 2, j = f.top < e.top ? g - this.yOffset - this.midRowOffset : g + this.yOffset + this.midRowOffset, h, b;
  if (a > c + this.xOffset - this.arrowOffset || Math.abs(a - c) < 2 * (this.xOffset + this.arrowOffset)) {
    b = c - this.xOffset - this.arrowOffset;
    var d = a + this.xOffset + this.arrowOffset;
    h = [{x1:c, y1:i, x2:b, y2:i}, {x1:b, y1:i, x2:b, y2:j}, {x1:b, y1:j, x2:d, y2:j}, {x1:d, y1:j, x2:d, y2:g}, {x1:d, y1:g, x2:a + this.arrowOffset, y2:g}];
  } else {
    b = c - this.xOffset - this.arrowOffset;
    h = [{x1:c, y1:i, x2:b, y2:i}, {x1:b, y1:i, x2:b, y2:g}, {x1:b, y1:g, x2:a + this.arrowOffset, y2:g}];
  }
  return h;
}, getEndToStartCoordinates:function(f, e) {
  var c = f.right, i = f.top - 1 + (f.bottom - f.top) / 2, a = e.left, g = e.top - 1 + (e.bottom - e.top) / 2, j = f.top < e.top ? g - this.yOffset - this.midRowOffset : g + this.yOffset + this.midRowOffset, h, b;
  if (a >= c - 6 && g > i) {
    b = Math.max(c - 6, a) + this.xOffset;
    g = e.top;
    h = [{x1:c, y1:i, x2:b, y2:i}, {x1:b, y1:i, x2:b, y2:g - this.arrowOffset}];
  } else {
    b = c + this.xOffset + this.arrowOffset;
    var d = a - this.xOffset - this.arrowOffset;
    if (g > i || a < c + 2 * this.arrowOffset) {
      h = [{x1:c, y1:i, x2:b, y2:i}, {x1:b, y1:i, x2:b, y2:j}, {x1:b, y1:j, x2:d, y2:j}, {x1:d, y1:j, x2:d, y2:g}, {x1:d, y1:g, x2:a - this.arrowOffset, y2:g}];
    } else {
      h = [{x1:c, y1:i, x2:d, y2:i}, {x1:d, y1:i, x2:d, y2:g}, {x1:d, y1:g, x2:a - this.arrowOffset, y2:g}];
    }
  }
  return h;
}, getEndToEndCoordinates:function(a, c) {
  var d = a.right, f = a.top - 1 + (a.bottom - a.top) / 2, b = c.right + this.arrowOffset, e = c.top - 1 + (c.bottom - c.top) / 2, g = b + this.xOffset + this.arrowOffset;
  if (d > b + this.xOffset) {
    g += d - b;
  }
  return [{x1:d, y1:f, x2:g, y2:f}, {x1:g, y1:f, x2:g, y2:e}, {x1:g, y1:e, x2:b, y2:e}];
}});
Ext.define('Gnt.view.Dependency', {extend:'Ext.util.Observable', requires:['Gnt.feature.DependencyDragDrop', 'Gnt.view.DependencyPainter'], containerEl:null, ganttView:null, painter:null, taskStore:null, store:null, dnd:null, lineTpl:null, enableDependencyDragDrop:true, renderAllDepsBuffered:false, dependencyCls:'sch-dependency', selectedCls:'sch-dependency-selected', constructor:function(a) {
  this.callParent(arguments);
  var b = this.ganttView;
  b.on({refresh:this.renderAllDependenciesBuffered, scope:this});
  this.bindTaskStore(b.getTaskStore());
  this.bindDependencyStore(a.store);
  if (!this.lineTpl) {
    this.lineTpl = Ext.create('Ext.XTemplate', '\x3ctpl for\x3d"."\x3e' + Ext.String.format('\x3ctpl for\x3d"lineCoordinates"\x3e\x3cdiv class\x3d"{0} sch-dep-{parent.id} {0}-line {parent.cls}-line " style\x3d"left:{[Math.min(values.x1, values.x2)]}px;top:{[Math.min(values.y1, values.y2)]}px;width:{[Math.abs(values.x1-values.x2)' + (Ext.isBorderBox ? '+2' : '') + ']}px;height:{[Math.abs(values.y1-values.y2)' + (Ext.isBorderBox ? '+2' : '') + ']}px"\x3e\x3c/div\x3e\x3c/tpl\x3e\x3cdiv style\x3d"left:{[values.lineCoordinates[values.lineCoordinates.length - 1].x2]}px;top:{[values.lineCoordinates[values.lineCoordinates.length - 1].y2]}px" class\x3d"{0}-arrow-ct {0} sch-dep-{id} {cls}-arrow-ct"\x3e\x3cimg src\x3d"' + 
    Ext.BLANK_IMAGE_URL + '" class\x3d"{0}-arrow {0}-arrow-{[this.getArrowDirection(values.lineCoordinates)]} {cls}-arrow" /\x3e\x3c/div\x3e', this.dependencyCls) + '\x3c/tpl\x3e', {compiled:true, disableFormats:true, getArrowDirection:function(d) {
      var c = d[d.length - 1];
      if (c.x1 === c.x2) {
        return 'down';
      } else {
        if (c.x1 > c.x2) {
          return 'left';
        } else {
          return 'right';
        }
      }
    }});
  }
  this.painter = Ext.create('Gnt.view.DependencyPainter', Ext.apply({rowHeight:b.rowHeight, taskStore:this.taskStore, view:b}, a));
  this.addEvents('beforednd', 'dndstart', 'drop', 'afterdnd', 'beforecascade', 'cascade', 'dependencydblclick');
  if (this.enableDependencyDragDrop) {
    this.dnd = Ext.create('Gnt.feature.DependencyDragDrop', {ganttView:this.ganttView});
    this.dnd.on('drop', this.onDependencyDrop, this);
    this.relayEvents(this.dnd, ['beforednd', 'dndstart', 'afterdnd', 'drop']);
  }
  this.containerEl = this.containerEl.createChild({cls:'sch-dependencyview-ct'});
  this.ganttView.mon(this.containerEl, 'dblclick', this.onDependencyDblClick, this, {delegate:'.' + this.dependencyCls});
  if (b.rendered) {
    this.renderAllDependenciesBuffered();
  }
}, bindDependencyStore:function(a) {
  a.on({datachanged:this.renderAllDependenciesBuffered, load:this.renderAllDependenciesBuffered, add:this.onDependencyAdd, update:this.onDependencyUpdate, remove:this.onDependencyDelete, scope:this});
  this.store = a;
}, unBindDependencyStore:function() {
  this.store.un({datachanged:this.renderAllDependenciesBuffered, load:this.renderAllDependenciesBuffered, add:this.onDependencyAdd, update:this.onDependencyUpdate, remove:this.onDependencyDelete, scope:this});
}, bindTaskStore:function(a) {
  var b = this.ganttView;
  if (b.animate) {
    b.on({afterexpand:this.renderAllDependenciesBuffered, aftercollapse:this.renderAllDependenciesBuffered, scope:this});
  } else {
    a.on({expand:this.renderAllDependenciesBuffered, collapse:this.renderAllDependenciesBuffered, scope:this});
  }
  a.on({cascade:this.onTaskStoreCascade, 'root-fill-start':this.onRootFillStart, remove:this.renderAllDependenciesBuffered, insert:this.renderAllDependenciesBuffered, append:this.renderAllDependenciesBuffered, move:this.renderAllDependenciesBuffered, update:this.onTaskUpdated, scope:this});
  this.taskStore = a;
}, onTaskStoreCascade:function(a, b) {
  if (b && b.nbrAffected > 0) {
    this.renderAllDependenciesBuffered();
  }
}, unBindTaskStore:function(a) {
  a = a || this.taskStore;
  var b = this.ganttView;
  if (!a) {
    return;
  }
  if (b.animate) {
    b.un({afterexpand:this.renderAllDependenciesBuffered, aftercollapse:this.renderAllDependenciesBuffered, scope:this});
  } else {
    a.un({expand:this.renderAllDependenciesBuffered, collapse:this.renderAllDependenciesBuffered, scope:this});
  }
  a.un({cascade:this.onTaskStoreCascade, remove:this.renderAllDependenciesBuffered, insert:this.renderAllDependenciesBuffered, append:this.renderAllDependenciesBuffered, move:this.renderAllDependenciesBuffered, 'root-fill-start':this.onRootFillStart, scope:this});
  a.un({update:this.onTaskUpdated, scope:this});
}, onRootFillStart:function() {
  var a = this.taskStore;
  this.unBindTaskStore(a);
  this.taskStore.on('root-fill-end', function() {
    this.bindTaskStore(a);
  }, this, {single:true});
}, onDependencyDblClick:function(b, a) {
  var c = this.getRecordForDependencyEl(a);
  this.fireEvent('dependencydblclick', this, c, b, a);
}, highlightDependency:function(a) {
  if (!(a instanceof Ext.data.Model)) {
    a = this.getDependencyRecordByInternalId(a);
  }
  this.getElementsForDependency(a).addCls(this.selectedCls);
}, unhighlightDependency:function(a) {
  if (!(a instanceof Ext.data.Model)) {
    a = this.getDependencyRecordByInternalId(a);
  }
  this.getElementsForDependency(a).removeCls(this.selectedCls);
}, getElementsForDependency:function(a) {
  var b = a instanceof Ext.data.Model ? a.internalId : a;
  return this.containerEl.select('.sch-dep-' + b);
}, depRe:new RegExp('sch-dep-([^\\s]+)'), getDependencyRecordByInternalId:function(d) {
  var c, b, a;
  for (b = 0, a = this.store.getCount(); b < a; b++) {
    c = this.store.getAt(b);
    if (c.internalId == d) {
      return c;
    }
  }
  return null;
}, getRecordForDependencyEl:function(c) {
  var a = c.className.match(this.depRe), d = null;
  if (a && a[1]) {
    var b = a[1];
    d = this.getDependencyRecordByInternalId(b);
  }
  return d;
}, renderAllDependenciesBuffered:function() {
  var a = this;
  this.containerEl.update('');
  setTimeout(function() {
    if (!a.ganttView.isDestroyed) {
      a.renderAllDependencies();
    }
  }, 0);
}, renderAllDependencies:function() {
  if (!this.containerEl.dom) {
    return;
  }
  this.getDependencyElements().remove();
  this.renderDependencies(this.store.data.items);
}, getDependencyElements:function() {
  return this.containerEl.select('.' + this.dependencyCls);
}, renderDependencies:function(b) {
  if (b) {
    var a = this.painter.getDependencyTplData(b);
    this.lineTpl[Ext.isIE ? 'insertFirst' : 'append'](this.containerEl, a);
  }
}, renderTaskDependencies:function(d) {
  var c = [];
  if (!Ext.isArray(d)) {
    d = [d];
  }
  for (var a = 0, b = d.length; a < b; a++) {
    c = c.concat(d[a].getAllDependencies());
  }
  this.renderDependencies(c);
}, onDependencyUpdate:function(b, a) {
  this.removeDependencyElements(a, false);
  this.renderDependencies(a);
}, onDependencyAdd:function(a, b) {
  this.renderDependencies(b);
}, removeDependencyElements:function(a, b) {
  if (b !== false) {
    this.getElementsForDependency(a).fadeOut({remove:true});
  } else {
    this.getElementsForDependency(a).remove();
  }
}, onDependencyDelete:function(b, a) {
  this.removeDependencyElements(a);
}, dimEventDependencies:function(a) {
  this.containerEl.select(this.depRe + a).setOpacity(0.2);
}, clearSelectedDependencies:function() {
  this.containerEl.select('.' + this.selectedCls).removeCls(this.selectedCls);
}, onTaskUpdated:function(c, b, a) {
  if (!this.taskStore.cascading && a != Ext.data.Model.COMMIT && (!b.previous || b.startDateField in b.previous || b.endDateField in b.previous)) {
    this.updateDependencies(b);
  }
}, updateDependencies:function(b) {
  if (!Ext.isArray(b)) {
    b = [b];
  }
  var a = this;
  Ext.each(b, function(c) {
    Ext.each(c.getAllDependencies(), function(d) {
      a.removeDependencyElements(d, false);
    });
  });
  this.renderTaskDependencies(b);
}, onDependencyDrop:function(e, c, b, d) {
  var a = new this.store.model({fromTask:c, toTask:b, type:d});
  if (this.store.isValidDependency(a)) {
    this.store.add(a);
  }
}, destroy:function() {
  if (this.dnd) {
    this.dnd.destroy();
  }
  this.unBindTaskStore();
  this.unBindDependencyStore();
}});
Ext.define('Gnt.view.Gantt', {extend:'Sch.view.TimelineTreeView', alias:['widget.ganttview'], requires:['Gnt.view.Dependency', 'Gnt.model.Task', 'Gnt.template.Task', 'Gnt.template.ParentTask', 'Gnt.template.Milestone', 'Gnt.feature.TaskDragDrop', 'Gnt.feature.ProgressBarResize', 'Gnt.feature.TaskResize', 'Sch.view.Horizontal'], uses:['Gnt.feature.LabelEditor', 'Gnt.feature.DragCreator'], _cmpCls:'sch-ganttview', rowHeight:22, barMargin:4, scheduledEventName:'task', trackOver:false, toggleOnDblClick:false, 
milestoneOffset:8, parentTaskOffset:6, eventSelector:'.sch-gantt-item', eventWrapSelector:'.sch-event-wrap', progressBarResizer:null, taskResizer:null, taskDragDrop:null, dragCreator:null, dependencyView:null, resizeConfig:null, dragDropConfig:null, constructor:function(a) {
  var b = a.panel._top;
  Ext.apply(this, {taskStore:b.taskStore, dependencyStore:b.dependencyStore, enableDependencyDragDrop:b.enableDependencyDragDrop, enableTaskDragDrop:b.enableTaskDragDrop, enableProgressBarResize:b.enableProgressBarResize, enableDragCreation:b.enableDragCreation, allowParentTaskMove:b.allowParentTaskMove, toggleParentTasksOnClick:b.toggleParentTasksOnClick, resizeHandles:b.resizeHandles, enableBaseline:b.baselineVisible || b.enableBaseline, leftLabelField:b.leftLabelField, rightLabelField:b.rightLabelField, 
  eventTemplate:b.eventTemplate, parentEventTemplate:b.parentEventTemplate, milestoneTemplate:b.milestoneTemplate, resizeConfig:b.resizeConfig, dragDropConfig:b.dragDropConfig});
  this.addEvents('taskclick', 'taskdblclick', 'taskcontextmenu', 'beforetaskresize', 'taskresizestart', 'partialtaskresize', 'aftertaskresize', 'beforeprogressbarresize', 'progressbarresizestart', 'afterprogressbarresize', 'beforetaskdrag', 'taskdragstart', 'taskdrop', 'aftertaskdrop', 'labeledit_beforestartedit', 'labeledit_beforecomplete', 'labeledit_complete', 'beforedependencydrag', 'dependencydragstart', 'dependencydrop', 'afterdependencydragdrop');
  this.callParent(arguments);
}, initComponent:function() {
  this.configureLabels();
  this.setupGanttEvents();
  this.callParent(arguments);
  this.setupTemplates();
}, getDependencyStore:function() {
  return this.dependencyStore;
}, configureFeatures:function() {
  if (this.enableProgressBarResize !== false) {
    this.progressBarResizer = Ext.create('Gnt.feature.ProgressBarResize', {gantt:this});
    this.on({beforeprogressbarresize:this.onBeforeTaskProgressBarResize, progressbarresizestart:this.onTaskProgressBarResizeStart, afterprogressbarresize:this.onTaskProgressBarResizeEnd, scope:this});
  }
  if (this.resizeHandles !== 'none') {
    this.taskResizer = Ext.create('Gnt.feature.TaskResize', Ext.apply({gantt:this, validatorFn:this.resizeValidatorFn || Ext.emptyFn, validatorFnScope:this.validatorFnScope || this}, this.resizeConfig || {}));
    this.on({beforedragcreate:this.onBeforeDragCreate, beforetaskresize:this.onBeforeTaskResize, taskresizestart:this.onTaskResizeStart, aftertaskresize:this.onTaskResizeEnd, scope:this});
  }
  if (this.enableTaskDragDrop) {
    this.taskDragDrop = Ext.create('Gnt.feature.TaskDragDrop', Ext.apply({gantt:this, validatorFn:this.dndValidatorFn || Ext.emptyFn, validatorFnScope:this.validatorFnScope || this}, this.dragDropConfig));
    this.on({beforetaskdrag:this.onBeforeTaskDrag, taskdragstart:this.onDragDropStart, aftertaskdrop:this.onDragDropEnd, scope:this});
  }
  if (this.enableDragCreation) {
    this.dragCreator = Ext.create('Gnt.feature.DragCreator', Ext.apply({ganttView:this}));
  }
}, prepareData:function(d, a, b) {
  var c = this, e = {}, f = c.gridDataColumns || c.getGridColumns();
  e[f[0].id] = this.renderTask(b);
  return e;
}, renderTask:function(k) {
  var l = k.getStartDate(), n = this.timeAxis, s = Sch.util.Date, b = {}, A = '', h = n.getStart(), g = n.getEnd(), C = k.isMilestone(), x = k.isLeaf(), o, q, u;
  if (l) {
    var v = k.getEndDate() || Sch.util.Date.add(l, Sch.util.Date.DAY, 1), e = Sch.util.Date.intersectSpans(l, v, h, g);
    if (e) {
      u = v > g;
      q = s.betweenLesser(l, h, g);
      var z = Math.floor(this.getXYFromDate(q ? l : h)[0]), d = Math.floor(this.getXYFromDate(u ? g : v)[0]), f = C ? 0 : d - z;
      if (!C && !x) {
        if (u) {
          f += this.parentTaskOffset;
        } else {
          f += 2 * this.parentTaskOffset;
        }
      }
      b = {id:k.internalId, leftOffset:C ? d || z : z, width:Math.max(1, f), percentDone:Math.min(k.getPercentDone() || 0, 100)};
      o = this.eventRenderer.call(this.eventRendererScope || this, k, b, k.store) || {};
      var t = this.leftLabelField, j = this.rightLabelField, B;
      if (t) {
        b.leftLabel = t.renderer.call(t.scope || this, k.data[t.dataIndex], k);
      }
      if (j) {
        b.rightLabel = j.renderer.call(j.scope || this, k.data[j.dataIndex], k);
      }
      Ext.apply(b, o);
      if (C) {
        B = this.milestoneTemplate;
      } else {
        b.width = Math.max(1, f);
        var p = '';
        if (u) {
          p = ' sch-event-endsoutside ';
        }
        if (!q) {
          p = ' sch-event-startsoutside ';
        }
        b.ctcls = (b.ctcls || '') + p;
        B = this[x ? 'eventTemplate' : 'parentEventTemplate'];
      }
      var i = ' sch-event-resizable-' + k.getResizable();
      if (k.dirty) {
        i += ' sch-dirty ';
      }
      if (k.isDraggable() === false) {
        i += ' sch-event-fixed ';
      }
      b.cls = (b.cls || '') + (k.getCls() || '') + i;
      A += B.apply(b);
    }
  }
  if (this.enableBaseline) {
    var r = k.getBaselineStartDate(), a = k.getBaselineEndDate();
    if (!o) {
      o = this.eventRenderer.call(this, k, b, k.store) || {};
    }
    if (r && a) {
      u = a > g;
      q = s.betweenLesser(r, h, g);
      var c = k.isBaselineMilestone(), w = c ? this.baselineMilestoneTemplate : k.isLeaf() ? this.baselineTaskTemplate : this.baselineParentTaskTemplate, m = Math.floor(this.getXYFromDate(q ? r : h)[0]), y = c ? 0 : Math.floor(this.getXYFromDate(u ? g : a)[0]) - m;
      A += w.apply({basecls:o.basecls || '', id:k.internalId + '-base', percentDone:k.getBaselinePercentDone(), leftOffset:m, width:Math.max(1, y)});
    }
  }
  return A;
}, setupTemplates:function() {
  var a = {leftLabel:!!this.leftLabelField, rightLabel:!!this.rightLabelField, prefix:this.eventPrefix, enableDependencyDragDrop:this.enableDependencyDragDrop !== false, resizeHandles:this.resizeHandles, enableProgressBarResize:this.enableProgressBarResize};
  if (!this.eventTemplate) {
    a.baseCls = 'sch-gantt-task {ctcls}';
    this.eventTemplate = Ext.create('Gnt.template.Task', a);
  }
  if (!this.parentEventTemplate) {
    a.baseCls = 'sch-gantt-parent-task {ctcls}';
    this.parentEventTemplate = Ext.create('Gnt.template.ParentTask', a);
  }
  if (!this.milestoneTemplate) {
    a.baseCls = 'sch-gantt-milestone {ctcls}';
    this.milestoneTemplate = Ext.create('Gnt.template.Milestone', a);
  }
  if (this.enableBaseline) {
    a = {prefix:this.eventPrefix};
    if (!this.baselineTaskTemplate) {
      a.baseCls = 'sch-gantt-task-baseline sch-gantt-baseline-item {basecls}';
      this.baselineTaskTemplate = Ext.create('Gnt.template.Task', a);
    }
    if (!this.baselineParentTaskTemplate) {
      a.baseCls = 'sch-gantt-parenttask-baseline sch-gantt-baseline-item {basecls}';
      this.baselineParentTaskTemplate = Ext.create('Gnt.template.ParentTask', a);
    }
    if (!this.baselineMilestoneTemplate) {
      a.baseCls = 'sch-gantt-milestone-baseline sch-gantt-baseline-item {basecls}';
      this.baselineMilestoneTemplate = Ext.create('Gnt.template.Milestone', a);
    }
  }
}, getDependencyView:function() {
  return this.dependencyView;
}, getTaskStore:function() {
  return this.taskStore;
}, initDependencies:function() {
  if (this.dependencyStore) {
    var b = this, a = Ext.create('Gnt.view.Dependency', {containerEl:b.el, ganttView:b, enableDependencyDragDrop:b.enableDependencyDragDrop, store:b.dependencyStore});
    a.on({beforednd:b.onBeforeDependencyDrag, dndstart:b.onDependencyDragStart, drop:b.onDependencyDrop, afterdnd:b.onAfterDependencyDragDrop, beforecascade:b.onBeforeCascade, cascade:b.onCascade, scope:b});
    b.dependencyView = a;
    b.relayEvents(a, ['dependencydblclick']);
  }
}, setupGanttEvents:function() {
  var a = this.getSelectionModel();
  if (this.toggleParentTasksOnClick) {
    this.on({taskclick:function(c, b) {
      if (!b.isLeaf()) {
        this.toggle(b);
      }
    }, scope:this});
  }
}, configureLabels:function() {
  var c = {renderer:function(d) {
    return d;
  }, dataIndex:undefined};
  var b = this.leftLabelField;
  if (b) {
    if (Ext.isString(b)) {
      b = this.leftLabelField = {dataIndex:b};
    }
    Ext.applyIf(b, c);
    if (b.editor) {
      b.editor = Ext.create('Gnt.feature.LabelEditor', this, {alignment:'r-r', delegate:'.sch-gantt-label-left', labelPosition:'left', field:b.editor, dataIndex:b.dataIndex});
    }
  }
  var a = this.rightLabelField;
  if (a) {
    if (Ext.isString(a)) {
      a = this.rightLabelField = {dataIndex:a};
    }
    Ext.applyIf(a, c);
    if (a.editor) {
      a.editor = Ext.create('Gnt.feature.LabelEditor', this, {alignment:'l-l', delegate:'.sch-gantt-label-right', labelPosition:'right', field:a.editor, dataIndex:a.dataIndex});
    }
  }
  this.on('labeledit_beforestartedit', this.onBeforeLabelEdit, this);
}, onBeforeTaskDrag:function(b, a) {
  return !this.readOnly && (this.allowParentTaskMove || a.isLeaf());
}, onDragDropStart:function() {
  if (this.tip) {
    this.tip.disable();
  }
}, onDragDropEnd:function() {
  if (this.tip) {
    this.tip.enable();
  }
}, onTaskProgressBarResizeStart:function() {
  if (this.tip) {
    this.tip.hide();
    this.tip.disable();
  }
}, onTaskProgressBarResizeEnd:function() {
  if (this.tip) {
    this.tip.enable();
  }
}, onTaskResizeStart:function() {
  if (this.tip) {
    this.tip.hide();
    this.tip.disable();
  }
}, onTaskResizeEnd:function() {
  if (this.tip) {
    this.tip.enable();
  }
}, onBeforeDragCreate:function() {
  return !this.readOnly;
}, onBeforeTaskResize:function(a, b) {
  return !this.readOnly && b.getSchedulingMode() !== 'EffortDriven';
}, onBeforeTaskProgressBarResize:function() {
  return !this.readOnly;
}, onBeforeLabelEdit:function() {
  return !this.readOnly;
}, onBeforeEdit:function() {
  return !this.readOnly;
}, beforeRender:function() {
  this.addCls('sch-ganttview');
  this.callParent(arguments);
}, afterRender:function() {
  this.initDependencies();
  this.callParent(arguments);
  this.el.on('mousemove', this.configureFeatures, this, {single:true});
}, resolveTaskRecord:function(a) {
  var b = this.findItemByChild(a);
  if (b) {
    return this.getRecord(this.findItemByChild(a));
  }
  return null;
}, resolveEventRecord:function(a) {
  return this.resolveTaskRecord(a);
}, highlightTask:function(b, a) {
  if (!(b instanceof Ext.data.Model)) {
    b = this.taskStore.getById(b);
  }
  if (b) {
    var d = this.getNode(b);
    if (d) {
      Ext.fly(d).addCls('sch-gantt-task-highlighted');
    }
    var c = b.getId() || b.internalId;
    if (a !== false) {
      this.dependencyStore.each(function(e) {
        if (e.getSourceId() == c) {
          this.highlightDependency(e.id);
          this.highlightTask(e.getTargetId(), a);
        }
      }, this);
    }
  }
}, unhighlightTask:function(a, c) {
  if (!(a instanceof Ext.data.Model)) {
    a = this.taskStore.getById(a);
  }
  if (a) {
    Ext.fly(this.getNode(a)).removeCls('sch-gantt-task-highlighted');
    var b = a.getId() || a.internalId;
    if (c !== false) {
      this.dependencyStore.each(function(d) {
        if (d.getSourceId() == b) {
          this.unhighlightDependency(d.id);
          this.unhighlightTask(d.getTargetId(), c);
        }
      }, this);
    }
  }
}, clearSelectedTasksAndDependencies:function() {
  this.getSelectionModel().deselectAll();
  this.getDependencyView().clearSelectedDependencies();
  this.el.select('tr.sch-gantt-task-highlighted').removeCls('sch-gantt-task-highlighted');
}, getCriticalPaths:function() {
  return this.taskStore.getCriticalPaths();
}, highlightCriticalPaths:function() {
  this.clearSelectedTasksAndDependencies();
  var g = this.getCriticalPaths(), c = this.getDependencyView(), f = this.dependencyStore, e, d, b, a;
  Ext.each(g, function(h) {
    for (d = 0, b = h.length; d < b; d++) {
      e = h[d];
      this.highlightTask(e, false);
      if (d < b - 1) {
        a = f.getAt(f.findBy(function(i) {
          return i.getTargetId() === (e.getId() || e.internalId) && i.getSourceId() === (h[d + 1].getId() || h[d + 1].internalId);
        }));
        c.highlightDependency(a);
      }
    }
  }, this);
  this.addCls('sch-gantt-critical-chain');
  this.getSelectionModel().setLocked(true);
}, unhighlightCriticalPaths:function() {
  this.el.removeCls('sch-gantt-critical-chain');
  this.getSelectionModel().setLocked(false);
  this.clearSelectedTasksAndDependencies();
}, getXOffset:function(a) {
  var b = 0;
  if (a.isMilestone()) {
    b = this.milestoneOffset;
  } else {
    if (!a.isLeaf()) {
      b = this.parentTaskOffset;
    }
  }
  return b;
}, onDestroy:function() {
  if (this.dependencyView) {
    this.dependencyView.destroy();
  }
  this.callParent(arguments);
}, highlightDependency:function(a) {
  this.dependencyView.highlightDependency(a);
}, unhighlightDependency:function(a) {
  this.dependencyView.unhighlightDependency(a);
}, onBeforeDependencyDrag:function(b, a) {
  return this.fireEvent('beforedependencydrag', this, a);
}, onDependencyDragStart:function(a) {
  this.fireEvent('dependencydragstart', this);
  if (this.tip) {
    this.tip.disable();
  }
}, onDependencyDrop:function(b, c, a, d) {
  this.fireEvent('dependencydrop', this, this.taskStore.getNodeById(c), this.taskStore.getById(a), d);
}, onAfterDependencyDragDrop:function() {
  this.fireEvent('afterdependencydragdrop', this);
  if (this.tip) {
    this.tip.enable();
  }
}, onBeforeCascade:function(a, b) {
  this.taskStore.un('update', this.onUpdate, this);
}, onCascade:function(a, b) {
  this.taskStore.on('update', this.onUpdate, this);
}, onUpdate:function(c, a, b, d) {
  if (d && d.length === 1 && d[0] === 'expanded') {
    return;
  }
  this.callParent(arguments);
}, getLeftEditor:function() {
  return this.leftLabelField.editor;
}, getRightEditor:function() {
  return this.rightLabelField.editor;
}, editLeftLabel:function(a) {
  var b = this.leftLabelField && this.getLeftEditor();
  if (b) {
    b.edit(a);
  }
}, editRightLabel:function(a) {
  var b = this.rightLabelField && this.getRightEditor();
  if (b) {
    b.edit(a);
  }
}, getOuterElementFromEventRecord:function(a) {
  var b = this.callParent([a]);
  return b && b.up(this.eventWrapSelector) || null;
}, getDependenciesForTask:function(a) {
  console.warn('`ganttPanel.getDependenciesForTask()` is deprecated, use `task.getAllDependencies()` instead');
  return a.getAllDependencies();
}, setNewTemplate:function() {
  var b = this, a = b.headerCt.getColumnsForTpl(true);
  b.tpl = b.getTableChunker().getTableTpl({columns:[a[0]], features:b.features});
}});
Ext.define('Gnt.panel.Gantt', {extend:'Sch.panel.TimelineTreePanel', alias:['widget.ganttpanel'], alternateClassName:['Sch.gantt.GanttPanel'], requires:['Gnt.view.Gantt', 'Gnt.model.Dependency', 'Gnt.data.ResourceStore', 'Gnt.data.AssignmentStore', 'Gnt.feature.WorkingTime', 'Gnt.data.Calendar', 'Gnt.data.TaskStore', 'Gnt.data.DependencyStore'], uses:['Sch.plugin.CurrentTimeLine'], lockedXType:'treepanel', normalXType:'ganttpanel', viewType:'ganttview', syncRowHeight:false, layout:'border', lightWeight:true, 
leftLabelField:null, rightLabelField:null, highlightWeekends:true, weekendsAreWorkdays:false, skipWeekendsDuringDragDrop:true, enableTaskDragDrop:true, enableDependencyDragDrop:true, enableProgressBarResize:false, toggleParentTasksOnClick:true, addRowOnTab:true, recalculateParents:true, cascadeChanges:false, showTodayLine:false, enableBaseline:false, baselineVisible:false, enableAnimations:false, workingTimePlugin:null, todayLinePlugin:null, allowParentTaskMove:false, enableDragCreation:true, eventRenderer:Ext.emptyFn, 
eventRendererScope:null, eventTemplate:null, parentEventTemplate:null, milestoneTemplate:null, autoHeight:null, calendar:null, taskStore:null, dependencyStore:null, resourceStore:null, assignmentStore:null, columnLines:false, dndValidatorFn:Ext.emptyFn, resizeHandles:'both', resizeValidatorFn:Ext.emptyFn, resizeConfig:null, dragDropConfig:null, initStores:function() {
  var a = Ext.StoreMgr.lookup(this.taskStore || this.store);
  if (!a) {
    Ext.Error.raise('You must specify a taskStore config');
  }
  if (!(a instanceof Gnt.data.TaskStore)) {
    Ext.Error.raise('A `taskStore` should be an instance of `Gnt.data.TaskStore` (or of a subclass)');
  }
  Ext.apply(this, {store:a, taskStore:a});
  var d = this.calendar = a.calendar;
  if (this.needToTranslateOption('weekendsAreWorkdays')) {
    d.setWeekendsAreWorkDays(this.weekendsAreWorkdays);
  }
  if (a.dependencyStore) {
    this.dependencyStore = a.dependencyStore;
  } else {
    if (this.dependencyStore) {
      this.dependencyStore = Ext.StoreMgr.lookup(this.dependencyStore);
      a.setDependencyStore(this.dependencyStore);
    } else {
      this.dependencyStore = Ext.create('Gnt.data.DependencyStore');
      a.setDependencyStore(this.dependencyStore);
    }
  }
  if (!(this.dependencyStore instanceof Gnt.data.DependencyStore)) {
    Ext.Error.raise('The Gantt dependency store should be a Gnt.data.DependencyStore, or a subclass thereof.');
  }
  var b;
  if (a.getResourceStore()) {
    b = a.getResourceStore();
  } else {
    if (this.resourceStore) {
      b = Ext.StoreMgr.lookup(this.resourceStore);
    } else {
      b = Ext.create('Gnt.data.ResourceStore');
    }
  }
  if (!(b instanceof Gnt.data.ResourceStore)) {
    Ext.Error.raise('A `ResourceStore` should be an instance of `Gnt.data.ResourceStore` (or of a subclass)');
  }
  var c;
  if (a.getAssignmentStore()) {
    c = a.getAssignmentStore();
  } else {
    if (this.assignmentStore) {
      c = Ext.StoreMgr.lookup(this.assignmentStore);
    } else {
      c = Ext.create('Gnt.data.AssignmentStore');
    }
  }
  if (!(c instanceof Gnt.data.AssignmentStore)) {
    Ext.Error.raise('An `assignmentStore` should be an instance of `Gnt.data.AssignmentStore` (or of a subclass)');
  }
  if (this.lockable) {
    this.bindAssignmentStore(c, true);
    this.bindResourceStore(b, true);
  }
}, initComponent:function() {
  if (Ext.isBoolean(this.showBaseline)) {
    this.enableBaseline = this.baselineVisible = this.showBaseline;
    this.showBaseline = Gnt.panel.Gantt.prototype.showBaseline;
  }
  this.autoHeight = false;
  this.initStores();
  if (this.needToTranslateOption('cascadeChanges')) {
    this.setCascadeChanges(this.cascadeChanges);
  }
  if (this.needToTranslateOption('recalculateParents')) {
    this.setRecalculateParents(this.recalculateParents);
  }
  if (this.needToTranslateOption('skipWeekendsDuringDragDrop')) {
    this.setSkipWeekendsDuringDragDrop(this.skipWeekendsDuringDragDrop);
  }
  if (this.lockable) {
    this.lockedGridConfig = this.lockedGridConfig || {};
    Ext.apply(this.lockedGridConfig, {columnLines:true, rowLines:true});
    this.configureFunctionality();
  }
  this.callParent(arguments);
  var a = this.getSchedulingView();
  this.relayEvents(a, ['taskclick', 'taskdblclick', 'taskcontextmenu', 'beforetaskresize', 'taskresizestart', 'partialtaskresize', 'aftertaskresize', 'beforeprogressbarresize', 'progressbarresizestart', 'afterprogressbarresize', 'beforetaskdrag', 'taskdragstart', 'taskdrop', 'aftertaskdrop', 'labeledit_beforestartedit', 'labeledit_beforecomplete', 'labeledit_complete', 'beforedependencydrag', 'dependencydragstart', 'dependencydrop', 'afterdependencydragdrop', 'dependencydblclick']);
  if (this.lockable) {
    this.bodyCls = (this.bodyCls || '') + ' sch-ganttpanel-container-body';
    a.store.calendar = this.calendar;
    this.fixSelectionModel();
    if (this.addRowOnTab) {
      var b = this.lockedGrid, c = this.getSelectionModel();
      c.onEditorTab = Ext.Function.createInterceptor(c.onEditorTab, function(h, i) {
        var g = b.view, f = h.getActiveRecord(), j = h.getActiveColumn(), d = g.getPosition(f, j);
        if (d.column === b.headerCt.getColumnCount() - 1 && d.row === b.view.store.getCount() - 1) {
          f.addTaskBelow({leaf:true});
        }
      });
    }
  }
}, needToTranslateOption:function(a) {
  return this.hasOwnProperty(a) || this.self.prototype.hasOwnProperty(a) && this.self != Gnt.panel.Gantt;
}, fixSelectionModel:function() {
  var a = this.getSelectionModel();
  var d = this.lockedGrid.getView();
  var c = this.normalGrid.getView();
  d.__lockedType = 'locked';
  c.__lockedType = 'normal';
  var e = d.onAdd;
  d.onAdd = function() {
    a.__preventUpdateOf = 'normal';
    e.apply(this, arguments);
    delete a.__preventUpdateOf;
  };
  var b = c.onAdd;
  c.onAdd = function() {
    a.__preventUpdateOf = 'locked';
    b.apply(this, arguments);
    delete a.__preventUpdateOf;
  };
  var f = d.store;
  d.bindStore(null);
  c.bindStore(null);
  d.bindStore(f);
  c.bindStore(f);
  Ext.apply(a, {onSelectChange:function(m, j, q, g) {
    var o = this, r = o.views, k = r.length, p = o.store, h = p.indexOf(m), n = j ? 'select' : 'deselect', l = 0;
    if ((q || o.fireEvent('before' + n, o, m, h)) !== false && g() !== false) {
      for (; l < k; l++) {
        if (!this.__preventUpdateOf || r[l].__lockedType != this.__preventUpdateOf) {
          if (j) {
            r[l].onRowSelect(h, q);
          } else {
            r[l].onRowDeselect(h, q);
          }
        }
      }
      if (!q) {
        o.fireEvent(n, o, m, h);
      }
    }
  }});
}, getDependencyView:function() {
  return this.getSchedulingView().getDependencyView();
}, disableWeekendHighlighting:function(a) {
  this.workingTimePlugin.setDisabled(a);
}, resolveTaskRecord:function(a) {
  return this.getSchedulingView().resolveTaskRecord(a);
}, fitTimeColumns:function() {
  this.getSchedulingView().fitColumns();
}, getResourceStore:function() {
  return this.getTaskStore().getResourceStore();
}, getAssignmentStore:function() {
  return this.getTaskStore().getAssignmentStore();
}, getTaskStore:function() {
  return this.taskStore;
}, getDependencyStore:function() {
  return this.dependencyStore;
}, onDragDropStart:function() {
  if (this.tip) {
    this.tip.hide();
    this.tip.disable();
  }
}, onDragDropEnd:function() {
  if (this.tip) {
    this.tip.enable();
  }
}, configureFunctionality:function() {
  var a = this.plugins = [].concat(this.plugins || []);
  if (this.highlightWeekends) {
    this.workingTimePlugin = Ext.create('Gnt.feature.WorkingTime', {calendar:this.calendar});
    a.push(this.workingTimePlugin);
  }
  if (this.showTodayLine) {
    this.todayLinePlugin = new Sch.plugin.CurrentTimeLine();
    a.push(this.todayLinePlugin);
  }
}, beforeRender:function() {
  if (this.lockable) {
    var a = ' sch-ganttpanel sch-horizontal ';
    if (this.highlightWeekends) {
      a += ' sch-ganttpanel-highlightweekends ';
    }
    this.addCls(a);
    if (this.baselineVisible) {
      this.showBaseline();
    }
  }
  this.callParent(arguments);
}, afterRender:function() {
  this.callParent(arguments);
  if (this.lockable) {
    this.applyPatches();
  }
}, showBaseline:function() {
  this.addCls('sch-ganttpanel-showbaseline');
}, hideBaseline:function() {
  this.removeCls('sch-ganttpanel-showbaseline');
}, toggleBaseline:function() {
  this.toggleCls('sch-ganttpanel-showbaseline');
}, zoomToFit:function() {
  var a = this.taskStore.getTotalTimeSpan();
  if (a.start && a.end && a.start < a.end) {
    this.setTimeSpan(a.start, a.end);
    this.fitTimeColumns();
  }
}, getCascadeChanges:function() {
  return this.taskStore.cascadeChanges;
}, setCascadeChanges:function(a) {
  this.taskStore.cascadeChanges = a;
}, getRecalculateParents:function() {
  return this.taskStore.recalculateParents;
}, setRecalculateParents:function(a) {
  this.taskStore.recalculateParents = a;
}, setSkipWeekendsDuringDragDrop:function(a) {
  this.taskStore.skipWeekendsDuringDragDrop = this.skipWeekendsDuringDragDrop = a;
}, getSkipWeekendsDuringDragDrop:function() {
  return this.taskStore.skipWeekendsDuringDragDrop;
}, applyPatches:function() {
  if (Ext.tree.plugin && Ext.tree.plugin.TreeViewDragDrop) {
    var a;
    Ext.each(this.lockedGrid.getView().plugins, function(b) {
      if (b instanceof Ext.tree.plugin.TreeViewDragDrop) {
        a = b;
        return false;
      }
    });
    if (!a || !a.dropZone) {
      return;
    }
    a.dropZone.handleNodeDrop = function(e, l, f) {
      var n = this, o = n.view, g = l.parentNode, p = o.getStore(), r = [], b, d, k, c, j, m, q, h;
      if (e.copy) {
        b = e.records;
        e.records = [];
        for (d = 0, k = b.length; d < k; d++) {
          e.records.push(Ext.apply({}, b[d].data));
        }
      }
      n.cancelExpand();
      if (f == 'before') {
        c = g.insertBefore;
        j = [null, l];
        l = g;
      } else {
        if (f == 'after') {
          if (l.nextSibling) {
            c = g.insertBefore;
            j = [null, l.nextSibling];
          } else {
            c = g.appendChild;
            j = [null];
          }
          l = g;
        } else {
          if (!l.isExpanded()) {
            m = true;
          }
          c = l.appendChild;
          j = [null];
        }
      }
      q = function() {
        var i;
        for (d = 0, k = e.records.length; d < k; d++) {
          j[0] = e.records[d];
          j[0].isMove = true;
          i = c.apply(l, j);
          delete j[0].isMove;
          if (Ext.enableFx && n.dropHighlight) {
            r.push(o.getNode(i));
          }
        }
        if (Ext.enableFx && n.dropHighlight) {
          Ext.Array.forEach(r, function(s) {
            if (s) {
              Ext.fly(s.firstChild ? s.firstChild : s).highlight(n.dropHighlightColor);
            }
          });
        }
      };
      if (m) {
        l.expand(false, q);
      } else {
        q();
      }
    };
  }
}, bindResourceStore:function(c, a) {
  var b = this;
  if (!a && b.resourceStore) {
    if (c !== b.resourceStore && b.resourceStore.autoDestroy) {
      b.resourceStore.destroy();
    } else {
      b.mun(b.resourceStore, {scope:b, datachanged:b.onResourceStoreDataChanged});
    }
    if (!c) {
      b.resourceStore = null;
    }
  }
  if (c) {
    c = Ext.data.StoreManager.lookup(c);
    b.mon(c, {scope:b, datachanged:b.onResourceStoreDataChanged});
    this.taskStore.setResourceStore(c);
  }
  b.resourceStore = c;
  if (c && !a) {
    b.getView().refreshKeepingScroll();
  }
}, bindAssignmentStore:function(c, a) {
  var b = this;
  if (!a && b.assignmentStore) {
    if (c !== b.assignmentStore && b.assignmentStore.autoDestroy) {
      b.assignmentStore.destroy();
    } else {
      b.mun(b.assignmentStore, {scope:b, datachanged:b.onAssignmentStoreDataChanged});
    }
    if (!c) {
      b.assignmentStore = null;
    }
  }
  if (c) {
    c = Ext.data.StoreManager.lookup(c);
    b.mon(c, {scope:b, datachanged:b.onAssignmentStoreDataChanged});
    this.taskStore.setAssignmentStore(c);
  }
  b.assignmentStore = c;
  if (c && !a) {
    b.getView().refreshKeepingScroll();
  }
}, onResourceStoreDataChanged:function() {
  this.getView().refreshKeepingScroll();
}, onAssignmentStoreDataChanged:function() {
  this.getView().refreshKeepingScroll();
}});
Ext.define('Gnt.column.EndDate', {extend:'Ext.grid.column.Date', alias:'widget.enddatecolumn', requires:['Ext.grid.CellEditor'], text:'Finish', width:100, align:'left', task:null, editorFormat:null, constructor:function(a) {
  a = a || {};
  var b = a.field || a.editor;
  delete a.field;
  delete a.editor;
  this.field = Ext.create('Ext.grid.CellEditor', {ignoreNoChange:true, field:b || {xtype:'datefield', format:a.editorFormat || a.format || this.format || Ext.Date.defaultFormat}, listeners:{beforecomplete:this.onBeforeEditComplete, scope:this}});
  this.callParent([a]);
  this.scope = this;
  this.renderer = a.renderer || this.rendererFunc;
  this.editorFormat = this.editorFormat || this.format;
}, beforeRender:function() {
  if (!this.dataIndex) {
    var a = this.up('treepanel');
    this.dataIndex = a.store.model.prototype.endDateField;
  }
  this.callParent(arguments);
}, rendererFunc:function(b, c, a) {
  if (!b) {
    return;
  }
  if (!a.isEditable(this.dataIndex)) {
    c.tdCls = (c.tdCls || '') + ' sch-column-readonly';
  }
  if (a.getEndDate() > a.getStartDate() && b - Ext.Date.clearTime(b, true) === 0 && !Ext.Date.formatContainsHourInfo(this.format)) {
    b = Sch.util.Date.add(b, Sch.util.Date.MILLI, -1);
  }
  return Ext.util.Format.date(b, this.format);
}, afterRender:function() {
  this.callParent(arguments);
  var a = this.ownerCt.up('treepanel');
  a.on({edit:this.onTreeEdit, beforeedit:this.onBeforeTreeEdit, scope:this});
}, onBeforeTreeEdit:function(b) {
  if (b.column == this) {
    b.doNotUpdateRecord = true;
    var a = this.task = b.record;
    if (!a.isEditable(this.dataIndex)) {
      return false;
    }
    if (a.getEndDate() > a.getStartDate()) {
      var c = b.value;
      if (c - Ext.Date.clearTime(c, true) === 0 && !Ext.Date.formatContainsHourInfo(this.editorFormat)) {
        c = Sch.util.Date.add(c, Sch.util.Date.MILLI, -1);
      }
      b.value = Ext.Date.parse(Ext.Date.format(c, this.editorFormat), this.editorFormat);
    }
  }
}, onBeforeEditComplete:function(b, c, a) {
  if (this.task && c < this.task.getStartDate()) {
    return false;
  }
}, onTreeEdit:function(c, b) {
  if (b.column === this && b.value) {
    var a = b.record;
    var d = b.value;
    if (!Ext.Date.formatContainsHourInfo(this.editorFormat)) {
      d = a.getCalendar().getCalendarDay(d).getAvailabilityEndFor(d) || d;
    }
    b.record.setEndDate(d, false);
  }
}});
Ext.define('Gnt.column.PercentDone', {extend:'Ext.grid.column.Number', alias:'widget.percentdonecolumn', text:'% Done', width:50, format:'0', align:'center', field:{xtype:'numberfield', minValue:0, maxValue:100}, beforeRender:function() {
  if (!this.dataIndex) {
    var a = this.up('treepanel');
    this.dataIndex = a.store.model.prototype.percentDoneField;
  }
  this.callParent(arguments);
}});
Ext.define('Gnt.column.StartDate', {extend:'Ext.grid.column.Date', alias:'widget.startdatecolumn', text:'Start', width:100, align:'left', editorFormat:null, constructor:function(a) {
  a = a || {};
  var b = a.field || a.editor;
  delete a.field;
  delete a.editor;
  this.field = Ext.create('Ext.grid.CellEditor', {ignoreNoChange:true, field:b || {xtype:'datefield', format:a.editorFormat || a.format || this.format || Ext.Date.defaultFormat}});
  this.callParent([a]);
  this.editorFormat = this.editorFormat || this.format;
}, beforeRender:function() {
  var a = this.up('treepanel');
  if (!this.dataIndex) {
    this.dataIndex = a.store.model.prototype.startDateField;
  }
  this.callParent(arguments);
  a.on({edit:this.onTreeEdit, beforeedit:this.onBeforeTreeEdit, scope:this});
}, onBeforeTreeEdit:function(c) {
  if (c.column == this) {
    c.doNotUpdateRecord = true;
    var b = c.record;
    if (!b.isEditable(this.dataIndex)) {
      return false;
    }
    var a = c.value;
    if (a) {
      c.value = Ext.Date.parse(Ext.Date.format(a, this.editorFormat), this.editorFormat);
    }
  }
}, onTreeEdit:function(c, b) {
  var a = b.record;
  var d = b.value;
  if (b.column == this && d && d - b.originalValue !== 0) {
    a.setStartDate(d, true, a.getTaskStore().skipWeekendsDuringDragDrop);
  }
}});
Ext.define('Gnt.column.WBS', {extend:'Ext.grid.column.Column', alias:'widget.wbscolumn', text:'#', width:40, align:'left', dataIndex:'index', renderer:function(f, g, b, h, d, e) {
  var a = e.getRootNode(), c = [];
  while (b !== a) {
    c.push(b.data.index + 1);
    b = b.parentNode;
  }
  return c.reverse().join('.');
}});
Ext.define('Gnt.column.SchedulingMode', {extend:'Ext.grid.column.Column', alias:'widget.schedulingmodecolumn', text:'Mode', width:100, align:'left', data:[['FixedDuration', 'Fixed duration'], ['EffortDriven', 'Effort driven'], ['DynamicAssignment', 'Dynamic assignment'], ['Manual', 'Manual'], ['Normal', 'Normal']], modeNames:null, pickerAlign:'tl-bl?', matchFieldWidth:true, constructor:function(a) {
  a = a || {};
  var c = a.field || a.editor;
  a.field = c || {xtype:'combo', editable:false, store:this.data, pickerAlign:this.pickerAlign, matchFieldWidth:this.matchFieldWidth};
  var b = this.modeNames = {};
  Ext.Array.each(this.data, function(d) {
    b[d[0]] = d[1];
  });
  this.scope = this;
  this.callParent([a]);
}, beforeRender:function() {
  if (!this.dataIndex) {
    var a = this.up('treepanel');
    this.dataIndex = a.store.model.prototype.schedulingModeField;
  }
  this.callParent(arguments);
}, renderer:function(a) {
  return this.modeNames[a];
}, afterRender:function() {
  this.callParent(arguments);
  this.tree = this.ownerCt.up('treepanel');
  this.tree.on('edit', this.onTreeEdit, this);
}, onTreeEdit:function(b, a) {
  if (a.column == this) {
    a.record.setSchedulingMode(a.value);
  }
}});
Ext.define('Gnt.column.ResourceAssignment', {extend:'Ext.grid.column.Column', alias:'widget.resourceassignmentcolumn', text:'Assigned Resources', tdCls:'sch-assignment-cell', showUnits:true, assignmentStore:null, initComponent:function() {
  this.formatString = '{0}' + (this.showUnits ? ' [{1}%]' : '');
  this.callParent(arguments);
}, afterRender:function() {
  this.scope = this;
  this.callParent(arguments);
  this.assignmentStore = this.getOwnerHeaderCt().up('ganttpanel').assignmentStore;
}, renderer:function(k, o, b, h, n, m, j) {
  var g = [], e = this.assignmentStore, a, f = b.getInternalId();
  if (e.resourceStore.getCount() > 0) {
    for (var d = 0, c = e.getCount(); d < c; d++) {
      a = e.getAt(d);
      if (a.getTaskId() === f) {
        g.push(Ext.String.format(this.formatString, a.getResourceName(), a.getUnits()));
      }
    }
    return g.join(', ');
  }
}});
Ext.define('Gnt.column.ResourceName', {extend:'Ext.grid.column.Column', alias:'widget.resourcenamecolumn', text:'Resource Name', dataIndex:'ResourceName', flex:1, align:'left'});
Ext.define('Gnt.column.AssignmentUnits', {extend:'Ext.grid.column.Number', alias:'widget.assignmentunitscolumn', text:'Units', dataIndex:'Units', format:'0 %', align:'left'});
Ext.define('Gnt.widget.AssignmentGrid', {requires:['Gnt.model.Resource', 'Gnt.model.Assignment', 'Gnt.column.ResourceName', 'Gnt.column.AssignmentUnits', 'Ext.grid.plugin.CellEditing'], extend:'Ext.grid.Panel', alias:'widget.assignmentgrid', readOnly:false, cls:'gnt-assignmentgrid', defaultAssignedUnits:100, sorter:{sorterFn:function(b, a) {
  var d = b.getUnits(), c = a.getUnits();
  if (!d && !c || d && c) {
    return b.get('ResourceName') < a.get('ResourceName') ? -1 : 1;
  }
  return d ? -1 : 1;
}}, constructor:function(a) {
  this.store = Ext.create('Ext.data.JsonStore', {model:Ext.define('Gnt.model.AssignmentEditing', {extend:'Gnt.model.Assignment', fields:['ResourceName']})});
  this.columns = this.buildColumns();
  if (!this.readOnly) {
    this.plugins = this.buildPlugins();
  }
  Ext.apply(this, {selModel:{selType:'checkboxmodel', mode:'MULTI', checkOnly:true, selectByPosition:function(b) {
    var c = this.store.getAt(b.row);
    this.select(c, true);
  }}});
  this.callParent(arguments);
}, initComponent:function() {
  this.loadResources();
  this.resourceStore.on({datachanged:this.loadResources, scope:this});
  this.getSelectionModel().on('select', this.onSelect, this, {delay:50});
  this.callParent(arguments);
}, onSelect:function(b, a) {
  if ((!this.cellEditing || !this.cellEditing.getActiveEditor()) && !a.getUnits()) {
    a.setUnits(this.defaultAssignedUnits);
  }
}, loadResources:function() {
  var d = [], b = this.resourceStore, e;
  for (var c = 0, a = b.getCount(); c < a; c++) {
    e = b.getAt(c).getId();
    d.push({ResourceId:e, ResourceName:b.getById(e).getName()});
  }
  this.store.loadData(d);
}, buildPlugins:function() {
  var a = this.cellEditing = Ext.create('Ext.grid.plugin.CellEditing', {clicksToEdit:1});
  a.on('edit', this.onEditingDone, this);
  return [a];
}, onEditingDone:function(a, b) {
  if (b.value) {
    this.getSelectionModel().select(b.record, true);
  } else {
    this.getSelectionModel().deselect(b.record);
    b.record.reject();
  }
}, buildColumns:function() {
  return [{xtype:'resourcenamecolumn', resourceStore:this.resourceStore}, {xtype:'assignmentunitscolumn', assignmentStore:this.assignmentStore, editor:{xtype:'numberfield', minValue:0, step:10}}];
}, loadTaskAssignments:function(d) {
  var b = this.store, f = this.getSelectionModel();
  f.deselectAll(true);
  for (var c = 0, a = b.getCount(); c < a; c++) {
    b.getAt(c).data.Units = '';
    b.getAt(c).data.Id = null;
  }
  b.suspendEvents();
  var e = this.assignmentStore.queryBy(function(g) {
    return g.getTaskId() === d;
  });
  e.each(function(h) {
    var g = b.findRecord('ResourceId', h.getResourceId(), 0, false, true, true);
    if (g) {
      g.setUnits(h.getUnits());
      g.set(g.idProperty, h.getId());
      f.select(g, true, true);
    }
  });
  b.resumeEvents();
  b.sort(this.sorter);
  this.getView().refresh();
}});
Ext.define('Gnt.widget.AssignmentField', {extend:'Ext.form.field.Picker', alias:'widget.assignmenteditor', requires:['Gnt.widget.AssignmentGrid'], matchFieldWidth:false, editable:false, cancelText:'Cancel', closeText:'Save and Close', assignmentStore:null, resourceStore:null, gridConfig:null, createPicker:function() {
  var a = new Gnt.widget.AssignmentGrid(Ext.apply({ownerCt:this.ownerCt, renderTo:document.body, frame:true, floating:true, hidden:true, height:200, width:300, resourceStore:this.resourceStore, assignmentStore:this.assignmentStore, fbar:this.buildButtons()}, this.gridConfig || {}));
  return a;
}, buildButtons:function() {
  return ['-\x3e', {text:this.closeText, handler:function() {
    Ext.Function.defer(this.onGridClose, Ext.isIE && !Ext.isIE9 ? 60 : 30, this);
  }, scope:this}, {text:this.cancelText, handler:this.collapse, scope:this}];
}, onExpand:function() {
  var a = this.resourceStore, b = this.picker;
  b.loadTaskAssignments(this.taskId);
}, onGridClose:function() {
  var b = this.picker.getSelectionModel(), a = b.selected;
  this.fireEvent('select', this, a);
  this.collapse();
}, collapseIf:function(b) {
  var a = this;
  if (this.picker && !b.getTarget('.x-editor') && !b.getTarget('.x-menu-item')) {
    a.callParent(arguments);
  }
}});
Ext.define('Gnt.widget.AssignmentCellEditor', {extend:'Ext.grid.CellEditor', requires:['Gnt.model.Assignment', 'Gnt.widget.AssignmentField'], assignmentStore:null, resourceStore:null, taskId:null, fieldConfig:null, allowBlur:false, constructor:function(a) {
  a = a || {};
  var b = a.fieldConfig || {};
  this.field = Ext.create('Gnt.widget.AssignmentField', Ext.apply(b, {assignmentStore:a.assignmentStore, resourceStore:a.resourceStore}));
  this.field.on({select:this.onSelect, collapse:this.cancelEdit, scope:this});
  this.callParent(arguments);
}, startEdit:function(c, d, b) {
  this.parentEl = null;
  var a = c.child('div').dom.innerHTML;
  this.taskId = this.field.taskId = b.record.getInternalId();
  this.callParent([c, a === '\x26nbsp;' ? '' : a]);
  this.field.expand();
}, onSelect:function(g, c) {
  var a = this.assignmentStore, f = this.taskId;
  var e = {};
  var d = [];
  c.each(function(i) {
    var h = i.getUnits();
    if (h > 0) {
      var k = i.getId();
      if (k) {
        e[k] = true;
        a.getById(k).setUnits(h);
      } else {
        var j = Ext.create(a.model);
        j.setTaskId(f);
        j.setResourceId(i.getResourceId());
        j.setUnits(h);
        e[j.internalId] = true;
        d.push(j);
      }
    }
  });
  var b = [];
  a.each(function(h) {
    if (h.getTaskId() === f && !e[h.getId() || h.internalId]) {
      b.push(h);
    }
  });
  a.remove(b);
  a.add(d);
  this.completeEdit();
}});
Ext.define('Gnt.widget.DurationField', {extend:'Ext.form.field.Number', alias:'widget.durationfield', alternateClassName:'Gnt.column.duration.Field', disableKeyFilter:true, minValue:0, durationRegex:/(-?\d+(?:[.,]\d+)?)\s*(\w+)?/i, unitsRegex:{MILLI:/^ms$|^mil/i, SECOND:/^s$|^sec/i, MINUTE:/^m$|^min/i, HOUR:/^h$|^hr$|^hour/i, DAY:/^d$|^day/i, WEEK:/^w$|^wk|^week/i, MONTH:/^mo|^mnt/i, QUARTER:/^q$|^quar|^qrt/i, YEAR:/^y$|^yr|^year/i}, durationUnit:'h', useAbbreviation:false, rawToValue:function(b) {
  var a = this.parseDuration(b);
  if (!a) {
    return null;
  }
  this.durationUnit = a.unit;
  return a.value != null ? a.value : null;
}, valueToRaw:function(a) {
  if (Ext.isNumber(a)) {
    return parseFloat(Ext.Number.toFixed(a, this.decimalPrecision)) + ' ' + Sch.util.Date[this.useAbbreviation ? 'getShortNameOfUnit' : 'getReadableNameOfUnit'](this.durationUnit, a > 1);
  }
  return '';
}, parseDuration:function(c) {
  if (c == null || !this.durationRegex.test(c)) {
    return null;
  }
  var a = this.durationRegex.exec(c);
  var e = this.parseValue(a[1]);
  var b = a[2];
  var d;
  if (b) {
    Ext.iterate(this.unitsRegex, function(f, g) {
      if (g.test(b)) {
        d = Sch.util.Date.getUnitByName(f);
        return false;
      }
    });
  }
  return {value:e, unit:d || this.durationUnit};
}, getDurationValue:function() {
  return this.parseDuration(this.getRawValue());
}, getErrors:function(b) {
  var a = this.parseDuration(b);
  if (!a) {
    return ['Invalid number format'];
  }
  return this.callParent([a.value]);
}});
Ext.define('Gnt.widget.DurationEditor', {extend:'Ext.grid.CellEditor', alias:['widget.durationeditor', 'widget.durationcolumneditor'], alternateClassName:'Gnt.column.duration.Editor', context:null, decimalPrecision:2, getDurationUnitMethod:'getDurationUnit', setDurationMethod:'setDuration', useAbbreviation:false, constructor:function(a) {
  a = a || {};
  Ext.apply(this, a);
  a.field = a.field || Ext.create('Gnt.widget.DurationField', {useAbbreviation:this.useAbbreviation, decimalPrecision:this.decimalPrecision});
  this.callParent([a]);
}, startEdit:function(c, b, a) {
  this.context = a;
  this.field.durationUnit = a.record[this.getDurationUnitMethod]();
  return this.callParent(arguments);
}, completeEdit:function(a) {
  var d = this, g = d.field, e;
  if (!d.editing) {
    return;
  }
  if (g.assertValue) {
    g.assertValue();
  }
  e = d.getValue();
  if (!g.isValid()) {
    if (d.revertInvalid !== false) {
      d.cancelEdit(a);
    }
    return;
  }
  if (String(e) === String(d.startValue) && d.ignoreNoChange) {
    d.hideEdit(a);
    return;
  }
  if (d.fireEvent('beforecomplete', d, e, d.startValue) !== false) {
    e = d.getValue();
    if (d.updateEl && d.boundEl) {
      d.boundEl.update(e);
    }
    d.hideEdit(a);
    var c = this.context;
    var b = c.record;
    var f = this.field.getDurationValue();
    b[this.setDurationMethod](f.value, f.unit);
    d.fireEvent('complete', d, e, d.startValue);
  }
}});
Ext.define('Gnt.column.Duration', {extend:'Ext.grid.column.Column', alias:'widget.durationcolumn', requires:['Gnt.widget.DurationField', 'Gnt.widget.DurationEditor'], text:'Duration', width:80, align:'left', decimalPrecision:2, getDurationUnitMethod:'getDurationUnit', setDurationMethod:'setDuration', useAbbreviation:false, constructor:function(a) {
  a = a || {};
  Ext.apply(this, a);
  a.editor = a.editor || Ext.create('Gnt.widget.DurationEditor', {useAbbreviation:this.useAbbreviation, decimalPrecision:this.decimalPrecision, getDurationUnitMethod:this.getDurationUnitMethod, setDurationMethod:this.setDurationMethod});
  if (!a.editor.isFormField) {
    a.editor = Ext.ComponentManager.create(a.editor, 'durationcolumneditor');
  }
  this.scope = this;
  this.callParent([a]);
  this.mon(this.editor, 'beforestartedit', this.onBeforeStartEdit, this);
}, beforeRender:function() {
  if (!this.dataIndex) {
    var a = this.up('treepanel');
    this.dataIndex = a.store.model.prototype.durationField;
  }
  this.callParent(arguments);
}, onBeforeStartEdit:function(b) {
  var a = b.context.record;
  return a.isEditable(this.dataIndex);
}, renderer:function(b, c, a) {
  if (!Ext.isNumber(b)) {
    return '';
  }
  if (!a.isEditable(this.dataIndex)) {
    c.tdCls = (c.tdCls || '') + ' sch-column-readonly';
  }
  b = parseFloat(Ext.Number.toFixed(b, this.decimalPrecision));
  return b + ' ' + Sch.util.Date[this.useAbbreviation ? 'getShortNameOfUnit' : 'getReadableNameOfUnit'](a[this.getDurationUnitMethod](), b > 1);
}});
Ext.define('Gnt.column.Effort', {extend:'Gnt.column.Duration', alias:'widget.effortcolumn', header:'Effort', getDurationUnitMethod:'getEffortUnit', setDurationMethod:'setEffort', beforeRender:function() {
  if (!this.dataIndex) {
    var a = this.up('treepanel');
    this.dataIndex = a.store.model.prototype.effortField;
  }
  this.callParent(arguments);
}});
Ext.define('Gnt.widget.Calendar', {extend:'Ext.picker.Date', alias:'widget.ganttcalendar', requires:['Gnt.data.Calendar', 'Sch.util.Date'], calendar:null, startDate:null, endDate:null, disabledDatesText:'Holiday', initComponent:function() {
  if (!this.calendar) {
    Ext.Error.raise('Required attribute "calendar" missing during initialization of `Gnt.widget.Calendar`');
  }
  if (!this.startDate) {
    Ext.Error.raise('Required attribute "startDate" missing during initialization of `Gnt.widget.Calendar`');
  }
  if (!this.endDate) {
    this.endDate = Sch.util.Date.add(this.startDate, Sch.util.Date.MONTH, 1);
  }
  this.setCalendar(this.calendar);
  this.minDate = this.value = this.startDate;
  this.injectDates();
  this.callParent(arguments);
}, injectDates:function() {
  var a = this;
  var b = a.disabledDates = [];
  Ext.each(a.calendar.getHolidaysRanges(a.startDate, a.endDate), function(c) {
    c.forEachDate(function(d) {
      b.push(Ext.Date.format(d, a.format));
    });
  });
  a.setDisabledDates(b);
}, setCalendar:function(b) {
  var a = {update:this.injectDates, remove:this.injectDates, add:this.injectDates, load:this.injectDates, clear:this.injectDates, scope:this};
  if (this.calendar) {
    this.calendar.un(a);
  }
  this.calendar = b;
  b.on(a);
}});
Ext.define('Gnt.widget.calendar.DayGrid', {extend:'Ext.grid.Panel', title:'Day overrides', height:180, nameText:'Name', dateText:'Date', noNameText:'[Day override]', initComponent:function() {
  Ext.applyIf(this, {store:Ext.create('Gnt.data.Calendar', {proxy:'memory'}), plugins:[Ext.create('Ext.grid.plugin.CellEditing', {clicksToEdit:2})], columns:[{header:this.nameText, dataIndex:'Name', flex:1, editor:{allowBlank:false}}, {header:this.dateText, dataIndex:'Date', width:100, xtype:'datecolumn', editor:{xtype:'datefield'}}]});
  this.callParent(arguments);
}});
Ext.define('Gnt.widget.calendar.WeekGrid', {extend:'Ext.grid.Panel', requires:['Gnt.model.WeekAvailability'], title:'Week overrides', border:true, height:220, nameText:'Name', startDateText:'Start date', endDateText:'End date', initComponent:function() {
  Ext.applyIf(this, {store:Ext.create('Ext.data.Store', {model:'Gnt.model.WeekAvailability', proxy:'memory'})});
  Ext.applyIf(this, {columns:[{header:this.nameText, dataIndex:this.store.model.prototype.nameField, flex:1, editor:{allowBlank:false}}, {header:this.startDateText, dataIndex:this.store.model.prototype.startDateField, width:100, xtype:'datecolumn', editor:{xtype:'datefield'}}, {header:this.endDateText, dataIndex:this.store.model.prototype.endDateField, width:100, xtype:'datecolumn', editor:{xtype:'datefield'}}], plugins:[Ext.create('Ext.grid.plugin.CellEditing', {clicksToEdit:2})]});
  this.callParent(arguments);
}});
Ext.define('Gnt.widget.calendar.ResourceCalendarGrid', {extend:'Ext.grid.Panel', requires:['Gnt.data.Calendar', 'Sch.util.Date'], alias:'widget.resourcecalendargrid', resourceStore:null, calendarStore:null, initComponent:function() {
  var a = this;
  this.calendarStore = this.calendarStore || Ext.create('Ext.data.Store', {fields:['Id', 'Name']});
  Ext.apply(a, {store:a.resourceStore, columns:[{header:'Name', dataIndex:'Name', flex:1}, {header:'Calendar', dataIndex:'CalendarId', flex:1, renderer:function(f, h, b, e, d, c) {
    if (!f) {
      var g = b.getCalendar();
      f = g ? g.calendarId : '';
    }
    var i = a.calendarStore.getById(f);
    return i ? i.get('Name') : f;
  }, editor:{xtype:'combobox', store:a.calendarStore, queryMode:'local', displayField:'Name', valueField:'Id', editable:false, allowBlank:false}}], border:true, height:180, plugins:[Ext.create('Ext.grid.plugin.CellEditing', {clicksToEdit:2})]});
  this.calendarStore.loadData(this.getCalendarData());
  this.callParent(arguments);
}, getCalendarData:function() {
  var a = [];
  Ext.Array.each(Gnt.data.Calendar.getAllCalendars(), function(b) {
    a.push({Id:b.calendarId, Name:b.name || b.calendarId});
  });
  return a;
}});
Ext.define('Gnt.widget.calendar.DayAvailabilityGrid', {extend:'Ext.grid.Panel', requires:['Gnt.data.Calendar', 'Sch.util.Date'], alias:'widget.dayavailabilitygrid', height:160, calendarDay:null, startText:'Start', endText:'End', addText:'Add', removeText:'Remove', workingTimeText:'Working time', nonworkingTimeText:'Non-working time', getDayTypeRadioGroup:function() {
  return this.down('radiogroup[name\x3d"dayType"]');
}, initComponent:function() {
  Ext.applyIf(this, {store:Ext.create('Ext.data.Store', {fields:['startTime', 'endTime'], proxy:{type:'memory', reader:{type:'json'}}}), plugins:[Ext.create('Ext.grid.plugin.CellEditing', {clicksToEdit:2})], dockedItems:[{xtype:'radiogroup', dock:'top', name:'dayType', padding:'0 5px', margin:0, items:[{boxLabel:this.workingTimeText, name:'IsWorkingDay', inputValue:true}, {boxLabel:this.nonworkingTimeText, name:'IsWorkingDay', inputValue:false}], listeners:{change:this.onDayTypeChanged, scope:this}}], 
  tbar:this.buildToolbar(), columns:[{header:this.startText, xtype:'datecolumn', format:'g:i a', dataIndex:'startTime', flex:1, editor:{xtype:'timefield', allowBlank:false, initDate:'31/12/1899'}}, {header:this.endText, xtype:'datecolumn', format:'g:i a', dataIndex:'endTime', flex:1, editor:{allowBlank:false, xtype:'timefield', initDate:'31/12/1899'}}], listeners:{selectionchange:this.onAvailabilityGridSelectionChange, scope:this}});
  this.callParent(arguments);
}, buildToolbar:function() {
  this.addButton = new Ext.Button({text:this.addText, iconCls:'gnt-action-add', handler:this.addAvailability, scope:this});
  this.removeButton = new Ext.Button({text:this.removeText, iconCls:'gnt-action-remove', handler:this.removeAvailability, scope:this, disabled:true});
  return [this.addButton, this.removeButton];
}, onAvailabilityGridSelectionChange:function(a) {
  if (this.removeButton) {
    this.removeButton.setDisabled(!a || a.getSelection().length === 0);
  }
}, onDayTypeChanged:function(a) {
  var b = a.getValue();
  if (Ext.isArray(b.IsWorkingDay)) {
    return;
  }
  this.getView().setDisabled(!b.IsWorkingDay);
}, addAvailability:function() {
  var a = this.getStore(), b = a.count();
  if (b >= 5) {
    return;
  }
  a.add({startTime:new Date(0, 0, 0, 12, 0), endTime:new Date(0, 0, 0, 13, 0)});
  if (b + 1 >= 5 && this.addButton) {
    this.addButton.setDisabled(true);
  }
}, removeAvailability:function() {
  var b = this.getStore(), c = b.count(), d = this.getSelectionModel();
  if (!d || d.getSelection().length === 0) {
    return;
  }
  var a = d.getSelection()[0];
  b.remove(a);
  if (c < 5 && this.addButton) {
    this.addButton.setDisabled(false);
  }
}, editAvailability:function(a) {
  this.calendarDay = a;
  this.getDayTypeRadioGroup().setValue({IsWorkingDay:a.getIsWorkingDay()});
  var b = this.calendarDay.getAvailability();
  this.getStore().loadData(b);
}, isWorkingDay:function() {
  return this.getDayTypeRadioGroup().getValue().IsWorkingDay;
}, isValid:function() {
  var c = this.getDayTypeRadioGroup().getValue().IsWorkingDay, b = [];
  if (c) {
    try {
      b = this.getIntervals();
      this.calendarDay.verifyAvailability(b);
    } catch (a) {
      Ext.MessageBox.alert('Error', a);
      return false;
    }
  }
  return true;
}, getIntervals:function() {
  var a = [];
  this.getStore().each(function(b) {
    a.push({startTime:b.get('startTime'), endTime:b.get('endTime')});
  });
  return a;
}});
Ext.define('Gnt.widget.calendar.WeekEditor', {extend:'Ext.form.Panel', requires:['Ext.grid.*', 'Gnt.data.Calendar', 'Sch.util.Date'], alias:'widget.calendarweekeditor', layout:'anchor', defaults:{border:false, anchor:'100%'}, getDefaultWeekAvailabilityHandler:null, startDate:null, endDate:null, startHeaderText:'Start', endHeaderText:'End', defaultTimeText:'Default time', workingTimeText:'Working time', nonworkingTimeText:'Non-working time', addText:'Add', removeText:'Remove', weekAvailability:null, 
currentWeekDay:null, _weekDaysGrid:null, getWeekDaysGrid:function() {
  if (this._weekDaysGrid != null) {
    return this._weekDaysGrid;
  }
  var a = Ext.Date.dayNames;
  return this._weekDaysGrid = Ext.create('Ext.grid.Panel', {hideHeaders:true, height:160, columns:[{header:'', dataIndex:'name', flex:1}], store:Ext.create('Ext.data.JsonStore', {fields:['id', 'name'], idProperty:'id', data:[{id:1, name:a[1]}, {id:2, name:a[2]}, {id:3, name:a[3]}, {id:4, name:a[4]}, {id:5, name:a[5]}, {id:6, name:a[6]}, {id:0, name:a[0]}]}), listeners:{selectionchange:{fn:this.onWeekDaysListSelectionChange, scope:this}}});
}, _availabilityGrid:null, getAvailabilityGrid:function() {
  if (!this._availabilityGrid) {
    this._availabilityGrid = Ext.create('Ext.grid.Panel', {height:160, plugins:[Ext.create('Ext.grid.plugin.CellEditing', {clicksToEdit:2})], tbar:[{text:this.addText, action:'add', handler:this.addAvailability, scope:this, iconCls:'gnt-action-add'}, {text:this.removeText, iconCls:'gnt-action-remove', action:'remove', handler:this.removeAvailability, scope:this}], store:Ext.create('Ext.data.Store', {fields:['startTime', 'endTime'], proxy:{type:'memory', reader:{type:'json'}}}), columns:[{header:this.startHeaderText, 
    xtype:'datecolumn', format:'g:i a', dataIndex:'startTime', flex:1, editor:{xtype:'timefield', allowBlank:false, initDate:'31/12/1899'}}, {header:this.endHeaderText, xtype:'datecolumn', format:'g:i a', dataIndex:'endTime', flex:1, editor:{allowBlank:false, xtype:'timefield', initDate:'31/12/1899'}}], listeners:{selectionchange:this.onAvailabilityGridSelectionChange, scope:this}});
  }
  return this._availabilityGrid;
}, getDayTypeRadioGroup:function() {
  return this.down('radiogroup[name\x3d"dayType"]');
}, initComponent:function() {
  if (!this.getDefaultWeekAvailabilityHandler && !Ext.isFunction(this.getDefaultWeekAvailabilityHandler)) {
    Ext.Error.raise('Required attribute "getDefaultWeekAvailabilityHandler" is missed during initialization of `Gnt.widget.calendar.WeekEditor`');
  }
  this.items = [{xtype:'radiogroup', padding:'0 5px', name:'dayType', items:[{boxLabel:this.defaultTimeText, name:'IsWorkingDay', inputValue:0}, {boxLabel:this.workingTimeText, name:'IsWorkingDay', inputValue:1}, {boxLabel:this.nonworkingTimeText, name:'IsWorkingDay', inputValue:2}], listeners:{change:{fn:this.onDayTypeChanged, scope:this}}}, {layout:'column', padding:'0 0 5px 0', defaults:{border:false}, items:[{margin:'0 10px 0 5px', columnWidth:0.5, items:this.getWeekDaysGrid()}, {columnWidth:0.5, 
  margin:'0 5px 0 0', items:this.getAvailabilityGrid()}]}];
  this.callParent(arguments);
}, addAvailability:function() {
  var b = this.getAvailabilityGrid(), a = b.getStore(), c = a.count();
  if (c >= 5) {
    return;
  }
  a.add({startTime:new Date(0, 0, 0, 12, 0), endTime:new Date(0, 0, 0, 13, 0)});
  if (c + 1 >= 5) {
    b.down('button[action\x3d"add"]').setDisabled(true);
  }
}, removeAvailability:function() {
  var c = this.getAvailabilityGrid(), b = c.getStore(), d = b.count(), e = c.getSelectionModel();
  if (!e || e.getSelection().length === 0) {
    return;
  }
  var a = e.getSelection()[0];
  b.remove(a);
  if (d < 5) {
    c.down('button[action\x3d"add"]').setDisabled(false);
  }
}, editAvailability:function(b, e, a) {
  this.startDate = b;
  this.endDate = e;
  this.weekAvailability = a;
  var c = this.getWeekDaysGrid(), d = c.getStore().getAt(0);
  c.getSelectionModel().select(d, false, true);
  this.refreshView(d);
}, applyChanges:function(a) {
  if (!this.validateAndSave()) {
    return false;
  }
  if (a && Ext.isFunction(a)) {
    a.call(this, this.weekAvailability);
  }
}, getIntervals:function() {
  var a = [];
  this.getAvailabilityGrid().getStore().each(function(b) {
    a.push({startTime:b.get('startTime'), endTime:b.get('endTime')});
  });
  return a;
}, onWeekDaysListSelectionChange:function(a, b) {
  if (!this.validateAndSave()) {
    return false;
  }
  this.refreshView(b[0]);
}, validateAndSave:function() {
  var c = this.currentWeekDay.get('IsWorkingDay'), b = [];
  if (c) {
    try {
      b = this.getIntervals();
      this.currentWeekDay.verifyAvailability(b);
    } catch (a) {
      Ext.MessageBox.alert('Error', a);
      return false;
    }
  }
  this.currentWeekDay.setAvailability(b);
  return true;
}, refreshView:function(d) {
  var g = d.getId(), b = this.weekAvailability[g], f = this.getDayTypeRadioGroup(), e = b.getAvailability(), c = /^(\d)-(\d\d\d\d\/\d\d\/\d\d)-(\d\d\d\d\/\d\d\/\d\d)$/.exec(b.getId()), a = !c ? 0 : b.get('IsWorkingDay') ? 1 : 2;
  this.currentWeekDay = b;
  f.setValue({IsWorkingDay:[a]});
  this.getAvailabilityGrid().getStore().loadData(e);
}, onAvailabilityGridSelectionChange:function(b) {
  var a = this.getAvailabilityGrid();
  a.down('button[action\x3d"remove"]').setDisabled(!b || b.getSelection().length === 0);
}, onDayTypeChanged:function(g) {
  var c = g.getValue();
  if (Ext.isArray(c.IsWorkingDay)) {
    return;
  }
  var a = this.getWeekDaysGrid(), d = a.getSelectionModel(), b = d.getSelection()[0].getId(), e = this.weekAvailability[b].get('Name'), f = [], i = Ext.Date.format(this.startDate, 'Y/m/d'), j = Ext.Date.format(this.endDate, 'Y/m/d');
  switch(c.IsWorkingDay) {
    case 0:
      var h = this.getDefaultWeekAvailabilityHandler()[b];
      h.set('Name', e);
      h.set('Date', null);
      f = h.getAvailability();
      this.weekAvailability[b] = h;
      break;
    default:
      f = this.weekAvailability[b].getAvailability();
      this.currentWeekDay.set('Id', Ext.String.format('{0}-{1}-{2}', b, i, j));
      this.currentWeekDay.set('IsWorkingDay', c.IsWorkingDay === 1);
      break;
  }
  this.getAvailabilityGrid().getStore().loadData(Ext.clone(f));
  this.getAvailabilityGrid().setDisabled(c.IsWorkingDay !== 1);
}});
Ext.define('Gnt.widget.calendar.DatePicker', {extend:'Ext.picker.Date', alias:'widget.gntdatepicker', calendar:null, workingDayCls:'gnt-datepicker-workingday', nonWorkingDayCls:'gnt-datepicker-nonworkingday', overriddenDayCls:'gnt-datepicker-overriddenday', overriddenWeekDayCls:'gnt-datepicker-overriddenweekday', _weeks:null, getWeekOverrides:function() {
  return this._weeks;
}, setWeekOverrides:function(a) {
  this._weeks = a;
}, _days:null, getDayOverrides:function() {
  return this._days;
}, setDayOverrides:function(a) {
  this._days = a;
}, update:function(b, e) {
  var d = this, c = 0, a = d.cells.elements;
  this.removeCustomCls();
  this.callParent(arguments);
  for (; c < d.numDays; ++c) {
    b = a[c].firstChild.dateValue;
    a[c].className += ' ' + this.getDateCls(b);
  }
}, getDateCls:function(d) {
  var b = '', f = 0, g = this;
  d = new Date(d);
  if (d.getMonth() !== this.getActive().getMonth()) {
    return;
  }
  if (this.getDayOverrides().getOverrideDay(d)) {
    b += ' ' + this.overriddenDayCls;
    if (!this.getDayOverrides().isWorkingDay(d)) {
      b += ' ' + this.nonWorkingDayCls;
    }
  } else {
    var e = null;
    this.getWeekOverrides().each(function(h) {
      if (Ext.Date.between(d, h.getStartDate(), h.getEndDate())) {
        e = h;
        return true;
      }
    });
    if (e) {
      b += ' ' + this.overriddenWeekDayCls;
      var c = (new Date(d)).getDay(), a = e.getAvailability();
      if (a && a[c] && a[c].getIsWorkingDay() === false) {
        b += ' ' + g.nonWorkingDayCls;
      }
    } else {
      if (!this.getDayOverrides().isWorkingDay(d)) {
        b += ' ' + this.nonWorkingDayCls;
      }
    }
  }
  return b.length > 0 ? b : this.workingDayCls;
}, removeCustomCls:function() {
  this.cells.removeCls([this.overriddenDayCls, this.nonWorkingDayCls, this.workingDayCls, this.overriddenWeekDayCls]);
}});
Ext.define('Gnt.widget.calendar.Calendar', {extend:'Ext.form.Panel', requires:['Ext.XTemplate', 'Gnt.data.Calendar', 'Gnt.widget.calendar.DayGrid', 'Gnt.widget.calendar.WeekGrid', 'Gnt.widget.calendar.DayAvailabilityGrid', 'Gnt.widget.calendar.WeekEditor', 'Gnt.widget.calendar.DatePicker'], alias:'widget.calendar', defaults:{padding:10, border:false}, workingDayCls:'gnt-datepicker-workingday', nonWorkingDayCls:'gnt-datepicker-nonworkingday', overriddenDayCls:'gnt-datepicker-overriddenday', overriddenWeekDayCls:'gnt-datepicker-overriddenweekday', 
calendar:null, dayOverrideNameHeaderText:'Name', dateText:'Date', addText:'Add', editText:'Edit', removeText:'Remove', workingDayText:'Working day', weekendsText:'Weekends', overriddenDayText:'Overridden day', overriddenWeekText:'Overridden week', defaultTimeText:'Default time', workingTimeText:'Working time', nonworkingTimeText:'Non-working time', dayGridConfig:null, weekGridConfig:null, datePickerConfig:null, dayOverridesText:'Day overrides', weekOverridesText:'Week overrides', okText:'OK', cancelText:'Cancel', 
dayGrid:null, weekGrid:null, getDayGrid:function() {
  if (!this.dayGrid) {
    this.dayGrid = Ext.create('Gnt.widget.calendar.DayGrid', Ext.apply({tbar:[{text:this.addText, action:'add', iconCls:'gnt-action-add', handler:this.addDay, scope:this}, {text:this.editText, action:'edit', iconCls:'gnt-action-edit', handler:this.editDay, scope:this}, {text:this.removeText, action:'remove', iconCls:'gnt-action-remove', handler:this.removeDay, scope:this}]}, this.dayGridConfig || {}));
  }
  return this.dayGrid;
}, getWeekGrid:function() {
  if (!this.weekGrid) {
    this.weekGrid = Ext.create('Gnt.widget.calendar.WeekGrid', Ext.apply({tbar:[{text:this.addText, action:'add', iconCls:'gnt-action-add', handler:this.addWeek, scope:this}, {text:this.editText, action:'edit', iconCls:'gnt-action-edit', handler:this.editWeek, scope:this}, {text:this.removeText, action:'remove', iconCls:'gnt-action-remove', handler:this.removeWeek, scope:this}]}, this.weekGridConfig || {}));
  }
  return this.weekGrid;
}, datePicker:null, getDatePicker:function() {
  if (!this.datePicker) {
    this.datePicker = Ext.create('Gnt.widget.calendar.DatePicker', this.datePickerConfig || {});
  }
  return this.datePicker;
}, legendTpl:'\x3cul class\x3d"gnt-calendar-legend"\x3e\x3cli class\x3d"gnt-calendar-legend-item"\x3e\x3cdiv class\x3d"gnt-calendar-legend-itemstyle {workingDayCls}"\x3e\x3c/div\x3e\x3cspan class\x3d"gnt-calendar-legend-itemname"\x3e{workingDayText}\x3c/span\x3e\x3cdiv style\x3d"clear: both"\x3e\x3c/div\x3e\x3c/li\x3e\x3cli\x3e\x3cdiv class\x3d"gnt-calendar-legend-itemstyle {nonWorkingDayCls}"\x3e\x3c/div\x3e\x3cspan class\x3d"gnt-calendar-legend-itemname"\x3e{weekendsText}\x3c/span\x3e\x3cdiv style\x3d"clear: both"\x3e\x3c/div\x3e\x3c/li\x3e\x3cli class\x3d"gnt-calendar-legend-override"\x3e\x3cdiv class\x3d"gnt-calendar-legend-itemstyle {overriddenDayCls}"\x3e31\x3c/div\x3e\x3cspan class\x3d"gnt-calendar-legend-itemname"\x3e{overriddenDayText}\x3c/span\x3e\x3cdiv style\x3d"clear: both"\x3e\x3c/div\x3e\x3c/li\x3e\x3cli class\x3d"gnt-calendar-legend-override"\x3e\x3cdiv class\x3d"gnt-calendar-legend-itemstyle {overriddenWeekDayCls}"\x3e31\x3c/div\x3e\x3cspan class\x3d"gnt-calendar-legend-itemname"\x3e{overriddenWeekText}\x3c/span\x3e\x3cdiv style\x3d"clear: both"\x3e\x3c/div\x3e\x3c/li\x3e\x3c/ul\x3e', 
dateInfoTpl:'\x3ctpl if\x3d"isWorkingDay \x3d\x3d true"\x3e\x3cdiv\x3eWorking hours for {date}:\x3c/div\x3e\x3c/tpl\x3e\x3ctpl if\x3d"isWorkingDay \x3d\x3d false"\x3e\x3cdiv\x3e{date} is non-working\x3c/div\x3e\x3c/tpl\x3e\x3cul class\x3d"gnt-calendar-availabilities"\x3e\x3ctpl for\x3d"availability"\x3e\x3cli\x3e{.}\x3c/li\x3e\x3c/tpl\x3e\x3c/ul\x3e\x3cspan\x3eBased on: \x3ctpl if\x3d"override \x3d\x3d true"\x3eoverride "{name}" in calendar "{calendarName}"\x3c/tpl\x3e\x3ctpl if\x3d"override \x3d\x3d false"\x3estandard day in calendar "{calendarName}"\x3c/tpl\x3e\x3c/span\x3e', 
initComponent:function() {
  var d = this;
  if (!(this.legendTpl instanceof Ext.Template)) {
    this.legendTpl = new Ext.XTemplate(this.legendTpl);
  }
  if (!(this.dateInfoTpl instanceof Ext.Template)) {
    this.dateInfoTpl = new Ext.XTemplate(this.dateInfoTpl);
  }
  if (!this.calendar) {
    Ext.Error.raise('Required attribute "calendar" is missed during initialization of `Gnt.widget.Calendar`');
  }
  var b = this.getWeekGrid(), a = this.getDayGrid(), c = this.getDatePicker();
  this.dayGrid.on({selectionchange:this.onDayGridSelectionChange, validateedit:this.onDayGridValidateEdit, edit:this.onDayGridEdit, scope:this});
  this.dayGrid.store.on({update:this.refreshView, remove:this.refreshView, add:this.refreshView, scope:this});
  this.weekGrid.on({selectionchange:this.onWeekGridSelectionChange, validateedit:this.onWeekGridValidateEdit, edit:this.onWeekGridEdit, scope:this});
  this.weekGrid.store.on({update:this.refreshView, remove:this.refreshView, add:this.refreshView, scope:this});
  this.datePicker.on({select:this.onDateSelect, scope:this});
  this.fillDaysStore();
  this.fillWeeksStore();
  c.setWeekOverrides(b.getStore());
  c.setDayOverrides(a.getStore());
  this.dateInfoPanel = new Ext.Panel({cls:'gnt-calendar-dateinfo', columnWidth:0.33, border:false, height:200});
  this.items = [{xtype:'container', layout:'hbox', pack:'start', align:'stretch', items:[{html:Ext.String.format('Calendar name: "{0}"', this.calendar.name), border:false, flex:1}, {xtype:'combobox', name:'cmb_parentCalendar', fieldLabel:'Parent calendar', store:Ext.create('Ext.data.Store', {fields:['Id', 'Name'], data:[{Id:-1, Name:'No parent'}].concat(d.calendar.getParentableCalendars())}), queryMode:'local', displayField:'Name', valueField:'Id', editable:false, emptyText:'Select parent', value:d.calendar.parent ? 
  d.calendar.parent.calendarId : -1, flex:1}]}, {layout:'column', defaults:{border:false}, items:[{margin:'0 15px 0 0', columnWidth:0.3, html:this.legendTpl.apply({workingDayText:this.workingDayText, weekendsText:this.weekendsText, overriddenDayText:this.overriddenDayText, overriddenWeekText:this.overriddenWeekText, workingDayCls:this.workingDayCls, nonWorkingDayCls:this.nonWorkingDayCls, overriddenDayCls:this.overriddenDayCls, overriddenWeekDayCls:this.overriddenWeekDayCls})}, {columnWidth:0.37, 
  margin:'0 5px 0 0', items:c}, this.dateInfoPanel]}, {xtype:'tabpanel', items:[a, b]}];
  this.callParent(arguments);
}, onRender:function() {
  this.onDateSelect(this.getDatePicker(), new Date());
  this.callParent(arguments);
}, fillDaysStore:function() {
  var a = [];
  this.calendar.each(function(b) {
    if (!b.getDate()) {
      return;
    }
    a.push(Ext.create('Gnt.model.CalendarDay', {Date:b.getDate(), Id:b.getId(), Name:b.getName(), IsWorkingDay:b.getIsWorkingDay(), Availability:b.getAvailability()}));
  });
  this.getDayGrid().getStore().loadData(a);
}, fillWeeksStore:function() {
  var c = [], b = this, a = this.getWeekGrid().store.model.prototype;
  Ext.Array.each(this.calendar.nonStandardWeeksStartDates, function(e) {
    var g = b.calendar.getNonStandardWeekByStartDate(e);
    var f = {};
    var d = b.calendar.getDefaultWeekAvailability();
    f[a.nameField] = g.name;
    f[a.startDateField] = g.startDate;
    f[a.endDateField] = g.endDate;
    f[a.availabilityField] = d;
    Ext.Array.each(d, function(h) {
      h.setName(g.name);
      h.clearDate(null);
    });
    Ext.Array.each(g.weekAvailability, function(k) {
      var l = k.getId();
      var j = /^(\d)-(\d\d\d\d\/\d\d\/\d\d)-(\d\d\d\d\/\d\d\/\d\d)$/.exec(l);
      if (!j) {
        return;
      }
      var i = j[1];
      var h = Ext.create('Gnt.model.CalendarDay');
      h.clearDate(null);
      h.setId(l);
      h.setName(g.name);
      h.setIsWorkingDay(k.getIsWorkingDay());
      h.setAvailability(k.getAvailability());
      d[i] = h;
    });
    c.push(f);
  });
  this.getWeekGrid().getStore().loadData(c);
}, reload:function() {
  var b = this.getWeekGrid(), a = this.getDayGrid();
  this.fillDaysStore();
  this.fillWeeksStore();
  this.getDatePicker().setWeekOverrides(b.getStore());
  this.getDatePicker().setDayOverrides(a.getStore());
}, editDay:function() {
  var c = this, e = this.getDayGrid().getSelectionModel();
  if (!e || e.getSelection().length === 0) {
    return;
  }
  var a = e.getSelection()[0];
  var b = new Gnt.widget.calendar.DayAvailabilityGrid({addText:this.addText, removeText:this.removeText, workingTimeText:this.workingTimeText, nonworkingTimeText:this.nonworkingTimeText});
  var d = Ext.create('Ext.window.Window', {title:this.dayOverridesText, modal:true, width:280, height:260, layout:'fit', items:b, buttons:[{text:this.okText, handler:function() {
    c.calendar.clearCache();
    if (b.isValid()) {
      var f = b.calendarDay;
      f.setIsWorkingDay(b.isWorkingDay());
      f.setAvailability(b.getIntervals());
      c.applyCalendarDay(f, a);
      c.refreshView();
      d.close();
    }
  }}, {text:this.cancelText, handler:function() {
    d.close();
  }}]});
  b.editAvailability(this.cloneCalendarDay(a));
  d.show();
}, addDay:function() {
  var a = this.getDatePicker().getValue(), b = this.getDayGrid(), c = Ext.create('Gnt.model.CalendarDay', {Name:'[Without name]', Cls:this.calendar.defaultNonWorkingTimeCssCls, Date:a, IsWorkingDay:false});
  b.getStore().insert(0, c);
  b.getSelectionModel().select([c], false, false);
}, removeDay:function() {
  var f = this.getDayGrid(), h = f.getSelectionModel(), c = f.getStore();
  if (!h || h.getSelection().length === 0) {
    return;
  }
  c.clearCache();
  var a = h.getSelection()[0], d = this.getDatePicker().getValue(), g = d.getDay(), b = this.getWeekOverrideDay(d), e = b != null;
  c.remove(a);
  if (b == null) {
    b = this.calendar.defaultWeekAvailability[g];
  }
  this.getDatePicker().setValue(d);
}, refreshView:function() {
  var e = this.getDatePicker().getValue(), b = this.getCalendarDay(e), d = this.getWeekGrid(), a = this.getDayGrid(), c = a.getStore().getOverrideDay(e), g;
  if (c) {
    a.getSelectionModel().select([c], false, true);
  } else {
    g = this.getWeekOverrideByDate(e);
    if (g) {
      d.getSelectionModel().select([g], false, true);
    }
  }
  var f = {name:b.getName(), date:Ext.Date.format(e, 'M j, Y'), calendarName:this.calendar.name || this.calendar.calendarId, availability:b.getAvailability(true), override:!!(c || g), isWorkingDay:b.getIsWorkingDay()};
  this.dateInfoPanel.update(this.dateInfoTpl.apply(f));
}, onDayGridSelectionChange:function(d) {
  if (!d || d.getSelection().length === 0) {
    return;
  }
  var a = d.getSelection()[0], b = a.getDate(), c = this.getDayGrid();
  this.getDatePicker().setValue(b);
}, onDayGridEdit:function(b, c) {
  if (c.field === 'Date') {
    var a = Ext.Date.clearTime(c.value, true);
    c.record.data[c.record.idProperty] = a - 0;
    c.grid.getStore().clearCache();
    this.getDatePicker().setValue(c.value);
  }
  this.refreshView();
}, onDayGridValidateEdit:function(b, c) {
  var a = c.grid.getStore();
  if (c.field === a.model.prototype.dateField && a.getOverrideDay(c.value) && c.value !== c.originalValue) {
    Ext.MessageBox.alert('Error', 'There is already an override for this day');
    return false;
  }
}, onDateSelect:function(b, a) {
  this.refreshView();
}, getCalendarDay:function(b) {
  var a = this.getOverrideDay(b);
  if (a) {
    return a;
  }
  a = this.getWeekOverrideDay(b);
  if (a) {
    return a;
  }
  return this.calendar.defaultWeekAvailability[b.getDay()];
}, getOverrideDay:function(a) {
  return this.getDayGrid().getStore().getOverrideDay(a);
}, getWeekOverrideDay:function(c) {
  var e = new Date(c), d = this.getWeekOverrideByDate(c), b = e.getDay();
  if (d == null) {
    return null;
  }
  var a = d.getAvailability();
  if (!a) {
    return null;
  }
  return a[b];
}, getWeekOverrideByDate:function(a) {
  var b = null;
  this.getWeekGrid().getStore().each(function(c) {
    if (Ext.Date.between(a, c.getStartDate(), c.getEndDate())) {
      b = c;
      return true;
    }
  });
  return b;
}, editWeek:function() {
  var f = this.getWeekGrid().getSelectionModel(), c = this;
  if (!f || f.getSelection().length === 0) {
    return;
  }
  var b = f.getSelection()[0];
  var a = new Gnt.widget.calendar.WeekEditor({getDefaultWeekAvailabilityHandler:function() {
    return c.getDefaultWeekAvailability();
  }});
  var e = Ext.create('Ext.window.Window', {title:this.weekOverridesText, modal:true, width:370, defaults:{border:false}, layout:'fit', items:a, buttons:[{text:this.okText, handler:function() {
    c.calendar.clearCache();
    a.applyChanges(function(g) {
      b.setAvailability(g);
      var i = c.getDatePicker().getValue(), h = g[i.getDay()];
      c.refreshView();
      e.close();
    });
  }}, {text:this.cancelText, handler:function() {
    e.close();
  }}]});
  var d = [];
  Ext.Array.each(b.getAvailability(), function(g) {
    d.push(c.cloneCalendarDay(g));
  });
  e.show();
  e.down('calendarweekeditor').editAvailability(b.getStartDate(), b.getEndDate(), d);
}, addWeek:function() {
  var a = this.getWeekGrid().getStore();
  var b = this.getDatePicker().getValue(), c = new a.model();
  c.setName('[Without name]');
  c.setStartDate(b);
  c.setEndDate(b);
  c.setAvailability(this.calendar.getDefaultWeekAvailability());
  a.insert(0, c);
  this.getWeekGrid().getSelectionModel().select([c], false, false);
}, removeWeek:function() {
  var f = this.getWeekGrid().getSelectionModel();
  if (!f || f.getSelection().length === 0) {
    return;
  }
  var a = f.getSelection()[0], c = this.getDatePicker().getValue(), e = c.getDay(), b = this.getOverrideDay(c), d = !!b;
  b = b || this.calendar.defaultWeekAvailability[e];
  this.getWeekGrid().getStore().remove(a);
  this.getDatePicker().setValue(c);
  this.refreshView();
}, onWeekGridSelectionChange:function(e) {
  if (!e || e.getSelection().length === 0) {
    return;
  }
  var a = e.getSelection()[0], b = a.getStartDate(), f = b.getDay(), d = a.getAvailability()[f], c = this.getWeekGrid();
  if (d == null) {
    d = this.calendar.defaultWeekAvailability[f];
  }
  this.getDatePicker().setValue(b);
}, onWeekGridEdit:function(f, h) {
  var c = h.record, a = c.getStartDate(), d = c.getEndDate(), i = a.getDay(), b = c.getAvailability(), k = b[i];
  prot = h.grid.getStore().model.prototype;
  if (k == null) {
    k = this.calendar.defaultWeekAvailability[i];
  }
  if (h.field == prot.startDateField || h.field == prot.endDateField) {
    var g = Ext.Date.format(a, 'Y/m/d');
    var j = Ext.Date.format(d, 'Y/m/d');
    Ext.Array.each(b, function(l) {
      var m = l.getId();
      var e = /^(\d)-(\d\d\d\d\/\d\d\/\d\d)-(\d\d\d\d\/\d\d\/\d\d)$/.exec(m);
      if (!e) {
        return;
      }
      l.set('Id', Ext.String.format('{0}-{1}-{2}', e[1], g, j));
    });
    this.getDatePicker().setValue(a);
  }
  this.refreshView();
}, onWeekGridValidateEdit:function(f, i) {
  var c = i.record, b = c.getStartDate(), h = c.getEndDate(), a = true;
  var d = i.grid.getStore();
  var g = d.model.prototype;
  if (i.field === g.startDateField && h < i.value || i.field === g.endDateField && b > i.value) {
    Ext.MessageBox.alert('Error', 'StartDate greater then EndDate');
    return false;
  }
  d.each(function(j) {
    var k = j.getStartDate(), e = j.getEndDate();
    if (k == b && e == h) {
      return;
    }
    if (i.field == g.startDateField && k < b && i.value <= e || i.field == g.endDateField && e > h && i.value >= k) {
      a = false;
      return true;
    }
  });
  if (!a) {
    Ext.MessageBox.alert('Error', "Dates shouldn't intersect");
    return false;
  }
}, applyChanges:function(b) {
  var a = this.down('combobox[name\x3d"cmb_parentCalendar"]').getValue();
  this.calendar.parent = a ? Gnt.data.Calendar.getCalendar(a) : null;
  this.calendar.proxy.extraParams.parentId = this.calendar.parent ? this.calendar.parent.calendarId : null;
  this.applyDays();
  this.applyWeeks();
  if (b && Ext.isFunction(b)) {
    b.call(this, this.calendar);
  }
}, applyCalendarDay:function(b, a) {
  a.beginEdit();
  a.setId(b.getId());
  a.setName(b.getName());
  a.setIsWorkingDay(b.getIsWorkingDay());
  a.setDate(b.getDate());
  a.setAvailability(b.getAvailability());
  a.endEdit();
}, applyWeek:function(d, c) {
  var b = this, a = /^(\d)-(\d\d\d\d\/\d\d\/\d\d)-(\d\d\d\d\/\d\d\/\d\d)$/;
  Ext.Array.each(d.getAvailability(), function(f, h) {
    var i = false, g = f.getId(), e = a.exec(g) ? false : true;
    Ext.Array.each(c.weekAvailability, function(j) {
      var l = j.getId(), k = a.exec(l);
      if (k[1] == h) {
        if (e) {
          b.calendar.remove(j);
        } else {
          b.applyCalendarDay(f, j);
        }
        i = true;
        return i;
      }
    });
    if (!i && !e) {
      b.calendar.add(f);
    }
  });
}, applyWeeks:function() {
  var c = this, b = this.getWeekGrid().getStore(), a = [], e = [], d = [];
  Ext.Array.each(this.calendar.nonStandardWeeksStartDates, function(f) {
    var g = false;
    b.each(function(i) {
      var h = Ext.Date.clearTime(i.getStartDate());
      if (h === f) {
        var j = c.calendar.getNonStandardWeekByDate(f);
        j.endDate == i.getEndDate() ? e.push([i, j]) : a.push(f);
        g = true;
        return true;
      }
    });
    if (!g) {
      a.push(f);
    }
  });
  b.each(function(f) {
    if (c.calendar.getNonStandardWeekByDate(f.getStartDate() == null)) {
      d.push(f);
    }
  });
  Ext.Array.each(a, function(f) {
    c.calendar.removeNonStandardWeek(f);
  });
  Ext.Array.each(d, function(f) {
    c.calendar.addNonStandardWeek(f.getStartDate(), f.getEndDate(), f.getAvailability());
  });
  Ext.Array.each(e, function(f) {
    c.applyWeek(f[0], f[1]);
  });
}, applyDays:function() {
  var c = this, b = this.getDayGrid().getStore(), a = [], e = [], d = [];
  this.calendar.each(function(f) {
    var g = /^(\d)-(\d\d\d\d\/\d\d\/\d\d)-(\d\d\d\d\/\d\d\/\d\d)$/.exec(f.getId());
    if (g) {
      return;
    }
    b.getOverrideDay(f.getDate()) == null ? a.push(f) : e.push(f);
  });
  b.each(function(f) {
    if (c.calendar.getOverrideDay(f.getDate()) == null) {
      d.push(f);
    }
  });
  this.calendar.remove(a);
  this.calendar.add(d);
  Ext.Array.each(e, function(f) {
    var g = b.getOverrideDay(f.getDate());
    c.applyCalendarDay(g, f);
  });
}, cloneCalendarDay:function(a) {
  return Ext.create('Gnt.model.CalendarDay', {Date:a.getDate(), Id:a.getId(), Name:a.getName(), IsWorkingDay:a.getIsWorkingDay(), Availability:a.getAvailability()});
}, getDefaultWeekAvailability:function() {
  return this.calendar.defaultWeekAvailability;
}, onDestroy:function() {
  this.getWeekGrid().destroy();
  this.getDayGrid().destroy();
  this.getDatePicker().destroy();
  this.callParent(arguments);
}});
Ext.onReady(function() {
  if (window.location.href.match('bryntum.com|ext-scheduler.com')) {
    return;
  } else {
    if (Sch && Sch.view && Sch.view.TimelineGridView) {
      var b = false;
      Sch.view.TimelineGridView.override({refresh:function() {
        this.callOverridden(arguments);
        if (b || !this.rendered) {
          return;
        }
        b = true;
        Ext.Function.defer(function() {
          this.el.select(this.eventSelector).setOpacity(0.15);
        }, 10 * 60 * 1000, this);
        var c = this.el.parent().createChild({tag:'a', href:'http://www.bryntum.com/store', title:'Click here to purchase a license', style:'display:block;height:54px;width:230px;background: #fff url(http://www.bryntum.com/site-images/bryntum-trial.png) no-repeat;z-index:10000;border:1px solid #ddd;-webkit-box-shadow: 2px 2px 2px rgba(100, 100, 100, 0.5);-moz-box-shadow: 2px 2px 2px rgba(100, 100, 100, 0.5);-moz-border-radius:5px;-webkit-border-radius:5px;position:absolute;bottom:10px;right:15px;'});
        try {
          if (!Ext.util.Cookies.get('bmeval')) {
            Ext.util.Cookies.set('bmeval', (new Date()).getTime(), Ext.Date.add(new Date(), Ext.Date.YEAR, 2));
          } else {
            var g = Ext.util.Cookies.get('bmeval'), d = new Date(parseInt(g, 10));
            if (Ext.Date.add(d, Ext.Date.DAY, 45) < new Date()) {
              this.el.select(this.eventSelector).hide();
              this.el.mask('Trial Period Expired!').setStyle('z-index', 10000);
              this.refresh = Ext.emptyFn;
            }
          }
        } catch (f) {
        }
      }});
    }
    if (Sch && Sch.view && Sch.view.TimelineTreeView) {
      var a = false;
      Sch.view.TimelineTreeView.override({refresh:function() {
        this.callOverridden(arguments);
        if (a || !this.rendered) {
          return;
        }
        a = true;
        Ext.Function.defer(function() {
          this.el.select(this.eventSelector).setOpacity(0.15);
        }, 10 * 60 * 1000, this);
        var c = this.el.parent().createChild({tag:'a', href:'http://www.bryntum.com/store', title:'Click here to purchase a license', style:'display:block;height:54px;width:230px;background: #fff url(http://www.bryntum.com/site-images/bryntum-trial.png) no-repeat;z-index:10000;border:1px solid #ddd;-webkit-box-shadow: 2px 2px 2px rgba(100, 100, 100, 0.5);-moz-box-shadow: 2px 2px 2px rgba(100, 100, 100, 0.5);-moz-border-radius:5px;-webkit-border-radius:5px;position:absolute;bottom:10px;right:15px;'});
        Ext.Function.defer(c.fadeOut, 10000, c);
        try {
          if (!Ext.util.Cookies.get('bmeval')) {
            Ext.util.Cookies.set('bmeval', (new Date()).getTime(), Ext.Date.add(new Date(), Ext.Date.YEAR, 2));
          } else {
            var g = Ext.util.Cookies.get('bmeval'), d = new Date(parseInt(g, 10));
            if (Ext.Date.add(d, Ext.Date.DAY, 45) < new Date()) {
              this.el.select(this.eventSelector).hide();
              this.el.mask('Trial Period Expired!').setStyle('z-index', 10000);
              this.refresh = Ext.emptyFn;
            }
          }
        } catch (f) {
        }
      }});
    }
  }
});
Ext.data.Connection.override({parseStatus:function(b) {
  var a = this.callOverridden(arguments);
  if (b === 0) {
    a.success = true;
  }
  return a;
}});
Ext.onReady(function() {
  window._gaq = window._gaq || [];
  window._gaq.push(['_setAccount', 'UA-11046863-1']);
  window._gaq.push(['_setDomainName', 'none']);
  window._gaq.push(['_setAllowLinker', true]);
  window._gaq.push(['_trackPageview']);
  (function() {
    var b = document.createElement('script');
    b.type = 'text/javascript';
    b.async = true;
    b.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var a = document.getElementsByTagName('script')[0];
    a.parentNode.insertBefore(b, a);
  })();
  window.onerror = function(h, c, a) {
    if (!window.__reported && h && (a || c)) {
      window.__reported = true;
      try {
        var b = new Image();
        var g = Ext.versions && Ext.versions.extjs && Ext.versions.extjs.version;
        var f = Sch.VERSION || '-';
        b.src = Ext.String.format('http://bryntum.com/errlog.php?msg\x3d{0}\x26url\x3d{1}\x26line\x3d{2}\x26href\x3d{3}\x26extVersion\x3d{4}\x26prodVersion\x3d{5}\x26magic\x3d{6}', encodeURIComponent(h), encodeURIComponent(c), encodeURIComponent(a), encodeURIComponent(window.location.href), encodeURIComponent(g), encodeURIComponent(f), 'maFSiO6W');
      } catch (d) {
      }
    }
  };
});
Ext.define('Sch.util.Patch', {target:null, minVersion:null, maxVersion:null, reportUrl:null, description:null, applyFn:null, ieOnly:false, onClassExtended:function(a, b) {
  if (Sch.disableOverrides) {
    return;
  }
  if (b.ieOnly && !Ext.isIE) {
    return;
  }
  if (b.applyFn) {
    b.applyFn();
  } else {
    if ((!b.minVersion || Ext.versions.extjs.equals(b.minVersion) || Ext.versions.extjs.isGreaterThan(b.minVersion)) && (!b.maxVersion || Ext.versions.extjs.equals(b.maxVersion) || Ext.versions.extjs.isLessThan(b.maxVersion))) {
      b.requires[0].override(b.overrides);
    }
  }
}});
Ext.define('Sch.patches.LoadMask', {extend:'Sch.util.Patch', requires:['Ext.view.AbstractView'], minVersion:'4.1.0b3', reportURL:'http://www.sencha.com/forum/showthread.php?187700-4.1.0-B3-Ext.AbstractView-no-longer-binds-its-store-to-load-mask', description:'In Ext4.1 loadmask no longer bind the store', overrides:{}});
Ext.define('Sch.patches.Table', {extend:'Sch.util.Patch', requires:['Ext.view.Table'], minVersion:'4.1.1', maxVersion:'4.1.1', reportURL:'http://www.sencha.com/forum/showthread.php?238026-4.1.1-Alt-row-styling-lost-after-record-update\x26p\x3d874190#post874190', description:'In Ext4.1.1 when record is updated, the alternate row styling is lost', overrides:{onUpdate:function(c, a, b, e) {
  var d = this.store.indexOf(a);
  this.callParent(arguments);
  this.doStripeRows(d, d);
}}});
Ext.define('Sch.patches.TreeView', {extend:'Sch.util.Patch', requires:['Ext.tree.View'], applyFn:function() {
  Ext.tree.View.addMembers({providedStore:null, initComponent:function() {
    var a = this, b = a.panel.getStore();
    if (a.initialConfig.animate === undefined) {
      a.animate = Ext.enableFx;
    }
    a.store = a.providedStore || new Ext.data.NodeStore({treeStore:b, recursive:true, rootVisible:a.rootVisible});
    a.store.on({beforeexpand:a.onBeforeExpand, expand:a.onExpand, beforecollapse:a.onBeforeCollapse, collapse:a.onCollapse, write:a.onStoreWrite, datachanged:a.onStoreDataChanged, scope:a});
    if (a.node && !a.store.node) {
      a.setRootNode(a.node);
    }
    a.animQueue = {};
    a.animWraps = {};
    a.addEvents('afteritemexpand', 'afteritemcollapse');
    a.callParent(arguments);
    a.on({element:'el', scope:a, delegate:a.expanderSelector, mouseover:a.onExpanderMouseOver, mouseout:a.onExpanderMouseOut});
    a.on({element:'el', scope:a, delegate:a.checkboxSelector, click:a.onCheckboxChange});
  }});
}});
Ext.define('Sch.patches.DataOperation', {extend:'Sch.util.Patch', requires:['Ext.data.Operation'], reportURL:'http://www.sencha.com/forum/showthread.php?198894-4.1-Ext.data.TreeStore-CRUD-regression.', description:'In Ext 4.1.0 newly created records do not get the Id returned by server applied', maxVersion:'4.1.0', overrides:{commitRecords:function(j) {
  var g = this, h, f, a, c, b, d, e;
  if (!g.actionSkipSyncRe.test(g.action)) {
    a = g.records;
    if (a && a.length) {
      if (a.length > 1) {
        if (g.action == 'update' || a[0].clientIdProperty) {
          h = new Ext.util.MixedCollection();
          h.addAll(j);
          for (f = a.length; f--;) {
            b = a[f];
            c = h.findBy(g.matchClientRec, b);
            b.copyFrom(c);
          }
        } else {
          for (d = 0, e = a.length; d < e; ++d) {
            b = a[d];
            c = j[d];
            if (b && c) {
              g.updateRecord(b, c);
            }
          }
        }
      } else {
        this.updateRecord(a[0], j[0]);
      }
      if (g.actionCommitRecordsRe.test(g.action)) {
        for (f = a.length; f--;) {
          a[f].commit();
        }
      }
    }
  }
}, updateRecord:function(a, b) {
  if (b && (a.phantom || a.getId() === b.getId())) {
    a.copyFrom(b);
  }
}}});
Ext.define('Sch.patches.TreeStore', {extend:'Sch.util.Patch', requires:['Ext.data.TreeStore'], description:'http://www.sencha.com/forum/showthread.php?208602-Model-s-Id-field-not-defined-after-sync-in-TreeStore-%28CRUD%29', maxVersion:'4.1.0', overrides:{onCreateRecords:function(c) {
  this.callParent(arguments);
  var d = 0, b = c.length, a = this.tree, e;
  for (; d < b; ++d) {
    e = c[d];
    a.onNodeIdChanged(e, null, e.getId());
  }
}, setRootNode:function(a, e) {
  var d = this, c = d.model, b = c.prototype.idProperty;
  a = a || {};
  if (!a.isModel) {
    Ext.applyIf(a, {text:'Root', allowDrag:false});
    if (a[b] === undefined) {
      a[b] = d.defaultRootId;
    }
    Ext.data.NodeInterface.decorate(c);
    a = Ext.ModelManager.create(a, c);
  } else {
    if (a.isModel && !a.isNode) {
      Ext.data.NodeInterface.decorate(c);
    }
  }
  d.getProxy().getReader().buildExtractors(true);
  d.tree.setRootNode(a);
  if (e !== true && !a.isLoaded() && (d.autoLoad === true || a.isExpanded())) {
    d.load({node:a});
  }
  return a;
}}});
Ext.define('Sch.util.Date', {requires:'Ext.Date', singleton:true, unitsByName:{}, constructor:function() {
  var b = Ext.Date;
  var d = {MILLI:b.MILLI, SECOND:b.SECOND, MINUTE:b.MINUTE, HOUR:b.HOUR, DAY:b.DAY, WEEK:'w', MONTH:b.MONTH, QUARTER:'q', YEAR:b.YEAR};
  Ext.apply(this, d);
  var c = this;
  this.units = [c.MILLI, c.SECOND, c.MINUTE, c.HOUR, c.DAY, c.WEEK, c.MONTH, c.QUARTER, c.YEAR];
  for (var a in d) {
    if (d.hasOwnProperty(a)) {
      var e = d[a];
      c.unitNames[e] = c.unitNames[a];
      c.unitsByName[a] = e;
      c.unitsByName[e] = e;
    }
  }
}, betweenLesser:function(b, d, a) {
  var c = b.getTime();
  return d.getTime() <= c && c < a.getTime();
}, constrain:function(b, c, a) {
  return this.min(this.max(b, c), a);
}, compareUnits:function(c, b) {
  var a = Ext.Array.indexOf(this.units, c), d = Ext.Array.indexOf(this.units, b);
  return a > d ? 1 : a < d ? -1 : 0;
}, isUnitGreater:function(b, a) {
  return this.compareUnits(b, a) > 0;
}, copyTimeValues:function(b, a) {
  b.setHours(a.getHours());
  b.setMinutes(a.getMinutes());
  b.setSeconds(a.getSeconds());
  b.setMilliseconds(a.getMilliseconds());
}, add:function(b, c, e) {
  var f = Ext.Date.clone(b);
  if (!c || e === 0) {
    return f;
  }
  switch(c.toLowerCase()) {
    case this.MILLI:
      f = new Date(b.getTime() + e);
      break;
    case this.SECOND:
      f = new Date(b.getTime() + e * 1000);
      break;
    case this.MINUTE:
      f = new Date(b.getTime() + e * 60000);
      break;
    case this.HOUR:
      f = new Date(b.getTime() + e * 3600000);
      break;
    case this.DAY:
      f.setDate(b.getDate() + e);
      break;
    case this.WEEK:
      f.setDate(b.getDate() + e * 7);
      break;
    case this.MONTH:
      var a = b.getDate();
      if (a > 28) {
        a = Math.min(a, Ext.Date.getLastDateOfMonth(this.add(Ext.Date.getFirstDateOfMonth(b), this.MONTH, e)).getDate());
      }
      f.setDate(a);
      f.setMonth(f.getMonth() + e);
      break;
    case this.QUARTER:
      f = this.add(b, this.MONTH, e * 3);
      break;
    case this.YEAR:
      f.setFullYear(b.getFullYear() + e);
      break;
  }
  return f;
}, getMeasuringUnit:function(a) {
  if (a === this.WEEK) {
    return this.DAY;
  }
  return a;
}, getDurationInUnit:function(d, a, c) {
  var b;
  switch(c) {
    case this.YEAR:
      b = Math.round(this.getDurationInYears(d, a));
      break;
    case this.QUARTER:
      b = Math.round(this.getDurationInMonths(d, a) / 3);
      break;
    case this.MONTH:
      b = Math.round(this.getDurationInMonths(d, a));
      break;
    case this.WEEK:
      b = Math.round(this.getDurationInDays(d, a)) / 7;
      break;
    case this.DAY:
      b = Math.round(this.getDurationInDays(d, a));
      break;
    case this.HOUR:
      b = Math.round(this.getDurationInHours(d, a));
      break;
    case this.MINUTE:
      b = Math.round(this.getDurationInMinutes(d, a));
      break;
    case this.SECOND:
      b = Math.round(this.getDurationInSeconds(d, a));
      break;
    case this.MILLI:
      b = Math.round(this.getDurationInMilliseconds(d, a));
      break;
  }
  return b;
}, getUnitToBaseUnitRatio:function(b, a) {
  if (b === a) {
    return 1;
  }
  switch(b) {
    case this.YEAR:
      switch(a) {
        case this.QUARTER:
          return 1 / 4;
        case this.MONTH:
          return 1 / 12;
      }break;
    case this.QUARTER:
      switch(a) {
        case this.YEAR:
          return 4;
        case this.MONTH:
          return 1 / 3;
      }break;
    case this.MONTH:
      switch(a) {
        case this.YEAR:
          return 12;
        case this.QUARTER:
          return 3;
      }break;
    case this.WEEK:
      switch(a) {
        case this.DAY:
          return 1 / 7;
        case this.HOUR:
          return 1 / 168;
      }break;
    case this.DAY:
      switch(a) {
        case this.WEEK:
          return 7;
        case this.HOUR:
          return 1 / 24;
        case this.MINUTE:
          return 1 / 1440;
      }break;
    case this.HOUR:
      switch(a) {
        case this.DAY:
          return 24;
        case this.MINUTE:
          return 1 / 60;
      }break;
    case this.MINUTE:
      switch(a) {
        case this.HOUR:
          return 60;
        case this.SECOND:
          return 1 / 60;
        case this.MILLI:
          return 1 / 60000;
      }break;
    case this.SECOND:
      switch(a) {
        case this.MILLI:
          return 1 / 1000;
      }break;
    case this.MILLI:
      switch(a) {
        case this.SECOND:
          return 1000;
      }break;
  }
  return -1;
}, getDurationInMilliseconds:function(b, a) {
  return a - b;
}, getDurationInSeconds:function(b, a) {
  return (a - b) / 1000;
}, getDurationInMinutes:function(b, a) {
  return (a - b) / 60000;
}, getDurationInHours:function(b, a) {
  return (a - b) / 3600000;
}, getDurationInDays:function(b, a) {
  return (a - b) / 86400000;
}, getDurationInBusinessDays:function(g, b) {
  var c = Math.round((b - g) / 86400000), a = 0, f;
  for (var e = 0; e < c; e++) {
    f = this.add(g, this.DAY, e).getDay();
    if (f !== 6 && f !== 0) {
      a++;
    }
  }
  return a;
}, getDurationInMonths:function(b, a) {
  return (a.getFullYear() - b.getFullYear()) * 12 + (a.getMonth() - b.getMonth());
}, getDurationInYears:function(b, a) {
  return this.getDurationInMonths(b, a) / 12;
}, min:function(b, a) {
  return b < a ? b : a;
}, max:function(b, a) {
  return b > a ? b : a;
}, intersectSpans:function(c, d, b, a) {
  return this.betweenLesser(c, b, a) || this.betweenLesser(b, c, d);
}, getNameOfUnit:function(a) {
  a = this.getUnitByName(a);
  switch(a.toLowerCase()) {
    case this.YEAR:
      return 'YEAR';
    case this.QUARTER:
      return 'QUARTER';
    case this.MONTH:
      return 'MONTH';
    case this.WEEK:
      return 'WEEK';
    case this.DAY:
      return 'DAY';
    case this.HOUR:
      return 'HOUR';
    case this.MINUTE:
      return 'MINUTE';
    case this.SECOND:
      return 'SECOND';
    case this.MILLI:
      return 'MILLI';
  }
  throw 'Incorrect UnitName';
}, unitNames:{YEAR:{single:'year', plural:'years', abbrev:'yr'}, QUARTER:{single:'quarter', plural:'quarters', abbrev:'q'}, MONTH:{single:'month', plural:'months', abbrev:'mon'}, WEEK:{single:'week', plural:'weeks', abbrev:'w'}, DAY:{single:'day', plural:'days', abbrev:'d'}, HOUR:{single:'hour', plural:'hours', abbrev:'h'}, MINUTE:{single:'minute', plural:'minutes', abbrev:'min'}, SECOND:{single:'second', plural:'seconds', abbrev:'s'}, MILLI:{single:'ms', plural:'ms', abbrev:'ms'}}, getReadableNameOfUnit:function(b, 
a) {
  return this.unitNames[b][a ? 'plural' : 'single'];
}, getShortNameOfUnit:function(a) {
  return this.unitNames[a].abbrev;
}, getUnitByName:function(a) {
  if (!this.unitsByName[a]) {
    Ext.Error.raise('Unknown unit name: ' + a);
  }
  return this.unitsByName[a];
}, getNext:function(c, f, a, e) {
  var d = Ext.Date.clone(c);
  a = a || 1;
  switch(f) {
    case this.DAY:
      Ext.Date.clearTime(d);
      d = this.add(d, this.DAY, a);
      break;
    case this.WEEK:
      var b = d.getDay();
      d = this.add(d, this.DAY, 7 * (a - 1) + (b < e ? e - b : 7 - b + e));
      break;
    case this.MONTH:
      d = this.add(d, this.MONTH, a);
      d.setDate(1);
      break;
    case this.QUARTER:
      d = this.add(d, this.MONTH, (a - 1) * 3 + (3 - d.getMonth() % 3));
      break;
    case this.YEAR:
      d = new Date(d.getFullYear() + a, 0, 1);
      break;
    default:
      d = this.add(c, f, a);
      break;
  }
  return d;
}, getNumberOfMsFromTheStartOfDay:function(a) {
  return a - Ext.Date.clearTime(a, true) || 86400000;
}, getNumberOfMsTillTheEndOfDay:function(a) {
  return this.getStartOfNextDay(a, true) - a;
}, getStartOfNextDay:function(b, e) {
  var d = this.add(Ext.Date.clearTime(b, e), this.DAY, 1);
  if (d.getDate() == b.getDate()) {
    var c = this.add(Ext.Date.clearTime(b, e), this.DAY, 2).getTimezoneOffset();
    var a = b.getTimezoneOffset();
    d = this.add(d, this.MINUTE, a - c);
  }
  return d;
}, getEndOfPreviousDay:function(b) {
  var a = Ext.Date.clearTime(b, true);
  if (a - b) {
    return a;
  } else {
    return this.add(a, this.DAY, -1);
  }
}, timeSpanContains:function(c, b, d, a) {
  return d - c >= 0 && b - a >= 0;
}});
Ext.define('Sch.util.DragTracker', {extend:'Ext.dd.DragTracker', xStep:1, yStep:1, setXStep:function(a) {
  this.xStep = a;
}, setYStep:function(a) {
  this.yStep = a;
}, getRegion:function() {
  var e = this.startXY, d = this.getXY(), b = Math.min(e[0], d[0]), f = Math.min(e[1], d[1]), c = Math.abs(e[0] - d[0]), a = Math.abs(e[1] - d[1]);
  return new Ext.util.Region(f, b + c, f + a, b);
}, onMouseDown:function(f, d) {
  if (this.disabled || f.dragTracked) {
    return;
  }
  var c = f.getXY(), g, b, a = c[0], h = c[1];
  if (this.xStep > 1) {
    g = this.el.getX();
    a -= g;
    a = Math.round(a / this.xStep) * this.xStep;
    a += g;
  }
  if (this.yStep > 1) {
    b = this.el.getY();
    h -= b;
    h = Math.round(h / this.yStep) * this.yStep;
    h += b;
  }
  this.dragTarget = this.delegate ? d : this.handle.dom;
  this.startXY = this.lastXY = [a, h];
  this.startRegion = Ext.fly(this.dragTarget).getRegion();
  if (this.fireEvent('mousedown', this, f) === false || this.fireEvent('beforedragstart', this, f) === false || this.onBeforeStart(f) === false) {
    return;
  }
  this.mouseIsDown = true;
  f.dragTracked = true;
  if (this.preventDefault !== false) {
    f.preventDefault();
  }
  Ext.getDoc().on({scope:this, mouseup:this.onMouseUp, mousemove:this.onMouseMove, selectstart:this.stopSelect});
  if (this.autoStart) {
    this.timer = Ext.defer(this.triggerStart, this.autoStart === true ? 1000 : this.autoStart, this, [f]);
  }
}, onMouseMove:function(g, f) {
  if (this.active && Ext.isIE && !g.browserEvent.button) {
    g.preventDefault();
    this.onMouseUp(g);
    return;
  }
  g.preventDefault();
  var d = g.getXY(), b = this.startXY;
  if (!this.active) {
    if (Math.max(Math.abs(b[0] - d[0]), Math.abs(b[1] - d[1])) > this.tolerance) {
      this.triggerStart(g);
    } else {
      return;
    }
  }
  var a = d[0], h = d[1];
  if (this.xStep > 1) {
    a -= this.startXY[0];
    a = Math.round(a / this.xStep) * this.xStep;
    a += this.startXY[0];
  }
  if (this.yStep > 1) {
    h -= this.startXY[1];
    h = Math.round(h / this.yStep) * this.yStep;
    h += this.startXY[1];
  }
  var c = this.xStep > 1 || this.yStep > 1;
  if (!c || a !== d[0] || h !== d[1]) {
    this.lastXY = [a, h];
    if (this.fireEvent('mousemove', this, g) === false) {
      this.onMouseUp(g);
    } else {
      this.onDrag(g);
      this.fireEvent('drag', this, g);
    }
  }
}});
Ext.define('Sch.util.HeaderRenderers', {singleton:true, requires:['Sch.util.Date', 'Ext.XTemplate'], constructor:function() {
  var b = Ext.create('Ext.XTemplate', '\x3ctable class\x3d"sch-nested-hdr-tbl ' + Ext.baseCSSPrefix + 'column-header-text" cellpadding\x3d"0" cellspacing\x3d"0"\x3e\x3ctr\x3e\x3ctpl for\x3d"."\x3e\x3ctd style\x3d"width:{[100/xcount]}%" class\x3d"{cls} sch-dayheadercell-{dayOfWeek}"\x3e{text}\x3c/td\x3e\x3c/tpl\x3e\x3c/tr\x3e\x3c/table\x3e').compile();
  var a = Ext.create('Ext.XTemplate', '\x3ctable class\x3d"sch-nested-hdr-tbl" cellpadding\x3d"0" cellspacing\x3d"0"\x3e\x3ctr\x3e\x3ctpl for\x3d"."\x3e\x3ctd style\x3d"width:{[100/xcount]}%" class\x3d"{cls}"\x3e{text}\x3c/td\x3e\x3c/tpl\x3e\x3c/tr\x3e\x3c/table\x3e').compile();
  return {quarterMinute:function(f, d, c, e) {
    c.headerCls = 'sch-nested-hdr-pad';
    return '\x3ctable class\x3d"sch-nested-hdr-tbl" cellpadding\x3d"0" cellspacing\x3d"0"\x3e\x3ctr\x3e\x3ctd\x3e00\x3c/td\x3e\x3ctd\x3e15\x3c/td\x3e\x3ctd\x3e30\x3c/td\x3e\x3ctd\x3e45\x3c/td\x3e\x3c/tr\x3e\x3c/table\x3e';
  }, dateCells:function(d, c, e) {
    return function(j, g, f) {
      f.headerCls = 'sch-nested-hdr-nopad';
      var i = [], h = Ext.Date.clone(j);
      while (h < g) {
        i.push({text:Ext.Date.format(h, e)});
        h = Sch.util.Date.add(h, d, c);
      }
      i[0].cls = 'sch-nested-hdr-cell-first';
      i[i.length - 1].cls = 'sch-nested-hdr-cell-last';
      return a.apply(i);
    };
  }, dateNumber:function(g, d, c) {
    c.headerCls = 'sch-nested-hdr-nopad';
    var f = [], e = Ext.Date.clone(g);
    while (e < d) {
      f.push({dayOfWeek:e.getDay(), text:e.getDate()});
      e = Sch.util.Date.add(e, Sch.util.Date.DAY, 1);
    }
    return b.apply(f);
  }, dayLetter:function(g, d, c) {
    c.headerCls = 'sch-nested-hdr-nopad';
    var f = [], e = g;
    while (e < d) {
      f.push({dayOfWeek:e.getDay(), text:Ext.Date.dayNames[e.getDay()].substr(0, 1)});
      e = Sch.util.Date.add(e, Sch.util.Date.DAY, 1);
    }
    f[0].cls = 'sch-nested-hdr-cell-first';
    f[f.length - 1].cls = 'sch-nested-hdr-cell-last';
    return b.apply(f);
  }, dayStartEndHours:function(e, d, c) {
    c.headerCls = 'sch-hdr-startend';
    return Ext.String.format('\x3cspan class\x3d"sch-hdr-start"\x3e{0}\x3c/span\x3e\x3cspan class\x3d"sch-hdr-end"\x3e{1}\x3c/span\x3e', Ext.Date.format(e, 'G'), Ext.Date.format(d, 'G'));
  }};
}});
Ext.define('Sch.model.Customizable', {extend:'Ext.data.Model', customizableFields:null, onClassExtended:function(b, d, a) {
  var c = a.onBeforeCreated;
  a.onBeforeCreated = function(f, k) {
    c.call(this, f, k);
    var j = f.prototype;
    if (!j.customizableFields) {
      return;
    }
    j.customizableFields = (f.superclass.customizableFields || []).concat(j.customizableFields);
    var g = j.customizableFields;
    var i = {};
    Ext.Array.each(g, function(l) {
      if (typeof l == 'string') {
        l = {name:l};
      }
      i[l.name] = l;
    });
    var e = j.fields;
    var h = [];
    e.each(function(l) {
      if (l.isCustomizableField) {
        h.push(l);
      }
    });
    e.removeAll(h);
    Ext.Object.each(i, function(l, o) {
      o.isCustomizableField = true;
      var p = o.name;
      var t = p === 'Id' ? 'idProperty' : p.charAt(0).toLowerCase() + p.substr(1) + 'Field';
      var q = j[t];
      var s = q || p;
      if (e.containsKey(s)) {
        e.getByKey(s).isCustomizableField = true;
        g.push(new Ext.data.Field(Ext.applyIf({name:p, isCustomizableField:true}, e.getByKey(s))));
      } else {
        e.add(new Ext.data.Field(Ext.applyIf({name:s, isCustomizableField:true}, o)));
      }
      var n = Ext.String.capitalize(p);
      if (n != 'Id') {
        var r = 'get' + n;
        var m = 'set' + n;
        if (!j[r] || j[r].__getterFor__ && j[r].__getterFor__ != s) {
          j[r] = function() {
            return this.data[s];
          };
          j[r].__getterFor__ = s;
        }
        if (!j[m] || j[m].__setterFor__ && j[m].__setterFor__ != s) {
          j[m] = function(u) {
            return this.set(s, u);
          };
          j[m].__setterFor__ = s;
        }
      }
    });
  };
}, set:function(c, b) {
  if (arguments.length === 2) {
    this.previous = this.previous || {};
    var a = this.get(c);
    if (a !== b) {
      this.previous[c] = a;
    }
  }
  this.callParent(arguments);
}, afterEdit:function() {
  this.callParent(arguments);
  delete this.previous;
}, reject:function() {
  var b = this, a = b.modified, c;
  b.previous = b.previous || {};
  for (c in a) {
    if (a.hasOwnProperty(c)) {
      if (typeof a[c] != 'function') {
        b.previous[c] = b.get(c);
      }
    }
  }
  b.callParent(arguments);
  delete b.previous;
}});
Ext.define('Sch.patches.Model', {extend:'Sch.util.Patch', requires:'Sch.model.Customizable', reportURL:'http://www.sencha.com/forum/showthread.php?198250-4.1-Ext.data.Model-regression', description:'In Ext 4.1 Models cannot be subclassed', maxVersion:'4.1.0', applyFn:function() {
  try {
    Ext.define('Sch.foo', {extend:'Ext.data.Model', fields:['a']});
    Ext.define('Sch.foo.Sub', {extend:'Sch.foo', fields:['a']});
  } catch (a) {
    Ext.data.Types.AUTO.convert = function(b) {
      return b;
    };
  }
}});
Ext.define('Sch.model.Range', {extend:'Sch.model.Customizable', requires:['Sch.util.Date', 'Sch.patches.DataOperation'], startDateField:'StartDate', endDateField:'EndDate', nameField:'Name', clsField:'Cls', customizableFields:[{name:'StartDate', type:'date', dateFormat:'c'}, {name:'EndDate', type:'date', dateFormat:'c'}, {name:'Cls', type:'string'}, {name:'Name', type:'string'}], setStartEndDate:function(b, a) {
  this.beginEdit();
  this.set(this.startDateField, b);
  this.set(this.endDateField, a);
  this.endEdit();
}, getDates:function() {
  var c = [], b = this.getEndDate();
  for (var a = Ext.Date.clearTime(this.getStartDate(), true); a < b; a = Sch.util.Date.add(a, Sch.util.Date.DAY, 1)) {
    c.push(a);
  }
  return c;
}, forEachDate:function(b, a) {
  return Ext.each(this.getDates(), b, a);
}, isValid:function() {
  var b = this.callParent(arguments);
  if (b) {
    var c = this.getStartDate(), a = this.getEndDate();
    b = !c || !a || a - c >= 0;
  }
  return b;
}, shift:function(b, a) {
  this.setStartEndDate(Sch.util.Date.add(this.getStartDate(), b, a), Sch.util.Date.add(this.getEndDate(), b, a));
}});
Ext.define('Sch.model.Resource', {extend:'Sch.model.Customizable', idProperty:'Id', nameField:'Name', customizableFields:['Id', {name:'Name', type:'string'}], getEventStore:function() {
  return this.stores[0] && this.stores[0].eventStore || this.parentNode && this.parentNode.getEventStore();
}, getEvents:function(d) {
  var c = [], e, f = this.getId() || this.internalId;
  d = d || this.getEventStore();
  for (var b = 0, a = d.getCount(); b < a; b++) {
    e = d.getAt(b);
    if (e.data[e.resourceIdField] === f) {
      c.push(e);
    }
  }
  return c;
}});
Ext.define('Sch.data.mixin.ResourceStore', {});
Ext.define('Sch.data.ResourceStore', {extend:'Ext.data.Store', model:'Sch.model.Resource', mixins:['Sch.data.mixin.ResourceStore']});
Ext.define('Sch.data.TimeAxis', {extend:'Ext.util.Observable', requires:['Ext.data.JsonStore', 'Sch.util.Date'], continuous:true, autoAdjust:true, constructor:function(a) {
  Ext.apply(this, a);
  this.originalContinuous = this.continuous;
  this.addEvents('beforereconfigure', 'reconfigure');
  this.tickStore = new Ext.data.JsonStore({fields:['start', 'end']});
  this.tickStore.on('datachanged', function() {
    this.fireEvent('reconfigure', this);
  }, this);
  this.callParent(arguments);
}, reconfigure:function(a) {
  Ext.apply(this, a);
  var c = this.tickStore, b = this.generateTicks(this.start, this.end, this.unit, this.increment || 1, this.mainUnit);
  if (this.fireEvent('beforereconfigure', this, this.start, this.end) !== false) {
    c.suspendEvents(true);
    c.loadData(b);
    if (c.getCount() === 0) {
      Ext.Error.raise('Invalid time axis configuration or filter, please check your input data.');
    }
    c.resumeEvents();
  }
}, setTimeSpan:function(b, a) {
  this.reconfigure({start:b, end:a});
}, filterBy:function(b, a) {
  this.continuous = false;
  a = a || this;
  var c = this.tickStore;
  c.clearFilter(true);
  c.suspendEvents(true);
  c.filter([{filterFn:function(e, d) {
    return b.call(a, e.data, d);
  }}]);
  if (c.getCount() === 0) {
    Ext.Error.raise('Invalid time axis filter - no columns passed through the filter. Please check your filter method.');
    this.clearFilter();
  }
  c.resumeEvents();
}, isContinuous:function() {
  return this.continuous && !this.tickStore.isFiltered();
}, clearFilter:function() {
  this.continuous = this.originalContinuous;
  this.tickStore.clearFilter();
}, generateTicks:function(a, d, g, i) {
  var h = [], f, b = Sch.util.Date, e = 0;
  g = g || this.unit;
  i = i || this.increment;
  if (this.autoAdjust) {
    a = this.floorDate(a || this.getStart(), false);
    d = this.ceilDate(d || b.add(a, this.mainUnit, this.defaultSpan), false);
  }
  while (a < d) {
    f = this.getNext(a, g, i);
    if (g === b.HOUR && i > 1 && h.length > 0 && e === 0) {
      var c = h[h.length - 1];
      e = (c.start.getHours() + i) % 24 - c.end.getHours();
      if (e !== 0) {
        f = b.add(f, b.HOUR, e);
      }
    }
    h.push({start:a, end:f});
    a = f;
  }
  return h;
}, getTickFromDate:function(c) {
  if (this.getStart() > c || this.getEnd() < c) {
    return -1;
  }
  var f = this.tickStore.getRange(), e, a, d, b;
  for (d = 0, b = f.length; d < b; d++) {
    a = f[d].data.end;
    if (c <= a) {
      e = f[d].data.start;
      return d + (c > e ? (c - e) / (a - e) : 0);
    }
  }
  return -1;
}, getDateFromTick:function(d, f) {
  var g = this.tickStore.getCount();
  if (d === g) {
    return this.getEnd();
  }
  var a = Math.floor(d), e = d - a, c = this.getAt(a);
  var b = Sch.util.Date.add(c.start, Sch.util.Date.MILLI, e * (c.end - c.start));
  if (f) {
    b = this[f + 'Date'](b);
  }
  return b;
}, getAt:function(a) {
  return this.tickStore.getAt(a).data;
}, getCount:function() {
  return this.tickStore.getCount();
}, getTicks:function() {
  var a = [];
  this.tickStore.each(function(b) {
    a.push(b.data);
  });
  return a;
}, getStart:function() {
  return Ext.Date.clone(this.tickStore.first().data.start);
}, getEnd:function() {
  return Ext.Date.clone(this.tickStore.last().data.end);
}, roundDate:function(r) {
  var l = Ext.Date.clone(r), b = this.getStart(), s = this.resolutionIncrement;
  switch(this.resolutionUnit) {
    case Sch.util.Date.MILLI:
      var e = Sch.util.Date.getDurationInMilliseconds(b, l), d = Math.round(e / s) * s;
      l = Sch.util.Date.add(b, Sch.util.Date.MILLI, d);
      break;
    case Sch.util.Date.SECOND:
      var i = Sch.util.Date.getDurationInSeconds(b, l), q = Math.round(i / s) * s;
      l = Sch.util.Date.add(b, Sch.util.Date.MILLI, q * 1000);
      break;
    case Sch.util.Date.MINUTE:
      var n = Sch.util.Date.getDurationInMinutes(b, l), a = Math.round(n / s) * s;
      l = Sch.util.Date.add(b, Sch.util.Date.SECOND, a * 60);
      break;
    case Sch.util.Date.HOUR:
      var m = Sch.util.Date.getDurationInHours(this.getStart(), l), j = Math.round(m / s) * s;
      l = Sch.util.Date.add(b, Sch.util.Date.MINUTE, j * 60);
      break;
    case Sch.util.Date.DAY:
      var c = Sch.util.Date.getDurationInDays(b, l), f = Math.round(c / s) * s;
      l = Sch.util.Date.add(b, Sch.util.Date.DAY, f);
      break;
    case Sch.util.Date.WEEK:
      Ext.Date.clearTime(l);
      var o = l.getDay() - this.weekStartDay, t;
      if (o < 0) {
        o = 7 + o;
      }
      if (Math.round(o / 7) === 1) {
        t = 7 - o;
      } else {
        t = -o;
      }
      l = Sch.util.Date.add(l, Sch.util.Date.DAY, t);
      break;
    case Sch.util.Date.MONTH:
      var p = Sch.util.Date.getDurationInMonths(b, l) + l.getDate() / Ext.Date.getDaysInMonth(l), h = Math.round(p / s) * s;
      l = Sch.util.Date.add(b, Sch.util.Date.MONTH, h);
      break;
    case Sch.util.Date.QUARTER:
      Ext.Date.clearTime(l);
      l.setDate(1);
      l = Sch.util.Date.add(l, Sch.util.Date.MONTH, 3 - l.getMonth() % 3);
      break;
    case Sch.util.Date.YEAR:
      var k = Sch.util.Date.getDurationInYears(b, l), g = Math.round(k / s) * s;
      l = Sch.util.Date.add(b, Sch.util.Date.YEAR, g);
      break;
  }
  return l;
}, floorDate:function(t, d, v) {
  d = d !== false;
  var n = Ext.Date.clone(t), b = d ? this.getStart() : null, u = this.resolutionIncrement, k;
  if (v) {
    k = v;
  } else {
    k = d ? this.resolutionUnit : this.mainUnit;
  }
  switch(k) {
    case Sch.util.Date.MILLI:
      if (d) {
        var f = Sch.util.Date.getDurationInMilliseconds(b, n), e = Math.floor(f / u) * u;
        n = Sch.util.Date.add(b, Sch.util.Date.MILLI, e);
      }
      break;
    case Sch.util.Date.SECOND:
      if (d) {
        var j = Sch.util.Date.getDurationInSeconds(b, n), s = Math.floor(j / u) * u;
        n = Sch.util.Date.add(b, Sch.util.Date.MILLI, s * 1000);
      } else {
        n.setMilliseconds(0);
      }
      break;
    case Sch.util.Date.MINUTE:
      if (d) {
        var p = Sch.util.Date.getDurationInMinutes(b, n), a = Math.floor(p / u) * u;
        n = Sch.util.Date.add(b, Sch.util.Date.SECOND, a * 60);
      } else {
        n.setSeconds(0);
        n.setMilliseconds(0);
      }
      break;
    case Sch.util.Date.HOUR:
      if (d) {
        var o = Sch.util.Date.getDurationInHours(this.getStart(), n), l = Math.floor(o / u) * u;
        n = Sch.util.Date.add(b, Sch.util.Date.MINUTE, l * 60);
      } else {
        n.setMinutes(0);
        n.setSeconds(0);
        n.setMilliseconds(0);
      }
      break;
    case Sch.util.Date.DAY:
      if (d) {
        var c = Sch.util.Date.getDurationInDays(b, n), g = Math.floor(c / u) * u;
        n = Sch.util.Date.add(b, Sch.util.Date.DAY, g);
      } else {
        Ext.Date.clearTime(n);
      }
      break;
    case Sch.util.Date.WEEK:
      var r = n.getDay();
      Ext.Date.clearTime(n);
      if (r !== this.weekStartDay) {
        n = Sch.util.Date.add(n, Sch.util.Date.DAY, -(r > this.weekStartDay ? r - this.weekStartDay : 7 - r - this.weekStartDay));
      }
      break;
    case Sch.util.Date.MONTH:
      if (d) {
        var q = Sch.util.Date.getDurationInMonths(b, n), i = Math.floor(q / u) * u;
        n = Sch.util.Date.add(b, Sch.util.Date.MONTH, i);
      } else {
        Ext.Date.clearTime(n);
        n.setDate(1);
      }
      break;
    case Sch.util.Date.QUARTER:
      Ext.Date.clearTime(n);
      n.setDate(1);
      n = Sch.util.Date.add(n, Sch.util.Date.MONTH, -(n.getMonth() % 3));
      break;
    case Sch.util.Date.YEAR:
      if (d) {
        var m = Sch.util.Date.getDurationInYears(b, n), h = Math.floor(m / u) * u;
        n = Sch.util.Date.add(b, Sch.util.Date.YEAR, h);
      } else {
        n = new Date(t.getFullYear(), 0, 1);
      }
      break;
  }
  return n;
}, ceilDate:function(c, b, f) {
  var e = Ext.Date.clone(c);
  b = b !== false;
  var a = b ? this.resolutionIncrement : 1, g = false, d;
  if (f) {
    d = f;
  } else {
    d = b ? this.resolutionUnit : this.mainUnit;
  }
  switch(d) {
    case Sch.util.Date.DAY:
      if (e.getMinutes() > 0 || e.getSeconds() > 0 || e.getMilliseconds() > 0) {
        g = true;
      }
      break;
    case Sch.util.Date.WEEK:
      Ext.Date.clearTime(e);
      if (e.getDay() !== this.weekStartDay) {
        g = true;
      }
      break;
    case Sch.util.Date.MONTH:
      Ext.Date.clearTime(e);
      if (e.getDate() !== 1) {
        g = true;
      }
      break;
    case Sch.util.Date.QUARTER:
      Ext.Date.clearTime(e);
      if (e.getMonth() % 3 !== 0) {
        g = true;
      }
      break;
    case Sch.util.Date.YEAR:
      Ext.Date.clearTime(e);
      if (e.getMonth() !== 0 && e.getDate() !== 1) {
        g = true;
      }
      break;
    default:
      break;
  }
  if (g) {
    return this.getNext(e, d, a);
  } else {
    return e;
  }
}, getNext:function(b, c, a) {
  return Sch.util.Date.getNext(b, c, a, this.weekStartDay);
}, getResolution:function() {
  return {unit:this.resolutionUnit, increment:this.resolutionIncrement};
}, setResolution:function(b, a) {
  this.resolutionUnit = b;
  this.resolutionIncrement = a || 1;
}, shiftNext:function(a) {
  a = a || this.getShiftIncrement();
  var b = this.getShiftUnit();
  this.setTimeSpan(Sch.util.Date.add(this.getStart(), b, a), Sch.util.Date.add(this.getEnd(), b, a));
}, shiftPrevious:function(a) {
  a = -(a || this.getShiftIncrement());
  var b = this.getShiftUnit();
  this.setTimeSpan(Sch.util.Date.add(this.getStart(), b, a), Sch.util.Date.add(this.getEnd(), b, a));
}, getShiftUnit:function() {
  return this.shiftUnit || this.getMainUnit();
}, getShiftIncrement:function() {
  return this.shiftIncrement || 1;
}, getUnit:function() {
  return this.unit;
}, getIncrement:function() {
  return this.increment;
}, timeSpanInAxis:function(b, a) {
  if (this.continuous) {
    return Sch.util.Date.intersectSpans(b, a, this.getStart(), this.getEnd());
  } else {
    return a > b && this.getTickFromDate(b) !== this.getTickFromDate(a);
  }
}, forEachInterval:function(b, a, c) {
  c = c || this;
  if (b === 'top' || b === 'middle' && this.headerConfig.bottom) {
    this.forEachAuxInterval(b, a, c);
  } else {
    this.tickStore.each(function(e, d) {
      return a.call(c, e.data.start, e.data.end, d);
    });
  }
}, forEachMainInterval:function(a, b) {
  this.forEachInterval('middle', a, b);
}, forEachAuxInterval:function(b, a, f) {
  f = f || this;
  var c = this.getEnd(), g = this.getStart(), e = 0, d;
  while (g < c) {
    d = Sch.util.Date.min(this.getNext(g, this.headerConfig[b].unit, this.headerConfig[b].increment || 1), c);
    a.call(f, g, d, e);
    g = d;
    e++;
  }
}});
Ext.define('Sch.preset.Manager', {extend:'Ext.util.MixedCollection', requires:['Sch.util.Date', 'Sch.util.HeaderRenderers'], singleton:true, constructor:function() {
  this.callParent(arguments);
  this.registerDefaults();
}, registerPreset:function(b, a) {
  if (a) {
    var c = a.headerConfig;
    var d = Sch.util.Date;
    for (var e in c) {
      if (c.hasOwnProperty(e)) {
        if (d[c[e].unit]) {
          c[e].unit = d[c[e].unit.toUpperCase()];
        }
      }
    }
    if (!a.timeColumnWidth) {
      a.timeColumnWidth = 50;
    }
    if (a.timeResolution && d[a.timeResolution.unit]) {
      a.timeResolution.unit = d[a.timeResolution.unit.toUpperCase()];
    }
    if (a.shiftUnit && d[a.shiftUnit]) {
      a.shiftUnit = d[a.shiftUnit.toUpperCase()];
    }
  }
  if (this.isValidPreset(a)) {
    if (this.containsKey(b)) {
      this.removeAtKey(b);
    }
    this.add(b, a);
  } else {
    throw 'Invalid preset, please check your configuration';
  }
}, isValidPreset:function(a) {
  var d = Sch.util.Date, b = true, c = Sch.util.Date.units;
  for (var e in a.headerConfig) {
    if (a.headerConfig.hasOwnProperty(e)) {
      b = b && Ext.Array.indexOf(c, a.headerConfig[e].unit) >= 0;
    }
  }
  if (a.timeResolution) {
    b = b && Ext.Array.indexOf(c, a.timeResolution.unit) >= 0;
  }
  if (a.shiftUnit) {
    b = b && Ext.Array.indexOf(c, a.shiftUnit) >= 0;
  }
  return b;
}, getPreset:function(a) {
  return this.get(a);
}, deletePreset:function(a) {
  this.removeAtKey(a);
}, registerDefaults:function() {
  var b = this, a = this.defaultPresets;
  for (var c in a) {
    b.registerPreset(c, a[c]);
  }
}, defaultPresets:{minuteAndHour:{timeColumnWidth:100, rowHeight:24, resourceColumnWidth:100, displayDateFormat:'G:i', shiftIncrement:1, shiftUnit:'HOUR', defaultSpan:24, timeResolution:{unit:'MINUTE', increment:30}, headerConfig:{middle:{unit:'MINUTE', increment:'30', dateFormat:'i'}, top:{unit:'HOUR', dateFormat:'D, GA/m'}}}, hourAndDay:{timeColumnWidth:60, rowHeight:24, resourceColumnWidth:100, displayDateFormat:'G:i', shiftIncrement:1, shiftUnit:'DAY', defaultSpan:24, timeResolution:{unit:'MINUTE', 
increment:30}, headerConfig:{middle:{unit:'HOUR', dateFormat:'G:i'}, top:{unit:'DAY', dateFormat:'D d/m'}}}, dayAndWeek:{timeColumnWidth:100, rowHeight:24, resourceColumnWidth:100, displayDateFormat:'Y-m-d G:i', shiftUnit:'DAY', shiftIncrement:1, defaultSpan:5, timeResolution:{unit:'HOUR', increment:1}, headerConfig:{middle:{unit:'DAY', dateFormat:'D d M'}, top:{unit:'WEEK', dateFormat:'W M Y', renderer:function(c, b, a) {
  return Sch.util.Date.getShortNameOfUnit('WEEK') + '.' + Ext.Date.format(c, 'W M Y');
}}}}, weekAndDay:{timeColumnWidth:100, rowHeight:24, resourceColumnWidth:100, displayDateFormat:'G:i', shiftIncrement:1, shiftUnit:'HOUR', defaultSpan:24, timeResolution:{unit:'MINUTE', increment:30}, headerConfig:{middle:{unit:'MINUTE', increment:'30', dateFormat:'i'}, top:{unit:'HOUR', dateFormat:'D, GA/m'}}}, hourAndDay:{timeColumnWidth:60, rowHeight:24, resourceColumnWidth:100, displayDateFormat:'G:i', shiftIncrement:1, shiftUnit:'DAY', defaultSpan:24, timeResolution:{unit:'MINUTE', increment:30}, 
headerConfig:{middle:{unit:'HOUR', dateFormat:'G:i'}, top:{unit:'DAY', dateFormat:'D d/m'}}}, dayAndWeek:{timeColumnWidth:100, rowHeight:24, resourceColumnWidth:100, displayDateFormat:'Y-m-d G:i', shiftUnit:'DAY', shiftIncrement:1, defaultSpan:5, timeResolution:{unit:'HOUR', increment:1}, headerConfig:{middle:{unit:'DAY', dateFormat:'D d M'}, top:{unit:'WEEK', dateFormat:'W M Y', renderer:function(c, b, a) {
  return Sch.util.Date.getShortNameOfUnit('WEEK') + '.' + Ext.Date.format(c, 'W M Y');
}}}}, weekAndDay:{timeColumnWidth:100, rowHeight:24, resourceColumnWidth:100, displayDateFormat:'Y-m-d', shiftUnit:'WEEK', shiftIncrement:1, defaultSpan:1, timeResolution:{unit:'DAY', increment:1}, headerConfig:{bottom:{unit:'DAY', increment:1, dateFormat:'d/m'}, middle:{unit:'WEEK', dateFormat:'D d M', align:'left'}}}, weekAndMonth:{timeColumnWidth:100, rowHeight:24, resourceColumnWidth:100, displayDateFormat:'Y-m-d', shiftUnit:'WEEK', shiftIncrement:5, defaultSpan:6, timeResolution:{unit:'DAY', 
increment:1}, headerConfig:{middle:{unit:'WEEK', renderer:function(c, b, a) {
  a.align = 'left';
  return Ext.Date.format(c, 'd M');
}}, top:{unit:'MONTH', dateFormat:'M Y'}}}, monthAndYear:{timeColumnWidth:110, rowHeight:24, resourceColumnWidth:100, displayDateFormat:'Y-m-d', shiftIncrement:3, shiftUnit:'MONTH', defaultSpan:12, timeResolution:{unit:'DAY', increment:1}, headerConfig:{middle:{unit:'MONTH', dateFormat:'M Y'}, top:{unit:'YEAR', dateFormat:'Y'}}}, year:{timeColumnWidth:100, rowHeight:24, resourceColumnWidth:100, displayDateFormat:'Y-m-d', shiftUnit:'YEAR', shiftIncrement:1, defaultSpan:1, timeResolution:{unit:'MONTH', 
increment:1}, headerConfig:{bottom:{unit:'QUARTER', renderer:function(c, b, a) {
  return Ext.String.format(Sch.util.Date.getShortNameOfUnit('QUARTER').toUpperCase() + '{0}', Math.floor(c.getMonth() / 3) + 1);
}}, middle:{unit:'YEAR', dateFormat:'Y'}}}, weekAndDayLetter:{timeColumnWidth:20, rowHeight:24, resourceColumnWidth:100, displayDateFormat:'Y-m-d', shiftUnit:'WEEK', shiftIncrement:1, defaultSpan:10, timeResolution:{unit:'DAY', increment:1}, headerConfig:{bottom:{unit:'DAY', increment:1, renderer:function(a) {
  return Ext.Date.dayNames[a.getDay()].substring(0, 1);
}}, middle:{unit:'WEEK', dateFormat:'D d M Y', align:'left'}}}, weekDateAndMonth:{timeColumnWidth:30, rowHeight:24, resourceColumnWidth:100, displayDateFormat:'Y-m-d', shiftUnit:'WEEK', shiftIncrement:1, defaultSpan:10, timeResolution:{unit:'DAY', increment:1}, headerConfig:{middle:{unit:'WEEK', dateFormat:'d'}, top:{unit:'MONTH', dateFormat:'Y F', align:'left'}}}}});
Ext.define('Sch.feature.AbstractTimeSpan', {extend:'Ext.AbstractPlugin', lockableScope:'normal', schedulerView:null, timeAxis:null, containerEl:null, expandToFitView:false, disabled:false, cls:null, template:null, store:null, renderElementsBuffered:false, renderDelay:15, constructor:function(a) {
  this.uniqueCls = this.uniqueCls || 'sch-timespangroup-' + Ext.id();
  Ext.apply(this, a);
}, setDisabled:function(a) {
  if (a) {
    this.removeElements();
  }
  this.disabled = a;
}, getElements:function() {
  if (this.containerEl) {
    return this.containerEl.select('.' + this.uniqueCls);
  }
  return null;
}, removeElements:function() {
  var a = this.getElements();
  if (a) {
    a.remove();
  }
}, init:function(a) {
  this.timeAxis = a.getTimeAxis();
  this.schedulerView = a.getSchedulingView();
  if (!this.store) {
    Ext.Error.raise('Error: You must define a store for this plugin');
  }
  this.schedulerView.on({afterrender:this.onAfterRender, destroy:this.onDestroy, scope:this});
}, onAfterRender:function(b) {
  var a = this.schedulerView;
  this.containerEl = a.el;
  a.mon(this.store, {load:this.renderElements, datachanged:this.renderElements, clear:this.renderElements, add:this.renderElements, remove:this.renderElements, update:this.refreshSingle, scope:this});
  if (Ext.data.NodeStore && a.store instanceof Ext.data.NodeStore) {
    if (a.animate) {
    } else {
      a.mon(a.store, {expand:this.renderElements, collapse:this.renderElements, scope:this});
    }
  }
  a.on({refresh:this.renderElements, itemadd:this.renderElements, itemremove:this.renderElements, itemupdate:this.renderElements, groupexpand:this.renderElements, groupcollapse:this.renderElements, columnwidthchange:this.renderElements, resize:this.renderElements, scope:this});
  a.headerCt.on({add:this.renderElements, remove:this.renderElements, scope:this});
  a.ownerCt.up('panel').on({viewchange:this.renderElements, orientationchange:this.renderElements, scope:this});
  this.renderElements();
}, renderElements:function() {
  if (this.renderElementsBuffered || this.disabled || this.schedulerView.headerCt.getColumnCount() === 0) {
    return;
  }
  this.renderElementsBuffered = true;
  Ext.Function.defer(this.renderElementsInternal, this.renderDelay, this);
}, renderElementsInternal:function() {
  this.renderElementsBuffered = false;
  if (this.disabled || this.schedulerView.isDestroyed || this.schedulerView.headerCt.getColumnCount() === 0) {
    return;
  }
  this.removeElements();
  var c = this.timeAxis.getStart(), a = this.timeAxis.getEnd(), b = this.getElementData(c, a);
  this.template.insertFirst(this.containerEl, b);
}, getElementData:function(b, a) {
  throw 'Abstract method call';
}, onDestroy:function() {
  if (this.store.autoDestroy) {
    this.store.destroy();
  }
}, refreshSingle:function(c, b) {
  var e = Ext.get(this.uniqueCls + '-' + b.internalId);
  if (e) {
    var g = this.timeAxis.getStart(), a = this.timeAxis.getEnd(), f = this.getElementData(g, a, [b])[0], d = b.clsField || 'Cls';
    e.dom.className = this.cls + ' ' + this.uniqueCls + ' ' + (f[d] || '');
    e.setTop(f.top);
    e.setLeft(f.left);
    e.setSize(f.width, f.height);
  } else {
    this.renderElements();
  }
}});
Ext.define('Sch.plugin.Lines', {extend:'Sch.feature.AbstractTimeSpan', cls:'sch-timeline', showTip:true, innerTpl:null, init:function(b) {
  this.callParent(arguments);
  var a = this.schedulerView;
  if (Ext.isString(this.innerTpl)) {
    this.innerTpl = new Ext.XTemplate(this.innerTpl);
  }
  var c = this.innerTpl;
  if (!this.template) {
    this.template = new Ext.XTemplate('\x3ctpl for\x3d"."\x3e', '\x3cdiv id\x3d"' + this.uniqueCls + '-{id}"' + (this.showTip ? 'title\x3d"{[this.getTipText(values)]}" ' : '') + 'class\x3d"' + this.cls + ' ' + this.uniqueCls + ' {Cls}" style\x3d"left:{left}px;top:{top}px;height:{height}px;width:{width}px"\x3e' + (c ? '{[this.renderInner(values)]}' : '') + '\x3c/div\x3e', '\x3c/tpl\x3e', {getTipText:function(d) {
      return a.getFormattedDate(d.Date) + ' ' + (d.Text || '');
    }, renderInner:function(d) {
      return c.apply(d);
    }});
  }
}, getElementData:function(k, n, d) {
  var p = this.store, j = this.schedulerView, f = d || p.getRange(), h = [], o = this.containerEl.lastBox ? this.containerEl.lastBox.height : this.containerEl.getHeight(), a, c, m, b;
  for (var g = 0, e = f.length; g < e; g++) {
    a = f[g];
    c = a.get('Date');
    if (c && Ext.Date.between(c, k, n)) {
      m = j.getTimeSpanRegion(c, null, this.expandToFitView);
      h[h.length] = Ext.apply({id:a.internalId, left:m.left, top:m.top, width:Math.max(1, m.right - m.left), height:m.bottom - m.top}, a.data);
    }
  }
  return h;
}});
Ext.define('Sch.plugin.Zones', {extend:'Sch.feature.AbstractTimeSpan', innerTpl:null, requires:['Sch.model.Range'], cls:'sch-zone', init:function(a) {
  if (Ext.isString(this.innerTpl)) {
    this.innerTpl = new Ext.XTemplate(this.innerTpl);
  }
  var b = this.innerTpl;
  if (!this.template) {
    this.template = new Ext.XTemplate('\x3ctpl for\x3d"."\x3e\x3cdiv id\x3d"' + this.uniqueCls + '-{id}" class\x3d"' + this.cls + ' ' + this.uniqueCls + ' {Cls}" style\x3d"left:{left}px;top:{top}px;height:{height}px;width:{width}px"\x3e' + (b ? '{[this.renderInner(values)]}' : '') + '\x3c/div\x3e\x3c/tpl\x3e', {renderInner:function(c) {
      return b.apply(c);
    }});
  }
  this.callParent(arguments);
}, getElementData:function(j, n, c) {
  var o = this.store, h = this.schedulerView, e = c || o.getRange(), g = [], a, m, b, k;
  for (var f = 0, d = e.length; f < d; f++) {
    a = e[f];
    m = a.getStartDate();
    b = a.getEndDate();
    if (m && b && Sch.util.Date.intersectSpans(m, b, j, n)) {
      k = h.getTimeSpanRegion(Sch.util.Date.max(m, j), Sch.util.Date.min(b, n), this.expandToFitView);
      g[g.length] = Ext.apply({id:a.internalId, left:k.left, top:k.top, width:k.right - k.left, height:k.bottom - k.top, Cls:a.getCls()}, a.data);
    }
  }
  return g;
}});
Ext.define('Sch.plugin.Pan', {alias:'plugin.pan', extend:'Ext.AbstractPlugin', lockableScope:'normal', enableVerticalPan:true, panel:null, constructor:function(a) {
  Ext.apply(this, a);
}, init:function(a) {
  this.panel = a.normalGrid || a;
  this.view = a.getSchedulingView();
  this.view.on('afterrender', this.onRender, this);
}, onRender:function(a) {
  this.view.el.on('mousedown', this.onMouseDown, this, {delegate:'.' + this.view.timeCellCls});
}, onMouseDown:function(b, a) {
  if (b.getTarget('.' + this.view.timeCellCls) && !b.getTarget(this.view.eventSelector)) {
    this.mouseX = b.getPageX();
    this.mouseY = b.getPageY();
    Ext.getBody().on('mousemove', this.onMouseMove, this);
    Ext.getDoc().on('mouseup', this.onMouseUp, this);
  }
}, onMouseMove:function(d) {
  d.stopEvent();
  var a = d.getPageX(), f = d.getPageY(), c = a - this.mouseX, b = f - this.mouseY;
  this.panel.scrollByDeltaX(-c);
  this.mouseX = a;
  this.mouseY = f;
  if (this.enableVerticalPan) {
    this.panel.scrollByDeltaY(-b);
  }
}, onMouseUp:function(a) {
  Ext.getBody().un('mousemove', this.onMouseMove, this);
  Ext.getDoc().un('mouseup', this.onMouseUp, this);
}});
Ext.define('Sch.view.Locking', {extend:'Ext.grid.LockingView', scheduleEventRelayRe:/^(schedule|event|beforeevent|afterevent|dragcreate|beforedragcreate|afterdragcreate|beforetooltipshow)/, constructor:function(b) {
  this.callParent(arguments);
  var e = this, g = [], a = e.scheduleEventRelayRe, f = b.normal.getView(), c = f.events, d;
  for (d in c) {
    if (c.hasOwnProperty(d) && a.test(d)) {
      g.push(d);
    }
  }
  e.relayEvents(f, g);
}, getElementFromEventRecord:function(a) {
  return this.normal.getView().getElementFromEventRecord(a);
}, onClear:function() {
  this.relayFn('onClear', arguments);
}, beginBulkUpdate:function() {
  this.relayFn('beginBulkUpdate', arguments);
}, endBulkUpdate:function() {
  this.relayFn('endBulkUpdate', arguments);
}, refreshKeepingScroll:function() {
  this.locked.getView().refresh();
  this.normal.getView().refreshKeepingScroll();
}});
Ext.define('Sch.column.Time', {extend:'Ext.grid.column.Column', alias:'timecolumn', draggable:false, groupable:false, hideable:false, sortable:false, fixed:true, align:'center', tdCls:'sch-timetd', menuDisabled:true, initComponent:function() {
  this.addEvents('timeheaderdblclick');
  this.enableBubble('timeheaderdblclick');
  this.callParent();
}, initRenderData:function() {
  var a = this;
  a.renderData.headerCls = a.renderData.headerCls || a.headerCls;
  return a.callParent(arguments);
}, onElDblClick:function(b, a) {
  this.callParent(arguments);
  this.fireEvent('timeheaderdblclick', this, this.startDate, this.endDate, b);
}}, function() {
  Sch.column.Time.prototype.renderTpl = Sch.column.Time.prototype.renderTpl.replace('column-header-inner', 'column-header-inner sch-timeheader {headerCls}');
});
Ext.define('Sch.column.timeAxis.Horizontal', {extend:'Ext.grid.column.Column', alias:'widget.timeaxiscolumn', requires:['Ext.Date', 'Ext.XTemplate', 'Sch.column.Time', 'Sch.preset.Manager'], cls:'sch-timeaxiscolumn', timeAxis:null, renderTpl:'\x3cdiv id\x3d"{id}-titleEl" class\x3d"' + Ext.baseCSSPrefix + 'column-header-inner"\x3e\x3cspan id\x3d"{id}-textEl" style\x3d"display:none" class\x3d"' + Ext.baseCSSPrefix + 'column-header-text"\x3e\x3c/span\x3e\x3ctpl if\x3d"topHeaderCells"\x3e{topHeaderCells}\x3c/tpl\x3e\x3ctpl if\x3d"middleHeaderCells"\x3e{middleHeaderCells}\x3c/tpl\x3e\x3c/div\x3e{%this.renderContainer(out,values)%}', 
headerRowTpl:'\x3ctable border\x3d"0" cellspacing\x3d"0" cellpadding\x3d"0" style\x3d"{tstyle}" class\x3d"sch-header-row sch-header-row-{position}"\x3e\x3cthead\x3e\x3ctr\x3e{cells}\x3c/tr\x3e\x3c/thead\x3e\x3c/table\x3e', headerCellTpl:'\x3ctpl for\x3d"."\x3e\x3ctd class\x3d"sch-column-header x-column-header {headerCls}" style\x3d"position : static; text-align: {align}; {style}" tabIndex\x3d"0" id\x3d"{headerId}" headerPosition\x3d"{position}" headerIndex\x3d"{index}"\x3e\x3cdiv class\x3d"x-column-header-inner"\x3e{header}\x3c/div\x3e\x3c/td\x3e\x3c/tpl\x3e', 
columnConfig:{}, timeCellRenderer:null, timeCellRendererScope:null, columnWidth:null, previousWidth:null, previousHeight:null, initComponent:function() {
  if (!(this.headerRowTpl instanceof Ext.Template)) {
    this.headerRowTpl = Ext.create('Ext.XTemplate', this.headerRowTpl);
  }
  if (!(this.headerCellTpl instanceof Ext.Template)) {
    this.headerCellTpl = Ext.create('Ext.XTemplate', this.headerCellTpl);
  }
  this.columns = [{}];
  this.addEvents('timeheaderdblclick', 'timeaxiscolumnreconfigured');
  this.enableBubble('timeheaderdblclick');
  this.stubForResizer = new Ext.Component({isOnLeftEdge:function() {
    return false;
  }, isOnRightEdge:function() {
    return false;
  }, el:{dom:{style:{}}}});
  this.callParent(arguments);
  this.onTimeAxisReconfigure();
  this.mon(this.timeAxis, 'reconfigure', this.onTimeAxisReconfigure, this);
}, getSchedulingView:function() {
  return this.getOwnerHeaderCt().view;
}, onTimeAxisReconfigure:function() {
  var e = this.timeAxis, d = e.preset.timeColumnWidth, f = this.rendered && this.getSchedulingView(), g = e.headerConfig, b = e.getStart(), c = e.getEnd(), h = {renderer:this.timeColumnRenderer, scope:this, width:this.rendered ? f.calculateTimeColumnWidth(d) : d};
  delete this.previousWidth;
  delete this.previousHeight;
  var j = this.columnConfig = this.createColumns(this.timeAxis, g, h);
  Ext.suspendLayouts();
  this.removeAll();
  if (this.rendered) {
    var a = this.el.child('.x-column-header-inner');
    a.select('table').remove();
    var i = this.initRenderData();
    if (j.top) {
      Ext.core.DomHelper.append(a, i.topHeaderCells);
    }
    if (j.middle) {
      Ext.core.DomHelper.append(a, i.middleHeaderCells);
    }
    if (!j.top && !j.middle) {
      this.addCls('sch-header-single-row');
    } else {
      this.removeCls('sch-header-single-row');
    }
  }
  Ext.resumeLayouts();
  this.add(j.bottom);
  if (this.rendered) {
    if (this.fireEvent('timeaxiscolumnreconfigured', this) !== false) {
      f.refresh();
    }
  }
}, beforeRender:function() {
  var a = this.columnConfig;
  if (!a.middle && !a.top) {
    this.addCls('sch-header-single-row');
  }
  this.callParent(arguments);
}, timeColumnRenderer:function(i, e, f, l, d, c, k) {
  var a = '';
  if (Ext.isIE) {
    e.style += ';z-index:' + (this.items.getCount() - d);
  }
  if (this.timeCellRenderer) {
    var h = this.timeAxis, b = h.getAt(d), g = b.start, j = b.end;
    a = this.timeCellRenderer.call(this.timeCellRendererScope || this, e, f, l, d, c, g, j);
  }
  return a;
}, initRenderData:function() {
  var a = this.columnConfig;
  var c = a.top ? this.headerRowTpl.apply({cells:this.headerCellTpl.apply(a.top), position:'top', tstyle:'border-top : 0; width : 100px'}) : '';
  var b = a.middle ? this.headerRowTpl.apply({cells:this.headerCellTpl.apply(a.middle), position:'middle', tstyle:a.top ? 'width : 100px' : 'border-top : 0; width : 100px'}) : '';
  return Ext.apply(this.callParent(arguments), {topHeaderCells:c, middleHeaderCells:b});
}, defaultRenderer:function(c, b, a) {
  return Ext.Date.format(c, a);
}, createColumns:function(f, d, g) {
  if (!f || !d) {
    throw 'Invalid parameters passed to createColumns';
  }
  var c = [], a = d.bottom || d.middle, h, e = this;
  f.forEachInterval(d.bottom ? 'bottom' : 'middle', function(l, j, k) {
    h = {align:a.align || 'center', headerCls:'', startDate:l, endDate:j};
    if (a.renderer) {
      h.header = a.renderer.call(a.scope || e, l, j, h, k);
    } else {
      h.header = e.defaultRenderer(l, j, a.dateFormat);
    }
    c[c.length] = Ext.create('Sch.column.Time', Ext.apply(h, g));
  });
  var b = this.createHeaderRows(f, d);
  return {bottom:c, middle:b.middle, top:b.top};
}, createHeaderRows:function(e, c) {
  var d = {};
  if (c.top) {
    var a;
    if (c.top.cellGenerator) {
      a = c.top.cellGenerator.call(this, e.getStart(), e.getEnd());
    } else {
      a = this.createHeaderRow(e, c.top);
    }
    d.top = this.processHeaderRow(a, 'top');
  }
  if (c.bottom) {
    var b;
    if (c.middle.cellGenerator) {
      b = c.middle.cellGenerator.call(this, e.getStart(), e.getEnd());
    } else {
      b = this.createHeaderRow(e, c.middle);
    }
    d.middle = this.processHeaderRow(b, 'middle');
  }
  return d;
}, processHeaderRow:function(c, a) {
  var b = this;
  Ext.each(c, function(d, e) {
    d.index = e;
    d.position = a;
    d.headerId = b.stubForResizer.id;
  });
  return c;
}, createHeaderRow:function(e, k) {
  var n = [], l, a = e.getStart(), c = e.getEnd(), m = c - a, j = [], b = a, d = 0, f, g = k.align || 'center', h;
  while (b < c) {
    h = Sch.util.Date.min(e.getNext(b, k.unit, k.increment || 1), c);
    l = {align:g, start:b, end:h, headerCls:''};
    if (k.renderer) {
      l.header = k.renderer.call(k.scope || this, b, h, l, d);
    } else {
      l.header = this.defaultRenderer(b, h, k.dateFormat, l, d);
    }
    n.push(l);
    b = h;
    d++;
  }
  return n;
}, afterLayout:function() {
  delete this.columnWidth;
  this.callParent(arguments);
  var b = this.getWidth();
  var g = this.getHeight();
  if (b === this.previousWidth && g === this.previousHeight) {
    return;
  }
  this.previousWidth = b;
  this.previousHeight = g;
  var i = this.columnConfig;
  var e = this;
  var c = this.el;
  var f = i.top;
  var d = 0;
  var a = 0;
  if (f) {
    c.select('.sch-header-row-top').setWidth(this.lastBox.width);
    c.select('.sch-header-row-top td').each(function(l, m, j) {
      var k = e.getHeaderGroupCellWidth(f[j].start, f[j].end);
      l.setVisibilityMode(Ext.Element.DISPLAY);
      if (k) {
        d += k;
        l.show();
        l.setWidth(k);
      } else {
        l.hide();
      }
    });
  }
  var h = i.middle;
  if (h) {
    c.select('.sch-header-row-middle').setWidth(this.lastBox.width);
    c.select('.sch-header-row-middle td').each(function(l, m, j) {
      var k = e.getHeaderGroupCellWidth(h[j].start, h[j].end);
      l.setVisibilityMode(Ext.Element.DISPLAY);
      if (k) {
        a += k;
        l.show();
        l.setWidth(k);
      } else {
        l.hide();
      }
    });
  }
}, getHeaderGroupCellWidth:function(h, b) {
  var e = this.timeAxis.unit, d = this.timeAxis.increment, c, g = Sch.util.Date.getMeasuringUnit(e), a = Sch.util.Date.getDurationInUnit(h, b, g), f = this.getSchedulingView();
  if (this.timeAxis.isContinuous()) {
    c = a * f.getSingleUnitInPixels(g);
  } else {
    c = f.getXYFromDate(b)[0] - f.getXYFromDate(h)[0];
  }
  return c;
}, onElDblClick:function(d, f) {
  this.callParent(arguments);
  var e = d.getTarget('.sch-column-header');
  if (e) {
    var a = Ext.fly(e).getAttribute('headerPosition'), b = Ext.fly(e).getAttribute('headerIndex'), c = this.columnConfig[a][b];
    this.fireEvent('timeheaderdblclick', this, c.start, c.end, d);
  }
}, getTimeColumnWidth:function() {
  if (this.columnWidth === null) {
    this.columnWidth = this.items.get(0).getWidth();
  }
  return this.columnWidth;
}, setTimeColumnWidth:function(a) {
  this.suspendEvents();
  this.items.each(function(b) {
    b.setWidth(a);
  });
  this.resumeEvents();
}});
Ext.define('Sch.column.timeAxis.HorizontalSingle', {extend:'Sch.column.Time', alias:'widget.singletimeaxiscolumn', requires:['Ext.Date', 'Ext.XTemplate', 'Sch.preset.Manager'], cls:'sch-simple-timeaxis', timeAxis:null, trackHeaderOver:true, compactCellWidthThreshold:16, renderTpl:'\x3cdiv id\x3d"{id}-titleEl" class\x3d"' + Ext.baseCSSPrefix + 'column-header-inner"\x3e\x3cspan id\x3d"{id}-textEl" style\x3d"display:none" class\x3d"' + Ext.baseCSSPrefix + 'column-header-text"\x3e\x3c/span\x3e\x3ctpl if\x3d"topHeaderCells"\x3e{topHeaderCells}\x3c/tpl\x3e\x3ctpl if\x3d"middleHeaderCells"\x3e{middleHeaderCells}\x3c/tpl\x3e\x3ctpl if\x3d"bottomHeaderCells"\x3e{bottomHeaderCells}\x3c/tpl\x3e\x3c/div\x3e{%this.renderContainer(out,values)%}', 
headerRowTpl:'\x3ctable border\x3d"0" cellspacing\x3d"0" cellpadding\x3d"0" style\x3d"{tstyle}" class\x3d"sch-header-row sch-header-row-{position}"\x3e\x3cthead\x3e\x3ctr\x3e\x3ctpl for\x3d"cells"\x3e\x3ctd class\x3d"sch-column-header x-column-header {headerCls}" style\x3d"position : static; text-align: {align}; {style}" tabIndex\x3d"0" id\x3d"{headerId}" headerPosition\x3d"{parent.position}" headerIndex\x3d"{[xindex-1]}"\x3e\x3cdiv class\x3d"sch-simple-timeheader"\x3e{header}\x3c/div\x3e\x3c/td\x3e\x3c/tpl\x3e\x3c/tr\x3e\x3c/thead\x3e\x3c/table\x3e', 
columnConfig:{}, columnWidth:null, nbrTimeColumns:null, initComponent:function() {
  this.tdCls += ' sch-singletimetd';
  if (!(this.headerRowTpl instanceof Ext.Template)) {
    this.headerRowTpl = Ext.create('Ext.XTemplate', this.headerRowTpl);
  }
  this.addEvents('timeheaderdblclick', 'timeaxiscolumnreconfigured');
  this.enableBubble('timeheaderdblclick');
  this.callParent(arguments);
  this.onTimeAxisReconfigure();
  this.mon(this.timeAxis, 'reconfigure', this.onTimeAxisReconfigure, this);
  this.on('resize', this.refreshHeaderSizes, this);
  this.ownHoverCls = this.hoverCls;
  this.hoverCls = '';
}, getSchedulingView:function() {
  return this.getOwnerHeaderCt().view;
}, onTimeAxisReconfigure:function() {
  var h = this.timeAxis, g = h.preset.timeColumnWidth, j = this.rendered && this.getSchedulingView(), l = h.headerConfig, c = h.getStart(), f = h.getEnd(), d = this.rendered ? j.calculateTimeColumnWidth(g) : g;
  var o = this.columnConfig = this.createHeaderRows(l);
  var a = o.bottom || o.middle;
  if (this.rendered) {
    var e;
    var b = this.el.child('.x-column-header-inner');
    var i = b.dom;
    var k = i.style.display;
    var m = i.parentNode;
    i.style.display = 'none';
    m.removeChild(i);
    i.innerHTML = '';
    var n = this.initRenderData();
    if (o.top) {
      e = Ext.core.DomHelper.append(b, n.topHeaderCells);
      this.refreshHeaderRow('top', e);
    }
    if (o.middle) {
      e = Ext.core.DomHelper.append(b, n.middleHeaderCells);
      this.refreshHeaderRow('middle', e);
    }
    if (o.bottom) {
      e = Ext.core.DomHelper.append(b, n.bottomHeaderCells);
      this.refreshHeaderRow('bottom', e);
    }
    if (!o.top && !o.middle) {
      this.addCls('sch-header-single-row');
    } else {
      this.removeCls('sch-header-single-row');
    }
    m.appendChild(i);
    i.style.display = k;
    if (d !== this.columnWidth || this.nbrTimeColumns !== a.length) {
      this.nbrTimeColumns = a.length;
      this.setTimeColumnWidth(d);
    }
    if (this.fireEvent('timeaxiscolumnreconfigured', this) !== false) {
      j.refreshKeepingResourceScroll(true);
    }
  } else {
    if (d !== this.columnWidth || this.nbrTimeColumns !== a.length) {
      this.nbrTimeColumns = a.length;
      this.setTimeColumnWidth(d);
    }
  }
}, beforeRender:function() {
  var b = this, a = this.columnConfig;
  if (!a.middle && !a.top) {
    b.addCls('sch-header-single-row');
  }
  b.callParent(arguments);
}, afterRender:function() {
  var a = this;
  if (this.trackHeaderOver) {
    a.el.on({mousemove:a.highlightCell, delegate:'div.sch-simple-timeheader', scope:a});
    a.el.on({mouseleave:a.clearHighlight, scope:a});
  }
  a.callParent(arguments);
}, initRenderData:function() {
  var a = this.columnConfig;
  var c = a.top ? this.headerRowTpl.apply({cells:a.top, position:'top', tstyle:'border-top : 0; width : 100px'}) : '';
  var b = a.middle ? this.headerRowTpl.apply({cells:a.middle, position:'middle', tstyle:a.top ? 'width : 100px' : 'border-top : 0; width : 100px'}) : '';
  var d = a.bottom ? this.headerRowTpl.apply({cells:a.bottom, position:'bottom', tstyle:'width : 100px'}) : '';
  return Ext.apply(this.callParent(arguments), {topHeaderCells:c, middleHeaderCells:b, bottomHeaderCells:d});
}, defaultRenderer:function(c, b, a) {
  return Ext.Date.format(c, a);
}, createHeaderRows:function(a) {
  var b = {};
  for (var c in a) {
    if (a[c].cellGenerator) {
      b[c] = a[c].cellGenerator.call(this, this.timeAxis.getStart(), this.timeAxis.getEnd());
    } else {
      b[c] = this.createHeaderRow(c, a[c]);
    }
  }
  return b;
}, createHeaderRow:function(a, c) {
  var b = [], d = this, f, e = c.align || 'center';
  this.timeAxis.forEachInterval(a, function(j, g, h) {
    f = {align:e, start:j, end:g, headerCls:''};
    if (c.renderer) {
      f.header = c.renderer.call(c.scope || d, j, g, f, h);
    } else {
      f.header = d.defaultRenderer(j, g, c.dateFormat, f, h);
    }
    if (c.unit === Sch.util.Date.DAY && (!c.increment || c.increment === 1)) {
      f.headerCls += ' sch-dayheadercell-' + j.getDay();
    }
    b.push(f);
  });
  return b;
}, afterLayout:function() {
  this.callParent(arguments);
  this.refreshHeaderSizes();
}, refreshHeaderSizes:function() {
  var a = this.columnConfig;
  if (a.top) {
    this.refreshHeaderRow('top');
  }
  if (a.middle) {
    this.refreshHeaderRow('middle');
  }
  if (a.bottom) {
    this.refreshHeaderRow('bottom');
  }
}, refreshHeaderRow:function(a, b) {
  var e = this.el;
  var f = this.columnConfig[a];
  var d = this;
  var c;
  b = b || e.down('.sch-header-row-' + a, true);
  Ext.fly(b).setWidth(d.getTotalWidth());
  Ext.fly(b).select(' thead \x3e tr \x3e td').each(function(h, i, g) {
    c = d.getHeaderGroupCellWidth(f[g].start, f[g].end);
    h.setVisibilityMode(Ext.Element.DISPLAY);
    if (c) {
      if (Ext.isSafari && Ext.isMac) {
        c -= 2;
      }
      h.show();
      h.setWidth(c - (Ext.chromeVersion === 19 ? g ? 1 : 0 : 0));
    } else {
      h.hide();
    }
  });
  if (a === 'bottom') {
    if (c < this.compactCellWidthThreshold) {
      Ext.fly(b).addCls('sch-header-row-compact');
    } else {
      Ext.fly(b).removeCls('sch-header-row-compact');
    }
  }
}, getHeaderGroupCellWidth:function(h, b) {
  var e = this.timeAxis.unit, d = this.timeAxis.increment, c, g = Sch.util.Date.getMeasuringUnit(e), a = Sch.util.Date.getDurationInUnit(h, b, g), f = this.getSchedulingView();
  if (this.timeAxis.isContinuous()) {
    c = a * f.getSingleUnitInPixels(g);
  } else {
    c = f.getXYFromDate(b)[0] - f.getXYFromDate(h)[0];
  }
  return c;
}, onElDblClick:function(d, f) {
  var e = d.getTarget('.sch-column-header');
  if (e) {
    var a = Ext.fly(e).getAttribute('headerPosition'), b = Ext.fly(e).getAttribute('headerIndex'), c = this.columnConfig[a][b];
    this.fireEvent('timeheaderdblclick', this, c.start, c.end, d);
  }
}, getTimeColumnWidth:function() {
  if (this.columnWidth === null) {
    this.columnWidth = this.getWidth() / this.nbrTimeColumns;
  }
  return this.columnWidth;
}, setTimeColumnWidth:function(a) {
  this.columnWidth = a;
  if (this.rendered) {
    Ext.suspendLayouts();
    this.setWidth(a * this.nbrTimeColumns);
    Ext.resumeLayouts();
    this.refreshHeaderSizes();
    this.ownerCt.updateLayout();
  } else {
    this.setWidth(a * this.nbrTimeColumns);
  }
}, getTotalWidth:function() {
  return this.columnWidth * this.nbrTimeColumns;
}, highlightCell:function(c, a) {
  var b = this;
  if (a !== b.highlightedCell) {
    b.clearHighlight();
    b.highlightedCell = a;
    Ext.fly(a).addCls(b.ownHoverCls);
  }
}, clearHighlight:function() {
  var b = this, a = b.highlightedCell;
  if (a) {
    Ext.fly(a).removeCls(b.ownHoverCls);
    delete b.highlightedCell;
  }
}});
Ext.define('Sch.mixin.Lockable', {extend:'Ext.grid.Lockable', requires:['Sch.column.timeAxis.Horizontal', 'Sch.column.timeAxis.HorizontalSingle'], findEditingPlugin:function() {
  var b = this.plugins || [];
  var c = this;
  var a;
  Ext.each(b, function(e, d) {
    if (Ext.grid.plugin && Ext.grid.plugin.CellEditing && e instanceof Ext.grid.plugin.CellEditing) {
      a = e;
      Ext.Array.remove(b, e);
      return false;
    }
  });
  return a;
}, processSchedulerPlugins:function() {
  var e = [];
  var d = [];
  var g = [];
  var a = this.plugins || [];
  var c = this;
  for (var b = a.length - 1; b >= 0; b--) {
    var f = a[b];
    if (f.lockableScope) {
      switch(f.lockableScope) {
        case 'top':
          g.push(f);
          break;
        case 'locked':
          e.push(f);
          break;
        case 'normal':
          d.push(f);
          break;
      }
      Ext.Array.remove(a, f);
    }
  }
  if (e.length > 0) {
    c.lockedGridConfig.plugins = (c.lockedGridConfig.plugins || []).concat(e);
  }
  if (d.length > 0) {
    c.normalGridConfig.plugins = (c.normalGridConfig.plugins || []).concat(d);
  }
  c.topPlugins = g;
}, injectLockable:function() {
  var d = this.findEditingPlugin();
  var i = this;
  var f = Ext.data.TreeStore && i.store instanceof Ext.data.TreeStore;
  var j = i.store.buffered;
  var c = i.getEventSelectionModel ? i.getEventSelectionModel() : i.getSelectionModel();
  i.lockedGridConfig = i.lockedGridConfig || {};
  i.normalGridConfig = i.schedulerConfig || i.normalGridConfig || {};
  var a = i.lockedGridConfig, h = i.normalGridConfig;
  Ext.applyIf(i.lockedGridConfig, {enableLocking:false, lockable:false, useArrows:true, xtype:i.lockedXType, columnLines:i.columnLines, rowLines:i.rowLines, stateful:i.stateful, id:i.id + '_locked', delayScroll:function() {
    if (this.rendered) {
      return this.self.prototype.delayScroll.apply(this, arguments);
    }
  }, split:true, animCollapse:false, collapseDirection:'left', region:'west'});
  if (d) {
    i.lockedGridConfig.plugins = (i.lockedGridConfig.plugins || []).concat(d);
  }
  i.processSchedulerPlugins();
  Ext.applyIf(i.normalGridConfig, {layout:'fit', xtype:i.normalXType, viewType:i.viewType, enableLocking:false, lockable:false, sortableColumns:false, enableColumnMove:false, enableColumnResize:false, enableColumnHide:false, selModel:c, eventSelModel:c, _top:i, orientation:i.orientation, viewPreset:i.viewPreset, timeAxis:i.timeAxis, columnLines:i.columnLines, rowLines:i.rowLines, collapseDirection:'right', animCollapse:false, region:'center'});
  i.bothCfgCopy = i.bothCfgCopy || Ext.grid.Panel && Ext.grid.Panel.prototype.bothCfgCopy || ['invalidateScrollerOnRefresh', 'hideHeaders', 'enableColumnHide', 'enableColumnMove', 'enableColumnResize', 'sortableColumns'];
  if (i.orientation === 'vertical') {
    a.store = h.store = i.timeAxis.tickStore;
    i.mon(i.resourceStore, {clear:i.refreshResourceColumns, datachanged:i.refreshResourceColumns, load:i.refreshResourceColumns, scope:i});
  }
  if (a.width) {
    i.syncLockedWidth = Ext.emptyFn;
    a.scroll = 'horizontal';
    a.scrollerOwner = true;
  }
  if (i.resourceStore) {
    h.resourceStore = i.resourceStore;
  }
  if (i.eventStore) {
    h.eventStore = i.eventStore;
  }
  if (i.dependencyStore) {
    h.dependencyStore = i.dependencyStore;
  }
  i.lockedViewConfig = i.lockedViewConfig || {};
  i.normalViewConfig = i.normalViewConfig || {};
  if (f && j && Ext.getScrollbarSize().width === 0) {
    i.lockedGridConfig.scroll = 'horizontal';
  }
  i.lockedViewConfig.enableAnimations = i.normalViewConfig.enableAnimations = false;
  if (f) {
    i.normalViewConfig.providedStore = i.lockedViewConfig.providedStore = i.createNodeStore(j, i.store);
  }
  var e = i.layout;
  this.callParent(arguments);
  if (i.topPlugins) {
    i.plugins = i.topPlugins;
  }
  if (a.width) {
    i.lockedGrid.setWidth(a.width);
    i.normalGrid.getView().addCls('sch-timeline-horizontal-scroll');
  } else {
    if (i.normalGrid.collapsed) {
      i.normalGrid.collapsed = false;
      i.normalGrid.view.on('boxready', function() {
        i.normalGrid.collapse();
      }, i, {delay:10});
    }
  }
  var k = i.lockedGrid.getView();
  var b = i.normalGrid.getView();
  if (j) {
    k.on('render', this.onLockedViewRender, this);
    this.fixPagingScroller(i.normalGrid.verticalScroller);
    if (Ext.getScrollbarSize().width > 0) {
      k.on({scroll:{fn:i.onLockedViewScroll, element:'el', scope:i}});
    }
  }
  if (Ext.getScrollbarSize().width === 0) {
    k.addCls('sch-ganttpanel-force-locked-scroll');
  }
  if (f) {
    this.setupLockableTree();
  }
  if (!b.deferInitialRefresh) {
    var g = b.onRender;
    b.onRender = function() {
      this.doFirstRefresh = function() {
      };
      g.apply(this, arguments);
      delete this.doFirstRefresh;
    };
  }
  if (j) {
    b.el = {un:function() {
    }};
    i.normalGrid.verticalScroller.bindView(b);
    delete b.el;
  }
  i.view.clearListeners();
  k.on({refresh:i.updateSpacer, scope:i});
  i.view = Ext.create('Sch.view.Locking', {locked:i.lockedGrid, normal:i.normalGrid, panel:i});
  if (i.syncRowHeight) {
    k.on('refresh', this.onLockedViewRefresh, this);
    if (f) {
      i.mon(i.store, {beforeload:function() {
        k.un({itemadd:i.onViewItemAdd, scope:i});
        b.un({itemadd:i.onViewItemAdd, scope:i});
      }, load:function() {
        k.un({itemadd:i.onViewItemAdd, scope:i});
        b.un({itemadd:i.onViewItemAdd, scope:i});
        i.prepareFullRowHeightSync();
        i.syncRowHeights();
      }});
      i.normalGrid.on('afteritemexpand', i.afterNormalGridItemExpand, i);
    }
    k.on({itemadd:i.onViewItemAdd, scope:i});
    b.on({itemadd:i.onViewItemAdd, itemupdate:i.onNormalViewItemUpdate, groupexpand:i.onNormalViewGroupExpand, scope:i});
    if (Ext.isIE9 && Ext.isStrict) {
      i.onNormalViewItemUpdate = function(l, m, o) {
        if (i.lockedGridDependsOnSchedule) {
          var n = i.lockedGrid.getView();
          n.suspendEvents();
          n.onUpdate(i.lockedGrid.store, l);
          n.resumeEvents();
        }
        var p = i.normalGrid.getView().getNode(m);
        p.style.height = o.style.height;
        i.normalHeights[m] = o.style.height;
        i.syncRowHeights();
      };
    }
  }
  if (e !== 'fit') {
    i.layout = e;
  }
  i.normalGrid.on({collapse:i.onNormalGridCollapse, expand:i.onNormalGridExpand, scope:i});
  i.lockedGrid.on({collapse:i.onLockedGridCollapse, scope:i});
  if (this.lockedGrid.view.store !== this.normalGrid.view.store) {
    Ext.Error.raise('Sch.mixin.Lockable setup failed, not sharing store between the two views');
  }
}, onLockedGridCollapse:function() {
  if (this.normalGrid.collapsed) {
    this.normalGrid.expand();
  }
}, onNormalGridCollapse:function() {
  var a = this;
  if (!a.normalGrid.reExpander) {
    a.normalGrid.reExpander = a.normalGrid.placeholder;
  }
  if (!a.lockedGrid.rendered) {
    a.lockedGrid.on('render', a.onNormalGridCollapse, a, {delay:1});
  } else {
    a.lastLockedWidth = a.lockedGrid.getWidth();
    a.lockedGrid.setWidth(a.getWidth() - 35);
    if (a.lockedGrid.collapsed) {
      a.lockedGrid.expand();
    }
    a.addCls('sch-normalgrid-collapsed');
  }
}, onNormalGridExpand:function() {
  this.removeCls('sch-normalgrid-collapsed');
  this.lockedGrid.setWidth(this.lastLockedWidth);
}, fixPagingScroller:function(a) {
  var b = a.onViewRefresh;
  a.onViewRefresh = function() {
    b.apply(this, arguments);
    var g = this, f = g.store;
    if (f.getCount() === f.getTotalCount() || f.isFiltered() && !f.remoteFilter) {
      g.stretcher.setHeight(g.getScrollHeight());
    }
  };
  var d = a.view.lockingPartner;
  if (d) {
    var e = a.onLockRefresh;
    var c = function(f) {
      if (f.table.dom) {
        e.apply(this, arguments);
      }
    };
    d.un('refresh', e, a);
    d.on('refresh', c, a);
    a.onLockRefresh = c;
  }
  a.view.un('render', a.onViewRender, a);
  a.onViewRender = function() {
    var g = this, f = g.view.el;
    f.setStyle('position', 'relative');
    g.stretcher = f.createChild({style:{position:'absolute', width:'1px', height:0, top:0, left:0}}, f.dom.firstChild);
  };
  a.view.on('render', a.onViewRender, a);
}, createNodeStore:function(a, b) {
  return new Ext.data.NodeStore({buffered:a, purgePageCount:0, pageSize:1.0E10, treeStore:b, recursive:true, refreshFromTree:function() {
    var e = this.eventsSuspended;
    this.suspendEvents();
    this.removeAll();
    var c = b.getRootNode(), f = [];
    var d = function(i) {
      if (i != c) {
        f[f.length] = i;
      }
      if (i.isExpanded()) {
        var j = i.childNodes, h = j.length;
        for (var g = 0; g < h; g++) {
          d(j[g]);
        }
      }
    };
    d(c);
    this.totalCount = f.length;
    this.cachePage(f, 1);
    if (Ext.isNumber(this.eventsSuspended) || !e) {
      this.resumeEvents();
    }
  }});
}, setupLockableTree:function() {
  var j;
  var g;
  var i = this;
  var k = i.store.buffered;
  var d = i.getView();
  var o = i.lockedGrid.getView();
  var e = i.normalGrid.getView();
  var l = e.store;
  var c = i.store;
  var h = i.normalGrid.verticalScroller;
  var m = function(t, s) {
    var q = c.viewSize || 50;
    var p = l.getTotalCount();
    if (p) {
      var r = s - t + 1;
      if (r < q && p >= r) {
        s = t + q - 1;
      }
      if (s >= p) {
        t = p - (s - t);
        s = p - 1;
        t = Math.max(0, t);
      }
      l.guaranteeRange(t, s);
    }
  };
  this.mon(c, 'root-fill-start', function() {
    g = true;
    l.suspendEvents();
    if (k) {
      j = l.node;
      l.setNode();
    }
  });
  this.mon(c, 'root-fill-end', function() {
    g = false;
    if (k) {
      l.refreshFromTree();
      l.resumeEvents();
      m(0, c.viewSize || 50);
    } else {
      l.resumeEvents();
      d.refresh();
    }
  });
  if (k) {
    var n, a;
    this.mon(l, 'guaranteedrange', function(q, r, p) {
      n = r;
      a = p;
    });
    var f = function() {
      if (g) {
        return;
      }
      l.refreshFromTree();
      m(n || 0, a || 50);
      if (e.rendered) {
        i.onNormalViewScroll();
      }
    };
    this.mon(c, {append:f, insert:f, remove:f, move:f, expand:f, collapse:f, sort:f, buffer:1});
  }
  this.mon(c, 'filter', function(q, p) {
    l.filter.apply(l, p);
    d.refresh();
  });
  this.mon(c, 'clearfilter', function(p) {
    l.clearFilter();
    d.refresh();
  });
  this.mon(c, 'beforecascade', function(p) {
    l.suspendEvents();
  });
  this.mon(c, 'cascade', function(q, p) {
    l.resumeEvents();
    if (p.nbrAffected > 0) {
      e.refreshKeepingScroll(true);
      setTimeout(function() {
        o.saveScrollState();
        o.refresh();
        o.restoreScrollState();
      }, 0);
    }
  });
  if (k && h) {
    var b = h.onGuaranteedRange;
    h.onGuaranteedRange = function() {
      b.apply(this, arguments);
      Ext.suspendLayouts();
      d.refresh();
      Ext.resumeLayouts();
    };
  }
}, onNormalViewItemUpdate:function(a, b, d) {
  if (this.lockedGridDependsOnSchedule) {
    var c = this.lockedGrid.getView();
    c.suspendEvents();
    c.onUpdate(this.lockedGrid.store, a);
    c.resumeEvents();
  }
  var f = this.normalGrid.getView().getNode(b);
  var e = f.style.height !== d.style.height;
  f.style.height = d.style.height;
  this.normalHeights[b] = d.style.height;
  this.syncRowHeights(e);
}, afterNormalGridItemExpand:function(a) {
  var c = this;
  var b = c.getSchedulingView();
  a.cascadeBy(function(f) {
    if (f !== a) {
      var e = b.getNode(f);
      if (e) {
        var d = b.indexOf(e);
        c.normalHeights[d] = e.style.height;
      }
    }
  });
  c.syncRowHeights(true);
}, onViewItemAdd:function(c, d, b) {
  var e = this.normalGrid.getView();
  var f = this.lockedGrid.getView();
  if (e.getNodes().length !== f.getNodes().length) {
    return;
  }
  var a = this.normalHeights;
  Ext.each(c, function(h, g) {
    var i = e.getNode(h);
    if (i) {
      a[i.viewIndex] = i.style.height;
    }
  });
  this.syncRowHeights();
}, processColumns:function(b) {
  var a = this.callParent(arguments);
  var c = [];
  Ext.each(b, function(d) {
    if (d.position == 'right') {
      d.processed = true;
      if (!Ext.isNumber(d.width)) {
        Ext.Error.raise('"Right" columns must have a fixed width');
      }
      c.push(d);
      Ext.Array.remove(a.locked.items, d);
      a.lockedWidth -= d.width;
    }
  });
  if (this.orientation === 'horizontal') {
    a.normal.items = [{xtype:this.lightWeight ? 'singletimeaxiscolumn' : 'timeaxiscolumn', timeAxis:this.timeAxis, timeCellRenderer:this.timeCellRenderer, timeCellRendererScope:this.timeCellRendererScope, trackHeaderOver:this.trackHeaderOver}].concat(c);
  } else {
    a.locked.items = [Ext.apply({xtype:'verticaltimeaxis', width:100, timeAxis:this.timeAxis}, this.timeAxisColumnCfg || {})];
    a.lockedWidth = a.locked.items[0].width;
  }
  return a;
}, prepareFullRowHeightSync:function() {
  var g = this, h = g.normalGrid.getView(), j = g.lockedGrid.getView();
  if (!h.rendered || !j.rendered) {
    return;
  }
  var a = h.el, d = j.el, f = a.query(h.getItemSelector()), b = d.query(j.getItemSelector()), e = f.length, c = 0;
  g.lockedHeights = [];
  g.normalHeights = [];
  if (b.length !== e) {
    return;
  }
  for (; c < e; c++) {
    g.normalHeights[c] = f[c].style.height;
  }
}, onLockedViewRefresh:function() {
  this.prepareFullRowHeightSync();
  this.syncRowHeights();
}, onNormalViewRefresh:function() {
  var a = this.lockedGrid.getView();
  if (this.lockedGridDependsOnSchedule) {
    a.un('refresh', this.onLockedViewRefresh, this);
    this.lockedGrid.getView().refresh();
    a.on('refresh', this.onLockedViewRefresh, this);
  }
  this.prepareFullRowHeightSync();
  this.syncRowHeights();
}, syncRowHeights:function(b) {
  if (!this.lockedGrid.getView().rendered || !this.normalGrid.getView().rendered) {
    return;
  }
  var j = this, c = j.lockedHeights, k = j.normalHeights, a = [], h = c.length || k.length, f = 0, l, d, e, g;
  if (c.length || k.length) {
    l = j.lockedGrid.getView();
    d = j.normalGrid.getView();
    e = l.el.query(l.getItemSelector());
    g = d.el.query(d.getItemSelector());
    if (g.length !== e.length) {
      return;
    }
    for (; f < h; f++) {
      if (e[f] && k[f]) {
        e[f].style.height = k[f];
      }
    }
    j.lockedHeights = [];
    j.normalHeights = [];
  }
  if (b !== false) {
    j.updateSpacer();
  }
}, getMenuItems:function() {
  return function() {
    return Ext.grid.header.Container.prototype.getMenuItems.call(this);
  };
}, applyColumnsState:Ext.emptyFn, updateSpacer:function() {
  var g = this.lockedGrid.getView();
  var e = this.normalGrid.getView();
  if (g.rendered && e.rendered && g.el.child('table') && !this.getSchedulingView().__lightRefresh) {
    var f = this, c = g.el, d = e.el.dom, b = c.dom.id + '-spacer', h = d.offsetHeight - d.clientHeight + 'px';
    f.spacerEl = Ext.getDom(b);
    if (f.spacerEl) {
      f.spacerEl.style.height = h;
    } else {
      var a;
      if (this.store.buffered) {
        a = f.normalGrid.verticalScroller.stretcher.item(0).dom.parentNode === c.dom ? f.normalGrid.verticalScroller.stretcher.item(0) : f.normalGrid.verticalScroller.stretcher.item(1);
      } else {
        a = c;
      }
      Ext.core.DomHelper.append(a, {id:b, cls:this.store.buffered ? 'sch-locked-buffered-spacer' : '', style:'height: ' + h});
    }
  }
}, onLockedViewRender:function() {
  var d = this.normalGrid;
  if (!this.lockedStretcher) {
    var c = this.lockedGrid.getView().el;
    var a = this.lockedStretcher = c.createChild({cls:'x-stretcher', style:{position:'absolute', width:'1px', height:0, top:0, left:0}}, c.dom.firstChild);
  }
  if (!d.rendered) {
    d.getView().on('render', this.onLockedViewRender, this);
    return;
  }
  d.getView().el.un('scroll', this.onNormalViewScroll, this);
  d.getView().el.on('scroll', this.onNormalViewScroll, this);
  var b = d.verticalScroller;
  b.stretcher.addCls('x-stretcher');
  b.stretcher = new Ext.dom.CompositeElement([this.lockedStretcher, b.stretcher]);
}, onNormalViewGroupExpand:function() {
  this.prepareFullRowHeightSync();
  this.syncRowHeights();
}});
Ext.define('Sch.plugin.TreeCellEditing', {extend:'Ext.grid.plugin.CellEditing', init:function(a) {
  this._grid = a;
  this.on('beforeedit', this.checkReadOnly, this);
  this.callParent(arguments);
}, checkReadOnly:function() {
  var a = this._grid;
  if (!(a instanceof Sch.panel.TimelineTreePanel)) {
    a = a.up('tablepanel');
  }
  return !a.isReadOnly();
}, startEditByClick:function(c, a, h, b, g, d, f) {
  if (f.getTarget(c.expanderSelector)) {
    return;
  }
  this.callParent(arguments);
}, startEdit:function(a, f) {
  if (!a || !f) {
    return;
  }
  var d = this, b = d.getEditor(a, f), e = a.get(f.dataIndex), c = d.getEditingContext(a, f);
  a = c.record;
  f = c.column;
  d.completeEdit();
  if (f && !f.getEditor(a)) {
    return false;
  }
  if (b) {
    c.originalValue = c.value = e;
    if (d.beforeEdit(c) === false || d.fireEvent('beforeedit', c) === false || c.cancel) {
      return false;
    }
    d.context = c;
    d.setActiveEditor(b);
    d.setActiveRecord(a);
    d.setActiveColumn(f);
    d.grid.view.focusCell({column:c.colIdx, row:c.rowIdx});
    d.editTask.delay(15, b.startEdit, b, [d.getCell(a, f), c.value, c]);
  } else {
    d.grid.getView().getEl(f).focus(Ext.isWebKit || Ext.isIE ? 10 : false);
  }
}, getEditingContext:function(e, c) {
  var f = this, a = f.grid, i = a.store, b, d, g = a.getView(), h;
  if (Ext.isNumber(e)) {
    b = e;
    e = i.getAt(b);
  } else {
    if (i.indexOf) {
      b = i.indexOf(e);
    } else {
      b = g.indexOf(g.getNode(e));
    }
  }
  if (Ext.isNumber(c)) {
    d = c;
    c = a.headerCt.getHeaderAtIndex(d);
  } else {
    d = c.getIndex();
  }
  h = e.get(c.dataIndex);
  return {grid:a, record:e, field:c.dataIndex, value:h, row:g.getNode(b), column:c, rowIdx:b, colIdx:d};
}, startEditByPosition:function(a) {
  var f = this, d = f.grid, h = d.getSelectionModel(), b = f.view, e = this.view.getNode(a.row), g = d.headerCt.getHeaderAtIndex(a.column), c = b.getRecord(e);
  if (h.selectByPosition) {
    h.selectByPosition(a);
  }
  f.startEdit(c, g);
}, onEditComplete:function(c, g, b) {
  var f = this, d = f.grid, e = f.getActiveColumn(), h = d.getSelectionModel(), a;
  if (e) {
    a = f.context.record;
    f.setActiveEditor(null);
    f.setActiveColumn(null);
    f.setActiveRecord(null);
    if (!f.validateEdit()) {
      return;
    }
    if (!f.context.doNotUpdateRecord && !a.isEqual(g, b)) {
      a.set(e.dataIndex, g);
    }
    if (h.setCurrentPosition) {
      h.setCurrentPosition(h.getCurrentPosition());
    }
    d.getView().getEl(e).focus();
    f.context.value = g;
    f.fireEvent('edit', f, f.context);
  }
}});
Ext.define('Sch.feature.ColumnLines', {extend:'Sch.plugin.Lines', cls:'sch-column-line', showTip:false, requires:['Ext.data.Store'], init:function(b) {
  this.timeAxis = b.getTimeAxis();
  this.store = Ext.create('Ext.data.JsonStore', {model:Ext.define('Sch.model.TimeLine', {extend:'Ext.data.Model', fields:['start', {name:'Date', convert:function(d, c) {
    return c.data.start;
  }}]}), data:b.getOrientation() === 'horizontal' ? this.getData() : []});
  this.callParent(arguments);
  var a = this.schedulerView;
  a.timeAxis.on('reconfigure', this.populate, this);
}, populate:function() {
  var a = this.schedulerView;
  var b = a.getOrientation() === 'horizontal' && a.store.getCount() > 0;
  this.store.removeAll(b);
  if (b) {
    this.store.add(this.getData());
  }
}, getElementData:function() {
  var a = this.schedulerView;
  if (a.getOrientation() === 'horizontal' && a.store.getCount() > 0) {
    return this.callParent(arguments);
  }
  return [];
}, getData:function() {
  var a = [];
  this.timeAxis.forEachMainInterval(function(d, b, c) {
    if (c > 0) {
      a.push({start:d});
    }
  });
  a.push({start:this.timeAxis.getEnd()});
  return a;
}});
Ext.define('Sch.plugin.CurrentTimeLine', {extend:'Sch.plugin.Lines', tooltipText:'Current time', updateInterval:60000, autoUpdate:true, init:function(c) {
  var b = Ext.create('Ext.data.JsonStore', {model:Ext.define('TimeLineEvent', {extend:'Ext.data.Model', fields:['Date', 'Cls', 'Text']}), data:[{Date:new Date(), Cls:'sch-todayLine', Text:this.tooltipText}]});
  var a = b.first();
  if (this.autoUpdate) {
    this.runner = Ext.create('Ext.util.TaskRunner');
    this.runner.start({run:function() {
      a.set('Date', new Date());
    }, interval:this.updateInterval});
  }
  c.on('destroy', this.onHostDestroy, this);
  this.store = b;
  this.callParent(arguments);
}, onHostDestroy:function() {
  if (this.runner) {
    this.runner.stopAll();
  }
  if (this.store.autoDestroy) {
    this.store.destroy();
  }
}});
Ext.define('Sch.mixin.TimelineView', {requires:['Sch.column.Time', 'Sch.data.TimeAxis'], orientation:'horizontal', overScheduledEventClass:'sch-event-hover', selectedEventCls:'sch-event-selected', altColCls:'sch-col-alt', timeCellCls:'sch-timetd', timeCellSelector:'.sch-timetd', ScheduleEventMap:{click:'Click', dblclick:'DblClick', contextmenu:'ContextMenu', keydown:'KeyDown'}, suppressFitCheck:0, forceFit:false, inheritables:function() {
  return {cellBorderWidth:1, initComponent:function() {
    this.setOrientation(this.panel._top.orientation || this.orientation);
    this.addEvents('beforetooltipshow', 'scheduleclick', 'scheduledblclick', 'schedulecontextmenu', 'columnwidthchange');
    this.enableBubble('columnwidthchange');
    var a = {}, c = Sch.util.Date;
    a[c.DAY] = a[c.WEEK] = a[c.MONTH] = a[c.QUARTER] = a[c.YEAR] = null;
    Ext.applyIf(this, {eventPrefix:this.id + '-', largeUnits:a});
    this.callParent(arguments);
    if (this.orientation === 'horizontal') {
      this.getTimeAxisColumn().on('timeaxiscolumnreconfigured', this.checkHorizontalFit, this);
    }
    var b = this.panel._top;
    Ext.apply(this, {eventRendererScope:b.eventRendererScope, eventRenderer:b.eventRenderer, eventBorderWidth:b.eventBorderWidth, timeAxis:b.timeAxis, dndValidatorFn:b.dndValidatorFn || Ext.emptyFn, resizeValidatorFn:b.resizeValidatorFn || Ext.emptyFn, createValidatorFn:b.createValidatorFn || Ext.emptyFn, tooltipTpl:b.tooltipTpl, validatorFnScope:b.validatorFnScope || this, snapToIncrement:b.snapToIncrement, timeCellRenderer:b.timeCellRenderer, timeCellRendererScope:b.timeCellRendererScope, readOnly:b.readOnly, 
    eventResizeHandles:b.eventResizeHandles, enableEventDragDrop:b.enableEventDragDrop, enableDragCreation:b.enableDragCreation, dragConfig:b.dragConfig, dropConfig:b.dropConfig, resizeConfig:b.resizeConfig, createConfig:b.createConfig, tipCfg:b.tipCfg, orientation:b.orientation, getDateConstraints:b.getDateConstraints || Ext.emptyFn});
    if (this.emptyText) {
      this.emptyText = '\x3cspan class\x3d"sch-empty-text"\x3e' + this.emptyText + '\x3c/span\x3e';
    }
  }, onDestroy:function() {
    if (this.tip) {
      this.tip.destroy();
    }
    this.callParent(arguments);
  }, afterComponentLayout:function() {
    this.callParent(arguments);
    var b = this.getWidth();
    var a = this.getHeight();
    if (b === this.__prevWidth && a === this.__prevHeight) {
      return;
    }
    this.__prevWidth = b;
    this.__prevHeight = a;
    if (!this.lockable && !this.suppressFitCheck) {
      this.checkHorizontalFit();
    }
  }, beforeRender:function() {
    this.callParent(arguments);
    this.addCls('sch-timelineview');
    if (this.readOnly) {
      this.addCls(this._cmpCls + '-readonly');
    }
  }, afterRender:function() {
    this.callParent(arguments);
    if (this.overScheduledEventClass) {
      this.mon(this.el, {mouseover:this.onMouseOver, mouseout:this.onMouseOut, delegate:this.eventSelector, scope:this});
    }
    if (this.tooltipTpl) {
      this.el.on('mousemove', this.setupTooltip, this, {single:true});
    }
    this.setupTimeCellEvents();
  }, processUIEvent:function(f) {
    var c = this, a = f.getTarget(this.eventSelector), d = c.ScheduleEventMap, b = f.type;
    if (a && b in d) {
      this.fireEvent(this.scheduledEventName + b, this, this.resolveEventRecord(a), f);
    } else {
      this.callParent(arguments);
    }
  }, refresh:function() {
    this.fixedNodes = 0;
    this.callParent(arguments);
  }, clearViewEl:function() {
    var c = this, b = c.getTargetEl();
    b.down('table').remove();
    if (this.emptyText) {
      var a = b.down('.sch-empty-text');
      if (a) {
        a.remove();
      }
    }
  }, onMouseOver:function(b, a) {
    if (a !== this.lastItem) {
      this.lastItem = a;
      Ext.fly(a).addCls(this.overScheduledEventClass);
      this.fireEvent('eventmouseenter', this, this.resolveEventRecord(a), b);
    }
  }, onMouseOut:function(b, a) {
    if (this.lastItem) {
      if (!b.within(this.lastItem, true, true)) {
        Ext.fly(this.lastItem).removeCls(this.overScheduledEventClass);
        this.fireEvent('eventmouseleave', this, this.resolveEventRecord(this.lastItem), b);
        delete this.lastItem;
      }
    }
  }, highlightItem:function(b) {
    if (b) {
      var a = this;
      a.clearHighlight();
      a.highlightedItem = b;
      Ext.fly(b).addCls(a.overItemCls);
    }
  }, shouldUpdateCell:function() {
    return true;
  }};
}, hasRightColumns:function() {
  return this.headerCt.items.getCount() > 1;
}, checkHorizontalFit:function() {
  if (this.orientation === 'horizontal') {
    var a = this.getActualTimeColumnWidth();
    var c = this.getFittingColumnWidth();
    if (this.forceFit) {
      if (c != a) {
        this.fitColumns();
      }
    } else {
      if (this.snapToIncrement) {
        var b = this.calculateTimeColumnWidth(a);
        if (b > 0 && b !== a) {
          this.setColumnWidth(b);
        }
      } else {
        if (a < c) {
          this.fitColumns();
        }
      }
    }
  }
}, getTimeAxisColumn:function() {
  return this.headerCt.items.get(0);
}, getFirstTimeColumn:function() {
  return this.headerCt.getGridColumns()[0];
}, getFormattedDate:function(a) {
  return Ext.Date.format(a, this.getDisplayDateFormat());
}, getFormattedEndDate:function(d, a) {
  var b = this.timeAxis, c = b.getResolution().unit;
  if (c in this.largeUnits && d.getHours() === 0 && d.getMinutes() === 0 && !(d.getYear() === a.getYear() && d.getMonth() === a.getMonth() && d.getDate() === a.getDate())) {
    d = Sch.util.Date.add(d, Sch.util.Date.DAY, -1);
  }
  return Ext.Date.format(d, this.getDisplayDateFormat());
}, getDisplayDateFormat:function() {
  return this.displayDateFormat;
}, setDisplayDateFormat:function(a) {
  this.displayDateFormat = a;
}, getSingleUnitInPixels:function(a) {
  return Sch.util.Date.getUnitToBaseUnitRatio(this.timeAxis.getUnit(), a) * this.getSingleTickInPixels() / this.timeAxis.getIncrement();
}, getSingleTickInPixels:function() {
  throw 'Must be implemented by horizontal/vertical';
}, scrollEventIntoView:function(c, a) {
  var b = this.getOuterElementFromEventRecord(c);
  if (b) {
    b.scrollIntoView(this.el);
    if (a) {
      if (typeof a === 'boolean') {
        b.highlight();
      } else {
        b.highlight(null, a);
      }
    }
  }
}, calculateTimeColumnWidth:function(e) {
  if (!this.panel.rendered) {
    return e;
  }
  var h = this.forceFit;
  var b = 0, d = this.timeAxis.getUnit(), k = this.timeAxis.getCount(), g = Number.MAX_VALUE;
  if (this.snapToIncrement) {
    var i = this.timeAxis.getResolution(), j = i.unit, c = i.increment;
    g = Sch.util.Date.getUnitToBaseUnitRatio(d, j) * c;
  }
  var f = Sch.util.Date.getMeasuringUnit(d);
  g = Math.min(g, Sch.util.Date.getUnitToBaseUnitRatio(d, f));
  var a = Math.floor(this.getAvailableWidthForSchedule() / k);
  b = h || e < a ? a : e;
  if (g > 0 && (!h || g < 1)) {
    b = Math.round(Math.max(1, Math[h ? 'floor' : 'round'](g * b)) / g);
  }
  return b;
}, getFittingColumnWidth:function() {
  var a = Math.floor(this.getAvailableWidthForSchedule() / this.timeAxis.getCount());
  return this.calculateTimeColumnWidth(a);
}, fitColumns:function(b) {
  var a = 0;
  if (this.orientation === 'horizontal') {
    a = this.getFittingColumnWidth();
  } else {
    a = Math.floor((this.panel.getWidth() - Ext.getScrollbarSize().width - 1) / this.headerCt.getColumnCount());
  }
  this.setColumnWidth(a, b);
}, getAvailableWidthForSchedule:function() {
  var c = this.lastBox && this.lastBox.width || this.getWidth();
  var a = this.headerCt.items.items;
  for (var b = 1; b < a.length; b++) {
    c -= a[b].getWidth();
  }
  return c - Ext.getScrollbarSize().width - 1;
}, getRightColumnsWidth:function() {
  var c = 0;
  var a = this.headerCt.items.items;
  for (var b = 1; b < a.length; b++) {
    c += a[b].getWidth();
  }
  return c;
}, fixRightColumnsPositions:function() {
  var a = this.headerCt.items.items;
  var c = a[0].getWidth();
  for (var b = 1; b < a.length; b++) {
    var d = a[b];
    d.el.setLeft(c);
    c += d.getWidth();
  }
}, getElementFromEventRecord:function(a) {
  return Ext.get(this.eventPrefix + a.internalId);
}, getEventNodeByRecord:function(a) {
  return document.getElementById(this.eventPrefix + a.internalId);
}, getOuterElementFromEventRecord:function(a) {
  return Ext.get(this.eventPrefix + a.internalId);
}, resolveColumnIndex:function(a) {
  return Math.floor(a / this.getActualTimeColumnWidth());
}, getStartEndDatesFromRegion:function(b, a) {
  throw 'Must be implemented by horizontal/vertical';
}, setupTooltip:function() {
  var b = this, a = Ext.apply({renderTo:Ext.getBody(), delegate:b.eventSelector, target:b.el, anchor:'b'}, b.tipCfg);
  b.tip = Ext.create('Ext.ToolTip', a);
  b.tip.on({beforeshow:function(d) {
    if (!d.triggerElement || !d.triggerElement.id) {
      return false;
    }
    var c = this.resolveEventRecord(d.triggerElement);
    if (!c || this.fireEvent('beforetooltipshow', this, c) === false) {
      return false;
    }
    d.update(this.tooltipTpl.apply(this.getDataForTooltipTpl(c)));
    return true;
  }, scope:this});
}, getDataForTooltipTpl:function(a) {
  return a.data;
}, getTimeResolution:function() {
  return this.timeAxis.getResolution();
}, setTimeResolution:function(b, a) {
  this.timeAxis.setResolution(b, a);
  if (this.snapToIncrement) {
    this.refreshKeepingScroll();
  }
}, getEventIdFromDomNodeId:function(a) {
  return a.substring(this.eventPrefix.length);
}, getDateFromDomEvent:function(b, a) {
  return this.getDateFromXY(b.getXY(), a);
}, handleScheduleEvent:function(c) {
  var b = c.getTarget('.' + this.timeCellCls, 2);
  if (b) {
    var a = this.getDateFromDomEvent(c, 'floor');
    this.fireEvent('schedule' + c.type, this, a, this.indexOf(this.findItemByChild(b)), c);
  }
}, setupTimeCellEvents:function() {
  this.mon(this.el, {click:this.handleScheduleEvent, dblclick:this.handleScheduleEvent, contextmenu:this.handleScheduleEvent, scope:this}, this);
}, getSnapPixelAmount:function() {
  if (this.snapToIncrement) {
    var a = this.timeAxis.getResolution();
    return (a.increment || 1) * this.getSingleUnitInPixels(a.unit);
  } else {
    return 1;
  }
}, getActualTimeColumnWidth:function() {
  return this.headerCt.items.get(0).getTimeColumnWidth();
}, setSnapEnabled:function(a) {
  this.snapToIncrement = a;
  if (a) {
    this.refreshKeepingScroll();
  }
}, setReadOnly:function(a) {
  this.readOnly = a;
  this[a ? 'addCls' : 'removeCls'](this._cmpCls + '-readonly');
}, isReadOnly:function() {
  return this.readOnly;
}, setOrientation:function(a) {
  this.orientation = a;
  Ext.apply(this, Sch.view[Ext.String.capitalize(a)].prototype.props);
}, getOrientation:function() {
  return this.orientation;
}, translateToScheduleCoordinate:function(a) {
  throw 'Abstract method call!';
}, translateToPageCoordinate:function(a) {
  throw 'Abstract method call!';
}, getDateFromXY:function(c, b, a) {
  throw 'Abstract method call!';
}, getXYFromDate:function(a, b) {
  throw 'Abstract method call!';
}, getTimeSpanRegion:function(a, b) {
  throw 'Abstract method call!';
}, getStart:function() {
  return this.timeAxis.getStart();
}, getEnd:function() {
  return this.timeAxis.getEnd();
}, setBarMargin:function(b, a) {
  this.barMargin = b;
  if (!a) {
    this.refreshKeepingScroll();
  }
}, setRowHeight:function(a, b) {
  this.rowHeight = a || 24;
  if (this.rendered && !b) {
    this.refreshKeepingScroll();
  }
}, refreshKeepingScroll:function(a) {
  this.saveScrollState();
  if (this.lightRefresh) {
    this.lightRefresh();
  } else {
    this.refresh();
  }
  this.restoreScrollState();
}, refreshKeepingResourceScroll:function(c) {
  var d = this.el.dom, b = d.scrollTop, a = d.scrollLeft;
  if (this.lightRefresh) {
    this.lightRefresh();
  } else {
    this.refresh();
  }
  if (this.getOrientation() === 'horizontal') {
    d.scrollTop = b;
  } else {
    d.scrollLeft = a;
  }
}, lightRefresh:function() {
  var a = this.refreshSize;
  Ext.suspendLayouts();
  this.refreshSize = Ext.emptyFn;
  this.__lightRefresh = true;
  this.refresh();
  delete this.__lightRefresh;
  this.refreshSize = a;
  Ext.resumeLayouts();
}});
Ext.apply(Sch, {VERSION:'2.1.7'});
Ext.define('Sch.view.Horizontal', {props:{translateToScheduleCoordinate:function(a) {
  return a - this.el.getX() + this.el.getScroll().left;
}, translateToPageCoordinate:function(a) {
  return a + this.el.getX() - this.el.getScroll().left;
}, getDateFromXY:function(h, f, e) {
  var b, a = e ? h[0] : this.translateToScheduleCoordinate(h[0]), d = a / this.getActualTimeColumnWidth(), c = this.timeAxis.getCount();
  if (d < 0 || d > c) {
    b = null;
  } else {
    var g = d - this.resolveColumnIndex(a);
    if (g > 2 && d >= c) {
      return null;
    }
    b = this.timeAxis.getDateFromTick(d, f);
  }
  return b;
}, getXYFromDate:function(b, d) {
  var a, c = this.timeAxis.getTickFromDate(b);
  if (c >= 0) {
    a = this.getActualTimeColumnWidth() * c;
  }
  if (d === false) {
    a = this.translateToPageCoordinate(a);
  }
  return [a, 0];
}, getEventBox:function(e, b) {
  var a = Math.floor(this.getXYFromDate(e)[0]), c = Math.floor(this.getXYFromDate(b)[0]), d = Math;
  if (this.managedEventSizing) {
    return {top:Math.max(0, this.barMargin - (Ext.isIE && !Ext.isStrict) ? 0 : this.eventBorderWidth - this.cellBorderWidth), left:d.min(a, c), width:d.max(1, d.abs(a - c) - this.eventBorderWidth), height:this.rowHeight - 2 * this.barMargin - this.eventBorderWidth};
  }
  return {left:d.min(a, c), width:d.max(1, d.abs(a - c))};
}, layoutEvents:function(a) {
  var c = Ext.Array.clone(a);
  c.sort(this.sortEvents);
  var b = this.layoutEventsInBands(0, c);
  return b;
}, layoutEventsInBands:function(d, a) {
  var c = a[0], b = d === 0 ? this.barMargin : d * this.rowHeight - (d - 1) * this.barMargin;
  if (b >= this.cellBorderWidth) {
    b -= this.cellBorderWidth;
  }
  while (c) {
    c.top = b;
    Ext.Array.remove(a, c);
    c = this.findClosestSuccessor(c, a);
  }
  d++;
  if (a.length > 0) {
    return this.layoutEventsInBands(d, a);
  } else {
    return d;
  }
}, getScheduleRegion:function(d, f) {
  var h = d ? Ext.fly(this.getNodeByRecord(d)).getRegion() : this.el.down('.x-grid-table').getRegion(), e = this.timeAxis.getStart(), j = this.timeAxis.getEnd(), b = this.getDateConstraints(d, f) || {start:e, end:j}, c = this.translateToPageCoordinate(this.getXYFromDate(b.start)[0]), i = this.translateToPageCoordinate(this.getXYFromDate(b.end)[0]) - this.eventBorderWidth, g = h.top + this.barMargin, a = h.bottom - this.barMargin - this.eventBorderWidth;
  return new Ext.util.Region(g, Math.max(c, i), a, Math.min(c, i));
}, getResourceRegion:function(h, d, g) {
  var k = Ext.fly(this.getNodeByRecord(h)).getRegion(), i = this.timeAxis.getStart(), n = this.timeAxis.getEnd(), c = d ? Sch.util.Date.max(i, d) : i, e = g ? Sch.util.Date.min(n, g) : n, f = this.getXYFromDate(c)[0], m = this.getXYFromDate(e)[0] - this.eventBorderWidth, l = this.el.getTop(), b = this.el.getScroll(), j = k.top + 1 - l + b.top, a = k.bottom - 1 - l + b.top;
  return new Ext.util.Region(j, Math.max(f, m), a, Math.min(f, m));
}, collectRowData:function(g, p, o) {
  var c = this.eventStore.getEventsForResource(p);
  if (c.length === 0 || this.headerCt.getColumnCount() === 0) {
    g.rowHeight = this.rowHeight;
    return g;
  }
  var a = Sch.util.Date, m = this.timeAxis, n = m.getStart(), r = m.getEnd(), k = [], j, f;
  for (j = 0, f = c.length; j < f; j++) {
    var b = c[j], d = b.getStartDate(), h = b.getEndDate();
    if (d && h && m.timeSpanInAxis(d, h)) {
      var q = this.generateTplData(b, n, r, p, o);
      k[k.length] = q;
    }
  }
  var e = 1;
  if (this.dynamicRowHeight) {
    e = this.layoutEvents(k);
  }
  g.rowHeight = e * this.rowHeight - (e - 1) * this.barMargin;
  g[this.getFirstTimeColumn().id] += '\x26#160;' + this.eventTpl.apply(k);
  return g;
}, resolveResource:function(a) {
  var b = this.findItemByChild(a);
  if (b) {
    return this.getRecord(b);
  }
  return null;
}, getTimeSpanRegion:function(b, h, g) {
  var d = this.getXYFromDate(b)[0], f = this.getXYFromDate(h || b)[0], a, c;
  if (this.store.buffered) {
    var e;
    if (this.panel.verticalScroller.stretcher instanceof Ext.CompositeElement) {
      e = this.panel.verticalScroller.stretcher.first();
    } else {
      e = this.el.down('.x-stretcher');
    }
    if (e.dom.clientHeight) {
      c = e;
    }
  }
  if (!c) {
    c = this.el.down('.x-grid-table');
  }
  if (g) {
    a = Math.max(c ? c.dom.clientHeight : 0, this.el.dom.clientHeight);
  } else {
    a = c ? c.dom.clientHeight : 0;
  }
  return new Ext.util.Region(0, Math.max(d, f), a, Math.min(d, f));
}, getStartEndDatesFromRegion:function(c, b) {
  var a = this.getDateFromXY([c.left, 0], b), d = this.getDateFromXY([c.right, 0], b);
  if (d && a) {
    return {start:Sch.util.Date.min(a, d), end:Sch.util.Date.max(a, d)};
  } else {
    return null;
  }
}, onEventAdd:function(c, e) {
  var f = {};
  for (var b = 0, a = e.length; b < a; b++) {
    var d = e[b].getResource();
    if (d) {
      f[d.getId()] = d;
    }
  }
  Ext.Object.each(f, function(h, g) {
    this.onUpdate(this.resourceStore, g);
  }, this);
}, onEventRemove:function(c, a) {
  var b = this.getElementFromEventRecord(a);
  if (b) {
    var d = this.resolveResource(b);
    b.fadeOut({callback:function() {
      if (Ext.tree.View && this instanceof Ext.tree.View && this.store.indexOf(d)) {
        this.onUpdate(this.store, d);
      } else {
        if (this.resourceStore.indexOf(d) >= 0) {
          this.onUpdate(this.resourceStore, d);
        }
      }
    }, scope:this});
  }
}, onEventUpdate:function(b, c, a) {
  var e, d = c.previous;
  if (d && d[c.resourceIdField]) {
    e = c.getResource(d[c.resourceIdField]);
    if (e) {
      this.onUpdate(this.resourceStore, e);
    }
  }
  e = c.getResource();
  if (e) {
    this.onUpdate(this.resourceStore, e);
  }
}, getSingleTickInPixels:function() {
  return this.getActualTimeColumnWidth();
}, getColumnWidth:function() {
  if (this.getTimeAxisColumn()) {
    return this.getTimeAxisColumn().getTimeColumnWidth();
  }
}, setColumnWidth:function(b, a) {
  if (this.getTimeAxisColumn()) {
    this.getTimeAxisColumn().setTimeColumnWidth(b);
    if (!a) {
      this.refreshKeepingScroll();
    }
  }
  this.fireEvent('columnwidthchange', this, b);
}, getVisibleDateRange:function() {
  if (!this.rendered) {
    return null;
  }
  var c = this.getEl().getScroll(), b = this.panel.getStart(), f = this.panel.getEnd(), e = this.getWidth(), d = this.getEl().down('.x-grid-table').dom, a = d.clientWidth;
  if (a < e) {
    return {startDate:b, endDate:f};
  }
  return {startDate:this.getDateFromXY([c.left, 0], null, true), endDate:this.getDateFromXY([Math.min(c.left + e, a), 0], null, true)};
}}});
Ext.define('Sch.view.TimelineTreeView', {extend:'Ext.tree.View', mixins:['Sch.mixin.TimelineView'], requires:['Sch.patches.TreeView'], cellBorderWidth:0, beforeRender:function() {
  this.addCls('sch-timelinetreeview');
  this.callParent(arguments);
}}, function() {
  this.override(Sch.mixin.TimelineView.prototype.inheritables() || {});
});
Ext.define('Sch.mixin.Zoomable', {zoomLevels:[{width:200, increment:1, resolution:1, preset:'year'}, {width:100, increment:1, resolution:7, preset:'monthAndYear'}, {width:30, increment:1, resolution:1, preset:'weekDateAndMonth'}, {width:35, increment:1, resolution:1, preset:'weekAndMonth'}, {width:50, increment:1, resolution:1, preset:'weekAndMonth'}, {width:85, increment:1, resolution:1, preset:'weekAndMonth'}, {width:50, increment:1, resolution:1, preset:'weekAndDay', resolutionUnit:'HOUR'}, {width:100, 
increment:1, resolution:1, preset:'weekAndDay', resolutionUnit:'HOUR'}, {width:50, increment:6, resolution:30, preset:'hourAndDay', resolutionUnit:'MINUTE'}, {width:100, increment:6, resolution:30, preset:'hourAndDay', resolutionUnit:'MINUTE'}, {width:60, increment:2, resolution:30, preset:'hourAndDay', resolutionUnit:'MINUTE'}, {width:60, increment:1, resolution:30, preset:'hourAndDay', resolutionUnit:'MINUTE'}, {width:30, increment:15, resolution:5, preset:'minuteAndHour'}, {width:60, increment:15, 
resolution:5, preset:'minuteAndHour'}, {width:130, increment:15, resolution:5, preset:'minuteAndHour'}, {width:60, increment:5, resolution:5, preset:'minuteAndHour'}, {width:100, increment:5, resolution:5, preset:'minuteAndHour'}], minZoomLevel:null, maxZoomLevel:null, visibleZoomFactor:5, cachedCenterDate:null, isFirstZoom:true, isZooming:false, initializeZooming:function() {
  this.zoomLevels = this.zoomLevels.slice();
  this.setMinZoomLevel(this.minZoomLevel || 0);
  this.setMaxZoomLevel(this.maxZoomLevel !== null ? this.maxZoomLevel : this.zoomLevels.length - 1);
  this.on('viewchange', this.clearCenterDateCache, this);
}, getZoomLevelUnit:function(b) {
  var a = Sch.preset.Manager.getPreset(b.preset).headerConfig;
  return a.bottom ? a.bottom.unit : a.middle.unit;
}, getMilliSecondsPerPixelForZoomLevel:function(b) {
  var a = Sch.util.Date;
  return Math.round((a.add(new Date(1, 0, 1), this.getZoomLevelUnit(b), b.increment) - new Date(1, 0, 1)) / b.width);
}, presetToZoomLevel:function(e) {
  var d = Sch.preset.Manager.getPreset(e);
  var c = d.headerConfig;
  var a = c.bottom;
  var b = c.middle;
  return {preset:e, increment:(a ? a.increment : b.increment) || 1, resolution:d.timeResolution.increment, resolutionUnit:d.timeResolution.unit, width:d.timeColumnWidth};
}, calculateCurrentZoomLevel:function() {
  var d = this.presetToZoomLevel(this.viewPreset);
  var c = this.timeAxis.headerConfig;
  var a = c.bottom;
  var b = c.middle;
  d.width = this.timeAxis.preset.timeColumnWidth;
  d.increment = (a ? a.increment : b.increment) || 1;
  return d;
}, getCurrentZoomLevelIndex:function() {
  var f = this.calculateCurrentZoomLevel();
  var b = this.getMilliSecondsPerPixelForZoomLevel(f);
  var e = this.zoomLevels;
  for (var c = 0; c < e.length; c++) {
    var d = this.getMilliSecondsPerPixelForZoomLevel(e[c]);
    if (d == b) {
      return c;
    }
    if (c === 0 && b > d) {
      return -0.5;
    }
    if (c == e.length - 1 && b < d) {
      return e.length - 1 + 0.5;
    }
    var a = this.getMilliSecondsPerPixelForZoomLevel(e[c + 1]);
    if (d > b && b > a) {
      return c + 0.5;
    }
  }
  throw "Can't find current zoom level index";
}, setMaxZoomLevel:function(a) {
  if (a < 0 || a >= this.zoomLevels.length) {
    throw new Error('Invalid range for `setMinZoomLevel`');
  }
  this.maxZoomLevel = a;
}, setMinZoomLevel:function(a) {
  if (a < 0 || a >= this.zoomLevels.length) {
    throw new Error('Invalid range for `setMinZoomLevel`');
  }
  this.minZoomLevel = a;
}, getViewportCenterDateCached:function() {
  if (this.cachedCenterDate) {
    return this.cachedCenterDate;
  }
  return this.cachedCenterDate = this.getViewportCenterDate();
}, clearCenterDateCache:function() {
  this.cachedCenterDate = null;
}, zoomToLevel:function(b) {
  b = Ext.Number.constrain(b, this.minZoomLevel, this.maxZoomLevel);
  var n = this.calculateCurrentZoomLevel();
  var d = this.getMilliSecondsPerPixelForZoomLevel(n);
  var i = this.zoomLevels[b];
  var a = this.getMilliSecondsPerPixelForZoomLevel(i);
  if (d == a) {
    return null;
  }
  var p = this;
  var j = this.getSchedulingView();
  var f = j.getEl();
  if (this.isFirstZoom) {
    this.isFirstZoom = false;
    f.on('scroll', this.clearCenterDateCache, this);
  }
  var h = this.orientation == 'vertical';
  var e = this.getViewportCenterDateCached();
  var k = h ? f.getHeight() : f.getWidth();
  var l = Ext.clone(Sch.preset.Manager.getPreset(i.preset));
  var o = this.calculateOptimalDateRange(e, k, i);
  var c = l.headerConfig;
  var g = c.bottom;
  var r = c.middle;
  l[h ? 'rowHeight' : 'timeColumnWidth'] = i.width;
  if (g) {
    g.increment = i.increment;
  } else {
    r.increment = i.increment;
  }
  this.isZooming = true;
  this.viewPreset = i.preset;
  var m = g ? g.unit : r.unit;
  this.timeAxis.reconfigure({preset:l, headerConfig:c, unit:m, increment:i.increment, resolutionUnit:Sch.util.Date.getUnitByName(i.resolutionUnit || m), resolutionIncrement:i.resolution, weekStartDay:this.weekStartDay, mainUnit:r.unit, shiftUnit:l.shiftUnit, shiftIncrement:l.shiftIncrement || 1, defaultSpan:l.defaultSpan || 1, start:o.startDate || this.getStart(), end:o.endDate || this.getEnd()});
  var q = j.getXYFromDate(e, true);
  f.on('scroll', function() {
    p.cachedCenterDate = e;
  }, this, {single:true});
  if (h) {
    f.scrollTo('top', q[1] - k / 2);
  } else {
    f.scrollTo('left', q[0] - k / 2);
  }
  p.isZooming = false;
  this.fireEvent('zoomchange', this, b);
  return b;
}, zoomIn:function(a) {
  a = a || 1;
  var b = this.getCurrentZoomLevelIndex();
  if (b >= this.zoomLevels.length - 1) {
    return null;
  }
  return this.zoomToLevel(Math.floor(b) + a);
}, zoomOut:function(a) {
  a = a || 1;
  var b = this.getCurrentZoomLevelIndex();
  if (b <= 0) {
    return null;
  }
  return this.zoomToLevel(Math.ceil(b) - a);
}, zoomInFull:function() {
  return this.zoomToLevel(this.maxZoomLevel);
}, zoomOutFull:function() {
  return this.zoomToLevel(this.minZoomLevel);
}, calculateOptimalDateRange:function(c, h, e) {
  var b = Sch.util.Date;
  var i = Sch.preset.Manager.getPreset(e.preset).headerConfig;
  var f = i.top ? i.top.unit : i.middle.unit;
  var j = this.getZoomLevelUnit(e);
  var d = Math.ceil(h / e.width * e.increment * this.visibleZoomFactor / 2);
  var a = b.add(c, j, -d);
  var g = b.add(c, j, d);
  return {startDate:this.timeAxis.floorDate(a, false, f), endDate:this.timeAxis.ceilDate(g, false, f)};
}});
Ext.define('Sch.mixin.TimelinePanel', {requires:['Sch.util.Patch', 'Sch.patches.LoadMask', 'Sch.patches.Model', 'Sch.patches.Table', 'Sch.data.TimeAxis', 'Sch.feature.ColumnLines', 'Sch.view.Locking', 'Sch.mixin.Lockable', 'Sch.preset.Manager'], mixins:['Sch.mixin.Zoomable'], orientation:'horizontal', weekStartDay:1, snapToIncrement:false, readOnly:false, eventResizeHandles:'both', viewPreset:'weekAndDay', trackHeaderOver:true, startDate:null, endDate:null, eventBorderWidth:1, syncCellHeight:Ext.emptyFn, 
tooltipTpl:null, tipCfg:{cls:'sch-tip', showDelay:1000, hideDelay:0, autoHide:true, anchor:'b'}, lightWeight:true, timeCellRenderer:null, timeCellRendererScope:null, inheritables:function() {
  return {columnLines:true, enableColumnMove:false, enableLocking:true, lockable:true, lockedXType:null, normalXType:null, initComponent:function() {
    this.lightWeight = this.lightWeight && !this.timeCellRenderer;
    this.addEvents('timeheaderdblclick', 'beforeviewchange', 'viewchange');
    if (!this.timeAxis) {
      this.timeAxis = Ext.create('Sch.data.TimeAxis');
    }
    if (!this.columns && !this.colModel) {
      this.columns = [];
    }
    this.timeAxis.on('reconfigure', this.onTimeAxisReconfigure, this);
    if (this.enableLocking) {
      this.self.mixin('lockable', Sch.mixin.Lockable);
      var b = 0, a = this.columns.length, c;
      for (; b < a; ++b) {
        c = this.columns[b];
        if (c.locked !== false) {
          c.locked = true;
        }
      }
      this.switchViewPreset(this.viewPreset, this.startDate, this.endDate, true);
    }
    this.callParent(arguments);
    if (this.lockable) {
      this.applyViewSettings(this.timeAxis.preset);
      if (!this.viewPreset) {
        throw 'You must define a valid view preset object. See Sch.preset.Manager class for reference';
      }
      if (this.lightWeight && this.columnLines) {
        this.columnLinesFeature = new Sch.feature.ColumnLines();
        this.columnLinesFeature.init(this);
      }
    }
    this.initializeZooming();
    this.relayEvents(this.getView(), ['beforetooltipshow', 'scheduleclick', 'scheduledblclick', 'schedulecontextmenu']);
  }, getState:function() {
    var a = this, b = a.callParent(arguments);
    Ext.apply(b, {viewPreset:a.viewPreset, startDate:a.getStart(), endDate:a.getEnd(), zoomMinLevel:a.zoomMinLevel, zoomMaxLevel:a.zoomMaxLevel, currentZoomLevel:a.currentZoomLevel});
    return b;
  }, getOrientation:function() {
    return this.orientation;
  }, applyState:function(b) {
    var a = this;
    a.callParent(arguments);
    if (b && b.viewPreset) {
      a.switchViewPreset(b.viewPreset, b.startDate, b.endDate);
    }
    if (b && b.currentZoomLevel) {
      a.zoomToLevel(b.currentZoomLevel);
    }
  }, beforeRender:function() {
    this.callParent(arguments);
    if (this.lockable) {
      this.addCls('sch-' + this.orientation);
    }
  }, afterRender:function() {
    this.callParent(arguments);
    if (this.lockable) {
      this.lockedGrid.on('itemdblclick', function(d, c, e, g, f) {
        if (this.orientation == 'vertical' && c) {
          this.fireEvent('timeheaderdblclick', this, c.get('start'), c.get('end'), g, f);
        }
      }, this);
    } else {
      var b = this.headerCt;
      if (b && b.reorderer && b.reorderer.dropZone) {
        var a = b.reorderer.dropZone;
        a.positionIndicator = Ext.Function.createSequence(a.positionIndicator, function() {
          this.valid = false;
        });
      }
    }
  }, delayScroll:function() {
    var a = this.getScrollTarget().el;
    if (a) {
      this.scrollTask.delay(10, function() {
        if (a.dom) {
          this.syncHorizontalScroll(a.dom.scrollLeft);
        }
      }, this);
    }
  }};
}, setReadOnly:function(a) {
  this.getSchedulingView().setReadOnly(a);
}, isReadOnly:function() {
  return this.getSchedulingView().isReadOnly();
}, switchViewPreset:function(d, a, f, b) {
  if (this.fireEvent('beforeviewchange', this, d, a, f) !== false) {
    if (Ext.isString(d)) {
      this.viewPreset = d;
      d = Sch.preset.Manager.getPreset(d);
    }
    if (!d) {
      throw 'View preset not found';
    }
    var e = d.headerConfig;
    var c = {unit:e.bottom ? e.bottom.unit : e.middle.unit, increment:(e.bottom ? e.bottom.increment : e.middle.increment) || 1, resolutionUnit:d.timeResolution.unit, resolutionIncrement:d.timeResolution.increment, weekStartDay:this.weekStartDay, mainUnit:e.middle.unit, shiftUnit:d.shiftUnit, headerConfig:d.headerConfig, shiftIncrement:d.shiftIncrement || 1, preset:d, defaultSpan:d.defaultSpan || 1};
    if (b) {
      c.start = a || new Date();
      c.end = f;
    } else {
      c.start = a || this.timeAxis.getStart();
      c.end = f;
    }
    if (!b) {
      this.applyViewSettings(d);
    }
    this.timeAxis.reconfigure(c);
  }
}, applyViewSettings:function(b) {
  var a = this.getSchedulingView();
  a.setDisplayDateFormat(b.displayDateFormat);
  if (this.orientation === 'horizontal') {
    a.setRowHeight(this.rowHeight || b.rowHeight, true);
  }
}, getStart:function() {
  return this.timeAxis.getStart();
}, getEnd:function() {
  return this.timeAxis.getEnd();
}, getViewportCenterDate:function() {
  var b = this.getSchedulingView(), c = b.getEl(), a = c.getScroll(), d;
  if (this.orientation === 'vertical') {
    d = [0, a.top + c.getHeight() / 2];
  } else {
    d = [a.left + c.getWidth() / 2, 0];
  }
  return b.getDateFromXY(d, null, true);
}, setTimeColumnWidth:function(b, a) {
  this.getSchedulingView().setColumnWidth(b, a);
}, onTimeAxisReconfigure:function() {
  this.fireEvent('viewchange', this);
  if (this.stateful && this.lockedGrid) {
    this.saveState();
  }
}, getColumnsState:function() {
  var b = this, a = b.lockedGrid.headerCt.getColumnsState();
  return a;
}, shiftNext:function(a) {
  this.timeAxis.shiftNext(a);
}, shiftPrevious:function(a) {
  this.timeAxis.shiftPrevious(a);
}, goToNow:function() {
  this.setTimeSpan(new Date());
}, setTimeSpan:function(b, a) {
  if (this.timeAxis) {
    this.timeAxis.setTimeSpan(b, a);
  }
}, setStart:function(a) {
  this.setTimeSpan(a);
}, setEnd:function(a) {
  this.setTimeSpan(null, a);
}, getTimeAxis:function() {
  return this.timeAxis;
}, getResourceByEventRecord:function(a) {
  return a.getResource();
}, scrollToDate:function(c, b) {
  var a = this.getSchedulingView(), d = a.getXYFromDate(c, true);
  if (this.orientation == 'horizontal') {
    a.getEl().scrollTo('left', Math.max(0, d[0]), b);
  } else {
    a.getEl().scrollTo('top', Math.max(0, d[1]), b);
  }
}, getSchedulingView:function() {
  return this.lockable ? this.normalGrid.getView() : this.getView();
}, setOrientation:function(a) {
  this.removeCls('sch-' + this.orientation);
  this.addCls('sch-' + a);
  this.orientation = a;
}});
Ext.define('Sch.panel.TimelineTreePanel', {extend:'Ext.tree.Panel', requires:['Ext.data.TreeStore'], mixins:['Sch.mixin.TimelinePanel'], useArrows:true, rootVisible:false, constructor:function(a) {
  a = a || {};
  a.animate = false;
  this.callParent(arguments);
}, initComponent:function() {
  this.callParent(arguments);
  if (this.lockable && this.lockedGrid.headerCt.query('treecolumn').length === 0) {
    Ext.Error.raise("You must define an Ext.tree.Column (or use xtype : 'treecolumn').");
  }
}, onRootChange:function(a) {
  if (!this.lockable) {
    this.callParent(arguments);
  }
}}, function() {
  this.override(Sch.mixin.TimelinePanel.prototype.inheritables() || {});
});
Ext.define('Sch.plugin.Printable', {extend:'Ext.AbstractPlugin', lockableScope:'top', docType:'\x3c!DOCTYPE HTML\x3e', beforePrint:Ext.emptyFn, afterPrint:Ext.emptyFn, autoPrintAndClose:true, fakeBackgroundColor:true, scheduler:null, constructor:function(a) {
  Ext.apply(this, a);
}, init:function(a) {
  this.scheduler = a;
  a.print = Ext.Function.bind(this.print, this);
}, mainTpl:'{docType}\x3chtml class\x3d"x-border-box {htmlClasses}"\x3e\x3chead\x3e\x3cmeta content\x3d"text/html; charset\x3dUTF-8" http-equiv\x3d"Content-Type" /\x3e\x3ctitle\x3e{title}\x3c/title\x3e{styles}\x3c/head\x3e\x3cbody class\x3d"sch-print-body {bodyClasses}"\x3e\x3cdiv class\x3d"sch-print-ct {componentClasses}" style\x3d"width:{totalWidth}px"\x3e\x3cdiv class\x3d"sch-print-headerbg" style\x3d"border-left-width:{totalWidth}px;height:{headerHeight}px;"\x3e\x3c/div\x3e\x3cdiv class\x3d"sch-print-header-wrap"\x3e\x3cdiv style\x3d"left:-{lockedScroll}px;margin-right:-{lockedScroll}px;width:{[values.lockedWidth + values.lockedScroll]}px" class\x3d"sch-print-lockedheader x-grid-header-ct x-grid-header-ct-default x-docked x-docked-top x-grid-header-ct-docked-top x-grid-header-ct-default-docked-top x-box-layout-ct x-docked-noborder-top x-docked-noborder-right x-docked-noborder-left"\x3e{lockedHeader}\x3c/div\x3e\x3cdiv style\x3d"left:{lockedWidth}px;width:{normalWidth}px;" class\x3d"sch-print-normalheader x-grid-header-ct x-grid-header-ct-default x-docked x-docked-top x-grid-header-ct-docked-top x-grid-header-ct-default-docked-top x-box-layout-ct x-docked-noborder-top x-docked-noborder-right x-docked-noborder-left"\x3e\x3cdiv style\x3d"margin-left:-{normalScroll}px"\x3e{normalHeader}\x3c/div\x3e\x3c/div\x3e\x3c/div\x3e\x3cdiv id\x3d"lockedRowsCt" style\x3d"left:-{lockedScroll}px;margin-right:-{lockedScroll}px;width:{[values.lockedWidth + values.lockedScroll]}px;top:{headerHeight}px;" class\x3d"sch-print-locked-rows-ct {innerLockedClasses} x-grid-inner-locked"\x3e{lockedRows}\x3c/div\x3e\x3cdiv id\x3d"normalRowsCt" style\x3d"left:{lockedWidth}px;top:{headerHeight}px;width:{normalWidth}px" class\x3d"sch-print-normal-rows-ct {innerNormalClasses}"\x3e\x3cdiv style\x3d"position:relative;overflow:visible;margin-left:-{normalScroll}px"\x3e{normalRows}\x3c/div\x3e\x3c/div\x3e\x3c/div\x3e\x3cscript type\x3d"text/javascript"\x3e{setupScript}\x3c/script\x3e\x3c/body\x3e\x3c/html\x3e', 
getGridContent:function(l) {
  var k = l.normalGrid, c = l.lockedGrid, m = c.getView(), d = k.getView(), f, b, j, e, i;
  this.beforePrint(l);
  var a = m.store.getRange();
  b = m.tpl.apply(m.collectData(a, 0));
  j = d.tpl.apply(d.collectData(a, 0));
  e = m.el.getScroll().left;
  i = d.el.getScroll().left;
  if (l.columnLinesFeature) {
    var h = l.columnLinesFeature;
    var g = h.containerEl;
    h.containerEl = Ext.get(document.createElement('div'));
    h.renderElementsInternal();
    j = h.containerEl.dom.innerHTML + j;
    h.containerEl = g;
  }
  this.afterPrint(l);
  return {normalHeader:k.headerCt.el.dom.innerHTML, lockedHeader:c.headerCt.el.dom.innerHTML, lockedRows:b, normalRows:j, lockedScroll:e, normalScroll:i, lockedWidth:c.getWidth(), normalWidth:k.getWidth(), headerHeight:k.headerCt.getHeight(), innerLockedClasses:c.view.el.dom.className, innerNormalClasses:k.view.el.dom.className + (this.fakeBackgroundColor ? ' sch-print-fake-background' : ''), width:l.getWidth()};
}, getStylesheets:function() {
  return Ext.getDoc().select('link[rel\x3d"stylesheet"]');
}, print:function() {
  var g = this.scheduler;
  if (!(this.mainTpl instanceof Ext.Template)) {
    var a = 22;
    this.mainTpl = Ext.create('Ext.XTemplate', this.mainTpl, {compiled:true, disableFormats:true});
  }
  var h = g.getView(), i = this.getStylesheets(), e = Ext.get(Ext.core.DomHelper.createDom({tag:'div'})), b;
  i.each(function(j) {
    e.appendChild(j.dom.cloneNode(true));
  });
  b = e.dom.innerHTML + '';
  var f = this.getGridContent(g), c = this.mainTpl.apply(Ext.apply({waitText:this.waitText, docType:this.docType, htmlClasses:'', bodyClasses:Ext.getBody().dom.className, componentClasses:g.el.dom.className, title:g.title || '', styles:b, totalWidth:g.getWidth(), setupScript:'(' + this.setupScript.toString() + ')();'}, f));
  var d = window.open('', 'printgrid');
  d.document.write(c);
  d.document.close();
  if (this.autoPrintAndClose) {
    d.print();
    if (!Ext.isChrome) {
      d.close();
    }
  }
}, setupScript:function() {
  var f = document.getElementById('lockedRowsCt'), d = document.getElementById('normalRowsCt'), b = f.getElementsByTagName('tr'), a = d.getElementsByTagName('tr'), e = a.length, c = 0;
  for (; c < e; c++) {
    b[c].style.height = a[c].style.height;
  }
}});
Ext.define('Sch.plugin.PdfExport', {extend:'Ext.util.Observable', mixins:['Ext.AbstractPlugin'], lockableScope:'top', printServer:undefined, tpl:new Ext.XTemplate('\x3c!DOCTYPE html\x3e\x3chtml class\x3d"x-border-box {htmlClasses}"\x3e\x3chead\x3e\x3cmeta content\x3d"text/html; charset\x3dUTF-8" http-equiv\x3d"Content-Type" /\x3e\x3ctitle\x3e{column}/{row}\x3c/title\x3e{styles}\x3c/head\x3e\x3cbody class\x3d"{bodyClasses}"\x3e{[this.showHeader(values)]}\x3cdiv class\x3d"{componentClasses}" style\x3d"height:{bodyHeight}px; width:{totalWidth}px"\x3e{HTML}\x3c/div\x3e\x3c/body\x3e\x3c/html\x3e', 
{disableFormats:true, showHeader:function(a) {
  if (a.showHeader) {
    return '\x3cdiv class\x3d"sch-pdfprint-header" style\x3d"width:' + a.totalWidth + 'px"\x3e\x3ch2\x3e' + a.column + '/' + a.row + '\x3c/h2\x3e\x3c/div\x3e';
  }
  return '';
}}), exportDialogClassName:'Sch.widget.PdfExportDialog', exportDialogConfig:{}, defaultConfig:{format:'A4', orientation:'portrait', range:'complete', showHeader:true}, pageSizes:{A5:{width:5.8, height:8.3}, A4:{width:8.3, height:11.7}, A3:{width:11.7, height:16.5}, Letter:{width:8.5, height:11}}, openAfterExport:true, DPI:72, constructor:function(a) {
  this.callParent(arguments);
  this.addEvents('hidedialogwindow', 'showdialogerror', 'updateprogressbar');
}, init:function(a) {
  this.scheduler = a;
  a.showExportDialog = Ext.Function.bind(this.showExportDialog, this);
  a.doExport = Ext.Function.bind(this.doExport, this);
}, showExportDialog:function() {
  var b = this, a = b.scheduler.getSchedulingView();
  if (!b.win) {
    b.win = Ext.create(b.exportDialogClassName, {plugin:b, exportDialogConfig:Ext.apply({startDate:this.scheduler.getStart(), endDate:this.scheduler.getEnd(), rowHeight:a.rowHeight, columnWidth:a.getSingleTickInPixels()}, b.exportDialogConfig)});
  }
  b.win.show();
}, getStylesheets:function() {
  var c = Ext.getDoc().select('link[rel\x3d"stylesheet"]'), a = Ext.get(Ext.core.DomHelper.createDom({tag:'div'})), b;
  c.each(function(d) {
    a.appendChild(d.dom.cloneNode(true));
  });
  b = a.dom.innerHTML + '';
  return b;
}, doExport:function(l, i, n) {
  var A = this, m = A.scheduler, o = m.getSchedulingView(), k = A.getStylesheets(), y = l || A.defaultConfig;
  A.mask();
  A.fireEvent('updateprogressbar', 0.1);
  if (m.expandAll) {
    m.expandAll();
  }
  var w = m.lockedGrid, p = m.normalGrid, f = o.rowHeight, z = m.timeAxis.getTicks(), q = o.getSingleTickInPixels(), b = {width:m.getWidth(), height:m.getHeight(), rowHeight:f, columnWidth:q, startDate:m.getStart(), endDate:m.getEnd(), normalWidth:p.getWidth(), normalPosition:p.getPosition()}, u, g;
  if (y.orientation === 'landscape') {
    u = A.pageSizes[y.format].height * A.DPI;
    g = A.pageSizes[y.format].width * A.DPI;
  } else {
    u = A.pageSizes[y.format].width * A.DPI;
    g = A.pageSizes[y.format].height * A.DPI;
  }
  var x = 41, t = p.headerCt.getHeight(), e = Math.floor(g) - t - (y.showHeader ? x : 0);
  if (y.range !== 'complete') {
    var d, a, j, c, r;
    if (y.range === 'date') {
      d = new Date(y.dateFrom);
      a = new Date(y.dateTo);
      a = Sch.util.Date.add(a, Sch.util.Date.DAY, 1);
    } else {
      if (y.range === 'current') {
        j = o.getVisibleDateRange();
        d = j.startDate;
        a = j.endDate;
      }
    }
    c = Math.floor(o.timeAxis.getTickFromDate(d));
    r = Math.floor(o.timeAxis.getTickFromDate(a));
    z = z.filter(function(C, B) {
      return B >= c && B <= r;
    });
    m.setTimeSpan(d, a);
  }
  m.setWidth(u);
  m.setTimeColumnWidth(q);
  if (m.ownerCt) {
    m.ownerCt.suspendLayouts();
  }
  var h = A.calculatePages(y, z, q, u, e), v = {ticks:z, printHeight:e, paperWidth:u, headerHeight:t, styles:k, config:y}, s = A.getExportJsonHtml(h, v);
  A.fireEvent('updateprogressbar', 0.4);
  if (A.printServer) {
    Ext.Ajax.request({type:'POST', url:A.printServer, params:{html:{array:s}, format:y.format, orientation:y.orientation, range:y.range}, success:function(B) {
      A.onSuccess(B, i);
    }, failure:function(B) {
      A.onFailure(B, n);
    }, scope:A});
  } else {
    throw 'Server url not defined !';
  }
  A.restorePanel(b);
}, calculatePages:function(c, p, h, l, b) {
  var m = this, n = m.scheduler, e = n.lockedGrid, a = n.getSchedulingView().rowHeight, k = e.getWidth(), j = Math.floor(l / h), g = Math.floor((l - k) / h), d = Math.ceil((p.length - g) / j) + 1, o = n.getSchedulingView().store.getCount(), i = Math.floor(b / a), f = Math.ceil(o / i);
  return {columnsAmountLocked:g, columnsAmountNormal:j, rowsAmount:i, rowPages:f, columnPages:d, timeColumnWidth:h, lockedGridWidth:k, rowHeight:a, panelHTML:{}};
}, getExportJsonHtml:function(g, y) {
  var B = this, n = B.scheduler, q = g.columnsAmountLocked, s = g.columnsAmountNormal, h = g.rowsAmount, r = g.rowPages, a = g.columnPages, o = g.panelHTML, p = g.timeColumnWidth, x = y.paperWidth, d = y.printHeight, v = y.headerHeight, l = y.styles, z = y.config, A = y.ticks, u = [], j, c, m, e, b, f;
  for (var w = 0; w < a; w += 1) {
    if (w === 0) {
      j = Ext.Number.constrain(q - 1, w, A.length - 1);
      n.setTimeSpan(A[w].start, A[j].end);
    } else {
      if (!c) {
        c = n.lockedGrid.hide();
      }
      if (A[j + s]) {
        n.setTimeSpan(A[j + 1].start, A[j + s].end);
        j = j + s;
      } else {
        n.setTimeSpan(A[j + 1].start, A[A.length - 1].end);
      }
    }
    n.setTimeColumnWidth(p);
    for (var t = 0; t < r; t += 1) {
      B.hideRows(h, t);
      o.dom = n.body.dom.innerHTML;
      o.k = t;
      o.i = w;
      e = B.resizePanelHTML(o);
      m = B.tpl.apply(Ext.apply({bodyClasses:Ext.getBody().dom.className, bodyHeight:d + v, componentClasses:n.el.dom.className, styles:l, showHeader:z.showHeader, HTML:e.dom.innerHTML, totalWidth:x, headerHeight:v, column:w + 1, row:t + 1}));
      f = {html:m};
      u.push(f);
      B.showRows();
    }
  }
  return Ext.JSON.encode(u);
}, resizePanelHTML:function(f) {
  var g = Ext.get(Ext.core.DomHelper.createDom({tag:'div', html:f.dom})), b = this.scheduler, e = b.lockedGrid, c = b.normalGrid;
  var d = [g.select('#' + b.id + '-targetEl').first(), g.select('#' + e.id).first(), g.select('#' + e.body.id).first(), g.select('#' + e.body.child('.x-grid-view').id).first()], a = [g.select('#' + c.id).first(), g.select('#' + c.headerCt.id).first(), g.select('#' + c.body.id).first(), g.select('#' + c.getView().id).first()];
  Ext.Array.each(d, function(h) {
    if (h) {
      h.setHeight('100%');
    }
  });
  Ext.Array.each(a, function(i, h) {
    if (h === 1) {
      i.setWidth('100%');
    } else {
      i.applyStyles({height:'100%', width:'100%'});
    }
  });
  return g;
}, onSuccess:function(a, d) {
  var b = this, c = Ext.JSON.decode(a.responseText);
  b.fireEvent('updateprogressbar', 1);
  if (c.success === true) {
    setTimeout(function() {
      b.fireEvent('hidedialogwindow');
      b.unmask();
      if (b.openAfterExport) {
        window.open(c.url, 'PDF_Print');
      }
    }, b.win ? b.win.hideTime : 3000);
  } else {
    b.fireEvent('showdialogerror', c.msg);
    b.unmask();
  }
  if (d) {
    d.call(this, a);
  }
}, onFailure:function(b, a) {
  this.fireEvent('showdialogerror', this);
  if (a) {
    a.call(this, b);
  }
}, hideRows:function(d, f) {
  var c = this.scheduler.lockedGrid.getEl().select('.x-grid-row'), a = this.scheduler.normalGrid.getEl().select('.x-grid-row'), g = d * f, b = g + d;
  for (var e = 0; e < a.elements.length; e += 1) {
    if (e < g || e >= b) {
      c.elements[e].className += ' sch-none';
      a.elements[e].className += ' sch-none';
    }
  }
}, showRows:function() {
  var b = this.scheduler.lockedGrid.getEl().select('.x-grid-row'), a = this.scheduler.normalGrid.getEl().select('.x-grid-row');
  b.each(function(c) {
    c.removeCls('sch-none');
  });
  a.each(function(c) {
    c.removeCls('sch-none');
  });
}, mask:function() {
  var a = Ext.getBody().mask();
  a.addCls('sch-pdf-mask');
}, unmask:function() {
  Ext.getBody().unmask();
}, restorePanel:function(a) {
  var b = this.scheduler;
  b.setWidth(a.width);
  b.setHeight(a.height);
  b.setTimeSpan(a.startDate, a.endDate);
  b.setTimeColumnWidth(a.columnWidth, true);
  b.getSchedulingView().setRowHeight(a.rowHeight);
  b.lockedGrid.show();
  b.normalGrid.setWidth(a.normalWidth);
  b.normalGrid.setPosition(a.normalPosition[0]);
  b.ownerCt && b.ownerCt.resumeLayouts();
}, destroy:function() {
  if (this.win) {
    this.win.destroy();
  }
}});
Ext.define('Sch.widget.ResizePicker', {extend:'Ext.Panel', alias:'widget.dualrangepicker', width:200, height:200, border:true, collapsible:false, bodyStyle:'position:relative;margin:5px', verticalCfg:{height:120, value:24, increment:2, minValue:20, maxValue:80, reverse:true}, horizontalCfg:{width:120, value:100, minValue:25, increment:5, maxValue:200}, initComponent:function() {
  var a = this;
  a.addEvents('change', 'changecomplete', 'select');
  a.horizontalCfg.value = a.dialog.columnWidth;
  a.verticalCfg.value = a.dialog.rowHeight;
  a.dockedItems = [a.vertical = new Ext.slider.Single(Ext.apply({dock:'left', style:'margin-top:10px', vertical:true, listeners:{change:a.onSliderChange, changecomplete:a.onSliderChangeComplete, scope:a}}, a.verticalCfg)), a.horizontal = new Ext.slider.Single(Ext.apply({dock:'top', style:'margin-left:28px', listeners:{change:a.onSliderChange, changecomplete:a.onSliderChangeComplete, scope:a}}, a.horizontalCfg))];
  a.callParent(arguments);
}, afterRender:function() {
  var b = this;
  b.addCls('sch-ux-range-picker');
  b.valueHandle = this.body.createChild({cls:'sch-ux-range-value', cn:{tag:'span'}});
  b.valueSpan = this.valueHandle.down('span');
  var a = new Ext.dd.DD(this.valueHandle);
  Ext.apply(a, {startDrag:function() {
    b.dragging = true;
    this.constrainTo(b.body);
  }, onDrag:function() {
    b.onHandleDrag.apply(b, arguments);
  }, endDrag:function() {
    b.onHandleEndDrag.apply(b, arguments);
    b.dragging = false;
  }, scope:this});
  this.setValues(this.getValues());
  this.callParent(arguments);
  this.body.on('click', this.onBodyClick, this);
}, onBodyClick:function(c, a) {
  var b = [c.getXY()[0] - 8 - this.body.getX(), c.getXY()[1] - 8 - this.body.getY()];
  this.valueHandle.setLeft(Ext.Number.constrain(b[0], 0, this.getAvailableWidth()));
  this.valueHandle.setTop(Ext.Number.constrain(b[1], 0, this.getAvailableHeight()));
  this.setValues(this.getValuesFromXY([this.valueHandle.getLeft(true), this.valueHandle.getTop(true)]));
  this.onSliderChangeComplete();
}, getAvailableWidth:function() {
  return this.body.getWidth() - 18;
}, getAvailableHeight:function() {
  return this.body.getHeight() - 18;
}, onHandleDrag:function() {
  this.setValues(this.getValuesFromXY([this.valueHandle.getLeft(true), this.valueHandle.getTop(true)]));
}, onHandleEndDrag:function() {
  this.setValues(this.getValuesFromXY([this.valueHandle.getLeft(true), this.valueHandle.getTop(true)]));
}, getValuesFromXY:function(d) {
  var c = d[0] / this.getAvailableWidth();
  var a = d[1] / this.getAvailableHeight();
  var e = Math.round((this.horizontalCfg.maxValue - this.horizontalCfg.minValue) * c);
  var b = Math.round((this.verticalCfg.maxValue - this.verticalCfg.minValue) * a) + this.verticalCfg.minValue;
  return [e + this.horizontalCfg.minValue, b];
}, getXYFromValues:function(d) {
  var b = this.horizontalCfg.maxValue - this.horizontalCfg.minValue;
  var f = this.verticalCfg.maxValue - this.verticalCfg.minValue;
  var a = Math.round((d[0] - this.horizontalCfg.minValue) * this.getAvailableWidth() / b);
  var c = d[1] - this.verticalCfg.minValue;
  var e = Math.round(c * this.getAvailableHeight() / f);
  return [a, e];
}, updatePosition:function() {
  var a = this.getValues();
  var b = this.getXYFromValues(this.getValues());
  this.valueHandle.setLeft(Ext.Number.constrain(b[0], 0, this.getAvailableWidth()));
  this.valueHandle.setTop(Ext.Number.constrain(b[1], 0, this.getAvailableHeight()));
  this.positionValueText();
  this.valueSpan.update('[' + a.toString() + ']');
}, positionValueText:function() {
  var a = this.valueHandle.getTop(true);
  var b = this.valueHandle.getLeft(true);
  this.valueSpan.setLeft(b > 30 ? -30 : 10);
  this.valueSpan.setTop(a > 10 ? -20 : 20);
}, setValues:function(a) {
  this.horizontal.setValue(a[0]);
  if (this.verticalCfg.reverse) {
    this.vertical.setValue(this.verticalCfg.maxValue + this.verticalCfg.minValue - a[1]);
  } else {
    this.vertical.setValue(a[1]);
  }
  if (!this.dragging) {
    this.updatePosition();
  }
  this.positionValueText();
  this.valueSpan.update('[' + a.toString() + ']');
}, getValues:function() {
  var a = this.vertical.getValue();
  if (this.verticalCfg.reverse) {
    a = this.verticalCfg.maxValue - a + this.verticalCfg.minValue;
  }
  return [this.horizontal.getValue(), a];
}, onSliderChange:function() {
  this.fireEvent('change', this, this.getValues());
  if (!this.dragging) {
    this.updatePosition();
  }
}, onSliderChangeComplete:function() {
  this.fireEvent('changecomplete', this, this.getValues());
}, afterLayout:function() {
  this.callParent(arguments);
  this.updatePosition();
}});
Ext.define('Sch.widget.ExportDialogForm', {extend:'Ext.form.Panel', dialog:null, layout:{type:'vbox'}, requires:['Sch.widget.ResizePicker'], border:false, bodyPadding:10, initComponent:function() {
  var b = this, a = b.dialog;
  Ext.apply(this, {fieldDefaults:{labelAlign:'top', labelWidth:100, labelStyle:'font-weight:bold'}, items:[{width:a.getWidth() - 40, xtype:'combo', value:'complete', triggerAction:'all', forceSelection:true, editable:false, fieldLabel:a.rangeFieldLabel, name:'range', itemId:'rangeField', queryMode:'local', displayField:'name', valueField:'value', store:Ext.create('Ext.data.Store', {fields:['name', 'value'], data:[{name:a.completeView, value:'complete'}, {name:a.dateRange, value:'date'}, {name:a.currentView, 
  value:'current'}]})}, {xtype:'dualrangepicker', itemId:'rangePicker', beforeSubTpl:new Ext.XTemplate('\x3cspan class\x3d"sch-pdfexportdialog-pickertext"\x3e' + a.pickerText + ':\x3c/span\x3e'), dialog:a, hidden:true}, {width:a.getWidth() - 40, xtype:'datefield', fieldLabel:b.dateRangeFrom, name:'dateFrom', itemId:'dateFromField', hidden:true, allowBlank:false, cls:'sch-pdfexportdialog-date', beforeSubTpl:new Ext.XTemplate('\x3cspan class\x3d"sch-pdfexportdialog-datelabel"\x3e' + a.dateRangeFrom + 
  ':\x3c/span\x3e'), maxValue:a.endDate, minValue:a.startDate, value:a.startDate, validator:function(e) {
    var d = new Date(e);
    return d >= a.startDate;
  }}, {width:a.getWidth() - 40, xtype:'datefield', name:'dateTo', itemId:'dateToField', hidden:true, allowBlank:false, cls:'sch-pdfexportdialog-date', beforeSubTpl:new Ext.XTemplate('\x3cspan class\x3d"sch-pdfexportdialog-datelabel"\x3e' + a.dateRangeTo + ':\x3c/span\x3e'), maxValue:a.endDate, minValue:a.startDate, value:a.endDate, validator:function(e) {
    var d = new Date(e);
    return d <= a.endDate;
  }}, {width:a.getWidth() - 40, xtype:'checkboxfield', fieldLabel:a.showHeaderLabel, name:'showHeader', checked:true}, {width:a.getWidth() - 40, xtype:'combo', value:'A4', triggerAction:'all', forceSelection:true, editable:false, fieldLabel:a.formatFieldLabel, name:'format', queryMode:'local', store:['A5', 'A4', 'A3', 'Letter']}, {width:a.getWidth() - 40, xtype:'combo', value:'portrait', triggerAction:'all', forceSelection:true, editable:false, afterSubTpl:new Ext.XTemplate('\x3cspan id\x3d"sch-pdfexportdialog-imagePortrait"\x3e\x3c/span\x3e\x3cspan id\x3d"sch-pdfexportdialog-imageLandscape" class\x3d"sch-none"\x3e\x3c/span\x3e'), 
  fieldLabel:a.orientationFieldLabel, name:'orientation', cls:'sch-pdfexportdialog-orientation', itemId:'orientationField', displayField:'name', valueField:'value', queryMode:'local', store:Ext.create('Ext.data.Store', {fields:['name', 'value'], data:[{name:a.orientationPortrait, value:'portrait'}, {name:a.orientationLandscape, value:'landscape'}]})}, new Ext.ProgressBar({text:a.progressBarText, width:a.getWidth() - 40, animate:true, hidden:true, itemId:'progressBar', id:'print-widget-progressbar'})]});
  b.callParent(arguments);
  if (!b.progressBar) {
    b.progressBar = new Ext.ProgressBar({text:a.progressBarText, width:a.getWidth() - 40, animate:true, hidden:true, itemId:'progressBar', id:'print-widget-progressbar'});
  }
  b.items.add(b.progressBar);
  b.dateFromField = b.getComponent('dateFromField');
  b.dateToField = b.getComponent('dateToField');
  b.rangePicker = b.getComponent('rangePicker');
  b.getComponent('orientationField').on('change', b.onChange, b);
  b.getComponent('rangeField').on('change', b.onChange, b);
  b.form.relayEvents(b.dialog, ['updateprogressbar', 'hideprogressbar', 'showprogressbar']);
  var c = {hideprogressbar:b.hideProgressBar, showprogressbar:b.showProgressBar, updateprogressbar:b.updateProgressBar, scope:b};
  b.form.on(c);
}, onChange:function(b, a) {
  if (b.name === 'range') {
    switch(a) {
      case 'complete':
        this.dateFromField.hide();
        this.dateToField.hide();
        this.rangePicker.hide();
        break;
      case 'date':
        this.dateFromField.show();
        this.dateToField.show();
        this.rangePicker.hide();
        break;
      case 'current':
        this.dateFromField.hide();
        this.dateToField.hide();
        this.rangePicker.show();
        this.rangePicker.expand(true);
        break;
    }
  }
  if (b.name === 'orientation') {
    switch(a) {
      case 'landscape':
        Ext.get('sch-pdfexportdialog-imagePortrait').toggleCls('sch-none');
        Ext.get('sch-pdfexportdialog-imageLandscape').toggleCls('sch-none');
        break;
      case 'portrait':
        Ext.get('sch-pdfexportdialog-imagePortrait').toggleCls('sch-none');
        Ext.get('sch-pdfexportdialog-imageLandscape').toggleCls('sch-none');
        break;
    }
  }
}, showProgressBar:function() {
  this.progressBar && this.progressBar.show();
}, hideProgressBar:function() {
  this.progressBar && this.progressBar.hide();
}, updateProgressBar:function(a) {
  this.progressBar && this.progressBar.updateProgress(a);
}, destroy:function() {
  this.progressBar && this.progressBar.destroy();
  this.callParent(arguments);
}});
Ext.define('Sch.widget.ExportDialogButtons', {extend:'Ext.panel.Panel', dialog:null, height:35, border:false, collapsible:false, items:[], initComponent:function() {
  Ext.apply(this, {width:this.dialog.getWidth(), items:[{xtype:'button', scale:'medium', text:this.dialog.exportButtonText, handler:function() {
    var b = this.dialog.form.getForm();
    if (b.isValid()) {
      var a = b.getValues();
      this.dialog.fireEvent('showprogressbar');
      this.dialog.plugin.doExport(a);
    }
  }, scope:this}, {xtype:'button', scale:'medium', text:this.dialog.cancelButtonText, handler:function() {
    this.dialog.hideDialog();
  }, scope:this}]});
  this.callParent(arguments);
}});
Ext.define('Sch.widget.PdfExportDialog', {extend:'Ext.window.Window', alias:'widget.exportdialog', modal:false, width:240, height:310, cls:'sch-pdfexportdialog', frame:false, header:false, title:null, layout:'fit', resizable:false, draggable:true, plugin:null, hideTime:2000, formPanel:null, buttonsPanel:null, progressBar:null, items:[], tpl:Ext.create('Ext.XTemplate', '\x3cdiv class\x3d"sch-pdfexportdialog-header"\x3e\x3ch4\x3e{headerText}\x3c/h4\x3e\x3cspan id\x3d"sch-pdfexportdialog-close"\x3e\x3c/span\x3e\x3c/div\x3e\x3cdiv class\x3d"sch-pdfexportdialog-form" id\x3d"sch-pdfexportdialog-form"\x3e\x3c/div\x3e\x3cdiv class\x3d"sch-pdfexportdialog-msg sch-none"\x3e\x3cspan id\x3d"sch-pdfexportdialog-msg"\x3e\x3c/span\x3e\x3c/div\x3e\x3cdiv class\x3d"sch-pdfexportdialog-button" id\x3d"sch-pdfexportdialog-button"\x3e\x3c/div\x3e', 
{compiled:true}), generalError:'An error occured, try again.', dialogHeader:'PDF Settings', formatFieldLabel:'Paper format', orientationFieldLabel:'Orientation', rangeFieldLabel:'Export range', showHeaderLabel:'Add page number', orientationPortrait:'Portrait', orientationLandscape:'Landscape', completeView:'Complete schedule', currentView:'Current view', dateRange:'Date range', dateRangeFrom:'Export from', pickerText:'Resize column/rows to desired value', dateRangeTo:'Export to', exportButtonText:'Export', 
cancelButtonText:'Cancel', progressBarText:'Exporting...', requires:['Ext.ProgressBar', 'Sch.widget.ExportDialogForm'], constructor:function(a) {
  Ext.apply(this, a.exportDialogConfig);
  this.callParent(arguments);
}, initComponent:function() {
  var b = this, a = {hidedialogwindow:b.hideDialog, showdialogerror:b.showError, updateprogressbar:function(c) {
    b.fireEvent('updateprogressbar', c);
  }, scope:this};
  b.html = b.tpl.apply({headerText:b.dialogHeader});
  b.plugin.on(a);
  b.callParent(arguments);
}, destroy:function() {
  this.form.destroy();
  this.buttons.destroy();
  this.callParent(arguments);
}, afterRender:function() {
  var a = this;
  a.buttons = a.buttonsPanel || new Sch.widget.ExportDialogButtons({renderTo:'sch-pdfexportdialog-button', dialog:a, width:a.getWidth(), height:35});
  a.form = a.formPanel || new Sch.widget.ExportDialogForm({dialog:a, renderTo:'sch-pdfexportdialog-form'});
  a.on('changecomplete', function(c, b) {
    a.plugin.scheduler.setTimeColumnWidth(b[0], true);
    if (a.form.rangePicker.verticalCfg.reverse) {
      var d = b[1] - a.form.rangePicker.verticalCfg.maxValue + a.form.rangePicker.verticalCfg.minValue;
      a.plugin.scheduler.getSchedulingView().setRowHeight(d);
    } else {
      a.plugin.scheduler.getSchedulingView().setRowHeight(b[1]);
    }
  });
  a.form.on('resize', a.setTipHeight, a);
  a.relayEvents(a.form.rangePicker, ['change', 'changecomplete', 'select']);
  Ext.get('sch-pdfexportdialog-close').on('click', a.hideDialog, a);
}, setTipHeight:function() {
  var c = this, a = c.getHeight(), b = c.form.getHeight();
  if (!c.oldFormHeight) {
    c.oldFormHeight = b;
  } else {
    c.form.suspendEvents();
    c.setHeight(c.getHeight() + b - c.oldFormHeight);
    c.form.resumeEvents();
    c.oldFormHeight = b;
  }
}, hideDialog:function() {
  var a = this;
  a.fireEvent('updateprogressbar', 0);
  a.fireEvent('hideprogressbar');
  a.form.show();
  a.form.getForm().reset();
  a.buttons.show();
  a.hide();
}, showError:function(c) {
  var b = this, a;
  c = c || b.generalErrorText;
  b.fireEvent('hideprogressbar');
  b.form.hide();
  b.buttons.hide();
  a = b.getEl().select('.sch-pdfexportdialog-msg').first();
  a.dom.innerHTML = c;
  a.removeCls('sch-none');
  setTimeout(function() {
    a.dom.innerHTML = '';
    a.addCls('sch-none');
    b.hideDialog();
  }, b.hideTime);
}});
Ext.define('Gnt.model.WeekAvailability', {extend:'Sch.model.Range', customizableFields:[{name:'Availability'}], availabilityField:'Availability', set:function(b, a) {
  if (b === this.nameField) {
    Ext.Array.each(this.getAvailability(), function(c) {
      c.setName(a);
    });
  }
  this.callParent(arguments);
}, getAvailability:function() {
  return this.get(this.availabilityField) || [];
}, setAvailability:function(b) {
  var a = this.getName();
  Ext.Array.each(b, function(c) {
    c.setName(a);
  });
  this.set(this.availabilityField, b);
}});
Ext.define('Gnt.model.CalendarDay', {requires:['Ext.data.Types'], extend:'Sch.model.Customizable', idProperty:'Id', customizableFields:[{name:'Date', type:'date', dateFormat:'c', convert:function(b, a) {
  if (!b) {
    return;
  }
  var c = Ext.data.Types.DATE.convert.call(this, b);
  if (c) {
    Ext.Date.clearTime(c);
  }
  if (a.data[a.idProperty] == null) {
    a.data[a.idProperty] = c - 0;
  }
  return c;
}}, {name:'Id'}, {name:'IsWorkingDay', type:'boolean', defaultValue:false}, {name:'Cls', defaultValue:'gnt-holiday'}, 'Name', {name:'Availability', convert:function(b, a) {
  if (b) {
    return Ext.typeOf(b) === 'string' ? [b] : b;
  } else {
    return [];
  }
}}], availabilityCache:null, dateField:'Date', isWorkingDayField:'IsWorkingDay', clsField:'Cls', nameField:'Name', availabilityField:'Availability', setDate:function(b) {
  var a = Ext.Date.clearTime(b, true);
  this.data[this.idProperty] = a - 0;
  this.set(this.dateField, a);
}, clearDate:function() {
  this.data[this.idProperty] = null;
}, getAvailability:function(b) {
  var c = this;
  if (b) {
    return this.get(this.availabilityField);
  }
  if (this.availabilityCache) {
    return this.availabilityCache;
  }
  var a = [];
  Ext.Array.each(this.get(this.availabilityField), function(d) {
    a.push(Ext.typeOf(d) === 'string' ? c.parseInterval(d) : d);
  });
  this.verifyAvailability(a);
  return this.availabilityCache = a;
}, setAvailability:function(a) {
  this.availabilityCache = null;
  this.set(this.availabilityField, this.stringifyIntervals(a));
  this.getAvailability();
}, verifyAvailability:function(b) {
  b.sort(function(f, e) {
    return f.startTime - e.startTime;
  });
  Ext.Array.each(b, function(e) {
    if (e.startTime > e.endTime) {
      throw 'Start time is greater than end time';
    }
  });
  for (var a = 1; a < b.length; a++) {
    var c = b[a - 1];
    var d = b[a];
    if (c.endTime > d.startTime) {
      throw 'Availability intervals should not intersect';
    }
  }
}, prependZero:function(a) {
  return a < 10 ? '0' + a : a;
}, stringifyInterval:function(b) {
  var c = b.startTime;
  var a = b.endTime;
  return this.prependZero(c.getHours()) + ':' + this.prependZero(c.getMinutes()) + '-' + this.prependZero(a.getHours()) + ':' + this.prependZero(a.getMinutes());
}, stringifyIntervals:function(b) {
  var c = this;
  var a = [];
  Ext.Array.each(b, function(d) {
    if (Ext.typeOf(d) === 'string') {
      a.push(d);
    } else {
      a.push(c.stringifyInterval(d));
    }
  });
  return a;
}, parseInterval:function(b) {
  var a = /(\d\d):(\d\d)-(\d\d):(\d\d)/.exec(b);
  if (!a) {
    throw 'Invalid format for availability string: ' + b + '. It should have exact format: hh:mm-hh:mm';
  }
  return {startTime:new Date(0, 0, 0, a[1], a[2]), endTime:new Date(0, 0, 0, a[3], a[4])};
}, getTotalHours:function() {
  return this.getTotalMS() / 1000 / 60 / 60;
}, getTotalMS:function() {
  var a = 0;
  Ext.Array.each(this.getAvailability(), function(b) {
    a += b.endTime - b.startTime;
  });
  return a;
}, addAvailabilityInterval:function(d, b) {
  var a;
  if (d instanceof Date) {
    a = {startTime:d, endTime:b};
  } else {
    a = this.parseInterval(d + (b ? '-' + b : ''));
  }
  var c = this.getAvailability().concat(a);
  this.verifyAvailability(c);
  this.setAvailability(c);
}, removeAvailbilityInterval:function(a) {
  var b = this.getAvailability();
  b.splice(a, 1);
  this.setAvailability(b);
}, getAvailabilityIntervalsFor:function(d) {
  d = typeof d == 'number' ? new Date(d) : d;
  var c = d.getFullYear();
  var e = d.getMonth();
  var b = d.getDate();
  var a = [];
  Ext.Array.each(this.getAvailability(), function(f) {
    var g = f.endTime.getDate();
    a.push({startDate:new Date(c, e, b, f.startTime.getHours(), f.startTime.getMinutes()), endDate:new Date(c, e, b + (g == 1 ? 1 : 0), f.endTime.getHours(), f.endTime.getMinutes())});
  });
  return a;
}, getAvailabilityStartFor:function(b) {
  var a = this.getAvailabilityIntervalsFor(b);
  if (!a.length) {
    return null;
  }
  return a[0].startDate;
}, getAvailabilityEndFor:function(b) {
  var a = this.getAvailabilityIntervalsFor(b);
  if (!a.length) {
    return null;
  }
  return a[a.length - 1].endDate;
}});
Ext.define('Gnt.model.Assignment', {extend:'Sch.model.Customizable', idProperty:'Id', customizableFields:[{name:'Id'}, {name:'ResourceId'}, {name:'TaskId'}, {name:'Units', type:'float', defaultValue:100}], resourceIdField:'ResourceId', taskIdField:'TaskId', unitsField:'Units', isPersistable:function() {
  var a = this.getTask(), b = this.getResource();
  return a && !a.phantom && b && !b.phantom;
}, getUnits:function() {
  return Math.max(0, this.get(this.unitsField));
}, setUnits:function(a) {
  if (a < 0) {
    throw "`Units` value for an assignment can't be less than 0";
  }
  this.set(this.unitsField, a);
}, getResourceName:function() {
  var a = this.stores[0].getResourceStore().getById(this.getResourceId());
  if (a) {
    return a.getName();
  }
  return '';
}, getTask:function(a) {
  return (a || this.stores[0].getTaskStore()).getById(this.getTaskId());
}, getResource:function() {
  return this.stores[0].getResourceStore().getByInternalId(this.getResourceId());
}, getInternalId:function() {
  return this.getId() || this.internalId;
}, getEffort:function(b) {
  var a = this.getTask();
  var c = 0;
  a.forEachAvailabilityIntervalWithResources({startDate:a.getStartDate(), endDate:a.getEndDate(), resources:[this.getResource()]}, function(g, f, e) {
    var h;
    for (var d in e) {
      h = e[d].units;
    }
    c += (f - g) * h / 100;
  });
  return a.getProjectCalendar().convertMSDurationToUnit(c, b || a.getEffortUnit());
}});
Ext.define('Gnt.model.Dependency', {extend:'Sch.model.Customizable', inheritableStatics:{Type:{StartToStart:0, StartToEnd:1, EndToStart:2, EndToEnd:3}}, idProperty:'Id', customizableFields:[{name:'Id'}, {name:'From'}, {name:'To'}, {name:'Type', type:'int', defaultValue:2}, {name:'Lag', type:'int', defaultValue:0}, {name:'Cls'}], fromField:'From', toField:'To', typeField:'Type', lagField:'Lag', clsField:'Cls', constructor:function(a) {
  this.callParent(arguments);
  if (a) {
    if (a.fromTask) {
      if (a.fromTask instanceof Gnt.model.Task) {
        this.setSourceTask(a.fromTask);
      } else {
        this.setSourceId(a.fromTask);
      }
    }
    if (a.toTask) {
      if (a.toTask instanceof Gnt.model.Task) {
        this.setTargetTask(a.toTask);
      } else {
        this.setTargetId(a.toTask);
      }
    }
    if (Ext.isDefined(a.type)) {
      this.setType(a.type);
    }
  }
}, getTaskStore:function() {
  return this.stores[0].taskStore;
}, getSourceTask:function(a) {
  return this.getTaskStore().getById(this.getSourceId());
}, setSourceTask:function(a) {
  this.setSourceId(a.getId() || a.internalId);
}, getTargetTask:function() {
  return this.getTaskStore().getById(this.getTargetId());
}, setTargetTask:function(a) {
  this.setTargetId(a.getId() || a.internalId);
}, getSourceId:function() {
  return this.get(this.fromField);
}, setSourceId:function(a) {
  this.set(this.fromField, a);
}, getTargetId:function() {
  return this.get(this.toField);
}, setTargetId:function(a) {
  this.set(this.toField, a);
}, isPersistable:function() {
  var a = this.getSourceTask(), b = this.getTargetTask();
  return a && !a.phantom && b && !b.phantom;
}, isValid:function(a) {
  var b = this.callParent(arguments);
  if (b && this.stores[0]) {
    b = this.stores[0].isValidDependency(this.getSourceId(), this.getTargetId(), true);
  }
  return b;
}});
Ext.define('Gnt.model.Resource', {extend:'Sch.model.Resource', customizableFields:['CalendarId'], calendarIdField:'CalendarId', getTaskStore:function() {
  return this.stores[0].getTaskStore();
}, getEventStore:function() {
  return this.getTaskStore();
}, getEvents:function() {
  return this.getTasks();
}, getTasks:function() {
  var a = [];
  this.forEachAssignment(function(b) {
    var c = b.getTask();
    if (c) {
      a.push(c);
    }
  });
  return a;
}, getCalendar:function(a) {
  return a ? this.getOwnCalendar() : this.getOwnCalendar() || this.getProjectCalendar();
}, getOwnCalendar:function() {
  var a = this.getCalendarId();
  return a ? Gnt.data.Calendar.getCalendar(a) : null;
}, getProjectCalendar:function() {
  return this.stores[0].getTaskStore().getCalendar();
}, setCalendar:function(a) {
}, getInternalId:function() {
  return this.getId() || this.internalId;
}, assignTo:function(a, c) {
  var b = a instanceof Gnt.model.Task ? a : this.getTaskStore().getById(a);
  return b.assign(this, c);
}, unassignFrom:function() {
  return this.unAssignFrom.apply(this, arguments);
}, unAssignFrom:function(a) {
  var b = a instanceof Gnt.model.Task ? a : this.getTaskStore().getById(a);
  b.unAssign(this);
}, forEachAssignment:function(b, a) {
  a = a || this;
  var c = this.getInternalId();
  this.getTaskStore().getAssignmentStore().each(function(d) {
    if (d.getResourceId() == c) {
      return b.call(a, d);
    }
  });
}, collectAvailabilityIntervalPoints:function(e, f, b, h, c) {
  for (var d = 0; d < e.length; d++) {
    var a = e[d];
    var g = a.startDate - 0;
    var i = a.endDate - 0;
    if (!h[g]) {
      h[g] = [];
      c.push(g);
    }
    h[g].push(f(g));
    if (!h[i]) {
      h[i] = [];
      c.push(i);
    }
    h[i].push(b(i));
  }
}, forEachAvailabilityIntervalWithTasks:function(d, f, a) {
  a = a || this;
  var c = d.startDate;
  var t = d.endDate;
  if (!c || !t) {
    throw 'Both `startDate` and `endDate` are required for `forEachAvailabilityIntervalWithTasks`';
  }
  var g = new Date(c);
  var u = d.includeAllIntervals;
  var p = this.getCalendar();
  var l = [];
  var n = [];
  var b = [];
  this.forEachAssignment(function(k) {
    var i = k.getTask();
    if (i.getStartDate() > t || i.getEndDate() < c) {
      return;
    }
    n.push(i);
    b.push(i.getCalendar());
    l.push(k);
  });
  if (!n.length) {
    return;
  }
  var e = Sch.util.Date;
  var y = [c - 0, t - 0];
  var j = {};
  j[c - 0] = [{type:'00-intervalStart'}];
  j[t - 0] = [{type:'00-intervalEnd'}];
  var s;
  while (g < t) {
    this.collectAvailabilityIntervalPoints(p.getAvailabilityIntervalsFor(g), function() {
      return {type:'00-resourceAvailabilityStart'};
    }, function() {
      return {type:'01-resourceAvailabilityEnd'};
    }, j, y);
    for (s = 0; s < b.length; s++) {
      this.collectAvailabilityIntervalPoints(b[s].getAvailabilityIntervalsFor(g), function() {
        return {type:'02-taskAvailabilityStart', assignment:l[s], taskId:n[s].getInternalId(), units:l[s].getUnits()};
      }, function() {
        return {type:'03-taskAvailabilityEnd', taskId:n[s].getInternalId()};
      }, j, y);
    }
    g = e.getStartOfNextDay(g);
  }
  y.sort();
  var v = false;
  var w = {};
  var m = 0;
  for (s = 0; s < y.length - 1; s++) {
    var r = j[y[s]];
    r.sort(function(k, i) {
      return k.type < i.type;
    });
    for (var q = 0; q < r.length; q++) {
      var o = r[q];
      if (o.type == '00-resourceAvailabilityStart') {
        v = true;
      }
      if (o.type == '01-resourceAvailabilityEnd') {
        v = false;
      }
      if (o.type == '02-taskAvailabilityStart') {
        w[o.taskId] = o;
        m++;
      }
      if (o.type == '03-taskAvailabilityEnd') {
        delete w[o.taskId];
        m--;
      }
    }
    if (u || v && m) {
      var x = y[s];
      var h = y[s + 1];
      if (x > t || h < c) {
        continue;
      }
      if (x < c) {
        x = c - 0;
      }
      if (h > t) {
        h = t - 0;
      }
      if (f.call(a, x, h, w) === false) {
        return false;
      }
    }
  }
}, getAllocationInfo:function(a) {
  var b = [];
  this.forEachAvailabilityIntervalWithTasks(a, function(h, g, f) {
    var e = 0;
    var c = [];
    for (var d in f) {
      e += f[d].units;
      c.push(f[d].assignment);
    }
    b.push({startDate:new Date(h), endDate:new Date(g), totalAllocation:e, assignments:c});
  });
  return b;
}});
Ext.define('Gnt.model.task.More', {indent:function() {
  var a = this.previousSibling;
  if (a) {
    this.isMove = true;
    a.appendChild(this);
    delete this.isMove;
    a.set('leaf', false);
    a.expand();
  }
}, outdent:function() {
  var a = this.parentNode;
  if (a && !a.isRoot()) {
    a.set('leaf', a.childNodes.length === 1);
    this.isMove = true;
    if (a.nextSibling) {
      a.parentNode.insertBefore(this, a.nextSibling);
    } else {
      a.parentNode.appendChild(this);
    }
    delete this.isMove;
  }
}, getAllDependencies:function(a) {
  a = a || this.getDependencyStore();
  return a.getDependenciesForTask(this);
}, hasIncomingDependencies:function(a) {
  var c = this.getId() || this.internalId;
  a = a || this.getDependencyStore();
  var b = a.findBy(function(d) {
    return d.getTargetId() == c;
  });
  return b >= 0;
}, getIncomingDependencies:function(a) {
  a = a || this.getDependencyStore();
  return a.getIncomingDependenciesForTask(this);
}, getOutgoingDependencies:function(a) {
  a = a || this.getDependencyStore();
  return a.getOutgoingDependenciesForTask(this);
}, constrain:function(c) {
  if (this.isManuallyScheduled()) {
    return false;
  }
  var e = false;
  c = c || this.getTaskStore();
  var b = this.getConstrainContext(c);
  if (b) {
    var a = b.startDate;
    var d = b.endDate;
    if (a && a - this.getStartDate() !== 0) {
      this.setStartDate(a, true, c.skipWeekendsDuringDragDrop);
      e = true;
    } else {
      if (d && d - this.getEndDate() !== 0) {
        this.setEndDate(d, true, c.skipWeekendsDuringDragDrop);
        e = true;
      }
    }
  }
  return e;
}, getConstrainContext:function(f) {
  var g = this.getIncomingDependencies();
  if (!g.length) {
    return null;
  }
  var h = f || this.getTaskStore(), a = Gnt.model.Dependency.Type, c = new Date(0), b = new Date(0), i = Ext.Date, e = this.getCalendar(), d;
  Ext.each(g, function(l) {
    var k = l.getSourceTask();
    if (k) {
      var n = l.getLag() || 0, m = k.getStartDate(), j = k.getEndDate();
      switch(l.getType()) {
        case a.StartToEnd:
          m = e.skipWorkingDays(m, n);
          if (b < m) {
            b = m;
            d = k;
          }
          break;
        case a.StartToStart:
          m = e.skipWorkingDays(m, n);
          if (c < m) {
            c = m;
            d = k;
          }
          break;
        case a.EndToStart:
          j = e.skipWorkingDays(j, n);
          if (c < j) {
            c = j;
            d = k;
          }
          break;
        case a.EndToEnd:
          j = e.skipWorkingDays(j, n);
          if (b < j) {
            b = j;
            d = k;
          }
          break;
        default:
          throw 'Invalid dependency type: ' + l.getType();
      }
    }
  });
  return {startDate:c > 0 ? c : null, endDate:b > 0 ? b : null, constrainingTask:d};
}, getCriticalPaths:function() {
  var b = [this], a = this.getConstrainContext();
  while (a) {
    b.push(a.constrainingTask);
    a = a.constrainingTask.getConstrainContext();
  }
  return b;
}, cascadeChanges:function(a, b) {
  a = a || this.getTaskStore();
  if (this.isLeaf()) {
    if (this.constrain(a)) {
      this.recalculateParents();
      b.nbrAffected++;
    }
  }
  Ext.each(this.getOutgoingDependencies(), function(c) {
    var d = c.getTargetTask();
    if (d && !d.isManuallyScheduled()) {
      d.cascadeChanges(a, b);
    }
  });
}, addSubtask:function(a) {
  this.set('leaf', false);
  this.appendChild(a);
  this.expand();
}, addSuccessor:function(b) {
  var c = this.rec, e = this.getTaskStore(), d = this.getDependencyStore();
  b = b || new this.self();
  b.calendar = b.calendar || this.getCalendar();
  b.taskStore = e;
  b.setStartDate(this.getEndDate(), true, e.skipWeekendsDuringDragDrop);
  b.setDuration(1, Sch.util.Date.DAY);
  this.addTaskBelow(b);
  var a = new d.model({fromTask:this, toTask:b, type:d.model.Type.EndToStart});
  d.add(a);
}, addMilestone:function(c) {
  var b = this.getTaskStore();
  c = c || new this.self();
  var a = this.getEndDate();
  if (a) {
    c.calendar = c.calendar || this.getCalendar();
    c.setStartEndDate(a, a, b.skipWeekendsDuringDragDrop);
  }
  this.addTaskBelow(c);
}, addPredecessor:function(c) {
  var b = this.getDependencyStore();
  c = c || new this.self();
  c.calendar = c.calendar || this.getCalendar();
  c.beginEdit();
  c.set(this.startDateField, c.calculateStartDate(this.getStartDate(), 1, Sch.util.Date.DAY));
  c.set(this.endDateField, this.getStartDate());
  c.set(this.durationField, 1);
  c.set(this.durationUnitField, Sch.util.Date.DAY);
  c.endEdit();
  this.addTaskAbove(c);
  var a = new b.model({fromTask:c, toTask:this, type:b.model.Type.EndToStart});
  b.add(a);
}, getSuccessors:function() {
  var h = this.getId() || this.internalId;
  var e = e || this.getDependencyStore();
  var c = this.getTaskStore(), g = [];
  for (var f = 0, a = e.getCount(); f < a; f++) {
    var d = e.getAt(f);
    if (d.getSourceId() == h) {
      var b = d.getTargetTask();
      if (b) {
        g.push(b);
      }
    }
  }
  return g;
}, getPredecessors:function() {
  var g = this.getId() || this.internalId;
  var d = d || this.getDependencyStore();
  var b = this.getTaskStore(), f = [];
  for (var e = 0, a = d.getCount(); e < a; e++) {
    var c = d.getAt(e);
    if (c.getTargetId() == g) {
      f.push(c.getSourceTask());
    }
  }
  return f;
}, addTaskAbove:function(a) {
  a = a || new this.self();
  this.parentNode.insertBefore(a, this);
}, addTaskBelow:function(a) {
  a = a || new this.self();
  if (this.nextSibling) {
    this.parentNode.insertBefore(a, this.nextSibling);
  } else {
    this.parentNode.appendChild(a);
  }
}, isAbove:function(a) {
  var b = this, c = Math.min(b.data.depth, a.data.depth);
  while (b.data.depth > c) {
    b = b.parentNode;
  }
  while (a.data.depth > c) {
    a = a.parentNode;
  }
  while (a.parentNode !== b.parentNode) {
    a = a.parentNode;
    b = b.parentNode;
  }
  return a.data.index > b.data.index;
}});
Ext.define('Gnt.model.Task', {extend:'Sch.model.Range', requires:['Sch.util.Date', 'Ext.data.NodeInterface'], mixins:['Gnt.model.task.More'], idProperty:'Id', customizableFields:[{name:'Id'}, {name:'Duration', type:'number', useNull:true}, {name:'Effort', type:'number', useNull:true}, {name:'EffortUnit', type:'string', defaultValue:'h'}, {name:'CalendarId', type:'string'}, {name:'DurationUnit', type:'string', defaultValue:'d', convert:function(a) {
  return a || 'd';
}}, {name:'PercentDone', type:'int', defaultValue:0}, {name:'ManuallyScheduled', type:'boolean', defaultValue:false}, {name:'SchedulingMode', type:'string', defaultValue:'Normal'}, {name:'BaselineStartDate', type:'date', dateFormat:'c'}, {name:'BaselineEndDate', type:'date', dateFormat:'c'}, {name:'BaselinePercentDone', type:'int', defaultValue:0}, {name:'Draggable', type:'boolean', persist:false, defaultValue:true}, {name:'Resizable', persist:false}, {name:'PhantomId', type:'string'}, {name:'PhantomParentId', 
type:'string'}], draggableField:'Draggable', resizableField:'Resizable', nameField:'Name', durationField:'Duration', durationUnitField:'DurationUnit', effortField:'Effort', effortUnitField:'EffortUnit', percentDoneField:'PercentDone', manuallyScheduledField:'ManuallyScheduled', schedulingModeField:'SchedulingMode', calendarIdField:'CalendarId', baselineStartDateField:'BaselineStartDate', baselineEndDateField:'BaselineEndDate', baselinePercentDoneField:'BaselinePercentDone', calendar:null, dependencyStore:null, 
taskStore:null, phantomIdField:'PhantomId', phantomParentIdField:'PhantomParentId', normalized:false, recognizedSchedulingModes:['Normal', 'Manual', 'FixedDuration', 'EffortDriven', 'DynamicAssignment'], constructor:function() {
  this.getModifiedFieldNames = function() {
    if (this.__isFilling__) {
      return [];
    }
    delete this.getModifiedFieldNames;
    return this.getModifiedFieldNames();
  };
  this.callParent(arguments);
}, normalize:function() {
  var c = this.getDuration(), g = this.getDurationUnit(), b = this.getStartDate(), f = this.getEndDate(), e = this.getSchedulingMode(), d = this.data;
  if (f && this.inclusiveEndDate) {
    var i = this.fields.getByKey(this.endDateField).dateFormat;
    var a = i && !Ext.Date.formatContainsHourInfo(i) || f.getHours() === 0 && f.getMinutes() === 0 && f.getSeconds() === 0 && f.getMilliseconds() === 0;
    if (a) {
      if (Ext.isNumber(c)) {
        f = d[this.endDateField] = this.calculateEndDate(b, c, g);
      } else {
        f = d[this.endDateField] = Ext.Date.add(f, Ext.Date.DAY, 1);
      }
    }
  }
  if (c == null && b && f) {
    d[this.durationField] = this.calculateDuration(b, f, g);
  }
  if ((e == 'Normal' || this.isManuallyScheduled()) && f == null && b && Ext.isNumber(c)) {
    d[this.endDateField] = this.calculateEndDate(b, c, g);
  }
  if (e == 'EffortDriven' || e == 'FixedDuration') {
    var j = this.get(this.effortField), h = this.getEffortUnit();
    if (j == null && b && f) {
      d[this.effortField] = this.calculateEffort(b, f, h);
    }
    if (f == null && b && j) {
      d[this.endDateField] = this.calculateEffortDrivenEndDate(b, j, h);
      if (c == null) {
        d[this.durationField] = this.calculateDuration(b, d[this.endDateField], g);
      }
    }
  }
  this.normalized = true;
}, normalizeEffort:function() {
  var c = this.childNodes;
  var b = 0;
  for (var a = 0; a < c.length; a++) {
    var d = c[a];
    if (!d.isLeaf()) {
      d.normalizeEffort();
    }
    b += d.getEffort('MILLI');
  }
  if (this.getEffort('MILLI') != b) {
    this.data[this.effortField] = this.getProjectCalendar().convertMSDurationToUnit(b, this.getEffortUnit());
  }
}, getInternalId:function() {
  return this.getId() || this.internalId;
}, getCalendar:function(a) {
  return a ? this.getOwnCalendar() : this.getOwnCalendar() || this.getProjectCalendar();
}, getOwnCalendar:function() {
  var a = this.get(this.calendarIdField);
  return a ? Gnt.data.Calendar.getCalendar(a) : this.calendar;
}, getProjectCalendar:function() {
  var a = this.stores[0];
  var b = a && a.getCalendar && a.getCalendar() || this.parentNode && this.parentNode.getProjectCalendar() || this.isRoot() && this.calendar;
  if (!b) {
    Ext.Error.raise("Can't find a project calendar in `getProjectCalendar`");
  }
  return b;
}, setCalendar:function(a) {
  this.calendar = a;
}, getDependencyStore:function() {
  var a = this.dependencyStore || this.getTaskStore().dependencyStore;
  if (!a) {
    Ext.Error.raise("Can't find a dependencyStore in `getDependencyStore`");
  }
  return a;
}, getResourceStore:function() {
  return this.getTaskStore().getResourceStore();
}, getAssignmentStore:function() {
  return this.getTaskStore().getAssignmentStore();
}, getTaskStore:function(b) {
  if (this.taskStore) {
    return this.taskStore;
  }
  var a = this.stores[0] && this.stores[0].taskStore || this.parentNode && this.parentNode.getTaskStore(b);
  if (!a && !b) {
    Ext.Error.raise("Can't find a taskStore in `getTaskStore`");
  }
  return this.taskStore = a;
}, isManuallyScheduled:function() {
  return this.get(this.schedulingModeField) == 'Manual' || this.get(this.manuallyScheduledField);
}, setManuallyScheduled:function(a) {
  if (a) {
    this.set(this.schedulingModeField, 'Manual');
  } else {
    if (this.get(this.schedulingModeField) == 'Manual') {
      this.set(this.schedulingModeField, 'Normal');
    }
  }
  return this.set(this.manuallyScheduledField, a);
}, setSchedulingMode:function(a) {
  if (Ext.Array.indexOf(this.recognizedSchedulingModes, a) == -1) {
    throw 'Unrecognized scheduling mode: ' + a;
  }
  this.beginEdit();
  this.set(this.schedulingModeField, a);
  if (a === 'FixedDuration') {
    this.updateEffortBasedOnDuration();
  }
  if (a === 'EffortDriven') {
    this.updateDurationBasedOnEffort();
  }
  this.endEdit();
}, skipNonWorkingTime:function(b, c) {
  var a = false;
  this.forEachAvailabilityIntervalWithResources(c ? {startDate:b} : {endDate:b, isForward:false}, function(f, e, d) {
    b = c ? f : e;
    a = true;
    return false;
  });
  return a ? new Date(b) : this.getCalendar().skipNonWorkingTime(b, c);
}, setStartDate:function(a, f, e) {
  this.beginEdit();
  var d = this.getCalendar();
  if (e && !this.isManuallyScheduled()) {
    if (!this.isMilestone() || d.isHoliday(a - 1)) {
      a = this.skipNonWorkingTime(a, true);
    }
  }
  var b = this.getSchedulingMode();
  this.set(this.startDateField, a);
  if (f !== false) {
    if (b == 'EffortDriven') {
      this.set(this.endDateField, this.calculateEffortDrivenEndDate(a, this.getEffort()));
    } else {
      var c = this.getDuration();
      if (Ext.isNumber(c)) {
        this.set(this.endDateField, this.calculateEndDate(a, c, this.getDurationUnit()));
      }
    }
  } else {
    if (this.getEndDate()) {
      this.set(this.durationField, this.calculateDuration(a, this.getEndDate(), this.getDurationUnit()));
    }
  }
  this.onPotentialEffortChange();
  this.endEdit();
}, setEndDate:function(a, e, d) {
  this.beginEdit();
  var c = this.getCalendar();
  if (d && !this.isManuallyScheduled()) {
    a = this.skipNonWorkingTime(a, false);
  }
  if (e !== false) {
    var b = this.getDuration();
    if (Ext.isNumber(b)) {
      this.set(this.startDateField, this.calculateStartDate(a, b, this.getDurationUnit()));
      this.set(this.endDateField, a);
    } else {
      this.set(this.endDateField, a);
    }
  } else {
    this.set(this.endDateField, a);
    if (this.getStartDate()) {
      this.set(this.durationField, this.calculateDuration(this.getStartDate(), a, this.getDurationUnit()));
    }
  }
  this.onPotentialEffortChange();
  this.endEdit();
}, setStartEndDate:function(a, b, c) {
  this.beginEdit();
  if (c && !this.isManuallyScheduled()) {
    a = a && this.skipNonWorkingTime(a, true);
    b = b && this.skipNonWorkingTime(b, false);
  }
  this.set(this.startDateField, a);
  this.set(this.endDateField, b);
  this.set(this.durationField, this.calculateDuration(a, b, this.getDurationUnit()));
  this.onPotentialEffortChange();
  this.endEdit();
}, getDuration:function(a) {
  if (!a) {
    return this.get(this.durationField);
  }
  var b = this.getProjectCalendar(), c = b.convertDurationToMs(this.get(this.durationField), this.get(this.durationUnitField));
  return b.convertMSDurationToUnit(c, a);
}, getEffort:function(a) {
  var b = this.get(this.effortField) || 0;
  if (!a) {
    return b;
  }
  var c = this.getProjectCalendar(), d = c.convertDurationToMs(b, this.get(this.effortUnitField));
  return c.convertMSDurationToUnit(d, a);
}, setEffort:function(b, a) {
  a = a || this.get(this.effortUnitField);
  this.beginEdit();
  this.set(this.effortField, b);
  this.set(this.effortUnitField, a);
  if (this.getSchedulingMode() === 'EffortDriven') {
    this.updateDurationBasedOnEffort();
  }
  if (this.getSchedulingMode() === 'DynamicAssignment') {
    this.updateAssignments();
  }
  this.endEdit();
}, getCalendarDuration:function(a) {
  return this.getProjectCalendar().convertMSDurationToUnit(this.getEndDate() - this.getStartDate(), a || this.get(this.durationUnitField));
}, setDuration:function(b, a) {
  a = a || this.get(this.durationUnitField);
  this.beginEdit();
  this.set(this.endDateField, this.calculateEndDate(this.getStartDate(), b, a));
  this.set(this.durationField, b);
  this.set(this.durationUnitField, a);
  this.onPotentialEffortChange();
  this.endEdit();
}, calculateStartDate:function(e, d, c) {
  c = c || this.getDurationUnit();
  if (this.isManuallyScheduled()) {
    return Sch.util.Date.add(a, c, -d);
  } else {
    if (this.getTaskStore(true) && this.hasAssignments()) {
      var b = this.getProjectCalendar().convertDurationToMs(d, c || this.getDurationUnit());
      var a;
      this.forEachAvailabilityIntervalWithResources({endDate:e, isForward:false}, function(i, h, g) {
        var f = h - i;
        if (f >= b) {
          a = new Date(h - b);
          return false;
        } else {
          b -= f;
        }
      });
      return a;
    } else {
      return this.getCalendar().calculateStartDate(e, d, c);
    }
  }
}, calculateEndDate:function(a, e, c) {
  c = c || this.getDurationUnit();
  if (this.isManuallyScheduled()) {
    return Sch.util.Date.add(a, c, e);
  } else {
    if (this.getTaskStore(true) && this.hasAssignments()) {
      var b = this.getProjectCalendar().convertDurationToMs(e, c || this.getDurationUnit());
      var d;
      this.forEachAvailabilityIntervalWithResources({startDate:a}, function(i, h, g) {
        var f = h - i;
        if (f >= b) {
          d = new Date(i + b);
          return false;
        } else {
          b -= f;
        }
      });
      return d;
    } else {
      return this.getCalendar().calculateEndDate(a, e, c);
    }
  }
}, calculateDuration:function(a, c, b) {
  b = b || this.getDurationUnit();
  if (!a || !c) {
    return 0;
  }
  if (this.isManuallyScheduled()) {
    return this.getProjectCalendar().convertMSDurationToUnit(c - a, b);
  } else {
    if (this.getTaskStore(true) && this.hasAssignments()) {
      var d = 0;
      this.forEachAvailabilityIntervalWithResources({startDate:a, endDate:c}, function(g, f, e) {
        d += f - g;
      });
      return this.getProjectCalendar().convertMSDurationToUnit(d, b);
    } else {
      return this.getCalendar().calculateDuration(a, c, b);
    }
  }
}, forEachAvailabilityIntervalWithResources:function(f, h, a) {
  a = a || this;
  var C = this;
  var d = f.startDate;
  var z = f.endDate;
  var p = f.isForward !== false;
  if (p ? !d : !z) {
    throw new Error('At least `startDate` or `endDate` is required, depending from the `isForward` option');
  }
  var j = new Date(p ? d : z);
  var b = f.includeEmptyIntervals;
  var c = this.getOwnCalendar();
  var G = Boolean(c);
  var E = this.getProjectCalendar();
  var A, v, r;
  if (f.resources) {
    A = f.resources;
    r = [];
    v = [];
    Ext.each(A, function(i) {
      v.push(i.getCalendar());
      r.push(C.getAssignmentFor(i));
    });
  } else {
    r = this.getAssignments();
    if (!r.length) {
      return;
    }
    A = [];
    v = [];
    Ext.each(r, function(k) {
      var i = k.getResource();
      A.push(i);
      v.push(i.getCalendar());
    });
  }
  var g = Sch.util.Date;
  var y, u, B, D, n;
  var t = p ? !z : !d;
  while (t || (p ? j < z : j > d)) {
    var q = {};
    var F = [];
    if (G) {
      var l = c.getAvailabilityIntervalsFor(j - (p ? 0 : 1));
      for (u = 0; u < l.length; u++) {
        B = l[u];
        D = B.startDate - 0;
        n = B.endDate - 0;
        if (!q[D]) {
          q[D] = [];
          F.push(D);
        }
        q[D].push({type:'00-taskAvailailabilityStart', typeBackward:'01-taskAvailailabilityStart'});
        F.push(n);
        q[n] = q[n] || [];
        q[n].push({type:'01-taskAvailailabilityEnd', typeBackward:'00-taskAvailailabilityEnd'});
      }
    }
    for (y = 0; y < v.length; y++) {
      var e = v[y].getAvailabilityIntervalsFor(j);
      for (u = 0; u < e.length; u++) {
        B = e[u];
        D = B.startDate - 0;
        n = B.endDate - 0;
        if (!q[D]) {
          q[D] = [];
          F.push(D);
        }
        q[D].push({type:'02-resourceAvailailabilityStart', typeBackward:'03-resourceAvailailabilityStart', assignment:r[y], resourceId:A[y].getInternalId(), units:r[y].getUnits()});
        if (!q[n]) {
          q[n] = [];
          F.push(n);
        }
        q[n].push({type:'03-resourceAvailailabilityEnd', typeBackward:'02-resourceAvailailabilityEnd', assignment:r[y], resourceId:A[y].getInternalId(), units:r[y].getUnits()});
      }
    }
    F.sort();
    var x = false;
    var o = {};
    var m = 0;
    var w, s;
    if (p) {
      for (y = 0; y < F.length; y++) {
        w = q[F[y]];
        w.sort(function(k, i) {
          return k.type < i.type;
        });
        for (u = 0; u < w.length; u++) {
          s = w[u];
          if (s.type == '00-taskAvailailabilityStart') {
            x = true;
          }
          if (s.type == '01-taskAvailailabilityEnd') {
            x = false;
          }
          if (s.type == '02-resourceAvailailabilityStart') {
            o[s.resourceId] = s;
            m++;
          }
          if (s.type == '03-resourceAvailailabilityEnd') {
            delete o[s.resourceId];
            m--;
          }
        }
        if ((x || !G) && (m || b)) {
          D = F[y];
          n = F[y + 1];
          if (D >= z || n <= d) {
            continue;
          }
          if (D < d) {
            D = d - 0;
          }
          if (n > z) {
            n = z - 0;
          }
          if (h.call(a, D, n, o) === false) {
            return false;
          }
        }
      }
    } else {
      for (y = F.length - 1; y >= 0; y--) {
        w = q[F[y]];
        w.sort(function(k, i) {
          return k.typeBackward < i.typeBackward;
        });
        for (u = 0; u < w.length; u++) {
          s = w[u];
          if (s.typeBackward == '00-taskAvailailabilityEnd') {
            x = true;
          }
          if (s.typeBackward == '01-taskAvailailabilityStart') {
            x = false;
          }
          if (s.typeBackward == '02-resourceAvailailabilityEnd') {
            o[s.resourceId] = s;
            m++;
          }
          if (s.typeBackward == '03-resourceAvailailabilityStart') {
            delete o[s.resourceId];
            m--;
          }
        }
        if ((x || !G) && (m || b)) {
          D = F[y - 1];
          n = F[y];
          if (D > z || n <= d) {
            continue;
          }
          if (D < d) {
            D = d - 0;
          }
          if (n > z) {
            n = z - 0;
          }
          if (h.call(a, D, n, o) === false) {
            return false;
          }
        }
      }
    }
    j = p ? g.getStartOfNextDay(j) : g.getEndOfPreviousDay(j);
  }
}, calculateEffortDrivenEndDate:function(a, c, b) {
  var e = this.getProjectCalendar().convertDurationToMs(c, b || this.getEffortUnit());
  var d = new Date(a);
  this.forEachAvailabilityIntervalWithResources({startDate:a}, function(l, k, j) {
    var m = 0;
    for (var h in j) {
      m += j[h].units;
    }
    var g = k - l;
    var f = m * g / 100;
    if (f >= e) {
      d = new Date(l + e / f * g);
      return false;
    } else {
      e -= f;
    }
  });
  return d;
}, recalculateParents:function() {
  var h = new Date(9999, 0, 0), e = new Date(0), m = this.parentNode;
  if (m && m.childNodes.length > 0) {
    var b = 0;
    for (var f = 0, j = m.childNodes.length; f < j; f++) {
      b += m.childNodes[f].getEffort('MILLI');
    }
    if (m.getEffort('MILLI') != b) {
      m.setEffort(this.getProjectCalendar().convertMSDurationToUnit(b, m.getEffortUnit()));
    }
  }
  var n, c;
  if (m && !m.isRoot() && m.childNodes.length > 0) {
    if (!m.isManuallyScheduled()) {
      for (var g = 0, d = m.childNodes.length; g < d; g++) {
        var a = m.childNodes[g];
        h = Sch.util.Date.min(h, a.getStartDate() || h);
        e = Sch.util.Date.max(e, a.getEndDate() || e);
      }
      n = h - new Date(9999, 0, 0) !== 0 && m.getStartDate() - h !== 0;
      c = e - new Date(0) !== 0 && m.getEndDate() - e !== 0;
      if (n && c) {
        m.setStartEndDate(h, e, false);
      } else {
        if (n) {
          m.setStartDate(h, c, false);
        } else {
          if (c) {
            m.setEndDate(e, false, false);
          }
        }
      }
    }
    if (!n && !c) {
      m.recalculateParents();
    }
  }
}, isMilestone:function() {
  return this.getDuration() === 0;
}, isBaselineMilestone:function() {
  var b = this.getBaselineStartDate(), a = this.getBaselineEndDate();
  if (b && a) {
    return a - b === 0;
  }
  return false;
}, afterEdit:function(b) {
  if (this.stores.length > 0 || !this.normalized) {
    this.callParent(arguments);
  } else {
    var a = this.taskStore || this.getTaskStore(true);
    if (a && !a.isFillingRoot) {
      a.afterEdit(this, b);
    }
    this.callParent(arguments);
  }
}, afterCommit:function() {
  this.callParent(arguments);
  if (this.stores.length > 0 || !this.normalized) {
    return;
  }
  var a = this.taskStore || this.getTaskStore(true);
  if (a && !a.isFillingRoot) {
    a.afterCommit(this);
  }
}, afterReject:function() {
  if (this.stores.length > 0) {
    this.callParent(arguments);
  } else {
    var a = this.getTaskStore(true);
    if (a && !a.isFillingRoot) {
      a.afterReject(this);
    }
    this.callParent(arguments);
  }
}, getDurationUnit:function() {
  return this.get(this.durationUnitField) || 'd';
}, getEffortUnit:function() {
  return this.get(this.effortUnitField) || 'd';
}, getBaselinePercentDone:function() {
  return this.get(this.baselinePercentDoneField) || 0;
}, isPersistable:function() {
  var a = this.parentNode;
  return !a.phantom;
}, getResources:function() {
  var b = this.getAssignmentStore(), c = this.getInternalId();
  var a = [];
  if (b) {
    b.each(function(d) {
      if (d.getTaskId() == c) {
        a.push(d.getResource());
      }
    });
  }
  return a;
}, getAssignments:function() {
  var b = this.getAssignmentStore(), c = this.getInternalId();
  var a = [];
  if (b) {
    b.each(function(d) {
      if (d.getTaskId() == c) {
        a.push(d);
      }
    });
  }
  return a;
}, hasAssignments:function() {
  var b = this.getAssignmentStore(), c = this.getInternalId();
  var a = false;
  if (b) {
    b.each(function(d) {
      if (d.getTaskId() == c) {
        a = true;
        return false;
      }
    });
  }
  return a;
}, getAssignmentFor:function(b) {
  var c = this.getAssignmentStore(), e = this.getInternalId(), d = b instanceof Gnt.model.Resource ? b.getInternalId() : b;
  var a;
  if (c) {
    c.each(function(f) {
      if (f.getTaskId() == e && f.getResourceId() == d) {
        a = f;
        return false;
      }
    });
  }
  return a || null;
}, unassign:function() {
  return this.unAssign.apply(this, arguments);
}, unAssign:function(a) {
  var b = this.getAssignmentStore();
  var c = a instanceof Gnt.model.Resource ? a.getInternalId() : a;
  b.removeAt(b.find('ResourceId', c));
}, assign:function(e, a) {
  var b = this.getTaskStore(), h = this.getInternalId(), f = b.getAssignmentStore(), d = b.getResourceStore();
  var g = e instanceof Gnt.model.Resource ? e.getInternalId() : e;
  f.each(function(i) {
    if (i.getTaskId() == h && i.getResourceId() == g) {
      throw "Resource can't be assigned twice to the same task";
    }
  });
  if (e instanceof Gnt.model.Resource && d.indexOf(e) == -1) {
    d.add(e);
  }
  var c = new Gnt.model.Assignment({TaskId:h, ResourceId:g, Units:a});
  f.add(c);
  return c;
}, calculateEffort:function(a, c, b) {
  var d = 0;
  this.forEachAvailabilityIntervalWithResources({startDate:a, endDate:c}, function(h, g, f) {
    var j = 0;
    for (var e in f) {
      j += f[e].units;
    }
    d += (g - h) * j / 100;
  });
  return this.getProjectCalendar().convertMSDurationToUnit(d, b || this.getEffortUnit());
}, updateAssignments:function() {
  var b = {};
  var a = this.getStartDate();
  var d = this.getEndDate();
  var c = 0;
  this.forEachAvailabilityIntervalWithResources({startDate:a, endDate:d}, function(h, g, f) {
    for (var i in f) {
      c += g - h;
    }
  });
  if (!c) {
    return;
  }
  var e = this.getEffort(Sch.util.Date.MILLI);
  Ext.Array.each(this.getAssignments(), function(f) {
    f.setUnits(e / c * 100);
  });
}, updateEffortBasedOnDuration:function() {
  this.setEffort(this.calculateEffort(this.getStartDate(), this.getEndDate()));
}, updateDurationBasedOnEffort:function() {
  this.setEndDate(this.calculateEffortDrivenEndDate(this.getStartDate(), this.getEffort(), this.getEffortUnit()), false);
}, onPotentialEffortChange:function() {
  if (this.getSchedulingMode() === 'FixedDuration') {
    this.updateEffortBasedOnDuration();
  }
  if (this.getSchedulingMode() === 'DynamicAssignment') {
    this.updateAssignments();
  }
}, onAssignmentMutation:function() {
  if (this.getSchedulingMode() === 'FixedDuration') {
    this.updateEffortBasedOnDuration();
  }
  if (this.getSchedulingMode() === 'EffortDriven') {
    this.updateDurationBasedOnEffort();
  }
}, onAssignmentStructureMutation:function() {
  if (this.getSchedulingMode() == 'FixedDuration') {
    this.updateEffortBasedOnDuration();
  }
  if (this.getSchedulingMode() === 'EffortDriven') {
    this.updateDurationBasedOnEffort();
  }
  if (this.getSchedulingMode() === 'DynamicAssignment') {
    this.updateAssignments();
  }
}, adjustToCalendar:function() {
  if (this.get('leaf') && !this.isManuallyScheduled()) {
    var a = this.hasIncomingDependencies();
    if (a) {
      this.constrain();
    } else {
      this.setStartDate(this.getStartDate(), true, true);
    }
  }
}, isEditable:function(a) {
  if ((a === this.durationField || a === this.endDateField) && this.getSchedulingMode() === 'EffortDriven') {
    return false;
  }
  if (a === this.effortField && this.getSchedulingMode() === 'FixedDuration') {
    return false;
  }
  return true;
}, isDraggable:function() {
  return this.getDraggable();
}, isResizable:function() {
  return this.getResizable();
}, ensureSingleSyncForMethod:function() {
  return function() {
    var a = this.getTaskStore(true);
    var c;
    if (a && a.autoSync && !a.autoSyncSuspended) {
      c = true;
      a.suspendAutoSync();
    }
    var b = this.callParent(arguments);
    if (c) {
      a.resumeAutoSync();
      a.sync();
    }
    return b;
  };
}, getId:function() {
  var a = this.data[this.idProperty];
  return a && a !== 'root' ? a : null;
}}, function() {
  Ext.data.NodeInterface.decorate(this);
  var a = ['addPredecessor', 'addSubtask', 'addSuccessor', 'indent', 'outdent', 'remove', 'insertBefore', 'appendChild'];
  this.override({remove:function() {
    var b = this.parentNode;
    var c = this.callParent(arguments);
    if (b.childNodes.length === 0 && this.getTaskStore().recalculateParents) {
      b.set('leaf', true);
    }
    return c;
  }, insertBefore:function(b) {
    if (this.phantom) {
      this.data[this.phantomIdField] = b.data[this.phantomParentIdField] = this.internalId;
    }
    return this.callParent(arguments);
  }, appendChild:function(b) {
    if (this.phantom) {
      this.data[this.phantomIdField] = b.data[this.phantomParentIdField] = this.internalId;
    }
    return this.callParent(arguments);
  }});
  Ext.each(a, function(c) {
    var b = {};
    b[c] = this.prototype.ensureSingleSyncForMethod(this.prototype[c]);
    this.override(b);
  }, this);
});
Ext.define('Gnt.data.Calendar', {extend:'Ext.data.Store', requires:['Ext.Date', 'Gnt.model.CalendarDay', 'Sch.model.Range', 'Sch.util.Date'], model:'Gnt.model.CalendarDay', daysPerMonth:30, daysPerWeek:7, hoursPerDay:24, unitsInMs:null, defaultNonWorkingTimeCssCls:'gnt-holiday', weekendsAreWorkdays:false, weekendFirstDay:6, weekendSecondDay:0, holidaysCache:null, availabilityIntervalsCache:null, weekAvailability:null, defaultWeekAvailability:null, nonStandardWeeksByStartDate:null, nonStandardWeeksStartDates:null, 
calendarId:null, parent:null, defaultAvailability:['00:00-24:00'], name:null, statics:{getCalendar:function(a) {
  if (a instanceof Gnt.data.Calendar) {
    return a;
  }
  return Ext.data.StoreManager.lookup('GNT_CALENDAR:' + a);
}, getAllCalendars:function() {
  var a = [];
  Ext.data.StoreManager.each(function(b) {
    if (b instanceof Gnt.data.Calendar) {
      a.push(b);
    }
  });
  return a;
}}, constructor:function(a) {
  a = a || {};
  if (a.calendarId) {
    this.storeId = 'GNT_CALENDAR:' + a.calendarId;
  }
  this.callParent(arguments);
  var c = this;
  var b = this.parent = Gnt.data.Calendar.getCalendar(a.parent);
  if (a.parent && !this.parent) {
    throw new Error('Invalid parent specified for calendar');
  }
  this.unitsInMs = {MILLI:1, SECOND:1000, MINUTE:60 * 1000, HOUR:60 * 60 * 1000, DAY:this.hoursPerDay * 60 * 60 * 1000, WEEK:this.daysPerWeek * this.hoursPerDay * 60 * 60 * 1000, MONTH:this.daysPerMonth * this.hoursPerDay * 60 * 60 * 1000, QUARTER:3 * this.daysPerMonth * 24 * 60 * 60 * 1000, YEAR:4 * 3 * this.daysPerMonth * 24 * 60 * 60 * 1000};
  this.defaultWeekAvailability = this.getDefaultWeekAvailability(this.weekendsAreWorkdays);
  Ext.Array.each(a.weekAvailability || [], function(e, d) {
    if (e) {
      e.setDate(new Date(0, 0, d));
      e.set(e.idProperty, 'WEEKDAY:' + d);
    }
    c.add(e);
  });
  this.holidaysCache = {};
  this.availabilityIntervalsCache = {};
  this.on({clear:this.clearCache, datachanged:this.clearCache, update:this.clearCache, load:this.updateAvailability, scope:this});
  b && b.on('clearcache', this.clearCache, this);
  this.updateAvailability();
}, getDefaultWeekAvailability:function(f) {
  var e = this.defaultAvailability;
  var d = this.weekendFirstDay;
  var a = this.weekendSecondDay;
  var c = [];
  for (var b = 0; b < 7; b++) {
    c.push(f || b != d && b != a ? new Gnt.model.CalendarDay({Availability:Ext.Array.clone(e), IsWorkingDay:true}) : new Gnt.model.CalendarDay({Availability:[]}));
  }
  return c;
}, updateAvailability:function() {
  var a = this.weekAvailability = [];
  var c = this.nonStandardWeeksStartDates = [];
  var b = this.nonStandardWeeksByStartDate = {};
  this.each(function(e) {
    var i = e.getId();
    var g = /^(\d)-(\d\d\d\d\/\d\d\/\d\d)-(\d\d\d\d\/\d\d\/\d\d)$/.exec(i);
    var f;
    if (g) {
      var d = Ext.Date.parse(g[2], 'Y/m/d') - 0;
      var h = Ext.Date.parse(g[3], 'Y/m/d') - 0;
      f = g[1];
      if (!b[d]) {
        b[d] = {startDate:new Date(d), endDate:new Date(h), name:e.getName(), weekAvailability:[]};
        c.push(d);
      }
      b[d].weekAvailability[f] = e;
    }
    g = /^WEEKDAY:(\d+)$/.exec(i);
    if (g) {
      f = g[1];
      if (f < 0 || f > 6) {
        throw new Error('Incorrect week day index');
      }
      a[f] = e;
    }
  });
  c.sort();
}, intersectsWithCurrentWeeks:function(b, d) {
  var e = this.nonStandardWeeksStartDates;
  var c = this.nonStandardWeeksByStartDate;
  var a = false;
  Ext.Array.each(e, function(h) {
    var f = c[h].startDate;
    var g = c[h].endDate;
    if (f <= b && b < g || f < d && d <= g) {
      a = true;
      return false;
    }
  });
  return a;
}, addNonStandardWeek:function(b, c, a) {
  b = Ext.Date.clearTime(new Date(b));
  c = Ext.Date.clearTime(new Date(c));
  if (this.intersectsWithCurrentWeeks(b, c)) {
    throw new Error('Can not add intersecting week');
  }
  Ext.Array.each(a, function(d, e) {
    if (d) {
      d.set(d.idProperty, e + '-' + Ext.Date.format(b, 'Y/m/d') + '-' + Ext.Date.format(c, 'Y/m/d'));
    }
  });
  b = b - 0;
  c = c - 0;
  this.nonStandardWeeksStartDates.push(b);
  this.nonStandardWeeksStartDates.sort();
  this.nonStandardWeeksByStartDate[b] = {startDate:new Date(b), endDate:new Date(c), weekAvailability:a};
  this.add(Ext.Array.clean(a));
}, getNonStandardWeekByStartDate:function(a) {
  return this.nonStandardWeeksByStartDate[Ext.Date.clearTime(new Date(a)) - 0];
}, getNonStandardWeekByDate:function(d) {
  d = Ext.Date.clearTime(new Date(d)) - 0;
  var e = this.nonStandardWeeksStartDates;
  var a = this.nonStandardWeeksByStartDate;
  for (var c = 0; c < e.length; c++) {
    var b = a[e[c]];
    if (b.startDate <= d && d <= b.endDate) {
      return b;
    }
  }
  return null;
}, removeNonStandardWeek:function(a) {
  a = Ext.Date.clearTime(new Date(a)) - 0;
  var b = this.getNonStandardWeekByStartDate(a);
  if (!b) {
    return;
  }
  this.remove(Ext.Array.clean(b.weekAvailability));
  delete this.nonStandardWeeksByStartDate[a];
  Ext.Array.remove(this.nonStandardWeeksStartDates, a);
}, clearCache:function() {
  this.holidaysCache = {};
  this.availabilityIntervalsCache = {};
  this.fireEvent('clearcache', this);
}, setWeekendsAreWorkDays:function(a) {
  if (a !== this.weekendsAreWorkdays) {
    this.weekendsAreWorkdays = a;
    this.clearCache();
    this.defaultWeekAvailability = this.getDefaultWeekAvailability(this.weekendsAreWorkdays);
  }
}, areWeekendsWorkDays:function() {
  return this.weekendsAreWorkdays;
}, getCalendarDay:function(b) {
  b = typeof b == 'number' ? new Date(b) : b;
  var a = this.getOverrideDay(b);
  if (a) {
    return a;
  }
  return this.getDefaultCalendarDay(b.getDay(), b);
}, getOverrideDay:function(a) {
  var b = this.getOwnCalendarDay(a);
  if (b) {
    return b;
  }
  if (this.parent) {
    return this.parent.getOverrideDay(a);
  }
  return null;
}, getOwnCalendarDay:function(a) {
  a = typeof a == 'number' ? new Date(a) : a;
  return this.getById(Ext.Date.clearTime(a, true) - 0);
}, getDefaultCalendarDay:function(c, b) {
  if (b) {
    var a = this.getNonStandardWeekByDate(b);
    if (a && a.weekAvailability[c]) {
      return a.weekAvailability[c];
    }
  }
  if (this.weekAvailability[c]) {
    return this.weekAvailability[c];
  }
  if (this.parent) {
    return this.parent.getDefaultCalendarDay(c);
  }
  return this.defaultWeekAvailability[c];
}, isHoliday:function(c) {
  var b = c - 0;
  var d = this.holidaysCache;
  if (d[b] != null) {
    return d[b];
  }
  c = typeof c == 'number' ? new Date(c) : c;
  var a = this.getCalendarDay(c);
  if (!a) {
    throw "Can't find day for " + c;
  }
  return d[b] = !a.getIsWorkingDay();
}, isWeekend:function(b) {
  var a = b.getDay();
  return a === this.weekendFirstDay || a === this.weekendSecondDay;
}, isWorkingDay:function(a) {
  return !this.isHoliday(a);
}, convertMSDurationToUnit:function(a, b) {
  return a / this.unitsInMs[Sch.util.Date.getNameOfUnit(b)];
}, convertDurationToMs:function(b, a) {
  return b * this.unitsInMs[Sch.util.Date.getNameOfUnit(a)];
}, getHolidaysRanges:function(d, g, a) {
  if (d > g) {
    Ext.Error.raise("startDate can't be bigger than endDate");
  }
  d = Ext.Date.clearTime(d, true);
  g = Ext.Date.clearTime(g, true);
  var c = [], h, e;
  for (e = d; e < g; e = Sch.util.Date.add(e, Sch.util.Date.DAY, 1)) {
    if (this.isHoliday(e) || this.weekendsAreWorkdays && a && this.isWeekend(e)) {
      var i = this.getCalendarDay(e);
      var j = i && i.getCls() || this.defaultNonWorkingTimeCssCls;
      var f = Sch.util.Date.add(e, Sch.util.Date.DAY, 1);
      if (!h) {
        h = {StartDate:e, EndDate:f, Cls:j};
      } else {
        if (h.Cls == j) {
          h.EndDate = f;
        } else {
          c.push(h);
          h = {StartDate:e, EndDate:f, Cls:j};
        }
      }
    } else {
      if (h) {
        c.push(h);
        h = null;
      }
    }
  }
  if (h) {
    c.push(h);
  }
  var b = [];
  Ext.each(c, function(k) {
    b.push(Ext.create('Sch.model.Range', {StartDate:k.StartDate, EndDate:k.EndDate, Cls:k.Cls}));
  });
  return b;
}, forEachAvailabilityInterval:function(r, f, p) {
  p = p || this;
  var l = this;
  var d = r.startDate;
  var j = r.endDate;
  var o = r.isForward !== false;
  if (o ? !d : !j) {
    throw new Error('At least `startDate` or `endDate` is required, depending from the `isForward` option');
  }
  var a = new Date(o ? d : j);
  var q = o ? !j : !d;
  var c = Sch.util.Date;
  while (q || (o ? a < j : a > d)) {
    var h = this.getAvailabilityIntervalsFor(a - (o ? 0 : 1));
    for (var g = o ? 0 : h.length - 1; o ? g < h.length : g >= 0; o ? g++ : g--) {
      var b = h[g];
      var k = b.startDate;
      var n = b.endDate;
      if (k >= j || n <= d) {
        continue;
      }
      var e = k < d ? d : k;
      var m = n > j ? j : n;
      if (f.call(p, e, m) === false) {
        return false;
      }
    }
    a = o ? c.getStartOfNextDay(a) : c.getEndOfPreviousDay(a);
  }
}, calculateDuration:function(a, d, b) {
  var c = 0;
  this.forEachAvailabilityInterval({startDate:a, endDate:d}, function(f, e) {
    c += e - f;
  });
  return this.convertMSDurationToUnit(c, b);
}, calculateEndDate:function(a, f, b) {
  if (!f) {
    return new Date(a);
  }
  var e = Sch.util.Date, d;
  f = this.convertDurationToMs(f, b);
  var c = f === 0 && Ext.Date.clearTime(a, true) - a === 0 ? e.add(a, Sch.util.Date.DAY, -1) : a;
  this.forEachAvailabilityInterval({startDate:c}, function(i, h) {
    var j = h - i;
    var g = i.getTimezoneOffset() - h.getTimezoneOffset();
    if (j >= f) {
      d = new Date(i - 0 + f);
      return false;
    } else {
      f -= j + g * 60 * 1000;
    }
  });
  return d;
}, calculateStartDate:function(d, c, b) {
  if (!c) {
    return new Date(d);
  }
  var a;
  c = this.convertDurationToMs(c, b);
  this.forEachAvailabilityInterval({endDate:d, isForward:false}, function(f, e) {
    var g = e - f;
    if (g >= c) {
      a = new Date(e - c);
      return false;
    } else {
      c -= g;
    }
  });
  return a;
}, skipNonWorkingTime:function(a, b) {
  this.forEachAvailabilityInterval(b ? {startDate:a} : {endDate:a, isForward:false}, function(d, c) {
    a = b ? d : c;
    return false;
  });
  return new Date(a);
}, skipWorkingDays:function(a, b) {
  var c = 0, d = b > 0, e = Sch.util.Date, f = Ext.Date.clone(a);
  b = Math.abs(b);
  while (c < b) {
    if (!this.isHoliday(f - (d ? 0 : 1))) {
      c++;
      if (d) {
        f = e.getStartOfNextDay(f, true);
      } else {
        f = e.getEndOfPreviousDay(f);
      }
    }
    if (d || c < b) {
      f = this.skipNonWorkingTime(f, d);
    }
  }
  e.copyTimeValues(f, a);
  return f;
}, getAvailabilityIntervalsFor:function(a) {
  a = Ext.Date.clearTime(new Date(a)) - 0;
  if (this.availabilityIntervalsCache[a]) {
    return this.availabilityIntervalsCache[a];
  }
  return this.availabilityIntervalsCache[a] = this.getCalendarDay(a).getAvailabilityIntervalsFor(a);
}, getParentableCalendars:function() {
  var c = this, a = [], d = Gnt.data.Calendar.getAllCalendars();
  var b = function(e) {
    if (!e.parent) {
      return false;
    }
    if (e.parent == c) {
      return true;
    }
    return b(e.parent);
  };
  Ext.Array.each(d, function(e) {
    if (e === c) {
      return;
    }
    if (!b(e)) {
      a.push({Id:e.calendarId, Name:e.name || e.calendarId});
    }
  });
  return a;
}});
Ext.define('Gnt.data.calendar.BusinessTime', {extend:'Gnt.data.Calendar', daysPerMonth:20, daysPerWeek:5, hoursPerDay:8, defaultAvailability:['08:00-12:00', '13:00-17:00']});
Ext.define('Gnt.data.TaskStore', {extend:'Ext.data.TreeStore', requires:['Sch.patches.TreeStore', 'Gnt.model.Task', 'Gnt.data.Calendar'], model:'Gnt.model.Task', calendar:null, dependencyStore:null, resourceStore:null, assignmentStore:null, weekendsAreWorkdays:false, buffered:false, pageSize:null, cascadeChanges:false, batchSync:true, recalculateParents:true, skipWeekendsDuringDragDrop:true, cascadeDelay:0, cascading:false, isFillingRoot:false, constructor:function(c) {
  this.addEvents('root-fill-start', 'root-fill-end', 'filter', 'clearfilter', 'beforecascade', 'cascade');
  c = c || {};
  if (!c.calendar) {
    var a = {};
    if (c.hasOwnProperty('weekendsAreWorkdays')) {
      a.weekendsAreWorkdays = c.weekendsAreWorkdays;
    } else {
      if (this.self.prototype.hasOwnProperty('weekendsAreWorkdays') && this.self != Gnt.data.TaskStore) {
        a.weekendsAreWorkdays = this.weekendsAreWorkdays;
      }
    }
    c.calendar = new Gnt.data.Calendar(a);
  }
  this.hasListeners = {};
  this.on({'root-fill-end':this.onRootFillEnd, remove:this.onTaskDeleted, beforesync:this.onTaskStoreBeforeSync, write:this.onTaskStoreWrite, scope:this});
  var b = c.dependencyStore;
  if (b) {
    delete c.dependencyStore;
    this.setDependencyStore(b);
  }
  var d = c.resourceStore;
  if (d) {
    delete c.resourceStore;
    this.setResourceStore(d);
  }
  var f = c.assignmentStore;
  if (f) {
    delete c.assignmentStore;
    this.setAssignmentStore(f);
  }
  var e = c.calendar;
  if (e) {
    delete c.calendar;
    this.setCalendar(e);
  }
  this.callParent([c]);
  if (Ext.data.reader.Xml && this.getProxy().getReader() instanceof Ext.data.reader.Xml) {
    Ext.override(this.getProxy().getReader(), {extractData:function(g) {
      var h = this.record;
      if (h != g.nodeName) {
        g = Ext.DomQuery.select('\x3e' + h, g);
      } else {
        g = [g];
      }
      return Ext.data.reader.Xml.superclass.extractData.apply(this, [g]);
    }});
  }
  if (this.autoSync && this.batchSync) {
    this.sync = Ext.Function.createBuffered(this.sync, 500);
  }
}, loadData:function(A, v) {
  var y = this, r = y.getRootNode(), c = v ? v.addRecords : false;
  if (!A.length) {
    return;
  } else {
    if (!r) {
      r = y.setRootNode();
    }
    y.suspendAutoSync();
    y.suspendEvents();
    if (!c) {
      r.removeAll();
    }
    var f = A.length, e = y.model, m = [], t = typeof A[0].get === 'function', b, p, o, w, x, z, u, n, h;
    for (var s = 0; s < f; s++) {
      p = y.getById(A[s].getId ? A[s].getId() : A[s].Id);
      b = 0;
      if (p) {
        w = t ? A[s].get('parentId') : A[s].parentId;
        x = p.get('parentId');
        z = t ? A[s].get('index') : A[s].index;
        u = p.get('index');
        if (t) {
          p.set(A[s].data);
        } else {
          p.set(A[s]);
        }
        if ((w || w === null ? w !== x : false) || (z ? z !== u : false)) {
          n = w === null ? r : y.getById(w);
          h = x === null ? r : y.getById(x);
        } else {
          b = 1;
        }
      } else {
        p = t ? new e(A[s].data) : new e(A[s]);
        x = p.get('parentId');
        if (x) {
          n = y.getById(x);
        } else {
          if (x === null) {
            n = r;
          }
        }
      }
      if (n && !b) {
        y.moveChildren(p, n, h);
      } else {
        if (typeof n === 'undefined' && !b) {
          o = {node:p, index:p.get('index') || 0, parentId:p.get('parentId')};
          m.push(o);
        }
      }
    }
    var g = 0, j = m.length, d, k;
    while (m.length) {
      if (g > m.length - 1) {
        g = 0;
      }
      d = m[g];
      k = d.parentId === null ? r : y.getById(d.parentId);
      if (k) {
        var a = y.nodeIsChild(d.node, n);
        if (a) {
          k.insertChild(d.index, d.node);
          y.fixNodeDates(d.node);
          m.splice(g, 1);
        }
      }
      g += 1;
      if (g === j - 1 && m.length === j) {
        throw 'Invalid data, possible infinite loop.';
      }
    }
    if (y.nodesToExpand) {
      s = 0;
      for (var q = y.nodesToExpand.length; s < q; s += 1) {
        p = y.nodesToExpand[s];
        if (p.childNodes.length) {
          p.expand();
        }
      }
      delete y.nodesToExpand;
    }
    this.fireEvent('datachanged');
    this.fireEvent('refresh');
    y.resumeAutoSync();
    y.resumeEvents();
    if (y.autoSync) {
      y.sync();
    }
  }
}, fixNodeDates:function(b) {
  var c = b.calculateDuration(b.getStartDate(), b.getEndDate(), b.getDurationUnit()), a;
  b.set({Duration:c});
  if (b.childNodes.length) {
    a = b.getChildAt(0);
    a.recalculateParents();
  } else {
    b.recalculateParents();
  }
}, nodeIsChild:function(c, b) {
  var d = b.getId(), a = true;
  if (c.childNodes.length) {
    c.cascadeBy(function(e) {
      if (e.getId() === d) {
        a = false;
        return false;
      }
    });
  }
  return a;
}, moveChildren:function(e, d, c) {
  if (e.get('expanded')) {
    if (!this.nodesToExpand) {
      this.nodesToExpand = [];
    }
    this.nodesToExpand.push(e);
    e.set('expanded', false);
  }
  var b, f = this.nodeIsChild(e, d), a = c || this.getById(e.get('parentId'));
  if (f) {
    if (e.childNodes.length) {
      b = e.copy(null, true);
      e.removeAll();
    }
    if (a && a.getId() !== d.getId()) {
      a.removeChild(e);
    }
    d.insertChild(e.get('index') || 0, e);
    if (b) {
      b.cascadeBy(function(h) {
        if (h !== b) {
          var g = h.copy(null);
          e.insertChild(g.get('index') || 0, g);
        }
      });
    }
    this.fixNodeDates(e);
  }
}, onNodeAdded:function(c, e) {
  if (!e.normalized && !e.isRoot()) {
    e.normalize();
  }
  if (Ext.isIE) {
    var d = this, b = d.getProxy(), a = b.getReader(), f = e.raw || e[e.persistenceProperty], g;
    Ext.Array.remove(d.removed, e);
    if (!e.isLeaf()) {
      g = a.getRoot(f);
      if (g) {
        d.fillNode(e, a.extractData(g));
        if (f[a.root]) {
          delete f[a.root];
        }
      }
    }
    if (d.autoSync && !d.autoSyncSuspended && (e.phantom || e.dirty)) {
      d.sync();
    }
  } else {
    this.callParent(arguments);
  }
}, setRootNode:function() {
  var b = this;
  this.tree.setRootNode = Ext.Function.createInterceptor(this.tree.setRootNode, function(c) {
    Ext.apply(c, {calendar:b.calendar, taskStore:b, dependencyStore:b.dependencyStore, phantom:false, dirty:false});
  });
  var a = this.callParent(arguments);
  delete this.tree.setRootNode;
  return a;
}, fillNode:function(g, c) {
  this.isFillingNode = true;
  if (g.isRoot()) {
    this.isFillingRoot = true;
    this.un({remove:this.onNodeUpdated, append:this.onNodeUpdated, insert:this.onNodeUpdated, update:this.onTaskUpdated, scope:this});
    this.fireEvent('root-fill-start', this, g, c);
  }
  var f = this, e = c ? c.length : 0, d = 0, b;
  if (e && f.sortOnLoad && !f.remoteSort && f.sorters && f.sorters.items) {
    b = Ext.create('Ext.util.MixedCollection');
    b.addAll(c);
    b.sort(f.sorters.items);
    c = b.items;
  }
  g.set('loaded', true);
  if (this.buffered) {
    for (; d < e; d++) {
      var a = c[d];
      a.__isFilling__ = true;
      g.appendChild(a, true, true);
      this.onNodeAdded(null, a);
      this.tree.registerNode(a);
    }
  } else {
    for (; d < e; d++) {
      c[d].__isFilling__ = true;
      g.appendChild(c[d], false, true);
    }
  }
  if (g.isRoot()) {
    this.getRootNode().cascadeBy(function(h) {
      delete h.__isFilling__;
    });
    this.isFillingRoot = false;
    this.on({remove:this.onNodeUpdated, append:this.onNodeUpdated, insert:this.onNodeUpdated, update:this.onTaskUpdated, scope:this});
    this.fireEvent('root-fill-end', this, g, c);
  }
  delete this.isFillingNode;
  return c;
}, onRootFillEnd:function(b, a) {
  a.normalizeEffort();
}, getById:function(a) {
  return this.tree.getNodeById(a);
}, setDependencyStore:function(a) {
  if (this.dependencyStore) {
    this.dependencyStore.un({add:this.onDependencyAddOrUpdate, update:this.onDependencyAddOrUpdate, beforesync:this.onBeforeDependencySync, scope:this});
  }
  this.dependencyStore = Ext.StoreMgr.lookup(a);
  if (a) {
    a.taskStore = this;
    a.on({add:this.onDependencyAddOrUpdate, update:this.onDependencyAddOrUpdate, scope:this});
  }
}, setResourceStore:function(a) {
  this.resourceStore = Ext.StoreMgr.lookup(a);
  a.taskStore = this;
}, getResourceStore:function() {
  return this.resourceStore || null;
}, setAssignmentStore:function(a) {
  if (this.assignmentStore) {
    this.assignmentStore.un({add:this.onAssignmentStructureMutation, update:this.onAssignmentMutation, remove:this.onAssignmentStructureMutation, scope:this});
  }
  this.assignmentStore = Ext.StoreMgr.lookup(a);
  a.taskStore = this;
  a.on({add:this.onAssignmentStructureMutation, update:this.onAssignmentMutation, remove:this.onAssignmentStructureMutation, scope:this});
}, getAssignmentStore:function() {
  return this.assignmentStore || null;
}, renormalizeTasks:function(b, a) {
  if (a instanceof Gnt.model.Task) {
    a.adjustToCalendar();
  } else {
    this.getRootNode().cascadeBy(function(c) {
      c.adjustToCalendar();
    });
  }
}, getCalendar:function() {
  return this.calendar || null;
}, setCalendar:function(c) {
  var b = {datachanged:this.renormalizeTasks, update:this.renormalizeTasks, clear:this.renormalizeTasks, scope:this};
  if (this.calendar) {
    this.calendar.un(b);
  }
  this.calendar = c;
  c.on(b);
  var a = this.tree && this.getRootNode();
  if (a) {
    a.calendar = c;
  }
}, filter:function() {
  this.fireEvent('filter', this, arguments);
}, clearFilter:function() {
  this.fireEvent('clearfilter', this);
}, getCriticalPaths:function() {
  var b = this.getRootNode(), a = [], d = new Date(0);
  b.cascadeBy(function(e) {
    d = Sch.util.Date.max(e.getEndDate(), d);
  });
  b.cascadeBy(function(e) {
    if (d - e.getEndDate() === 0 && !e.isRoot()) {
      a.push(e);
    }
  });
  var c = [];
  Ext.each(a, function(e) {
    c.push(e.getCriticalPaths());
  });
  return c;
}, onNodeUpdated:function(a, b) {
  if (!this.cascading && this.recalculateParents && !this.isFillingNode) {
    b.recalculateParents();
  }
}, onTaskUpdated:function(c, b, a) {
  var d = b.previous;
  if (!this.cascading && !this.isFillingNode && a !== Ext.data.Model.COMMIT && (d && (b.startDateField in d || b.endDateField in d || 'parentId' in d || b.effortField in d))) {
    if (this.cascadeChanges) {
      Ext.Function.defer(this.cascadeChangesForTask, this.cascadeDelay, this, [b]);
    }
    if (this.recalculateParents) {
      b.recalculateParents();
    }
  }
}, cascadeChangesForTask:function(a) {
  var c = this, b = {nbrAffected:0};
  Ext.each(a.getOutgoingDependencies(), function(d) {
    var e = d.getTargetTask();
    if (e) {
      if (!c.cascading) {
        c.fireEvent('beforecascade', c);
      }
      c.cascading = true;
      e.cascadeChanges(c, b);
    }
  });
  if (c.cascading) {
    c.cascading = false;
    c.fireEvent('cascade', c, b);
  }
}, onTaskDeleted:function(c, b) {
  var a = this.dependencyStore;
  if (a && !b.isReplace && !b.isMove) {
    a.remove(b.getAllDependencies(a));
  }
}, onAssignmentMutation:function(c, a) {
  var b = this;
  Ext.each(a, function(e) {
    var d = e.getTask(b);
    if (d) {
      d.onAssignmentMutation(e);
    }
  });
}, onAssignmentStructureMutation:function(c, a) {
  var b = this;
  Ext.each(a, function(d) {
    d.getTask(b).onAssignmentStructureMutation(d);
  });
}, onDependencyAddOrUpdate:function(b, d) {
  if (this.cascadeChanges) {
    var c = this, a;
    Ext.each(d, function(e) {
      a = e.getTargetTask();
      if (a) {
        a.constrain(c);
      }
    });
  }
}, getNewRecords:function() {
  return Ext.Array.filter(this.tree.flatten(), this.filterNew, this);
}, getUpdatedRecords:function() {
  return Ext.Array.filter(this.tree.flatten(), this.filterUpdated, this);
}, filterNew:function(a) {
  return a.phantom === true && a.isValid() && a != this.tree.root;
}, filterUpdated:function(a) {
  return a.dirty === true && a.phantom !== true && a.isValid() && a != this.tree.root;
}, onTaskStoreBeforeSync:function(b, c) {
  var a = b.create;
  if (a) {
    for (var e, d = a.length - 1; d >= 0; d--) {
      e = a[d];
      if (e.isPersistable()) {
        e._phantomId = e.internalId;
      } else {
        if (this.autoSync) {
          Ext.Array.remove(a, e);
        }
      }
    }
    if (a.length === 0) {
      delete b.create;
    }
  }
  return Boolean(b.create && b.create.length > 0 || b.update && b.update.length > 0 || b.destroy && b.destroy.length > 0);
}, onTaskStoreWrite:function(c, b) {
  var d = this.dependencyStore;
  if (!d || b.action !== 'create') {
    return;
  }
  var a = b.getRecords(), e;
  Ext.each(a, function(f) {
    e = f.getId();
    if (!f.phantom && e !== f._phantomId) {
      Ext.each(d.getNewRecords(), function(g) {
        var i = g.getSourceId();
        var h = g.getTargetId();
        if (i === f._phantomId) {
          g.setSourceId(e);
        } else {
          if (h === f._phantomId) {
            g.setTargetId(e);
          }
        }
      });
      Ext.each(f.childNodes, function(g) {
        if (g.phantom) {
          g.set('parentId', e);
        }
      });
      delete f._phantomId;
    }
  });
}, getTotalTimeSpan:function() {
  var a = new Date(9999, 0, 1), b = new Date(0), c = Sch.util.Date;
  this.getRootNode().cascadeBy(function(d) {
    if (d.getStartDate()) {
      a = c.min(d.getStartDate(), a);
    }
    if (d.getEndDate()) {
      b = c.max(d.getEndDate(), b);
    }
  });
  a = a < new Date(9999, 0, 1) ? a : null;
  b = b > new Date(0) ? b : null;
  return {start:a, end:b || a || null};
}, getCount:function(b) {
  var a = b === false ? 0 : -1;
  this.getRootNode().cascadeBy(function() {
    a++;
  });
  return a;
}, toArray:function() {
  var a = [];
  this.getRootNode().cascadeBy(function(b) {
    a.push(b);
  });
  return a;
}, remove:function(a) {
  Ext.each(a, function(b) {
    b.remove();
  });
}, indent:function(b) {
  b = Ext.isArray(b) ? b : [b];
  var a = Ext.Array.sort(b, function(d, c) {
    return d.data.index > c.data.index;
  });
  Ext.each(a, function(c) {
    c.indent();
  });
}, outdent:function(b) {
  var a = Ext.Array.sort(b, function(d, c) {
    return d.data.index > c.data.index;
  });
  Ext.each(a, function(c) {
    c.indent();
  });
  Ext.each(b, function(c) {
    c.outdent();
  });
}, getTasksForResource:function(a) {
  return a.getTasks();
}, getEventsForResource:function(a) {
  return this.getTasksForResource(a);
}, ensureSingleSyncForMethod:function() {
  return function() {
    var b;
    if (this.autoSync && !this.autoSyncSuspended) {
      b = true;
      this.suspendAutoSync();
    }
    var a = this.callParent(arguments);
    if (b) {
      this.resumeAutoSync();
      this.sync();
    }
    return a;
  };
}}, function() {
  var a = ['indent', 'outdent', 'afterEdit', 'remove'];
  Ext.each(a, function(c) {
    var b = {};
    b[c] = this.prototype.ensureSingleSyncForMethod(this.prototype[c]);
    this.override(b);
  }, this);
});
Ext.define('Gnt.data.DependencyStore', {extend:'Ext.data.Store', model:'Gnt.model.Dependency', constructor:function() {
  this.callParent(arguments);
  this.init();
}, init:function() {
  this.on({beforesync:this.onBeforeSyncOperation, scope:this});
}, onBeforeSyncOperation:function(a, b) {
  if (a.create) {
    for (var d, c = a.create.length - 1; c >= 0; c--) {
      d = a.create[c];
      if (!d.isPersistable()) {
        Ext.Array.remove(a.create, d);
      }
    }
    if (a.create.length === 0) {
      delete a.create;
    }
  }
  return Boolean(a.create && a.create.length > 0 || a.update && a.update.length > 0 || a.destroy && a.destroy.length > 0);
}, getDependenciesForTask:function(b) {
  var g = b.getId() || b.internalId;
  var e = [], f = this;
  for (var d = 0, a = f.getCount(); d < a; d++) {
    var c = f.getAt(d);
    if (c.getSourceId() == g || c.getTargetId() == g) {
      e.push(c);
    }
  }
  return e;
}, getIncomingDependenciesForTask:function(b) {
  var g = b.getId() || b.internalId;
  var e = [], f = this;
  for (var d = 0, a = f.getCount(); d < a; d++) {
    var c = f.getAt(d);
    if (c.getTargetId() == g) {
      e.push(c);
    }
  }
  return e;
}, getOutgoingDependenciesForTask:function(b) {
  var g = b.getId() || b.internalId;
  var e = [], f = this;
  for (var d = 0, a = f.getCount(); d < a; d++) {
    var c = f.getAt(d);
    if (c.getSourceId() == g) {
      e.push(c);
    }
  }
  return e;
}, hasTransitiveDependency:function(d, b, a) {
  var c = this;
  return this.findBy(function(f) {
    var e = f.getTargetId();
    if (f.getSourceId() === d) {
      return e === b && f !== a ? true : c.hasTransitiveDependency(f.getTargetId(), b, a);
    }
  }) >= 0;
}, isValidDependency:function(h, b, e) {
  var f = true;
  var d, c, a;
  if (h instanceof Gnt.model.Dependency) {
    d = h.getSourceId();
    c = this.getSourceTask(d);
    b = h.getTargetId();
    a = this.getTargetTask(b);
  } else {
    d = h;
    c = this.getSourceTask(d);
    a = this.getTargetTask(b);
  }
  if (!e && h instanceof Gnt.model.Dependency) {
    f = h.isValid();
  } else {
    f = d && b && d !== b;
  }
  if (f) {
    if (c && a && (c.contains(a) || a.contains(c))) {
      f = false;
    }
    var g = e || h instanceof Gnt.model.Dependency;
    if (f && (!g && this.areTasksLinked(d, b) || this.hasTransitiveDependency(b, d, g ? h : null))) {
      f = false;
    }
  }
  return f;
}, areTasksLinked:function(a, c) {
  var b = this;
  a = a instanceof Gnt.model.Task ? a.getId() || a.internalId : a;
  c = c instanceof Gnt.model.Task ? c.getId() || c.internalId : c;
  return this.findBy(function(f) {
    var d = f.getTargetId(), e = f.getSourceId();
    if (e === a && d === c || e === c && d === c) {
      return true;
    }
  }) >= 0;
}, getSourceTask:function(a) {
  var b = a instanceof Gnt.model.Dependency ? dependency.getSourceId() : a;
  return this.getTaskStore().getById(b);
}, getTargetTask:function(a) {
  var b = a instanceof Gnt.model.Dependency ? dependency.getSourceId() : a;
  return this.getTaskStore().getById(b);
}, getTaskStore:function() {
  return this.taskStore;
}});
Ext.define('Gnt.data.ResourceStore', {requires:['Gnt.model.Resource'], extend:'Sch.data.ResourceStore', model:'Gnt.model.Resource', taskStore:null, getTaskStore:function() {
  return this.taskStore || null;
}, getAssignmentStore:function() {
  return this.assignmentStore || null;
}, getByInternalId:function(a) {
  return this.data.getByKey(a) || this.getById(a);
}});
Ext.define('Gnt.data.AssignmentStore', {requires:['Gnt.model.Assignment'], extend:'Ext.data.Store', model:'Gnt.model.Assignment', taskStore:null, getTaskStore:function() {
  return this.taskStore;
}, getResourceStore:function() {
  return this.getTaskStore().resourceStore;
}, getByInternalId:function(a) {
  return this.data.getByKey(a) || this.getById(a);
}});
Ext.define('Gnt.template.Task', {extend:'Ext.XTemplate', constructor:function(a) {
  this.callParent(['\x3cdiv class\x3d"sch-event-wrap ' + a.baseCls + ' x-unselectable" style\x3d"left:{leftOffset}px;"\x3e' + (a.leftLabel ? '\x3cdiv class\x3d"sch-gantt-labelct sch-gantt-labelct-left"\x3e\x3clabel class\x3d"sch-gantt-label sch-gantt-label-left"\x3e{leftLabel}\x3c/label\x3e\x3c/div\x3e' : '') + '\x3cdiv id\x3d"' + a.prefix + '{id}" class\x3d"sch-gantt-item sch-gantt-task-bar {cls}" unselectable\x3d"on" style\x3d"width:{width}px;{style}"\x3e' + (a.enableDependencyDragDrop ? '\x3cdiv unselectable\x3d"on" class\x3d"sch-gantt-terminal sch-gantt-terminal-start"\x3e\x3c/div\x3e' : 
  '') + (a.resizeHandles === 'both' || a.resizeHandles === 'left' ? '\x3cdiv class\x3d"sch-resizable-handle sch-gantt-task-handle sch-resizable-handle-west"\x3e\x3c/div\x3e' : '') + '\x3cdiv class\x3d"sch-gantt-progress-bar" style\x3d"width:{percentDone}%;{progressBarStyle}" unselectable\x3d"on"\x3e\x26#160;\x3c/div\x3e' + (a.resizeHandles === 'both' || a.resizeHandles === 'right' ? '\x3cdiv class\x3d"sch-resizable-handle sch-gantt-task-handle sch-resizable-handle-east"\x3e\x3c/div\x3e' : '') + (a.enableDependencyDragDrop ? 
  '\x3cdiv unselectable\x3d"on" class\x3d"sch-gantt-terminal sch-gantt-terminal-end"\x3e\x3c/div\x3e' : '') + (a.enableProgressBarResize ? '\x3cdiv style\x3d"left:{percentDone}%" class\x3d"sch-gantt-progressbar-handle"\x3e\x3c/div\x3e' : '') + '\x3c/div\x3e' + (a.rightLabel ? '\x3cdiv class\x3d"sch-gantt-labelct sch-gantt-labelct-right" style\x3d"left:{width}px"\x3e\x3clabel class\x3d"sch-gantt-label sch-gantt-label-right"\x3e{rightLabel}\x3c/label\x3e\x3c/div\x3e' : '') + '\x3c/div\x3e', {compiled:true, 
  disableFormats:true}]);
}});
Ext.define('Gnt.template.Milestone', {extend:'Ext.XTemplate', constructor:function(a) {
  this.callParent(['\x3cdiv class\x3d"sch-event-wrap ' + a.baseCls + ' x-unselectable" style\x3d"left:{leftOffset}px"\x3e' + (a.leftLabel ? '\x3cdiv class\x3d"sch-gantt-labelct sch-gantt-labelct-left"\x3e\x3clabel class\x3d"sch-gantt-label sch-gantt-label-left"\x3e{leftLabel}\x3c/label\x3e\x3c/div\x3e' : '') + (a.printable ? '\x3cimg id\x3d"' + a.prefix + '{id}" src\x3d"' + a.imgSrc + '" class\x3d"sch-gantt-item sch-gantt-milestone-diamond {cls}" unselectable\x3d"on" style\x3d"{style}" /\x3e' : '\x3cdiv id\x3d"' + 
  a.prefix + '{id}" class\x3d"sch-gantt-item sch-gantt-milestone-diamond {cls}" unselectable\x3d"on" style\x3d"{style}"\x3e' + (a.enableDependencyDragDrop ? '\x3cdiv class\x3d"sch-gantt-terminal sch-gantt-terminal-start"\x3e\x3c/div\x3e\x3cdiv class\x3d"sch-gantt-terminal sch-gantt-terminal-end"\x3e\x3c/div\x3e' : '') + '\x3c/div\x3e') + (a.rightLabel ? '\x3cdiv class\x3d"sch-gantt-labelct sch-gantt-labelct-right" style\x3d"left:{width}px"\x3e\x3clabel class\x3d"sch-gantt-label sch-gantt-label-right"\x3e{rightLabel}\x3c/label\x3e\x3c/div\x3e' : 
  '') + '\x3c/div\x3e', {compiled:true, disableFormats:true}]);
}});
Ext.define('Gnt.template.ParentTask', {extend:'Ext.XTemplate', constructor:function(a) {
  this.callParent(['\x3cdiv class\x3d"sch-event-wrap ' + a.baseCls + ' x-unselectable" style\x3d"left:{leftOffset}px;"\x3e' + (a.leftLabel ? '\x3cdiv class\x3d"sch-gantt-labelct sch-gantt-labelct-left"\x3e\x3clabel class\x3d"sch-gantt-label sch-gantt-label-left"\x3e{leftLabel}\x3c/label\x3e\x3c/div\x3e' : '') + '\x3cdiv id\x3d"' + a.prefix + '{id}" class\x3d"sch-gantt-item sch-gantt-parenttask-bar {cls}" style\x3d"width:{width}px; {style}"\x3e\x3cdiv class\x3d"sch-gantt-progress-bar" style\x3d"width:{percentDone}%;{progressBarStyle}"\x3e\x26#160;\x3c/div\x3e' + 
  (a.enableDependencyDragDrop ? '\x3cdiv class\x3d"sch-gantt-terminal sch-gantt-terminal-start"\x3e\x3c/div\x3e' : '') + '\x3cdiv class\x3d"sch-gantt-parenttask-arrow sch-gantt-parenttask-leftarrow"\x3e\x3c/div\x3e\x3cdiv class\x3d"sch-gantt-parenttask-arrow sch-gantt-parenttask-rightarrow"\x3e\x3c/div\x3e' + (a.enableDependencyDragDrop ? '\x3cdiv class\x3d"sch-gantt-terminal sch-gantt-terminal-end"\x3e\x3c/div\x3e' : '') + '\x3c/div\x3e' + (a.rightLabel ? '\x3cdiv class\x3d"sch-gantt-labelct sch-gantt-labelct-right" style\x3d"left:{width}px"\x3e\x3clabel class\x3d"sch-gantt-label sch-gantt-label-right"\x3e{rightLabel}\x3c/label\x3e\x3c/div\x3e' : 
  '') + '\x3c/div\x3e', {compiled:true, disableFormats:true}]);
}});
Ext.define('Gnt.Tooltip', {extend:'Ext.ToolTip', requires:['Ext.Template'], startText:'Starts: ', endText:'Ends: ', durationText:'Duration:', mode:'startend', cls:'sch-tip', height:40, autoHide:false, anchor:'b-tl', maskOnDisable:false, initComponent:function() {
  if (this.mode === 'startend' && !this.startEndTemplate) {
    this.startEndTemplate = (new Ext.Template('\x3cdiv class\x3d"sch-timetipwrap {cls}"\x3e\x3cdiv\x3e' + this.startText + '{startText}\x3c/div\x3e\x3cdiv\x3e' + this.endText + '{endText}\x3c/div\x3e\x3c/div\x3e')).compile();
  }
  if (this.mode === 'duration' && !this.durationTemplate) {
    this.durationTemplate = (new Ext.Template('\x3cdiv class\x3d"sch-timetipwrap {cls}"\x3e', '\x3cdiv\x3e' + this.startText + ' {startText}\x3c/div\x3e', '\x3cdiv\x3e' + this.durationText + ' {duration} {unit}\x3c/div\x3e', '\x3c/div\x3e')).compile();
  }
  this.callParent(arguments);
}, update:function(e, b, d, a) {
  var c;
  if (this.mode === 'duration') {
    c = this.getDurationContent(e, b, d, a);
  } else {
    c = this.getStartEndContent(e, b, d, a);
  }
  this.callParent([c]);
}, getStartEndContent:function(b, f, a, h) {
  var e = this.gantt, i = e.getFormattedDate(b), d = i, g;
  if (f - b > 0) {
    d = e.getFormattedEndDate(f, b);
  }
  var c = {cls:a ? 'sch-tip-ok' : 'sch-tip-notok', startText:i, endText:d};
  if (this.showClock) {
    Ext.apply(c, {startHourDegrees:roundedStart.getHours() * 30, startMinuteDegrees:roundedStart.getMinutes() * 6});
    if (f) {
      Ext.apply(c, {endHourDegrees:g.getHours() * 30, endMinuteDegrees:g.getMinutes() * 6});
    }
  }
  return this.startEndTemplate.apply(c);
}, getDurationContent:function(f, b, d, a) {
  var c = a.getDurationUnit() || Sch.util.Date.DAY;
  var e = a.calculateDuration(f, b, c);
  return this.durationTemplate.apply({cls:d ? 'sch-tip-ok' : 'sch-tip-notok', startText:this.gantt.getFormattedDate(f), duration:parseFloat(Ext.Number.toFixed(e, 1)), unit:Sch.util.Date.getReadableNameOfUnit(c, e > 1)});
}, show:function(a) {
  if (a) {
    this.setTarget(a);
  }
  this.callParent([]);
}});
Ext.define('Gnt.feature.TaskDragDrop', {extend:'Ext.dd.DragZone', requires:['Gnt.Tooltip', 'Ext.dd.StatusProxy', 'Ext.dd.ScrollManager'], onDragEnter:Ext.emptyFn, onDragOut:Ext.emptyFn, constructor:function(a) {
  a = a || {};
  Ext.apply(this, a);
  this.proxy = this.proxy || Ext.create('Ext.dd.StatusProxy', {shadow:false, dropAllowed:'sch-gantt-dragproxy', dropNotAllowed:'sch-gantt-dragproxy', ensureAttachedToBody:Ext.emptyFn});
  var c = this, b = c.gantt;
  if (c.useTooltip) {
    c.tip = Ext.create('Gnt.Tooltip', {gantt:b});
  }
  c.callParent([b.el, Ext.apply(a, {ddGroup:c.gantt.id + '-task-dd'})]);
  c.scroll = false;
  c.isTarget = true;
  c.ignoreSelf = false;
  c.addInvalidHandleClass('sch-resizable-handle');
  c.addInvalidHandleClass('x-resizable-handle');
  c.addInvalidHandleClass('sch-gantt-terminal');
  c.addInvalidHandleClass('sch-gantt-progressbar-handle');
  Ext.dd.ScrollManager.register(c.gantt.el);
  c.gantt.ownerCt.el.appendChild(this.proxy.el);
  c.gantt.on({destroy:c.cleanUp, scope:c});
}, useTooltip:true, validatorFn:function(a, b, d, c) {
  return true;
}, validatorFnScope:null, cleanUp:function() {
  if (this.tip) {
    this.tip.destroy();
  }
  this.destroy();
}, containerScroll:false, dropAllowed:'sch-gantt-dragproxy', dropNotAllowed:'sch-gantt-dragproxy', destroy:function() {
  this.callParent(arguments);
  Ext.dd.ScrollManager.unregister(this.gantt.el);
}, autoOffset:function(a, e) {
  var d = this.dragData.repairXY, c = a - d[0], b = e - d[1];
  this.setDelta(c, b);
}, setXConstraint:function(c, b, a) {
  this.leftConstraint = c;
  this.rightConstraint = b;
  this.minX = c;
  this.maxX = b;
  if (a) {
    this.setXTicks(this.initPageX, a);
  }
  this.constrainX = true;
}, setYConstraint:function(a, c, b) {
  this.topConstraint = a;
  this.bottomConstraint = c;
  this.minY = a;
  this.maxY = c;
  if (b) {
    this.setYTicks(this.initPageY, b);
  }
  this.constrainY = true;
}, constrainTo:function(a, b) {
  this.resetConstraints();
  this.initPageX = a.left;
  this.initPageY = b.top;
  this.setXConstraint(a.left, a.right - (b.right - b.left), this.xTickSize);
  this.setYConstraint(b.top - 1, b.top - 1, this.yTickSize);
}, onDragOver:function(g, h) {
  var f = this.dragData, d = f.record, c = this.gantt, b = this.proxy.el.getX() + c.getXOffset(d), a = c.getDateFromXY([b, 0], 'round');
  if (!f.hidden) {
    Ext.fly(f.sourceNode).hide();
    f.hidden = true;
  }
  if (!a || a - f.start === 0) {
    return;
  }
  f.start = a;
  this.valid = this.validatorFn.call(this.validatorFnScope || c, d, a, f.duration, g) !== false;
  if (this.tip) {
    this.tip.update(a, d.calculateEndDate(a, d.getDuration(), d.getDurationUnit()), this.valid);
  }
}, onStartDrag:function() {
  var a = this.dragData.record;
  if (this.tip) {
    this.tip.enable();
    this.tip.show(Ext.get(this.dragData.sourceNode));
    this.tip.update(a.getStartDate(), a.getEndDate(), true);
  }
  this.gantt.fireEvent('taskdragstart', this.gantt, a);
}, getDragData:function(i) {
  var h = this.gantt, f = i.getTarget(h.eventSelector);
  if (f && !i.getTarget('.sch-gantt-baseline-item')) {
    var c = Ext.get(f), d = h.resolveTaskRecord(c);
    if (h.fireEvent('beforetaskdrag', h, d, i) === false) {
      return null;
    }
    var j = f.cloneNode(true), b = h.getSnapPixelAmount(), a = c.getXY();
    j.id = Ext.id();
    if (b <= 1) {
      Ext.fly(j).setStyle('left', 0);
    }
    this.constrainTo(Ext.fly(h.findItemByChild(f)).getRegion(), c.getRegion());
    if (b >= 1) {
      this.setXConstraint(this.leftConstraint, this.rightConstraint, b);
    }
    return {sourceNode:f, repairXY:a, ddel:j, record:d, duration:Sch.util.Date.getDurationInMinutes(d.getStartDate(), d.getEndDate())};
  }
  return null;
}, afterRepair:function() {
  Ext.fly(this.dragData.sourceNode).show();
  if (this.tip) {
    this.tip.hide();
  }
  this.dragging = false;
}, getRepairXY:function() {
  this.gantt.fireEvent('afterdnd', this.gantt);
  return this.dragData.repairXY;
}, onDragDrop:function(g, i) {
  var f = this.cachedTarget || Ext.dd.DragDropMgr.getDDById(i), d = this.dragData, b = this.gantt, a = d.record, h = d.start;
  var c = false;
  if (this.tip) {
    this.tip.disable();
  }
  if (this.valid && h && a.getStartDate() - h !== 0) {
    b.taskStore.on('update', function() {
      c = true;
    }, null, {single:true});
    a.setStartDate(h, true, b.taskStore.skipWeekendsDuringDragDrop);
    if (c) {
      b.fireEvent('taskdrop', b, a);
      if (Ext.isIE9) {
        this.proxy.el.setStyle('visibility', 'hidden');
        Ext.Function.defer(this.onValidDrop, 10, this, [f, g, i]);
      } else {
        this.onValidDrop(f, g, i);
      }
    }
  }
  if (!c) {
    this.onInvalidDrop(f, g, i);
  }
  b.fireEvent('aftertaskdrop', b, a);
}});
Ext.define('Gnt.feature.DependencyDragDrop', {extend:'Ext.util.Observable', constructor:function(b) {
  this.addEvents('beforednd', 'dndstart', 'drop', 'afterdnd');
  var a = b.ganttView;
  Ext.apply(this, {el:a.el, ddGroup:a.id + '-sch-dependency-dd', ganttView:a, dependencyStore:a.getDependencyStore()});
  this.el.on('mousemove', function() {
    this.setupDragZone();
    this.setupDropZone();
  }, this, {single:true});
  this.callParent(arguments);
}, fromText:'From: \x3cstrong\x3e{0}\x3c/strong\x3e {1}\x3cbr/\x3e', toText:'To: \x3cstrong\x3e{0}\x3c/strong\x3e {1}', startText:'Start', endText:'End', useLineProxy:true, terminalSelector:'.sch-gantt-terminal', destroy:function() {
  if (this.dragZone) {
    this.dragZone.destroy();
  }
  if (this.dropZone) {
    this.dropZone.destroy();
  }
  if (this.lineProxyEl) {
    this.lineProxyEl.destroy();
  }
}, initLineProxy:function(b, a) {
  var c = this.lineProxyEl = this.el.createChild({cls:'sch-gantt-connector-proxy'});
  c.alignTo(b, a ? 'l' : 'r');
  Ext.apply(this, {containerTop:this.el.getTop(), containerLeft:this.el.getLeft(), startXY:c.getXY(), startScrollLeft:this.el.dom.scrollLeft, startScrollTop:this.el.dom.scrollTop});
}, updateLineProxy:function(m) {
  var a = this.lineProxyEl, j = m[0] - this.startXY[0] + this.el.dom.scrollLeft - this.startScrollLeft, i = m[1] - this.startXY[1] + this.el.dom.scrollTop - this.startScrollTop, b = Math.max(1, Math.sqrt(Math.pow(j, 2) + Math.pow(i, 2)) - 2), h = Math.atan2(i, j) - Math.PI / 2, e;
  if (Ext.isIE) {
    var k = Math.cos(h), g = Math.sin(h), l = 'progid:DXImageTransform.Microsoft.Matrix(sizingMethod\x3d"auto expand", M11 \x3d ' + k + ', M12 \x3d ' + -g + ', M21 \x3d ' + g + ', M22 \x3d ' + k + ')', d, f;
    if (this.el.dom.scrollTop !== this.startScrollTop) {
      d = this.startScrollTop - this.containerTop;
    } else {
      d = this.el.dom.scrollTop - this.containerTop;
    }
    if (this.el.dom.scrollLeft !== this.startScrollLeft) {
      f = this.startScrollLeft - this.containerLeft;
    } else {
      f = this.el.dom.scrollLeft - this.containerLeft;
    }
    e = {height:b + 'px', top:Math.min(0, i) + this.startXY[1] + d + (i < 0 ? 2 : 0) + 'px', left:Math.min(0, j) + this.startXY[0] + f + (j < 0 ? 2 : 0) + 'px', filter:l, '-ms-filter':l};
  } else {
    var c = 'rotate(' + h + 'rad)';
    e = {height:b + 'px', '-o-transform':c, '-webkit-transform':c, '-moz-transform':c, transform:c};
  }
  a.show().setStyle(e);
}, setupDragZone:function() {
  var b = this, a = this.ganttView;
  this.dragZone = Ext.create('Ext.dd.DragZone', this.el, {ddGroup:this.ddGroup, onStartDrag:function() {
    this.el.addCls('sch-gantt-dep-dd-dragging');
    b.fireEvent('dndstart', b);
    if (b.useLineProxy) {
      var c = this.dragData;
      b.initLineProxy(c.sourceNode, c.isStart);
    }
  }, getDragData:function(g) {
    var f = g.getTarget(b.terminalSelector);
    if (f) {
      var d = a.resolveTaskRecord(f);
      if (b.fireEvent('beforednd', this, d) === false) {
        return null;
      }
      var c = !!f.className.match('sch-gantt-terminal-start'), h = Ext.core.DomHelper.createDom({cls:'sch-dd-dependency', children:[{tag:'span', cls:'sch-dd-dependency-from', html:Ext.String.format(b.fromText, d.getName(), c ? b.startText : b.endText)}, {tag:'span', cls:'sch-dd-dependency-to', html:Ext.String.format(b.toText, '', '')}]});
      return {fromId:d.getId() || d.internalId, isStart:c, repairXY:Ext.fly(f).getXY(), ddel:h, sourceNode:Ext.fly(f).up(a.eventSelector)};
    }
    return false;
  }, afterRepair:function() {
    this.el.removeCls('sch-gantt-dep-dd-dragging');
    this.dragging = false;
    b.fireEvent('afterdnd', this);
  }, onMouseUp:function() {
    this.el.removeCls('sch-gantt-dep-dd-dragging');
    if (b.lineProxyEl) {
      if (Ext.isIE) {
        Ext.destroy(b.lineProxyEl);
        b.lineProxyEl = null;
      } else {
        b.lineProxyEl.animate({to:{height:0}, duration:500, callback:function() {
          Ext.destroy(b.lineProxyEl);
          b.lineProxyEl = null;
        }});
      }
    }
  }, getRepairXY:function() {
    return this.dragData.repairXY;
  }});
}, setupDropZone:function() {
  var b = this, a = this.ganttView;
  this.dropZone = Ext.create('Ext.dd.DropZone', this.el, {ddGroup:this.ddGroup, getTargetFromEvent:function(c) {
    if (b.useLineProxy) {
      b.updateLineProxy(c.getXY());
    }
    return c.getTarget(b.terminalSelector);
  }, onNodeEnter:function(h, c, g, f) {
    var d = h.className.match('sch-gantt-terminal-start');
    Ext.fly(h).addCls(d ? 'sch-gantt-terminal-start-drophover' : 'sch-gantt-terminal-end-drophover');
  }, onNodeOut:function(h, c, g, f) {
    var d = h.className.match('sch-gantt-terminal-start');
    Ext.fly(h).removeCls(d ? 'sch-gantt-terminal-start-drophover' : 'sch-gantt-terminal-end-drophover');
  }, onNodeOver:function(k, c, j, i) {
    var d = a.resolveTaskRecord(k), f = d.getId() || d.internalId, g = k.className.match('sch-gantt-terminal-start'), h = Ext.String.format(b.toText, d.getName(), g ? b.startText : b.endText);
    c.proxy.el.down('.sch-dd-dependency-to').update(h);
    if (b.dependencyStore.isValidDependency(i.fromId, f)) {
      return this.dropAllowed;
    } else {
      return this.dropNotAllowed;
    }
  }, onNodeDrop:function(h, l, i, f) {
    var j, c = true, d = Gnt.model.Dependency.Type, g = a.resolveTaskRecord(h), k = g.getId() || g.internalId;
    if (b.lineProxyEl) {
      Ext.destroy(b.lineProxyEl);
      b.lineProxyEl = null;
    }
    this.el.removeCls('sch-gantt-dep-dd-dragging');
    if (f.isStart) {
      if (h.className.match('sch-gantt-terminal-start')) {
        j = d.StartToStart;
      } else {
        j = d.StartToEnd;
      }
    } else {
      if (h.className.match('sch-gantt-terminal-start')) {
        j = d.EndToStart;
      } else {
        j = d.EndToEnd;
      }
    }
    c = b.dependencyStore.isValidDependency(f.fromId, k);
    if (c) {
      b.fireEvent('drop', this, f.fromId, k, j);
    }
    b.fireEvent('afterdnd', this);
    return c;
  }});
}});
Ext.define('Gnt.feature.DragCreator', {requires:['Ext.Template', 'Sch.util.DragTracker', 'Gnt.Tooltip'], constructor:function(a) {
  Ext.apply(this, a || {});
  this.init();
}, disabled:false, showDragTip:true, dragTolerance:2, setDisabled:function(a) {
  this.disabled = a;
  if (this.dragTip) {
    this.dragTip.setDisabled(a);
  }
}, getProxy:function() {
  if (!this.proxy) {
    this.proxy = this.template.append(this.ganttView.ownerCt.el, {}, true);
  }
  return this.proxy;
}, onBeforeDragStart:function(f) {
  var c = this.ganttView, b = f.getTarget('.' + c.timeCellCls, 2);
  if (b) {
    var a = c.resolveTaskRecord(b);
    var d = c.getDateFromDomEvent(f);
    if (!this.disabled && b && !a.getStartDate() && !a.getEndDate() && c.fireEvent('beforedragcreate', c, a, d, f) !== false) {
      f.stopEvent();
      this.taskRecord = a;
      this.originalStart = d;
      this.rowRegion = c.getScheduleRegion(this.taskRecord, this.originalStart);
      this.dateConstraints = c.getDateConstraints(this.resourceRecord, this.originalStart);
      return true;
    }
  }
  return false;
}, onDragStart:function() {
  var c = this, a = c.ganttView, b = c.getProxy();
  c.start = c.originalStart;
  c.end = c.start;
  c.rowBoundaries = {top:c.rowRegion.top, bottom:c.rowRegion.bottom};
  b.setRegion({top:c.rowBoundaries.top, right:c.tracker.startXY[0], bottom:c.rowBoundaries.bottom, left:c.tracker.startXY[0]});
  b.show();
  c.ganttView.fireEvent('dragcreatestart', c.ganttView);
  if (c.showDragTip) {
    c.dragTip.update(c.start, c.end, true, this.taskRecord);
    c.dragTip.enable();
    c.dragTip.show(b);
  }
}, onDrag:function(g) {
  var d = this, c = d.ganttView, b = d.tracker.getRegion().constrainTo(d.rowRegion), f = c.getStartEndDatesFromRegion(b, 'round');
  if (!f) {
    return;
  }
  d.start = f.start || d.start;
  d.end = f.end || d.end;
  var a = d.dateConstraints;
  if (a) {
    d.end = Sch.util.Date.constrain(d.end, a.start, a.end);
    d.start = Sch.util.Date.constrain(d.start, a.start, a.end);
  }
  if (d.showDragTip) {
    d.dragTip.update(d.start, d.end, true, this.taskRecord);
  }
  Ext.apply(b, d.rowBoundaries);
  this.getProxy().setRegion(b);
}, onDragEnd:function(b) {
  var c = this.ganttView, a = true;
  if (this.showDragTip) {
    this.dragTip.disable();
  }
  if (!this.start || !this.end || this.end < this.start) {
    a = false;
  }
  if (a) {
    this.taskRecord.setStartEndDate(this.start, this.end);
    c.fireEvent('dragcreateend', c, this.taskRecord, b);
  }
  this.proxy.hide();
  c.fireEvent('afterdragcreate', c);
}, init:function() {
  var c = this.ganttView, a = c.el, b = Ext.Function.bind;
  this.lastTime = new Date();
  this.template = this.template || Ext.create('Ext.Template', '\x3cdiv class\x3d"sch-gantt-dragcreator-proxy"\x3e\x3c/div\x3e', {compiled:true, disableFormats:true});
  c.on({destroy:this.onGanttDestroy, scope:this});
  this.tracker = new Sch.util.DragTracker({el:a, tolerance:this.dragTolerance, onBeforeStart:b(this.onBeforeDragStart, this), onStart:b(this.onDragStart, this), onDrag:b(this.onDrag, this), onEnd:b(this.onDragEnd, this)});
  if (this.showDragTip) {
    this.dragTip = Ext.create('Gnt.Tooltip', {mode:'duration', cls:'sch-gantt-dragcreate-tip', gantt:c});
  }
}, onGanttDestroy:function() {
  if (this.dragTip) {
    this.dragTip.destroy();
  }
  if (this.tracker) {
    this.tracker.destroy();
  }
  if (this.proxy) {
    Ext.destroy(this.proxy);
    this.proxy = null;
  }
}});
Ext.define('Gnt.feature.LabelEditor', {extend:'Ext.Editor', labelPosition:'', constructor:function(b, a) {
  this.ganttView = b;
  this.ganttView.on('afterrender', this.onGanttRender, this);
  this.callParent([a]);
}, edit:function(a) {
  var b = this.ganttView.getElementFromEventRecord(a).up(this.ganttView.eventWrapSelector);
  this.record = a;
  this.startEdit(b.down(this.delegate), this.dataIndex ? a.get(this.dataIndex) : '');
}, delegate:'', dataIndex:'', shadow:false, completeOnEnter:true, cancelOnEsc:true, ignoreNoChange:true, onGanttRender:function(a) {
  if (!this.field.width) {
    this.autoSize = 'width';
  }
  this.on({beforestartedit:function(c, b, d) {
    return a.fireEvent('labeledit_beforestartedit', a, this.record, d, c);
  }, beforecomplete:function(c, d, b) {
    return a.fireEvent('labeledit_beforecomplete', a, d, b, this.record, c);
  }, complete:function(c, d, b) {
    this.record.set(this.dataIndex, d);
    a.fireEvent('labeledit_complete', a, d, b, this.record, c);
  }, scope:this});
  a.el.on('dblclick', function(c, b) {
    this.edit(a.resolveTaskRecord(b));
  }, this, {delegate:this.delegate});
}});
Ext.define('Gnt.feature.ProgressBarResize', {requires:['Ext.QuickTip', 'Ext.resizer.Resizer'], constructor:function(a) {
  Ext.apply(this, a || {});
  var b = this.gantt;
  b.on({destroy:this.cleanUp, scope:this});
  b.mon(b.el, 'mousedown', this.onMouseDown, this, {delegate:'.sch-gantt-progressbar-handle'});
  this.callParent(arguments);
}, useTooltip:true, increment:10, onMouseDown:function(d, b) {
  var c = this.gantt, f = c.resolveTaskRecord(b);
  if (c.fireEvent('beforeprogressbarresize', c, f) !== false) {
    var a = Ext.fly(b).prev('.sch-gantt-progress-bar');
    d.stopEvent();
    this.createResizable(a, f, d);
    c.fireEvent('progressbarresizestart', c, f);
  }
}, createResizable:function(d, a, h) {
  var c = h.getTarget(), i = d.up(this.gantt.eventSelector), g = i.getWidth() - 4, b = g * this.increment / 100;
  var f = Ext.create('Ext.resizer.Resizer', {target:d, taskRecord:a, handles:'e', minWidth:0, maxWidth:g, minHeight:1, widthIncrement:b, listeners:{resizedrag:this.partialResize, resize:this.afterResize, scope:this}});
  f.resizeTracker.onMouseDown(h, f.east.dom);
  i.select('.x-resizable-handle, .sch-gantt-terminal, .sch-gantt-progressbar-handle').hide();
  if (this.useTooltip) {
    if (!this.tip) {
      this.tip = Ext.create('Ext.ToolTip', {autoHide:false, anchor:'b', html:'%'});
    }
    this.tip.setTarget(d);
    this.tip.show();
    this.tip.body.update(a.getPercentDone() + '%');
  }
}, partialResize:function(c, b) {
  var a = Math.round(b * 100 / (c.maxWidth * this.increment)) * this.increment;
  if (this.tip) {
    this.tip.body.update(a + '%');
  }
}, afterResize:function(d, a, b, f) {
  var g = d.taskRecord;
  if (this.tip) {
    this.tip.hide();
  }
  var c = Math.round(a * 100 / (d.maxWidth * this.increment)) * this.increment;
  d.taskRecord.setPercentDone(c);
  d.destroy();
  this.gantt.fireEvent('afterprogressbarresize', this.gantt, g);
}, cleanUp:function() {
  if (this.tip) {
    this.tip.destroy();
  }
}});
Ext.define('Gnt.feature.TaskResize', {constructor:function(a) {
  Ext.apply(this, a);
  var b = this.gantt;
  b.on({destroy:this.cleanUp, scope:this});
  b.mon(b.el, 'mousedown', this.onMouseDown, this, {delegate:'.sch-resizable-handle'});
  this.callParent(arguments);
}, showDuration:true, useTooltip:true, validatorFn:Ext.emptyFn, validatorFnScope:null, onMouseDown:function(c) {
  var b = this.gantt, a = c.getTarget(b.eventSelector), d = b.resolveTaskRecord(a);
  if (b.fireEvent('beforetaskresize', b, d, c) === false) {
    return;
  }
  c.stopEvent();
  this.createResizable(Ext.get(a), d, c);
  b.fireEvent('taskresizestart', b, d);
}, createResizable:function(c, k, j) {
  var m = j.getTarget(), i = this.gantt, a = !!m.className.match('sch-resizable-handle-west'), d = i.getSnapPixelAmount(), f = c.getWidth(), l = c.up('.x-grid-row').getRegion();
  this.resizable = Ext.create('Ext.resizer.Resizer', {startLeft:c.getLeft(), startRight:c.getRight(), target:c, taskRecord:k, handles:a ? 'w' : 'e', constrainTo:l, minHeight:1, minWidth:d, widthIncrement:d, listeners:{resizedrag:this[a ? 'partialWestResize' : 'partialEastResize'], resize:this.afterResize, scope:this}});
  this.resizable.resizeTracker.onMouseDown(j, this.resizable[a ? 'west' : 'east'].dom);
  if (this.useTooltip) {
    if (!this.tip) {
      this.tip = Ext.create('Gnt.Tooltip', {mode:this.showDuration ? 'duration' : 'startend', gantt:this.gantt});
    }
    var b = k.getStartDate(), h = k.getEndDate();
    this.tip.show(c);
    this.tip.update(b, h, true, k);
  }
}, partialEastResize:function(i, f, b, g) {
  var c = this.gantt, a = c.getDateFromXY([i.startLeft + Math.min(f, this.resizable.maxWidth), 0], 'round');
  if (!a || i.end - a === 0) {
    return;
  }
  var h = i.taskRecord.getStartDate(), d = this.validatorFn.call(this.validatorFnScope || this, i.taskRecord, h, a) !== false;
  i.end = a;
  c.fireEvent('partialtaskresize', c, i.taskRecord, h, a, i.el, g);
  if (this.useTooltip) {
    this.tip.update(h, a, d, i.taskRecord);
  }
}, partialWestResize:function(i, f, b, g) {
  var c = this.gantt, h = c.getDateFromXY([i.startRight - Math.min(f, this.resizable.maxWidth), 0], 'round');
  if (!h || i.start - h === 0) {
    return;
  }
  var a = i.taskRecord.getEndDate(), d = this.validatorFn.call(this.validatorFnScope || this, i.taskRecord, h, a) !== false;
  i.start = h;
  c.fireEvent('partialtaskresize', c, i.taskRecord, h, a, i.el, g);
  if (this.useTooltip) {
    this.tip.update(h, a, d, i.taskRecord);
  }
}, afterResize:function(a, l, i, j) {
  if (this.useTooltip) {
    this.tip.hide();
  }
  var k = a.taskRecord, g = k.getStartDate(), m = k.getEndDate(), c = a.start || g, f = a.end || m, d = this.gantt;
  a.destroy();
  if (c && f && (c - g || f - m) && this.validatorFn.call(this.validatorFnScope || this, k, c, f, j) !== false) {
    var b = this.gantt.taskStore.skipWeekendsDuringDragDrop;
    if (c - g !== 0) {
      k.setStartDate(c <= f ? c : f, false, b);
    } else {
      k.setEndDate(c <= f ? f : c, false, b);
    }
  } else {
    d.refreshKeepingScroll();
  }
  d.fireEvent('aftertaskresize', d, k);
}, cleanUp:function() {
  if (this.tip) {
    this.tip.destroy();
  }
}});
Ext.define('Gnt.feature.WorkingTime', {extend:'Sch.plugin.Zones', requires:['Ext.data.Store', 'Sch.model.Range'], expandToFitView:true, calendar:null, init:function(a) {
  if (!this.calendar) {
    Ext.Error.raise("Required attribute 'calendar' missed during initialization of 'Gnt.feature.WorkingTime'");
  }
  this.bindCalendar(this.calendar);
  Ext.apply(this, {store:new Ext.data.Store({model:'Sch.model.Range'})});
  this.callParent(arguments);
  a.on('viewchange', this.onViewChange, this);
  this.onViewChange();
}, bindCalendar:function(b) {
  var a = {datachanged:this.refresh, update:this.refresh, scope:this, delay:1};
  if (this.calendar) {
    this.calendar.un(a);
  }
  b.on(a);
  this.calendar = b;
}, onViewChange:function() {
  var a = Sch.util.Date;
  if (a.compareUnits(this.timeAxis.unit, a.WEEK) > 0) {
    this.setDisabled(true);
  } else {
    this.setDisabled(false);
    this.refresh();
  }
}, refresh:function() {
  var a = this.schedulerView;
  this.store.removeAll(true);
  this.store.add(this.calendar.getHolidaysRanges(a.getStart(), a.getEnd(), true));
}});
Ext.define('Gnt.plugin.DependencyEditor', {extend:'Ext.form.FormPanel', mixins:['Ext.AbstractPlugin'], lockableScope:'normal', requires:['Ext.form.DisplayField', 'Ext.form.ComboBox', 'Ext.form.NumberField', 'Gnt.model.Dependency'], hideOnBlur:true, fromText:'From', toText:'To', typeText:'Type', lagText:'Lag', endToStartText:'Finish-To-Start', startToStartText:'Start-To-Start', endToEndText:'Finish-To-Finish', startToEndText:'Start-To-Finish', showLag:false, border:false, height:150, width:260, frame:true, 
labelWidth:60, constrain:false, initComponent:function() {
  Ext.apply(this, {items:this.buildFields(), defaults:{width:240}, floating:true, hideMode:'offsets'});
  this.callParent(arguments);
}, beforeRender:function() {
  this.addCls('sch-gantt-dependencyeditor');
  this.callParent(arguments);
}, init:function(a) {
  a.on('dependencydblclick', this.onDependencyDblClick, this);
  a.on('render', this.onGanttRender, this, {delay:50});
  this.gantt = a;
  this.taskStore = a.getTaskStore();
}, onGanttRender:function() {
  this.render(Ext.getBody());
  this.collapse(Ext.Component.DIRECTION_TOP, true);
  this.hide();
  if (this.hideOnBlur) {
    this.mon(Ext.getBody(), 'click', this.onMouseClick, this);
  }
}, show:function(a, b) {
  this.dependencyRecord = a;
  this.getForm().loadRecord(a);
  this.fromLabel.setValue(this.dependencyRecord.getSourceTask().getName());
  this.toLabel.setValue(this.dependencyRecord.getTargetTask().getName());
  this.callParent([]);
  this.el.setXY(b);
  this.expand(!this.constrain);
  if (this.constrain) {
    this.doConstrain(Ext.util.Region.getRegion(Ext.getBody()));
  }
}, buildFields:function() {
  var c = this, d = Gnt.model.Dependency, b = d.Type, a = [this.fromLabel = Ext.create('Ext.form.DisplayField', {fieldLabel:this.fromText}), this.toLabel = Ext.create('Ext.form.DisplayField', {fieldLabel:this.toText}), this.typeField = Ext.create('Ext.form.ComboBox', {name:d.prototype.nameField, fieldLabel:this.typeText, triggerAction:'all', queryMode:'local', valueField:'value', displayField:'text', editable:false, store:Ext.create('Ext.data.JsonStore', {fields:['text', 'value'], data:[{text:this.endToStartText, 
  value:b.EndToStart}, {text:this.startToStartText, value:b.StartToStart}, {text:this.endToEndText, value:b.EndToEnd}, {text:this.startToEndText, value:b.StartToEnd}]})})];
  if (this.showLag) {
    a.push(this.lagField = Ext.create('Ext.form.NumberField', {name:d.prototype.lagField, fieldLabel:this.lagText}));
  }
  return a;
}, onDependencyDblClick:function(c, a, d, b) {
  if (this.lagField) {
    this.lagField.name = a.lagField;
  }
  if (this.typeField) {
    this.typeField.name = a.typeField;
  }
  if (a != this.dependencyRecord) {
    this.show(a, d.getXY());
  }
}, onMouseClick:function(a) {
  if (this.collapsed || a.within(this.getEl()) || a.getTarget('.x-layer') || a.getTarget('.sch-ignore-click')) {
    return;
  }
  this.collapse();
}, afterCollapse:function() {
  delete this.dependencyRecord;
  this.hide();
  this.callParent(arguments);
}});
Ext.define('Gnt.plugin.TaskContextMenu', {extend:'Ext.menu.Menu', mixins:['Ext.AbstractPlugin'], lockableScope:'top', requires:['Gnt.model.Dependency'], plain:true, triggerEvent:'taskcontextmenu', texts:{newTaskText:'New task', newMilestoneText:'New milestone', deleteTask:'Delete task(s)', editLeftLabel:'Edit left label', editRightLabel:'Edit right label', add:'Add...', deleteDependency:'Delete dependency...', addTaskAbove:'Task above', addTaskBelow:'Task below', addMilestone:'Milestone', addSubtask:'Sub-task', 
addSuccessor:'Successor', addPredecessor:'Predecessor'}, grid:null, rec:null, lastHighlightedItem:null, createMenuItems:function() {
  var a = this.texts;
  return [{handler:this.deleteTask, requiresTask:true, scope:this, text:a.deleteTask}, {handler:this.editLeftLabel, requiresTask:true, scope:this, text:a.editLeftLabel}, {handler:this.editRightLabel, requiresTask:true, scope:this, text:a.editRightLabel}, {text:a.add, menu:{plain:true, items:[{handler:this.addTaskAboveAction, requiresTask:true, scope:this, text:a.addTaskAbove}, {handler:this.addTaskBelowAction, scope:this, text:a.addTaskBelow}, {handler:this.addMilestone, requiresTask:true, scope:this, 
  text:a.addMilestone}, {handler:this.addSubtask, requiresTask:true, scope:this, text:a.addSubtask}, {handler:this.addSuccessor, requiresTask:true, scope:this, text:a.addSuccessor}, {handler:this.addPredecessor, requiresTask:true, scope:this, text:a.addPredecessor}]}}, {text:a.deleteDependency, requiresTask:true, menu:{plain:true, listeners:{beforeshow:this.populateDependencyMenu, mouseover:this.onDependencyMouseOver, mouseleave:this.onDependencyMouseOut, scope:this}}}];
}, buildMenuItems:function() {
  this.items = this.createMenuItems();
}, initComponent:function() {
  this.buildMenuItems();
  this.callParent(arguments);
}, init:function(b) {
  b.on('destroy', this.cleanUp, this);
  var a = b.getSchedulingView(), c = b.lockedGrid.getView();
  if (this.triggerEvent === 'itemcontextmenu') {
    c.on('itemcontextmenu', this.onItemContextMenu, this);
    a.on('itemcontextmenu', this.onItemContextMenu, this);
  }
  a.on('taskcontextmenu', this.onTaskContextMenu, this);
  a.on('containercontextmenu', this.onContainerContextMenu, this);
  c.on('containercontextmenu', this.onContainerContextMenu, this);
  this.grid = b;
}, populateDependencyMenu:function(f) {
  var d = this.grid, b = d.getTaskStore(), e = this.rec.getAllDependencies(), a = d.dependencyStore;
  f.removeAll();
  if (e.length === 0) {
    return false;
  }
  var c = this.rec.getId() || this.rec.internalId;
  Ext.each(e, function(i) {
    var h = i.getSourceId(), g = b.getById(h == c ? i.getTargetId() : h);
    if (g) {
      f.add({depId:i.internalId, text:Ext.util.Format.ellipsis(g.getName(), 30), scope:this, handler:function(k) {
        var j;
        a.each(function(l) {
          if (l.internalId == k.depId) {
            j = l;
            return false;
          }
        });
        a.remove(j);
      }});
    }
  }, this);
}, onDependencyMouseOver:function(d, a, b) {
  if (a) {
    var c = this.grid.getSchedulingView();
    if (this.lastHighlightedItem) {
      c.unhighlightDependency(this.lastHighlightedItem.depId);
    }
    this.lastHighlightedItem = a;
    c.highlightDependency(a.depId);
  }
}, onDependencyMouseOut:function(b, a) {
  if (this.lastHighlightedItem) {
    this.grid.getSchedulingView().unhighlightDependency(this.lastHighlightedItem.depId);
  }
}, cleanUp:function() {
  this.destroy();
}, onTaskContextMenu:function(b, a, c) {
  this.activateMenu(a, c);
}, onItemContextMenu:function(b, a, d, c, f) {
  this.activateMenu(a, f);
}, onContainerContextMenu:function(a, b) {
  this.activateMenu(null, b);
}, activateMenu:function(c, b) {
  if (this.grid.isReadOnly()) {
    return;
  }
  b.stopEvent();
  this.rec = c;
  var a = this.query('[requiresTask]');
  Ext.each(a, function(d) {
    d.setDisabled(!c);
  });
  this.showAt(b.getXY());
}, copyTask:function(c) {
  var b = this.grid.getTaskStore().model;
  var a = new b({leaf:true});
  a.setPercentDone(0);
  a.setName(this.texts.newTaskText);
  a.set(a.startDateField, c && c.getStartDate() || null);
  a.set(a.endDateField, c && c.getEndDate() || null);
  a.set(a.durationField, c && c.getDuration() || null);
  a.set(a.durationUnitField, c && c.getDurationUnit() || 'd');
  return a;
}, addTaskAbove:function(a) {
  var b = this.rec;
  if (b) {
    b.addTaskAbove(a);
  } else {
    this.grid.taskStore.getRootNode().appendChild(a);
  }
}, addTaskBelow:function(a) {
  var b = this.rec;
  if (b) {
    b.addTaskBelow(a);
  } else {
    this.grid.taskStore.getRootNode().appendChild(a);
  }
}, deleteTask:function() {
  var a = this.grid.getSelectionModel().selected;
  this.grid.taskStore.remove(a.items);
}, editLeftLabel:function() {
  this.grid.getSchedulingView().editLeftLabel(this.rec);
}, editRightLabel:function() {
  this.grid.getSchedulingView().editRightLabel(this.rec);
}, addTaskAboveAction:function() {
  this.addTaskAbove(this.copyTask(this.rec));
}, addTaskBelowAction:function() {
  this.addTaskBelow(this.copyTask(this.rec));
}, addSubtask:function() {
  var a = this.rec;
  a.addSubtask(this.copyTask(a));
}, addSuccessor:function() {
  var a = this.rec;
  a.addSuccessor(this.copyTask(a));
}, addPredecessor:function() {
  var a = this.rec;
  a.addPredecessor(this.copyTask(a));
}, addMilestone:function() {
  var b = this.rec, a = this.copyTask(b);
  b.addTaskBelow(a);
  a.setStartEndDate(b.getEndDate(), b.getEndDate());
}});
Ext.define('Gnt.plugin.PdfExport', {extend:'Sch.plugin.PdfExport', getExportJsonHtml:function(d, g) {
  var b = this.scheduler.getSchedulingView(), c = b.dependencyView, a = c.painter.getDependencyTplData(b.dependencyStore.getRange()), e = c.lineTpl.apply(a), f = {dependencies:e, rowsAmount:d.rowsAmount, columnsAmountNormal:d.columnsAmountNormal, columnsAmountLocked:d.columnsAmountLocked, timeColumnWidth:d.timeColumnWidth, lockedGridWidth:d.lockedGridWidth, rowHeight:d.rowHeight};
  d.panelHTML = f;
  return this.callParent(arguments);
}, resizePanelHTML:function(e) {
  var f = this.callParent(arguments), b = f.select('.sch-dependencyview-ct').first(), d = e.k * e.rowsAmount * e.rowHeight, c = e.i * e.timeColumnWidth * (e.i === 1 ? e.columnsAmountLocked : e.columnsAmountNormal);
  b.dom.innerHTML = e.dependencies;
  b.applyStyles({top:-d + 'px', left:-c + 'px'});
  var a = f.select('.x-splitter').first();
  a.setHeight('100%');
  return f;
}});
Ext.define('Gnt.plugin.Printable', {extend:'Sch.plugin.Printable', getGridContent:function(c) {
  var f = this.callParent(arguments), d = c.getSchedulingView(), e = d.dependencyView, b = e.painter.getDependencyTplData(d.dependencyStore.getRange()), a;
  a = f.normalRows;
  f.normalRows = e.lineTpl.apply(b) + a;
  return f;
}});
Ext.define('Gnt.view.DependencyPainter', {extend:'Ext.util.Observable', requires:['Ext.util.Region'], constructor:function(a) {
  a = a || {};
  Ext.apply(this, a, {xOffset:8, yOffset:7, midRowOffset:6, arrowOffset:8});
}, getTaskBox:function(o) {
  var f = Sch.util.Date, h = o.getStartDate(), n = o.getEndDate(), c = this.ganttView.getStart(), b = this.ganttView.getEnd(), j = this.ganttView, a = j.getXYFromDate(f.max(h, c))[0], p = j.getXYFromDate(f.min(n, b))[0], i = this.taskStore.buffered, d, l = Ext.get(j.getEventNodeByRecord(o));
  if (!o.isVisible() || !h || !n || !f.intersectSpans(h, n, c, b)) {
    return null;
  }
  if (l || i) {
    var q = this.view.getXOffset(o), k, g, r = true;
    if (a > q) {
      a -= q;
    }
    p += q - 1;
    if (!o.isMilestone() && Ext.isIE) {
      if ((Ext.isIE7 || Ext.isIE6) && !Ext.isIEQuirks) {
        p += 5;
        a -= 2;
      } else {
        if ((Ext.isIE6 || Ext.isIE7 || Ext.isIE8) && Ext.isIEQuirks) {
          p += 1;
          a -= 2;
        }
      }
    }
    if (l) {
      d = l.getOffsetsTo(j.el);
      k = d[1] + j.el.getScroll().top;
      g = k + l.getHeight();
    } else {
      var e = j.store.first();
      var m = j.getNodes();
      if (o.isAbove(e)) {
        l = Ext.get(m[0]);
        d = l.getOffsetsTo(j.el);
        d[1] -= this.ganttView.rowHeight;
      } else {
        l = Ext.get(m[m.length - 1]);
        d = l.getOffsetsTo(j.el);
        d[1] += this.ganttView.rowHeight;
      }
      k = d[1] + j.el.getScroll().top;
      g = k + l.getHeight();
      r = false;
    }
    return {top:k, right:p, bottom:g, left:a, rendered:false};
  }
}, getRenderData:function(f) {
  var e = f.getSourceTask(), c = f.getTargetTask();
  if (!e || !c) {
    return null;
  }
  var a = this.getTaskBox(e);
  var d = this.getTaskBox(c);
  if (this.taskStore.buffered && a && !a.rendered && d && !d.rendered) {
    var g = this.ganttView.store.first();
    var b = this.ganttView.store.last();
    if (e.isAbove(g) && c.isAbove(g) || b.isAbove(e) && b.isAbove(c)) {
      return null;
    }
  }
  return {fromBox:a, toBox:d};
}, getDependencyTplData:function(q) {
  var n = this, j = n.taskStore;
  if (!Ext.isArray(q)) {
    q = [q];
  }
  if (q.length === 0 || j.getCount() <= 0) {
    return;
  }
  var c = [], b = Gnt.model.Dependency.Type, o = n.ganttView, p, k, g, m, h, a;
  for (var f = 0, d = q.length; f < d; f++) {
    a = q[f];
    var e = this.getRenderData(a);
    if (e) {
      m = e.fromBox;
      h = e.toBox;
      if (m && h) {
        switch(a.getType()) {
          case b.StartToEnd:
            p = n.getStartToEndCoordinates(m, h);
            break;
          case b.StartToStart:
            p = n.getStartToStartCoordinates(m, h);
            break;
          case b.EndToStart:
            p = n.getEndToStartCoordinates(m, h);
            break;
          case b.EndToEnd:
            p = n.getEndToEndCoordinates(m, h);
            break;
          default:
            throw 'Invalid dependency type: ' + a.getType();
        }
        if (p) {
          c.push({lineCoordinates:p, id:a.internalId, cls:a.getCls()});
        }
      }
    }
  }
  return c;
}, getStartToStartCoordinates:function(e, d, c, i) {
  var b = e.left, g = e.top - 1 + (e.bottom - e.top) / 2, a = d.left, f = d.top - 1 + (d.bottom - d.top) / 2, h = e.top < d.top ? f - this.yOffset - this.midRowOffset : f + this.yOffset + this.midRowOffset, j = this.xOffset + this.arrowOffset;
  if (b > a + this.xOffset) {
    j += b - a;
  }
  return [{x1:b, y1:g, x2:b - j, y2:g}, {x1:b - j, y1:g, x2:b - j, y2:f}, {x1:b - j, y1:f, x2:a - this.arrowOffset, y2:f}];
}, getStartToEndCoordinates:function(f, e) {
  var c = f.left, i = f.top - 1 + (f.bottom - f.top) / 2, a = e.right, g = e.top - 1 + (e.bottom - e.top) / 2, j = f.top < e.top ? g - this.yOffset - this.midRowOffset : g + this.yOffset + this.midRowOffset, h, b;
  if (a > c + this.xOffset - this.arrowOffset || Math.abs(a - c) < 2 * (this.xOffset + this.arrowOffset)) {
    b = c - this.xOffset - this.arrowOffset;
    var d = a + this.xOffset + this.arrowOffset;
    h = [{x1:c, y1:i, x2:b, y2:i}, {x1:b, y1:i, x2:b, y2:j}, {x1:b, y1:j, x2:d, y2:j}, {x1:d, y1:j, x2:d, y2:g}, {x1:d, y1:g, x2:a + this.arrowOffset, y2:g}];
  } else {
    b = c - this.xOffset - this.arrowOffset;
    h = [{x1:c, y1:i, x2:b, y2:i}, {x1:b, y1:i, x2:b, y2:g}, {x1:b, y1:g, x2:a + this.arrowOffset, y2:g}];
  }
  return h;
}, getEndToStartCoordinates:function(f, e) {
  var c = f.right, i = f.top - 1 + (f.bottom - f.top) / 2, a = e.left, g = e.top - 1 + (e.bottom - e.top) / 2, j = f.top < e.top ? g - this.yOffset - this.midRowOffset : g + this.yOffset + this.midRowOffset, h, b;
  if (a >= c - 6 && g > i) {
    b = Math.max(c - 6, a) + this.xOffset;
    g = e.top;
    h = [{x1:c, y1:i, x2:b, y2:i}, {x1:b, y1:i, x2:b, y2:g - this.arrowOffset}];
  } else {
    b = c + this.xOffset + this.arrowOffset;
    var d = a - this.xOffset - this.arrowOffset;
    if (g > i || a < c + 2 * this.arrowOffset) {
      h = [{x1:c, y1:i, x2:b, y2:i}, {x1:b, y1:i, x2:b, y2:j}, {x1:b, y1:j, x2:d, y2:j}, {x1:d, y1:j, x2:d, y2:g}, {x1:d, y1:g, x2:a - this.arrowOffset, y2:g}];
    } else {
      h = [{x1:c, y1:i, x2:d, y2:i}, {x1:d, y1:i, x2:d, y2:g}, {x1:d, y1:g, x2:a - this.arrowOffset, y2:g}];
    }
  }
  return h;
}, getEndToEndCoordinates:function(a, c) {
  var d = a.right, f = a.top - 1 + (a.bottom - a.top) / 2, b = c.right + this.arrowOffset, e = c.top - 1 + (c.bottom - c.top) / 2, g = b + this.xOffset + this.arrowOffset;
  if (d > b + this.xOffset) {
    g += d - b;
  }
  return [{x1:d, y1:f, x2:g, y2:f}, {x1:g, y1:f, x2:g, y2:e}, {x1:g, y1:e, x2:b, y2:e}];
}});
Ext.define('Gnt.view.Dependency', {extend:'Ext.util.Observable', requires:['Gnt.feature.DependencyDragDrop', 'Gnt.view.DependencyPainter'], containerEl:null, ganttView:null, painter:null, taskStore:null, store:null, dnd:null, lineTpl:null, enableDependencyDragDrop:true, renderAllDepsBuffered:false, dependencyCls:'sch-dependency', selectedCls:'sch-dependency-selected', constructor:function(a) {
  this.callParent(arguments);
  var b = this.ganttView;
  b.on({refresh:this.renderAllDependenciesBuffered, scope:this});
  this.bindTaskStore(b.getTaskStore());
  this.bindDependencyStore(a.store);
  if (!this.lineTpl) {
    this.lineTpl = Ext.create('Ext.XTemplate', '\x3ctpl for\x3d"."\x3e' + Ext.String.format('\x3ctpl for\x3d"lineCoordinates"\x3e\x3cdiv class\x3d"{0} sch-dep-{parent.id} {0}-line {parent.cls}-line " style\x3d"left:{[Math.min(values.x1, values.x2)]}px;top:{[Math.min(values.y1, values.y2)]}px;width:{[Math.abs(values.x1-values.x2)' + (Ext.isBorderBox ? '+2' : '') + ']}px;height:{[Math.abs(values.y1-values.y2)' + (Ext.isBorderBox ? '+2' : '') + ']}px"\x3e\x3c/div\x3e\x3c/tpl\x3e\x3cdiv style\x3d"left:{[values.lineCoordinates[values.lineCoordinates.length - 1].x2]}px;top:{[values.lineCoordinates[values.lineCoordinates.length - 1].y2]}px" class\x3d"{0}-arrow-ct {0} sch-dep-{id} {cls}-arrow-ct"\x3e\x3cimg src\x3d"' + 
    Ext.BLANK_IMAGE_URL + '" class\x3d"{0}-arrow {0}-arrow-{[this.getArrowDirection(values.lineCoordinates)]} {cls}-arrow" /\x3e\x3c/div\x3e', this.dependencyCls) + '\x3c/tpl\x3e', {compiled:true, disableFormats:true, getArrowDirection:function(d) {
      var c = d[d.length - 1];
      if (c.x1 === c.x2) {
        return 'down';
      } else {
        if (c.x1 > c.x2) {
          return 'left';
        } else {
          return 'right';
        }
      }
    }});
  }
  this.painter = Ext.create('Gnt.view.DependencyPainter', Ext.apply({rowHeight:b.rowHeight, taskStore:this.taskStore, view:b}, a));
  this.addEvents('beforednd', 'dndstart', 'drop', 'afterdnd', 'beforecascade', 'cascade', 'dependencydblclick');
  if (this.enableDependencyDragDrop) {
    this.dnd = Ext.create('Gnt.feature.DependencyDragDrop', {ganttView:this.ganttView});
    this.dnd.on('drop', this.onDependencyDrop, this);
    this.relayEvents(this.dnd, ['beforednd', 'dndstart', 'afterdnd', 'drop']);
  }
  this.containerEl = this.containerEl.createChild({cls:'sch-dependencyview-ct'});
  this.ganttView.mon(this.containerEl, 'dblclick', this.onDependencyDblClick, this, {delegate:'.' + this.dependencyCls});
  if (b.rendered) {
    this.renderAllDependenciesBuffered();
  }
}, bindDependencyStore:function(a) {
  a.on({datachanged:this.renderAllDependenciesBuffered, load:this.renderAllDependenciesBuffered, add:this.onDependencyAdd, update:this.onDependencyUpdate, remove:this.onDependencyDelete, scope:this});
  this.store = a;
}, unBindDependencyStore:function() {
  this.store.un({datachanged:this.renderAllDependenciesBuffered, load:this.renderAllDependenciesBuffered, add:this.onDependencyAdd, update:this.onDependencyUpdate, remove:this.onDependencyDelete, scope:this});
}, bindTaskStore:function(a) {
  var b = this.ganttView;
  if (b.animate) {
    b.on({afterexpand:this.renderAllDependenciesBuffered, aftercollapse:this.renderAllDependenciesBuffered, scope:this});
  } else {
    a.on({expand:this.renderAllDependenciesBuffered, collapse:this.renderAllDependenciesBuffered, scope:this});
  }
  a.on({cascade:this.onTaskStoreCascade, 'root-fill-start':this.onRootFillStart, remove:this.renderAllDependenciesBuffered, insert:this.renderAllDependenciesBuffered, append:this.renderAllDependenciesBuffered, move:this.renderAllDependenciesBuffered, update:this.onTaskUpdated, scope:this});
  this.taskStore = a;
}, onTaskStoreCascade:function(a, b) {
  if (b && b.nbrAffected > 0) {
    this.renderAllDependenciesBuffered();
  }
}, unBindTaskStore:function(a) {
  a = a || this.taskStore;
  var b = this.ganttView;
  if (!a) {
    return;
  }
  if (b.animate) {
    b.un({afterexpand:this.renderAllDependenciesBuffered, aftercollapse:this.renderAllDependenciesBuffered, scope:this});
  } else {
    a.un({expand:this.renderAllDependenciesBuffered, collapse:this.renderAllDependenciesBuffered, scope:this});
  }
  a.un({cascade:this.onTaskStoreCascade, remove:this.renderAllDependenciesBuffered, insert:this.renderAllDependenciesBuffered, append:this.renderAllDependenciesBuffered, move:this.renderAllDependenciesBuffered, 'root-fill-start':this.onRootFillStart, scope:this});
  a.un({update:this.onTaskUpdated, scope:this});
}, onRootFillStart:function() {
  var a = this.taskStore;
  this.unBindTaskStore(a);
  this.taskStore.on('root-fill-end', function() {
    this.bindTaskStore(a);
  }, this, {single:true});
}, onDependencyDblClick:function(b, a) {
  var c = this.getRecordForDependencyEl(a);
  this.fireEvent('dependencydblclick', this, c, b, a);
}, highlightDependency:function(a) {
  if (!(a instanceof Ext.data.Model)) {
    a = this.getDependencyRecordByInternalId(a);
  }
  this.getElementsForDependency(a).addCls(this.selectedCls);
}, unhighlightDependency:function(a) {
  if (!(a instanceof Ext.data.Model)) {
    a = this.getDependencyRecordByInternalId(a);
  }
  this.getElementsForDependency(a).removeCls(this.selectedCls);
}, getElementsForDependency:function(a) {
  var b = a instanceof Ext.data.Model ? a.internalId : a;
  return this.containerEl.select('.sch-dep-' + b);
}, depRe:new RegExp('sch-dep-([^\\s]+)'), getDependencyRecordByInternalId:function(d) {
  var c, b, a;
  for (b = 0, a = this.store.getCount(); b < a; b++) {
    c = this.store.getAt(b);
    if (c.internalId == d) {
      return c;
    }
  }
  return null;
}, getRecordForDependencyEl:function(c) {
  var a = c.className.match(this.depRe), d = null;
  if (a && a[1]) {
    var b = a[1];
    d = this.getDependencyRecordByInternalId(b);
  }
  return d;
}, renderAllDependenciesBuffered:function() {
  var a = this;
  this.containerEl.update('');
  setTimeout(function() {
    if (!a.ganttView.isDestroyed) {
      a.renderAllDependencies();
    }
  }, 0);
}, renderAllDependencies:function() {
  if (!this.containerEl.dom) {
    return;
  }
  this.getDependencyElements().remove();
  this.renderDependencies(this.store.data.items);
}, getDependencyElements:function() {
  return this.containerEl.select('.' + this.dependencyCls);
}, renderDependencies:function(b) {
  if (b) {
    var a = this.painter.getDependencyTplData(b);
    this.lineTpl[Ext.isIE ? 'insertFirst' : 'append'](this.containerEl, a);
  }
}, renderTaskDependencies:function(d) {
  var c = [];
  if (!Ext.isArray(d)) {
    d = [d];
  }
  for (var a = 0, b = d.length; a < b; a++) {
    c = c.concat(d[a].getAllDependencies());
  }
  this.renderDependencies(c);
}, onDependencyUpdate:function(b, a) {
  this.removeDependencyElements(a, false);
  this.renderDependencies(a);
}, onDependencyAdd:function(a, b) {
  this.renderDependencies(b);
}, removeDependencyElements:function(a, b) {
  if (b !== false) {
    this.getElementsForDependency(a).fadeOut({remove:true});
  } else {
    this.getElementsForDependency(a).remove();
  }
}, onDependencyDelete:function(b, a) {
  this.removeDependencyElements(a);
}, dimEventDependencies:function(a) {
  this.containerEl.select(this.depRe + a).setOpacity(0.2);
}, clearSelectedDependencies:function() {
  this.containerEl.select('.' + this.selectedCls).removeCls(this.selectedCls);
}, onTaskUpdated:function(c, b, a) {
  if (!this.taskStore.cascading && a != Ext.data.Model.COMMIT && (!b.previous || b.startDateField in b.previous || b.endDateField in b.previous)) {
    this.updateDependencies(b);
  }
}, updateDependencies:function(b) {
  if (!Ext.isArray(b)) {
    b = [b];
  }
  var a = this;
  Ext.each(b, function(c) {
    Ext.each(c.getAllDependencies(), function(d) {
      a.removeDependencyElements(d, false);
    });
  });
  this.renderTaskDependencies(b);
}, onDependencyDrop:function(e, c, b, d) {
  var a = new this.store.model({fromTask:c, toTask:b, type:d});
  if (this.store.isValidDependency(a)) {
    this.store.add(a);
  }
}, destroy:function() {
  if (this.dnd) {
    this.dnd.destroy();
  }
  this.unBindTaskStore();
  this.unBindDependencyStore();
}});
Ext.define('Gnt.view.Gantt', {extend:'Sch.view.TimelineTreeView', alias:['widget.ganttview'], requires:['Gnt.view.Dependency', 'Gnt.model.Task', 'Gnt.template.Task', 'Gnt.template.ParentTask', 'Gnt.template.Milestone', 'Gnt.feature.TaskDragDrop', 'Gnt.feature.ProgressBarResize', 'Gnt.feature.TaskResize', 'Sch.view.Horizontal'], uses:['Gnt.feature.LabelEditor', 'Gnt.feature.DragCreator'], _cmpCls:'sch-ganttview', rowHeight:22, barMargin:4, scheduledEventName:'task', trackOver:false, toggleOnDblClick:false, 
milestoneOffset:8, parentTaskOffset:6, eventSelector:'.sch-gantt-item', eventWrapSelector:'.sch-event-wrap', progressBarResizer:null, taskResizer:null, taskDragDrop:null, dragCreator:null, dependencyView:null, resizeConfig:null, dragDropConfig:null, constructor:function(a) {
  var b = a.panel._top;
  Ext.apply(this, {taskStore:b.taskStore, dependencyStore:b.dependencyStore, enableDependencyDragDrop:b.enableDependencyDragDrop, enableTaskDragDrop:b.enableTaskDragDrop, enableProgressBarResize:b.enableProgressBarResize, enableDragCreation:b.enableDragCreation, allowParentTaskMove:b.allowParentTaskMove, toggleParentTasksOnClick:b.toggleParentTasksOnClick, resizeHandles:b.resizeHandles, enableBaseline:b.baselineVisible || b.enableBaseline, leftLabelField:b.leftLabelField, rightLabelField:b.rightLabelField, 
  eventTemplate:b.eventTemplate, parentEventTemplate:b.parentEventTemplate, milestoneTemplate:b.milestoneTemplate, resizeConfig:b.resizeConfig, dragDropConfig:b.dragDropConfig});
  this.addEvents('taskclick', 'taskdblclick', 'taskcontextmenu', 'beforetaskresize', 'taskresizestart', 'partialtaskresize', 'aftertaskresize', 'beforeprogressbarresize', 'progressbarresizestart', 'afterprogressbarresize', 'beforetaskdrag', 'taskdragstart', 'taskdrop', 'aftertaskdrop', 'labeledit_beforestartedit', 'labeledit_beforecomplete', 'labeledit_complete', 'beforedependencydrag', 'dependencydragstart', 'dependencydrop', 'afterdependencydragdrop');
  this.callParent(arguments);
}, initComponent:function() {
  this.configureLabels();
  this.setupGanttEvents();
  this.callParent(arguments);
  this.setupTemplates();
}, getDependencyStore:function() {
  return this.dependencyStore;
}, configureFeatures:function() {
  if (this.enableProgressBarResize !== false) {
    this.progressBarResizer = Ext.create('Gnt.feature.ProgressBarResize', {gantt:this});
    this.on({beforeprogressbarresize:this.onBeforeTaskProgressBarResize, progressbarresizestart:this.onTaskProgressBarResizeStart, afterprogressbarresize:this.onTaskProgressBarResizeEnd, scope:this});
  }
  if (this.resizeHandles !== 'none') {
    this.taskResizer = Ext.create('Gnt.feature.TaskResize', Ext.apply({gantt:this, validatorFn:this.resizeValidatorFn || Ext.emptyFn, validatorFnScope:this.validatorFnScope || this}, this.resizeConfig || {}));
    this.on({beforedragcreate:this.onBeforeDragCreate, beforetaskresize:this.onBeforeTaskResize, taskresizestart:this.onTaskResizeStart, aftertaskresize:this.onTaskResizeEnd, scope:this});
  }
  if (this.enableTaskDragDrop) {
    this.taskDragDrop = Ext.create('Gnt.feature.TaskDragDrop', Ext.apply({gantt:this, validatorFn:this.dndValidatorFn || Ext.emptyFn, validatorFnScope:this.validatorFnScope || this}, this.dragDropConfig));
    this.on({beforetaskdrag:this.onBeforeTaskDrag, taskdragstart:this.onDragDropStart, aftertaskdrop:this.onDragDropEnd, scope:this});
  }
  if (this.enableDragCreation) {
    this.dragCreator = Ext.create('Gnt.feature.DragCreator', Ext.apply({ganttView:this}));
  }
}, prepareData:function(d, a, b) {
  var c = this, e = {}, f = c.gridDataColumns || c.getGridColumns();
  e[f[0].id] = this.renderTask(b);
  return e;
}, renderTask:function(k) {
  var l = k.getStartDate(), n = this.timeAxis, s = Sch.util.Date, b = {}, A = '', h = n.getStart(), g = n.getEnd(), C = k.isMilestone(), x = k.isLeaf(), o, q, u;
  if (l) {
    var v = k.getEndDate() || Sch.util.Date.add(l, Sch.util.Date.DAY, 1), e = Sch.util.Date.intersectSpans(l, v, h, g);
    if (e) {
      u = v > g;
      q = s.betweenLesser(l, h, g);
      var z = Math.floor(this.getXYFromDate(q ? l : h)[0]), d = Math.floor(this.getXYFromDate(u ? g : v)[0]), f = C ? 0 : d - z;
      if (!C && !x) {
        if (u) {
          f += this.parentTaskOffset;
        } else {
          f += 2 * this.parentTaskOffset;
        }
      }
      b = {id:k.internalId, leftOffset:C ? d || z : z, width:Math.max(1, f), percentDone:Math.min(k.getPercentDone() || 0, 100)};
      o = this.eventRenderer.call(this.eventRendererScope || this, k, b, k.store) || {};
      var t = this.leftLabelField, j = this.rightLabelField, B;
      if (t) {
        b.leftLabel = t.renderer.call(t.scope || this, k.data[t.dataIndex], k);
      }
      if (j) {
        b.rightLabel = j.renderer.call(j.scope || this, k.data[j.dataIndex], k);
      }
      Ext.apply(b, o);
      if (C) {
        B = this.milestoneTemplate;
      } else {
        b.width = Math.max(1, f);
        var p = '';
        if (u) {
          p = ' sch-event-endsoutside ';
        }
        if (!q) {
          p = ' sch-event-startsoutside ';
        }
        b.ctcls = (b.ctcls || '') + p;
        B = this[x ? 'eventTemplate' : 'parentEventTemplate'];
      }
      var i = ' sch-event-resizable-' + k.getResizable();
      if (k.dirty) {
        i += ' sch-dirty ';
      }
      if (k.isDraggable() === false) {
        i += ' sch-event-fixed ';
      }
      b.cls = (b.cls || '') + (k.getCls() || '') + i;
      A += B.apply(b);
    }
  }
  if (this.enableBaseline) {
    var r = k.getBaselineStartDate(), a = k.getBaselineEndDate();
    if (!o) {
      o = this.eventRenderer.call(this, k, b, k.store) || {};
    }
    if (r && a) {
      u = a > g;
      q = s.betweenLesser(r, h, g);
      var c = k.isBaselineMilestone(), w = c ? this.baselineMilestoneTemplate : k.isLeaf() ? this.baselineTaskTemplate : this.baselineParentTaskTemplate, m = Math.floor(this.getXYFromDate(q ? r : h)[0]), y = c ? 0 : Math.floor(this.getXYFromDate(u ? g : a)[0]) - m;
      A += w.apply({basecls:o.basecls || '', id:k.internalId + '-base', percentDone:k.getBaselinePercentDone(), leftOffset:m, width:Math.max(1, y)});
    }
  }
  return A;
}, setupTemplates:function() {
  var a = {leftLabel:!!this.leftLabelField, rightLabel:!!this.rightLabelField, prefix:this.eventPrefix, enableDependencyDragDrop:this.enableDependencyDragDrop !== false, resizeHandles:this.resizeHandles, enableProgressBarResize:this.enableProgressBarResize};
  if (!this.eventTemplate) {
    a.baseCls = 'sch-gantt-task {ctcls}';
    this.eventTemplate = Ext.create('Gnt.template.Task', a);
  }
  if (!this.parentEventTemplate) {
    a.baseCls = 'sch-gantt-parent-task {ctcls}';
    this.parentEventTemplate = Ext.create('Gnt.template.ParentTask', a);
  }
  if (!this.milestoneTemplate) {
    a.baseCls = 'sch-gantt-milestone {ctcls}';
    this.milestoneTemplate = Ext.create('Gnt.template.Milestone', a);
  }
  if (this.enableBaseline) {
    a = {prefix:this.eventPrefix};
    if (!this.baselineTaskTemplate) {
      a.baseCls = 'sch-gantt-task-baseline sch-gantt-baseline-item {basecls}';
      this.baselineTaskTemplate = Ext.create('Gnt.template.Task', a);
    }
    if (!this.baselineParentTaskTemplate) {
      a.baseCls = 'sch-gantt-parenttask-baseline sch-gantt-baseline-item {basecls}';
      this.baselineParentTaskTemplate = Ext.create('Gnt.template.ParentTask', a);
    }
    if (!this.baselineMilestoneTemplate) {
      a.baseCls = 'sch-gantt-milestone-baseline sch-gantt-baseline-item {basecls}';
      this.baselineMilestoneTemplate = Ext.create('Gnt.template.Milestone', a);
    }
  }
}, getDependencyView:function() {
  return this.dependencyView;
}, getTaskStore:function() {
  return this.taskStore;
}, initDependencies:function() {
  if (this.dependencyStore) {
    var b = this, a = Ext.create('Gnt.view.Dependency', {containerEl:b.el, ganttView:b, enableDependencyDragDrop:b.enableDependencyDragDrop, store:b.dependencyStore});
    a.on({beforednd:b.onBeforeDependencyDrag, dndstart:b.onDependencyDragStart, drop:b.onDependencyDrop, afterdnd:b.onAfterDependencyDragDrop, beforecascade:b.onBeforeCascade, cascade:b.onCascade, scope:b});
    b.dependencyView = a;
    b.relayEvents(a, ['dependencydblclick']);
  }
}, setupGanttEvents:function() {
  var a = this.getSelectionModel();
  if (this.toggleParentTasksOnClick) {
    this.on({taskclick:function(c, b) {
      if (!b.isLeaf()) {
        this.toggle(b);
      }
    }, scope:this});
  }
}, configureLabels:function() {
  var c = {renderer:function(d) {
    return d;
  }, dataIndex:undefined};
  var b = this.leftLabelField;
  if (b) {
    if (Ext.isString(b)) {
      b = this.leftLabelField = {dataIndex:b};
    }
    Ext.applyIf(b, c);
    if (b.editor) {
      b.editor = Ext.create('Gnt.feature.LabelEditor', this, {alignment:'r-r', delegate:'.sch-gantt-label-left', labelPosition:'left', field:b.editor, dataIndex:b.dataIndex});
    }
  }
  var a = this.rightLabelField;
  if (a) {
    if (Ext.isString(a)) {
      a = this.rightLabelField = {dataIndex:a};
    }
    Ext.applyIf(a, c);
    if (a.editor) {
      a.editor = Ext.create('Gnt.feature.LabelEditor', this, {alignment:'l-l', delegate:'.sch-gantt-label-right', labelPosition:'right', field:a.editor, dataIndex:a.dataIndex});
    }
  }
  this.on('labeledit_beforestartedit', this.onBeforeLabelEdit, this);
}, onBeforeTaskDrag:function(b, a) {
  return !this.readOnly && (this.allowParentTaskMove || a.isLeaf());
}, onDragDropStart:function() {
  if (this.tip) {
    this.tip.disable();
  }
}, onDragDropEnd:function() {
  if (this.tip) {
    this.tip.enable();
  }
}, onTaskProgressBarResizeStart:function() {
  if (this.tip) {
    this.tip.hide();
    this.tip.disable();
  }
}, onTaskProgressBarResizeEnd:function() {
  if (this.tip) {
    this.tip.enable();
  }
}, onTaskResizeStart:function() {
  if (this.tip) {
    this.tip.hide();
    this.tip.disable();
  }
}, onTaskResizeEnd:function() {
  if (this.tip) {
    this.tip.enable();
  }
}, onBeforeDragCreate:function() {
  return !this.readOnly;
}, onBeforeTaskResize:function(a, b) {
  return !this.readOnly && b.getSchedulingMode() !== 'EffortDriven';
}, onBeforeTaskProgressBarResize:function() {
  return !this.readOnly;
}, onBeforeLabelEdit:function() {
  return !this.readOnly;
}, onBeforeEdit:function() {
  return !this.readOnly;
}, beforeRender:function() {
  this.addCls('sch-ganttview');
  this.callParent(arguments);
}, afterRender:function() {
  this.initDependencies();
  this.callParent(arguments);
  this.el.on('mousemove', this.configureFeatures, this, {single:true});
}, resolveTaskRecord:function(a) {
  var b = this.findItemByChild(a);
  if (b) {
    return this.getRecord(this.findItemByChild(a));
  }
  return null;
}, resolveEventRecord:function(a) {
  return this.resolveTaskRecord(a);
}, highlightTask:function(b, a) {
  if (!(b instanceof Ext.data.Model)) {
    b = this.taskStore.getById(b);
  }
  if (b) {
    var d = this.getNode(b);
    if (d) {
      Ext.fly(d).addCls('sch-gantt-task-highlighted');
    }
    var c = b.getId() || b.internalId;
    if (a !== false) {
      this.dependencyStore.each(function(e) {
        if (e.getSourceId() == c) {
          this.highlightDependency(e.id);
          this.highlightTask(e.getTargetId(), a);
        }
      }, this);
    }
  }
}, unhighlightTask:function(a, c) {
  if (!(a instanceof Ext.data.Model)) {
    a = this.taskStore.getById(a);
  }
  if (a) {
    Ext.fly(this.getNode(a)).removeCls('sch-gantt-task-highlighted');
    var b = a.getId() || a.internalId;
    if (c !== false) {
      this.dependencyStore.each(function(d) {
        if (d.getSourceId() == b) {
          this.unhighlightDependency(d.id);
          this.unhighlightTask(d.getTargetId(), c);
        }
      }, this);
    }
  }
}, clearSelectedTasksAndDependencies:function() {
  this.getSelectionModel().deselectAll();
  this.getDependencyView().clearSelectedDependencies();
  this.el.select('tr.sch-gantt-task-highlighted').removeCls('sch-gantt-task-highlighted');
}, getCriticalPaths:function() {
  return this.taskStore.getCriticalPaths();
}, highlightCriticalPaths:function() {
  this.clearSelectedTasksAndDependencies();
  var g = this.getCriticalPaths(), c = this.getDependencyView(), f = this.dependencyStore, e, d, b, a;
  Ext.each(g, function(h) {
    for (d = 0, b = h.length; d < b; d++) {
      e = h[d];
      this.highlightTask(e, false);
      if (d < b - 1) {
        a = f.getAt(f.findBy(function(i) {
          return i.getTargetId() === (e.getId() || e.internalId) && i.getSourceId() === (h[d + 1].getId() || h[d + 1].internalId);
        }));
        c.highlightDependency(a);
      }
    }
  }, this);
  this.addCls('sch-gantt-critical-chain');
  this.getSelectionModel().setLocked(true);
}, unhighlightCriticalPaths:function() {
  this.el.removeCls('sch-gantt-critical-chain');
  this.getSelectionModel().setLocked(false);
  this.clearSelectedTasksAndDependencies();
}, getXOffset:function(a) {
  var b = 0;
  if (a.isMilestone()) {
    b = this.milestoneOffset;
  } else {
    if (!a.isLeaf()) {
      b = this.parentTaskOffset;
    }
  }
  return b;
}, onDestroy:function() {
  if (this.dependencyView) {
    this.dependencyView.destroy();
  }
  this.callParent(arguments);
}, highlightDependency:function(a) {
  this.dependencyView.highlightDependency(a);
}, unhighlightDependency:function(a) {
  this.dependencyView.unhighlightDependency(a);
}, onBeforeDependencyDrag:function(b, a) {
  return this.fireEvent('beforedependencydrag', this, a);
}, onDependencyDragStart:function(a) {
  this.fireEvent('dependencydragstart', this);
  if (this.tip) {
    this.tip.disable();
  }
}, onDependencyDrop:function(b, c, a, d) {
  this.fireEvent('dependencydrop', this, this.taskStore.getNodeById(c), this.taskStore.getById(a), d);
}, onAfterDependencyDragDrop:function() {
  this.fireEvent('afterdependencydragdrop', this);
  if (this.tip) {
    this.tip.enable();
  }
}, onBeforeCascade:function(a, b) {
  this.taskStore.un('update', this.onUpdate, this);
}, onCascade:function(a, b) {
  this.taskStore.on('update', this.onUpdate, this);
}, onUpdate:function(c, a, b, d) {
  if (d && d.length === 1 && d[0] === 'expanded') {
    return;
  }
  this.callParent(arguments);
}, getLeftEditor:function() {
  return this.leftLabelField.editor;
}, getRightEditor:function() {
  return this.rightLabelField.editor;
}, editLeftLabel:function(a) {
  var b = this.leftLabelField && this.getLeftEditor();
  if (b) {
    b.edit(a);
  }
}, editRightLabel:function(a) {
  var b = this.rightLabelField && this.getRightEditor();
  if (b) {
    b.edit(a);
  }
}, getOuterElementFromEventRecord:function(a) {
  var b = this.callParent([a]);
  return b && b.up(this.eventWrapSelector) || null;
}, getDependenciesForTask:function(a) {
  console.warn('`ganttPanel.getDependenciesForTask()` is deprecated, use `task.getAllDependencies()` instead');
  return a.getAllDependencies();
}, setNewTemplate:function() {
  var b = this, a = b.headerCt.getColumnsForTpl(true);
  b.tpl = b.getTableChunker().getTableTpl({columns:[a[0]], features:b.features});
}});
Ext.define('Gnt.panel.Gantt', {extend:'Sch.panel.TimelineTreePanel', alias:['widget.ganttpanel'], alternateClassName:['Sch.gantt.GanttPanel'], requires:['Gnt.view.Gantt', 'Gnt.model.Dependency', 'Gnt.data.ResourceStore', 'Gnt.data.AssignmentStore', 'Gnt.feature.WorkingTime', 'Gnt.data.Calendar', 'Gnt.data.TaskStore', 'Gnt.data.DependencyStore'], uses:['Sch.plugin.CurrentTimeLine'], lockedXType:'treepanel', normalXType:'ganttpanel', viewType:'ganttview', syncRowHeight:false, layout:'border', lightWeight:true, 
leftLabelField:null, rightLabelField:null, highlightWeekends:true, weekendsAreWorkdays:false, skipWeekendsDuringDragDrop:true, enableTaskDragDrop:true, enableDependencyDragDrop:true, enableProgressBarResize:false, toggleParentTasksOnClick:true, addRowOnTab:true, recalculateParents:true, cascadeChanges:false, showTodayLine:false, enableBaseline:false, baselineVisible:false, enableAnimations:false, workingTimePlugin:null, todayLinePlugin:null, allowParentTaskMove:false, enableDragCreation:true, eventRenderer:Ext.emptyFn, 
eventRendererScope:null, eventTemplate:null, parentEventTemplate:null, milestoneTemplate:null, autoHeight:null, calendar:null, taskStore:null, dependencyStore:null, resourceStore:null, assignmentStore:null, columnLines:false, dndValidatorFn:Ext.emptyFn, resizeHandles:'both', resizeValidatorFn:Ext.emptyFn, resizeConfig:null, dragDropConfig:null, initStores:function() {
  var a = Ext.StoreMgr.lookup(this.taskStore || this.store);
  if (!a) {
    Ext.Error.raise('You must specify a taskStore config');
  }
  if (!(a instanceof Gnt.data.TaskStore)) {
    Ext.Error.raise('A `taskStore` should be an instance of `Gnt.data.TaskStore` (or of a subclass)');
  }
  Ext.apply(this, {store:a, taskStore:a});
  var d = this.calendar = a.calendar;
  if (this.needToTranslateOption('weekendsAreWorkdays')) {
    d.setWeekendsAreWorkDays(this.weekendsAreWorkdays);
  }
  if (a.dependencyStore) {
    this.dependencyStore = a.dependencyStore;
  } else {
    if (this.dependencyStore) {
      this.dependencyStore = Ext.StoreMgr.lookup(this.dependencyStore);
      a.setDependencyStore(this.dependencyStore);
    } else {
      this.dependencyStore = Ext.create('Gnt.data.DependencyStore');
      a.setDependencyStore(this.dependencyStore);
    }
  }
  if (!(this.dependencyStore instanceof Gnt.data.DependencyStore)) {
    Ext.Error.raise('The Gantt dependency store should be a Gnt.data.DependencyStore, or a subclass thereof.');
  }
  var b;
  if (a.getResourceStore()) {
    b = a.getResourceStore();
  } else {
    if (this.resourceStore) {
      b = Ext.StoreMgr.lookup(this.resourceStore);
    } else {
      b = Ext.create('Gnt.data.ResourceStore');
    }
  }
  if (!(b instanceof Gnt.data.ResourceStore)) {
    Ext.Error.raise('A `ResourceStore` should be an instance of `Gnt.data.ResourceStore` (or of a subclass)');
  }
  var c;
  if (a.getAssignmentStore()) {
    c = a.getAssignmentStore();
  } else {
    if (this.assignmentStore) {
      c = Ext.StoreMgr.lookup(this.assignmentStore);
    } else {
      c = Ext.create('Gnt.data.AssignmentStore');
    }
  }
  if (!(c instanceof Gnt.data.AssignmentStore)) {
    Ext.Error.raise('An `assignmentStore` should be an instance of `Gnt.data.AssignmentStore` (or of a subclass)');
  }
  if (this.lockable) {
    this.bindAssignmentStore(c, true);
    this.bindResourceStore(b, true);
  }
}, initComponent:function() {
  if (Ext.isBoolean(this.showBaseline)) {
    this.enableBaseline = this.baselineVisible = this.showBaseline;
    this.showBaseline = Gnt.panel.Gantt.prototype.showBaseline;
  }
  this.autoHeight = false;
  this.initStores();
  if (this.needToTranslateOption('cascadeChanges')) {
    this.setCascadeChanges(this.cascadeChanges);
  }
  if (this.needToTranslateOption('recalculateParents')) {
    this.setRecalculateParents(this.recalculateParents);
  }
  if (this.needToTranslateOption('skipWeekendsDuringDragDrop')) {
    this.setSkipWeekendsDuringDragDrop(this.skipWeekendsDuringDragDrop);
  }
  if (this.lockable) {
    this.lockedGridConfig = this.lockedGridConfig || {};
    Ext.apply(this.lockedGridConfig, {columnLines:true, rowLines:true});
    this.configureFunctionality();
  }
  this.callParent(arguments);
  var a = this.getSchedulingView();
  this.relayEvents(a, ['taskclick', 'taskdblclick', 'taskcontextmenu', 'beforetaskresize', 'taskresizestart', 'partialtaskresize', 'aftertaskresize', 'beforeprogressbarresize', 'progressbarresizestart', 'afterprogressbarresize', 'beforetaskdrag', 'taskdragstart', 'taskdrop', 'aftertaskdrop', 'labeledit_beforestartedit', 'labeledit_beforecomplete', 'labeledit_complete', 'beforedependencydrag', 'dependencydragstart', 'dependencydrop', 'afterdependencydragdrop', 'dependencydblclick']);
  if (this.lockable) {
    this.bodyCls = (this.bodyCls || '') + ' sch-ganttpanel-container-body';
    a.store.calendar = this.calendar;
    this.fixSelectionModel();
    if (this.addRowOnTab) {
      var b = this.lockedGrid, c = this.getSelectionModel();
      c.onEditorTab = Ext.Function.createInterceptor(c.onEditorTab, function(h, i) {
        var g = b.view, f = h.getActiveRecord(), j = h.getActiveColumn(), d = g.getPosition(f, j);
        if (d.column === b.headerCt.getColumnCount() - 1 && d.row === b.view.store.getCount() - 1) {
          f.addTaskBelow({leaf:true});
        }
      });
    }
  }
}, needToTranslateOption:function(a) {
  return this.hasOwnProperty(a) || this.self.prototype.hasOwnProperty(a) && this.self != Gnt.panel.Gantt;
}, fixSelectionModel:function() {
  var a = this.getSelectionModel();
  var d = this.lockedGrid.getView();
  var c = this.normalGrid.getView();
  d.__lockedType = 'locked';
  c.__lockedType = 'normal';
  var e = d.onAdd;
  d.onAdd = function() {
    a.__preventUpdateOf = 'normal';
    e.apply(this, arguments);
    delete a.__preventUpdateOf;
  };
  var b = c.onAdd;
  c.onAdd = function() {
    a.__preventUpdateOf = 'locked';
    b.apply(this, arguments);
    delete a.__preventUpdateOf;
  };
  var f = d.store;
  d.bindStore(null);
  c.bindStore(null);
  d.bindStore(f);
  c.bindStore(f);
  Ext.apply(a, {onSelectChange:function(m, j, q, g) {
    var o = this, r = o.views, k = r.length, p = o.store, h = p.indexOf(m), n = j ? 'select' : 'deselect', l = 0;
    if ((q || o.fireEvent('before' + n, o, m, h)) !== false && g() !== false) {
      for (; l < k; l++) {
        if (!this.__preventUpdateOf || r[l].__lockedType != this.__preventUpdateOf) {
          if (j) {
            r[l].onRowSelect(h, q);
          } else {
            r[l].onRowDeselect(h, q);
          }
        }
      }
      if (!q) {
        o.fireEvent(n, o, m, h);
      }
    }
  }});
}, getDependencyView:function() {
  return this.getSchedulingView().getDependencyView();
}, disableWeekendHighlighting:function(a) {
  this.workingTimePlugin.setDisabled(a);
}, resolveTaskRecord:function(a) {
  return this.getSchedulingView().resolveTaskRecord(a);
}, fitTimeColumns:function() {
  this.getSchedulingView().fitColumns();
}, getResourceStore:function() {
  return this.getTaskStore().getResourceStore();
}, getAssignmentStore:function() {
  return this.getTaskStore().getAssignmentStore();
}, getTaskStore:function() {
  return this.taskStore;
}, getDependencyStore:function() {
  return this.dependencyStore;
}, onDragDropStart:function() {
  if (this.tip) {
    this.tip.hide();
    this.tip.disable();
  }
}, onDragDropEnd:function() {
  if (this.tip) {
    this.tip.enable();
  }
}, configureFunctionality:function() {
  var a = this.plugins = [].concat(this.plugins || []);
  if (this.highlightWeekends) {
    this.workingTimePlugin = Ext.create('Gnt.feature.WorkingTime', {calendar:this.calendar});
    a.push(this.workingTimePlugin);
  }
  if (this.showTodayLine) {
    this.todayLinePlugin = new Sch.plugin.CurrentTimeLine();
    a.push(this.todayLinePlugin);
  }
}, beforeRender:function() {
  if (this.lockable) {
    var a = ' sch-ganttpanel sch-horizontal ';
    if (this.highlightWeekends) {
      a += ' sch-ganttpanel-highlightweekends ';
    }
    this.addCls(a);
    if (this.baselineVisible) {
      this.showBaseline();
    }
  }
  this.callParent(arguments);
}, afterRender:function() {
  this.callParent(arguments);
  if (this.lockable) {
    this.applyPatches();
  }
}, showBaseline:function() {
  this.addCls('sch-ganttpanel-showbaseline');
}, hideBaseline:function() {
  this.removeCls('sch-ganttpanel-showbaseline');
}, toggleBaseline:function() {
  this.toggleCls('sch-ganttpanel-showbaseline');
}, zoomToFit:function() {
  var a = this.taskStore.getTotalTimeSpan();
  if (a.start && a.end && a.start < a.end) {
    this.setTimeSpan(a.start, a.end);
    this.fitTimeColumns();
  }
}, getCascadeChanges:function() {
  return this.taskStore.cascadeChanges;
}, setCascadeChanges:function(a) {
  this.taskStore.cascadeChanges = a;
}, getRecalculateParents:function() {
  return this.taskStore.recalculateParents;
}, setRecalculateParents:function(a) {
  this.taskStore.recalculateParents = a;
}, setSkipWeekendsDuringDragDrop:function(a) {
  this.taskStore.skipWeekendsDuringDragDrop = this.skipWeekendsDuringDragDrop = a;
}, getSkipWeekendsDuringDragDrop:function() {
  return this.taskStore.skipWeekendsDuringDragDrop;
}, applyPatches:function() {
  if (Ext.tree.plugin && Ext.tree.plugin.TreeViewDragDrop) {
    var a;
    Ext.each(this.lockedGrid.getView().plugins, function(b) {
      if (b instanceof Ext.tree.plugin.TreeViewDragDrop) {
        a = b;
        return false;
      }
    });
    if (!a || !a.dropZone) {
      return;
    }
    a.dropZone.handleNodeDrop = function(e, l, f) {
      var n = this, o = n.view, g = l.parentNode, p = o.getStore(), r = [], b, d, k, c, j, m, q, h;
      if (e.copy) {
        b = e.records;
        e.records = [];
        for (d = 0, k = b.length; d < k; d++) {
          e.records.push(Ext.apply({}, b[d].data));
        }
      }
      n.cancelExpand();
      if (f == 'before') {
        c = g.insertBefore;
        j = [null, l];
        l = g;
      } else {
        if (f == 'after') {
          if (l.nextSibling) {
            c = g.insertBefore;
            j = [null, l.nextSibling];
          } else {
            c = g.appendChild;
            j = [null];
          }
          l = g;
        } else {
          if (!l.isExpanded()) {
            m = true;
          }
          c = l.appendChild;
          j = [null];
        }
      }
      q = function() {
        var i;
        for (d = 0, k = e.records.length; d < k; d++) {
          j[0] = e.records[d];
          j[0].isMove = true;
          i = c.apply(l, j);
          delete j[0].isMove;
          if (Ext.enableFx && n.dropHighlight) {
            r.push(o.getNode(i));
          }
        }
        if (Ext.enableFx && n.dropHighlight) {
          Ext.Array.forEach(r, function(s) {
            if (s) {
              Ext.fly(s.firstChild ? s.firstChild : s).highlight(n.dropHighlightColor);
            }
          });
        }
      };
      if (m) {
        l.expand(false, q);
      } else {
        q();
      }
    };
  }
}, bindResourceStore:function(c, a) {
  var b = this;
  if (!a && b.resourceStore) {
    if (c !== b.resourceStore && b.resourceStore.autoDestroy) {
      b.resourceStore.destroy();
    } else {
      b.mun(b.resourceStore, {scope:b, datachanged:b.onResourceStoreDataChanged});
    }
    if (!c) {
      b.resourceStore = null;
    }
  }
  if (c) {
    c = Ext.data.StoreManager.lookup(c);
    b.mon(c, {scope:b, datachanged:b.onResourceStoreDataChanged});
    this.taskStore.setResourceStore(c);
  }
  b.resourceStore = c;
  if (c && !a) {
    b.getView().refreshKeepingScroll();
  }
}, bindAssignmentStore:function(c, a) {
  var b = this;
  if (!a && b.assignmentStore) {
    if (c !== b.assignmentStore && b.assignmentStore.autoDestroy) {
      b.assignmentStore.destroy();
    } else {
      b.mun(b.assignmentStore, {scope:b, datachanged:b.onAssignmentStoreDataChanged});
    }
    if (!c) {
      b.assignmentStore = null;
    }
  }
  if (c) {
    c = Ext.data.StoreManager.lookup(c);
    b.mon(c, {scope:b, datachanged:b.onAssignmentStoreDataChanged});
    this.taskStore.setAssignmentStore(c);
  }
  b.assignmentStore = c;
  if (c && !a) {
    b.getView().refreshKeepingScroll();
  }
}, onResourceStoreDataChanged:function() {
  this.getView().refreshKeepingScroll();
}, onAssignmentStoreDataChanged:function() {
  this.getView().refreshKeepingScroll();
}});
Ext.define('Gnt.column.EndDate', {extend:'Ext.grid.column.Date', alias:'widget.enddatecolumn', requires:['Ext.grid.CellEditor'], text:'Finish', width:100, align:'left', task:null, editorFormat:null, constructor:function(a) {
  a = a || {};
  var b = a.field || a.editor;
  delete a.field;
  delete a.editor;
  this.field = Ext.create('Ext.grid.CellEditor', {ignoreNoChange:true, field:b || {xtype:'datefield', format:a.editorFormat || a.format || this.format || Ext.Date.defaultFormat}, listeners:{beforecomplete:this.onBeforeEditComplete, scope:this}});
  this.callParent([a]);
  this.scope = this;
  this.renderer = a.renderer || this.rendererFunc;
  this.editorFormat = this.editorFormat || this.format;
}, beforeRender:function() {
  if (!this.dataIndex) {
    var a = this.up('treepanel');
    this.dataIndex = a.store.model.prototype.endDateField;
  }
  this.callParent(arguments);
}, rendererFunc:function(b, c, a) {
  if (!b) {
    return;
  }
  if (!a.isEditable(this.dataIndex)) {
    c.tdCls = (c.tdCls || '') + ' sch-column-readonly';
  }
  if (a.getEndDate() > a.getStartDate() && b - Ext.Date.clearTime(b, true) === 0 && !Ext.Date.formatContainsHourInfo(this.format)) {
    b = Sch.util.Date.add(b, Sch.util.Date.MILLI, -1);
  }
  return Ext.util.Format.date(b, this.format);
}, afterRender:function() {
  this.callParent(arguments);
  var a = this.ownerCt.up('treepanel');
  a.on({edit:this.onTreeEdit, beforeedit:this.onBeforeTreeEdit, scope:this});
}, onBeforeTreeEdit:function(b) {
  if (b.column == this) {
    b.doNotUpdateRecord = true;
    var a = this.task = b.record;
    if (!a.isEditable(this.dataIndex)) {
      return false;
    }
    if (a.getEndDate() > a.getStartDate()) {
      var c = b.value;
      if (c - Ext.Date.clearTime(c, true) === 0 && !Ext.Date.formatContainsHourInfo(this.editorFormat)) {
        c = Sch.util.Date.add(c, Sch.util.Date.MILLI, -1);
      }
      b.value = Ext.Date.parse(Ext.Date.format(c, this.editorFormat), this.editorFormat);
    }
  }
}, onBeforeEditComplete:function(b, c, a) {
  if (this.task && c < this.task.getStartDate()) {
    return false;
  }
}, onTreeEdit:function(c, b) {
  if (b.column === this && b.value) {
    var a = b.record;
    var d = b.value;
    if (!Ext.Date.formatContainsHourInfo(this.editorFormat)) {
      d = a.getCalendar().getCalendarDay(d).getAvailabilityEndFor(d) || d;
    }
    b.record.setEndDate(d, false);
  }
}});
Ext.define('Gnt.column.PercentDone', {extend:'Ext.grid.column.Number', alias:'widget.percentdonecolumn', text:'% Done', width:50, format:'0', align:'center', field:{xtype:'numberfield', minValue:0, maxValue:100}, beforeRender:function() {
  if (!this.dataIndex) {
    var a = this.up('treepanel');
    this.dataIndex = a.store.model.prototype.percentDoneField;
  }
  this.callParent(arguments);
}});
Ext.define('Gnt.column.StartDate', {extend:'Ext.grid.column.Date', alias:'widget.startdatecolumn', text:'Start', width:100, align:'left', editorFormat:null, constructor:function(a) {
  a = a || {};
  var b = a.field || a.editor;
  delete a.field;
  delete a.editor;
  this.field = Ext.create('Ext.grid.CellEditor', {ignoreNoChange:true, field:b || {xtype:'datefield', format:a.editorFormat || a.format || this.format || Ext.Date.defaultFormat}});
  this.callParent([a]);
  this.editorFormat = this.editorFormat || this.format;
}, beforeRender:function() {
  var a = this.up('treepanel');
  if (!this.dataIndex) {
    this.dataIndex = a.store.model.prototype.startDateField;
  }
  this.callParent(arguments);
  a.on({edit:this.onTreeEdit, beforeedit:this.onBeforeTreeEdit, scope:this});
}, onBeforeTreeEdit:function(c) {
  if (c.column == this) {
    c.doNotUpdateRecord = true;
    var b = c.record;
    if (!b.isEditable(this.dataIndex)) {
      return false;
    }
    var a = c.value;
    if (a) {
      c.value = Ext.Date.parse(Ext.Date.format(a, this.editorFormat), this.editorFormat);
    }
  }
}, onTreeEdit:function(c, b) {
  var a = b.record;
  var d = b.value;
  if (b.column == this && d && d - b.originalValue !== 0) {
    a.setStartDate(d, true, a.getTaskStore().skipWeekendsDuringDragDrop);
  }
}});
Ext.define('Gnt.column.WBS', {extend:'Ext.grid.column.Column', alias:'widget.wbscolumn', text:'#', width:40, align:'left', dataIndex:'index', renderer:function(f, g, b, h, d, e) {
  var a = e.getRootNode(), c = [];
  while (b !== a) {
    c.push(b.data.index + 1);
    b = b.parentNode;
  }
  return c.reverse().join('.');
}});
Ext.define('Gnt.column.SchedulingMode', {extend:'Ext.grid.column.Column', alias:'widget.schedulingmodecolumn', text:'Mode', width:100, align:'left', data:[['FixedDuration', 'Fixed duration'], ['EffortDriven', 'Effort driven'], ['DynamicAssignment', 'Dynamic assignment'], ['Manual', 'Manual'], ['Normal', 'Normal']], modeNames:null, pickerAlign:'tl-bl?', matchFieldWidth:true, constructor:function(a) {
  a = a || {};
  var c = a.field || a.editor;
  a.field = c || {xtype:'combo', editable:false, store:this.data, pickerAlign:this.pickerAlign, matchFieldWidth:this.matchFieldWidth};
  var b = this.modeNames = {};
  Ext.Array.each(this.data, function(d) {
    b[d[0]] = d[1];
  });
  this.scope = this;
  this.callParent([a]);
}, beforeRender:function() {
  if (!this.dataIndex) {
    var a = this.up('treepanel');
    this.dataIndex = a.store.model.prototype.schedulingModeField;
  }
  this.callParent(arguments);
}, renderer:function(a) {
  return this.modeNames[a];
}, afterRender:function() {
  this.callParent(arguments);
  this.tree = this.ownerCt.up('treepanel');
  this.tree.on('edit', this.onTreeEdit, this);
}, onTreeEdit:function(b, a) {
  if (a.column == this) {
    a.record.setSchedulingMode(a.value);
  }
}});
Ext.define('Gnt.column.ResourceAssignment', {extend:'Ext.grid.column.Column', alias:'widget.resourceassignmentcolumn', text:'Assigned Resources', tdCls:'sch-assignment-cell', showUnits:true, assignmentStore:null, initComponent:function() {
  this.formatString = '{0}' + (this.showUnits ? ' [{1}%]' : '');
  this.callParent(arguments);
}, afterRender:function() {
  this.scope = this;
  this.callParent(arguments);
  this.assignmentStore = this.getOwnerHeaderCt().up('ganttpanel').assignmentStore;
}, renderer:function(k, o, b, h, n, m, j) {
  var g = [], e = this.assignmentStore, a, f = b.getInternalId();
  if (e.resourceStore.getCount() > 0) {
    for (var d = 0, c = e.getCount(); d < c; d++) {
      a = e.getAt(d);
      if (a.getTaskId() === f) {
        g.push(Ext.String.format(this.formatString, a.getResourceName(), a.getUnits()));
      }
    }
    return g.join(', ');
  }
}});
Ext.define('Gnt.column.ResourceName', {extend:'Ext.grid.column.Column', alias:'widget.resourcenamecolumn', text:'Resource Name', dataIndex:'ResourceName', flex:1, align:'left'});
Ext.define('Gnt.column.AssignmentUnits', {extend:'Ext.grid.column.Number', alias:'widget.assignmentunitscolumn', text:'Units', dataIndex:'Units', format:'0 %', align:'left'});
Ext.define('Gnt.widget.AssignmentGrid', {requires:['Gnt.model.Resource', 'Gnt.model.Assignment', 'Gnt.column.ResourceName', 'Gnt.column.AssignmentUnits', 'Ext.grid.plugin.CellEditing'], extend:'Ext.grid.Panel', alias:'widget.assignmentgrid', readOnly:false, cls:'gnt-assignmentgrid', defaultAssignedUnits:100, sorter:{sorterFn:function(b, a) {
  var d = b.getUnits(), c = a.getUnits();
  if (!d && !c || d && c) {
    return b.get('ResourceName') < a.get('ResourceName') ? -1 : 1;
  }
  return d ? -1 : 1;
}}, constructor:function(a) {
  this.store = Ext.create('Ext.data.JsonStore', {model:Ext.define('Gnt.model.AssignmentEditing', {extend:'Gnt.model.Assignment', fields:['ResourceName']})});
  this.columns = this.buildColumns();
  if (!this.readOnly) {
    this.plugins = this.buildPlugins();
  }
  Ext.apply(this, {selModel:{selType:'checkboxmodel', mode:'MULTI', checkOnly:true, selectByPosition:function(b) {
    var c = this.store.getAt(b.row);
    this.select(c, true);
  }}});
  this.callParent(arguments);
}, initComponent:function() {
  this.loadResources();
  this.resourceStore.on({datachanged:this.loadResources, scope:this});
  this.getSelectionModel().on('select', this.onSelect, this, {delay:50});
  this.callParent(arguments);
}, onSelect:function(b, a) {
  if ((!this.cellEditing || !this.cellEditing.getActiveEditor()) && !a.getUnits()) {
    a.setUnits(this.defaultAssignedUnits);
  }
}, loadResources:function() {
  var d = [], b = this.resourceStore, e;
  for (var c = 0, a = b.getCount(); c < a; c++) {
    e = b.getAt(c).getId();
    d.push({ResourceId:e, ResourceName:b.getById(e).getName()});
  }
  this.store.loadData(d);
}, buildPlugins:function() {
  var a = this.cellEditing = Ext.create('Ext.grid.plugin.CellEditing', {clicksToEdit:1});
  a.on('edit', this.onEditingDone, this);
  return [a];
}, onEditingDone:function(a, b) {
  if (b.value) {
    this.getSelectionModel().select(b.record, true);
  } else {
    this.getSelectionModel().deselect(b.record);
    b.record.reject();
  }
}, buildColumns:function() {
  return [{xtype:'resourcenamecolumn', resourceStore:this.resourceStore}, {xtype:'assignmentunitscolumn', assignmentStore:this.assignmentStore, editor:{xtype:'numberfield', minValue:0, step:10}}];
}, loadTaskAssignments:function(d) {
  var b = this.store, f = this.getSelectionModel();
  f.deselectAll(true);
  for (var c = 0, a = b.getCount(); c < a; c++) {
    b.getAt(c).data.Units = '';
    b.getAt(c).data.Id = null;
  }
  b.suspendEvents();
  var e = this.assignmentStore.queryBy(function(g) {
    return g.getTaskId() === d;
  });
  e.each(function(h) {
    var g = b.findRecord('ResourceId', h.getResourceId(), 0, false, true, true);
    if (g) {
      g.setUnits(h.getUnits());
      g.set(g.idProperty, h.getId());
      f.select(g, true, true);
    }
  });
  b.resumeEvents();
  b.sort(this.sorter);
  this.getView().refresh();
}});
Ext.define('Gnt.widget.AssignmentField', {extend:'Ext.form.field.Picker', alias:'widget.assignmenteditor', requires:['Gnt.widget.AssignmentGrid'], matchFieldWidth:false, editable:false, cancelText:'Cancel', closeText:'Save and Close', assignmentStore:null, resourceStore:null, gridConfig:null, createPicker:function() {
  var a = new Gnt.widget.AssignmentGrid(Ext.apply({ownerCt:this.ownerCt, renderTo:document.body, frame:true, floating:true, hidden:true, height:200, width:300, resourceStore:this.resourceStore, assignmentStore:this.assignmentStore, fbar:this.buildButtons()}, this.gridConfig || {}));
  return a;
}, buildButtons:function() {
  return ['-\x3e', {text:this.closeText, handler:function() {
    Ext.Function.defer(this.onGridClose, Ext.isIE && !Ext.isIE9 ? 60 : 30, this);
  }, scope:this}, {text:this.cancelText, handler:this.collapse, scope:this}];
}, onExpand:function() {
  var a = this.resourceStore, b = this.picker;
  b.loadTaskAssignments(this.taskId);
}, onGridClose:function() {
  var b = this.picker.getSelectionModel(), a = b.selected;
  this.fireEvent('select', this, a);
  this.collapse();
}, collapseIf:function(b) {
  var a = this;
  if (this.picker && !b.getTarget('.x-editor') && !b.getTarget('.x-menu-item')) {
    a.callParent(arguments);
  }
}});
Ext.define('Gnt.widget.AssignmentCellEditor', {extend:'Ext.grid.CellEditor', requires:['Gnt.model.Assignment', 'Gnt.widget.AssignmentField'], assignmentStore:null, resourceStore:null, taskId:null, fieldConfig:null, allowBlur:false, constructor:function(a) {
  a = a || {};
  var b = a.fieldConfig || {};
  this.field = Ext.create('Gnt.widget.AssignmentField', Ext.apply(b, {assignmentStore:a.assignmentStore, resourceStore:a.resourceStore}));
  this.field.on({select:this.onSelect, collapse:this.cancelEdit, scope:this});
  this.callParent(arguments);
}, startEdit:function(c, d, b) {
  this.parentEl = null;
  var a = c.child('div').dom.innerHTML;
  this.taskId = this.field.taskId = b.record.getInternalId();
  this.callParent([c, a === '\x26nbsp;' ? '' : a]);
  this.field.expand();
}, onSelect:function(g, c) {
  var a = this.assignmentStore, f = this.taskId;
  var e = {};
  var d = [];
  c.each(function(i) {
    var h = i.getUnits();
    if (h > 0) {
      var k = i.getId();
      if (k) {
        e[k] = true;
        a.getById(k).setUnits(h);
      } else {
        var j = Ext.create(a.model);
        j.setTaskId(f);
        j.setResourceId(i.getResourceId());
        j.setUnits(h);
        e[j.internalId] = true;
        d.push(j);
      }
    }
  });
  var b = [];
  a.each(function(h) {
    if (h.getTaskId() === f && !e[h.getId() || h.internalId]) {
      b.push(h);
    }
  });
  a.remove(b);
  a.add(d);
  this.completeEdit();
}});
Ext.define('Gnt.widget.DurationField', {extend:'Ext.form.field.Number', alias:'widget.durationfield', alternateClassName:'Gnt.column.duration.Field', disableKeyFilter:true, minValue:0, durationRegex:/(-?\d+(?:[.,]\d+)?)\s*(\w+)?/i, unitsRegex:{MILLI:/^ms$|^mil/i, SECOND:/^s$|^sec/i, MINUTE:/^m$|^min/i, HOUR:/^h$|^hr$|^hour/i, DAY:/^d$|^day/i, WEEK:/^w$|^wk|^week/i, MONTH:/^mo|^mnt/i, QUARTER:/^q$|^quar|^qrt/i, YEAR:/^y$|^yr|^year/i}, durationUnit:'h', useAbbreviation:false, rawToValue:function(b) {
  var a = this.parseDuration(b);
  if (!a) {
    return null;
  }
  this.durationUnit = a.unit;
  return a.value != null ? a.value : null;
}, valueToRaw:function(a) {
  if (Ext.isNumber(a)) {
    return parseFloat(Ext.Number.toFixed(a, this.decimalPrecision)) + ' ' + Sch.util.Date[this.useAbbreviation ? 'getShortNameOfUnit' : 'getReadableNameOfUnit'](this.durationUnit, a > 1);
  }
  return '';
}, parseDuration:function(c) {
  if (c == null || !this.durationRegex.test(c)) {
    return null;
  }
  var a = this.durationRegex.exec(c);
  var e = this.parseValue(a[1]);
  var b = a[2];
  var d;
  if (b) {
    Ext.iterate(this.unitsRegex, function(f, g) {
      if (g.test(b)) {
        d = Sch.util.Date.getUnitByName(f);
        return false;
      }
    });
  }
  return {value:e, unit:d || this.durationUnit};
}, getDurationValue:function() {
  return this.parseDuration(this.getRawValue());
}, getErrors:function(b) {
  var a = this.parseDuration(b);
  if (!a) {
    return ['Invalid number format'];
  }
  return this.callParent([a.value]);
}});
Ext.define('Gnt.widget.DurationEditor', {extend:'Ext.grid.CellEditor', alias:['widget.durationeditor', 'widget.durationcolumneditor'], alternateClassName:'Gnt.column.duration.Editor', context:null, decimalPrecision:2, getDurationUnitMethod:'getDurationUnit', setDurationMethod:'setDuration', useAbbreviation:false, constructor:function(a) {
  a = a || {};
  Ext.apply(this, a);
  a.field = a.field || Ext.create('Gnt.widget.DurationField', {useAbbreviation:this.useAbbreviation, decimalPrecision:this.decimalPrecision});
  this.callParent([a]);
}, startEdit:function(c, b, a) {
  this.context = a;
  this.field.durationUnit = a.record[this.getDurationUnitMethod]();
  return this.callParent(arguments);
}, completeEdit:function(a) {
  var d = this, g = d.field, e;
  if (!d.editing) {
    return;
  }
  if (g.assertValue) {
    g.assertValue();
  }
  e = d.getValue();
  if (!g.isValid()) {
    if (d.revertInvalid !== false) {
      d.cancelEdit(a);
    }
    return;
  }
  if (String(e) === String(d.startValue) && d.ignoreNoChange) {
    d.hideEdit(a);
    return;
  }
  if (d.fireEvent('beforecomplete', d, e, d.startValue) !== false) {
    e = d.getValue();
    if (d.updateEl && d.boundEl) {
      d.boundEl.update(e);
    }
    d.hideEdit(a);
    var c = this.context;
    var b = c.record;
    var f = this.field.getDurationValue();
    b[this.setDurationMethod](f.value, f.unit);
    d.fireEvent('complete', d, e, d.startValue);
  }
}});
Ext.define('Gnt.column.Duration', {extend:'Ext.grid.column.Column', alias:'widget.durationcolumn', requires:['Gnt.widget.DurationField', 'Gnt.widget.DurationEditor'], text:'Duration', width:80, align:'left', decimalPrecision:2, getDurationUnitMethod:'getDurationUnit', setDurationMethod:'setDuration', useAbbreviation:false, constructor:function(a) {
  a = a || {};
  Ext.apply(this, a);
  a.editor = a.editor || Ext.create('Gnt.widget.DurationEditor', {useAbbreviation:this.useAbbreviation, decimalPrecision:this.decimalPrecision, getDurationUnitMethod:this.getDurationUnitMethod, setDurationMethod:this.setDurationMethod});
  if (!a.editor.isFormField) {
    a.editor = Ext.ComponentManager.create(a.editor, 'durationcolumneditor');
  }
  this.scope = this;
  this.callParent([a]);
  this.mon(this.editor, 'beforestartedit', this.onBeforeStartEdit, this);
}, beforeRender:function() {
  if (!this.dataIndex) {
    var a = this.up('treepanel');
    this.dataIndex = a.store.model.prototype.durationField;
  }
  this.callParent(arguments);
}, onBeforeStartEdit:function(b) {
  var a = b.context.record;
  return a.isEditable(this.dataIndex);
}, renderer:function(b, c, a) {
  if (!Ext.isNumber(b)) {
    return '';
  }
  if (!a.isEditable(this.dataIndex)) {
    c.tdCls = (c.tdCls || '') + ' sch-column-readonly';
  }
  b = parseFloat(Ext.Number.toFixed(b, this.decimalPrecision));
  return b + ' ' + Sch.util.Date[this.useAbbreviation ? 'getShortNameOfUnit' : 'getReadableNameOfUnit'](a[this.getDurationUnitMethod](), b > 1);
}});
Ext.define('Gnt.column.Effort', {extend:'Gnt.column.Duration', alias:'widget.effortcolumn', header:'Effort', getDurationUnitMethod:'getEffortUnit', setDurationMethod:'setEffort', beforeRender:function() {
  if (!this.dataIndex) {
    var a = this.up('treepanel');
    this.dataIndex = a.store.model.prototype.effortField;
  }
  this.callParent(arguments);
}});
Ext.define('Gnt.widget.Calendar', {extend:'Ext.picker.Date', alias:'widget.ganttcalendar', requires:['Gnt.data.Calendar', 'Sch.util.Date'], calendar:null, startDate:null, endDate:null, disabledDatesText:'Holiday', initComponent:function() {
  if (!this.calendar) {
    Ext.Error.raise('Required attribute "calendar" missing during initialization of `Gnt.widget.Calendar`');
  }
  if (!this.startDate) {
    Ext.Error.raise('Required attribute "startDate" missing during initialization of `Gnt.widget.Calendar`');
  }
  if (!this.endDate) {
    this.endDate = Sch.util.Date.add(this.startDate, Sch.util.Date.MONTH, 1);
  }
  this.setCalendar(this.calendar);
  this.minDate = this.value = this.startDate;
  this.injectDates();
  this.callParent(arguments);
}, injectDates:function() {
  var a = this;
  var b = a.disabledDates = [];
  Ext.each(a.calendar.getHolidaysRanges(a.startDate, a.endDate), function(c) {
    c.forEachDate(function(d) {
      b.push(Ext.Date.format(d, a.format));
    });
  });
  a.setDisabledDates(b);
}, setCalendar:function(b) {
  var a = {update:this.injectDates, remove:this.injectDates, add:this.injectDates, load:this.injectDates, clear:this.injectDates, scope:this};
  if (this.calendar) {
    this.calendar.un(a);
  }
  this.calendar = b;
  b.on(a);
}});
Ext.define('Gnt.widget.calendar.DayGrid', {extend:'Ext.grid.Panel', title:'Day overrides', height:180, nameText:'Name', dateText:'Date', noNameText:'[Day override]', initComponent:function() {
  Ext.applyIf(this, {store:Ext.create('Gnt.data.Calendar', {proxy:'memory'}), plugins:[Ext.create('Ext.grid.plugin.CellEditing', {clicksToEdit:2})], columns:[{header:this.nameText, dataIndex:'Name', flex:1, editor:{allowBlank:false}}, {header:this.dateText, dataIndex:'Date', width:100, xtype:'datecolumn', editor:{xtype:'datefield'}}]});
  this.callParent(arguments);
}});
Ext.define('Gnt.widget.calendar.WeekGrid', {extend:'Ext.grid.Panel', requires:['Gnt.model.WeekAvailability'], title:'Week overrides', border:true, height:220, nameText:'Name', startDateText:'Start date', endDateText:'End date', initComponent:function() {
  Ext.applyIf(this, {store:Ext.create('Ext.data.Store', {model:'Gnt.model.WeekAvailability', proxy:'memory'})});
  Ext.applyIf(this, {columns:[{header:this.nameText, dataIndex:this.store.model.prototype.nameField, flex:1, editor:{allowBlank:false}}, {header:this.startDateText, dataIndex:this.store.model.prototype.startDateField, width:100, xtype:'datecolumn', editor:{xtype:'datefield'}}, {header:this.endDateText, dataIndex:this.store.model.prototype.endDateField, width:100, xtype:'datecolumn', editor:{xtype:'datefield'}}], plugins:[Ext.create('Ext.grid.plugin.CellEditing', {clicksToEdit:2})]});
  this.callParent(arguments);
}});
Ext.define('Gnt.widget.calendar.ResourceCalendarGrid', {extend:'Ext.grid.Panel', requires:['Gnt.data.Calendar', 'Sch.util.Date'], alias:'widget.resourcecalendargrid', resourceStore:null, calendarStore:null, initComponent:function() {
  var a = this;
  this.calendarStore = this.calendarStore || Ext.create('Ext.data.Store', {fields:['Id', 'Name']});
  Ext.apply(a, {store:a.resourceStore, columns:[{header:'Name', dataIndex:'Name', flex:1}, {header:'Calendar', dataIndex:'CalendarId', flex:1, renderer:function(f, h, b, e, d, c) {
    if (!f) {
      var g = b.getCalendar();
      f = g ? g.calendarId : '';
    }
    var i = a.calendarStore.getById(f);
    return i ? i.get('Name') : f;
  }, editor:{xtype:'combobox', store:a.calendarStore, queryMode:'local', displayField:'Name', valueField:'Id', editable:false, allowBlank:false}}], border:true, height:180, plugins:[Ext.create('Ext.grid.plugin.CellEditing', {clicksToEdit:2})]});
  this.calendarStore.loadData(this.getCalendarData());
  this.callParent(arguments);
}, getCalendarData:function() {
  var a = [];
  Ext.Array.each(Gnt.data.Calendar.getAllCalendars(), function(b) {
    a.push({Id:b.calendarId, Name:b.name || b.calendarId});
  });
  return a;
}});
Ext.define('Gnt.widget.calendar.DayAvailabilityGrid', {extend:'Ext.grid.Panel', requires:['Gnt.data.Calendar', 'Sch.util.Date'], alias:'widget.dayavailabilitygrid', height:160, calendarDay:null, startText:'Start', endText:'End', addText:'Add', removeText:'Remove', workingTimeText:'Working time', nonworkingTimeText:'Non-working time', getDayTypeRadioGroup:function() {
  return this.down('radiogroup[name\x3d"dayType"]');
}, initComponent:function() {
  Ext.applyIf(this, {store:Ext.create('Ext.data.Store', {fields:['startTime', 'endTime'], proxy:{type:'memory', reader:{type:'json'}}}), plugins:[Ext.create('Ext.grid.plugin.CellEditing', {clicksToEdit:2})], dockedItems:[{xtype:'radiogroup', dock:'top', name:'dayType', padding:'0 5px', margin:0, items:[{boxLabel:this.workingTimeText, name:'IsWorkingDay', inputValue:true}, {boxLabel:this.nonworkingTimeText, name:'IsWorkingDay', inputValue:false}], listeners:{change:this.onDayTypeChanged, scope:this}}], 
  tbar:this.buildToolbar(), columns:[{header:this.startText, xtype:'datecolumn', format:'g:i a', dataIndex:'startTime', flex:1, editor:{xtype:'timefield', allowBlank:false, initDate:'31/12/1899'}}, {header:this.endText, xtype:'datecolumn', format:'g:i a', dataIndex:'endTime', flex:1, editor:{allowBlank:false, xtype:'timefield', initDate:'31/12/1899'}}], listeners:{selectionchange:this.onAvailabilityGridSelectionChange, scope:this}});
  this.callParent(arguments);
}, buildToolbar:function() {
  this.addButton = new Ext.Button({text:this.addText, iconCls:'gnt-action-add', handler:this.addAvailability, scope:this});
  this.removeButton = new Ext.Button({text:this.removeText, iconCls:'gnt-action-remove', handler:this.removeAvailability, scope:this, disabled:true});
  return [this.addButton, this.removeButton];
}, onAvailabilityGridSelectionChange:function(a) {
  if (this.removeButton) {
    this.removeButton.setDisabled(!a || a.getSelection().length === 0);
  }
}, onDayTypeChanged:function(a) {
  var b = a.getValue();
  if (Ext.isArray(b.IsWorkingDay)) {
    return;
  }
  this.getView().setDisabled(!b.IsWorkingDay);
}, addAvailability:function() {
  var a = this.getStore(), b = a.count();
  if (b >= 5) {
    return;
  }
  a.add({startTime:new Date(0, 0, 0, 12, 0), endTime:new Date(0, 0, 0, 13, 0)});
  if (b + 1 >= 5 && this.addButton) {
    this.addButton.setDisabled(true);
  }
}, removeAvailability:function() {
  var b = this.getStore(), c = b.count(), d = this.getSelectionModel();
  if (!d || d.getSelection().length === 0) {
    return;
  }
  var a = d.getSelection()[0];
  b.remove(a);
  if (c < 5 && this.addButton) {
    this.addButton.setDisabled(false);
  }
}, editAvailability:function(a) {
  this.calendarDay = a;
  this.getDayTypeRadioGroup().setValue({IsWorkingDay:a.getIsWorkingDay()});
  var b = this.calendarDay.getAvailability();
  this.getStore().loadData(b);
}, isWorkingDay:function() {
  return this.getDayTypeRadioGroup().getValue().IsWorkingDay;
}, isValid:function() {
  var c = this.getDayTypeRadioGroup().getValue().IsWorkingDay, b = [];
  if (c) {
    try {
      b = this.getIntervals();
      this.calendarDay.verifyAvailability(b);
    } catch (a) {
      Ext.MessageBox.alert('Error', a);
      return false;
    }
  }
  return true;
}, getIntervals:function() {
  var a = [];
  this.getStore().each(function(b) {
    a.push({startTime:b.get('startTime'), endTime:b.get('endTime')});
  });
  return a;
}});
Ext.define('Gnt.widget.calendar.WeekEditor', {extend:'Ext.form.Panel', requires:['Ext.grid.*', 'Gnt.data.Calendar', 'Sch.util.Date'], alias:'widget.calendarweekeditor', layout:'anchor', defaults:{border:false, anchor:'100%'}, getDefaultWeekAvailabilityHandler:null, startDate:null, endDate:null, startHeaderText:'Start', endHeaderText:'End', defaultTimeText:'Default time', workingTimeText:'Working time', nonworkingTimeText:'Non-working time', addText:'Add', removeText:'Remove', weekAvailability:null, 
currentWeekDay:null, _weekDaysGrid:null, getWeekDaysGrid:function() {
  if (this._weekDaysGrid != null) {
    return this._weekDaysGrid;
  }
  var a = Ext.Date.dayNames;
  return this._weekDaysGrid = Ext.create('Ext.grid.Panel', {hideHeaders:true, height:160, columns:[{header:'', dataIndex:'name', flex:1}], store:Ext.create('Ext.data.JsonStore', {fields:['id', 'name'], idProperty:'id', data:[{id:1, name:a[1]}, {id:2, name:a[2]}, {id:3, name:a[3]}, {id:4, name:a[4]}, {id:5, name:a[5]}, {id:6, name:a[6]}, {id:0, name:a[0]}]}), listeners:{selectionchange:{fn:this.onWeekDaysListSelectionChange, scope:this}}});
}, _availabilityGrid:null, getAvailabilityGrid:function() {
  if (!this._availabilityGrid) {
    this._availabilityGrid = Ext.create('Ext.grid.Panel', {height:160, plugins:[Ext.create('Ext.grid.plugin.CellEditing', {clicksToEdit:2})], tbar:[{text:this.addText, action:'add', handler:this.addAvailability, scope:this, iconCls:'gnt-action-add'}, {text:this.removeText, iconCls:'gnt-action-remove', action:'remove', handler:this.removeAvailability, scope:this}], store:Ext.create('Ext.data.Store', {fields:['startTime', 'endTime'], proxy:{type:'memory', reader:{type:'json'}}}), columns:[{header:this.startHeaderText, 
    xtype:'datecolumn', format:'g:i a', dataIndex:'startTime', flex:1, editor:{xtype:'timefield', allowBlank:false, initDate:'31/12/1899'}}, {header:this.endHeaderText, xtype:'datecolumn', format:'g:i a', dataIndex:'endTime', flex:1, editor:{allowBlank:false, xtype:'timefield', initDate:'31/12/1899'}}], listeners:{selectionchange:this.onAvailabilityGridSelectionChange, scope:this}});
  }
  return this._availabilityGrid;
}, getDayTypeRadioGroup:function() {
  return this.down('radiogroup[name\x3d"dayType"]');
}, initComponent:function() {
  if (!this.getDefaultWeekAvailabilityHandler && !Ext.isFunction(this.getDefaultWeekAvailabilityHandler)) {
    Ext.Error.raise('Required attribute "getDefaultWeekAvailabilityHandler" is missed during initialization of `Gnt.widget.calendar.WeekEditor`');
  }
  this.items = [{xtype:'radiogroup', padding:'0 5px', name:'dayType', items:[{boxLabel:this.defaultTimeText, name:'IsWorkingDay', inputValue:0}, {boxLabel:this.workingTimeText, name:'IsWorkingDay', inputValue:1}, {boxLabel:this.nonworkingTimeText, name:'IsWorkingDay', inputValue:2}], listeners:{change:{fn:this.onDayTypeChanged, scope:this}}}, {layout:'column', padding:'0 0 5px 0', defaults:{border:false}, items:[{margin:'0 10px 0 5px', columnWidth:0.5, items:this.getWeekDaysGrid()}, {columnWidth:0.5, 
  margin:'0 5px 0 0', items:this.getAvailabilityGrid()}]}];
  this.callParent(arguments);
}, addAvailability:function() {
  var b = this.getAvailabilityGrid(), a = b.getStore(), c = a.count();
  if (c >= 5) {
    return;
  }
  a.add({startTime:new Date(0, 0, 0, 12, 0), endTime:new Date(0, 0, 0, 13, 0)});
  if (c + 1 >= 5) {
    b.down('button[action\x3d"add"]').setDisabled(true);
  }
}, removeAvailability:function() {
  var c = this.getAvailabilityGrid(), b = c.getStore(), d = b.count(), e = c.getSelectionModel();
  if (!e || e.getSelection().length === 0) {
    return;
  }
  var a = e.getSelection()[0];
  b.remove(a);
  if (d < 5) {
    c.down('button[action\x3d"add"]').setDisabled(false);
  }
}, editAvailability:function(b, e, a) {
  this.startDate = b;
  this.endDate = e;
  this.weekAvailability = a;
  var c = this.getWeekDaysGrid(), d = c.getStore().getAt(0);
  c.getSelectionModel().select(d, false, true);
  this.refreshView(d);
}, applyChanges:function(a) {
  if (!this.validateAndSave()) {
    return false;
  }
  if (a && Ext.isFunction(a)) {
    a.call(this, this.weekAvailability);
  }
}, getIntervals:function() {
  var a = [];
  this.getAvailabilityGrid().getStore().each(function(b) {
    a.push({startTime:b.get('startTime'), endTime:b.get('endTime')});
  });
  return a;
}, onWeekDaysListSelectionChange:function(a, b) {
  if (!this.validateAndSave()) {
    return false;
  }
  this.refreshView(b[0]);
}, validateAndSave:function() {
  var c = this.currentWeekDay.get('IsWorkingDay'), b = [];
  if (c) {
    try {
      b = this.getIntervals();
      this.currentWeekDay.verifyAvailability(b);
    } catch (a) {
      Ext.MessageBox.alert('Error', a);
      return false;
    }
  }
  this.currentWeekDay.setAvailability(b);
  return true;
}, refreshView:function(d) {
  var g = d.getId(), b = this.weekAvailability[g], f = this.getDayTypeRadioGroup(), e = b.getAvailability(), c = /^(\d)-(\d\d\d\d\/\d\d\/\d\d)-(\d\d\d\d\/\d\d\/\d\d)$/.exec(b.getId()), a = !c ? 0 : b.get('IsWorkingDay') ? 1 : 2;
  this.currentWeekDay = b;
  f.setValue({IsWorkingDay:[a]});
  this.getAvailabilityGrid().getStore().loadData(e);
}, onAvailabilityGridSelectionChange:function(b) {
  var a = this.getAvailabilityGrid();
  a.down('button[action\x3d"remove"]').setDisabled(!b || b.getSelection().length === 0);
}, onDayTypeChanged:function(g) {
  var c = g.getValue();
  if (Ext.isArray(c.IsWorkingDay)) {
    return;
  }
  var a = this.getWeekDaysGrid(), d = a.getSelectionModel(), b = d.getSelection()[0].getId(), e = this.weekAvailability[b].get('Name'), f = [], i = Ext.Date.format(this.startDate, 'Y/m/d'), j = Ext.Date.format(this.endDate, 'Y/m/d');
  switch(c.IsWorkingDay) {
    case 0:
      var h = this.getDefaultWeekAvailabilityHandler()[b];
      h.set('Name', e);
      h.set('Date', null);
      f = h.getAvailability();
      this.weekAvailability[b] = h;
      break;
    default:
      f = this.weekAvailability[b].getAvailability();
      this.currentWeekDay.set('Id', Ext.String.format('{0}-{1}-{2}', b, i, j));
      this.currentWeekDay.set('IsWorkingDay', c.IsWorkingDay === 1);
      break;
  }
  this.getAvailabilityGrid().getStore().loadData(Ext.clone(f));
  this.getAvailabilityGrid().setDisabled(c.IsWorkingDay !== 1);
}});
Ext.define('Gnt.widget.calendar.DatePicker', {extend:'Ext.picker.Date', alias:'widget.gntdatepicker', calendar:null, workingDayCls:'gnt-datepicker-workingday', nonWorkingDayCls:'gnt-datepicker-nonworkingday', overriddenDayCls:'gnt-datepicker-overriddenday', overriddenWeekDayCls:'gnt-datepicker-overriddenweekday', _weeks:null, getWeekOverrides:function() {
  return this._weeks;
}, setWeekOverrides:function(a) {
  this._weeks = a;
}, _days:null, getDayOverrides:function() {
  return this._days;
}, setDayOverrides:function(a) {
  this._days = a;
}, update:function(b, e) {
  var d = this, c = 0, a = d.cells.elements;
  this.removeCustomCls();
  this.callParent(arguments);
  for (; c < d.numDays; ++c) {
    b = a[c].firstChild.dateValue;
    a[c].className += ' ' + this.getDateCls(b);
  }
}, getDateCls:function(d) {
  var b = '', f = 0, g = this;
  d = new Date(d);
  if (d.getMonth() !== this.getActive().getMonth()) {
    return;
  }
  if (this.getDayOverrides().getOverrideDay(d)) {
    b += ' ' + this.overriddenDayCls;
    if (!this.getDayOverrides().isWorkingDay(d)) {
      b += ' ' + this.nonWorkingDayCls;
    }
  } else {
    var e = null;
    this.getWeekOverrides().each(function(h) {
      if (Ext.Date.between(d, h.getStartDate(), h.getEndDate())) {
        e = h;
        return true;
      }
    });
    if (e) {
      b += ' ' + this.overriddenWeekDayCls;
      var c = (new Date(d)).getDay(), a = e.getAvailability();
      if (a && a[c] && a[c].getIsWorkingDay() === false) {
        b += ' ' + g.nonWorkingDayCls;
      }
    } else {
      if (!this.getDayOverrides().isWorkingDay(d)) {
        b += ' ' + this.nonWorkingDayCls;
      }
    }
  }
  return b.length > 0 ? b : this.workingDayCls;
}, removeCustomCls:function() {
  this.cells.removeCls([this.overriddenDayCls, this.nonWorkingDayCls, this.workingDayCls, this.overriddenWeekDayCls]);
}});
Ext.define('Gnt.widget.calendar.Calendar', {extend:'Ext.form.Panel', requires:['Ext.XTemplate', 'Gnt.data.Calendar', 'Gnt.widget.calendar.DayGrid', 'Gnt.widget.calendar.WeekGrid', 'Gnt.widget.calendar.DayAvailabilityGrid', 'Gnt.widget.calendar.WeekEditor', 'Gnt.widget.calendar.DatePicker'], alias:'widget.calendar', defaults:{padding:10, border:false}, workingDayCls:'gnt-datepicker-workingday', nonWorkingDayCls:'gnt-datepicker-nonworkingday', overriddenDayCls:'gnt-datepicker-overriddenday', overriddenWeekDayCls:'gnt-datepicker-overriddenweekday', 
calendar:null, dayOverrideNameHeaderText:'Name', dateText:'Date', addText:'Add', editText:'Edit', removeText:'Remove', workingDayText:'Working day', weekendsText:'Weekends', overriddenDayText:'Overridden day', overriddenWeekText:'Overridden week', defaultTimeText:'Default time', workingTimeText:'Working time', nonworkingTimeText:'Non-working time', dayGridConfig:null, weekGridConfig:null, datePickerConfig:null, dayOverridesText:'Day overrides', weekOverridesText:'Week overrides', okText:'OK', cancelText:'Cancel', 
dayGrid:null, weekGrid:null, getDayGrid:function() {
  if (!this.dayGrid) {
    this.dayGrid = Ext.create('Gnt.widget.calendar.DayGrid', Ext.apply({tbar:[{text:this.addText, action:'add', iconCls:'gnt-action-add', handler:this.addDay, scope:this}, {text:this.editText, action:'edit', iconCls:'gnt-action-edit', handler:this.editDay, scope:this}, {text:this.removeText, action:'remove', iconCls:'gnt-action-remove', handler:this.removeDay, scope:this}]}, this.dayGridConfig || {}));
  }
  return this.dayGrid;
}, getWeekGrid:function() {
  if (!this.weekGrid) {
    this.weekGrid = Ext.create('Gnt.widget.calendar.WeekGrid', Ext.apply({tbar:[{text:this.addText, action:'add', iconCls:'gnt-action-add', handler:this.addWeek, scope:this}, {text:this.editText, action:'edit', iconCls:'gnt-action-edit', handler:this.editWeek, scope:this}, {text:this.removeText, action:'remove', iconCls:'gnt-action-remove', handler:this.removeWeek, scope:this}]}, this.weekGridConfig || {}));
  }
  return this.weekGrid;
}, datePicker:null, getDatePicker:function() {
  if (!this.datePicker) {
    this.datePicker = Ext.create('Gnt.widget.calendar.DatePicker', this.datePickerConfig || {});
  }
  return this.datePicker;
}, legendTpl:'\x3cul class\x3d"gnt-calendar-legend"\x3e\x3cli class\x3d"gnt-calendar-legend-item"\x3e\x3cdiv class\x3d"gnt-calendar-legend-itemstyle {workingDayCls}"\x3e\x3c/div\x3e\x3cspan class\x3d"gnt-calendar-legend-itemname"\x3e{workingDayText}\x3c/span\x3e\x3cdiv style\x3d"clear: both"\x3e\x3c/div\x3e\x3c/li\x3e\x3cli\x3e\x3cdiv class\x3d"gnt-calendar-legend-itemstyle {nonWorkingDayCls}"\x3e\x3c/div\x3e\x3cspan class\x3d"gnt-calendar-legend-itemname"\x3e{weekendsText}\x3c/span\x3e\x3cdiv style\x3d"clear: both"\x3e\x3c/div\x3e\x3c/li\x3e\x3cli class\x3d"gnt-calendar-legend-override"\x3e\x3cdiv class\x3d"gnt-calendar-legend-itemstyle {overriddenDayCls}"\x3e31\x3c/div\x3e\x3cspan class\x3d"gnt-calendar-legend-itemname"\x3e{overriddenDayText}\x3c/span\x3e\x3cdiv style\x3d"clear: both"\x3e\x3c/div\x3e\x3c/li\x3e\x3cli class\x3d"gnt-calendar-legend-override"\x3e\x3cdiv class\x3d"gnt-calendar-legend-itemstyle {overriddenWeekDayCls}"\x3e31\x3c/div\x3e\x3cspan class\x3d"gnt-calendar-legend-itemname"\x3e{overriddenWeekText}\x3c/span\x3e\x3cdiv style\x3d"clear: both"\x3e\x3c/div\x3e\x3c/li\x3e\x3c/ul\x3e', 
dateInfoTpl:'\x3ctpl if\x3d"isWorkingDay \x3d\x3d true"\x3e\x3cdiv\x3eWorking hours for {date}:\x3c/div\x3e\x3c/tpl\x3e\x3ctpl if\x3d"isWorkingDay \x3d\x3d false"\x3e\x3cdiv\x3e{date} is non-working\x3c/div\x3e\x3c/tpl\x3e\x3cul class\x3d"gnt-calendar-availabilities"\x3e\x3ctpl for\x3d"availability"\x3e\x3cli\x3e{.}\x3c/li\x3e\x3c/tpl\x3e\x3c/ul\x3e\x3cspan\x3eBased on: \x3ctpl if\x3d"override \x3d\x3d true"\x3eoverride "{name}" in calendar "{calendarName}"\x3c/tpl\x3e\x3ctpl if\x3d"override \x3d\x3d false"\x3estandard day in calendar "{calendarName}"\x3c/tpl\x3e\x3c/span\x3e', 
initComponent:function() {
  var d = this;
  if (!(this.legendTpl instanceof Ext.Template)) {
    this.legendTpl = new Ext.XTemplate(this.legendTpl);
  }
  if (!(this.dateInfoTpl instanceof Ext.Template)) {
    this.dateInfoTpl = new Ext.XTemplate(this.dateInfoTpl);
  }
  if (!this.calendar) {
    Ext.Error.raise('Required attribute "calendar" is missed during initialization of `Gnt.widget.Calendar`');
  }
  var b = this.getWeekGrid(), a = this.getDayGrid(), c = this.getDatePicker();
  this.dayGrid.on({selectionchange:this.onDayGridSelectionChange, validateedit:this.onDayGridValidateEdit, edit:this.onDayGridEdit, scope:this});
  this.dayGrid.store.on({update:this.refreshView, remove:this.refreshView, add:this.refreshView, scope:this});
  this.weekGrid.on({selectionchange:this.onWeekGridSelectionChange, validateedit:this.onWeekGridValidateEdit, edit:this.onWeekGridEdit, scope:this});
  this.weekGrid.store.on({update:this.refreshView, remove:this.refreshView, add:this.refreshView, scope:this});
  this.datePicker.on({select:this.onDateSelect, scope:this});
  this.fillDaysStore();
  this.fillWeeksStore();
  c.setWeekOverrides(b.getStore());
  c.setDayOverrides(a.getStore());
  this.dateInfoPanel = new Ext.Panel({cls:'gnt-calendar-dateinfo', columnWidth:0.33, border:false, height:200});
  this.items = [{xtype:'container', layout:'hbox', pack:'start', align:'stretch', items:[{html:Ext.String.format('Calendar name: "{0}"', this.calendar.name), border:false, flex:1}, {xtype:'combobox', name:'cmb_parentCalendar', fieldLabel:'Parent calendar', store:Ext.create('Ext.data.Store', {fields:['Id', 'Name'], data:[{Id:-1, Name:'No parent'}].concat(d.calendar.getParentableCalendars())}), queryMode:'local', displayField:'Name', valueField:'Id', editable:false, emptyText:'Select parent', value:d.calendar.parent ? 
  d.calendar.parent.calendarId : -1, flex:1}]}, {layout:'column', defaults:{border:false}, items:[{margin:'0 15px 0 0', columnWidth:0.3, html:this.legendTpl.apply({workingDayText:this.workingDayText, weekendsText:this.weekendsText, overriddenDayText:this.overriddenDayText, overriddenWeekText:this.overriddenWeekText, workingDayCls:this.workingDayCls, nonWorkingDayCls:this.nonWorkingDayCls, overriddenDayCls:this.overriddenDayCls, overriddenWeekDayCls:this.overriddenWeekDayCls})}, {columnWidth:0.37, 
  margin:'0 5px 0 0', items:c}, this.dateInfoPanel]}, {xtype:'tabpanel', items:[a, b]}];
  this.callParent(arguments);
}, onRender:function() {
  this.onDateSelect(this.getDatePicker(), new Date());
  this.callParent(arguments);
}, fillDaysStore:function() {
  var a = [];
  this.calendar.each(function(b) {
    if (!b.getDate()) {
      return;
    }
    a.push(Ext.create('Gnt.model.CalendarDay', {Date:b.getDate(), Id:b.getId(), Name:b.getName(), IsWorkingDay:b.getIsWorkingDay(), Availability:b.getAvailability()}));
  });
  this.getDayGrid().getStore().loadData(a);
}, fillWeeksStore:function() {
  var c = [], b = this, a = this.getWeekGrid().store.model.prototype;
  Ext.Array.each(this.calendar.nonStandardWeeksStartDates, function(e) {
    var g = b.calendar.getNonStandardWeekByStartDate(e);
    var f = {};
    var d = b.calendar.getDefaultWeekAvailability();
    f[a.nameField] = g.name;
    f[a.startDateField] = g.startDate;
    f[a.endDateField] = g.endDate;
    f[a.availabilityField] = d;
    Ext.Array.each(d, function(h) {
      h.setName(g.name);
      h.clearDate(null);
    });
    Ext.Array.each(g.weekAvailability, function(k) {
      var l = k.getId();
      var j = /^(\d)-(\d\d\d\d\/\d\d\/\d\d)-(\d\d\d\d\/\d\d\/\d\d)$/.exec(l);
      if (!j) {
        return;
      }
      var i = j[1];
      var h = Ext.create('Gnt.model.CalendarDay');
      h.clearDate(null);
      h.setId(l);
      h.setName(g.name);
      h.setIsWorkingDay(k.getIsWorkingDay());
      h.setAvailability(k.getAvailability());
      d[i] = h;
    });
    c.push(f);
  });
  this.getWeekGrid().getStore().loadData(c);
}, reload:function() {
  var b = this.getWeekGrid(), a = this.getDayGrid();
  this.fillDaysStore();
  this.fillWeeksStore();
  this.getDatePicker().setWeekOverrides(b.getStore());
  this.getDatePicker().setDayOverrides(a.getStore());
}, editDay:function() {
  var c = this, e = this.getDayGrid().getSelectionModel();
  if (!e || e.getSelection().length === 0) {
    return;
  }
  var a = e.getSelection()[0];
  var b = new Gnt.widget.calendar.DayAvailabilityGrid({addText:this.addText, removeText:this.removeText, workingTimeText:this.workingTimeText, nonworkingTimeText:this.nonworkingTimeText});
  var d = Ext.create('Ext.window.Window', {title:this.dayOverridesText, modal:true, width:280, height:260, layout:'fit', items:b, buttons:[{text:this.okText, handler:function() {
    c.calendar.clearCache();
    if (b.isValid()) {
      var f = b.calendarDay;
      f.setIsWorkingDay(b.isWorkingDay());
      f.setAvailability(b.getIntervals());
      c.applyCalendarDay(f, a);
      c.refreshView();
      d.close();
    }
  }}, {text:this.cancelText, handler:function() {
    d.close();
  }}]});
  b.editAvailability(this.cloneCalendarDay(a));
  d.show();
}, addDay:function() {
  var a = this.getDatePicker().getValue(), b = this.getDayGrid(), c = Ext.create('Gnt.model.CalendarDay', {Name:'[Without name]', Cls:this.calendar.defaultNonWorkingTimeCssCls, Date:a, IsWorkingDay:false});
  b.getStore().insert(0, c);
  b.getSelectionModel().select([c], false, false);
}, removeDay:function() {
  var f = this.getDayGrid(), h = f.getSelectionModel(), c = f.getStore();
  if (!h || h.getSelection().length === 0) {
    return;
  }
  c.clearCache();
  var a = h.getSelection()[0], d = this.getDatePicker().getValue(), g = d.getDay(), b = this.getWeekOverrideDay(d), e = b != null;
  c.remove(a);
  if (b == null) {
    b = this.calendar.defaultWeekAvailability[g];
  }
  this.getDatePicker().setValue(d);
}, refreshView:function() {
  var e = this.getDatePicker().getValue(), b = this.getCalendarDay(e), d = this.getWeekGrid(), a = this.getDayGrid(), c = a.getStore().getOverrideDay(e), g;
  if (c) {
    a.getSelectionModel().select([c], false, true);
  } else {
    g = this.getWeekOverrideByDate(e);
    if (g) {
      d.getSelectionModel().select([g], false, true);
    }
  }
  var f = {name:b.getName(), date:Ext.Date.format(e, 'M j, Y'), calendarName:this.calendar.name || this.calendar.calendarId, availability:b.getAvailability(true), override:!!(c || g), isWorkingDay:b.getIsWorkingDay()};
  this.dateInfoPanel.update(this.dateInfoTpl.apply(f));
}, onDayGridSelectionChange:function(d) {
  if (!d || d.getSelection().length === 0) {
    return;
  }
  var a = d.getSelection()[0], b = a.getDate(), c = this.getDayGrid();
  this.getDatePicker().setValue(b);
}, onDayGridEdit:function(b, c) {
  if (c.field === 'Date') {
    var a = Ext.Date.clearTime(c.value, true);
    c.record.data[c.record.idProperty] = a - 0;
    c.grid.getStore().clearCache();
    this.getDatePicker().setValue(c.value);
  }
  this.refreshView();
}, onDayGridValidateEdit:function(b, c) {
  var a = c.grid.getStore();
  if (c.field === a.model.prototype.dateField && a.getOverrideDay(c.value) && c.value !== c.originalValue) {
    Ext.MessageBox.alert('Error', 'There is already an override for this day');
    return false;
  }
}, onDateSelect:function(b, a) {
  this.refreshView();
}, getCalendarDay:function(b) {
  var a = this.getOverrideDay(b);
  if (a) {
    return a;
  }
  a = this.getWeekOverrideDay(b);
  if (a) {
    return a;
  }
  return this.calendar.defaultWeekAvailability[b.getDay()];
}, getOverrideDay:function(a) {
  return this.getDayGrid().getStore().getOverrideDay(a);
}, getWeekOverrideDay:function(c) {
  var e = new Date(c), d = this.getWeekOverrideByDate(c), b = e.getDay();
  if (d == null) {
    return null;
  }
  var a = d.getAvailability();
  if (!a) {
    return null;
  }
  return a[b];
}, getWeekOverrideByDate:function(a) {
  var b = null;
  this.getWeekGrid().getStore().each(function(c) {
    if (Ext.Date.between(a, c.getStartDate(), c.getEndDate())) {
      b = c;
      return true;
    }
  });
  return b;
}, editWeek:function() {
  var f = this.getWeekGrid().getSelectionModel(), c = this;
  if (!f || f.getSelection().length === 0) {
    return;
  }
  var b = f.getSelection()[0];
  var a = new Gnt.widget.calendar.WeekEditor({getDefaultWeekAvailabilityHandler:function() {
    return c.getDefaultWeekAvailability();
  }});
  var e = Ext.create('Ext.window.Window', {title:this.weekOverridesText, modal:true, width:370, defaults:{border:false}, layout:'fit', items:a, buttons:[{text:this.okText, handler:function() {
    c.calendar.clearCache();
    a.applyChanges(function(g) {
      b.setAvailability(g);
      var i = c.getDatePicker().getValue(), h = g[i.getDay()];
      c.refreshView();
      e.close();
    });
  }}, {text:this.cancelText, handler:function() {
    e.close();
  }}]});
  var d = [];
  Ext.Array.each(b.getAvailability(), function(g) {
    d.push(c.cloneCalendarDay(g));
  });
  e.show();
  e.down('calendarweekeditor').editAvailability(b.getStartDate(), b.getEndDate(), d);
}, addWeek:function() {
  var a = this.getWeekGrid().getStore();
  var b = this.getDatePicker().getValue(), c = new a.model();
  c.setName('[Without name]');
  c.setStartDate(b);
  c.setEndDate(b);
  c.setAvailability(this.calendar.getDefaultWeekAvailability());
  a.insert(0, c);
  this.getWeekGrid().getSelectionModel().select([c], false, false);
}, removeWeek:function() {
  var f = this.getWeekGrid().getSelectionModel();
  if (!f || f.getSelection().length === 0) {
    return;
  }
  var a = f.getSelection()[0], c = this.getDatePicker().getValue(), e = c.getDay(), b = this.getOverrideDay(c), d = !!b;
  b = b || this.calendar.defaultWeekAvailability[e];
  this.getWeekGrid().getStore().remove(a);
  this.getDatePicker().setValue(c);
  this.refreshView();
}, onWeekGridSelectionChange:function(e) {
  if (!e || e.getSelection().length === 0) {
    return;
  }
  var a = e.getSelection()[0], b = a.getStartDate(), f = b.getDay(), d = a.getAvailability()[f], c = this.getWeekGrid();
  if (d == null) {
    d = this.calendar.defaultWeekAvailability[f];
  }
  this.getDatePicker().setValue(b);
}, onWeekGridEdit:function(f, h) {
  var c = h.record, a = c.getStartDate(), d = c.getEndDate(), i = a.getDay(), b = c.getAvailability(), k = b[i];
  prot = h.grid.getStore().model.prototype;
  if (k == null) {
    k = this.calendar.defaultWeekAvailability[i];
  }
  if (h.field == prot.startDateField || h.field == prot.endDateField) {
    var g = Ext.Date.format(a, 'Y/m/d');
    var j = Ext.Date.format(d, 'Y/m/d');
    Ext.Array.each(b, function(l) {
      var m = l.getId();
      var e = /^(\d)-(\d\d\d\d\/\d\d\/\d\d)-(\d\d\d\d\/\d\d\/\d\d)$/.exec(m);
      if (!e) {
        return;
      }
      l.set('Id', Ext.String.format('{0}-{1}-{2}', e[1], g, j));
    });
    this.getDatePicker().setValue(a);
  }
  this.refreshView();
}, onWeekGridValidateEdit:function(f, i) {
  var c = i.record, b = c.getStartDate(), h = c.getEndDate(), a = true;
  var d = i.grid.getStore();
  var g = d.model.prototype;
  if (i.field === g.startDateField && h < i.value || i.field === g.endDateField && b > i.value) {
    Ext.MessageBox.alert('Error', 'StartDate greater then EndDate');
    return false;
  }
  d.each(function(j) {
    var k = j.getStartDate(), e = j.getEndDate();
    if (k == b && e == h) {
      return;
    }
    if (i.field == g.startDateField && k < b && i.value <= e || i.field == g.endDateField && e > h && i.value >= k) {
      a = false;
      return true;
    }
  });
  if (!a) {
    Ext.MessageBox.alert('Error', "Dates shouldn't intersect");
    return false;
  }
}, applyChanges:function(b) {
  var a = this.down('combobox[name\x3d"cmb_parentCalendar"]').getValue();
  this.calendar.parent = a ? Gnt.data.Calendar.getCalendar(a) : null;
  this.calendar.proxy.extraParams.parentId = this.calendar.parent ? this.calendar.parent.calendarId : null;
  this.applyDays();
  this.applyWeeks();
  if (b && Ext.isFunction(b)) {
    b.call(this, this.calendar);
  }
}, applyCalendarDay:function(b, a) {
  a.beginEdit();
  a.setId(b.getId());
  a.setName(b.getName());
  a.setIsWorkingDay(b.getIsWorkingDay());
  a.setDate(b.getDate());
  a.setAvailability(b.getAvailability());
  a.endEdit();
}, applyWeek:function(d, c) {
  var b = this, a = /^(\d)-(\d\d\d\d\/\d\d\/\d\d)-(\d\d\d\d\/\d\d\/\d\d)$/;
  Ext.Array.each(d.getAvailability(), function(f, h) {
    var i = false, g = f.getId(), e = a.exec(g) ? false : true;
    Ext.Array.each(c.weekAvailability, function(j) {
      var l = j.getId(), k = a.exec(l);
      if (k[1] == h) {
        if (e) {
          b.calendar.remove(j);
        } else {
          b.applyCalendarDay(f, j);
        }
        i = true;
        return i;
      }
    });
    if (!i && !e) {
      b.calendar.add(f);
    }
  });
}, applyWeeks:function() {
  var c = this, b = this.getWeekGrid().getStore(), a = [], e = [], d = [];
  Ext.Array.each(this.calendar.nonStandardWeeksStartDates, function(f) {
    var g = false;
    b.each(function(i) {
      var h = Ext.Date.clearTime(i.getStartDate());
      if (h === f) {
        var j = c.calendar.getNonStandardWeekByDate(f);
        j.endDate == i.getEndDate() ? e.push([i, j]) : a.push(f);
        g = true;
        return true;
      }
    });
    if (!g) {
      a.push(f);
    }
  });
  b.each(function(f) {
    if (c.calendar.getNonStandardWeekByDate(f.getStartDate() == null)) {
      d.push(f);
    }
  });
  Ext.Array.each(a, function(f) {
    c.calendar.removeNonStandardWeek(f);
  });
  Ext.Array.each(d, function(f) {
    c.calendar.addNonStandardWeek(f.getStartDate(), f.getEndDate(), f.getAvailability());
  });
  Ext.Array.each(e, function(f) {
    c.applyWeek(f[0], f[1]);
  });
}, applyDays:function() {
  var c = this, b = this.getDayGrid().getStore(), a = [], e = [], d = [];
  this.calendar.each(function(f) {
    var g = /^(\d)-(\d\d\d\d\/\d\d\/\d\d)-(\d\d\d\d\/\d\d\/\d\d)$/.exec(f.getId());
    if (g) {
      return;
    }
    b.getOverrideDay(f.getDate()) == null ? a.push(f) : e.push(f);
  });
  b.each(function(f) {
    if (c.calendar.getOverrideDay(f.getDate()) == null) {
      d.push(f);
    }
  });
  this.calendar.remove(a);
  this.calendar.add(d);
  Ext.Array.each(e, function(f) {
    var g = b.getOverrideDay(f.getDate());
    c.applyCalendarDay(g, f);
  });
}, cloneCalendarDay:function(a) {
  return Ext.create('Gnt.model.CalendarDay', {Date:a.getDate(), Id:a.getId(), Name:a.getName(), IsWorkingDay:a.getIsWorkingDay(), Availability:a.getAvailability()});
}, getDefaultWeekAvailability:function() {
  return this.calendar.defaultWeekAvailability;
}, onDestroy:function() {
  this.getWeekGrid().destroy();
  this.getDayGrid().destroy();
  this.getDatePicker().destroy();
  this.callParent(arguments);
}});
Ext.onReady(function() {
  if (window.location.href.match('bryntum.com|ext-scheduler.com')) {
    return;
  } else {
    if (Sch && Sch.view && Sch.view.TimelineGridView) {
      var b = false;
      Sch.view.TimelineGridView.override({refresh:function() {
        this.callOverridden(arguments);
        if (b || !this.rendered) {
          return;
        }
        b = true;
        Ext.Function.defer(function() {
          this.el.select(this.eventSelector).setOpacity(0.15);
        }, 10 * 60 * 1000, this);
        var c = this.el.parent().createChild({tag:'a', href:'http://www.bryntum.com/store', title:'Click here to purchase a license', style:'display:block;height:54px;width:230px;background: #fff url(http://www.bryntum.com/site-images/bryntum-trial.png) no-repeat;z-index:10000;border:1px solid #ddd;-webkit-box-shadow: 2px 2px 2px rgba(100, 100, 100, 0.5);-moz-box-shadow: 2px 2px 2px rgba(100, 100, 100, 0.5);-moz-border-radius:5px;-webkit-border-radius:5px;position:absolute;bottom:10px;right:15px;'});
        try {
          if (!Ext.util.Cookies.get('bmeval')) {
            Ext.util.Cookies.set('bmeval', (new Date()).getTime(), Ext.Date.add(new Date(), Ext.Date.YEAR, 2));
          } else {
            var g = Ext.util.Cookies.get('bmeval'), d = new Date(parseInt(g, 10));
            if (Ext.Date.add(d, Ext.Date.DAY, 45) < new Date()) {
              this.el.select(this.eventSelector).hide();
              this.el.mask('Trial Period Expired!').setStyle('z-index', 10000);
              this.refresh = Ext.emptyFn;
            }
          }
        } catch (f) {
        }
      }});
    }
    if (Sch && Sch.view && Sch.view.TimelineTreeView) {
      var a = false;
      Sch.view.TimelineTreeView.override({refresh:function() {
        this.callOverridden(arguments);
        if (a || !this.rendered) {
          return;
        }
        a = true;
        Ext.Function.defer(function() {
          this.el.select(this.eventSelector).setOpacity(0.15);
        }, 10 * 60 * 1000, this);
        var c = this.el.parent().createChild({tag:'a', href:'http://www.bryntum.com/store', title:'Click here to purchase a license', style:'display:block;height:54px;width:230px;background: #fff url(http://www.bryntum.com/site-images/bryntum-trial.png) no-repeat;z-index:10000;border:1px solid #ddd;-webkit-box-shadow: 2px 2px 2px rgba(100, 100, 100, 0.5);-moz-box-shadow: 2px 2px 2px rgba(100, 100, 100, 0.5);-moz-border-radius:5px;-webkit-border-radius:5px;position:absolute;bottom:10px;right:15px;'});
        Ext.Function.defer(c.fadeOut, 10000, c);
        try {
          if (!Ext.util.Cookies.get('bmeval')) {
            Ext.util.Cookies.set('bmeval', (new Date()).getTime(), Ext.Date.add(new Date(), Ext.Date.YEAR, 2));
          } else {
            var g = Ext.util.Cookies.get('bmeval'), d = new Date(parseInt(g, 10));
            if (Ext.Date.add(d, Ext.Date.DAY, 45) < new Date()) {
              this.el.select(this.eventSelector).hide();
              this.el.mask('Trial Period Expired!').setStyle('z-index', 10000);
              this.refresh = Ext.emptyFn;
            }
          }
        } catch (f) {
        }
      }});
    }
  }
});
Ext.data.Connection.override({parseStatus:function(b) {
  var a = this.callOverridden(arguments);
  if (b === 0) {
    a.success = true;
  }
  return a;
}});
Ext.onReady(function() {
  window._gaq = window._gaq || [];
  window._gaq.push(['_setAccount', 'UA-11046863-1']);
  window._gaq.push(['_setDomainName', 'none']);
  window._gaq.push(['_setAllowLinker', true]);
  window._gaq.push(['_trackPageview']);
  (function() {
    var b = document.createElement('script');
    b.type = 'text/javascript';
    b.async = true;
    b.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var a = document.getElementsByTagName('script')[0];
    a.parentNode.insertBefore(b, a);
  })();
  window.onerror = function(h, c, a) {
    if (!window.__reported && h && (a || c)) {
      window.__reported = true;
      try {
        var b = new Image();
        var g = Ext.versions && Ext.versions.extjs && Ext.versions.extjs.version;
        var f = Sch.VERSION || '-';
        b.src = Ext.String.format('http://bryntum.com/errlog.php?msg\x3d{0}\x26url\x3d{1}\x26line\x3d{2}\x26href\x3d{3}\x26extVersion\x3d{4}\x26prodVersion\x3d{5}\x26magic\x3d{6}', encodeURIComponent(h), encodeURIComponent(c), encodeURIComponent(a), encodeURIComponent(window.location.href), encodeURIComponent(g), encodeURIComponent(f), 'maFSiO6W');
      } catch (d) {
      }
    }
  };
});
var $jscomp = $jscomp || {};
$jscomp.scope = {};
$jscomp.ASSUME_ES5 = false;
$jscomp.ASSUME_NO_NATIVE_MAP = false;
$jscomp.ASSUME_NO_NATIVE_SET = false;
$jscomp.SIMPLE_FROUND_POLYFILL = false;
$jscomp.ISOLATE_POLYFILLS = false;
$jscomp.FORCE_POLYFILL_PROMISE = false;
$jscomp.FORCE_POLYFILL_PROMISE_WHEN_NO_UNHANDLED_REJECTION = false;
$jscomp.defineProperty = $jscomp.ASSUME_ES5 || typeof Object.defineProperties == 'function' ? Object.defineProperty : function(target, property, descriptor) {
  if (target == Array.prototype || target == Object.prototype) {
    return target;
  }
  target[property] = descriptor.value;
  return target;
};
$jscomp.getGlobal = function(passedInThis) {
  var possibleGlobals = ['object' == typeof globalThis && globalThis, passedInThis, 'object' == typeof window && window, 'object' == typeof self && self, 'object' == typeof global && global];
  for (var i = 0; i < possibleGlobals.length; ++i) {
    var maybeGlobal = possibleGlobals[i];
    if (maybeGlobal && maybeGlobal['Math'] == Math) {
      return maybeGlobal;
    }
  }
  return {valueOf:function() {
    throw new Error('Cannot find global object');
  }}.valueOf();
};
$jscomp.global = $jscomp.getGlobal(this);
$jscomp.IS_SYMBOL_NATIVE = typeof Symbol === 'function' && typeof Symbol('x') === 'symbol';
$jscomp.TRUST_ES6_POLYFILLS = !$jscomp.ISOLATE_POLYFILLS || $jscomp.IS_SYMBOL_NATIVE;
$jscomp.polyfills = {};
$jscomp.propertyToPolyfillSymbol = {};
$jscomp.POLYFILL_PREFIX = '$jscp$';
var $jscomp$lookupPolyfilledValue = function(target, property) {
  var obfuscatedName = $jscomp.propertyToPolyfillSymbol[property];
  if (obfuscatedName == null) {
    return target[property];
  }
  var polyfill = target[obfuscatedName];
  return polyfill !== undefined ? polyfill : target[property];
};
$jscomp.polyfill = function(target, polyfill, fromLang, toLang) {
  if (!polyfill) {
    return;
  }
  if ($jscomp.ISOLATE_POLYFILLS) {
    $jscomp.polyfillIsolated(target, polyfill, fromLang, toLang);
  } else {
    $jscomp.polyfillUnisolated(target, polyfill, fromLang, toLang);
  }
};
$jscomp.polyfillUnisolated = function(target, polyfill, fromLang, toLang) {
  var obj = $jscomp.global;
  var split = target.split('.');
  for (var i = 0; i < split.length - 1; i++) {
    var key = split[i];
    if (!(key in obj)) {
      return;
    }
    obj = obj[key];
  }
  var property = split[split.length - 1];
  var orig = obj[property];
  var impl = polyfill(orig);
  if (impl == orig || impl == null) {
    return;
  }
  $jscomp.defineProperty(obj, property, {configurable:true, writable:true, value:impl});
};
$jscomp.polyfillIsolated = function(target, polyfill, fromLang, toLang) {
  var split = target.split('.');
  var isSimpleName = split.length === 1;
  var root = split[0];
  var ownerObject;
  if (!isSimpleName && root in $jscomp.polyfills) {
    ownerObject = $jscomp.polyfills;
  } else {
    ownerObject = $jscomp.global;
  }
  for (var i = 0; i < split.length - 1; i++) {
    var key = split[i];
    if (!(key in ownerObject)) {
      return;
    }
    ownerObject = ownerObject[key];
  }
  var property = split[split.length - 1];
  var nativeImpl = $jscomp.IS_SYMBOL_NATIVE && fromLang === 'es6' ? ownerObject[property] : null;
  var impl = polyfill(nativeImpl);
  if (impl == null) {
    return;
  }
  if (isSimpleName) {
    $jscomp.defineProperty($jscomp.polyfills, property, {configurable:true, writable:true, value:impl});
  } else if (impl !== nativeImpl) {
    if ($jscomp.propertyToPolyfillSymbol[property] === undefined) {
      var BIN_ID = Math.random() * 1000000000 >>> 0;
      $jscomp.propertyToPolyfillSymbol[property] = $jscomp.IS_SYMBOL_NATIVE ? $jscomp.global['Symbol'](property) : $jscomp.POLYFILL_PREFIX + BIN_ID + '$' + property;
    }
    var obfuscatedName = $jscomp.propertyToPolyfillSymbol[property];
    $jscomp.defineProperty(ownerObject, obfuscatedName, {configurable:true, writable:true, value:impl});
  }
};
$jscomp.polyfill('Array.prototype.copyWithin', function(orig) {
  if (orig) {
    return orig;
  }
  var polyfill = function(target, start, opt_end) {
    var len = this.length;
    target = toInteger(target);
    start = toInteger(start);
    var end = opt_end === undefined ? len : toInteger(opt_end);
    var to = target < 0 ? Math.max(len + target, 0) : Math.min(target, len);
    var from = start < 0 ? Math.max(len + start, 0) : Math.min(start, len);
    var final = end < 0 ? Math.max(len + end, 0) : Math.min(end, len);
    if (to < from) {
      while (from < final) {
        if (from in this) {
          this[to++] = this[from++];
        } else {
          delete this[to++];
          from++;
        }
      }
    } else {
      final = Math.min(final, len + from - to);
      to += final - from;
      while (final > from) {
        if (--final in this) {
          this[--to] = this[final];
        } else {
          delete this[--to];
        }
      }
    }
    return this;
  };
  function toInteger(arg) {
    var n = Number(arg);
    if (n === Infinity || n === -Infinity) {
      return n;
    }
    return n | 0;
  }
  return polyfill;
}, 'es6', 'es3');
$jscomp.arrayIteratorImpl = function(array) {
  var index = 0;
  return function() {
    if (index < array.length) {
      return {done:false, value:array[index++]};
    } else {
      return {done:true};
    }
  };
};
$jscomp.arrayIterator = function(array) {
  return {next:$jscomp.arrayIteratorImpl(array)};
};
$jscomp.initSymbol = function() {
};
$jscomp.polyfill('Symbol', function(orig) {
  if (orig) {
    return orig;
  }
  var SymbolClass = function(id, opt_description) {
    this.$jscomp$symbol$id_ = id;
    this.description;
    $jscomp.defineProperty(this, 'description', {configurable:true, writable:true, value:opt_description});
  };
  SymbolClass.prototype.toString = function() {
    return this.$jscomp$symbol$id_;
  };
  var BIN_ID = Math.random() * 1000000000 >>> 0;
  var SYMBOL_PREFIX = 'jscomp_symbol_' + BIN_ID + '_';
  var counter = 0;
  var symbolPolyfill = function(opt_description) {
    if (this instanceof symbolPolyfill) {
      throw new TypeError('Symbol is not a constructor');
    }
    return new SymbolClass(SYMBOL_PREFIX + (opt_description || '') + '_' + counter++, opt_description);
  };
  return symbolPolyfill;
}, 'es6', 'es3');
$jscomp.polyfill('Symbol.iterator', function(orig) {
  if (orig) {
    return orig;
  }
  var symbolIterator = Symbol('Symbol.iterator');
  var arrayLikes = ['Array', 'Int8Array', 'Uint8Array', 'Uint8ClampedArray', 'Int16Array', 'Uint16Array', 'Int32Array', 'Uint32Array', 'Float32Array', 'Float64Array'];
  for (var i = 0; i < arrayLikes.length; i++) {
    var ArrayLikeCtor = $jscomp.global[arrayLikes[i]];
    if (typeof ArrayLikeCtor === 'function' && typeof ArrayLikeCtor.prototype[symbolIterator] != 'function') {
      $jscomp.defineProperty(ArrayLikeCtor.prototype, symbolIterator, {configurable:true, writable:true, value:function() {
        return $jscomp.iteratorPrototype($jscomp.arrayIteratorImpl(this));
      }});
    }
  }
  return symbolIterator;
}, 'es6', 'es3');
$jscomp.polyfill('Symbol.asyncIterator', function(orig) {
  if (orig) {
    return orig;
  }
  return Symbol('Symbol.asyncIterator');
}, 'es9', 'es3');
$jscomp.iteratorPrototype = function(next) {
  var iterator = {next:next};
  iterator[Symbol.iterator] = function() {
    return this;
  };
  return iterator;
};
$jscomp.iteratorFromArray = function(array, transform) {
  if (array instanceof String) {
    array = array + '';
  }
  var i = 0;
  var done = false;
  var iter = {next:function() {
    if (!done && i < array.length) {
      var index = i++;
      return {value:transform(index, array[index]), done:false};
    }
    done = true;
    return {done:true, value:void 0};
  }};
  iter[Symbol.iterator] = function() {
    return iter;
  };
  return iter;
};
$jscomp.polyfill('Array.prototype.entries', function(orig) {
  if (orig) {
    return orig;
  }
  var polyfill = function() {
    return $jscomp.iteratorFromArray(this, function(i, v) {
      return [i, v];
    });
  };
  return polyfill;
}, 'es6', 'es3');
$jscomp.polyfill('Array.prototype.fill', function(orig) {
  if (orig) {
    return orig;
  }
  var polyfill = function(value, opt_start, opt_end) {
    var length = this.length || 0;
    if (opt_start < 0) {
      opt_start = Math.max(0, length + opt_start);
    }
    if (opt_end == null || opt_end > length) {
      opt_end = length;
    }
    opt_end = Number(opt_end);
    if (opt_end < 0) {
      opt_end = Math.max(0, length + opt_end);
    }
    for (var i = Number(opt_start || 0); i < opt_end; i++) {
      this[i] = value;
    }
    return this;
  };
  return polyfill;
}, 'es6', 'es3');
$jscomp.findInternal = function(array, callback, thisArg) {
  if (array instanceof String) {
    array = String(array);
  }
  var len = array.length;
  for (var i = 0; i < len; i++) {
    var value = array[i];
    if (callback.call(thisArg, value, i, array)) {
      return {i:i, v:value};
    }
  }
  return {i:-1, v:void 0};
};
$jscomp.polyfill('Array.prototype.find', function(orig) {
  if (orig) {
    return orig;
  }
  var polyfill = function(callback, opt_thisArg) {
    return $jscomp.findInternal(this, callback, opt_thisArg).v;
  };
  return polyfill;
}, 'es6', 'es3');
$jscomp.polyfill('Array.prototype.findIndex', function(orig) {
  if (orig) {
    return orig;
  }
  var polyfill = function(callback, opt_thisArg) {
    return $jscomp.findInternal(this, callback, opt_thisArg).i;
  };
  return polyfill;
}, 'es6', 'es3');
$jscomp.polyfill('Array.prototype.flat', function(orig) {
  if (orig) {
    return orig;
  }
  var flat = function(depth) {
    depth = depth === undefined ? 1 : depth;
    var flattened = [];
    for (var i = 0; i < this.length; i++) {
      var element = this[i];
      if (Array.isArray(element) && depth > 0) {
        var inner = Array.prototype.flat.call(element, depth - 1);
        flattened.push.apply(flattened, inner);
      } else {
        flattened.push(element);
      }
    }
    return flattened;
  };
  return flat;
}, 'es9', 'es5');
$jscomp.polyfill('Array.prototype.flatMap', function(orig) {
  if (orig) {
    return orig;
  }
  var flatMap = function(callback, thisArg) {
    var mapped = [];
    for (var i = 0; i < this.length; i++) {
      var result = callback.call(thisArg, this[i], i, this);
      if (Array.isArray(result)) {
        mapped.push.apply(mapped, result);
      } else {
        mapped.push(result);
      }
    }
    return mapped;
  };
  return flatMap;
}, 'es9', 'es5');
$jscomp.polyfill('Array.from', function(orig) {
  if (orig) {
    return orig;
  }
  var polyfill = function(arrayLike, opt_mapFn, opt_thisArg) {
    opt_mapFn = opt_mapFn != null ? opt_mapFn : function(x) {
      return x;
    };
    var result = [];
    var iteratorFunction = typeof Symbol != 'undefined' && Symbol.iterator && arrayLike[Symbol.iterator];
    if (typeof iteratorFunction == 'function') {
      arrayLike = iteratorFunction.call(arrayLike);
      var next;
      var k = 0;
      while (!(next = arrayLike.next()).done) {
        result.push(opt_mapFn.call(opt_thisArg, next.value, k++));
      }
    } else {
      var len = arrayLike.length;
      for (var i = 0; i < len; i++) {
        result.push(opt_mapFn.call(opt_thisArg, arrayLike[i], i));
      }
    }
    return result;
  };
  return polyfill;
}, 'es6', 'es3');
$jscomp.polyfill('Object.is', function(orig) {
  if (orig) {
    return orig;
  }
  var polyfill = function(left, right) {
    if (left === right) {
      return left !== 0 || 1 / left === 1 / right;
    } else {
      return left !== left && right !== right;
    }
  };
  return polyfill;
}, 'es6', 'es3');
$jscomp.polyfill('Array.prototype.includes', function(orig) {
  if (orig) {
    return orig;
  }
  var includes = function(searchElement, opt_fromIndex) {
    var array = this;
    if (array instanceof String) {
      array = String(array);
    }
    var len = array.length;
    var i = opt_fromIndex || 0;
    if (i < 0) {
      i = Math.max(i + len, 0);
    }
    for (; i < len; i++) {
      var element = array[i];
      if (element === searchElement || Object.is(element, searchElement)) {
        return true;
      }
    }
    return false;
  };
  return includes;
}, 'es7', 'es3');
$jscomp.polyfill('Array.prototype.keys', function(orig) {
  if (orig) {
    return orig;
  }
  var polyfill = function() {
    return $jscomp.iteratorFromArray(this, function(i) {
      return i;
    });
  };
  return polyfill;
}, 'es6', 'es3');
$jscomp.polyfill('Array.of', function(orig) {
  if (orig) {
    return orig;
  }
  var polyfill = function(var_args) {
    return Array.from(arguments);
  };
  return polyfill;
}, 'es6', 'es3');
$jscomp.polyfill('Array.prototype.values', function(orig) {
  if (orig) {
    return orig;
  }
  var polyfill = function() {
    return $jscomp.iteratorFromArray(this, function(k, v) {
      return v;
    });
  };
  return polyfill;
}, 'es8', 'es3');
$jscomp.makeIterator = function(iterable) {
  var iteratorFunction = typeof Symbol != 'undefined' && Symbol.iterator && iterable[Symbol.iterator];
  return iteratorFunction ? iteratorFunction.call(iterable) : $jscomp.arrayIterator(iterable);
};
$jscomp.makeAsyncIterator = function(iterable) {
  var asyncIteratorFunction = iterable[Symbol.asyncIterator];
  if (asyncIteratorFunction !== undefined) {
    return asyncIteratorFunction.call(iterable);
  }
  return new $jscomp.AsyncIteratorFromSyncWrapper($jscomp.makeIterator(iterable));
};
$jscomp.AsyncIteratorFromSyncWrapper = function(iterator) {
  this[Symbol.asyncIterator] = function() {
    return this;
  };
  this[Symbol.iterator] = function() {
    return iterator;
  };
  this.next = function(param) {
    return Promise.resolve(iterator.next(param));
  };
  if (iterator['throw'] !== undefined) {
    this['throw'] = function(param) {
      return Promise.resolve(iterator['throw'](param));
    };
  }
  if (iterator['return'] !== undefined) {
    this['return'] = function(param) {
      return Promise.resolve(iterator['return'](param));
    };
  }
};
$jscomp.AsyncGeneratorWrapper$ActionEnum = {YIELD_VALUE:0, YIELD_STAR:1, AWAIT_VALUE:2};
$jscomp.AsyncGeneratorWrapper$ActionRecord = function(action, value) {
  this.action = action;
  this.value = value;
};
$jscomp.AsyncGeneratorWrapper$GeneratorMethod = {NEXT:'next', THROW:'throw', RETURN:'return'};
$jscomp.AsyncGeneratorWrapper$ExecutionFrame_ = function(method, param, resolve, reject) {
  this.method = method;
  this.param = param;
  this.resolve = resolve;
  this.reject = reject;
};
$jscomp.AsyncGeneratorWrapper$ExecutionNode_ = function(frame, next) {
  this.frame = frame;
  this.next = next;
};
$jscomp.AsyncGeneratorWrapper$ExecutionQueue_ = function() {
  this.head_ = null;
  this.tail_ = null;
};
$jscomp.AsyncGeneratorWrapper$ExecutionQueue_.prototype.isEmpty = function() {
  return this.head_ === null;
};
$jscomp.AsyncGeneratorWrapper$ExecutionQueue_.prototype.first = function() {
  if (this.head_) {
    return this.head_.frame;
  } else {
    throw new Error('no frames in executionQueue');
  }
};
$jscomp.AsyncGeneratorWrapper$ExecutionQueue_.prototype.drop = function() {
  if (this.head_) {
    this.head_ = this.head_.next;
    if (!this.head_) {
      this.tail_ = null;
    }
  }
};
$jscomp.AsyncGeneratorWrapper$ExecutionQueue_.prototype.enqueue = function(newFrame) {
  var node = new $jscomp.AsyncGeneratorWrapper$ExecutionNode_(newFrame, null);
  if (this.tail_) {
    this.tail_.next = node;
    this.tail_ = node;
  } else {
    this.head_ = node;
    this.tail_ = node;
  }
};
$jscomp.AsyncGeneratorWrapper = function(generator) {
  this.generator_ = generator;
  this.delegate_ = null;
  this.executionQueue_ = new $jscomp.AsyncGeneratorWrapper$ExecutionQueue_();
  this[Symbol.asyncIterator] = function() {
    return this;
  };
  var self = this;
  this.boundHandleDelegateResult_ = function(record) {
    self.handleDelegateResult_(record);
  };
  this.boundHandleDelegateError_ = function(thrownError) {
    self.handleDelegateError_(thrownError);
  };
  this.boundRejectAndClose_ = function(err) {
    self.rejectAndClose_(err);
  };
};
$jscomp.AsyncGeneratorWrapper.prototype.enqueueMethod_ = function(method, param) {
  var self = this;
  return new Promise(function(resolve, reject) {
    var wasEmpty = self.executionQueue_.isEmpty();
    self.executionQueue_.enqueue(new $jscomp.AsyncGeneratorWrapper$ExecutionFrame_(method, param, resolve, reject));
    if (wasEmpty) {
      self.runFrame_();
    }
  });
};
$jscomp.AsyncGeneratorWrapper.prototype.next = function(opt_value) {
  return this.enqueueMethod_($jscomp.AsyncGeneratorWrapper$GeneratorMethod.NEXT, opt_value);
};
$jscomp.AsyncGeneratorWrapper.prototype['return'] = function(value) {
  return this.enqueueMethod_($jscomp.AsyncGeneratorWrapper$GeneratorMethod.RETURN, new $jscomp.AsyncGeneratorWrapper$ActionRecord($jscomp.AsyncGeneratorWrapper$ActionEnum.YIELD_VALUE, value));
};
$jscomp.AsyncGeneratorWrapper.prototype['throw'] = function(exception) {
  return this.enqueueMethod_($jscomp.AsyncGeneratorWrapper$GeneratorMethod.THROW, exception);
};
$jscomp.AsyncGeneratorWrapper.prototype.runFrame_ = function() {
  if (!this.executionQueue_.isEmpty()) {
    try {
      if (this.delegate_) {
        this.runDelegateFrame_();
      } else {
        this.runGeneratorFrame_();
      }
    } catch (err) {
      this.rejectAndClose_(err);
    }
  }
};
$jscomp.AsyncGeneratorWrapper.prototype.runGeneratorFrame_ = function() {
  var self = this;
  var frame = this.executionQueue_.first();
  try {
    var genRec = this.generator_[frame.method](frame.param);
    if (genRec.value instanceof $jscomp.AsyncGeneratorWrapper$ActionRecord) {
      switch(genRec.value.action) {
        case $jscomp.AsyncGeneratorWrapper$ActionEnum.YIELD_VALUE:
          Promise.resolve(genRec.value.value).then(function(resolvedValue) {
            frame.resolve({value:resolvedValue, done:genRec.done});
            self.executionQueue_.drop();
            self.runFrame_();
          }, function(e) {
            frame.reject(e);
            self.executionQueue_.drop();
            self.runFrame_();
          })['catch'](this.boundRejectAndClose_);
          return;
        case $jscomp.AsyncGeneratorWrapper$ActionEnum.YIELD_STAR:
          self.delegate_ = $jscomp.makeAsyncIterator(genRec.value.value);
          frame.method = $jscomp.AsyncGeneratorWrapper$GeneratorMethod.NEXT;
          frame.param = undefined;
          self.runFrame_();
          return;
        case $jscomp.AsyncGeneratorWrapper$ActionEnum.AWAIT_VALUE:
          Promise.resolve(genRec.value.value).then(function(resolvedValue) {
            frame.method = $jscomp.AsyncGeneratorWrapper$GeneratorMethod.NEXT;
            frame.param = resolvedValue;
            self.runFrame_();
          }, function(thrownErr) {
            frame.method = $jscomp.AsyncGeneratorWrapper$GeneratorMethod.THROW;
            frame.param = thrownErr;
            self.runFrame_();
          })['catch'](this.boundRejectAndClose_);
          return;
        default:
          throw new Error('Unrecognized AsyncGeneratorWrapper$ActionEnum');
      }
    } else {
      frame.resolve(genRec);
      self.executionQueue_.drop();
      self.runFrame_();
    }
  } catch (e) {
    frame.reject(e);
    self.executionQueue_.drop();
    self.runFrame_();
  }
};
$jscomp.AsyncGeneratorWrapper.prototype.runDelegateFrame_ = function() {
  if (!this.delegate_) {
    throw new Error('no delegate to perform execution');
  }
  var frame = this.executionQueue_.first();
  if (frame.method in this.delegate_) {
    try {
      this.delegate_[frame.method](frame.param).then(this.boundHandleDelegateResult_, this.boundHandleDelegateError_)['catch'](this.boundRejectAndClose_);
    } catch (err) {
      this.handleDelegateError_(err);
    }
  } else {
    this.delegate_ = null;
    this.runFrame_();
  }
};
$jscomp.AsyncGeneratorWrapper.prototype.handleDelegateResult_ = function(record) {
  var frame = this.executionQueue_.first();
  if (record.done === true) {
    this.delegate_ = null;
    frame.method = $jscomp.AsyncGeneratorWrapper$GeneratorMethod.NEXT;
    frame.param = record.value;
    this.runFrame_();
  } else {
    frame.resolve({value:record.value, done:false});
    this.executionQueue_.drop();
    this.runFrame_();
  }
};
$jscomp.AsyncGeneratorWrapper.prototype.handleDelegateError_ = function(thrownError) {
  var frame = this.executionQueue_.first();
  this.delegate_ = null;
  frame.method = $jscomp.AsyncGeneratorWrapper$GeneratorMethod.THROW;
  frame.param = thrownError;
  this.runFrame_();
};
$jscomp.AsyncGeneratorWrapper.prototype.rejectAndClose_ = function(err) {
  if (!this.executionQueue_.isEmpty()) {
    this.executionQueue_.first().reject(err);
    this.executionQueue_.drop();
  }
  if (this.delegate_ && 'return' in this.delegate_) {
    this.delegate_['return'](undefined);
    this.delegate_ = null;
  }
  this.generator_['return'](undefined);
  this.runFrame_();
};
$jscomp.underscoreProtoCanBeSet = function() {
  var x = {a:true};
  var y = {};
  try {
    y.__proto__ = x;
    return y.a;
  } catch (e) {
  }
  return false;
};
$jscomp.setPrototypeOf = $jscomp.TRUST_ES6_POLYFILLS && typeof Object.setPrototypeOf == 'function' ? Object.setPrototypeOf : $jscomp.underscoreProtoCanBeSet() ? function(target, proto) {
  target.__proto__ = proto;
  if (target.__proto__ !== proto) {
    throw new TypeError(target + ' is not extensible');
  }
  return target;
} : null;
$jscomp.generator = {};
$jscomp.generator.ensureIteratorResultIsObject_ = function(result) {
  if (result instanceof Object) {
    return;
  }
  throw new TypeError('Iterator result ' + result + ' is not an object');
};
$jscomp.generator.Context = function() {
  this.isRunning_ = false;
  this.yieldAllIterator_ = null;
  this.yieldResult = undefined;
  this.nextAddress = 1;
  this.catchAddress_ = 0;
  this.finallyAddress_ = 0;
  this.abruptCompletion_ = null;
  this.finallyContexts_ = null;
};
$jscomp.generator.Context.prototype.start_ = function() {
  if (this.isRunning_) {
    throw new TypeError('Generator is already running');
  }
  this.isRunning_ = true;
};
$jscomp.generator.Context.prototype.stop_ = function() {
  this.isRunning_ = false;
};
$jscomp.generator.Context.prototype.jumpToErrorHandler_ = function() {
  this.nextAddress = this.catchAddress_ || this.finallyAddress_;
};
$jscomp.generator.Context.prototype.next_ = function(value) {
  this.yieldResult = value;
};
$jscomp.generator.Context.prototype.throw_ = function(e) {
  this.abruptCompletion_ = {exception:e, isException:true};
  this.jumpToErrorHandler_();
};
$jscomp.generator.Context.prototype['return'] = function(value) {
  this.abruptCompletion_ = {'return':value};
  this.nextAddress = this.finallyAddress_;
};
$jscomp.generator.Context.prototype.jumpThroughFinallyBlocks = function(nextAddress) {
  this.abruptCompletion_ = {jumpTo:nextAddress};
  this.nextAddress = this.finallyAddress_;
};
$jscomp.generator.Context.prototype.yield = function(value, resumeAddress) {
  this.nextAddress = resumeAddress;
  return {value:value};
};
$jscomp.generator.Context.prototype.yieldAll = function(iterable, resumeAddress) {
  var iterator = $jscomp.makeIterator(iterable);
  var result = iterator.next();
  $jscomp.generator.ensureIteratorResultIsObject_(result);
  if (result.done) {
    this.yieldResult = result.value;
    this.nextAddress = resumeAddress;
    return;
  }
  this.yieldAllIterator_ = iterator;
  return this.yield(result.value, resumeAddress);
};
$jscomp.generator.Context.prototype.jumpTo = function(nextAddress) {
  this.nextAddress = nextAddress;
};
$jscomp.generator.Context.prototype.jumpToEnd = function() {
  this.nextAddress = 0;
};
$jscomp.generator.Context.prototype.setCatchFinallyBlocks = function(catchAddress, finallyAddress) {
  this.catchAddress_ = catchAddress;
  if (finallyAddress != undefined) {
    this.finallyAddress_ = finallyAddress;
  }
};
$jscomp.generator.Context.prototype.setFinallyBlock = function(finallyAddress) {
  this.catchAddress_ = 0;
  this.finallyAddress_ = finallyAddress || 0;
};
$jscomp.generator.Context.prototype.leaveTryBlock = function(nextAddress, catchAddress) {
  this.nextAddress = nextAddress;
  this.catchAddress_ = catchAddress || 0;
};
$jscomp.generator.Context.prototype.enterCatchBlock = function(nextCatchBlockAddress) {
  this.catchAddress_ = nextCatchBlockAddress || 0;
  var exception = this.abruptCompletion_.exception;
  this.abruptCompletion_ = null;
  return exception;
};
$jscomp.generator.Context.prototype.enterFinallyBlock = function(nextCatchAddress, nextFinallyAddress, finallyDepth) {
  if (!finallyDepth) {
    this.finallyContexts_ = [this.abruptCompletion_];
  } else {
    this.finallyContexts_[finallyDepth] = this.abruptCompletion_;
  }
  this.catchAddress_ = nextCatchAddress || 0;
  this.finallyAddress_ = nextFinallyAddress || 0;
};
$jscomp.generator.Context.prototype.leaveFinallyBlock = function(nextAddress, finallyDepth) {
  var preservedContext = this.finallyContexts_.splice(finallyDepth || 0)[0];
  var abruptCompletion = this.abruptCompletion_ = this.abruptCompletion_ || preservedContext;
  if (abruptCompletion) {
    if (abruptCompletion.isException) {
      return this.jumpToErrorHandler_();
    }
    if (abruptCompletion.jumpTo != undefined && this.finallyAddress_ < abruptCompletion.jumpTo) {
      this.nextAddress = abruptCompletion.jumpTo;
      this.abruptCompletion_ = null;
    } else {
      this.nextAddress = this.finallyAddress_;
    }
  } else {
    this.nextAddress = nextAddress;
  }
};
$jscomp.generator.Context.prototype.forIn = function(object) {
  return new $jscomp.generator.Context.PropertyIterator(object);
};
$jscomp.generator.Context.PropertyIterator = function(object) {
  this.object_ = object;
  this.properties_ = [];
  for (var property in object) {
    this.properties_.push(property);
  }
  this.properties_.reverse();
};
$jscomp.generator.Context.PropertyIterator.prototype.getNext = function() {
  while (this.properties_.length > 0) {
    var property = this.properties_.pop();
    if (property in this.object_) {
      return property;
    }
  }
  return null;
};
$jscomp.generator.Engine_ = function(program) {
  this.context_ = new $jscomp.generator.Context();
  this.program_ = program;
};
$jscomp.generator.Engine_.prototype.next_ = function(value) {
  this.context_.start_();
  if (this.context_.yieldAllIterator_) {
    return this.yieldAllStep_(this.context_.yieldAllIterator_.next, value, this.context_.next_);
  }
  this.context_.next_(value);
  return this.nextStep_();
};
$jscomp.generator.Engine_.prototype.return_ = function(value) {
  this.context_.start_();
  var yieldAllIterator = this.context_.yieldAllIterator_;
  if (yieldAllIterator) {
    var returnFunction = 'return' in yieldAllIterator ? yieldAllIterator['return'] : function(v) {
      return {value:v, done:true};
    };
    return this.yieldAllStep_(returnFunction, value, this.context_['return']);
  }
  this.context_['return'](value);
  return this.nextStep_();
};
$jscomp.generator.Engine_.prototype.throw_ = function(exception) {
  this.context_.start_();
  if (this.context_.yieldAllIterator_) {
    return this.yieldAllStep_(this.context_.yieldAllIterator_['throw'], exception, this.context_.next_);
  }
  this.context_.throw_(exception);
  return this.nextStep_();
};
$jscomp.generator.Engine_.prototype.yieldAllStep_ = function(action, value, nextAction) {
  try {
    var result = action.call(this.context_.yieldAllIterator_, value);
    $jscomp.generator.ensureIteratorResultIsObject_(result);
    if (!result.done) {
      this.context_.stop_();
      return result;
    }
    var resultValue = result.value;
  } catch (e) {
    this.context_.yieldAllIterator_ = null;
    this.context_.throw_(e);
    return this.nextStep_();
  }
  this.context_.yieldAllIterator_ = null;
  nextAction.call(this.context_, resultValue);
  return this.nextStep_();
};
$jscomp.generator.Engine_.prototype.nextStep_ = function() {
  while (this.context_.nextAddress) {
    try {
      var yieldValue = this.program_(this.context_);
      if (yieldValue) {
        this.context_.stop_();
        return {value:yieldValue.value, done:false};
      }
    } catch (e) {
      this.context_.yieldResult = undefined;
      this.context_.throw_(e);
    }
  }
  this.context_.stop_();
  if (this.context_.abruptCompletion_) {
    var abruptCompletion = this.context_.abruptCompletion_;
    this.context_.abruptCompletion_ = null;
    if (abruptCompletion.isException) {
      throw abruptCompletion.exception;
    }
    return {value:abruptCompletion['return'], done:true};
  }
  return {value:undefined, done:true};
};
$jscomp.generator.Generator_ = function(engine) {
  this.next = function(opt_value) {
    return engine.next_(opt_value);
  };
  this['throw'] = function(exception) {
    return engine.throw_(exception);
  };
  this['return'] = function(value) {
    return engine.return_(value);
  };
  this[Symbol.iterator] = function() {
    return this;
  };
};
$jscomp.generator.createGenerator = function(generator, program) {
  var result = new $jscomp.generator.Generator_(new $jscomp.generator.Engine_(program));
  if ($jscomp.setPrototypeOf && generator.prototype) {
    $jscomp.setPrototypeOf(result, generator.prototype);
  }
  return result;
};
$jscomp.asyncExecutePromiseGenerator = function(generator) {
  function passValueToGenerator(value) {
    return generator.next(value);
  }
  function passErrorToGenerator(error) {
    return generator['throw'](error);
  }
  return new Promise(function(resolve, reject) {
    function handleGeneratorRecord(genRec) {
      if (genRec.done) {
        resolve(genRec.value);
      } else {
        Promise.resolve(genRec.value).then(passValueToGenerator, passErrorToGenerator).then(handleGeneratorRecord, reject);
      }
    }
    handleGeneratorRecord(generator.next());
  });
};
$jscomp.asyncExecutePromiseGeneratorFunction = function(generatorFunction) {
  return $jscomp.asyncExecutePromiseGenerator(generatorFunction());
};
$jscomp.asyncExecutePromiseGeneratorProgram = function(program) {
  return $jscomp.asyncExecutePromiseGenerator(new $jscomp.generator.Generator_(new $jscomp.generator.Engine_(program)));
};
$jscomp.polyfill('globalThis', function(orig) {
  return orig || $jscomp.global;
}, 'es_2020', 'es3');
$jscomp.checkEs6ConformanceViaProxy = function() {
  try {
    var proxied = {};
    var proxy = Object.create(new $jscomp.global['Proxy'](proxied, {'get':function(target, key, receiver) {
      return target == proxied && key == 'q' && receiver == proxy;
    }}));
    return proxy['q'] === true;
  } catch (err) {
    return false;
  }
};
$jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS = false;
$jscomp.ES6_CONFORMANCE = $jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS && $jscomp.checkEs6ConformanceViaProxy();
$jscomp.owns = function(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
};
$jscomp.polyfill('WeakMap', function(NativeWeakMap) {
  function isConformant() {
    if (!NativeWeakMap || !Object.seal) {
      return false;
    }
    try {
      var x = Object.seal({});
      var y = Object.seal({});
      var map = new NativeWeakMap([[x, 2], [y, 3]]);
      if (map.get(x) != 2 || map.get(y) != 3) {
        return false;
      }
      map['delete'](x);
      map.set(y, 4);
      return !map.has(x) && map.get(y) == 4;
    } catch (err) {
      return false;
    }
  }
  if ($jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS) {
    if (NativeWeakMap && $jscomp.ES6_CONFORMANCE) {
      return NativeWeakMap;
    }
  } else {
    if (isConformant()) {
      return NativeWeakMap;
    }
  }
  var prop = '$jscomp_hidden_' + Math.random();
  function WeakMapMembership() {
  }
  function isValidKey(key) {
    var type = typeof key;
    return type === 'object' && key !== null || type === 'function';
  }
  function insert(target) {
    if (!$jscomp.owns(target, prop)) {
      var obj = new WeakMapMembership();
      $jscomp.defineProperty(target, prop, {value:obj});
    }
  }
  function patch(name) {
    if ($jscomp.ISOLATE_POLYFILLS) {
      return;
    }
    var prev = Object[name];
    if (prev) {
      Object[name] = function(target) {
        if (target instanceof WeakMapMembership) {
          return target;
        } else {
          if (Object.isExtensible(target)) {
            insert(target);
          }
          return prev(target);
        }
      };
    }
  }
  patch('freeze');
  patch('preventExtensions');
  patch('seal');
  var index = 0;
  var PolyfillWeakMap = function(opt_iterable) {
    this.id_ = (index += Math.random() + 1).toString();
    if (opt_iterable) {
      var iter = $jscomp.makeIterator(opt_iterable);
      var entry;
      while (!(entry = iter.next()).done) {
        var item = entry.value;
        this.set(item[0], item[1]);
      }
    }
  };
  PolyfillWeakMap.prototype.set = function(key, value) {
    if (!isValidKey(key)) {
      throw new Error('Invalid WeakMap key');
    }
    insert(key);
    if (!$jscomp.owns(key, prop)) {
      throw new Error('WeakMap key fail: ' + key);
    }
    key[prop][this.id_] = value;
    return this;
  };
  PolyfillWeakMap.prototype.get = function(key) {
    return isValidKey(key) && $jscomp.owns(key, prop) ? key[prop][this.id_] : undefined;
  };
  PolyfillWeakMap.prototype.has = function(key) {
    return isValidKey(key) && $jscomp.owns(key, prop) && $jscomp.owns(key[prop], this.id_);
  };
  PolyfillWeakMap.prototype['delete'] = function(key) {
    if (!isValidKey(key) || !$jscomp.owns(key, prop) || !$jscomp.owns(key[prop], this.id_)) {
      return false;
    }
    return delete key[prop][this.id_];
  };
  return PolyfillWeakMap;
}, 'es6', 'es3');
$jscomp.MapEntry = function() {
  this.previous;
  this.next;
  this.head;
  this.key;
  this.value;
};
$jscomp.polyfill('Map', function(NativeMap) {
  function isConformant() {
    if ($jscomp.ASSUME_NO_NATIVE_MAP || !NativeMap || typeof NativeMap != 'function' || !NativeMap.prototype.entries || typeof Object.seal != 'function') {
      return false;
    }
    try {
      NativeMap = NativeMap;
      var key = Object.seal({x:4});
      var map = new NativeMap($jscomp.makeIterator([[key, 's']]));
      if (map.get(key) != 's' || map.size != 1 || map.get({x:4}) || map.set({x:4}, 't') != map || map.size != 2) {
        return false;
      }
      var iter = map.entries();
      var item = iter.next();
      if (item.done || item.value[0] != key || item.value[1] != 's') {
        return false;
      }
      item = iter.next();
      if (item.done || item.value[0].x != 4 || item.value[1] != 't' || !iter.next().done) {
        return false;
      }
      return true;
    } catch (err) {
      return false;
    }
  }
  if ($jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS) {
    if (NativeMap && $jscomp.ES6_CONFORMANCE) {
      return NativeMap;
    }
  } else {
    if (isConformant()) {
      return NativeMap;
    }
  }
  var idMap = new WeakMap();
  var PolyfillMap = function(opt_iterable) {
    this.data_ = {};
    this.head_ = createHead();
    this.size = 0;
    if (opt_iterable) {
      var iter = $jscomp.makeIterator(opt_iterable);
      var entry;
      while (!(entry = iter.next()).done) {
        var item = entry.value;
        this.set(item[0], item[1]);
      }
    }
  };
  PolyfillMap.prototype.set = function(key, value) {
    key = key === 0 ? 0 : key;
    var r = maybeGetEntry(this, key);
    if (!r.list) {
      r.list = this.data_[r.id] = [];
    }
    if (!r.entry) {
      r.entry = {next:this.head_, previous:this.head_.previous, head:this.head_, key:key, value:value};
      r.list.push(r.entry);
      this.head_.previous.next = r.entry;
      this.head_.previous = r.entry;
      this.size++;
    } else {
      r.entry.value = value;
    }
    return this;
  };
  PolyfillMap.prototype['delete'] = function(key) {
    var r = maybeGetEntry(this, key);
    if (r.entry && r.list) {
      r.list.splice(r.index, 1);
      if (!r.list.length) {
        delete this.data_[r.id];
      }
      r.entry.previous.next = r.entry.next;
      r.entry.next.previous = r.entry.previous;
      r.entry.head = null;
      this.size--;
      return true;
    }
    return false;
  };
  PolyfillMap.prototype.clear = function() {
    this.data_ = {};
    this.head_ = this.head_.previous = createHead();
    this.size = 0;
  };
  PolyfillMap.prototype.has = function(key) {
    return !!maybeGetEntry(this, key).entry;
  };
  PolyfillMap.prototype.get = function(key) {
    var entry = maybeGetEntry(this, key).entry;
    return entry && entry.value;
  };
  PolyfillMap.prototype.entries = function() {
    return makeIterator(this, function(entry) {
      return [entry.key, entry.value];
    });
  };
  PolyfillMap.prototype.keys = function() {
    return makeIterator(this, function(entry) {
      return entry.key;
    });
  };
  PolyfillMap.prototype.values = function() {
    return makeIterator(this, function(entry) {
      return entry.value;
    });
  };
  PolyfillMap.prototype.forEach = function(callback, opt_thisArg) {
    var iter = this.entries();
    var item;
    while (!(item = iter.next()).done) {
      var entry = item.value;
      callback.call(opt_thisArg, entry[1], entry[0], this);
    }
  };
  PolyfillMap.prototype[Symbol.iterator] = PolyfillMap.prototype.entries;
  var maybeGetEntry = function(map, key) {
    var id = getId(key);
    var list = map.data_[id];
    if (list && $jscomp.owns(map.data_, id)) {
      for (var index = 0; index < list.length; index++) {
        var entry = list[index];
        if (key !== key && entry.key !== entry.key || key === entry.key) {
          return {id:id, list:list, index:index, entry:entry};
        }
      }
    }
    return {id:id, list:list, index:-1, entry:undefined};
  };
  var makeIterator = function(map, func) {
    var entry = map.head_;
    return $jscomp.iteratorPrototype(function() {
      if (entry) {
        while (entry.head != map.head_) {
          entry = entry.previous;
        }
        while (entry.next != entry.head) {
          entry = entry.next;
          return {done:false, value:func(entry)};
        }
        entry = null;
      }
      return {done:true, value:void 0};
    });
  };
  var createHead = function() {
    var head = {};
    head.previous = head.next = head.head = head;
    return head;
  };
  var mapIndex = 0;
  var getId = function(obj) {
    var type = obj && typeof obj;
    if (type == 'object' || type == 'function') {
      obj = obj;
      if (!idMap.has(obj)) {
        var id = '' + ++mapIndex;
        idMap.set(obj, id);
        return id;
      }
      return idMap.get(obj);
    }
    return 'p_' + obj;
  };
  return PolyfillMap;
}, 'es6', 'es3');
$jscomp.polyfill('Math.acosh', function(orig) {
  if (orig) {
    return orig;
  }
  var polyfill = function(x) {
    x = Number(x);
    return Math.log(x + Math.sqrt(x * x - 1));
  };
  return polyfill;
}, 'es6', 'es3');
$jscomp.polyfill('Math.asinh', function(orig) {
  if (orig) {
    return orig;
  }
  var polyfill = function(x) {
    x = Number(x);
    if (x === 0) {
      return x;
    }
    var y = Math.log(Math.abs(x) + Math.sqrt(x * x + 1));
    return x < 0 ? -y : y;
  };
  return polyfill;
}, 'es6', 'es3');
$jscomp.polyfill('Math.log1p', function(orig) {
  if (orig) {
    return orig;
  }
  var polyfill = function(x) {
    x = Number(x);
    if (x < 0.25 && x > -0.25) {
      var y = x;
      var d = 1;
      var z = x;
      var zPrev = 0;
      var s = 1;
      while (zPrev != z) {
        y *= x;
        s *= -1;
        z = (zPrev = z) + s * y / ++d;
      }
      return z;
    }
    return Math.log(1 + x);
  };
  return polyfill;
}, 'es6', 'es3');
$jscomp.polyfill('Math.atanh', function(orig) {
  if (orig) {
    return orig;
  }
  var log1p = Math.log1p;
  var polyfill = function(x) {
    x = Number(x);
    return (log1p(x) - log1p(-x)) / 2;
  };
  return polyfill;
}, 'es6', 'es3');
$jscomp.polyfill('Math.cbrt', function(orig) {
  if (orig) {
    return orig;
  }
  var polyfill = function(x) {
    if (x === 0) {
      return x;
    }
    x = Number(x);
    var y = Math.pow(Math.abs(x), 1 / 3);
    return x < 0 ? -y : y;
  };
  return polyfill;
}, 'es6', 'es3');
$jscomp.polyfill('Math.clz32', function(orig) {
  if (orig) {
    return orig;
  }
  var polyfill = function(x) {
    x = Number(x) >>> 0;
    if (x === 0) {
      return 32;
    }
    var result = 0;
    if ((x & 4.29490176E9) === 0) {
      x <<= 16;
      result += 16;
    }
    if ((x & 4.27819008E9) === 0) {
      x <<= 8;
      result += 8;
    }
    if ((x & 4.02653184E9) === 0) {
      x <<= 4;
      result += 4;
    }
    if ((x & 3.221225472E9) === 0) {
      x <<= 2;
      result += 2;
    }
    if ((x & 2.147483648E9) === 0) {
      result++;
    }
    return result;
  };
  return polyfill;
}, 'es6', 'es3');
$jscomp.polyfill('Math.cosh', function(orig) {
  if (orig) {
    return orig;
  }
  var exp = Math.exp;
  var polyfill = function(x) {
    x = Number(x);
    return (exp(x) + exp(-x)) / 2;
  };
  return polyfill;
}, 'es6', 'es3');
$jscomp.polyfill('Math.expm1', function(orig) {
  if (orig) {
    return orig;
  }
  var polyfill = function(x) {
    x = Number(x);
    if (x < 0.25 && x > -0.25) {
      var y = x;
      var d = 1;
      var z = x;
      var zPrev = 0;
      while (zPrev != z) {
        y *= x / ++d;
        z = (zPrev = z) + y;
      }
      return z;
    }
    return Math.exp(x) - 1;
  };
  return polyfill;
}, 'es6', 'es3');
$jscomp.polyfill('Math.fround', function(orig) {
  if (orig) {
    return orig;
  }
  if ($jscomp.SIMPLE_FROUND_POLYFILL || typeof Float32Array !== 'function') {
    return function(arg) {
      return arg;
    };
  }
  var arr = new Float32Array(1);
  var polyfill = function(arg) {
    arr[0] = arg;
    return arr[0];
  };
  return polyfill;
}, 'es6', 'es3');
$jscomp.polyfill('Math.hypot', function(orig) {
  if (orig) {
    return orig;
  }
  var polyfill = function(var_args) {
    if (arguments.length < 2) {
      return arguments.length ? Math.abs(arguments[0]) : 0;
    }
    var i, z, sum, max;
    for (max = 0, i = 0; i < arguments.length; i++) {
      max = Math.max(max, Math.abs(arguments[i]));
    }
    if (max > 1.0E100 || max < 1.0E-100) {
      if (!max) {
        return max;
      }
      sum = 0;
      for (i = 0; i < arguments.length; i++) {
        z = Number(arguments[i]) / max;
        sum += z * z;
      }
      return Math.sqrt(sum) * max;
    } else {
      sum = 0;
      for (i = 0; i < arguments.length; i++) {
        z = Number(arguments[i]);
        sum += z * z;
      }
      return Math.sqrt(sum);
    }
  };
  return polyfill;
}, 'es6', 'es3');
$jscomp.polyfill('Math.imul', function(orig) {
  if (orig) {
    return orig;
  }
  var polyfill = function(a, b) {
    a = Number(a);
    b = Number(b);
    var ah = a >>> 16 & 65535;
    var al = a & 65535;
    var bh = b >>> 16 & 65535;
    var bl = b & 65535;
    var lh = ah * bl + al * bh << 16 >>> 0;
    return al * bl + lh | 0;
  };
  return polyfill;
}, 'es6', 'es3');
$jscomp.polyfill('Math.log10', function(orig) {
  if (orig) {
    return orig;
  }
  var polyfill = function(x) {
    return Math.log(x) / Math.LN10;
  };
  return polyfill;
}, 'es6', 'es3');
$jscomp.polyfill('Math.log2', function(orig) {
  if (orig) {
    return orig;
  }
  var polyfill = function(x) {
    return Math.log(x) / Math.LN2;
  };
  return polyfill;
}, 'es6', 'es3');
$jscomp.polyfill('Math.sign', function(orig) {
  if (orig) {
    return orig;
  }
  var polyfill = function(x) {
    x = Number(x);
    return x === 0 || isNaN(x) ? x : x > 0 ? 1 : -1;
  };
  return polyfill;
}, 'es6', 'es3');
$jscomp.polyfill('Math.sinh', function(orig) {
  if (orig) {
    return orig;
  }
  var exp = Math.exp;
  var polyfill = function(x) {
    x = Number(x);
    if (x === 0) {
      return x;
    }
    return (exp(x) - exp(-x)) / 2;
  };
  return polyfill;
}, 'es6', 'es3');
$jscomp.polyfill('Math.tanh', function(orig) {
  if (orig) {
    return orig;
  }
  var polyfill = function(x) {
    x = Number(x);
    if (x === 0) {
      return x;
    }
    var y = Math.exp(-2 * Math.abs(x));
    var z = (1 - y) / (1 + y);
    return x < 0 ? -z : z;
  };
  return polyfill;
}, 'es6', 'es3');
$jscomp.polyfill('Math.trunc', function(orig) {
  if (orig) {
    return orig;
  }
  var polyfill = function(x) {
    x = Number(x);
    if (isNaN(x) || x === Infinity || x === -Infinity || x === 0) {
      return x;
    }
    var y = Math.floor(Math.abs(x));
    return x < 0 ? -y : y;
  };
  return polyfill;
}, 'es6', 'es3');
$jscomp.polyfill('Number.EPSILON', function(orig) {
  return Math.pow(2, -52);
}, 'es6', 'es3');
$jscomp.polyfill('Number.MAX_SAFE_INTEGER', function() {
  return 9.007199254740991E15;
}, 'es6', 'es3');
$jscomp.polyfill('Number.MIN_SAFE_INTEGER', function() {
  return -9.007199254740991E15;
}, 'es6', 'es3');
$jscomp.polyfill('Number.isFinite', function(orig) {
  if (orig) {
    return orig;
  }
  var polyfill = function(x) {
    if (typeof x !== 'number') {
      return false;
    }
    return !isNaN(x) && x !== Infinity && x !== -Infinity;
  };
  return polyfill;
}, 'es6', 'es3');
$jscomp.polyfill('Number.isInteger', function(orig) {
  if (orig) {
    return orig;
  }
  var polyfill = function(x) {
    if (!Number.isFinite(x)) {
      return false;
    }
    return x === Math.floor(x);
  };
  return polyfill;
}, 'es6', 'es3');
$jscomp.polyfill('Number.isNaN', function(orig) {
  if (orig) {
    return orig;
  }
  var polyfill = function(x) {
    return typeof x === 'number' && isNaN(x);
  };
  return polyfill;
}, 'es6', 'es3');
$jscomp.polyfill('Number.isSafeInteger', function(orig) {
  if (orig) {
    return orig;
  }
  var polyfill = function(x) {
    return Number.isInteger(x) && Math.abs(x) <= Number.MAX_SAFE_INTEGER;
  };
  return polyfill;
}, 'es6', 'es3');
$jscomp.polyfill('Number.parseFloat', function(orig) {
  return orig || parseFloat;
}, 'es6', 'es3');
$jscomp.polyfill('Number.parseInt', function(orig) {
  return orig || parseInt;
}, 'es6', 'es3');
$jscomp.assign = $jscomp.TRUST_ES6_POLYFILLS && typeof Object.assign == 'function' ? Object.assign : function(target, var_args) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];
    if (!source) {
      continue;
    }
    for (var key in source) {
      if ($jscomp.owns(source, key)) {
        target[key] = source[key];
      }
    }
  }
  return target;
};
$jscomp.polyfill('Object.assign', function(orig) {
  return orig || $jscomp.assign;
}, 'es6', 'es3');
$jscomp.polyfill('Object.entries', function(orig) {
  if (orig) {
    return orig;
  }
  var entries = function(obj) {
    var result = [];
    for (var key in obj) {
      if ($jscomp.owns(obj, key)) {
        result.push([key, obj[key]]);
      }
    }
    return result;
  };
  return entries;
}, 'es8', 'es3');
$jscomp.polyfill('Object.fromEntries', function(orig) {
  if (orig) {
    return orig;
  }
  function fromEntries(iter) {
    var obj = {};
    if (!(Symbol.iterator in iter)) {
      throw new TypeError('' + iter + ' is not iterable');
    }
    var iteratorFn = iter[Symbol.iterator];
    var iterator = iteratorFn.call(iter);
    for (var result = iterator.next(); !result.done; result = iterator.next()) {
      var pair = result.value;
      if (Object(pair) !== pair) {
        throw new TypeError('iterable for fromEntries should yield objects');
      }
      var key = pair[0];
      var val = pair[1];
      obj[key] = val;
    }
    return obj;
  }
  return fromEntries;
}, 'es_2019', 'es3');
$jscomp.polyfill('Reflect', function(orig) {
  if (orig) {
    return orig;
  }
  return {};
}, 'es6', 'es3');
$jscomp.polyfill('Object.getOwnPropertySymbols', function(orig) {
  if (orig) {
    return orig;
  }
  return function() {
    return [];
  };
}, 'es6', 'es5');
$jscomp.polyfill('Reflect.ownKeys', function(orig) {
  if (orig) {
    return orig;
  }
  var symbolPrefix = 'jscomp_symbol_';
  function isSymbol(key) {
    return key.substring(0, symbolPrefix.length) == symbolPrefix;
  }
  var polyfill = function(target) {
    var keys = [];
    var names = Object.getOwnPropertyNames(target);
    var symbols = Object.getOwnPropertySymbols(target);
    for (var i = 0; i < names.length; i++) {
      (isSymbol(names[i]) ? symbols : keys).push(names[i]);
    }
    return keys.concat(symbols);
  };
  return polyfill;
}, 'es6', 'es5');
$jscomp.polyfill('Object.getOwnPropertyDescriptors', function(orig) {
  if (orig) {
    return orig;
  }
  var getOwnPropertyDescriptors = function(obj) {
    var result = {};
    var keys = Reflect.ownKeys(obj);
    for (var i = 0; i < keys.length; i++) {
      result[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
    }
    return result;
  };
  return getOwnPropertyDescriptors;
}, 'es8', 'es5');
$jscomp.polyfill('Object.setPrototypeOf', function(orig) {
  return orig || $jscomp.setPrototypeOf;
}, 'es6', 'es5');
$jscomp.polyfill('Object.values', function(orig) {
  if (orig) {
    return orig;
  }
  var values = function(obj) {
    var result = [];
    for (var key in obj) {
      if ($jscomp.owns(obj, key)) {
        result.push(obj[key]);
      }
    }
    return result;
  };
  return values;
}, 'es8', 'es3');
$jscomp.polyfill('Promise', function(NativePromise) {
  function platformSupportsPromiseRejectionEvents() {
    return typeof $jscomp.global['PromiseRejectionEvent'] !== 'undefined';
  }
  function globalPromiseIsNative() {
    return $jscomp.global['Promise'] && $jscomp.global['Promise'].toString().indexOf('[native code]') !== -1;
  }
  function shouldForcePolyfillPromise() {
    return ($jscomp.FORCE_POLYFILL_PROMISE || $jscomp.FORCE_POLYFILL_PROMISE_WHEN_NO_UNHANDLED_REJECTION && !platformSupportsPromiseRejectionEvents()) && globalPromiseIsNative();
  }
  if (NativePromise && !shouldForcePolyfillPromise()) {
    return NativePromise;
  }
  function AsyncExecutor() {
    this.batch_ = null;
  }
  AsyncExecutor.prototype.asyncExecute = function(f) {
    if (this.batch_ == null) {
      this.batch_ = [];
      var self = this;
      this.asyncExecuteFunction(function() {
        self.executeBatch_();
      });
    }
    this.batch_.push(f);
  };
  var nativeSetTimeout = $jscomp.global['setTimeout'];
  AsyncExecutor.prototype.asyncExecuteFunction = function(f) {
    nativeSetTimeout(f, 0);
  };
  AsyncExecutor.prototype.executeBatch_ = function() {
    while (this.batch_ && this.batch_.length) {
      var executingBatch = this.batch_;
      this.batch_ = [];
      for (var i = 0; i < executingBatch.length; ++i) {
        var f = executingBatch[i];
        executingBatch[i] = null;
        try {
          f();
        } catch (error) {
          this.asyncThrow_(error);
        }
      }
    }
    this.batch_ = null;
  };
  AsyncExecutor.prototype.asyncThrow_ = function(exception) {
    this.asyncExecuteFunction(function() {
      throw exception;
    });
  };
  var PromiseState = {PENDING:0, FULFILLED:1, REJECTED:2};
  var PolyfillPromise = function(executor) {
    this.state_ = PromiseState.PENDING;
    this.result_ = undefined;
    this.onSettledCallbacks_ = [];
    this.isRejectionHandled_ = false;
    var resolveAndReject = this.createResolveAndReject_();
    try {
      executor(resolveAndReject.resolve, resolveAndReject.reject);
    } catch (e) {
      resolveAndReject.reject(e);
    }
  };
  PolyfillPromise.prototype.createResolveAndReject_ = function() {
    var thisPromise = this;
    var alreadyCalled = false;
    function firstCallWins(method) {
      return function(x) {
        if (!alreadyCalled) {
          alreadyCalled = true;
          method.call(thisPromise, x);
        }
      };
    }
    return {resolve:firstCallWins(this.resolveTo_), reject:firstCallWins(this.reject_)};
  };
  PolyfillPromise.prototype.resolveTo_ = function(value) {
    if (value === this) {
      this.reject_(new TypeError('A Promise cannot resolve to itself'));
    } else if (value instanceof PolyfillPromise) {
      this.settleSameAsPromise_(value);
    } else if (isObject(value)) {
      this.resolveToNonPromiseObj_(value);
    } else {
      this.fulfill_(value);
    }
  };
  PolyfillPromise.prototype.resolveToNonPromiseObj_ = function(obj) {
    var thenMethod = undefined;
    try {
      thenMethod = obj.then;
    } catch (error) {
      this.reject_(error);
      return;
    }
    if (typeof thenMethod == 'function') {
      this.settleSameAsThenable_(thenMethod, obj);
    } else {
      this.fulfill_(obj);
    }
  };
  function isObject(value) {
    switch(typeof value) {
      case 'object':
        return value != null;
      case 'function':
        return true;
      default:
        return false;
    }
  }
  PolyfillPromise.prototype.reject_ = function(reason) {
    this.settle_(PromiseState.REJECTED, reason);
  };
  PolyfillPromise.prototype.fulfill_ = function(value) {
    this.settle_(PromiseState.FULFILLED, value);
  };
  PolyfillPromise.prototype.settle_ = function(settledState, valueOrReason) {
    if (this.state_ != PromiseState.PENDING) {
      throw new Error('Cannot settle(' + settledState + ', ' + valueOrReason + '): Promise already settled in state' + this.state_);
    }
    this.state_ = settledState;
    this.result_ = valueOrReason;
    if (this.state_ === PromiseState.REJECTED) {
      this.scheduleUnhandledRejectionCheck_();
    }
    this.executeOnSettledCallbacks_();
  };
  PolyfillPromise.prototype.scheduleUnhandledRejectionCheck_ = function() {
    var self = this;
    nativeSetTimeout(function() {
      if (self.notifyUnhandledRejection_()) {
        var nativeConsole = $jscomp.global['console'];
        if (typeof nativeConsole !== 'undefined') {
          nativeConsole.error(self.result_);
        }
      }
    }, 1);
  };
  PolyfillPromise.prototype.notifyUnhandledRejection_ = function() {
    if (this.isRejectionHandled_) {
      return false;
    }
    var NativeCustomEvent = $jscomp.global['CustomEvent'];
    var NativeEvent = $jscomp.global['Event'];
    var nativeDispatchEvent = $jscomp.global['dispatchEvent'];
    if (typeof nativeDispatchEvent === 'undefined') {
      return true;
    }
    var event;
    if (typeof NativeCustomEvent === 'function') {
      event = new NativeCustomEvent('unhandledrejection', {cancelable:true});
    } else if (typeof NativeEvent === 'function') {
      event = new NativeEvent('unhandledrejection', {cancelable:true});
    } else {
      event = $jscomp.global['document'].createEvent('CustomEvent');
      event.initCustomEvent('unhandledrejection', false, true, event);
    }
    event.promise = this;
    event.reason = this.result_;
    return nativeDispatchEvent(event);
  };
  PolyfillPromise.prototype.executeOnSettledCallbacks_ = function() {
    if (this.onSettledCallbacks_ != null) {
      for (var i = 0; i < this.onSettledCallbacks_.length; ++i) {
        asyncExecutor.asyncExecute(this.onSettledCallbacks_[i]);
      }
      this.onSettledCallbacks_ = null;
    }
  };
  var asyncExecutor = new AsyncExecutor();
  PolyfillPromise.prototype.settleSameAsPromise_ = function(promise) {
    var methods = this.createResolveAndReject_();
    promise.callWhenSettled_(methods.resolve, methods.reject);
  };
  PolyfillPromise.prototype.settleSameAsThenable_ = function(thenMethod, thenable) {
    var methods = this.createResolveAndReject_();
    try {
      thenMethod.call(thenable, methods.resolve, methods.reject);
    } catch (error) {
      methods.reject(error);
    }
  };
  PolyfillPromise.prototype.then = function(onFulfilled, onRejected) {
    var resolveChild;
    var rejectChild;
    var childPromise = new PolyfillPromise(function(resolve, reject) {
      resolveChild = resolve;
      rejectChild = reject;
    });
    function createCallback(paramF, defaultF) {
      if (typeof paramF == 'function') {
        return function(x) {
          try {
            resolveChild(paramF(x));
          } catch (error) {
            rejectChild(error);
          }
        };
      } else {
        return defaultF;
      }
    }
    this.callWhenSettled_(createCallback(onFulfilled, resolveChild), createCallback(onRejected, rejectChild));
    return childPromise;
  };
  PolyfillPromise.prototype['catch'] = function(onRejected) {
    return this.then(undefined, onRejected);
  };
  PolyfillPromise.prototype.callWhenSettled_ = function(onFulfilled, onRejected) {
    var thisPromise = this;
    function callback() {
      switch(thisPromise.state_) {
        case PromiseState.FULFILLED:
          onFulfilled(thisPromise.result_);
          break;
        case PromiseState.REJECTED:
          onRejected(thisPromise.result_);
          break;
        default:
          throw new Error('Unexpected state: ' + thisPromise.state_);
      }
    }
    if (this.onSettledCallbacks_ == null) {
      asyncExecutor.asyncExecute(callback);
    } else {
      this.onSettledCallbacks_.push(callback);
    }
    this.isRejectionHandled_ = true;
  };
  function resolvingPromise(opt_value) {
    if (opt_value instanceof PolyfillPromise) {
      return opt_value;
    } else {
      return new PolyfillPromise(function(resolve, reject) {
        resolve(opt_value);
      });
    }
  }
  PolyfillPromise['resolve'] = resolvingPromise;
  PolyfillPromise['reject'] = function(opt_reason) {
    return new PolyfillPromise(function(resolve, reject) {
      reject(opt_reason);
    });
  };
  PolyfillPromise['race'] = function(thenablesOrValues) {
    return new PolyfillPromise(function(resolve, reject) {
      var iterator = $jscomp.makeIterator(thenablesOrValues);
      for (var iterRec = iterator.next(); !iterRec.done; iterRec = iterator.next()) {
        resolvingPromise(iterRec.value).callWhenSettled_(resolve, reject);
      }
    });
  };
  PolyfillPromise['all'] = function(thenablesOrValues) {
    var iterator = $jscomp.makeIterator(thenablesOrValues);
    var iterRec = iterator.next();
    if (iterRec.done) {
      return resolvingPromise([]);
    } else {
      return new PolyfillPromise(function(resolveAll, rejectAll) {
        var resultsArray = [];
        var unresolvedCount = 0;
        function onFulfilled(i) {
          return function(ithResult) {
            resultsArray[i] = ithResult;
            unresolvedCount--;
            if (unresolvedCount == 0) {
              resolveAll(resultsArray);
            }
          };
        }
        do {
          resultsArray.push(undefined);
          unresolvedCount++;
          resolvingPromise(iterRec.value).callWhenSettled_(onFulfilled(resultsArray.length - 1), rejectAll);
          iterRec = iterator.next();
        } while (!iterRec.done);
      });
    }
  };
  return PolyfillPromise;
}, 'es6', 'es3');
$jscomp.polyfill('Promise.allSettled', function(orig) {
  if (orig) {
    return orig;
  }
  function fulfilledResult(value) {
    return {status:'fulfilled', value:value};
  }
  function rejectedResult(reason) {
    return {status:'rejected', reason:reason};
  }
  var polyfill = function(thenablesOrValues) {
    var PromiseConstructor = this;
    function convertToAllSettledResult(maybeThenable) {
      return PromiseConstructor.resolve(maybeThenable).then(fulfilledResult, rejectedResult);
    }
    var wrappedResults = Array.from(thenablesOrValues, convertToAllSettledResult);
    return PromiseConstructor.all(wrappedResults);
  };
  return polyfill;
}, 'es_2020', 'es3');
$jscomp.polyfill('Promise.prototype.finally', function(orig) {
  if (orig) {
    return orig;
  }
  var polyfill = function(onFinally) {
    return this.then(function(value) {
      var promise = Promise.resolve(onFinally());
      return promise.then(function() {
        return value;
      });
    }, function(reason) {
      var promise = Promise.resolve(onFinally());
      return promise.then(function() {
        throw reason;
      });
    });
  };
  return polyfill;
}, 'es9', 'es3');
$jscomp.objectCreate = $jscomp.ASSUME_ES5 || typeof Object.create == 'function' ? Object.create : function(prototype) {
  var ctor = function() {
  };
  ctor.prototype = prototype;
  return new ctor();
};
$jscomp.inherits = function(childCtor, parentCtor) {
  childCtor.prototype = $jscomp.objectCreate(parentCtor.prototype);
  childCtor.prototype.constructor = childCtor;
  if ($jscomp.setPrototypeOf) {
    var setPrototypeOf = $jscomp.setPrototypeOf;
    setPrototypeOf(childCtor, parentCtor);
  } else {
    for (var p in parentCtor) {
      if (p == 'prototype') {
        continue;
      }
      if (Object.defineProperties) {
        var descriptor = Object.getOwnPropertyDescriptor(parentCtor, p);
        if (descriptor) {
          Object.defineProperty(childCtor, p, descriptor);
        }
      } else {
        childCtor[p] = parentCtor[p];
      }
    }
  }
  childCtor.superClass_ = parentCtor.prototype;
};
$jscomp.polyfill('AggregateError', function(orig) {
  if (orig) {
    return orig;
  }
  var polyfill = function(errors, message) {
    var $jscomp$tmp$error = Error(message);
    if ('stack' in $jscomp$tmp$error) {
      this.stack = $jscomp$tmp$error.stack;
    }
    this.errors = errors;
    this.message = $jscomp$tmp$error.message;
  };
  $jscomp.inherits(polyfill, Error);
  polyfill.prototype.name = 'AggregateError';
  return polyfill;
}, 'es_2021', 'es3');
$jscomp.polyfill('Promise.any', function(orig) {
  if (orig) {
    return orig;
  }
  var aggregate_error_msg = 'All promises were rejected';
  function resolvingArray(iterable) {
    if (iterable instanceof Array) {
      return iterable;
    } else {
      return Array.from(iterable);
    }
  }
  var polyfill = function(thenablesOrValues) {
    thenablesOrValues = resolvingArray(thenablesOrValues);
    return Promise.all(thenablesOrValues.map(function(p) {
      return Promise.resolve(p).then(function(val) {
        throw val;
      }, function(err) {
        return err;
      });
    })).then(function(errors) {
      throw new AggregateError(errors, aggregate_error_msg);
    }, function(val) {
      return val;
    });
  };
  return polyfill;
}, 'es_2021', 'es3');
$jscomp.polyfill('Reflect.apply', function(orig) {
  if (orig) {
    return orig;
  }
  var apply = Function.prototype.apply;
  var polyfill = function(target, thisArg, argList) {
    return apply.call(target, thisArg, argList);
  };
  return polyfill;
}, 'es6', 'es3');
$jscomp.getConstructImplementation = function() {
  function reflectConstructWorks() {
    function Base() {
    }
    function Derived() {
    }
    new Base();
    Reflect.construct(Base, [], Derived);
    return new Base() instanceof Base;
  }
  if ($jscomp.TRUST_ES6_POLYFILLS && typeof Reflect != 'undefined' && Reflect.construct) {
    if (reflectConstructWorks()) {
      return Reflect.construct;
    }
    var brokenConstruct = Reflect.construct;
    var patchedConstruct = function(target, argList, opt_newTarget) {
      var out = brokenConstruct(target, argList);
      if (opt_newTarget) {
        Reflect.setPrototypeOf(out, opt_newTarget.prototype);
      }
      return out;
    };
    return patchedConstruct;
  }
  function construct(target, argList, opt_newTarget) {
    if (opt_newTarget === undefined) {
      opt_newTarget = target;
    }
    var proto = opt_newTarget.prototype || Object.prototype;
    var obj = $jscomp.objectCreate(proto);
    var apply = Function.prototype.apply;
    var out = apply.call(target, obj, argList);
    return out || obj;
  }
  return construct;
};
$jscomp.construct = {valueOf:$jscomp.getConstructImplementation}.valueOf();
$jscomp.polyfill('Reflect.construct', function(orig) {
  return $jscomp.construct;
}, 'es6', 'es3');
$jscomp.polyfill('Reflect.defineProperty', function(orig) {
  if (orig) {
    return orig;
  }
  var polyfill = function(target, propertyKey, attributes) {
    try {
      Object.defineProperty(target, propertyKey, attributes);
      var desc = Object.getOwnPropertyDescriptor(target, propertyKey);
      if (!desc) {
        return false;
      }
      return desc.configurable === (attributes.configurable || false) && desc.enumerable === (attributes.enumerable || false) && ('value' in desc ? desc.value === attributes.value && desc.writable === (attributes.writable || false) : desc.get === attributes.get && desc.set === attributes.set);
    } catch (err) {
      return false;
    }
  };
  return polyfill;
}, 'es6', 'es5');
$jscomp.polyfill('Reflect.deleteProperty', function(orig) {
  if (orig) {
    return orig;
  }
  var polyfill = function(target, propertyKey) {
    if (!$jscomp.owns(target, propertyKey)) {
      return true;
    }
    try {
      return delete target[propertyKey];
    } catch (err) {
      return false;
    }
  };
  return polyfill;
}, 'es6', 'es3');
$jscomp.polyfill('Reflect.getOwnPropertyDescriptor', function(orig) {
  return orig || Object.getOwnPropertyDescriptor;
}, 'es6', 'es5');
$jscomp.polyfill('Reflect.getPrototypeOf', function(orig) {
  return orig || Object.getPrototypeOf;
}, 'es6', 'es5');
$jscomp.findDescriptor = function(target, propertyKey) {
  var obj = target;
  while (obj) {
    var property = Reflect.getOwnPropertyDescriptor(obj, propertyKey);
    if (property) {
      return property;
    }
    obj = Reflect.getPrototypeOf(obj);
  }
  return undefined;
};
$jscomp.polyfill('Reflect.get', function(orig) {
  if (orig) {
    return orig;
  }
  var polyfill = function(target, propertyKey, opt_receiver) {
    if (arguments.length <= 2) {
      return target[propertyKey];
    }
    var property = $jscomp.findDescriptor(target, propertyKey);
    if (property) {
      return property.get ? property.get.call(opt_receiver) : property.value;
    }
    return undefined;
  };
  return polyfill;
}, 'es6', 'es5');
$jscomp.polyfill('Reflect.has', function(orig) {
  if (orig) {
    return orig;
  }
  var polyfill = function(target, propertyKey) {
    return propertyKey in target;
  };
  return polyfill;
}, 'es6', 'es3');
$jscomp.polyfill('Reflect.isExtensible', function(orig) {
  if (orig) {
    return orig;
  }
  if ($jscomp.ASSUME_ES5 || typeof Object.isExtensible == 'function') {
    return Object.isExtensible;
  }
  return function() {
    return true;
  };
}, 'es6', 'es3');
$jscomp.polyfill('Reflect.preventExtensions', function(orig) {
  if (orig) {
    return orig;
  }
  if (!($jscomp.ASSUME_ES5 || typeof Object.preventExtensions == 'function')) {
    return function() {
      return false;
    };
  }
  var polyfill = function(target) {
    Object.preventExtensions(target);
    return !Object.isExtensible(target);
  };
  return polyfill;
}, 'es6', 'es3');
$jscomp.polyfill('Reflect.set', function(orig) {
  if (orig) {
    return orig;
  }
  var polyfill = function(target, propertyKey, value, opt_receiver) {
    var property = $jscomp.findDescriptor(target, propertyKey);
    if (!property) {
      if (Reflect.isExtensible(target)) {
        target[propertyKey] = value;
        return true;
      }
      return false;
    }
    if (property.set) {
      property.set.call(arguments.length > 3 ? opt_receiver : target, value);
      return true;
    } else if (property.writable && !Object.isFrozen(target)) {
      target[propertyKey] = value;
      return true;
    }
    return false;
  };
  return polyfill;
}, 'es6', 'es5');
$jscomp.polyfill('Reflect.setPrototypeOf', function(orig) {
  if (orig) {
    return orig;
  } else if ($jscomp.setPrototypeOf) {
    var setPrototypeOf = $jscomp.setPrototypeOf;
    var polyfill = function(target, proto) {
      try {
        setPrototypeOf(target, proto);
        return true;
      } catch (e) {
        return false;
      }
    };
    return polyfill;
  } else {
    return null;
  }
}, 'es6', 'es5');
$jscomp.polyfill('Set', function(NativeSet) {
  function isConformant() {
    if ($jscomp.ASSUME_NO_NATIVE_SET || !NativeSet || typeof NativeSet != 'function' || !NativeSet.prototype.entries || typeof Object.seal != 'function') {
      return false;
    }
    try {
      NativeSet = NativeSet;
      var value = Object.seal({x:4});
      var set = new NativeSet($jscomp.makeIterator([value]));
      if (!set.has(value) || set.size != 1 || set.add(value) != set || set.size != 1 || set.add({x:4}) != set || set.size != 2) {
        return false;
      }
      var iter = set.entries();
      var item = iter.next();
      if (item.done || item.value[0] != value || item.value[1] != value) {
        return false;
      }
      item = iter.next();
      if (item.done || item.value[0] == value || item.value[0].x != 4 || item.value[1] != item.value[0]) {
        return false;
      }
      return iter.next().done;
    } catch (err) {
      return false;
    }
  }
  if ($jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS) {
    if (NativeSet && $jscomp.ES6_CONFORMANCE) {
      return NativeSet;
    }
  } else {
    if (isConformant()) {
      return NativeSet;
    }
  }
  var PolyfillSet = function(opt_iterable) {
    this.map_ = new Map();
    if (opt_iterable) {
      var iter = $jscomp.makeIterator(opt_iterable);
      var entry;
      while (!(entry = iter.next()).done) {
        var item = entry.value;
        this.add(item);
      }
    }
    this.size = this.map_.size;
  };
  PolyfillSet.prototype.add = function(value) {
    value = value === 0 ? 0 : value;
    this.map_.set(value, value);
    this.size = this.map_.size;
    return this;
  };
  PolyfillSet.prototype['delete'] = function(value) {
    var result = this.map_['delete'](value);
    this.size = this.map_.size;
    return result;
  };
  PolyfillSet.prototype.clear = function() {
    this.map_.clear();
    this.size = 0;
  };
  PolyfillSet.prototype.has = function(value) {
    return this.map_.has(value);
  };
  PolyfillSet.prototype.entries = function() {
    return this.map_.entries();
  };
  PolyfillSet.prototype.values = function() {
    return this.map_.values();
  };
  PolyfillSet.prototype.keys = PolyfillSet.prototype.values;
  PolyfillSet.prototype[Symbol.iterator] = PolyfillSet.prototype.values;
  PolyfillSet.prototype.forEach = function(callback, opt_thisArg) {
    var set = this;
    this.map_.forEach(function(value) {
      return callback.call(opt_thisArg, value, value, set);
    });
  };
  return PolyfillSet;
}, 'es6', 'es3');
$jscomp.checkStringArgs = function(thisArg, arg, func) {
  if (thisArg == null) {
    throw new TypeError("The 'this' value for String.prototype." + func + ' must not be null or undefined');
  }
  if (arg instanceof RegExp) {
    throw new TypeError('First argument to String.prototype.' + func + ' must not be a regular expression');
  }
  return thisArg + '';
};
$jscomp.polyfill('String.prototype.codePointAt', function(orig) {
  if (orig) {
    return orig;
  }
  var polyfill = function(position) {
    var string = $jscomp.checkStringArgs(this, null, 'codePointAt');
    var size = string.length;
    position = Number(position) || 0;
    if (!(position >= 0 && position < size)) {
      return void 0;
    }
    position = position | 0;
    var first = string.charCodeAt(position);
    if (first < 55296 || first > 56319 || position + 1 === size) {
      return first;
    }
    var second = string.charCodeAt(position + 1);
    if (second < 56320 || second > 57343) {
      return first;
    }
    return (first - 55296) * 1024 + second + 9216;
  };
  return polyfill;
}, 'es6', 'es3');
$jscomp.polyfill('String.prototype.endsWith', function(orig) {
  if (orig) {
    return orig;
  }
  var polyfill = function(searchString, opt_position) {
    var string = $jscomp.checkStringArgs(this, searchString, 'endsWith');
    searchString = searchString + '';
    if (opt_position === void 0) {
      opt_position = string.length;
    }
    var i = Math.max(0, Math.min(opt_position | 0, string.length));
    var j = searchString.length;
    while (j > 0 && i > 0) {
      if (string[--i] != searchString[--j]) {
        return false;
      }
    }
    return j <= 0;
  };
  return polyfill;
}, 'es6', 'es3');
$jscomp.polyfill('String.fromCodePoint', function(orig) {
  if (orig) {
    return orig;
  }
  var polyfill = function(var_args) {
    var result = '';
    for (var i = 0; i < arguments.length; i++) {
      var code = Number(arguments[i]);
      if (code < 0 || code > 1114111 || code !== Math.floor(code)) {
        throw new RangeError('invalid_code_point ' + code);
      }
      if (code <= 65535) {
        result += String.fromCharCode(code);
      } else {
        code -= 65536;
        result += String.fromCharCode(code >>> 10 & 1023 | 55296);
        result += String.fromCharCode(code & 1023 | 56320);
      }
    }
    return result;
  };
  return polyfill;
}, 'es6', 'es3');
$jscomp.polyfill('String.prototype.includes', function(orig) {
  if (orig) {
    return orig;
  }
  var polyfill = function(searchString, opt_position) {
    var string = $jscomp.checkStringArgs(this, searchString, 'includes');
    return string.indexOf(searchString, opt_position || 0) !== -1;
  };
  return polyfill;
}, 'es6', 'es3');
$jscomp.polyfill('String.prototype.matchAll', function(orig) {
  if (orig) {
    return orig;
  }
  var polyfill = function(regexp) {
    if (regexp instanceof RegExp && !regexp.global) {
      throw new TypeError('RegExp passed into String.prototype.matchAll() must have global tag.');
    }
    var regexCopy = new RegExp(regexp, regexp instanceof RegExp ? undefined : 'g');
    var matchString = this;
    var finished = false;
    var matchAllIterator = {next:function() {
      if (finished) {
        return {value:undefined, done:true};
      }
      var match = regexCopy.exec(matchString);
      if (!match) {
        finished = true;
        return {value:undefined, done:true};
      }
      if (match[0] === '') {
        regexCopy.lastIndex += 1;
      }
      return {value:match, done:false};
    }};
    matchAllIterator[Symbol.iterator] = function() {
      return matchAllIterator;
    };
    return matchAllIterator;
  };
  return polyfill;
}, 'es_2020', 'es3');
$jscomp.polyfill('String.prototype.repeat', function(orig) {
  if (orig) {
    return orig;
  }
  var polyfill = function(copies) {
    var string = $jscomp.checkStringArgs(this, null, 'repeat');
    if (copies < 0 || copies > 1342177279) {
      throw new RangeError('Invalid count value');
    }
    copies = copies | 0;
    var result = '';
    while (copies) {
      if (copies & 1) {
        result += string;
      }
      if (copies >>>= 1) {
        string += string;
      }
    }
    return result;
  };
  return polyfill;
}, 'es6', 'es3');
$jscomp.stringPadding = function(padString, padLength) {
  var padding = padString !== undefined ? String(padString) : ' ';
  if (!(padLength > 0) || !padding) {
    return '';
  }
  var repeats = Math.ceil(padLength / padding.length);
  return padding.repeat(repeats).substring(0, padLength);
};
$jscomp.polyfill('String.prototype.padEnd', function(orig) {
  if (orig) {
    return orig;
  }
  var padEnd = function(targetLength, opt_padString) {
    var string = $jscomp.checkStringArgs(this, null, 'padStart');
    var padLength = targetLength - string.length;
    return string + $jscomp.stringPadding(opt_padString, padLength);
  };
  return padEnd;
}, 'es8', 'es3');
$jscomp.polyfill('String.prototype.padStart', function(orig) {
  if (orig) {
    return orig;
  }
  var padStart = function(targetLength, opt_padString) {
    var string = $jscomp.checkStringArgs(this, null, 'padStart');
    var padLength = targetLength - string.length;
    return $jscomp.stringPadding(opt_padString, padLength) + string;
  };
  return padStart;
}, 'es8', 'es3');
$jscomp.polyfill('String.raw', function(orig) {
  if (orig) {
    return orig;
  }
  var stringRaw = function(strings, var_args) {
    if (strings == null) {
      throw new TypeError('Cannot convert undefined or null to object');
    }
    var raw = strings.raw;
    var rawlen = raw.length;
    var result = '';
    for (var i = 0; i < rawlen; ++i) {
      result += raw[i];
      if (i + 1 < rawlen && i + 1 < arguments.length) {
        result += String(arguments[i + 1]);
      }
    }
    return result;
  };
  return stringRaw;
}, 'es6', 'es3');
$jscomp.polyfill('String.prototype.replaceAll', function(orig) {
  if (orig) {
    return orig;
  }
  function regExpEscape(s) {
    return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, '\\$1').replace(/\x08/g, '\\x08');
  }
  var polyfill = function(searchValue, replacement) {
    if (searchValue instanceof RegExp && !searchValue.global) {
      throw new TypeError('String.prototype.replaceAll called with a non-global RegExp argument.');
    }
    if (searchValue instanceof RegExp) {
      return this.replace(searchValue, replacement);
    }
    return this.replace(new RegExp(regExpEscape(searchValue), 'g'), replacement);
  };
  return polyfill;
}, 'es_2021', 'es3');
$jscomp.polyfill('String.prototype.startsWith', function(orig) {
  if (orig) {
    return orig;
  }
  var polyfill = function(searchString, opt_position) {
    var string = $jscomp.checkStringArgs(this, searchString, 'startsWith');
    searchString = searchString + '';
    var strLen = string.length;
    var searchLen = searchString.length;
    var i = Math.max(0, Math.min(opt_position | 0, string.length));
    var j = 0;
    while (j < searchLen && i < strLen) {
      if (string[i++] != searchString[j++]) {
        return false;
      }
    }
    return j >= searchLen;
  };
  return polyfill;
}, 'es6', 'es3');
$jscomp.polyfill('String.prototype.trimRight', function(orig) {
  function polyfill() {
    return this.replace(/[\s\xa0]+$/, '');
  }
  return orig || polyfill;
}, 'es_2019', 'es3');
$jscomp.polyfill('String.prototype.trimEnd', function(orig) {
  return orig || String.prototype.trimRight;
}, 'es_2019', 'es3');
$jscomp.polyfill('String.prototype.trimLeft', function(orig) {
  function polyfill() {
    return this.replace(/^[\s\xa0]+/, '');
  }
  return orig || polyfill;
}, 'es_2019', 'es3');
$jscomp.polyfill('String.prototype.trimStart', function(orig) {
  return orig || String.prototype.trimLeft;
}, 'es_2019', 'es3');
$jscomp.typedArrayCopyWithin = function(orig) {
  if (orig) {
    return orig;
  }
  return Array.prototype.copyWithin;
};
$jscomp.polyfill('Int8Array.prototype.copyWithin', $jscomp.typedArrayCopyWithin, 'es6', 'es5');
$jscomp.polyfill('Uint8Array.prototype.copyWithin', $jscomp.typedArrayCopyWithin, 'es6', 'es5');
$jscomp.polyfill('Uint8ClampedArray.prototype.copyWithin', $jscomp.typedArrayCopyWithin, 'es6', 'es5');
$jscomp.polyfill('Int16Array.prototype.copyWithin', $jscomp.typedArrayCopyWithin, 'es6', 'es5');
$jscomp.polyfill('Uint16Array.prototype.copyWithin', $jscomp.typedArrayCopyWithin, 'es6', 'es5');
$jscomp.polyfill('Int32Array.prototype.copyWithin', $jscomp.typedArrayCopyWithin, 'es6', 'es5');
$jscomp.polyfill('Uint32Array.prototype.copyWithin', $jscomp.typedArrayCopyWithin, 'es6', 'es5');
$jscomp.polyfill('Float32Array.prototype.copyWithin', $jscomp.typedArrayCopyWithin, 'es6', 'es5');
$jscomp.polyfill('Float64Array.prototype.copyWithin', $jscomp.typedArrayCopyWithin, 'es6', 'es5');
$jscomp.typedArrayFill = function(orig) {
  if (orig) {
    return orig;
  }
  return Array.prototype.fill;
};
$jscomp.polyfill('Int8Array.prototype.fill', $jscomp.typedArrayFill, 'es6', 'es5');
$jscomp.polyfill('Uint8Array.prototype.fill', $jscomp.typedArrayFill, 'es6', 'es5');
$jscomp.polyfill('Uint8ClampedArray.prototype.fill', $jscomp.typedArrayFill, 'es6', 'es5');
$jscomp.polyfill('Int16Array.prototype.fill', $jscomp.typedArrayFill, 'es6', 'es5');
$jscomp.polyfill('Uint16Array.prototype.fill', $jscomp.typedArrayFill, 'es6', 'es5');
$jscomp.polyfill('Int32Array.prototype.fill', $jscomp.typedArrayFill, 'es6', 'es5');
$jscomp.polyfill('Uint32Array.prototype.fill', $jscomp.typedArrayFill, 'es6', 'es5');
$jscomp.polyfill('Float32Array.prototype.fill', $jscomp.typedArrayFill, 'es6', 'es5');
$jscomp.polyfill('Float64Array.prototype.fill', $jscomp.typedArrayFill, 'es6', 'es5');
$jscomp.createTemplateTagFirstArg = function(arrayStrings) {
  arrayStrings.raw = arrayStrings;
  return arrayStrings;
};
$jscomp.createTemplateTagFirstArgWithRaw = function(arrayStrings, rawArrayStrings) {
  arrayStrings.raw = rawArrayStrings;
  return arrayStrings;
};
$jscomp.arrayFromIterator = function(iterator) {
  var i;
  var arr = [];
  while (!(i = iterator.next()).done) {
    arr.push(i.value);
  }
  return arr;
};
$jscomp.arrayFromIterable = function(iterable) {
  if (iterable instanceof Array) {
    return iterable;
  } else {
    return $jscomp.arrayFromIterator($jscomp.makeIterator(iterable));
  }
};
$jscomp.getRestArguments = function() {
  var startIndex = Number(this);
  var restArgs = [];
  for (var i = startIndex; i < arguments.length; i++) {
    restArgs[i - startIndex] = arguments[i];
  }
  return restArgs;
};
$jscomp.polyfill('WeakSet', function(NativeWeakSet) {
  function isConformant() {
    if (!NativeWeakSet || !Object.seal) {
      return false;
    }
    try {
      var x = Object.seal({});
      var y = Object.seal({});
      var set = new NativeWeakSet([x]);
      if (!set.has(x) || set.has(y)) {
        return false;
      }
      set['delete'](x);
      set.add(y);
      return !set.has(x) && set.has(y);
    } catch (err) {
      return false;
    }
  }
  if ($jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS) {
    if (NativeWeakSet && $jscomp.ES6_CONFORMANCE) {
      return NativeWeakSet;
    }
  } else {
    if (isConformant()) {
      return NativeWeakSet;
    }
  }
  var PolyfillWeakSet = function(opt_iterable) {
    this.map_ = new WeakMap();
    if (opt_iterable) {
      var iter = $jscomp.makeIterator(opt_iterable);
      var entry;
      while (!(entry = iter.next()).done) {
        var item = entry.value;
        this.add(item);
      }
    }
  };
  PolyfillWeakSet.prototype.add = function(elem) {
    this.map_.set(elem, true);
    return this;
  };
  PolyfillWeakSet.prototype.has = function(elem) {
    return this.map_.has(elem);
  };
  PolyfillWeakSet.prototype['delete'] = function(elem) {
    return this.map_['delete'](elem);
  };
  return PolyfillWeakSet;
}, 'es6', 'es3');
try {
  if (Array.prototype.values.toString().indexOf('[native code]') == -1) {
    delete Array.prototype.values;
  }
} catch (e) {
}
Ext.define('Sch.util.Patch', {target:null, minVersion:null, maxVersion:null, reportUrl:null, description:null, applyFn:null, ieOnly:false, onClassExtended:function(a, b) {
  if (Sch.disableOverrides) {
    return;
  }
  if (b.ieOnly && !Ext.isIE) {
    return;
  }
  if (b.applyFn) {
    b.applyFn();
  } else {
    if ((!b.minVersion || Ext.versions.extjs.equals(b.minVersion) || Ext.versions.extjs.isGreaterThan(b.minVersion)) && (!b.maxVersion || Ext.versions.extjs.equals(b.maxVersion) || Ext.versions.extjs.isLessThan(b.maxVersion))) {
      b.requires[0].override(b.overrides);
    }
  }
}});
Ext.define('Sch.patches.LoadMask', {extend:'Sch.util.Patch', requires:['Ext.view.AbstractView'], minVersion:'4.1.0b3', reportURL:'http://www.sencha.com/forum/showthread.php?187700-4.1.0-B3-Ext.AbstractView-no-longer-binds-its-store-to-load-mask', description:'In Ext4.1 loadmask no longer bind the store', overrides:{}});
Ext.define('Sch.patches.Table', {extend:'Sch.util.Patch', requires:['Ext.view.Table'], minVersion:'4.1.1', maxVersion:'4.1.1', reportURL:'http://www.sencha.com/forum/showthread.php?238026-4.1.1-Alt-row-styling-lost-after-record-update\x26p\x3d874190#post874190', description:'In Ext4.1.1 when record is updated, the alternate row styling is lost', overrides:{onUpdate:function(c, a, b, e) {
  var d = this.store.indexOf(a);
  this.callParent(arguments);
  this.doStripeRows(d, d);
}}});
Ext.define('Sch.patches.TreeView', {extend:'Sch.util.Patch', requires:['Ext.tree.View'], applyFn:function() {
  Ext.tree.View.addMembers({providedStore:null, initComponent:function() {
    var a = this, b = a.panel.getStore();
    if (a.initialConfig.animate === undefined) {
      a.animate = Ext.enableFx;
    }
    a.store = a.providedStore || new Ext.data.NodeStore({treeStore:b, recursive:true, rootVisible:a.rootVisible});
    a.store.on({beforeexpand:a.onBeforeExpand, expand:a.onExpand, beforecollapse:a.onBeforeCollapse, collapse:a.onCollapse, write:a.onStoreWrite, datachanged:a.onStoreDataChanged, scope:a});
    if (a.node && !a.store.node) {
      a.setRootNode(a.node);
    }
    a.animQueue = {};
    a.animWraps = {};
    a.addEvents('afteritemexpand', 'afteritemcollapse');
    a.callParent(arguments);
    a.on({element:'el', scope:a, delegate:a.expanderSelector, mouseover:a.onExpanderMouseOver, mouseout:a.onExpanderMouseOut});
    a.on({element:'el', scope:a, delegate:a.checkboxSelector, click:a.onCheckboxChange});
  }});
}});
Ext.define('Sch.patches.DataOperation', {extend:'Sch.util.Patch', requires:['Ext.data.Operation'], reportURL:'http://www.sencha.com/forum/showthread.php?198894-4.1-Ext.data.TreeStore-CRUD-regression.', description:'In Ext 4.1.0 newly created records do not get the Id returned by server applied', maxVersion:'4.1.0', overrides:{commitRecords:function(j) {
  var g = this, h, f, a, c, b, d, e;
  if (!g.actionSkipSyncRe.test(g.action)) {
    a = g.records;
    if (a && a.length) {
      if (a.length > 1) {
        if (g.action == 'update' || a[0].clientIdProperty) {
          h = new Ext.util.MixedCollection();
          h.addAll(j);
          for (f = a.length; f--;) {
            b = a[f];
            c = h.findBy(g.matchClientRec, b);
            b.copyFrom(c);
          }
        } else {
          for (d = 0, e = a.length; d < e; ++d) {
            b = a[d];
            c = j[d];
            if (b && c) {
              g.updateRecord(b, c);
            }
          }
        }
      } else {
        this.updateRecord(a[0], j[0]);
      }
      if (g.actionCommitRecordsRe.test(g.action)) {
        for (f = a.length; f--;) {
          a[f].commit();
        }
      }
    }
  }
}, updateRecord:function(a, b) {
  if (b && (a.phantom || a.getId() === b.getId())) {
    a.copyFrom(b);
  }
}}});
Ext.define('Sch.patches.TreeStore', {extend:'Sch.util.Patch', requires:['Ext.data.TreeStore'], description:'http://www.sencha.com/forum/showthread.php?208602-Model-s-Id-field-not-defined-after-sync-in-TreeStore-%28CRUD%29', maxVersion:'4.1.0', overrides:{onCreateRecords:function(c) {
  this.callParent(arguments);
  var d = 0, b = c.length, a = this.tree, e;
  for (; d < b; ++d) {
    e = c[d];
    a.onNodeIdChanged(e, null, e.getId());
  }
}, setRootNode:function(a, e) {
  var d = this, c = d.model, b = c.prototype.idProperty;
  a = a || {};
  if (!a.isModel) {
    Ext.applyIf(a, {text:'Root', allowDrag:false});
    if (a[b] === undefined) {
      a[b] = d.defaultRootId;
    }
    Ext.data.NodeInterface.decorate(c);
    a = Ext.ModelManager.create(a, c);
  } else {
    if (a.isModel && !a.isNode) {
      Ext.data.NodeInterface.decorate(c);
    }
  }
  d.getProxy().getReader().buildExtractors(true);
  d.tree.setRootNode(a);
  if (e !== true && !a.isLoaded() && (d.autoLoad === true || a.isExpanded())) {
    d.load({node:a});
  }
  return a;
}}});
Ext.define('Sch.util.Date', {requires:'Ext.Date', singleton:true, unitsByName:{}, constructor:function() {
  var b = Ext.Date;
  var d = {MILLI:b.MILLI, SECOND:b.SECOND, MINUTE:b.MINUTE, HOUR:b.HOUR, DAY:b.DAY, WEEK:'w', MONTH:b.MONTH, QUARTER:'q', YEAR:b.YEAR};
  Ext.apply(this, d);
  var c = this;
  this.units = [c.MILLI, c.SECOND, c.MINUTE, c.HOUR, c.DAY, c.WEEK, c.MONTH, c.QUARTER, c.YEAR];
  for (var a in d) {
    if (d.hasOwnProperty(a)) {
      var e = d[a];
      c.unitNames[e] = c.unitNames[a];
      c.unitsByName[a] = e;
      c.unitsByName[e] = e;
    }
  }
}, betweenLesser:function(b, d, a) {
  var c = b.getTime();
  return d.getTime() <= c && c < a.getTime();
}, constrain:function(b, c, a) {
  return this.min(this.max(b, c), a);
}, compareUnits:function(c, b) {
  var a = Ext.Array.indexOf(this.units, c), d = Ext.Array.indexOf(this.units, b);
  return a > d ? 1 : a < d ? -1 : 0;
}, isUnitGreater:function(b, a) {
  return this.compareUnits(b, a) > 0;
}, copyTimeValues:function(b, a) {
  b.setHours(a.getHours());
  b.setMinutes(a.getMinutes());
  b.setSeconds(a.getSeconds());
  b.setMilliseconds(a.getMilliseconds());
}, add:function(b, c, e) {
  var f = Ext.Date.clone(b);
  if (!c || e === 0) {
    return f;
  }
  switch(c.toLowerCase()) {
    case this.MILLI:
      f = new Date(b.getTime() + e);
      break;
    case this.SECOND:
      f = new Date(b.getTime() + e * 1000);
      break;
    case this.MINUTE:
      f = new Date(b.getTime() + e * 60000);
      break;
    case this.HOUR:
      f = new Date(b.getTime() + e * 3600000);
      break;
    case this.DAY:
      f.setDate(b.getDate() + e);
      break;
    case this.WEEK:
      f.setDate(b.getDate() + e * 7);
      break;
    case this.MONTH:
      var a = b.getDate();
      if (a > 28) {
        a = Math.min(a, Ext.Date.getLastDateOfMonth(this.add(Ext.Date.getFirstDateOfMonth(b), this.MONTH, e)).getDate());
      }
      f.setDate(a);
      f.setMonth(f.getMonth() + e);
      break;
    case this.QUARTER:
      f = this.add(b, this.MONTH, e * 3);
      break;
    case this.YEAR:
      f.setFullYear(b.getFullYear() + e);
      break;
  }
  return f;
}, getMeasuringUnit:function(a) {
  if (a === this.WEEK) {
    return this.DAY;
  }
  return a;
}, getDurationInUnit:function(d, a, c) {
  var b;
  switch(c) {
    case this.YEAR:
      b = Math.round(this.getDurationInYears(d, a));
      break;
    case this.QUARTER:
      b = Math.round(this.getDurationInMonths(d, a) / 3);
      break;
    case this.MONTH:
      b = Math.round(this.getDurationInMonths(d, a));
      break;
    case this.WEEK:
      b = Math.round(this.getDurationInDays(d, a)) / 7;
      break;
    case this.DAY:
      b = Math.round(this.getDurationInDays(d, a));
      break;
    case this.HOUR:
      b = Math.round(this.getDurationInHours(d, a));
      break;
    case this.MINUTE:
      b = Math.round(this.getDurationInMinutes(d, a));
      break;
    case this.SECOND:
      b = Math.round(this.getDurationInSeconds(d, a));
      break;
    case this.MILLI:
      b = Math.round(this.getDurationInMilliseconds(d, a));
      break;
  }
  return b;
}, getUnitToBaseUnitRatio:function(b, a) {
  if (b === a) {
    return 1;
  }
  switch(b) {
    case this.YEAR:
      switch(a) {
        case this.QUARTER:
          return 1 / 4;
        case this.MONTH:
          return 1 / 12;
      }break;
    case this.QUARTER:
      switch(a) {
        case this.YEAR:
          return 4;
        case this.MONTH:
          return 1 / 3;
      }break;
    case this.MONTH:
      switch(a) {
        case this.YEAR:
          return 12;
        case this.QUARTER:
          return 3;
      }break;
    case this.WEEK:
      switch(a) {
        case this.DAY:
          return 1 / 7;
        case this.HOUR:
          return 1 / 168;
      }break;
    case this.DAY:
      switch(a) {
        case this.WEEK:
          return 7;
        case this.HOUR:
          return 1 / 24;
        case this.MINUTE:
          return 1 / 1440;
      }break;
    case this.HOUR:
      switch(a) {
        case this.DAY:
          return 24;
        case this.MINUTE:
          return 1 / 60;
      }break;
    case this.MINUTE:
      switch(a) {
        case this.HOUR:
          return 60;
        case this.SECOND:
          return 1 / 60;
        case this.MILLI:
          return 1 / 60000;
      }break;
    case this.SECOND:
      switch(a) {
        case this.MILLI:
          return 1 / 1000;
      }break;
    case this.MILLI:
      switch(a) {
        case this.SECOND:
          return 1000;
      }break;
  }
  return -1;
}, getDurationInMilliseconds:function(b, a) {
  return a - b;
}, getDurationInSeconds:function(b, a) {
  return (a - b) / 1000;
}, getDurationInMinutes:function(b, a) {
  return (a - b) / 60000;
}, getDurationInHours:function(b, a) {
  return (a - b) / 3600000;
}, getDurationInDays:function(b, a) {
  return (a - b) / 86400000;
}, getDurationInBusinessDays:function(g, b) {
  var c = Math.round((b - g) / 86400000), a = 0, f;
  for (var e = 0; e < c; e++) {
    f = this.add(g, this.DAY, e).getDay();
    if (f !== 6 && f !== 0) {
      a++;
    }
  }
  return a;
}, getDurationInMonths:function(b, a) {
  return (a.getFullYear() - b.getFullYear()) * 12 + (a.getMonth() - b.getMonth());
}, getDurationInYears:function(b, a) {
  return this.getDurationInMonths(b, a) / 12;
}, min:function(b, a) {
  return b < a ? b : a;
}, max:function(b, a) {
  return b > a ? b : a;
}, intersectSpans:function(c, d, b, a) {
  return this.betweenLesser(c, b, a) || this.betweenLesser(b, c, d);
}, getNameOfUnit:function(a) {
  a = this.getUnitByName(a);
  switch(a.toLowerCase()) {
    case this.YEAR:
      return 'YEAR';
    case this.QUARTER:
      return 'QUARTER';
    case this.MONTH:
      return 'MONTH';
    case this.WEEK:
      return 'WEEK';
    case this.DAY:
      return 'DAY';
    case this.HOUR:
      return 'HOUR';
    case this.MINUTE:
      return 'MINUTE';
    case this.SECOND:
      return 'SECOND';
    case this.MILLI:
      return 'MILLI';
  }
  throw 'Incorrect UnitName';
}, unitNames:{YEAR:{single:'year', plural:'years', abbrev:'yr'}, QUARTER:{single:'quarter', plural:'quarters', abbrev:'q'}, MONTH:{single:'month', plural:'months', abbrev:'mon'}, WEEK:{single:'week', plural:'weeks', abbrev:'w'}, DAY:{single:'day', plural:'days', abbrev:'d'}, HOUR:{single:'hour', plural:'hours', abbrev:'h'}, MINUTE:{single:'minute', plural:'minutes', abbrev:'min'}, SECOND:{single:'second', plural:'seconds', abbrev:'s'}, MILLI:{single:'ms', plural:'ms', abbrev:'ms'}}, getReadableNameOfUnit:function(b, 
a) {
  return this.unitNames[b][a ? 'plural' : 'single'];
}, getShortNameOfUnit:function(a) {
  return this.unitNames[a].abbrev;
}, getUnitByName:function(a) {
  if (!this.unitsByName[a]) {
    Ext.Error.raise('Unknown unit name: ' + a);
  }
  return this.unitsByName[a];
}, getNext:function(c, f, a, e) {
  var d = Ext.Date.clone(c);
  a = a || 1;
  switch(f) {
    case this.DAY:
      Ext.Date.clearTime(d);
      d = this.add(d, this.DAY, a);
      break;
    case this.WEEK:
      var b = d.getDay();
      d = this.add(d, this.DAY, 7 * (a - 1) + (b < e ? e - b : 7 - b + e));
      break;
    case this.MONTH:
      d = this.add(d, this.MONTH, a);
      d.setDate(1);
      break;
    case this.QUARTER:
      d = this.add(d, this.MONTH, (a - 1) * 3 + (3 - d.getMonth() % 3));
      break;
    case this.YEAR:
      d = new Date(d.getFullYear() + a, 0, 1);
      break;
    default:
      d = this.add(c, f, a);
      break;
  }
  return d;
}, getNumberOfMsFromTheStartOfDay:function(a) {
  return a - Ext.Date.clearTime(a, true) || 86400000;
}, getNumberOfMsTillTheEndOfDay:function(a) {
  return this.getStartOfNextDay(a, true) - a;
}, getStartOfNextDay:function(b, e) {
  var d = this.add(Ext.Date.clearTime(b, e), this.DAY, 1);
  if (d.getDate() == b.getDate()) {
    var c = this.add(Ext.Date.clearTime(b, e), this.DAY, 2).getTimezoneOffset();
    var a = b.getTimezoneOffset();
    d = this.add(d, this.MINUTE, a - c);
  }
  return d;
}, getEndOfPreviousDay:function(b) {
  var a = Ext.Date.clearTime(b, true);
  if (a - b) {
    return a;
  } else {
    return this.add(a, this.DAY, -1);
  }
}, timeSpanContains:function(c, b, d, a) {
  return d - c >= 0 && b - a >= 0;
}});
Ext.define('Sch.util.DragTracker', {extend:'Ext.dd.DragTracker', xStep:1, yStep:1, setXStep:function(a) {
  this.xStep = a;
}, setYStep:function(a) {
  this.yStep = a;
}, getRegion:function() {
  var e = this.startXY, d = this.getXY(), b = Math.min(e[0], d[0]), f = Math.min(e[1], d[1]), c = Math.abs(e[0] - d[0]), a = Math.abs(e[1] - d[1]);
  return new Ext.util.Region(f, b + c, f + a, b);
}, onMouseDown:function(f, d) {
  if (this.disabled || f.dragTracked) {
    return;
  }
  var c = f.getXY(), g, b, a = c[0], h = c[1];
  if (this.xStep > 1) {
    g = this.el.getX();
    a -= g;
    a = Math.round(a / this.xStep) * this.xStep;
    a += g;
  }
  if (this.yStep > 1) {
    b = this.el.getY();
    h -= b;
    h = Math.round(h / this.yStep) * this.yStep;
    h += b;
  }
  this.dragTarget = this.delegate ? d : this.handle.dom;
  this.startXY = this.lastXY = [a, h];
  this.startRegion = Ext.fly(this.dragTarget).getRegion();
  if (this.fireEvent('mousedown', this, f) === false || this.fireEvent('beforedragstart', this, f) === false || this.onBeforeStart(f) === false) {
    return;
  }
  this.mouseIsDown = true;
  f.dragTracked = true;
  if (this.preventDefault !== false) {
    f.preventDefault();
  }
  Ext.getDoc().on({scope:this, mouseup:this.onMouseUp, mousemove:this.onMouseMove, selectstart:this.stopSelect});
  if (this.autoStart) {
    this.timer = Ext.defer(this.triggerStart, this.autoStart === true ? 1000 : this.autoStart, this, [f]);
  }
}, onMouseMove:function(g, f) {
  if (this.active && Ext.isIE && !g.browserEvent.button) {
    g.preventDefault();
    this.onMouseUp(g);
    return;
  }
  g.preventDefault();
  var d = g.getXY(), b = this.startXY;
  if (!this.active) {
    if (Math.max(Math.abs(b[0] - d[0]), Math.abs(b[1] - d[1])) > this.tolerance) {
      this.triggerStart(g);
    } else {
      return;
    }
  }
  var a = d[0], h = d[1];
  if (this.xStep > 1) {
    a -= this.startXY[0];
    a = Math.round(a / this.xStep) * this.xStep;
    a += this.startXY[0];
  }
  if (this.yStep > 1) {
    h -= this.startXY[1];
    h = Math.round(h / this.yStep) * this.yStep;
    h += this.startXY[1];
  }
  var c = this.xStep > 1 || this.yStep > 1;
  if (!c || a !== d[0] || h !== d[1]) {
    this.lastXY = [a, h];
    if (this.fireEvent('mousemove', this, g) === false) {
      this.onMouseUp(g);
    } else {
      this.onDrag(g);
      this.fireEvent('drag', this, g);
    }
  }
}});
Ext.define('Sch.util.HeaderRenderers', {singleton:true, requires:['Sch.util.Date', 'Ext.XTemplate'], constructor:function() {
  var b = Ext.create('Ext.XTemplate', '\x3ctable class\x3d"sch-nested-hdr-tbl ' + Ext.baseCSSPrefix + 'column-header-text" cellpadding\x3d"0" cellspacing\x3d"0"\x3e\x3ctr\x3e\x3ctpl for\x3d"."\x3e\x3ctd style\x3d"width:{[100/xcount]}%" class\x3d"{cls} sch-dayheadercell-{dayOfWeek}"\x3e{text}\x3c/td\x3e\x3c/tpl\x3e\x3c/tr\x3e\x3c/table\x3e').compile();
  var a = Ext.create('Ext.XTemplate', '\x3ctable class\x3d"sch-nested-hdr-tbl" cellpadding\x3d"0" cellspacing\x3d"0"\x3e\x3ctr\x3e\x3ctpl for\x3d"."\x3e\x3ctd style\x3d"width:{[100/xcount]}%" class\x3d"{cls}"\x3e{text}\x3c/td\x3e\x3c/tpl\x3e\x3c/tr\x3e\x3c/table\x3e').compile();
  return {quarterMinute:function(f, d, c, e) {
    c.headerCls = 'sch-nested-hdr-pad';
    return '\x3ctable class\x3d"sch-nested-hdr-tbl" cellpadding\x3d"0" cellspacing\x3d"0"\x3e\x3ctr\x3e\x3ctd\x3e00\x3c/td\x3e\x3ctd\x3e15\x3c/td\x3e\x3ctd\x3e30\x3c/td\x3e\x3ctd\x3e45\x3c/td\x3e\x3c/tr\x3e\x3c/table\x3e';
  }, dateCells:function(d, c, e) {
    return function(j, g, f) {
      f.headerCls = 'sch-nested-hdr-nopad';
      var i = [], h = Ext.Date.clone(j);
      while (h < g) {
        i.push({text:Ext.Date.format(h, e)});
        h = Sch.util.Date.add(h, d, c);
      }
      i[0].cls = 'sch-nested-hdr-cell-first';
      i[i.length - 1].cls = 'sch-nested-hdr-cell-last';
      return a.apply(i);
    };
  }, dateNumber:function(g, d, c) {
    c.headerCls = 'sch-nested-hdr-nopad';
    var f = [], e = Ext.Date.clone(g);
    while (e < d) {
      f.push({dayOfWeek:e.getDay(), text:e.getDate()});
      e = Sch.util.Date.add(e, Sch.util.Date.DAY, 1);
    }
    return b.apply(f);
  }, dayLetter:function(g, d, c) {
    c.headerCls = 'sch-nested-hdr-nopad';
    var f = [], e = g;
    while (e < d) {
      f.push({dayOfWeek:e.getDay(), text:Ext.Date.dayNames[e.getDay()].substr(0, 1)});
      e = Sch.util.Date.add(e, Sch.util.Date.DAY, 1);
    }
    f[0].cls = 'sch-nested-hdr-cell-first';
    f[f.length - 1].cls = 'sch-nested-hdr-cell-last';
    return b.apply(f);
  }, dayStartEndHours:function(e, d, c) {
    c.headerCls = 'sch-hdr-startend';
    return Ext.String.format('\x3cspan class\x3d"sch-hdr-start"\x3e{0}\x3c/span\x3e\x3cspan class\x3d"sch-hdr-end"\x3e{1}\x3c/span\x3e', Ext.Date.format(e, 'G'), Ext.Date.format(d, 'G'));
  }};
}});
Ext.define('Sch.model.Customizable', {extend:'Ext.data.Model', customizableFields:null, onClassExtended:function(b, d, a) {
  var c = a.onBeforeCreated;
  a.onBeforeCreated = function(f, k) {
    c.call(this, f, k);
    var j = f.prototype;
    if (!j.customizableFields) {
      return;
    }
    j.customizableFields = (f.superclass.customizableFields || []).concat(j.customizableFields);
    var g = j.customizableFields;
    var i = {};
    Ext.Array.each(g, function(l) {
      if (typeof l == 'string') {
        l = {name:l};
      }
      i[l.name] = l;
    });
    var e = j.fields;
    var h = [];
    e.each(function(l) {
      if (l.isCustomizableField) {
        h.push(l);
      }
    });
    e.removeAll(h);
    Ext.Object.each(i, function(l, o) {
      o.isCustomizableField = true;
      var p = o.name;
      var t = p === 'Id' ? 'idProperty' : p.charAt(0).toLowerCase() + p.substr(1) + 'Field';
      var q = j[t];
      var s = q || p;
      if (e.containsKey(s)) {
        e.getByKey(s).isCustomizableField = true;
        g.push(new Ext.data.Field(Ext.applyIf({name:p, isCustomizableField:true}, e.getByKey(s))));
      } else {
        e.add(new Ext.data.Field(Ext.applyIf({name:s, isCustomizableField:true}, o)));
      }
      var n = Ext.String.capitalize(p);
      if (n != 'Id') {
        var r = 'get' + n;
        var m = 'set' + n;
        if (!j[r] || j[r].__getterFor__ && j[r].__getterFor__ != s) {
          j[r] = function() {
            return this.data[s];
          };
          j[r].__getterFor__ = s;
        }
        if (!j[m] || j[m].__setterFor__ && j[m].__setterFor__ != s) {
          j[m] = function(u) {
            return this.set(s, u);
          };
          j[m].__setterFor__ = s;
        }
      }
    });
  };
}, set:function(c, b) {
  if (arguments.length === 2) {
    this.previous = this.previous || {};
    var a = this.get(c);
    if (a !== b) {
      this.previous[c] = a;
    }
  }
  this.callParent(arguments);
}, afterEdit:function() {
  this.callParent(arguments);
  delete this.previous;
}, reject:function() {
  var b = this, a = b.modified, c;
  b.previous = b.previous || {};
  for (c in a) {
    if (a.hasOwnProperty(c)) {
      if (typeof a[c] != 'function') {
        b.previous[c] = b.get(c);
      }
    }
  }
  b.callParent(arguments);
  delete b.previous;
}});
Ext.define('Sch.patches.Model', {extend:'Sch.util.Patch', requires:'Sch.model.Customizable', reportURL:'http://www.sencha.com/forum/showthread.php?198250-4.1-Ext.data.Model-regression', description:'In Ext 4.1 Models cannot be subclassed', maxVersion:'4.1.0', applyFn:function() {
  try {
    Ext.define('Sch.foo', {extend:'Ext.data.Model', fields:['a']});
    Ext.define('Sch.foo.Sub', {extend:'Sch.foo', fields:['a']});
  } catch (a) {
    Ext.data.Types.AUTO.convert = function(b) {
      return b;
    };
  }
}});
Ext.define('Sch.model.Range', {extend:'Sch.model.Customizable', requires:['Sch.util.Date', 'Sch.patches.DataOperation'], startDateField:'StartDate', endDateField:'EndDate', nameField:'Name', clsField:'Cls', customizableFields:[{name:'StartDate', type:'date', dateFormat:'c'}, {name:'EndDate', type:'date', dateFormat:'c'}, {name:'Cls', type:'string'}, {name:'Name', type:'string'}], setStartEndDate:function(b, a) {
  this.beginEdit();
  this.set(this.startDateField, b);
  this.set(this.endDateField, a);
  this.endEdit();
}, getDates:function() {
  var c = [], b = this.getEndDate();
  for (var a = Ext.Date.clearTime(this.getStartDate(), true); a < b; a = Sch.util.Date.add(a, Sch.util.Date.DAY, 1)) {
    c.push(a);
  }
  return c;
}, forEachDate:function(b, a) {
  return Ext.each(this.getDates(), b, a);
}, isValid:function() {
  var b = this.callParent(arguments);
  if (b) {
    var c = this.getStartDate(), a = this.getEndDate();
    b = !c || !a || a - c >= 0;
  }
  return b;
}, shift:function(b, a) {
  this.setStartEndDate(Sch.util.Date.add(this.getStartDate(), b, a), Sch.util.Date.add(this.getEndDate(), b, a));
}});
Ext.define('Sch.model.Resource', {extend:'Sch.model.Customizable', idProperty:'Id', nameField:'Name', customizableFields:['Id', {name:'Name', type:'string'}], getEventStore:function() {
  return this.stores[0] && this.stores[0].eventStore || this.parentNode && this.parentNode.getEventStore();
}, getEvents:function(d) {
  var c = [], e, f = this.getId() || this.internalId;
  d = d || this.getEventStore();
  for (var b = 0, a = d.getCount(); b < a; b++) {
    e = d.getAt(b);
    if (e.data[e.resourceIdField] === f) {
      c.push(e);
    }
  }
  return c;
}});
Ext.define('Sch.data.mixin.ResourceStore', {});
Ext.define('Sch.data.ResourceStore', {extend:'Ext.data.Store', model:'Sch.model.Resource', mixins:['Sch.data.mixin.ResourceStore']});
Ext.define('Sch.data.TimeAxis', {extend:'Ext.util.Observable', requires:['Ext.data.JsonStore', 'Sch.util.Date'], continuous:true, autoAdjust:true, constructor:function(a) {
  Ext.apply(this, a);
  this.originalContinuous = this.continuous;
  this.addEvents('beforereconfigure', 'reconfigure');
  this.tickStore = new Ext.data.JsonStore({fields:['start', 'end']});
  this.tickStore.on('datachanged', function() {
    this.fireEvent('reconfigure', this);
  }, this);
  this.callParent(arguments);
}, reconfigure:function(a) {
  Ext.apply(this, a);
  var c = this.tickStore, b = this.generateTicks(this.start, this.end, this.unit, this.increment || 1, this.mainUnit);
  if (this.fireEvent('beforereconfigure', this, this.start, this.end) !== false) {
    c.suspendEvents(true);
    c.loadData(b);
    if (c.getCount() === 0) {
      Ext.Error.raise('Invalid time axis configuration or filter, please check your input data.');
    }
    c.resumeEvents();
  }
}, setTimeSpan:function(b, a) {
  this.reconfigure({start:b, end:a});
}, filterBy:function(b, a) {
  this.continuous = false;
  a = a || this;
  var c = this.tickStore;
  c.clearFilter(true);
  c.suspendEvents(true);
  c.filter([{filterFn:function(e, d) {
    return b.call(a, e.data, d);
  }}]);
  if (c.getCount() === 0) {
    Ext.Error.raise('Invalid time axis filter - no columns passed through the filter. Please check your filter method.');
    this.clearFilter();
  }
  c.resumeEvents();
}, isContinuous:function() {
  return this.continuous && !this.tickStore.isFiltered();
}, clearFilter:function() {
  this.continuous = this.originalContinuous;
  this.tickStore.clearFilter();
}, generateTicks:function(a, d, g, i) {
  var h = [], f, b = Sch.util.Date, e = 0;
  g = g || this.unit;
  i = i || this.increment;
  if (this.autoAdjust) {
    a = this.floorDate(a || this.getStart(), false);
    d = this.ceilDate(d || b.add(a, this.mainUnit, this.defaultSpan), false);
  }
  while (a < d) {
    f = this.getNext(a, g, i);
    if (g === b.HOUR && i > 1 && h.length > 0 && e === 0) {
      var c = h[h.length - 1];
      e = (c.start.getHours() + i) % 24 - c.end.getHours();
      if (e !== 0) {
        f = b.add(f, b.HOUR, e);
      }
    }
    h.push({start:a, end:f});
    a = f;
  }
  return h;
}, getTickFromDate:function(c) {
  if (this.getStart() > c || this.getEnd() < c) {
    return -1;
  }
  var f = this.tickStore.getRange(), e, a, d, b;
  for (d = 0, b = f.length; d < b; d++) {
    a = f[d].data.end;
    if (c <= a) {
      e = f[d].data.start;
      return d + (c > e ? (c - e) / (a - e) : 0);
    }
  }
  return -1;
}, getDateFromTick:function(d, f) {
  var g = this.tickStore.getCount();
  if (d === g) {
    return this.getEnd();
  }
  var a = Math.floor(d), e = d - a, c = this.getAt(a);
  var b = Sch.util.Date.add(c.start, Sch.util.Date.MILLI, e * (c.end - c.start));
  if (f) {
    b = this[f + 'Date'](b);
  }
  return b;
}, getAt:function(a) {
  return this.tickStore.getAt(a).data;
}, getCount:function() {
  return this.tickStore.getCount();
}, getTicks:function() {
  var a = [];
  this.tickStore.each(function(b) {
    a.push(b.data);
  });
  return a;
}, getStart:function() {
  return Ext.Date.clone(this.tickStore.first().data.start);
}, getEnd:function() {
  return Ext.Date.clone(this.tickStore.last().data.end);
}, roundDate:function(r) {
  var l = Ext.Date.clone(r), b = this.getStart(), s = this.resolutionIncrement;
  switch(this.resolutionUnit) {
    case Sch.util.Date.MILLI:
      var e = Sch.util.Date.getDurationInMilliseconds(b, l), d = Math.round(e / s) * s;
      l = Sch.util.Date.add(b, Sch.util.Date.MILLI, d);
      break;
    case Sch.util.Date.SECOND:
      var i = Sch.util.Date.getDurationInSeconds(b, l), q = Math.round(i / s) * s;
      l = Sch.util.Date.add(b, Sch.util.Date.MILLI, q * 1000);
      break;
    case Sch.util.Date.MINUTE:
      var n = Sch.util.Date.getDurationInMinutes(b, l), a = Math.round(n / s) * s;
      l = Sch.util.Date.add(b, Sch.util.Date.SECOND, a * 60);
      break;
    case Sch.util.Date.HOUR:
      var m = Sch.util.Date.getDurationInHours(this.getStart(), l), j = Math.round(m / s) * s;
      l = Sch.util.Date.add(b, Sch.util.Date.MINUTE, j * 60);
      break;
    case Sch.util.Date.DAY:
      var c = Sch.util.Date.getDurationInDays(b, l), f = Math.round(c / s) * s;
      l = Sch.util.Date.add(b, Sch.util.Date.DAY, f);
      break;
    case Sch.util.Date.WEEK:
      Ext.Date.clearTime(l);
      var o = l.getDay() - this.weekStartDay, t;
      if (o < 0) {
        o = 7 + o;
      }
      if (Math.round(o / 7) === 1) {
        t = 7 - o;
      } else {
        t = -o;
      }
      l = Sch.util.Date.add(l, Sch.util.Date.DAY, t);
      break;
    case Sch.util.Date.MONTH:
      var p = Sch.util.Date.getDurationInMonths(b, l) + l.getDate() / Ext.Date.getDaysInMonth(l), h = Math.round(p / s) * s;
      l = Sch.util.Date.add(b, Sch.util.Date.MONTH, h);
      break;
    case Sch.util.Date.QUARTER:
      Ext.Date.clearTime(l);
      l.setDate(1);
      l = Sch.util.Date.add(l, Sch.util.Date.MONTH, 3 - l.getMonth() % 3);
      break;
    case Sch.util.Date.YEAR:
      var k = Sch.util.Date.getDurationInYears(b, l), g = Math.round(k / s) * s;
      l = Sch.util.Date.add(b, Sch.util.Date.YEAR, g);
      break;
  }
  return l;
}, floorDate:function(t, d, v) {
  d = d !== false;
  var n = Ext.Date.clone(t), b = d ? this.getStart() : null, u = this.resolutionIncrement, k;
  if (v) {
    k = v;
  } else {
    k = d ? this.resolutionUnit : this.mainUnit;
  }
  switch(k) {
    case Sch.util.Date.MILLI:
      if (d) {
        var f = Sch.util.Date.getDurationInMilliseconds(b, n), e = Math.floor(f / u) * u;
        n = Sch.util.Date.add(b, Sch.util.Date.MILLI, e);
      }
      break;
    case Sch.util.Date.SECOND:
      if (d) {
        var j = Sch.util.Date.getDurationInSeconds(b, n), s = Math.floor(j / u) * u;
        n = Sch.util.Date.add(b, Sch.util.Date.MILLI, s * 1000);
      } else {
        n.setMilliseconds(0);
      }
      break;
    case Sch.util.Date.MINUTE:
      if (d) {
        var p = Sch.util.Date.getDurationInMinutes(b, n), a = Math.floor(p / u) * u;
        n = Sch.util.Date.add(b, Sch.util.Date.SECOND, a * 60);
      } else {
        n.setSeconds(0);
        n.setMilliseconds(0);
      }
      break;
    case Sch.util.Date.HOUR:
      if (d) {
        var o = Sch.util.Date.getDurationInHours(this.getStart(), n), l = Math.floor(o / u) * u;
        n = Sch.util.Date.add(b, Sch.util.Date.MINUTE, l * 60);
      } else {
        n.setMinutes(0);
        n.setSeconds(0);
        n.setMilliseconds(0);
      }
      break;
    case Sch.util.Date.DAY:
      if (d) {
        var c = Sch.util.Date.getDurationInDays(b, n), g = Math.floor(c / u) * u;
        n = Sch.util.Date.add(b, Sch.util.Date.DAY, g);
      } else {
        Ext.Date.clearTime(n);
      }
      break;
    case Sch.util.Date.WEEK:
      var r = n.getDay();
      Ext.Date.clearTime(n);
      if (r !== this.weekStartDay) {
        n = Sch.util.Date.add(n, Sch.util.Date.DAY, -(r > this.weekStartDay ? r - this.weekStartDay : 7 - r - this.weekStartDay));
      }
      break;
    case Sch.util.Date.MONTH:
      if (d) {
        var q = Sch.util.Date.getDurationInMonths(b, n), i = Math.floor(q / u) * u;
        n = Sch.util.Date.add(b, Sch.util.Date.MONTH, i);
      } else {
        Ext.Date.clearTime(n);
        n.setDate(1);
      }
      break;
    case Sch.util.Date.QUARTER:
      Ext.Date.clearTime(n);
      n.setDate(1);
      n = Sch.util.Date.add(n, Sch.util.Date.MONTH, -(n.getMonth() % 3));
      break;
    case Sch.util.Date.YEAR:
      if (d) {
        var m = Sch.util.Date.getDurationInYears(b, n), h = Math.floor(m / u) * u;
        n = Sch.util.Date.add(b, Sch.util.Date.YEAR, h);
      } else {
        n = new Date(t.getFullYear(), 0, 1);
      }
      break;
  }
  return n;
}, ceilDate:function(c, b, f) {
  var e = Ext.Date.clone(c);
  b = b !== false;
  var a = b ? this.resolutionIncrement : 1, g = false, d;
  if (f) {
    d = f;
  } else {
    d = b ? this.resolutionUnit : this.mainUnit;
  }
  switch(d) {
    case Sch.util.Date.DAY:
      if (e.getMinutes() > 0 || e.getSeconds() > 0 || e.getMilliseconds() > 0) {
        g = true;
      }
      break;
    case Sch.util.Date.WEEK:
      Ext.Date.clearTime(e);
      if (e.getDay() !== this.weekStartDay) {
        g = true;
      }
      break;
    case Sch.util.Date.MONTH:
      Ext.Date.clearTime(e);
      if (e.getDate() !== 1) {
        g = true;
      }
      break;
    case Sch.util.Date.QUARTER:
      Ext.Date.clearTime(e);
      if (e.getMonth() % 3 !== 0) {
        g = true;
      }
      break;
    case Sch.util.Date.YEAR:
      Ext.Date.clearTime(e);
      if (e.getMonth() !== 0 && e.getDate() !== 1) {
        g = true;
      }
      break;
    default:
      break;
  }
  if (g) {
    return this.getNext(e, d, a);
  } else {
    return e;
  }
}, getNext:function(b, c, a) {
  return Sch.util.Date.getNext(b, c, a, this.weekStartDay);
}, getResolution:function() {
  return {unit:this.resolutionUnit, increment:this.resolutionIncrement};
}, setResolution:function(b, a) {
  this.resolutionUnit = b;
  this.resolutionIncrement = a || 1;
}, shiftNext:function(a) {
  a = a || this.getShiftIncrement();
  var b = this.getShiftUnit();
  this.setTimeSpan(Sch.util.Date.add(this.getStart(), b, a), Sch.util.Date.add(this.getEnd(), b, a));
}, shiftPrevious:function(a) {
  a = -(a || this.getShiftIncrement());
  var b = this.getShiftUnit();
  this.setTimeSpan(Sch.util.Date.add(this.getStart(), b, a), Sch.util.Date.add(this.getEnd(), b, a));
}, getShiftUnit:function() {
  return this.shiftUnit || this.getMainUnit();
}, getShiftIncrement:function() {
  return this.shiftIncrement || 1;
}, getUnit:function() {
  return this.unit;
}, getIncrement:function() {
  return this.increment;
}, timeSpanInAxis:function(b, a) {
  if (this.continuous) {
    return Sch.util.Date.intersectSpans(b, a, this.getStart(), this.getEnd());
  } else {
    return a > b && this.getTickFromDate(b) !== this.getTickFromDate(a);
  }
}, forEachInterval:function(b, a, c) {
  c = c || this;
  if (b === 'top' || b === 'middle' && this.headerConfig.bottom) {
    this.forEachAuxInterval(b, a, c);
  } else {
    this.tickStore.each(function(e, d) {
      return a.call(c, e.data.start, e.data.end, d);
    });
  }
}, forEachMainInterval:function(a, b) {
  this.forEachInterval('middle', a, b);
}, forEachAuxInterval:function(b, a, f) {
  f = f || this;
  var c = this.getEnd(), g = this.getStart(), e = 0, d;
  while (g < c) {
    d = Sch.util.Date.min(this.getNext(g, this.headerConfig[b].unit, this.headerConfig[b].increment || 1), c);
    a.call(f, g, d, e);
    g = d;
    e++;
  }
}});
Ext.define('Sch.preset.Manager', {extend:'Ext.util.MixedCollection', requires:['Sch.util.Date', 'Sch.util.HeaderRenderers'], singleton:true, constructor:function() {
  this.callParent(arguments);
  this.registerDefaults();
}, registerPreset:function(b, a) {
  if (a) {
    var c = a.headerConfig;
    var d = Sch.util.Date;
    for (var e in c) {
      if (c.hasOwnProperty(e)) {
        if (d[c[e].unit]) {
          c[e].unit = d[c[e].unit.toUpperCase()];
        }
      }
    }
    if (!a.timeColumnWidth) {
      a.timeColumnWidth = 50;
    }
    if (a.timeResolution && d[a.timeResolution.unit]) {
      a.timeResolution.unit = d[a.timeResolution.unit.toUpperCase()];
    }
    if (a.shiftUnit && d[a.shiftUnit]) {
      a.shiftUnit = d[a.shiftUnit.toUpperCase()];
    }
  }
  if (this.isValidPreset(a)) {
    if (this.containsKey(b)) {
      this.removeAtKey(b);
    }
    this.add(b, a);
  } else {
    throw 'Invalid preset, please check your configuration';
  }
}, isValidPreset:function(a) {
  var d = Sch.util.Date, b = true, c = Sch.util.Date.units;
  for (var e in a.headerConfig) {
    if (a.headerConfig.hasOwnProperty(e)) {
      b = b && Ext.Array.indexOf(c, a.headerConfig[e].unit) >= 0;
    }
  }
  if (a.timeResolution) {
    b = b && Ext.Array.indexOf(c, a.timeResolution.unit) >= 0;
  }
  if (a.shiftUnit) {
    b = b && Ext.Array.indexOf(c, a.shiftUnit) >= 0;
  }
  return b;
}, getPreset:function(a) {
  return this.get(a);
}, deletePreset:function(a) {
  this.removeAtKey(a);
}, registerDefaults:function() {
  var b = this, a = this.defaultPresets;
  for (var c in a) {
    b.registerPreset(c, a[c]);
  }
}, defaultPresets:{minuteAndHour:{timeColumnWidth:100, rowHeight:24, resourceColumnWidth:100, displayDateFormat:'G:i', shiftIncrement:1, shiftUnit:'HOUR', defaultSpan:24, timeResolution:{unit:'MINUTE', increment:30}, headerConfig:{middle:{unit:'MINUTE', increment:'30', dateFormat:'i'}, top:{unit:'HOUR', dateFormat:'D, GA/m'}}}, hourAndDay:{timeColumnWidth:60, rowHeight:24, resourceColumnWidth:100, displayDateFormat:'G:i', shiftIncrement:1, shiftUnit:'DAY', defaultSpan:24, timeResolution:{unit:'MINUTE', 
increment:30}, headerConfig:{middle:{unit:'HOUR', dateFormat:'G:i'}, top:{unit:'DAY', dateFormat:'D d/m'}}}, dayAndWeek:{timeColumnWidth:100, rowHeight:24, resourceColumnWidth:100, displayDateFormat:'Y-m-d G:i', shiftUnit:'DAY', shiftIncrement:1, defaultSpan:5, timeResolution:{unit:'HOUR', increment:1}, headerConfig:{middle:{unit:'DAY', dateFormat:'D d M'}, top:{unit:'WEEK', dateFormat:'W M Y', renderer:function(c, b, a) {
  return Sch.util.Date.getShortNameOfUnit('WEEK') + '.' + Ext.Date.format(c, 'W M Y');
}}}}, weekAndDay:{timeColumnWidth:100, rowHeight:24, resourceColumnWidth:100, displayDateFormat:'G:i', shiftIncrement:1, shiftUnit:'HOUR', defaultSpan:24, timeResolution:{unit:'MINUTE', increment:30}, headerConfig:{middle:{unit:'MINUTE', increment:'30', dateFormat:'i'}, top:{unit:'HOUR', dateFormat:'D, GA/m'}}}, hourAndDay:{timeColumnWidth:60, rowHeight:24, resourceColumnWidth:100, displayDateFormat:'G:i', shiftIncrement:1, shiftUnit:'DAY', defaultSpan:24, timeResolution:{unit:'MINUTE', increment:30}, 
headerConfig:{middle:{unit:'HOUR', dateFormat:'G:i'}, top:{unit:'DAY', dateFormat:'D d/m'}}}, dayAndWeek:{timeColumnWidth:100, rowHeight:24, resourceColumnWidth:100, displayDateFormat:'Y-m-d G:i', shiftUnit:'DAY', shiftIncrement:1, defaultSpan:5, timeResolution:{unit:'HOUR', increment:1}, headerConfig:{middle:{unit:'DAY', dateFormat:'D d M'}, top:{unit:'WEEK', dateFormat:'W M Y', renderer:function(c, b, a) {
  return Sch.util.Date.getShortNameOfUnit('WEEK') + '.' + Ext.Date.format(c, 'W M Y');
}}}}, weekAndDay:{timeColumnWidth:100, rowHeight:24, resourceColumnWidth:100, displayDateFormat:'Y-m-d', shiftUnit:'WEEK', shiftIncrement:1, defaultSpan:1, timeResolution:{unit:'DAY', increment:1}, headerConfig:{bottom:{unit:'DAY', increment:1, dateFormat:'d/m'}, middle:{unit:'WEEK', dateFormat:'D d M', align:'left'}}}, weekAndMonth:{timeColumnWidth:100, rowHeight:24, resourceColumnWidth:100, displayDateFormat:'Y-m-d', shiftUnit:'WEEK', shiftIncrement:5, defaultSpan:6, timeResolution:{unit:'DAY', 
increment:1}, headerConfig:{middle:{unit:'WEEK', renderer:function(c, b, a) {
  a.align = 'left';
  return Ext.Date.format(c, 'd M');
}}, top:{unit:'MONTH', dateFormat:'M Y'}}}, monthAndYear:{timeColumnWidth:110, rowHeight:24, resourceColumnWidth:100, displayDateFormat:'Y-m-d', shiftIncrement:3, shiftUnit:'MONTH', defaultSpan:12, timeResolution:{unit:'DAY', increment:1}, headerConfig:{middle:{unit:'MONTH', dateFormat:'M Y'}, top:{unit:'YEAR', dateFormat:'Y'}}}, year:{timeColumnWidth:100, rowHeight:24, resourceColumnWidth:100, displayDateFormat:'Y-m-d', shiftUnit:'YEAR', shiftIncrement:1, defaultSpan:1, timeResolution:{unit:'MONTH', 
increment:1}, headerConfig:{bottom:{unit:'QUARTER', renderer:function(c, b, a) {
  return Ext.String.format(Sch.util.Date.getShortNameOfUnit('QUARTER').toUpperCase() + '{0}', Math.floor(c.getMonth() / 3) + 1);
}}, middle:{unit:'YEAR', dateFormat:'Y'}}}, weekAndDayLetter:{timeColumnWidth:20, rowHeight:24, resourceColumnWidth:100, displayDateFormat:'Y-m-d', shiftUnit:'WEEK', shiftIncrement:1, defaultSpan:10, timeResolution:{unit:'DAY', increment:1}, headerConfig:{bottom:{unit:'DAY', increment:1, renderer:function(a) {
  return Ext.Date.dayNames[a.getDay()].substring(0, 1);
}}, middle:{unit:'WEEK', dateFormat:'D d M Y', align:'left'}}}, weekDateAndMonth:{timeColumnWidth:30, rowHeight:24, resourceColumnWidth:100, displayDateFormat:'Y-m-d', shiftUnit:'WEEK', shiftIncrement:1, defaultSpan:10, timeResolution:{unit:'DAY', increment:1}, headerConfig:{middle:{unit:'WEEK', dateFormat:'d'}, top:{unit:'MONTH', dateFormat:'Y F', align:'left'}}}}});
Ext.define('Sch.feature.AbstractTimeSpan', {extend:'Ext.AbstractPlugin', lockableScope:'normal', schedulerView:null, timeAxis:null, containerEl:null, expandToFitView:false, disabled:false, cls:null, template:null, store:null, renderElementsBuffered:false, renderDelay:15, constructor:function(a) {
  this.uniqueCls = this.uniqueCls || 'sch-timespangroup-' + Ext.id();
  Ext.apply(this, a);
}, setDisabled:function(a) {
  if (a) {
    this.removeElements();
  }
  this.disabled = a;
}, getElements:function() {
  if (this.containerEl) {
    return this.containerEl.select('.' + this.uniqueCls);
  }
  return null;
}, removeElements:function() {
  var a = this.getElements();
  if (a) {
    a.remove();
  }
}, init:function(a) {
  this.timeAxis = a.getTimeAxis();
  this.schedulerView = a.getSchedulingView();
  if (!this.store) {
    Ext.Error.raise('Error: You must define a store for this plugin');
  }
  this.schedulerView.on({afterrender:this.onAfterRender, destroy:this.onDestroy, scope:this});
}, onAfterRender:function(b) {
  var a = this.schedulerView;
  this.containerEl = a.el;
  a.mon(this.store, {load:this.renderElements, datachanged:this.renderElements, clear:this.renderElements, add:this.renderElements, remove:this.renderElements, update:this.refreshSingle, scope:this});
  if (Ext.data.NodeStore && a.store instanceof Ext.data.NodeStore) {
    if (a.animate) {
    } else {
      a.mon(a.store, {expand:this.renderElements, collapse:this.renderElements, scope:this});
    }
  }
  a.on({refresh:this.renderElements, itemadd:this.renderElements, itemremove:this.renderElements, itemupdate:this.renderElements, groupexpand:this.renderElements, groupcollapse:this.renderElements, columnwidthchange:this.renderElements, resize:this.renderElements, scope:this});
  a.headerCt.on({add:this.renderElements, remove:this.renderElements, scope:this});
  a.ownerCt.up('panel').on({viewchange:this.renderElements, orientationchange:this.renderElements, scope:this});
  this.renderElements();
}, renderElements:function() {
  if (this.renderElementsBuffered || this.disabled || this.schedulerView.headerCt.getColumnCount() === 0) {
    return;
  }
  this.renderElementsBuffered = true;
  Ext.Function.defer(this.renderElementsInternal, this.renderDelay, this);
}, renderElementsInternal:function() {
  this.renderElementsBuffered = false;
  if (this.disabled || this.schedulerView.isDestroyed || this.schedulerView.headerCt.getColumnCount() === 0) {
    return;
  }
  this.removeElements();
  var c = this.timeAxis.getStart(), a = this.timeAxis.getEnd(), b = this.getElementData(c, a);
  this.template.insertFirst(this.containerEl, b);
}, getElementData:function(b, a) {
  throw 'Abstract method call';
}, onDestroy:function() {
  if (this.store.autoDestroy) {
    this.store.destroy();
  }
}, refreshSingle:function(c, b) {
  var e = Ext.get(this.uniqueCls + '-' + b.internalId);
  if (e) {
    var g = this.timeAxis.getStart(), a = this.timeAxis.getEnd(), f = this.getElementData(g, a, [b])[0], d = b.clsField || 'Cls';
    e.dom.className = this.cls + ' ' + this.uniqueCls + ' ' + (f[d] || '');
    e.setTop(f.top);
    e.setLeft(f.left);
    e.setSize(f.width, f.height);
  } else {
    this.renderElements();
  }
}});
Ext.define('Sch.plugin.Lines', {extend:'Sch.feature.AbstractTimeSpan', cls:'sch-timeline', showTip:true, innerTpl:null, init:function(b) {
  this.callParent(arguments);
  var a = this.schedulerView;
  if (Ext.isString(this.innerTpl)) {
    this.innerTpl = new Ext.XTemplate(this.innerTpl);
  }
  var c = this.innerTpl;
  if (!this.template) {
    this.template = new Ext.XTemplate('\x3ctpl for\x3d"."\x3e', '\x3cdiv id\x3d"' + this.uniqueCls + '-{id}"' + (this.showTip ? 'title\x3d"{[this.getTipText(values)]}" ' : '') + 'class\x3d"' + this.cls + ' ' + this.uniqueCls + ' {Cls}" style\x3d"left:{left}px;top:{top}px;height:{height}px;width:{width}px"\x3e' + (c ? '{[this.renderInner(values)]}' : '') + '\x3c/div\x3e', '\x3c/tpl\x3e', {getTipText:function(d) {
      return a.getFormattedDate(d.Date) + ' ' + (d.Text || '');
    }, renderInner:function(d) {
      return c.apply(d);
    }});
  }
}, getElementData:function(k, n, d) {
  var p = this.store, j = this.schedulerView, f = d || p.getRange(), h = [], o = this.containerEl.lastBox ? this.containerEl.lastBox.height : this.containerEl.getHeight(), a, c, m, b;
  for (var g = 0, e = f.length; g < e; g++) {
    a = f[g];
    c = a.get('Date');
    if (c && Ext.Date.between(c, k, n)) {
      m = j.getTimeSpanRegion(c, null, this.expandToFitView);
      h[h.length] = Ext.apply({id:a.internalId, left:m.left, top:m.top, width:Math.max(1, m.right - m.left), height:m.bottom - m.top}, a.data);
    }
  }
  return h;
}});
Ext.define('Sch.plugin.Zones', {extend:'Sch.feature.AbstractTimeSpan', innerTpl:null, requires:['Sch.model.Range'], cls:'sch-zone', init:function(a) {
  if (Ext.isString(this.innerTpl)) {
    this.innerTpl = new Ext.XTemplate(this.innerTpl);
  }
  var b = this.innerTpl;
  if (!this.template) {
    this.template = new Ext.XTemplate('\x3ctpl for\x3d"."\x3e\x3cdiv id\x3d"' + this.uniqueCls + '-{id}" class\x3d"' + this.cls + ' ' + this.uniqueCls + ' {Cls}" style\x3d"left:{left}px;top:{top}px;height:{height}px;width:{width}px"\x3e' + (b ? '{[this.renderInner(values)]}' : '') + '\x3c/div\x3e\x3c/tpl\x3e', {renderInner:function(c) {
      return b.apply(c);
    }});
  }
  this.callParent(arguments);
}, getElementData:function(j, n, c) {
  var o = this.store, h = this.schedulerView, e = c || o.getRange(), g = [], a, m, b, k;
  for (var f = 0, d = e.length; f < d; f++) {
    a = e[f];
    m = a.getStartDate();
    b = a.getEndDate();
    if (m && b && Sch.util.Date.intersectSpans(m, b, j, n)) {
      k = h.getTimeSpanRegion(Sch.util.Date.max(m, j), Sch.util.Date.min(b, n), this.expandToFitView);
      g[g.length] = Ext.apply({id:a.internalId, left:k.left, top:k.top, width:k.right - k.left, height:k.bottom - k.top, Cls:a.getCls()}, a.data);
    }
  }
  return g;
}});
Ext.define('Sch.plugin.Pan', {alias:'plugin.pan', extend:'Ext.AbstractPlugin', lockableScope:'normal', enableVerticalPan:true, panel:null, constructor:function(a) {
  Ext.apply(this, a);
}, init:function(a) {
  this.panel = a.normalGrid || a;
  this.view = a.getSchedulingView();
  this.view.on('afterrender', this.onRender, this);
}, onRender:function(a) {
  this.view.el.on('mousedown', this.onMouseDown, this, {delegate:'.' + this.view.timeCellCls});
}, onMouseDown:function(b, a) {
  if (b.getTarget('.' + this.view.timeCellCls) && !b.getTarget(this.view.eventSelector)) {
    this.mouseX = b.getPageX();
    this.mouseY = b.getPageY();
    Ext.getBody().on('mousemove', this.onMouseMove, this);
    Ext.getDoc().on('mouseup', this.onMouseUp, this);
  }
}, onMouseMove:function(d) {
  d.stopEvent();
  var a = d.getPageX(), f = d.getPageY(), c = a - this.mouseX, b = f - this.mouseY;
  this.panel.scrollByDeltaX(-c);
  this.mouseX = a;
  this.mouseY = f;
  if (this.enableVerticalPan) {
    this.panel.scrollByDeltaY(-b);
  }
}, onMouseUp:function(a) {
  Ext.getBody().un('mousemove', this.onMouseMove, this);
  Ext.getDoc().un('mouseup', this.onMouseUp, this);
}});
Ext.define('Sch.view.Locking', {extend:'Ext.grid.LockingView', scheduleEventRelayRe:/^(schedule|event|beforeevent|afterevent|dragcreate|beforedragcreate|afterdragcreate|beforetooltipshow)/, constructor:function(b) {
  this.callParent(arguments);
  var e = this, g = [], a = e.scheduleEventRelayRe, f = b.normal.getView(), c = f.events, d;
  for (d in c) {
    if (c.hasOwnProperty(d) && a.test(d)) {
      g.push(d);
    }
  }
  e.relayEvents(f, g);
}, getElementFromEventRecord:function(a) {
  return this.normal.getView().getElementFromEventRecord(a);
}, onClear:function() {
  this.relayFn('onClear', arguments);
}, beginBulkUpdate:function() {
  this.relayFn('beginBulkUpdate', arguments);
}, endBulkUpdate:function() {
  this.relayFn('endBulkUpdate', arguments);
}, refreshKeepingScroll:function() {
  this.locked.getView().refresh();
  this.normal.getView().refreshKeepingScroll();
}});
Ext.define('Sch.column.Time', {extend:'Ext.grid.column.Column', alias:'timecolumn', draggable:false, groupable:false, hideable:false, sortable:false, fixed:true, align:'center', tdCls:'sch-timetd', menuDisabled:true, initComponent:function() {
  this.addEvents('timeheaderdblclick');
  this.enableBubble('timeheaderdblclick');
  this.callParent();
}, initRenderData:function() {
  var a = this;
  a.renderData.headerCls = a.renderData.headerCls || a.headerCls;
  return a.callParent(arguments);
}, onElDblClick:function(b, a) {
  this.callParent(arguments);
  this.fireEvent('timeheaderdblclick', this, this.startDate, this.endDate, b);
}}, function() {
  Sch.column.Time.prototype.renderTpl = Sch.column.Time.prototype.renderTpl.replace('column-header-inner', 'column-header-inner sch-timeheader {headerCls}');
});
Ext.define('Sch.column.timeAxis.Horizontal', {extend:'Ext.grid.column.Column', alias:'widget.timeaxiscolumn', requires:['Ext.Date', 'Ext.XTemplate', 'Sch.column.Time', 'Sch.preset.Manager'], cls:'sch-timeaxiscolumn', timeAxis:null, renderTpl:'\x3cdiv id\x3d"{id}-titleEl" class\x3d"' + Ext.baseCSSPrefix + 'column-header-inner"\x3e\x3cspan id\x3d"{id}-textEl" style\x3d"display:none" class\x3d"' + Ext.baseCSSPrefix + 'column-header-text"\x3e\x3c/span\x3e\x3ctpl if\x3d"topHeaderCells"\x3e{topHeaderCells}\x3c/tpl\x3e\x3ctpl if\x3d"middleHeaderCells"\x3e{middleHeaderCells}\x3c/tpl\x3e\x3c/div\x3e{%this.renderContainer(out,values)%}', 
headerRowTpl:'\x3ctable border\x3d"0" cellspacing\x3d"0" cellpadding\x3d"0" style\x3d"{tstyle}" class\x3d"sch-header-row sch-header-row-{position}"\x3e\x3cthead\x3e\x3ctr\x3e{cells}\x3c/tr\x3e\x3c/thead\x3e\x3c/table\x3e', headerCellTpl:'\x3ctpl for\x3d"."\x3e\x3ctd class\x3d"sch-column-header x-column-header {headerCls}" style\x3d"position : static; text-align: {align}; {style}" tabIndex\x3d"0" id\x3d"{headerId}" headerPosition\x3d"{position}" headerIndex\x3d"{index}"\x3e\x3cdiv class\x3d"x-column-header-inner"\x3e{header}\x3c/div\x3e\x3c/td\x3e\x3c/tpl\x3e', 
columnConfig:{}, timeCellRenderer:null, timeCellRendererScope:null, columnWidth:null, previousWidth:null, previousHeight:null, initComponent:function() {
  if (!(this.headerRowTpl instanceof Ext.Template)) {
    this.headerRowTpl = Ext.create('Ext.XTemplate', this.headerRowTpl);
  }
  if (!(this.headerCellTpl instanceof Ext.Template)) {
    this.headerCellTpl = Ext.create('Ext.XTemplate', this.headerCellTpl);
  }
  this.columns = [{}];
  this.addEvents('timeheaderdblclick', 'timeaxiscolumnreconfigured');
  this.enableBubble('timeheaderdblclick');
  this.stubForResizer = new Ext.Component({isOnLeftEdge:function() {
    return false;
  }, isOnRightEdge:function() {
    return false;
  }, el:{dom:{style:{}}}});
  this.callParent(arguments);
  this.onTimeAxisReconfigure();
  this.mon(this.timeAxis, 'reconfigure', this.onTimeAxisReconfigure, this);
}, getSchedulingView:function() {
  return this.getOwnerHeaderCt().view;
}, onTimeAxisReconfigure:function() {
  var e = this.timeAxis, d = e.preset.timeColumnWidth, f = this.rendered && this.getSchedulingView(), g = e.headerConfig, b = e.getStart(), c = e.getEnd(), h = {renderer:this.timeColumnRenderer, scope:this, width:this.rendered ? f.calculateTimeColumnWidth(d) : d};
  delete this.previousWidth;
  delete this.previousHeight;
  var j = this.columnConfig = this.createColumns(this.timeAxis, g, h);
  Ext.suspendLayouts();
  this.removeAll();
  if (this.rendered) {
    var a = this.el.child('.x-column-header-inner');
    a.select('table').remove();
    var i = this.initRenderData();
    if (j.top) {
      Ext.core.DomHelper.append(a, i.topHeaderCells);
    }
    if (j.middle) {
      Ext.core.DomHelper.append(a, i.middleHeaderCells);
    }
    if (!j.top && !j.middle) {
      this.addCls('sch-header-single-row');
    } else {
      this.removeCls('sch-header-single-row');
    }
  }
  Ext.resumeLayouts();
  this.add(j.bottom);
  if (this.rendered) {
    if (this.fireEvent('timeaxiscolumnreconfigured', this) !== false) {
      f.refresh();
    }
  }
}, beforeRender:function() {
  var a = this.columnConfig;
  if (!a.middle && !a.top) {
    this.addCls('sch-header-single-row');
  }
  this.callParent(arguments);
}, timeColumnRenderer:function(i, e, f, l, d, c, k) {
  var a = '';
  if (Ext.isIE) {
    e.style += ';z-index:' + (this.items.getCount() - d);
  }
  if (this.timeCellRenderer) {
    var h = this.timeAxis, b = h.getAt(d), g = b.start, j = b.end;
    a = this.timeCellRenderer.call(this.timeCellRendererScope || this, e, f, l, d, c, g, j);
  }
  return a;
}, initRenderData:function() {
  var a = this.columnConfig;
  var c = a.top ? this.headerRowTpl.apply({cells:this.headerCellTpl.apply(a.top), position:'top', tstyle:'border-top : 0; width : 100px'}) : '';
  var b = a.middle ? this.headerRowTpl.apply({cells:this.headerCellTpl.apply(a.middle), position:'middle', tstyle:a.top ? 'width : 100px' : 'border-top : 0; width : 100px'}) : '';
  return Ext.apply(this.callParent(arguments), {topHeaderCells:c, middleHeaderCells:b});
}, defaultRenderer:function(c, b, a) {
  return Ext.Date.format(c, a);
}, createColumns:function(f, d, g) {
  if (!f || !d) {
    throw 'Invalid parameters passed to createColumns';
  }
  var c = [], a = d.bottom || d.middle, h, e = this;
  f.forEachInterval(d.bottom ? 'bottom' : 'middle', function(l, j, k) {
    h = {align:a.align || 'center', headerCls:'', startDate:l, endDate:j};
    if (a.renderer) {
      h.header = a.renderer.call(a.scope || e, l, j, h, k);
    } else {
      h.header = e.defaultRenderer(l, j, a.dateFormat);
    }
    c[c.length] = Ext.create('Sch.column.Time', Ext.apply(h, g));
  });
  var b = this.createHeaderRows(f, d);
  return {bottom:c, middle:b.middle, top:b.top};
}, createHeaderRows:function(e, c) {
  var d = {};
  if (c.top) {
    var a;
    if (c.top.cellGenerator) {
      a = c.top.cellGenerator.call(this, e.getStart(), e.getEnd());
    } else {
      a = this.createHeaderRow(e, c.top);
    }
    d.top = this.processHeaderRow(a, 'top');
  }
  if (c.bottom) {
    var b;
    if (c.middle.cellGenerator) {
      b = c.middle.cellGenerator.call(this, e.getStart(), e.getEnd());
    } else {
      b = this.createHeaderRow(e, c.middle);
    }
    d.middle = this.processHeaderRow(b, 'middle');
  }
  return d;
}, processHeaderRow:function(c, a) {
  var b = this;
  Ext.each(c, function(d, e) {
    d.index = e;
    d.position = a;
    d.headerId = b.stubForResizer.id;
  });
  return c;
}, createHeaderRow:function(e, k) {
  var n = [], l, a = e.getStart(), c = e.getEnd(), m = c - a, j = [], b = a, d = 0, f, g = k.align || 'center', h;
  while (b < c) {
    h = Sch.util.Date.min(e.getNext(b, k.unit, k.increment || 1), c);
    l = {align:g, start:b, end:h, headerCls:''};
    if (k.renderer) {
      l.header = k.renderer.call(k.scope || this, b, h, l, d);
    } else {
      l.header = this.defaultRenderer(b, h, k.dateFormat, l, d);
    }
    n.push(l);
    b = h;
    d++;
  }
  return n;
}, afterLayout:function() {
  delete this.columnWidth;
  this.callParent(arguments);
  var b = this.getWidth();
  var g = this.getHeight();
  if (b === this.previousWidth && g === this.previousHeight) {
    return;
  }
  this.previousWidth = b;
  this.previousHeight = g;
  var i = this.columnConfig;
  var e = this;
  var c = this.el;
  var f = i.top;
  var d = 0;
  var a = 0;
  if (f) {
    c.select('.sch-header-row-top').setWidth(this.lastBox.width);
    c.select('.sch-header-row-top td').each(function(l, m, j) {
      var k = e.getHeaderGroupCellWidth(f[j].start, f[j].end);
      l.setVisibilityMode(Ext.Element.DISPLAY);
      if (k) {
        d += k;
        l.show();
        l.setWidth(k);
      } else {
        l.hide();
      }
    });
  }
  var h = i.middle;
  if (h) {
    c.select('.sch-header-row-middle').setWidth(this.lastBox.width);
    c.select('.sch-header-row-middle td').each(function(l, m, j) {
      var k = e.getHeaderGroupCellWidth(h[j].start, h[j].end);
      l.setVisibilityMode(Ext.Element.DISPLAY);
      if (k) {
        a += k;
        l.show();
        l.setWidth(k);
      } else {
        l.hide();
      }
    });
  }
}, getHeaderGroupCellWidth:function(h, b) {
  var e = this.timeAxis.unit, d = this.timeAxis.increment, c, g = Sch.util.Date.getMeasuringUnit(e), a = Sch.util.Date.getDurationInUnit(h, b, g), f = this.getSchedulingView();
  if (this.timeAxis.isContinuous()) {
    c = a * f.getSingleUnitInPixels(g);
  } else {
    c = f.getXYFromDate(b)[0] - f.getXYFromDate(h)[0];
  }
  return c;
}, onElDblClick:function(d, f) {
  this.callParent(arguments);
  var e = d.getTarget('.sch-column-header');
  if (e) {
    var a = Ext.fly(e).getAttribute('headerPosition'), b = Ext.fly(e).getAttribute('headerIndex'), c = this.columnConfig[a][b];
    this.fireEvent('timeheaderdblclick', this, c.start, c.end, d);
  }
}, getTimeColumnWidth:function() {
  if (this.columnWidth === null) {
    this.columnWidth = this.items.get(0).getWidth();
  }
  return this.columnWidth;
}, setTimeColumnWidth:function(a) {
  this.suspendEvents();
  this.items.each(function(b) {
    b.setWidth(a);
  });
  this.resumeEvents();
}});
Ext.define('Sch.column.timeAxis.HorizontalSingle', {extend:'Sch.column.Time', alias:'widget.singletimeaxiscolumn', requires:['Ext.Date', 'Ext.XTemplate', 'Sch.preset.Manager'], cls:'sch-simple-timeaxis', timeAxis:null, trackHeaderOver:true, compactCellWidthThreshold:16, renderTpl:'\x3cdiv id\x3d"{id}-titleEl" class\x3d"' + Ext.baseCSSPrefix + 'column-header-inner"\x3e\x3cspan id\x3d"{id}-textEl" style\x3d"display:none" class\x3d"' + Ext.baseCSSPrefix + 'column-header-text"\x3e\x3c/span\x3e\x3ctpl if\x3d"topHeaderCells"\x3e{topHeaderCells}\x3c/tpl\x3e\x3ctpl if\x3d"middleHeaderCells"\x3e{middleHeaderCells}\x3c/tpl\x3e\x3ctpl if\x3d"bottomHeaderCells"\x3e{bottomHeaderCells}\x3c/tpl\x3e\x3c/div\x3e{%this.renderContainer(out,values)%}', 
headerRowTpl:'\x3ctable border\x3d"0" cellspacing\x3d"0" cellpadding\x3d"0" style\x3d"{tstyle}" class\x3d"sch-header-row sch-header-row-{position}"\x3e\x3cthead\x3e\x3ctr\x3e\x3ctpl for\x3d"cells"\x3e\x3ctd class\x3d"sch-column-header x-column-header {headerCls}" style\x3d"position : static; text-align: {align}; {style}" tabIndex\x3d"0" id\x3d"{headerId}" headerPosition\x3d"{parent.position}" headerIndex\x3d"{[xindex-1]}"\x3e\x3cdiv class\x3d"sch-simple-timeheader"\x3e{header}\x3c/div\x3e\x3c/td\x3e\x3c/tpl\x3e\x3c/tr\x3e\x3c/thead\x3e\x3c/table\x3e', 
columnConfig:{}, columnWidth:null, nbrTimeColumns:null, initComponent:function() {
  this.tdCls += ' sch-singletimetd';
  if (!(this.headerRowTpl instanceof Ext.Template)) {
    this.headerRowTpl = Ext.create('Ext.XTemplate', this.headerRowTpl);
  }
  this.addEvents('timeheaderdblclick', 'timeaxiscolumnreconfigured');
  this.enableBubble('timeheaderdblclick');
  this.callParent(arguments);
  this.onTimeAxisReconfigure();
  this.mon(this.timeAxis, 'reconfigure', this.onTimeAxisReconfigure, this);
  this.on('resize', this.refreshHeaderSizes, this);
  this.ownHoverCls = this.hoverCls;
  this.hoverCls = '';
}, getSchedulingView:function() {
  return this.getOwnerHeaderCt().view;
}, onTimeAxisReconfigure:function() {
  var h = this.timeAxis, g = h.preset.timeColumnWidth, j = this.rendered && this.getSchedulingView(), l = h.headerConfig, c = h.getStart(), f = h.getEnd(), d = this.rendered ? j.calculateTimeColumnWidth(g) : g;
  var o = this.columnConfig = this.createHeaderRows(l);
  var a = o.bottom || o.middle;
  if (this.rendered) {
    var e;
    var b = this.el.child('.x-column-header-inner');
    var i = b.dom;
    var k = i.style.display;
    var m = i.parentNode;
    i.style.display = 'none';
    m.removeChild(i);
    i.innerHTML = '';
    var n = this.initRenderData();
    if (o.top) {
      e = Ext.core.DomHelper.append(b, n.topHeaderCells);
      this.refreshHeaderRow('top', e);
    }
    if (o.middle) {
      e = Ext.core.DomHelper.append(b, n.middleHeaderCells);
      this.refreshHeaderRow('middle', e);
    }
    if (o.bottom) {
      e = Ext.core.DomHelper.append(b, n.bottomHeaderCells);
      this.refreshHeaderRow('bottom', e);
    }
    if (!o.top && !o.middle) {
      this.addCls('sch-header-single-row');
    } else {
      this.removeCls('sch-header-single-row');
    }
    m.appendChild(i);
    i.style.display = k;
    if (d !== this.columnWidth || this.nbrTimeColumns !== a.length) {
      this.nbrTimeColumns = a.length;
      this.setTimeColumnWidth(d);
    }
    if (this.fireEvent('timeaxiscolumnreconfigured', this) !== false) {
      j.refreshKeepingResourceScroll(true);
    }
  } else {
    if (d !== this.columnWidth || this.nbrTimeColumns !== a.length) {
      this.nbrTimeColumns = a.length;
      this.setTimeColumnWidth(d);
    }
  }
}, beforeRender:function() {
  var b = this, a = this.columnConfig;
  if (!a.middle && !a.top) {
    b.addCls('sch-header-single-row');
  }
  b.callParent(arguments);
}, afterRender:function() {
  var a = this;
  if (this.trackHeaderOver) {
    a.el.on({mousemove:a.highlightCell, delegate:'div.sch-simple-timeheader', scope:a});
    a.el.on({mouseleave:a.clearHighlight, scope:a});
  }
  a.callParent(arguments);
}, initRenderData:function() {
  var a = this.columnConfig;
  var c = a.top ? this.headerRowTpl.apply({cells:a.top, position:'top', tstyle:'border-top : 0; width : 100px'}) : '';
  var b = a.middle ? this.headerRowTpl.apply({cells:a.middle, position:'middle', tstyle:a.top ? 'width : 100px' : 'border-top : 0; width : 100px'}) : '';
  var d = a.bottom ? this.headerRowTpl.apply({cells:a.bottom, position:'bottom', tstyle:'width : 100px'}) : '';
  return Ext.apply(this.callParent(arguments), {topHeaderCells:c, middleHeaderCells:b, bottomHeaderCells:d});
}, defaultRenderer:function(c, b, a) {
  return Ext.Date.format(c, a);
}, createHeaderRows:function(a) {
  var b = {};
  for (var c in a) {
    if (a[c].cellGenerator) {
      b[c] = a[c].cellGenerator.call(this, this.timeAxis.getStart(), this.timeAxis.getEnd());
    } else {
      b[c] = this.createHeaderRow(c, a[c]);
    }
  }
  return b;
}, createHeaderRow:function(a, c) {
  var b = [], d = this, f, e = c.align || 'center';
  this.timeAxis.forEachInterval(a, function(j, g, h) {
    f = {align:e, start:j, end:g, headerCls:''};
    if (c.renderer) {
      f.header = c.renderer.call(c.scope || d, j, g, f, h);
    } else {
      f.header = d.defaultRenderer(j, g, c.dateFormat, f, h);
    }
    if (c.unit === Sch.util.Date.DAY && (!c.increment || c.increment === 1)) {
      f.headerCls += ' sch-dayheadercell-' + j.getDay();
    }
    b.push(f);
  });
  return b;
}, afterLayout:function() {
  this.callParent(arguments);
  this.refreshHeaderSizes();
}, refreshHeaderSizes:function() {
  var a = this.columnConfig;
  if (a.top) {
    this.refreshHeaderRow('top');
  }
  if (a.middle) {
    this.refreshHeaderRow('middle');
  }
  if (a.bottom) {
    this.refreshHeaderRow('bottom');
  }
}, refreshHeaderRow:function(a, b) {
  var e = this.el;
  var f = this.columnConfig[a];
  var d = this;
  var c;
  b = b || e.down('.sch-header-row-' + a, true);
  Ext.fly(b).setWidth(d.getTotalWidth());
  Ext.fly(b).select(' thead \x3e tr \x3e td').each(function(h, i, g) {
    c = d.getHeaderGroupCellWidth(f[g].start, f[g].end);
    h.setVisibilityMode(Ext.Element.DISPLAY);
    if (c) {
      if (Ext.isSafari && Ext.isMac) {
        c -= 2;
      }
      h.show();
      h.setWidth(c - (Ext.chromeVersion === 19 ? g ? 1 : 0 : 0));
    } else {
      h.hide();
    }
  });
  if (a === 'bottom') {
    if (c < this.compactCellWidthThreshold) {
      Ext.fly(b).addCls('sch-header-row-compact');
    } else {
      Ext.fly(b).removeCls('sch-header-row-compact');
    }
  }
}, getHeaderGroupCellWidth:function(h, b) {
  var e = this.timeAxis.unit, d = this.timeAxis.increment, c, g = Sch.util.Date.getMeasuringUnit(e), a = Sch.util.Date.getDurationInUnit(h, b, g), f = this.getSchedulingView();
  if (this.timeAxis.isContinuous()) {
    c = a * f.getSingleUnitInPixels(g);
  } else {
    c = f.getXYFromDate(b)[0] - f.getXYFromDate(h)[0];
  }
  return c;
}, onElDblClick:function(d, f) {
  var e = d.getTarget('.sch-column-header');
  if (e) {
    var a = Ext.fly(e).getAttribute('headerPosition'), b = Ext.fly(e).getAttribute('headerIndex'), c = this.columnConfig[a][b];
    this.fireEvent('timeheaderdblclick', this, c.start, c.end, d);
  }
}, getTimeColumnWidth:function() {
  if (this.columnWidth === null) {
    this.columnWidth = this.getWidth() / this.nbrTimeColumns;
  }
  return this.columnWidth;
}, setTimeColumnWidth:function(a) {
  this.columnWidth = a;
  if (this.rendered) {
    Ext.suspendLayouts();
    this.setWidth(a * this.nbrTimeColumns);
    Ext.resumeLayouts();
    this.refreshHeaderSizes();
    this.ownerCt.updateLayout();
  } else {
    this.setWidth(a * this.nbrTimeColumns);
  }
}, getTotalWidth:function() {
  return this.columnWidth * this.nbrTimeColumns;
}, highlightCell:function(c, a) {
  var b = this;
  if (a !== b.highlightedCell) {
    b.clearHighlight();
    b.highlightedCell = a;
    Ext.fly(a).addCls(b.ownHoverCls);
  }
}, clearHighlight:function() {
  var b = this, a = b.highlightedCell;
  if (a) {
    Ext.fly(a).removeCls(b.ownHoverCls);
    delete b.highlightedCell;
  }
}});
Ext.define('Sch.mixin.Lockable', {extend:'Ext.grid.Lockable', requires:['Sch.column.timeAxis.Horizontal', 'Sch.column.timeAxis.HorizontalSingle'], findEditingPlugin:function() {
  var b = this.plugins || [];
  var c = this;
  var a;
  Ext.each(b, function(e, d) {
    if (Ext.grid.plugin && Ext.grid.plugin.CellEditing && e instanceof Ext.grid.plugin.CellEditing) {
      a = e;
      Ext.Array.remove(b, e);
      return false;
    }
  });
  return a;
}, processSchedulerPlugins:function() {
  var e = [];
  var d = [];
  var g = [];
  var a = this.plugins || [];
  var c = this;
  for (var b = a.length - 1; b >= 0; b--) {
    var f = a[b];
    if (f.lockableScope) {
      switch(f.lockableScope) {
        case 'top':
          g.push(f);
          break;
        case 'locked':
          e.push(f);
          break;
        case 'normal':
          d.push(f);
          break;
      }
      Ext.Array.remove(a, f);
    }
  }
  if (e.length > 0) {
    c.lockedGridConfig.plugins = (c.lockedGridConfig.plugins || []).concat(e);
  }
  if (d.length > 0) {
    c.normalGridConfig.plugins = (c.normalGridConfig.plugins || []).concat(d);
  }
  c.topPlugins = g;
}, injectLockable:function() {
  var d = this.findEditingPlugin();
  var i = this;
  var f = Ext.data.TreeStore && i.store instanceof Ext.data.TreeStore;
  var j = i.store.buffered;
  var c = i.getEventSelectionModel ? i.getEventSelectionModel() : i.getSelectionModel();
  i.lockedGridConfig = i.lockedGridConfig || {};
  i.normalGridConfig = i.schedulerConfig || i.normalGridConfig || {};
  var a = i.lockedGridConfig, h = i.normalGridConfig;
  Ext.applyIf(i.lockedGridConfig, {enableLocking:false, lockable:false, useArrows:true, xtype:i.lockedXType, columnLines:i.columnLines, rowLines:i.rowLines, stateful:i.stateful, id:i.id + '_locked', delayScroll:function() {
    if (this.rendered) {
      return this.self.prototype.delayScroll.apply(this, arguments);
    }
  }, split:true, animCollapse:false, collapseDirection:'left', region:'west'});
  if (d) {
    i.lockedGridConfig.plugins = (i.lockedGridConfig.plugins || []).concat(d);
  }
  i.processSchedulerPlugins();
  Ext.applyIf(i.normalGridConfig, {layout:'fit', xtype:i.normalXType, viewType:i.viewType, enableLocking:false, lockable:false, sortableColumns:false, enableColumnMove:false, enableColumnResize:false, enableColumnHide:false, selModel:c, eventSelModel:c, _top:i, orientation:i.orientation, viewPreset:i.viewPreset, timeAxis:i.timeAxis, columnLines:i.columnLines, rowLines:i.rowLines, collapseDirection:'right', animCollapse:false, region:'center'});
  i.bothCfgCopy = i.bothCfgCopy || Ext.grid.Panel && Ext.grid.Panel.prototype.bothCfgCopy || ['invalidateScrollerOnRefresh', 'hideHeaders', 'enableColumnHide', 'enableColumnMove', 'enableColumnResize', 'sortableColumns'];
  if (i.orientation === 'vertical') {
    a.store = h.store = i.timeAxis.tickStore;
    i.mon(i.resourceStore, {clear:i.refreshResourceColumns, datachanged:i.refreshResourceColumns, load:i.refreshResourceColumns, scope:i});
  }
  if (a.width) {
    i.syncLockedWidth = Ext.emptyFn;
    a.scroll = 'horizontal';
    a.scrollerOwner = true;
  }
  if (i.resourceStore) {
    h.resourceStore = i.resourceStore;
  }
  if (i.eventStore) {
    h.eventStore = i.eventStore;
  }
  if (i.dependencyStore) {
    h.dependencyStore = i.dependencyStore;
  }
  i.lockedViewConfig = i.lockedViewConfig || {};
  i.normalViewConfig = i.normalViewConfig || {};
  if (f && j && Ext.getScrollbarSize().width === 0) {
    i.lockedGridConfig.scroll = 'horizontal';
  }
  i.lockedViewConfig.enableAnimations = i.normalViewConfig.enableAnimations = false;
  if (f) {
    i.normalViewConfig.providedStore = i.lockedViewConfig.providedStore = i.createNodeStore(j, i.store);
  }
  var e = i.layout;
  this.callParent(arguments);
  if (i.topPlugins) {
    i.plugins = i.topPlugins;
  }
  if (a.width) {
    i.lockedGrid.setWidth(a.width);
    i.normalGrid.getView().addCls('sch-timeline-horizontal-scroll');
  } else {
    if (i.normalGrid.collapsed) {
      i.normalGrid.collapsed = false;
      i.normalGrid.view.on('boxready', function() {
        i.normalGrid.collapse();
      }, i, {delay:10});
    }
  }
  var k = i.lockedGrid.getView();
  var b = i.normalGrid.getView();
  if (j) {
    k.on('render', this.onLockedViewRender, this);
    this.fixPagingScroller(i.normalGrid.verticalScroller);
    if (Ext.getScrollbarSize().width > 0) {
      k.on({scroll:{fn:i.onLockedViewScroll, element:'el', scope:i}});
    }
  }
  if (Ext.getScrollbarSize().width === 0) {
    k.addCls('sch-ganttpanel-force-locked-scroll');
  }
  if (f) {
    this.setupLockableTree();
  }
  if (!b.deferInitialRefresh) {
    var g = b.onRender;
    b.onRender = function() {
      this.doFirstRefresh = function() {
      };
      g.apply(this, arguments);
      delete this.doFirstRefresh;
    };
  }
  if (j) {
    b.el = {un:function() {
    }};
    i.normalGrid.verticalScroller.bindView(b);
    delete b.el;
  }
  i.view.clearListeners();
  k.on({refresh:i.updateSpacer, scope:i});
  i.view = Ext.create('Sch.view.Locking', {locked:i.lockedGrid, normal:i.normalGrid, panel:i});
  if (i.syncRowHeight) {
    k.on('refresh', this.onLockedViewRefresh, this);
    if (f) {
      i.mon(i.store, {beforeload:function() {
        k.un({itemadd:i.onViewItemAdd, scope:i});
        b.un({itemadd:i.onViewItemAdd, scope:i});
      }, load:function() {
        k.un({itemadd:i.onViewItemAdd, scope:i});
        b.un({itemadd:i.onViewItemAdd, scope:i});
        i.prepareFullRowHeightSync();
        i.syncRowHeights();
      }});
      i.normalGrid.on('afteritemexpand', i.afterNormalGridItemExpand, i);
    }
    k.on({itemadd:i.onViewItemAdd, scope:i});
    b.on({itemadd:i.onViewItemAdd, itemupdate:i.onNormalViewItemUpdate, groupexpand:i.onNormalViewGroupExpand, scope:i});
    if (Ext.isIE9 && Ext.isStrict) {
      i.onNormalViewItemUpdate = function(l, m, o) {
        if (i.lockedGridDependsOnSchedule) {
          var n = i.lockedGrid.getView();
          n.suspendEvents();
          n.onUpdate(i.lockedGrid.store, l);
          n.resumeEvents();
        }
        var p = i.normalGrid.getView().getNode(m);
        p.style.height = o.style.height;
        i.normalHeights[m] = o.style.height;
        i.syncRowHeights();
      };
    }
  }
  if (e !== 'fit') {
    i.layout = e;
  }
  i.normalGrid.on({collapse:i.onNormalGridCollapse, expand:i.onNormalGridExpand, scope:i});
  i.lockedGrid.on({collapse:i.onLockedGridCollapse, scope:i});
  if (this.lockedGrid.view.store !== this.normalGrid.view.store) {
    Ext.Error.raise('Sch.mixin.Lockable setup failed, not sharing store between the two views');
  }
}, onLockedGridCollapse:function() {
  if (this.normalGrid.collapsed) {
    this.normalGrid.expand();
  }
}, onNormalGridCollapse:function() {
  var a = this;
  if (!a.normalGrid.reExpander) {
    a.normalGrid.reExpander = a.normalGrid.placeholder;
  }
  if (!a.lockedGrid.rendered) {
    a.lockedGrid.on('render', a.onNormalGridCollapse, a, {delay:1});
  } else {
    a.lastLockedWidth = a.lockedGrid.getWidth();
    a.lockedGrid.setWidth(a.getWidth() - 35);
    if (a.lockedGrid.collapsed) {
      a.lockedGrid.expand();
    }
    a.addCls('sch-normalgrid-collapsed');
  }
}, onNormalGridExpand:function() {
  this.removeCls('sch-normalgrid-collapsed');
  this.lockedGrid.setWidth(this.lastLockedWidth);
}, fixPagingScroller:function(a) {
  var b = a.onViewRefresh;
  a.onViewRefresh = function() {
    b.apply(this, arguments);
    var g = this, f = g.store;
    if (f.getCount() === f.getTotalCount() || f.isFiltered() && !f.remoteFilter) {
      g.stretcher.setHeight(g.getScrollHeight());
    }
  };
  var d = a.view.lockingPartner;
  if (d) {
    var e = a.onLockRefresh;
    var c = function(f) {
      if (f.table.dom) {
        e.apply(this, arguments);
      }
    };
    d.un('refresh', e, a);
    d.on('refresh', c, a);
    a.onLockRefresh = c;
  }
  a.view.un('render', a.onViewRender, a);
  a.onViewRender = function() {
    var g = this, f = g.view.el;
    f.setStyle('position', 'relative');
    g.stretcher = f.createChild({style:{position:'absolute', width:'1px', height:0, top:0, left:0}}, f.dom.firstChild);
  };
  a.view.on('render', a.onViewRender, a);
}, createNodeStore:function(a, b) {
  return new Ext.data.NodeStore({buffered:a, purgePageCount:0, pageSize:1.0E10, treeStore:b, recursive:true, refreshFromTree:function() {
    var e = this.eventsSuspended;
    this.suspendEvents();
    this.removeAll();
    var c = b.getRootNode(), f = [];
    var d = function(i) {
      if (i != c) {
        f[f.length] = i;
      }
      if (i.isExpanded()) {
        var j = i.childNodes, h = j.length;
        for (var g = 0; g < h; g++) {
          d(j[g]);
        }
      }
    };
    d(c);
    this.totalCount = f.length;
    this.cachePage(f, 1);
    if (Ext.isNumber(this.eventsSuspended) || !e) {
      this.resumeEvents();
    }
  }});
}, setupLockableTree:function() {
  var j;
  var g;
  var i = this;
  var k = i.store.buffered;
  var d = i.getView();
  var o = i.lockedGrid.getView();
  var e = i.normalGrid.getView();
  var l = e.store;
  var c = i.store;
  var h = i.normalGrid.verticalScroller;
  var m = function(t, s) {
    var q = c.viewSize || 50;
    var p = l.getTotalCount();
    if (p) {
      var r = s - t + 1;
      if (r < q && p >= r) {
        s = t + q - 1;
      }
      if (s >= p) {
        t = p - (s - t);
        s = p - 1;
        t = Math.max(0, t);
      }
      l.guaranteeRange(t, s);
    }
  };
  this.mon(c, 'root-fill-start', function() {
    g = true;
    l.suspendEvents();
    if (k) {
      j = l.node;
      l.setNode();
    }
  });
  this.mon(c, 'root-fill-end', function() {
    g = false;
    if (k) {
      l.refreshFromTree();
      l.resumeEvents();
      m(0, c.viewSize || 50);
    } else {
      l.resumeEvents();
      d.refresh();
    }
  });
  if (k) {
    var n, a;
    this.mon(l, 'guaranteedrange', function(q, r, p) {
      n = r;
      a = p;
    });
    var f = function() {
      if (g) {
        return;
      }
      l.refreshFromTree();
      m(n || 0, a || 50);
      if (e.rendered) {
        i.onNormalViewScroll();
      }
    };
    this.mon(c, {append:f, insert:f, remove:f, move:f, expand:f, collapse:f, sort:f, buffer:1});
  }
  this.mon(c, 'filter', function(q, p) {
    l.filter.apply(l, p);
    d.refresh();
  });
  this.mon(c, 'clearfilter', function(p) {
    l.clearFilter();
    d.refresh();
  });
  this.mon(c, 'beforecascade', function(p) {
    l.suspendEvents();
  });
  this.mon(c, 'cascade', function(q, p) {
    l.resumeEvents();
    if (p.nbrAffected > 0) {
      e.refreshKeepingScroll(true);
      setTimeout(function() {
        o.saveScrollState();
        o.refresh();
        o.restoreScrollState();
      }, 0);
    }
  });
  if (k && h) {
    var b = h.onGuaranteedRange;
    h.onGuaranteedRange = function() {
      b.apply(this, arguments);
      Ext.suspendLayouts();
      d.refresh();
      Ext.resumeLayouts();
    };
  }
}, onNormalViewItemUpdate:function(a, b, d) {
  if (this.lockedGridDependsOnSchedule) {
    var c = this.lockedGrid.getView();
    c.suspendEvents();
    c.onUpdate(this.lockedGrid.store, a);
    c.resumeEvents();
  }
  var f = this.normalGrid.getView().getNode(b);
  var e = f.style.height !== d.style.height;
  f.style.height = d.style.height;
  this.normalHeights[b] = d.style.height;
  this.syncRowHeights(e);
}, afterNormalGridItemExpand:function(a) {
  var c = this;
  var b = c.getSchedulingView();
  a.cascadeBy(function(f) {
    if (f !== a) {
      var e = b.getNode(f);
      if (e) {
        var d = b.indexOf(e);
        c.normalHeights[d] = e.style.height;
      }
    }
  });
  c.syncRowHeights(true);
}, onViewItemAdd:function(c, d, b) {
  var e = this.normalGrid.getView();
  var f = this.lockedGrid.getView();
  if (e.getNodes().length !== f.getNodes().length) {
    return;
  }
  var a = this.normalHeights;
  Ext.each(c, function(h, g) {
    var i = e.getNode(h);
    if (i) {
      a[i.viewIndex] = i.style.height;
    }
  });
  this.syncRowHeights();
}, processColumns:function(b) {
  var a = this.callParent(arguments);
  var c = [];
  Ext.each(b, function(d) {
    if (d.position == 'right') {
      d.processed = true;
      if (!Ext.isNumber(d.width)) {
        Ext.Error.raise('"Right" columns must have a fixed width');
      }
      c.push(d);
      Ext.Array.remove(a.locked.items, d);
      a.lockedWidth -= d.width;
    }
  });
  if (this.orientation === 'horizontal') {
    a.normal.items = [{xtype:this.lightWeight ? 'singletimeaxiscolumn' : 'timeaxiscolumn', timeAxis:this.timeAxis, timeCellRenderer:this.timeCellRenderer, timeCellRendererScope:this.timeCellRendererScope, trackHeaderOver:this.trackHeaderOver}].concat(c);
  } else {
    a.locked.items = [Ext.apply({xtype:'verticaltimeaxis', width:100, timeAxis:this.timeAxis}, this.timeAxisColumnCfg || {})];
    a.lockedWidth = a.locked.items[0].width;
  }
  return a;
}, prepareFullRowHeightSync:function() {
  var g = this, h = g.normalGrid.getView(), j = g.lockedGrid.getView();
  if (!h.rendered || !j.rendered) {
    return;
  }
  var a = h.el, d = j.el, f = a.query(h.getItemSelector()), b = d.query(j.getItemSelector()), e = f.length, c = 0;
  g.lockedHeights = [];
  g.normalHeights = [];
  if (b.length !== e) {
    return;
  }
  for (; c < e; c++) {
    g.normalHeights[c] = f[c].style.height;
  }
}, onLockedViewRefresh:function() {
  this.prepareFullRowHeightSync();
  this.syncRowHeights();
}, onNormalViewRefresh:function() {
  var a = this.lockedGrid.getView();
  if (this.lockedGridDependsOnSchedule) {
    a.un('refresh', this.onLockedViewRefresh, this);
    this.lockedGrid.getView().refresh();
    a.on('refresh', this.onLockedViewRefresh, this);
  }
  this.prepareFullRowHeightSync();
  this.syncRowHeights();
}, syncRowHeights:function(b) {
  if (!this.lockedGrid.getView().rendered || !this.normalGrid.getView().rendered) {
    return;
  }
  var j = this, c = j.lockedHeights, k = j.normalHeights, a = [], h = c.length || k.length, f = 0, l, d, e, g;
  if (c.length || k.length) {
    l = j.lockedGrid.getView();
    d = j.normalGrid.getView();
    e = l.el.query(l.getItemSelector());
    g = d.el.query(d.getItemSelector());
    if (g.length !== e.length) {
      return;
    }
    for (; f < h; f++) {
      if (e[f] && k[f]) {
        e[f].style.height = k[f];
      }
    }
    j.lockedHeights = [];
    j.normalHeights = [];
  }
  if (b !== false) {
    j.updateSpacer();
  }
}, getMenuItems:function() {
  return function() {
    return Ext.grid.header.Container.prototype.getMenuItems.call(this);
  };
}, applyColumnsState:Ext.emptyFn, updateSpacer:function() {
  var g = this.lockedGrid.getView();
  var e = this.normalGrid.getView();
  if (g.rendered && e.rendered && g.el.child('table') && !this.getSchedulingView().__lightRefresh) {
    var f = this, c = g.el, d = e.el.dom, b = c.dom.id + '-spacer', h = d.offsetHeight - d.clientHeight + 'px';
    f.spacerEl = Ext.getDom(b);
    if (f.spacerEl) {
      f.spacerEl.style.height = h;
    } else {
      var a;
      if (this.store.buffered) {
        a = f.normalGrid.verticalScroller.stretcher.item(0).dom.parentNode === c.dom ? f.normalGrid.verticalScroller.stretcher.item(0) : f.normalGrid.verticalScroller.stretcher.item(1);
      } else {
        a = c;
      }
      Ext.core.DomHelper.append(a, {id:b, cls:this.store.buffered ? 'sch-locked-buffered-spacer' : '', style:'height: ' + h});
    }
  }
}, onLockedViewRender:function() {
  var d = this.normalGrid;
  if (!this.lockedStretcher) {
    var c = this.lockedGrid.getView().el;
    var a = this.lockedStretcher = c.createChild({cls:'x-stretcher', style:{position:'absolute', width:'1px', height:0, top:0, left:0}}, c.dom.firstChild);
  }
  if (!d.rendered) {
    d.getView().on('render', this.onLockedViewRender, this);
    return;
  }
  d.getView().el.un('scroll', this.onNormalViewScroll, this);
  d.getView().el.on('scroll', this.onNormalViewScroll, this);
  var b = d.verticalScroller;
  b.stretcher.addCls('x-stretcher');
  b.stretcher = new Ext.dom.CompositeElement([this.lockedStretcher, b.stretcher]);
}, onNormalViewGroupExpand:function() {
  this.prepareFullRowHeightSync();
  this.syncRowHeights();
}});
Ext.define('Sch.plugin.TreeCellEditing', {extend:'Ext.grid.plugin.CellEditing', init:function(a) {
  this._grid = a;
  this.on('beforeedit', this.checkReadOnly, this);
  this.callParent(arguments);
}, checkReadOnly:function() {
  var a = this._grid;
  if (!(a instanceof Sch.panel.TimelineTreePanel)) {
    a = a.up('tablepanel');
  }
  return !a.isReadOnly();
}, startEditByClick:function(c, a, h, b, g, d, f) {
  if (f.getTarget(c.expanderSelector)) {
    return;
  }
  this.callParent(arguments);
}, startEdit:function(a, f) {
  if (!a || !f) {
    return;
  }
  var d = this, b = d.getEditor(a, f), e = a.get(f.dataIndex), c = d.getEditingContext(a, f);
  a = c.record;
  f = c.column;
  d.completeEdit();
  if (f && !f.getEditor(a)) {
    return false;
  }
  if (b) {
    c.originalValue = c.value = e;
    if (d.beforeEdit(c) === false || d.fireEvent('beforeedit', c) === false || c.cancel) {
      return false;
    }
    d.context = c;
    d.setActiveEditor(b);
    d.setActiveRecord(a);
    d.setActiveColumn(f);
    d.grid.view.focusCell({column:c.colIdx, row:c.rowIdx});
    d.editTask.delay(15, b.startEdit, b, [d.getCell(a, f), c.value, c]);
  } else {
    d.grid.getView().getEl(f).focus(Ext.isWebKit || Ext.isIE ? 10 : false);
  }
}, getEditingContext:function(e, c) {
  var f = this, a = f.grid, i = a.store, b, d, g = a.getView(), h;
  if (Ext.isNumber(e)) {
    b = e;
    e = i.getAt(b);
  } else {
    if (i.indexOf) {
      b = i.indexOf(e);
    } else {
      b = g.indexOf(g.getNode(e));
    }
  }
  if (Ext.isNumber(c)) {
    d = c;
    c = a.headerCt.getHeaderAtIndex(d);
  } else {
    d = c.getIndex();
  }
  h = e.get(c.dataIndex);
  return {grid:a, record:e, field:c.dataIndex, value:h, row:g.getNode(b), column:c, rowIdx:b, colIdx:d};
}, startEditByPosition:function(a) {
  var f = this, d = f.grid, h = d.getSelectionModel(), b = f.view, e = this.view.getNode(a.row), g = d.headerCt.getHeaderAtIndex(a.column), c = b.getRecord(e);
  if (h.selectByPosition) {
    h.selectByPosition(a);
  }
  f.startEdit(c, g);
}, onEditComplete:function(c, g, b) {
  var f = this, d = f.grid, e = f.getActiveColumn(), h = d.getSelectionModel(), a;
  if (e) {
    a = f.context.record;
    f.setActiveEditor(null);
    f.setActiveColumn(null);
    f.setActiveRecord(null);
    if (!f.validateEdit()) {
      return;
    }
    if (!f.context.doNotUpdateRecord && !a.isEqual(g, b)) {
      a.set(e.dataIndex, g);
    }
    if (h.setCurrentPosition) {
      h.setCurrentPosition(h.getCurrentPosition());
    }
    d.getView().getEl(e).focus();
    f.context.value = g;
    f.fireEvent('edit', f, f.context);
  }
}});
Ext.define('Sch.feature.ColumnLines', {extend:'Sch.plugin.Lines', cls:'sch-column-line', showTip:false, requires:['Ext.data.Store'], init:function(b) {
  this.timeAxis = b.getTimeAxis();
  this.store = Ext.create('Ext.data.JsonStore', {model:Ext.define('Sch.model.TimeLine', {extend:'Ext.data.Model', fields:['start', {name:'Date', convert:function(d, c) {
    return c.data.start;
  }}]}), data:b.getOrientation() === 'horizontal' ? this.getData() : []});
  this.callParent(arguments);
  var a = this.schedulerView;
  a.timeAxis.on('reconfigure', this.populate, this);
}, populate:function() {
  var a = this.schedulerView;
  var b = a.getOrientation() === 'horizontal' && a.store.getCount() > 0;
  this.store.removeAll(b);
  if (b) {
    this.store.add(this.getData());
  }
}, getElementData:function() {
  var a = this.schedulerView;
  if (a.getOrientation() === 'horizontal' && a.store.getCount() > 0) {
    return this.callParent(arguments);
  }
  return [];
}, getData:function() {
  var a = [];
  this.timeAxis.forEachMainInterval(function(d, b, c) {
    if (c > 0) {
      a.push({start:d});
    }
  });
  a.push({start:this.timeAxis.getEnd()});
  return a;
}});
Ext.define('Sch.plugin.CurrentTimeLine', {extend:'Sch.plugin.Lines', tooltipText:'Current time', updateInterval:60000, autoUpdate:true, init:function(c) {
  var b = Ext.create('Ext.data.JsonStore', {model:Ext.define('TimeLineEvent', {extend:'Ext.data.Model', fields:['Date', 'Cls', 'Text']}), data:[{Date:new Date(), Cls:'sch-todayLine', Text:this.tooltipText}]});
  var a = b.first();
  if (this.autoUpdate) {
    this.runner = Ext.create('Ext.util.TaskRunner');
    this.runner.start({run:function() {
      a.set('Date', new Date());
    }, interval:this.updateInterval});
  }
  c.on('destroy', this.onHostDestroy, this);
  this.store = b;
  this.callParent(arguments);
}, onHostDestroy:function() {
  if (this.runner) {
    this.runner.stopAll();
  }
  if (this.store.autoDestroy) {
    this.store.destroy();
  }
}});
Ext.define('Sch.mixin.TimelineView', {requires:['Sch.column.Time', 'Sch.data.TimeAxis'], orientation:'horizontal', overScheduledEventClass:'sch-event-hover', selectedEventCls:'sch-event-selected', altColCls:'sch-col-alt', timeCellCls:'sch-timetd', timeCellSelector:'.sch-timetd', ScheduleEventMap:{click:'Click', dblclick:'DblClick', contextmenu:'ContextMenu', keydown:'KeyDown'}, suppressFitCheck:0, forceFit:false, inheritables:function() {
  return {cellBorderWidth:1, initComponent:function() {
    this.setOrientation(this.panel._top.orientation || this.orientation);
    this.addEvents('beforetooltipshow', 'scheduleclick', 'scheduledblclick', 'schedulecontextmenu', 'columnwidthchange');
    this.enableBubble('columnwidthchange');
    var a = {}, c = Sch.util.Date;
    a[c.DAY] = a[c.WEEK] = a[c.MONTH] = a[c.QUARTER] = a[c.YEAR] = null;
    Ext.applyIf(this, {eventPrefix:this.id + '-', largeUnits:a});
    this.callParent(arguments);
    if (this.orientation === 'horizontal') {
      this.getTimeAxisColumn().on('timeaxiscolumnreconfigured', this.checkHorizontalFit, this);
    }
    var b = this.panel._top;
    Ext.apply(this, {eventRendererScope:b.eventRendererScope, eventRenderer:b.eventRenderer, eventBorderWidth:b.eventBorderWidth, timeAxis:b.timeAxis, dndValidatorFn:b.dndValidatorFn || Ext.emptyFn, resizeValidatorFn:b.resizeValidatorFn || Ext.emptyFn, createValidatorFn:b.createValidatorFn || Ext.emptyFn, tooltipTpl:b.tooltipTpl, validatorFnScope:b.validatorFnScope || this, snapToIncrement:b.snapToIncrement, timeCellRenderer:b.timeCellRenderer, timeCellRendererScope:b.timeCellRendererScope, readOnly:b.readOnly, 
    eventResizeHandles:b.eventResizeHandles, enableEventDragDrop:b.enableEventDragDrop, enableDragCreation:b.enableDragCreation, dragConfig:b.dragConfig, dropConfig:b.dropConfig, resizeConfig:b.resizeConfig, createConfig:b.createConfig, tipCfg:b.tipCfg, orientation:b.orientation, getDateConstraints:b.getDateConstraints || Ext.emptyFn});
    if (this.emptyText) {
      this.emptyText = '\x3cspan class\x3d"sch-empty-text"\x3e' + this.emptyText + '\x3c/span\x3e';
    }
  }, onDestroy:function() {
    if (this.tip) {
      this.tip.destroy();
    }
    this.callParent(arguments);
  }, afterComponentLayout:function() {
    this.callParent(arguments);
    var b = this.getWidth();
    var a = this.getHeight();
    if (b === this.__prevWidth && a === this.__prevHeight) {
      return;
    }
    this.__prevWidth = b;
    this.__prevHeight = a;
    if (!this.lockable && !this.suppressFitCheck) {
      this.checkHorizontalFit();
    }
  }, beforeRender:function() {
    this.callParent(arguments);
    this.addCls('sch-timelineview');
    if (this.readOnly) {
      this.addCls(this._cmpCls + '-readonly');
    }
  }, afterRender:function() {
    this.callParent(arguments);
    if (this.overScheduledEventClass) {
      this.mon(this.el, {mouseover:this.onMouseOver, mouseout:this.onMouseOut, delegate:this.eventSelector, scope:this});
    }
    if (this.tooltipTpl) {
      this.el.on('mousemove', this.setupTooltip, this, {single:true});
    }
    this.setupTimeCellEvents();
  }, processUIEvent:function(f) {
    var c = this, a = f.getTarget(this.eventSelector), d = c.ScheduleEventMap, b = f.type;
    if (a && b in d) {
      this.fireEvent(this.scheduledEventName + b, this, this.resolveEventRecord(a), f);
    } else {
      this.callParent(arguments);
    }
  }, refresh:function() {
    this.fixedNodes = 0;
    this.callParent(arguments);
  }, clearViewEl:function() {
    var c = this, b = c.getTargetEl();
    b.down('table').remove();
    if (this.emptyText) {
      var a = b.down('.sch-empty-text');
      if (a) {
        a.remove();
      }
    }
  }, onMouseOver:function(b, a) {
    if (a !== this.lastItem) {
      this.lastItem = a;
      Ext.fly(a).addCls(this.overScheduledEventClass);
      this.fireEvent('eventmouseenter', this, this.resolveEventRecord(a), b);
    }
  }, onMouseOut:function(b, a) {
    if (this.lastItem) {
      if (!b.within(this.lastItem, true, true)) {
        Ext.fly(this.lastItem).removeCls(this.overScheduledEventClass);
        this.fireEvent('eventmouseleave', this, this.resolveEventRecord(this.lastItem), b);
        delete this.lastItem;
      }
    }
  }, highlightItem:function(b) {
    if (b) {
      var a = this;
      a.clearHighlight();
      a.highlightedItem = b;
      Ext.fly(b).addCls(a.overItemCls);
    }
  }, shouldUpdateCell:function() {
    return true;
  }};
}, hasRightColumns:function() {
  return this.headerCt.items.getCount() > 1;
}, checkHorizontalFit:function() {
  if (this.orientation === 'horizontal') {
    var a = this.getActualTimeColumnWidth();
    var c = this.getFittingColumnWidth();
    if (this.forceFit) {
      if (c != a) {
        this.fitColumns();
      }
    } else {
      if (this.snapToIncrement) {
        var b = this.calculateTimeColumnWidth(a);
        if (b > 0 && b !== a) {
          this.setColumnWidth(b);
        }
      } else {
        if (a < c) {
          this.fitColumns();
        }
      }
    }
  }
}, getTimeAxisColumn:function() {
  return this.headerCt.items.get(0);
}, getFirstTimeColumn:function() {
  return this.headerCt.getGridColumns()[0];
}, getFormattedDate:function(a) {
  return Ext.Date.format(a, this.getDisplayDateFormat());
}, getFormattedEndDate:function(d, a) {
  var b = this.timeAxis, c = b.getResolution().unit;
  if (c in this.largeUnits && d.getHours() === 0 && d.getMinutes() === 0 && !(d.getYear() === a.getYear() && d.getMonth() === a.getMonth() && d.getDate() === a.getDate())) {
    d = Sch.util.Date.add(d, Sch.util.Date.DAY, -1);
  }
  return Ext.Date.format(d, this.getDisplayDateFormat());
}, getDisplayDateFormat:function() {
  return this.displayDateFormat;
}, setDisplayDateFormat:function(a) {
  this.displayDateFormat = a;
}, getSingleUnitInPixels:function(a) {
  return Sch.util.Date.getUnitToBaseUnitRatio(this.timeAxis.getUnit(), a) * this.getSingleTickInPixels() / this.timeAxis.getIncrement();
}, getSingleTickInPixels:function() {
  throw 'Must be implemented by horizontal/vertical';
}, scrollEventIntoView:function(c, a) {
  var b = this.getOuterElementFromEventRecord(c);
  if (b) {
    b.scrollIntoView(this.el);
    if (a) {
      if (typeof a === 'boolean') {
        b.highlight();
      } else {
        b.highlight(null, a);
      }
    }
  }
}, calculateTimeColumnWidth:function(e) {
  if (!this.panel.rendered) {
    return e;
  }
  var h = this.forceFit;
  var b = 0, d = this.timeAxis.getUnit(), k = this.timeAxis.getCount(), g = Number.MAX_VALUE;
  if (this.snapToIncrement) {
    var i = this.timeAxis.getResolution(), j = i.unit, c = i.increment;
    g = Sch.util.Date.getUnitToBaseUnitRatio(d, j) * c;
  }
  var f = Sch.util.Date.getMeasuringUnit(d);
  g = Math.min(g, Sch.util.Date.getUnitToBaseUnitRatio(d, f));
  var a = Math.floor(this.getAvailableWidthForSchedule() / k);
  b = h || e < a ? a : e;
  if (g > 0 && (!h || g < 1)) {
    b = Math.round(Math.max(1, Math[h ? 'floor' : 'round'](g * b)) / g);
  }
  return b;
}, getFittingColumnWidth:function() {
  var a = Math.floor(this.getAvailableWidthForSchedule() / this.timeAxis.getCount());
  return this.calculateTimeColumnWidth(a);
}, fitColumns:function(b) {
  var a = 0;
  if (this.orientation === 'horizontal') {
    a = this.getFittingColumnWidth();
  } else {
    a = Math.floor((this.panel.getWidth() - Ext.getScrollbarSize().width - 1) / this.headerCt.getColumnCount());
  }
  this.setColumnWidth(a, b);
}, getAvailableWidthForSchedule:function() {
  var c = this.lastBox && this.lastBox.width || this.getWidth();
  var a = this.headerCt.items.items;
  for (var b = 1; b < a.length; b++) {
    c -= a[b].getWidth();
  }
  return c - Ext.getScrollbarSize().width - 1;
}, getRightColumnsWidth:function() {
  var c = 0;
  var a = this.headerCt.items.items;
  for (var b = 1; b < a.length; b++) {
    c += a[b].getWidth();
  }
  return c;
}, fixRightColumnsPositions:function() {
  var a = this.headerCt.items.items;
  var c = a[0].getWidth();
  for (var b = 1; b < a.length; b++) {
    var d = a[b];
    d.el.setLeft(c);
    c += d.getWidth();
  }
}, getElementFromEventRecord:function(a) {
  return Ext.get(this.eventPrefix + a.internalId);
}, getEventNodeByRecord:function(a) {
  return document.getElementById(this.eventPrefix + a.internalId);
}, getOuterElementFromEventRecord:function(a) {
  return Ext.get(this.eventPrefix + a.internalId);
}, resolveColumnIndex:function(a) {
  return Math.floor(a / this.getActualTimeColumnWidth());
}, getStartEndDatesFromRegion:function(b, a) {
  throw 'Must be implemented by horizontal/vertical';
}, setupTooltip:function() {
  var b = this, a = Ext.apply({renderTo:Ext.getBody(), delegate:b.eventSelector, target:b.el, anchor:'b'}, b.tipCfg);
  b.tip = Ext.create('Ext.ToolTip', a);
  b.tip.on({beforeshow:function(d) {
    if (!d.triggerElement || !d.triggerElement.id) {
      return false;
    }
    var c = this.resolveEventRecord(d.triggerElement);
    if (!c || this.fireEvent('beforetooltipshow', this, c) === false) {
      return false;
    }
    d.update(this.tooltipTpl.apply(this.getDataForTooltipTpl(c)));
    return true;
  }, scope:this});
}, getDataForTooltipTpl:function(a) {
  return a.data;
}, getTimeResolution:function() {
  return this.timeAxis.getResolution();
}, setTimeResolution:function(b, a) {
  this.timeAxis.setResolution(b, a);
  if (this.snapToIncrement) {
    this.refreshKeepingScroll();
  }
}, getEventIdFromDomNodeId:function(a) {
  return a.substring(this.eventPrefix.length);
}, getDateFromDomEvent:function(b, a) {
  return this.getDateFromXY(b.getXY(), a);
}, handleScheduleEvent:function(c) {
  var b = c.getTarget('.' + this.timeCellCls, 2);
  if (b) {
    var a = this.getDateFromDomEvent(c, 'floor');
    this.fireEvent('schedule' + c.type, this, a, this.indexOf(this.findItemByChild(b)), c);
  }
}, setupTimeCellEvents:function() {
  this.mon(this.el, {click:this.handleScheduleEvent, dblclick:this.handleScheduleEvent, contextmenu:this.handleScheduleEvent, scope:this}, this);
}, getSnapPixelAmount:function() {
  if (this.snapToIncrement) {
    var a = this.timeAxis.getResolution();
    return (a.increment || 1) * this.getSingleUnitInPixels(a.unit);
  } else {
    return 1;
  }
}, getActualTimeColumnWidth:function() {
  return this.headerCt.items.get(0).getTimeColumnWidth();
}, setSnapEnabled:function(a) {
  this.snapToIncrement = a;
  if (a) {
    this.refreshKeepingScroll();
  }
}, setReadOnly:function(a) {
  this.readOnly = a;
  this[a ? 'addCls' : 'removeCls'](this._cmpCls + '-readonly');
}, isReadOnly:function() {
  return this.readOnly;
}, setOrientation:function(a) {
  this.orientation = a;
  Ext.apply(this, Sch.view[Ext.String.capitalize(a)].prototype.props);
}, getOrientation:function() {
  return this.orientation;
}, translateToScheduleCoordinate:function(a) {
  throw 'Abstract method call!';
}, translateToPageCoordinate:function(a) {
  throw 'Abstract method call!';
}, getDateFromXY:function(c, b, a) {
  throw 'Abstract method call!';
}, getXYFromDate:function(a, b) {
  throw 'Abstract method call!';
}, getTimeSpanRegion:function(a, b) {
  throw 'Abstract method call!';
}, getStart:function() {
  return this.timeAxis.getStart();
}, getEnd:function() {
  return this.timeAxis.getEnd();
}, setBarMargin:function(b, a) {
  this.barMargin = b;
  if (!a) {
    this.refreshKeepingScroll();
  }
}, setRowHeight:function(a, b) {
  this.rowHeight = a || 24;
  if (this.rendered && !b) {
    this.refreshKeepingScroll();
  }
}, refreshKeepingScroll:function(a) {
  this.saveScrollState();
  if (this.lightRefresh) {
    this.lightRefresh();
  } else {
    this.refresh();
  }
  this.restoreScrollState();
}, refreshKeepingResourceScroll:function(c) {
  var d = this.el.dom, b = d.scrollTop, a = d.scrollLeft;
  if (this.lightRefresh) {
    this.lightRefresh();
  } else {
    this.refresh();
  }
  if (this.getOrientation() === 'horizontal') {
    d.scrollTop = b;
  } else {
    d.scrollLeft = a;
  }
}, lightRefresh:function() {
  var a = this.refreshSize;
  Ext.suspendLayouts();
  this.refreshSize = Ext.emptyFn;
  this.__lightRefresh = true;
  this.refresh();
  delete this.__lightRefresh;
  this.refreshSize = a;
  Ext.resumeLayouts();
}});
Ext.apply(Sch, {VERSION:'2.1.7'});
Ext.define('Sch.view.Horizontal', {props:{translateToScheduleCoordinate:function(a) {
  return a - this.el.getX() + this.el.getScroll().left;
}, translateToPageCoordinate:function(a) {
  return a + this.el.getX() - this.el.getScroll().left;
}, getDateFromXY:function(h, f, e) {
  var b, a = e ? h[0] : this.translateToScheduleCoordinate(h[0]), d = a / this.getActualTimeColumnWidth(), c = this.timeAxis.getCount();
  if (d < 0 || d > c) {
    b = null;
  } else {
    var g = d - this.resolveColumnIndex(a);
    if (g > 2 && d >= c) {
      return null;
    }
    b = this.timeAxis.getDateFromTick(d, f);
  }
  return b;
}, getXYFromDate:function(b, d) {
  var a, c = this.timeAxis.getTickFromDate(b);
  if (c >= 0) {
    a = this.getActualTimeColumnWidth() * c;
  }
  if (d === false) {
    a = this.translateToPageCoordinate(a);
  }
  return [a, 0];
}, getEventBox:function(e, b) {
  var a = Math.floor(this.getXYFromDate(e)[0]), c = Math.floor(this.getXYFromDate(b)[0]), d = Math;
  if (this.managedEventSizing) {
    return {top:Math.max(0, this.barMargin - (Ext.isIE && !Ext.isStrict) ? 0 : this.eventBorderWidth - this.cellBorderWidth), left:d.min(a, c), width:d.max(1, d.abs(a - c) - this.eventBorderWidth), height:this.rowHeight - 2 * this.barMargin - this.eventBorderWidth};
  }
  return {left:d.min(a, c), width:d.max(1, d.abs(a - c))};
}, layoutEvents:function(a) {
  var c = Ext.Array.clone(a);
  c.sort(this.sortEvents);
  var b = this.layoutEventsInBands(0, c);
  return b;
}, layoutEventsInBands:function(d, a) {
  var c = a[0], b = d === 0 ? this.barMargin : d * this.rowHeight - (d - 1) * this.barMargin;
  if (b >= this.cellBorderWidth) {
    b -= this.cellBorderWidth;
  }
  while (c) {
    c.top = b;
    Ext.Array.remove(a, c);
    c = this.findClosestSuccessor(c, a);
  }
  d++;
  if (a.length > 0) {
    return this.layoutEventsInBands(d, a);
  } else {
    return d;
  }
}, getScheduleRegion:function(d, f) {
  var h = d ? Ext.fly(this.getNodeByRecord(d)).getRegion() : this.el.down('.x-grid-table').getRegion(), e = this.timeAxis.getStart(), j = this.timeAxis.getEnd(), b = this.getDateConstraints(d, f) || {start:e, end:j}, c = this.translateToPageCoordinate(this.getXYFromDate(b.start)[0]), i = this.translateToPageCoordinate(this.getXYFromDate(b.end)[0]) - this.eventBorderWidth, g = h.top + this.barMargin, a = h.bottom - this.barMargin - this.eventBorderWidth;
  return new Ext.util.Region(g, Math.max(c, i), a, Math.min(c, i));
}, getResourceRegion:function(h, d, g) {
  var k = Ext.fly(this.getNodeByRecord(h)).getRegion(), i = this.timeAxis.getStart(), n = this.timeAxis.getEnd(), c = d ? Sch.util.Date.max(i, d) : i, e = g ? Sch.util.Date.min(n, g) : n, f = this.getXYFromDate(c)[0], m = this.getXYFromDate(e)[0] - this.eventBorderWidth, l = this.el.getTop(), b = this.el.getScroll(), j = k.top + 1 - l + b.top, a = k.bottom - 1 - l + b.top;
  return new Ext.util.Region(j, Math.max(f, m), a, Math.min(f, m));
}, collectRowData:function(g, p, o) {
  var c = this.eventStore.getEventsForResource(p);
  if (c.length === 0 || this.headerCt.getColumnCount() === 0) {
    g.rowHeight = this.rowHeight;
    return g;
  }
  var a = Sch.util.Date, m = this.timeAxis, n = m.getStart(), r = m.getEnd(), k = [], j, f;
  for (j = 0, f = c.length; j < f; j++) {
    var b = c[j], d = b.getStartDate(), h = b.getEndDate();
    if (d && h && m.timeSpanInAxis(d, h)) {
      var q = this.generateTplData(b, n, r, p, o);
      k[k.length] = q;
    }
  }
  var e = 1;
  if (this.dynamicRowHeight) {
    e = this.layoutEvents(k);
  }
  g.rowHeight = e * this.rowHeight - (e - 1) * this.barMargin;
  g[this.getFirstTimeColumn().id] += '\x26#160;' + this.eventTpl.apply(k);
  return g;
}, resolveResource:function(a) {
  var b = this.findItemByChild(a);
  if (b) {
    return this.getRecord(b);
  }
  return null;
}, getTimeSpanRegion:function(b, h, g) {
  var d = this.getXYFromDate(b)[0], f = this.getXYFromDate(h || b)[0], a, c;
  if (this.store.buffered) {
    var e;
    if (this.panel.verticalScroller.stretcher instanceof Ext.CompositeElement) {
      e = this.panel.verticalScroller.stretcher.first();
    } else {
      e = this.el.down('.x-stretcher');
    }
    if (e.dom.clientHeight) {
      c = e;
    }
  }
  if (!c) {
    c = this.el.down('.x-grid-table');
  }
  if (g) {
    a = Math.max(c ? c.dom.clientHeight : 0, this.el.dom.clientHeight);
  } else {
    a = c ? c.dom.clientHeight : 0;
  }
  return new Ext.util.Region(0, Math.max(d, f), a, Math.min(d, f));
}, getStartEndDatesFromRegion:function(c, b) {
  var a = this.getDateFromXY([c.left, 0], b), d = this.getDateFromXY([c.right, 0], b);
  if (d && a) {
    return {start:Sch.util.Date.min(a, d), end:Sch.util.Date.max(a, d)};
  } else {
    return null;
  }
}, onEventAdd:function(c, e) {
  var f = {};
  for (var b = 0, a = e.length; b < a; b++) {
    var d = e[b].getResource();
    if (d) {
      f[d.getId()] = d;
    }
  }
  Ext.Object.each(f, function(h, g) {
    this.onUpdate(this.resourceStore, g);
  }, this);
}, onEventRemove:function(c, a) {
  var b = this.getElementFromEventRecord(a);
  if (b) {
    var d = this.resolveResource(b);
    b.fadeOut({callback:function() {
      if (Ext.tree.View && this instanceof Ext.tree.View && this.store.indexOf(d)) {
        this.onUpdate(this.store, d);
      } else {
        if (this.resourceStore.indexOf(d) >= 0) {
          this.onUpdate(this.resourceStore, d);
        }
      }
    }, scope:this});
  }
}, onEventUpdate:function(b, c, a) {
  var e, d = c.previous;
  if (d && d[c.resourceIdField]) {
    e = c.getResource(d[c.resourceIdField]);
    if (e) {
      this.onUpdate(this.resourceStore, e);
    }
  }
  e = c.getResource();
  if (e) {
    this.onUpdate(this.resourceStore, e);
  }
}, getSingleTickInPixels:function() {
  return this.getActualTimeColumnWidth();
}, getColumnWidth:function() {
  if (this.getTimeAxisColumn()) {
    return this.getTimeAxisColumn().getTimeColumnWidth();
  }
}, setColumnWidth:function(b, a) {
  if (this.getTimeAxisColumn()) {
    this.getTimeAxisColumn().setTimeColumnWidth(b);
    if (!a) {
      this.refreshKeepingScroll();
    }
  }
  this.fireEvent('columnwidthchange', this, b);
}, getVisibleDateRange:function() {
  if (!this.rendered) {
    return null;
  }
  var c = this.getEl().getScroll(), b = this.panel.getStart(), f = this.panel.getEnd(), e = this.getWidth(), d = this.getEl().down('.x-grid-table').dom, a = d.clientWidth;
  if (a < e) {
    return {startDate:b, endDate:f};
  }
  return {startDate:this.getDateFromXY([c.left, 0], null, true), endDate:this.getDateFromXY([Math.min(c.left + e, a), 0], null, true)};
}}});
Ext.define('Sch.view.TimelineTreeView', {extend:'Ext.tree.View', mixins:['Sch.mixin.TimelineView'], requires:['Sch.patches.TreeView'], cellBorderWidth:0, beforeRender:function() {
  this.addCls('sch-timelinetreeview');
  this.callParent(arguments);
}}, function() {
  this.override(Sch.mixin.TimelineView.prototype.inheritables() || {});
});
Ext.define('Sch.mixin.Zoomable', {zoomLevels:[{width:200, increment:1, resolution:1, preset:'year'}, {width:100, increment:1, resolution:7, preset:'monthAndYear'}, {width:30, increment:1, resolution:1, preset:'weekDateAndMonth'}, {width:35, increment:1, resolution:1, preset:'weekAndMonth'}, {width:50, increment:1, resolution:1, preset:'weekAndMonth'}, {width:85, increment:1, resolution:1, preset:'weekAndMonth'}, {width:50, increment:1, resolution:1, preset:'weekAndDay', resolutionUnit:'HOUR'}, {width:100, 
increment:1, resolution:1, preset:'weekAndDay', resolutionUnit:'HOUR'}, {width:50, increment:6, resolution:30, preset:'hourAndDay', resolutionUnit:'MINUTE'}, {width:100, increment:6, resolution:30, preset:'hourAndDay', resolutionUnit:'MINUTE'}, {width:60, increment:2, resolution:30, preset:'hourAndDay', resolutionUnit:'MINUTE'}, {width:60, increment:1, resolution:30, preset:'hourAndDay', resolutionUnit:'MINUTE'}, {width:30, increment:15, resolution:5, preset:'minuteAndHour'}, {width:60, increment:15, 
resolution:5, preset:'minuteAndHour'}, {width:130, increment:15, resolution:5, preset:'minuteAndHour'}, {width:60, increment:5, resolution:5, preset:'minuteAndHour'}, {width:100, increment:5, resolution:5, preset:'minuteAndHour'}], minZoomLevel:null, maxZoomLevel:null, visibleZoomFactor:5, cachedCenterDate:null, isFirstZoom:true, isZooming:false, initializeZooming:function() {
  this.zoomLevels = this.zoomLevels.slice();
  this.setMinZoomLevel(this.minZoomLevel || 0);
  this.setMaxZoomLevel(this.maxZoomLevel !== null ? this.maxZoomLevel : this.zoomLevels.length - 1);
  this.on('viewchange', this.clearCenterDateCache, this);
}, getZoomLevelUnit:function(b) {
  var a = Sch.preset.Manager.getPreset(b.preset).headerConfig;
  return a.bottom ? a.bottom.unit : a.middle.unit;
}, getMilliSecondsPerPixelForZoomLevel:function(b) {
  var a = Sch.util.Date;
  return Math.round((a.add(new Date(1, 0, 1), this.getZoomLevelUnit(b), b.increment) - new Date(1, 0, 1)) / b.width);
}, presetToZoomLevel:function(e) {
  var d = Sch.preset.Manager.getPreset(e);
  var c = d.headerConfig;
  var a = c.bottom;
  var b = c.middle;
  return {preset:e, increment:(a ? a.increment : b.increment) || 1, resolution:d.timeResolution.increment, resolutionUnit:d.timeResolution.unit, width:d.timeColumnWidth};
}, calculateCurrentZoomLevel:function() {
  var d = this.presetToZoomLevel(this.viewPreset);
  var c = this.timeAxis.headerConfig;
  var a = c.bottom;
  var b = c.middle;
  d.width = this.timeAxis.preset.timeColumnWidth;
  d.increment = (a ? a.increment : b.increment) || 1;
  return d;
}, getCurrentZoomLevelIndex:function() {
  var f = this.calculateCurrentZoomLevel();
  var b = this.getMilliSecondsPerPixelForZoomLevel(f);
  var e = this.zoomLevels;
  for (var c = 0; c < e.length; c++) {
    var d = this.getMilliSecondsPerPixelForZoomLevel(e[c]);
    if (d == b) {
      return c;
    }
    if (c === 0 && b > d) {
      return -0.5;
    }
    if (c == e.length - 1 && b < d) {
      return e.length - 1 + 0.5;
    }
    var a = this.getMilliSecondsPerPixelForZoomLevel(e[c + 1]);
    if (d > b && b > a) {
      return c + 0.5;
    }
  }
  throw "Can't find current zoom level index";
}, setMaxZoomLevel:function(a) {
  if (a < 0 || a >= this.zoomLevels.length) {
    throw new Error('Invalid range for `setMinZoomLevel`');
  }
  this.maxZoomLevel = a;
}, setMinZoomLevel:function(a) {
  if (a < 0 || a >= this.zoomLevels.length) {
    throw new Error('Invalid range for `setMinZoomLevel`');
  }
  this.minZoomLevel = a;
}, getViewportCenterDateCached:function() {
  if (this.cachedCenterDate) {
    return this.cachedCenterDate;
  }
  return this.cachedCenterDate = this.getViewportCenterDate();
}, clearCenterDateCache:function() {
  this.cachedCenterDate = null;
}, zoomToLevel:function(b) {
  b = Ext.Number.constrain(b, this.minZoomLevel, this.maxZoomLevel);
  var n = this.calculateCurrentZoomLevel();
  var d = this.getMilliSecondsPerPixelForZoomLevel(n);
  var i = this.zoomLevels[b];
  var a = this.getMilliSecondsPerPixelForZoomLevel(i);
  if (d == a) {
    return null;
  }
  var p = this;
  var j = this.getSchedulingView();
  var f = j.getEl();
  if (this.isFirstZoom) {
    this.isFirstZoom = false;
    f.on('scroll', this.clearCenterDateCache, this);
  }
  var h = this.orientation == 'vertical';
  var e = this.getViewportCenterDateCached();
  var k = h ? f.getHeight() : f.getWidth();
  var l = Ext.clone(Sch.preset.Manager.getPreset(i.preset));
  var o = this.calculateOptimalDateRange(e, k, i);
  var c = l.headerConfig;
  var g = c.bottom;
  var r = c.middle;
  l[h ? 'rowHeight' : 'timeColumnWidth'] = i.width;
  if (g) {
    g.increment = i.increment;
  } else {
    r.increment = i.increment;
  }
  this.isZooming = true;
  this.viewPreset = i.preset;
  var m = g ? g.unit : r.unit;
  this.timeAxis.reconfigure({preset:l, headerConfig:c, unit:m, increment:i.increment, resolutionUnit:Sch.util.Date.getUnitByName(i.resolutionUnit || m), resolutionIncrement:i.resolution, weekStartDay:this.weekStartDay, mainUnit:r.unit, shiftUnit:l.shiftUnit, shiftIncrement:l.shiftIncrement || 1, defaultSpan:l.defaultSpan || 1, start:o.startDate || this.getStart(), end:o.endDate || this.getEnd()});
  var q = j.getXYFromDate(e, true);
  f.on('scroll', function() {
    p.cachedCenterDate = e;
  }, this, {single:true});
  if (h) {
    f.scrollTo('top', q[1] - k / 2);
  } else {
    f.scrollTo('left', q[0] - k / 2);
  }
  p.isZooming = false;
  this.fireEvent('zoomchange', this, b);
  return b;
}, zoomIn:function(a) {
  a = a || 1;
  var b = this.getCurrentZoomLevelIndex();
  if (b >= this.zoomLevels.length - 1) {
    return null;
  }
  return this.zoomToLevel(Math.floor(b) + a);
}, zoomOut:function(a) {
  a = a || 1;
  var b = this.getCurrentZoomLevelIndex();
  if (b <= 0) {
    return null;
  }
  return this.zoomToLevel(Math.ceil(b) - a);
}, zoomInFull:function() {
  return this.zoomToLevel(this.maxZoomLevel);
}, zoomOutFull:function() {
  return this.zoomToLevel(this.minZoomLevel);
}, calculateOptimalDateRange:function(c, h, e) {
  var b = Sch.util.Date;
  var i = Sch.preset.Manager.getPreset(e.preset).headerConfig;
  var f = i.top ? i.top.unit : i.middle.unit;
  var j = this.getZoomLevelUnit(e);
  var d = Math.ceil(h / e.width * e.increment * this.visibleZoomFactor / 2);
  var a = b.add(c, j, -d);
  var g = b.add(c, j, d);
  return {startDate:this.timeAxis.floorDate(a, false, f), endDate:this.timeAxis.ceilDate(g, false, f)};
}});
Ext.define('Sch.mixin.TimelinePanel', {requires:['Sch.util.Patch', 'Sch.patches.LoadMask', 'Sch.patches.Model', 'Sch.patches.Table', 'Sch.data.TimeAxis', 'Sch.feature.ColumnLines', 'Sch.view.Locking', 'Sch.mixin.Lockable', 'Sch.preset.Manager'], mixins:['Sch.mixin.Zoomable'], orientation:'horizontal', weekStartDay:1, snapToIncrement:false, readOnly:false, eventResizeHandles:'both', viewPreset:'weekAndDay', trackHeaderOver:true, startDate:null, endDate:null, eventBorderWidth:1, syncCellHeight:Ext.emptyFn, 
tooltipTpl:null, tipCfg:{cls:'sch-tip', showDelay:1000, hideDelay:0, autoHide:true, anchor:'b'}, lightWeight:true, timeCellRenderer:null, timeCellRendererScope:null, inheritables:function() {
  return {columnLines:true, enableColumnMove:false, enableLocking:true, lockable:true, lockedXType:null, normalXType:null, initComponent:function() {
    this.lightWeight = this.lightWeight && !this.timeCellRenderer;
    this.addEvents('timeheaderdblclick', 'beforeviewchange', 'viewchange');
    if (!this.timeAxis) {
      this.timeAxis = Ext.create('Sch.data.TimeAxis');
    }
    if (!this.columns && !this.colModel) {
      this.columns = [];
    }
    this.timeAxis.on('reconfigure', this.onTimeAxisReconfigure, this);
    if (this.enableLocking) {
      this.self.mixin('lockable', Sch.mixin.Lockable);
      var b = 0, a = this.columns.length, c;
      for (; b < a; ++b) {
        c = this.columns[b];
        if (c.locked !== false) {
          c.locked = true;
        }
      }
      this.switchViewPreset(this.viewPreset, this.startDate, this.endDate, true);
    }
    this.callParent(arguments);
    if (this.lockable) {
      this.applyViewSettings(this.timeAxis.preset);
      if (!this.viewPreset) {
        throw 'You must define a valid view preset object. See Sch.preset.Manager class for reference';
      }
      if (this.lightWeight && this.columnLines) {
        this.columnLinesFeature = new Sch.feature.ColumnLines();
        this.columnLinesFeature.init(this);
      }
    }
    this.initializeZooming();
    this.relayEvents(this.getView(), ['beforetooltipshow', 'scheduleclick', 'scheduledblclick', 'schedulecontextmenu']);
  }, getState:function() {
    var a = this, b = a.callParent(arguments);
    Ext.apply(b, {viewPreset:a.viewPreset, startDate:a.getStart(), endDate:a.getEnd(), zoomMinLevel:a.zoomMinLevel, zoomMaxLevel:a.zoomMaxLevel, currentZoomLevel:a.currentZoomLevel});
    return b;
  }, getOrientation:function() {
    return this.orientation;
  }, applyState:function(b) {
    var a = this;
    a.callParent(arguments);
    if (b && b.viewPreset) {
      a.switchViewPreset(b.viewPreset, b.startDate, b.endDate);
    }
    if (b && b.currentZoomLevel) {
      a.zoomToLevel(b.currentZoomLevel);
    }
  }, beforeRender:function() {
    this.callParent(arguments);
    if (this.lockable) {
      this.addCls('sch-' + this.orientation);
    }
  }, afterRender:function() {
    this.callParent(arguments);
    if (this.lockable) {
      this.lockedGrid.on('itemdblclick', function(d, c, e, g, f) {
        if (this.orientation == 'vertical' && c) {
          this.fireEvent('timeheaderdblclick', this, c.get('start'), c.get('end'), g, f);
        }
      }, this);
    } else {
      var b = this.headerCt;
      if (b && b.reorderer && b.reorderer.dropZone) {
        var a = b.reorderer.dropZone;
        a.positionIndicator = Ext.Function.createSequence(a.positionIndicator, function() {
          this.valid = false;
        });
      }
    }
  }, delayScroll:function() {
    var a = this.getScrollTarget().el;
    if (a) {
      this.scrollTask.delay(10, function() {
        if (a.dom) {
          this.syncHorizontalScroll(a.dom.scrollLeft);
        }
      }, this);
    }
  }};
}, setReadOnly:function(a) {
  this.getSchedulingView().setReadOnly(a);
}, isReadOnly:function() {
  return this.getSchedulingView().isReadOnly();
}, switchViewPreset:function(d, a, f, b) {
  if (this.fireEvent('beforeviewchange', this, d, a, f) !== false) {
    if (Ext.isString(d)) {
      this.viewPreset = d;
      d = Sch.preset.Manager.getPreset(d);
    }
    if (!d) {
      throw 'View preset not found';
    }
    var e = d.headerConfig;
    var c = {unit:e.bottom ? e.bottom.unit : e.middle.unit, increment:(e.bottom ? e.bottom.increment : e.middle.increment) || 1, resolutionUnit:d.timeResolution.unit, resolutionIncrement:d.timeResolution.increment, weekStartDay:this.weekStartDay, mainUnit:e.middle.unit, shiftUnit:d.shiftUnit, headerConfig:d.headerConfig, shiftIncrement:d.shiftIncrement || 1, preset:d, defaultSpan:d.defaultSpan || 1};
    if (b) {
      c.start = a || new Date();
      c.end = f;
    } else {
      c.start = a || this.timeAxis.getStart();
      c.end = f;
    }
    if (!b) {
      this.applyViewSettings(d);
    }
    this.timeAxis.reconfigure(c);
  }
}, applyViewSettings:function(b) {
  var a = this.getSchedulingView();
  a.setDisplayDateFormat(b.displayDateFormat);
  if (this.orientation === 'horizontal') {
    a.setRowHeight(this.rowHeight || b.rowHeight, true);
  }
}, getStart:function() {
  return this.timeAxis.getStart();
}, getEnd:function() {
  return this.timeAxis.getEnd();
}, getViewportCenterDate:function() {
  var b = this.getSchedulingView(), c = b.getEl(), a = c.getScroll(), d;
  if (this.orientation === 'vertical') {
    d = [0, a.top + c.getHeight() / 2];
  } else {
    d = [a.left + c.getWidth() / 2, 0];
  }
  return b.getDateFromXY(d, null, true);
}, setTimeColumnWidth:function(b, a) {
  this.getSchedulingView().setColumnWidth(b, a);
}, onTimeAxisReconfigure:function() {
  this.fireEvent('viewchange', this);
  if (this.stateful && this.lockedGrid) {
    this.saveState();
  }
}, getColumnsState:function() {
  var b = this, a = b.lockedGrid.headerCt.getColumnsState();
  return a;
}, shiftNext:function(a) {
  this.timeAxis.shiftNext(a);
}, shiftPrevious:function(a) {
  this.timeAxis.shiftPrevious(a);
}, goToNow:function() {
  this.setTimeSpan(new Date());
}, setTimeSpan:function(b, a) {
  if (this.timeAxis) {
    this.timeAxis.setTimeSpan(b, a);
  }
}, setStart:function(a) {
  this.setTimeSpan(a);
}, setEnd:function(a) {
  this.setTimeSpan(null, a);
}, getTimeAxis:function() {
  return this.timeAxis;
}, getResourceByEventRecord:function(a) {
  return a.getResource();
}, scrollToDate:function(c, b) {
  var a = this.getSchedulingView(), d = a.getXYFromDate(c, true);
  if (this.orientation == 'horizontal') {
    a.getEl().scrollTo('left', Math.max(0, d[0]), b);
  } else {
    a.getEl().scrollTo('top', Math.max(0, d[1]), b);
  }
}, getSchedulingView:function() {
  return this.lockable ? this.normalGrid.getView() : this.getView();
}, setOrientation:function(a) {
  this.removeCls('sch-' + this.orientation);
  this.addCls('sch-' + a);
  this.orientation = a;
}});
Ext.define('Sch.panel.TimelineTreePanel', {extend:'Ext.tree.Panel', requires:['Ext.data.TreeStore'], mixins:['Sch.mixin.TimelinePanel'], useArrows:true, rootVisible:false, constructor:function(a) {
  a = a || {};
  a.animate = false;
  this.callParent(arguments);
}, initComponent:function() {
  this.callParent(arguments);
  if (this.lockable && this.lockedGrid.headerCt.query('treecolumn').length === 0) {
    Ext.Error.raise("You must define an Ext.tree.Column (or use xtype : 'treecolumn').");
  }
}, onRootChange:function(a) {
  if (!this.lockable) {
    this.callParent(arguments);
  }
}}, function() {
  this.override(Sch.mixin.TimelinePanel.prototype.inheritables() || {});
});
Ext.define('Sch.plugin.Printable', {extend:'Ext.AbstractPlugin', lockableScope:'top', docType:'\x3c!DOCTYPE HTML\x3e', beforePrint:Ext.emptyFn, afterPrint:Ext.emptyFn, autoPrintAndClose:true, fakeBackgroundColor:true, scheduler:null, constructor:function(a) {
  Ext.apply(this, a);
}, init:function(a) {
  this.scheduler = a;
  a.print = Ext.Function.bind(this.print, this);
}, mainTpl:'{docType}\x3chtml class\x3d"x-border-box {htmlClasses}"\x3e\x3chead\x3e\x3cmeta content\x3d"text/html; charset\x3dUTF-8" http-equiv\x3d"Content-Type" /\x3e\x3ctitle\x3e{title}\x3c/title\x3e{styles}\x3c/head\x3e\x3cbody class\x3d"sch-print-body {bodyClasses}"\x3e\x3cdiv class\x3d"sch-print-ct {componentClasses}" style\x3d"width:{totalWidth}px"\x3e\x3cdiv class\x3d"sch-print-headerbg" style\x3d"border-left-width:{totalWidth}px;height:{headerHeight}px;"\x3e\x3c/div\x3e\x3cdiv class\x3d"sch-print-header-wrap"\x3e\x3cdiv style\x3d"left:-{lockedScroll}px;margin-right:-{lockedScroll}px;width:{[values.lockedWidth + values.lockedScroll]}px" class\x3d"sch-print-lockedheader x-grid-header-ct x-grid-header-ct-default x-docked x-docked-top x-grid-header-ct-docked-top x-grid-header-ct-default-docked-top x-box-layout-ct x-docked-noborder-top x-docked-noborder-right x-docked-noborder-left"\x3e{lockedHeader}\x3c/div\x3e\x3cdiv style\x3d"left:{lockedWidth}px;width:{normalWidth}px;" class\x3d"sch-print-normalheader x-grid-header-ct x-grid-header-ct-default x-docked x-docked-top x-grid-header-ct-docked-top x-grid-header-ct-default-docked-top x-box-layout-ct x-docked-noborder-top x-docked-noborder-right x-docked-noborder-left"\x3e\x3cdiv style\x3d"margin-left:-{normalScroll}px"\x3e{normalHeader}\x3c/div\x3e\x3c/div\x3e\x3c/div\x3e\x3cdiv id\x3d"lockedRowsCt" style\x3d"left:-{lockedScroll}px;margin-right:-{lockedScroll}px;width:{[values.lockedWidth + values.lockedScroll]}px;top:{headerHeight}px;" class\x3d"sch-print-locked-rows-ct {innerLockedClasses} x-grid-inner-locked"\x3e{lockedRows}\x3c/div\x3e\x3cdiv id\x3d"normalRowsCt" style\x3d"left:{lockedWidth}px;top:{headerHeight}px;width:{normalWidth}px" class\x3d"sch-print-normal-rows-ct {innerNormalClasses}"\x3e\x3cdiv style\x3d"position:relative;overflow:visible;margin-left:-{normalScroll}px"\x3e{normalRows}\x3c/div\x3e\x3c/div\x3e\x3c/div\x3e\x3cscript type\x3d"text/javascript"\x3e{setupScript}\x3c/script\x3e\x3c/body\x3e\x3c/html\x3e', 
getGridContent:function(l) {
  var k = l.normalGrid, c = l.lockedGrid, m = c.getView(), d = k.getView(), f, b, j, e, i;
  this.beforePrint(l);
  var a = m.store.getRange();
  b = m.tpl.apply(m.collectData(a, 0));
  j = d.tpl.apply(d.collectData(a, 0));
  e = m.el.getScroll().left;
  i = d.el.getScroll().left;
  if (l.columnLinesFeature) {
    var h = l.columnLinesFeature;
    var g = h.containerEl;
    h.containerEl = Ext.get(document.createElement('div'));
    h.renderElementsInternal();
    j = h.containerEl.dom.innerHTML + j;
    h.containerEl = g;
  }
  this.afterPrint(l);
  return {normalHeader:k.headerCt.el.dom.innerHTML, lockedHeader:c.headerCt.el.dom.innerHTML, lockedRows:b, normalRows:j, lockedScroll:e, normalScroll:i, lockedWidth:c.getWidth(), normalWidth:k.getWidth(), headerHeight:k.headerCt.getHeight(), innerLockedClasses:c.view.el.dom.className, innerNormalClasses:k.view.el.dom.className + (this.fakeBackgroundColor ? ' sch-print-fake-background' : ''), width:l.getWidth()};
}, getStylesheets:function() {
  return Ext.getDoc().select('link[rel\x3d"stylesheet"]');
}, print:function() {
  var g = this.scheduler;
  if (!(this.mainTpl instanceof Ext.Template)) {
    var a = 22;
    this.mainTpl = Ext.create('Ext.XTemplate', this.mainTpl, {compiled:true, disableFormats:true});
  }
  var h = g.getView(), i = this.getStylesheets(), e = Ext.get(Ext.core.DomHelper.createDom({tag:'div'})), b;
  i.each(function(j) {
    e.appendChild(j.dom.cloneNode(true));
  });
  b = e.dom.innerHTML + '';
  var f = this.getGridContent(g), c = this.mainTpl.apply(Ext.apply({waitText:this.waitText, docType:this.docType, htmlClasses:'', bodyClasses:Ext.getBody().dom.className, componentClasses:g.el.dom.className, title:g.title || '', styles:b, totalWidth:g.getWidth(), setupScript:'(' + this.setupScript.toString() + ')();'}, f));
  var d = window.open('', 'printgrid');
  d.document.write(c);
  d.document.close();
  if (this.autoPrintAndClose) {
    d.print();
    if (!Ext.isChrome) {
      d.close();
    }
  }
}, setupScript:function() {
  var f = document.getElementById('lockedRowsCt'), d = document.getElementById('normalRowsCt'), b = f.getElementsByTagName('tr'), a = d.getElementsByTagName('tr'), e = a.length, c = 0;
  for (; c < e; c++) {
    b[c].style.height = a[c].style.height;
  }
}});
Ext.define('Sch.plugin.PdfExport', {extend:'Ext.util.Observable', mixins:['Ext.AbstractPlugin'], lockableScope:'top', printServer:undefined, tpl:new Ext.XTemplate('\x3c!DOCTYPE html\x3e\x3chtml class\x3d"x-border-box {htmlClasses}"\x3e\x3chead\x3e\x3cmeta content\x3d"text/html; charset\x3dUTF-8" http-equiv\x3d"Content-Type" /\x3e\x3ctitle\x3e{column}/{row}\x3c/title\x3e{styles}\x3c/head\x3e\x3cbody class\x3d"{bodyClasses}"\x3e{[this.showHeader(values)]}\x3cdiv class\x3d"{componentClasses}" style\x3d"height:{bodyHeight}px; width:{totalWidth}px"\x3e{HTML}\x3c/div\x3e\x3c/body\x3e\x3c/html\x3e', 
{disableFormats:true, showHeader:function(a) {
  if (a.showHeader) {
    return '\x3cdiv class\x3d"sch-pdfprint-header" style\x3d"width:' + a.totalWidth + 'px"\x3e\x3ch2\x3e' + a.column + '/' + a.row + '\x3c/h2\x3e\x3c/div\x3e';
  }
  return '';
}}), exportDialogClassName:'Sch.widget.PdfExportDialog', exportDialogConfig:{}, defaultConfig:{format:'A4', orientation:'portrait', range:'complete', showHeader:true}, pageSizes:{A5:{width:5.8, height:8.3}, A4:{width:8.3, height:11.7}, A3:{width:11.7, height:16.5}, Letter:{width:8.5, height:11}}, openAfterExport:true, DPI:72, constructor:function(a) {
  this.callParent(arguments);
  this.addEvents('hidedialogwindow', 'showdialogerror', 'updateprogressbar');
}, init:function(a) {
  this.scheduler = a;
  a.showExportDialog = Ext.Function.bind(this.showExportDialog, this);
  a.doExport = Ext.Function.bind(this.doExport, this);
}, showExportDialog:function() {
  var b = this, a = b.scheduler.getSchedulingView();
  if (!b.win) {
    b.win = Ext.create(b.exportDialogClassName, {plugin:b, exportDialogConfig:Ext.apply({startDate:this.scheduler.getStart(), endDate:this.scheduler.getEnd(), rowHeight:a.rowHeight, columnWidth:a.getSingleTickInPixels()}, b.exportDialogConfig)});
  }
  b.win.show();
}, getStylesheets:function() {
  var c = Ext.getDoc().select('link[rel\x3d"stylesheet"]'), a = Ext.get(Ext.core.DomHelper.createDom({tag:'div'})), b;
  c.each(function(d) {
    a.appendChild(d.dom.cloneNode(true));
  });
  b = a.dom.innerHTML + '';
  return b;
}, doExport:function(l, i, n) {
  var A = this, m = A.scheduler, o = m.getSchedulingView(), k = A.getStylesheets(), y = l || A.defaultConfig;
  A.mask();
  A.fireEvent('updateprogressbar', 0.1);
  if (m.expandAll) {
    m.expandAll();
  }
  var w = m.lockedGrid, p = m.normalGrid, f = o.rowHeight, z = m.timeAxis.getTicks(), q = o.getSingleTickInPixels(), b = {width:m.getWidth(), height:m.getHeight(), rowHeight:f, columnWidth:q, startDate:m.getStart(), endDate:m.getEnd(), normalWidth:p.getWidth(), normalPosition:p.getPosition()}, u, g;
  if (y.orientation === 'landscape') {
    u = A.pageSizes[y.format].height * A.DPI;
    g = A.pageSizes[y.format].width * A.DPI;
  } else {
    u = A.pageSizes[y.format].width * A.DPI;
    g = A.pageSizes[y.format].height * A.DPI;
  }
  var x = 41, t = p.headerCt.getHeight(), e = Math.floor(g) - t - (y.showHeader ? x : 0);
  if (y.range !== 'complete') {
    var d, a, j, c, r;
    if (y.range === 'date') {
      d = new Date(y.dateFrom);
      a = new Date(y.dateTo);
      a = Sch.util.Date.add(a, Sch.util.Date.DAY, 1);
    } else {
      if (y.range === 'current') {
        j = o.getVisibleDateRange();
        d = j.startDate;
        a = j.endDate;
      }
    }
    c = Math.floor(o.timeAxis.getTickFromDate(d));
    r = Math.floor(o.timeAxis.getTickFromDate(a));
    z = z.filter(function(C, B) {
      return B >= c && B <= r;
    });
    m.setTimeSpan(d, a);
  }
  m.setWidth(u);
  m.setTimeColumnWidth(q);
  if (m.ownerCt) {
    m.ownerCt.suspendLayouts();
  }
  var h = A.calculatePages(y, z, q, u, e), v = {ticks:z, printHeight:e, paperWidth:u, headerHeight:t, styles:k, config:y}, s = A.getExportJsonHtml(h, v);
  A.fireEvent('updateprogressbar', 0.4);
  if (A.printServer) {
    Ext.Ajax.request({type:'POST', url:A.printServer, params:{html:{array:s}, format:y.format, orientation:y.orientation, range:y.range}, success:function(B) {
      A.onSuccess(B, i);
    }, failure:function(B) {
      A.onFailure(B, n);
    }, scope:A});
  } else {
    throw 'Server url not defined !';
  }
  A.restorePanel(b);
}, calculatePages:function(c, p, h, l, b) {
  var m = this, n = m.scheduler, e = n.lockedGrid, a = n.getSchedulingView().rowHeight, k = e.getWidth(), j = Math.floor(l / h), g = Math.floor((l - k) / h), d = Math.ceil((p.length - g) / j) + 1, o = n.getSchedulingView().store.getCount(), i = Math.floor(b / a), f = Math.ceil(o / i);
  return {columnsAmountLocked:g, columnsAmountNormal:j, rowsAmount:i, rowPages:f, columnPages:d, timeColumnWidth:h, lockedGridWidth:k, rowHeight:a, panelHTML:{}};
}, getExportJsonHtml:function(g, y) {
  var B = this, n = B.scheduler, q = g.columnsAmountLocked, s = g.columnsAmountNormal, h = g.rowsAmount, r = g.rowPages, a = g.columnPages, o = g.panelHTML, p = g.timeColumnWidth, x = y.paperWidth, d = y.printHeight, v = y.headerHeight, l = y.styles, z = y.config, A = y.ticks, u = [], j, c, m, e, b, f;
  for (var w = 0; w < a; w += 1) {
    if (w === 0) {
      j = Ext.Number.constrain(q - 1, w, A.length - 1);
      n.setTimeSpan(A[w].start, A[j].end);
    } else {
      if (!c) {
        c = n.lockedGrid.hide();
      }
      if (A[j + s]) {
        n.setTimeSpan(A[j + 1].start, A[j + s].end);
        j = j + s;
      } else {
        n.setTimeSpan(A[j + 1].start, A[A.length - 1].end);
      }
    }
    n.setTimeColumnWidth(p);
    for (var t = 0; t < r; t += 1) {
      B.hideRows(h, t);
      o.dom = n.body.dom.innerHTML;
      o.k = t;
      o.i = w;
      e = B.resizePanelHTML(o);
      m = B.tpl.apply(Ext.apply({bodyClasses:Ext.getBody().dom.className, bodyHeight:d + v, componentClasses:n.el.dom.className, styles:l, showHeader:z.showHeader, HTML:e.dom.innerHTML, totalWidth:x, headerHeight:v, column:w + 1, row:t + 1}));
      f = {html:m};
      u.push(f);
      B.showRows();
    }
  }
  return Ext.JSON.encode(u);
}, resizePanelHTML:function(f) {
  var g = Ext.get(Ext.core.DomHelper.createDom({tag:'div', html:f.dom})), b = this.scheduler, e = b.lockedGrid, c = b.normalGrid;
  var d = [g.select('#' + b.id + '-targetEl').first(), g.select('#' + e.id).first(), g.select('#' + e.body.id).first(), g.select('#' + e.body.child('.x-grid-view').id).first()], a = [g.select('#' + c.id).first(), g.select('#' + c.headerCt.id).first(), g.select('#' + c.body.id).first(), g.select('#' + c.getView().id).first()];
  Ext.Array.each(d, function(h) {
    if (h) {
      h.setHeight('100%');
    }
  });
  Ext.Array.each(a, function(i, h) {
    if (h === 1) {
      i.setWidth('100%');
    } else {
      i.applyStyles({height:'100%', width:'100%'});
    }
  });
  return g;
}, onSuccess:function(a, d) {
  var b = this, c = Ext.JSON.decode(a.responseText);
  b.fireEvent('updateprogressbar', 1);
  if (c.success === true) {
    setTimeout(function() {
      b.fireEvent('hidedialogwindow');
      b.unmask();
      if (b.openAfterExport) {
        window.open(c.url, 'PDF_Print');
      }
    }, b.win ? b.win.hideTime : 3000);
  } else {
    b.fireEvent('showdialogerror', c.msg);
    b.unmask();
  }
  if (d) {
    d.call(this, a);
  }
}, onFailure:function(b, a) {
  this.fireEvent('showdialogerror', this);
  if (a) {
    a.call(this, b);
  }
}, hideRows:function(d, f) {
  var c = this.scheduler.lockedGrid.getEl().select('.x-grid-row'), a = this.scheduler.normalGrid.getEl().select('.x-grid-row'), g = d * f, b = g + d;
  for (var e = 0; e < a.elements.length; e += 1) {
    if (e < g || e >= b) {
      c.elements[e].className += ' sch-none';
      a.elements[e].className += ' sch-none';
    }
  }
}, showRows:function() {
  var b = this.scheduler.lockedGrid.getEl().select('.x-grid-row'), a = this.scheduler.normalGrid.getEl().select('.x-grid-row');
  b.each(function(c) {
    c.removeCls('sch-none');
  });
  a.each(function(c) {
    c.removeCls('sch-none');
  });
}, mask:function() {
  var a = Ext.getBody().mask();
  a.addCls('sch-pdf-mask');
}, unmask:function() {
  Ext.getBody().unmask();
}, restorePanel:function(a) {
  var b = this.scheduler;
  b.setWidth(a.width);
  b.setHeight(a.height);
  b.setTimeSpan(a.startDate, a.endDate);
  b.setTimeColumnWidth(a.columnWidth, true);
  b.getSchedulingView().setRowHeight(a.rowHeight);
  b.lockedGrid.show();
  b.normalGrid.setWidth(a.normalWidth);
  b.normalGrid.setPosition(a.normalPosition[0]);
  b.ownerCt && b.ownerCt.resumeLayouts();
}, destroy:function() {
  if (this.win) {
    this.win.destroy();
  }
}});
Ext.define('Sch.widget.ResizePicker', {extend:'Ext.Panel', alias:'widget.dualrangepicker', width:200, height:200, border:true, collapsible:false, bodyStyle:'position:relative;margin:5px', verticalCfg:{height:120, value:24, increment:2, minValue:20, maxValue:80, reverse:true}, horizontalCfg:{width:120, value:100, minValue:25, increment:5, maxValue:200}, initComponent:function() {
  var a = this;
  a.addEvents('change', 'changecomplete', 'select');
  a.horizontalCfg.value = a.dialog.columnWidth;
  a.verticalCfg.value = a.dialog.rowHeight;
  a.dockedItems = [a.vertical = new Ext.slider.Single(Ext.apply({dock:'left', style:'margin-top:10px', vertical:true, listeners:{change:a.onSliderChange, changecomplete:a.onSliderChangeComplete, scope:a}}, a.verticalCfg)), a.horizontal = new Ext.slider.Single(Ext.apply({dock:'top', style:'margin-left:28px', listeners:{change:a.onSliderChange, changecomplete:a.onSliderChangeComplete, scope:a}}, a.horizontalCfg))];
  a.callParent(arguments);
}, afterRender:function() {
  var b = this;
  b.addCls('sch-ux-range-picker');
  b.valueHandle = this.body.createChild({cls:'sch-ux-range-value', cn:{tag:'span'}});
  b.valueSpan = this.valueHandle.down('span');
  var a = new Ext.dd.DD(this.valueHandle);
  Ext.apply(a, {startDrag:function() {
    b.dragging = true;
    this.constrainTo(b.body);
  }, onDrag:function() {
    b.onHandleDrag.apply(b, arguments);
  }, endDrag:function() {
    b.onHandleEndDrag.apply(b, arguments);
    b.dragging = false;
  }, scope:this});
  this.setValues(this.getValues());
  this.callParent(arguments);
  this.body.on('click', this.onBodyClick, this);
}, onBodyClick:function(c, a) {
  var b = [c.getXY()[0] - 8 - this.body.getX(), c.getXY()[1] - 8 - this.body.getY()];
  this.valueHandle.setLeft(Ext.Number.constrain(b[0], 0, this.getAvailableWidth()));
  this.valueHandle.setTop(Ext.Number.constrain(b[1], 0, this.getAvailableHeight()));
  this.setValues(this.getValuesFromXY([this.valueHandle.getLeft(true), this.valueHandle.getTop(true)]));
  this.onSliderChangeComplete();
}, getAvailableWidth:function() {
  return this.body.getWidth() - 18;
}, getAvailableHeight:function() {
  return this.body.getHeight() - 18;
}, onHandleDrag:function() {
  this.setValues(this.getValuesFromXY([this.valueHandle.getLeft(true), this.valueHandle.getTop(true)]));
}, onHandleEndDrag:function() {
  this.setValues(this.getValuesFromXY([this.valueHandle.getLeft(true), this.valueHandle.getTop(true)]));
}, getValuesFromXY:function(d) {
  var c = d[0] / this.getAvailableWidth();
  var a = d[1] / this.getAvailableHeight();
  var e = Math.round((this.horizontalCfg.maxValue - this.horizontalCfg.minValue) * c);
  var b = Math.round((this.verticalCfg.maxValue - this.verticalCfg.minValue) * a) + this.verticalCfg.minValue;
  return [e + this.horizontalCfg.minValue, b];
}, getXYFromValues:function(d) {
  var b = this.horizontalCfg.maxValue - this.horizontalCfg.minValue;
  var f = this.verticalCfg.maxValue - this.verticalCfg.minValue;
  var a = Math.round((d[0] - this.horizontalCfg.minValue) * this.getAvailableWidth() / b);
  var c = d[1] - this.verticalCfg.minValue;
  var e = Math.round(c * this.getAvailableHeight() / f);
  return [a, e];
}, updatePosition:function() {
  var a = this.getValues();
  var b = this.getXYFromValues(this.getValues());
  this.valueHandle.setLeft(Ext.Number.constrain(b[0], 0, this.getAvailableWidth()));
  this.valueHandle.setTop(Ext.Number.constrain(b[1], 0, this.getAvailableHeight()));
  this.positionValueText();
  this.valueSpan.update('[' + a.toString() + ']');
}, positionValueText:function() {
  var a = this.valueHandle.getTop(true);
  var b = this.valueHandle.getLeft(true);
  this.valueSpan.setLeft(b > 30 ? -30 : 10);
  this.valueSpan.setTop(a > 10 ? -20 : 20);
}, setValues:function(a) {
  this.horizontal.setValue(a[0]);
  if (this.verticalCfg.reverse) {
    this.vertical.setValue(this.verticalCfg.maxValue + this.verticalCfg.minValue - a[1]);
  } else {
    this.vertical.setValue(a[1]);
  }
  if (!this.dragging) {
    this.updatePosition();
  }
  this.positionValueText();
  this.valueSpan.update('[' + a.toString() + ']');
}, getValues:function() {
  var a = this.vertical.getValue();
  if (this.verticalCfg.reverse) {
    a = this.verticalCfg.maxValue - a + this.verticalCfg.minValue;
  }
  return [this.horizontal.getValue(), a];
}, onSliderChange:function() {
  this.fireEvent('change', this, this.getValues());
  if (!this.dragging) {
    this.updatePosition();
  }
}, onSliderChangeComplete:function() {
  this.fireEvent('changecomplete', this, this.getValues());
}, afterLayout:function() {
  this.callParent(arguments);
  this.updatePosition();
}});
Ext.define('Sch.widget.ExportDialogForm', {extend:'Ext.form.Panel', dialog:null, layout:{type:'vbox'}, requires:['Sch.widget.ResizePicker'], border:false, bodyPadding:10, initComponent:function() {
  var b = this, a = b.dialog;
  Ext.apply(this, {fieldDefaults:{labelAlign:'top', labelWidth:100, labelStyle:'font-weight:bold'}, items:[{width:a.getWidth() - 40, xtype:'combo', value:'complete', triggerAction:'all', forceSelection:true, editable:false, fieldLabel:a.rangeFieldLabel, name:'range', itemId:'rangeField', queryMode:'local', displayField:'name', valueField:'value', store:Ext.create('Ext.data.Store', {fields:['name', 'value'], data:[{name:a.completeView, value:'complete'}, {name:a.dateRange, value:'date'}, {name:a.currentView, 
  value:'current'}]})}, {xtype:'dualrangepicker', itemId:'rangePicker', beforeSubTpl:new Ext.XTemplate('\x3cspan class\x3d"sch-pdfexportdialog-pickertext"\x3e' + a.pickerText + ':\x3c/span\x3e'), dialog:a, hidden:true}, {width:a.getWidth() - 40, xtype:'datefield', fieldLabel:b.dateRangeFrom, name:'dateFrom', itemId:'dateFromField', hidden:true, allowBlank:false, cls:'sch-pdfexportdialog-date', beforeSubTpl:new Ext.XTemplate('\x3cspan class\x3d"sch-pdfexportdialog-datelabel"\x3e' + a.dateRangeFrom + 
  ':\x3c/span\x3e'), maxValue:a.endDate, minValue:a.startDate, value:a.startDate, validator:function(e) {
    var d = new Date(e);
    return d >= a.startDate;
  }}, {width:a.getWidth() - 40, xtype:'datefield', name:'dateTo', itemId:'dateToField', hidden:true, allowBlank:false, cls:'sch-pdfexportdialog-date', beforeSubTpl:new Ext.XTemplate('\x3cspan class\x3d"sch-pdfexportdialog-datelabel"\x3e' + a.dateRangeTo + ':\x3c/span\x3e'), maxValue:a.endDate, minValue:a.startDate, value:a.endDate, validator:function(e) {
    var d = new Date(e);
    return d <= a.endDate;
  }}, {width:a.getWidth() - 40, xtype:'checkboxfield', fieldLabel:a.showHeaderLabel, name:'showHeader', checked:true}, {width:a.getWidth() - 40, xtype:'combo', value:'A4', triggerAction:'all', forceSelection:true, editable:false, fieldLabel:a.formatFieldLabel, name:'format', queryMode:'local', store:['A5', 'A4', 'A3', 'Letter']}, {width:a.getWidth() - 40, xtype:'combo', value:'portrait', triggerAction:'all', forceSelection:true, editable:false, afterSubTpl:new Ext.XTemplate('\x3cspan id\x3d"sch-pdfexportdialog-imagePortrait"\x3e\x3c/span\x3e\x3cspan id\x3d"sch-pdfexportdialog-imageLandscape" class\x3d"sch-none"\x3e\x3c/span\x3e'), 
  fieldLabel:a.orientationFieldLabel, name:'orientation', cls:'sch-pdfexportdialog-orientation', itemId:'orientationField', displayField:'name', valueField:'value', queryMode:'local', store:Ext.create('Ext.data.Store', {fields:['name', 'value'], data:[{name:a.orientationPortrait, value:'portrait'}, {name:a.orientationLandscape, value:'landscape'}]})}, new Ext.ProgressBar({text:a.progressBarText, width:a.getWidth() - 40, animate:true, hidden:true, itemId:'progressBar', id:'print-widget-progressbar'})]});
  b.callParent(arguments);
  if (!b.progressBar) {
    b.progressBar = new Ext.ProgressBar({text:a.progressBarText, width:a.getWidth() - 40, animate:true, hidden:true, itemId:'progressBar', id:'print-widget-progressbar'});
  }
  b.items.add(b.progressBar);
  b.dateFromField = b.getComponent('dateFromField');
  b.dateToField = b.getComponent('dateToField');
  b.rangePicker = b.getComponent('rangePicker');
  b.getComponent('orientationField').on('change', b.onChange, b);
  b.getComponent('rangeField').on('change', b.onChange, b);
  b.form.relayEvents(b.dialog, ['updateprogressbar', 'hideprogressbar', 'showprogressbar']);
  var c = {hideprogressbar:b.hideProgressBar, showprogressbar:b.showProgressBar, updateprogressbar:b.updateProgressBar, scope:b};
  b.form.on(c);
}, onChange:function(b, a) {
  if (b.name === 'range') {
    switch(a) {
      case 'complete':
        this.dateFromField.hide();
        this.dateToField.hide();
        this.rangePicker.hide();
        break;
      case 'date':
        this.dateFromField.show();
        this.dateToField.show();
        this.rangePicker.hide();
        break;
      case 'current':
        this.dateFromField.hide();
        this.dateToField.hide();
        this.rangePicker.show();
        this.rangePicker.expand(true);
        break;
    }
  }
  if (b.name === 'orientation') {
    switch(a) {
      case 'landscape':
        Ext.get('sch-pdfexportdialog-imagePortrait').toggleCls('sch-none');
        Ext.get('sch-pdfexportdialog-imageLandscape').toggleCls('sch-none');
        break;
      case 'portrait':
        Ext.get('sch-pdfexportdialog-imagePortrait').toggleCls('sch-none');
        Ext.get('sch-pdfexportdialog-imageLandscape').toggleCls('sch-none');
        break;
    }
  }
}, showProgressBar:function() {
  this.progressBar && this.progressBar.show();
}, hideProgressBar:function() {
  this.progressBar && this.progressBar.hide();
}, updateProgressBar:function(a) {
  this.progressBar && this.progressBar.updateProgress(a);
}, destroy:function() {
  this.progressBar && this.progressBar.destroy();
  this.callParent(arguments);
}});
Ext.define('Sch.widget.ExportDialogButtons', {extend:'Ext.panel.Panel', dialog:null, height:35, border:false, collapsible:false, items:[], initComponent:function() {
  Ext.apply(this, {width:this.dialog.getWidth(), items:[{xtype:'button', scale:'medium', text:this.dialog.exportButtonText, handler:function() {
    var b = this.dialog.form.getForm();
    if (b.isValid()) {
      var a = b.getValues();
      this.dialog.fireEvent('showprogressbar');
      this.dialog.plugin.doExport(a);
    }
  }, scope:this}, {xtype:'button', scale:'medium', text:this.dialog.cancelButtonText, handler:function() {
    this.dialog.hideDialog();
  }, scope:this}]});
  this.callParent(arguments);
}});
Ext.define('Sch.widget.PdfExportDialog', {extend:'Ext.window.Window', alias:'widget.exportdialog', modal:false, width:240, height:310, cls:'sch-pdfexportdialog', frame:false, header:false, title:null, layout:'fit', resizable:false, draggable:true, plugin:null, hideTime:2000, formPanel:null, buttonsPanel:null, progressBar:null, items:[], tpl:Ext.create('Ext.XTemplate', '\x3cdiv class\x3d"sch-pdfexportdialog-header"\x3e\x3ch4\x3e{headerText}\x3c/h4\x3e\x3cspan id\x3d"sch-pdfexportdialog-close"\x3e\x3c/span\x3e\x3c/div\x3e\x3cdiv class\x3d"sch-pdfexportdialog-form" id\x3d"sch-pdfexportdialog-form"\x3e\x3c/div\x3e\x3cdiv class\x3d"sch-pdfexportdialog-msg sch-none"\x3e\x3cspan id\x3d"sch-pdfexportdialog-msg"\x3e\x3c/span\x3e\x3c/div\x3e\x3cdiv class\x3d"sch-pdfexportdialog-button" id\x3d"sch-pdfexportdialog-button"\x3e\x3c/div\x3e', 
{compiled:true}), generalError:'An error occured, try again.', dialogHeader:'PDF Settings', formatFieldLabel:'Paper format', orientationFieldLabel:'Orientation', rangeFieldLabel:'Export range', showHeaderLabel:'Add page number', orientationPortrait:'Portrait', orientationLandscape:'Landscape', completeView:'Complete schedule', currentView:'Current view', dateRange:'Date range', dateRangeFrom:'Export from', pickerText:'Resize column/rows to desired value', dateRangeTo:'Export to', exportButtonText:'Export', 
cancelButtonText:'Cancel', progressBarText:'Exporting...', requires:['Ext.ProgressBar', 'Sch.widget.ExportDialogForm'], constructor:function(a) {
  Ext.apply(this, a.exportDialogConfig);
  this.callParent(arguments);
}, initComponent:function() {
  var b = this, a = {hidedialogwindow:b.hideDialog, showdialogerror:b.showError, updateprogressbar:function(c) {
    b.fireEvent('updateprogressbar', c);
  }, scope:this};
  b.html = b.tpl.apply({headerText:b.dialogHeader});
  b.plugin.on(a);
  b.callParent(arguments);
}, destroy:function() {
  this.form.destroy();
  this.buttons.destroy();
  this.callParent(arguments);
}, afterRender:function() {
  var a = this;
  a.buttons = a.buttonsPanel || new Sch.widget.ExportDialogButtons({renderTo:'sch-pdfexportdialog-button', dialog:a, width:a.getWidth(), height:35});
  a.form = a.formPanel || new Sch.widget.ExportDialogForm({dialog:a, renderTo:'sch-pdfexportdialog-form'});
  a.on('changecomplete', function(c, b) {
    a.plugin.scheduler.setTimeColumnWidth(b[0], true);
    if (a.form.rangePicker.verticalCfg.reverse) {
      var d = b[1] - a.form.rangePicker.verticalCfg.maxValue + a.form.rangePicker.verticalCfg.minValue;
      a.plugin.scheduler.getSchedulingView().setRowHeight(d);
    } else {
      a.plugin.scheduler.getSchedulingView().setRowHeight(b[1]);
    }
  });
  a.form.on('resize', a.setTipHeight, a);
  a.relayEvents(a.form.rangePicker, ['change', 'changecomplete', 'select']);
  Ext.get('sch-pdfexportdialog-close').on('click', a.hideDialog, a);
}, setTipHeight:function() {
  var c = this, a = c.getHeight(), b = c.form.getHeight();
  if (!c.oldFormHeight) {
    c.oldFormHeight = b;
  } else {
    c.form.suspendEvents();
    c.setHeight(c.getHeight() + b - c.oldFormHeight);
    c.form.resumeEvents();
    c.oldFormHeight = b;
  }
}, hideDialog:function() {
  var a = this;
  a.fireEvent('updateprogressbar', 0);
  a.fireEvent('hideprogressbar');
  a.form.show();
  a.form.getForm().reset();
  a.buttons.show();
  a.hide();
}, showError:function(c) {
  var b = this, a;
  c = c || b.generalErrorText;
  b.fireEvent('hideprogressbar');
  b.form.hide();
  b.buttons.hide();
  a = b.getEl().select('.sch-pdfexportdialog-msg').first();
  a.dom.innerHTML = c;
  a.removeCls('sch-none');
  setTimeout(function() {
    a.dom.innerHTML = '';
    a.addCls('sch-none');
    b.hideDialog();
  }, b.hideTime);
}});
Ext.define('Gnt.model.WeekAvailability', {extend:'Sch.model.Range', customizableFields:[{name:'Availability'}], availabilityField:'Availability', set:function(b, a) {
  if (b === this.nameField) {
    Ext.Array.each(this.getAvailability(), function(c) {
      c.setName(a);
    });
  }
  this.callParent(arguments);
}, getAvailability:function() {
  return this.get(this.availabilityField) || [];
}, setAvailability:function(b) {
  var a = this.getName();
  Ext.Array.each(b, function(c) {
    c.setName(a);
  });
  this.set(this.availabilityField, b);
}});
Ext.define('Gnt.model.CalendarDay', {requires:['Ext.data.Types'], extend:'Sch.model.Customizable', idProperty:'Id', customizableFields:[{name:'Date', type:'date', dateFormat:'c', convert:function(b, a) {
  if (!b) {
    return;
  }
  var c = Ext.data.Types.DATE.convert.call(this, b);
  if (c) {
    Ext.Date.clearTime(c);
  }
  if (a.data[a.idProperty] == null) {
    a.data[a.idProperty] = c - 0;
  }
  return c;
}}, {name:'Id'}, {name:'IsWorkingDay', type:'boolean', defaultValue:false}, {name:'Cls', defaultValue:'gnt-holiday'}, 'Name', {name:'Availability', convert:function(b, a) {
  if (b) {
    return Ext.typeOf(b) === 'string' ? [b] : b;
  } else {
    return [];
  }
}}], availabilityCache:null, dateField:'Date', isWorkingDayField:'IsWorkingDay', clsField:'Cls', nameField:'Name', availabilityField:'Availability', setDate:function(b) {
  var a = Ext.Date.clearTime(b, true);
  this.data[this.idProperty] = a - 0;
  this.set(this.dateField, a);
}, clearDate:function() {
  this.data[this.idProperty] = null;
}, getAvailability:function(b) {
  var c = this;
  if (b) {
    return this.get(this.availabilityField);
  }
  if (this.availabilityCache) {
    return this.availabilityCache;
  }
  var a = [];
  Ext.Array.each(this.get(this.availabilityField), function(d) {
    a.push(Ext.typeOf(d) === 'string' ? c.parseInterval(d) : d);
  });
  this.verifyAvailability(a);
  return this.availabilityCache = a;
}, setAvailability:function(a) {
  this.availabilityCache = null;
  this.set(this.availabilityField, this.stringifyIntervals(a));
  this.getAvailability();
}, verifyAvailability:function(b) {
  b.sort(function(f, e) {
    return f.startTime - e.startTime;
  });
  Ext.Array.each(b, function(e) {
    if (e.startTime > e.endTime) {
      throw 'Start time is greater than end time';
    }
  });
  for (var a = 1; a < b.length; a++) {
    var c = b[a - 1];
    var d = b[a];
    if (c.endTime > d.startTime) {
      throw 'Availability intervals should not intersect';
    }
  }
}, prependZero:function(a) {
  return a < 10 ? '0' + a : a;
}, stringifyInterval:function(b) {
  var c = b.startTime;
  var a = b.endTime;
  return this.prependZero(c.getHours()) + ':' + this.prependZero(c.getMinutes()) + '-' + this.prependZero(a.getHours()) + ':' + this.prependZero(a.getMinutes());
}, stringifyIntervals:function(b) {
  var c = this;
  var a = [];
  Ext.Array.each(b, function(d) {
    if (Ext.typeOf(d) === 'string') {
      a.push(d);
    } else {
      a.push(c.stringifyInterval(d));
    }
  });
  return a;
}, parseInterval:function(b) {
  var a = /(\d\d):(\d\d)-(\d\d):(\d\d)/.exec(b);
  if (!a) {
    throw 'Invalid format for availability string: ' + b + '. It should have exact format: hh:mm-hh:mm';
  }
  return {startTime:new Date(0, 0, 0, a[1], a[2]), endTime:new Date(0, 0, 0, a[3], a[4])};
}, getTotalHours:function() {
  return this.getTotalMS() / 1000 / 60 / 60;
}, getTotalMS:function() {
  var a = 0;
  Ext.Array.each(this.getAvailability(), function(b) {
    a += b.endTime - b.startTime;
  });
  return a;
}, addAvailabilityInterval:function(d, b) {
  var a;
  if (d instanceof Date) {
    a = {startTime:d, endTime:b};
  } else {
    a = this.parseInterval(d + (b ? '-' + b : ''));
  }
  var c = this.getAvailability().concat(a);
  this.verifyAvailability(c);
  this.setAvailability(c);
}, removeAvailbilityInterval:function(a) {
  var b = this.getAvailability();
  b.splice(a, 1);
  this.setAvailability(b);
}, getAvailabilityIntervalsFor:function(d) {
  d = typeof d == 'number' ? new Date(d) : d;
  var c = d.getFullYear();
  var e = d.getMonth();
  var b = d.getDate();
  var a = [];
  Ext.Array.each(this.getAvailability(), function(f) {
    var g = f.endTime.getDate();
    a.push({startDate:new Date(c, e, b, f.startTime.getHours(), f.startTime.getMinutes()), endDate:new Date(c, e, b + (g == 1 ? 1 : 0), f.endTime.getHours(), f.endTime.getMinutes())});
  });
  return a;
}, getAvailabilityStartFor:function(b) {
  var a = this.getAvailabilityIntervalsFor(b);
  if (!a.length) {
    return null;
  }
  return a[0].startDate;
}, getAvailabilityEndFor:function(b) {
  var a = this.getAvailabilityIntervalsFor(b);
  if (!a.length) {
    return null;
  }
  return a[a.length - 1].endDate;
}});
Ext.define('Gnt.model.Assignment', {extend:'Sch.model.Customizable', idProperty:'Id', customizableFields:[{name:'Id'}, {name:'ResourceId'}, {name:'TaskId'}, {name:'Units', type:'float', defaultValue:100}], resourceIdField:'ResourceId', taskIdField:'TaskId', unitsField:'Units', isPersistable:function() {
  var a = this.getTask(), b = this.getResource();
  return a && !a.phantom && b && !b.phantom;
}, getUnits:function() {
  return Math.max(0, this.get(this.unitsField));
}, setUnits:function(a) {
  if (a < 0) {
    throw "`Units` value for an assignment can't be less than 0";
  }
  this.set(this.unitsField, a);
}, getResourceName:function() {
  var a = this.stores[0].getResourceStore().getById(this.getResourceId());
  if (a) {
    return a.getName();
  }
  return '';
}, getTask:function(a) {
  return (a || this.stores[0].getTaskStore()).getById(this.getTaskId());
}, getResource:function() {
  return this.stores[0].getResourceStore().getByInternalId(this.getResourceId());
}, getInternalId:function() {
  return this.getId() || this.internalId;
}, getEffort:function(b) {
  var a = this.getTask();
  var c = 0;
  a.forEachAvailabilityIntervalWithResources({startDate:a.getStartDate(), endDate:a.getEndDate(), resources:[this.getResource()]}, function(g, f, e) {
    var h;
    for (var d in e) {
      h = e[d].units;
    }
    c += (f - g) * h / 100;
  });
  return a.getProjectCalendar().convertMSDurationToUnit(c, b || a.getEffortUnit());
}});
Ext.define('Gnt.model.Dependency', {extend:'Sch.model.Customizable', inheritableStatics:{Type:{StartToStart:0, StartToEnd:1, EndToStart:2, EndToEnd:3}}, idProperty:'Id', customizableFields:[{name:'Id'}, {name:'From'}, {name:'To'}, {name:'Type', type:'int', defaultValue:2}, {name:'Lag', type:'int', defaultValue:0}, {name:'Cls'}], fromField:'From', toField:'To', typeField:'Type', lagField:'Lag', clsField:'Cls', constructor:function(a) {
  this.callParent(arguments);
  if (a) {
    if (a.fromTask) {
      if (a.fromTask instanceof Gnt.model.Task) {
        this.setSourceTask(a.fromTask);
      } else {
        this.setSourceId(a.fromTask);
      }
    }
    if (a.toTask) {
      if (a.toTask instanceof Gnt.model.Task) {
        this.setTargetTask(a.toTask);
      } else {
        this.setTargetId(a.toTask);
      }
    }
    if (Ext.isDefined(a.type)) {
      this.setType(a.type);
    }
  }
}, getTaskStore:function() {
  return this.stores[0].taskStore;
}, getSourceTask:function(a) {
  return this.getTaskStore().getById(this.getSourceId());
}, setSourceTask:function(a) {
  this.setSourceId(a.getId() || a.internalId);
}, getTargetTask:function() {
  return this.getTaskStore().getById(this.getTargetId());
}, setTargetTask:function(a) {
  this.setTargetId(a.getId() || a.internalId);
}, getSourceId:function() {
  return this.get(this.fromField);
}, setSourceId:function(a) {
  this.set(this.fromField, a);
}, getTargetId:function() {
  return this.get(this.toField);
}, setTargetId:function(a) {
  this.set(this.toField, a);
}, isPersistable:function() {
  var a = this.getSourceTask(), b = this.getTargetTask();
  return a && !a.phantom && b && !b.phantom;
}, isValid:function(a) {
  var b = this.callParent(arguments);
  if (b && this.stores[0]) {
    b = this.stores[0].isValidDependency(this.getSourceId(), this.getTargetId(), true);
  }
  return b;
}});
Ext.define('Gnt.model.Resource', {extend:'Sch.model.Resource', customizableFields:['CalendarId'], calendarIdField:'CalendarId', getTaskStore:function() {
  return this.stores[0].getTaskStore();
}, getEventStore:function() {
  return this.getTaskStore();
}, getEvents:function() {
  return this.getTasks();
}, getTasks:function() {
  var a = [];
  this.forEachAssignment(function(b) {
    var c = b.getTask();
    if (c) {
      a.push(c);
    }
  });
  return a;
}, getCalendar:function(a) {
  return a ? this.getOwnCalendar() : this.getOwnCalendar() || this.getProjectCalendar();
}, getOwnCalendar:function() {
  var a = this.getCalendarId();
  return a ? Gnt.data.Calendar.getCalendar(a) : null;
}, getProjectCalendar:function() {
  return this.stores[0].getTaskStore().getCalendar();
}, setCalendar:function(a) {
}, getInternalId:function() {
  return this.getId() || this.internalId;
}, assignTo:function(a, c) {
  var b = a instanceof Gnt.model.Task ? a : this.getTaskStore().getById(a);
  return b.assign(this, c);
}, unassignFrom:function() {
  return this.unAssignFrom.apply(this, arguments);
}, unAssignFrom:function(a) {
  var b = a instanceof Gnt.model.Task ? a : this.getTaskStore().getById(a);
  b.unAssign(this);
}, forEachAssignment:function(b, a) {
  a = a || this;
  var c = this.getInternalId();
  this.getTaskStore().getAssignmentStore().each(function(d) {
    if (d.getResourceId() == c) {
      return b.call(a, d);
    }
  });
}, collectAvailabilityIntervalPoints:function(e, f, b, h, c) {
  for (var d = 0; d < e.length; d++) {
    var a = e[d];
    var g = a.startDate - 0;
    var i = a.endDate - 0;
    if (!h[g]) {
      h[g] = [];
      c.push(g);
    }
    h[g].push(f(g));
    if (!h[i]) {
      h[i] = [];
      c.push(i);
    }
    h[i].push(b(i));
  }
}, forEachAvailabilityIntervalWithTasks:function(d, f, a) {
  a = a || this;
  var c = d.startDate;
  var t = d.endDate;
  if (!c || !t) {
    throw 'Both `startDate` and `endDate` are required for `forEachAvailabilityIntervalWithTasks`';
  }
  var g = new Date(c);
  var u = d.includeAllIntervals;
  var p = this.getCalendar();
  var l = [];
  var n = [];
  var b = [];
  this.forEachAssignment(function(k) {
    var i = k.getTask();
    if (i.getStartDate() > t || i.getEndDate() < c) {
      return;
    }
    n.push(i);
    b.push(i.getCalendar());
    l.push(k);
  });
  if (!n.length) {
    return;
  }
  var e = Sch.util.Date;
  var y = [c - 0, t - 0];
  var j = {};
  j[c - 0] = [{type:'00-intervalStart'}];
  j[t - 0] = [{type:'00-intervalEnd'}];
  var s;
  while (g < t) {
    this.collectAvailabilityIntervalPoints(p.getAvailabilityIntervalsFor(g), function() {
      return {type:'00-resourceAvailabilityStart'};
    }, function() {
      return {type:'01-resourceAvailabilityEnd'};
    }, j, y);
    for (s = 0; s < b.length; s++) {
      this.collectAvailabilityIntervalPoints(b[s].getAvailabilityIntervalsFor(g), function() {
        return {type:'02-taskAvailabilityStart', assignment:l[s], taskId:n[s].getInternalId(), units:l[s].getUnits()};
      }, function() {
        return {type:'03-taskAvailabilityEnd', taskId:n[s].getInternalId()};
      }, j, y);
    }
    g = e.getStartOfNextDay(g);
  }
  y.sort();
  var v = false;
  var w = {};
  var m = 0;
  for (s = 0; s < y.length - 1; s++) {
    var r = j[y[s]];
    r.sort(function(k, i) {
      return k.type < i.type;
    });
    for (var q = 0; q < r.length; q++) {
      var o = r[q];
      if (o.type == '00-resourceAvailabilityStart') {
        v = true;
      }
      if (o.type == '01-resourceAvailabilityEnd') {
        v = false;
      }
      if (o.type == '02-taskAvailabilityStart') {
        w[o.taskId] = o;
        m++;
      }
      if (o.type == '03-taskAvailabilityEnd') {
        delete w[o.taskId];
        m--;
      }
    }
    if (u || v && m) {
      var x = y[s];
      var h = y[s + 1];
      if (x > t || h < c) {
        continue;
      }
      if (x < c) {
        x = c - 0;
      }
      if (h > t) {
        h = t - 0;
      }
      if (f.call(a, x, h, w) === false) {
        return false;
      }
    }
  }
}, getAllocationInfo:function(a) {
  var b = [];
  this.forEachAvailabilityIntervalWithTasks(a, function(h, g, f) {
    var e = 0;
    var c = [];
    for (var d in f) {
      e += f[d].units;
      c.push(f[d].assignment);
    }
    b.push({startDate:new Date(h), endDate:new Date(g), totalAllocation:e, assignments:c});
  });
  return b;
}});
Ext.define('Gnt.model.task.More', {indent:function() {
  var a = this.previousSibling;
  if (a) {
    this.isMove = true;
    a.appendChild(this);
    delete this.isMove;
    a.set('leaf', false);
    a.expand();
  }
}, outdent:function() {
  var a = this.parentNode;
  if (a && !a.isRoot()) {
    a.set('leaf', a.childNodes.length === 1);
    this.isMove = true;
    if (a.nextSibling) {
      a.parentNode.insertBefore(this, a.nextSibling);
    } else {
      a.parentNode.appendChild(this);
    }
    delete this.isMove;
  }
}, getAllDependencies:function(a) {
  a = a || this.getDependencyStore();
  return a.getDependenciesForTask(this);
}, hasIncomingDependencies:function(a) {
  var c = this.getId() || this.internalId;
  a = a || this.getDependencyStore();
  var b = a.findBy(function(d) {
    return d.getTargetId() == c;
  });
  return b >= 0;
}, getIncomingDependencies:function(a) {
  a = a || this.getDependencyStore();
  return a.getIncomingDependenciesForTask(this);
}, getOutgoingDependencies:function(a) {
  a = a || this.getDependencyStore();
  return a.getOutgoingDependenciesForTask(this);
}, constrain:function(c) {
  if (this.isManuallyScheduled()) {
    return false;
  }
  var e = false;
  c = c || this.getTaskStore();
  var b = this.getConstrainContext(c);
  if (b) {
    var a = b.startDate;
    var d = b.endDate;
    if (a && a - this.getStartDate() !== 0) {
      this.setStartDate(a, true, c.skipWeekendsDuringDragDrop);
      e = true;
    } else {
      if (d && d - this.getEndDate() !== 0) {
        this.setEndDate(d, true, c.skipWeekendsDuringDragDrop);
        e = true;
      }
    }
  }
  return e;
}, getConstrainContext:function(f) {
  var g = this.getIncomingDependencies();
  if (!g.length) {
    return null;
  }
  var h = f || this.getTaskStore(), a = Gnt.model.Dependency.Type, c = new Date(0), b = new Date(0), i = Ext.Date, e = this.getCalendar(), d;
  Ext.each(g, function(l) {
    var k = l.getSourceTask();
    if (k) {
      var n = l.getLag() || 0, m = k.getStartDate(), j = k.getEndDate();
      switch(l.getType()) {
        case a.StartToEnd:
          m = e.skipWorkingDays(m, n);
          if (b < m) {
            b = m;
            d = k;
          }
          break;
        case a.StartToStart:
          m = e.skipWorkingDays(m, n);
          if (c < m) {
            c = m;
            d = k;
          }
          break;
        case a.EndToStart:
          j = e.skipWorkingDays(j, n);
          if (c < j) {
            c = j;
            d = k;
          }
          break;
        case a.EndToEnd:
          j = e.skipWorkingDays(j, n);
          if (b < j) {
            b = j;
            d = k;
          }
          break;
        default:
          throw 'Invalid dependency type: ' + l.getType();
      }
    }
  });
  return {startDate:c > 0 ? c : null, endDate:b > 0 ? b : null, constrainingTask:d};
}, getCriticalPaths:function() {
  var b = [this], a = this.getConstrainContext();
  while (a) {
    b.push(a.constrainingTask);
    a = a.constrainingTask.getConstrainContext();
  }
  return b;
}, cascadeChanges:function(a, b) {
  a = a || this.getTaskStore();
  if (this.isLeaf()) {
    if (this.constrain(a)) {
      this.recalculateParents();
      b.nbrAffected++;
    }
  }
  Ext.each(this.getOutgoingDependencies(), function(c) {
    var d = c.getTargetTask();
    if (d && !d.isManuallyScheduled()) {
      d.cascadeChanges(a, b);
    }
  });
}, addSubtask:function(a) {
  this.set('leaf', false);
  this.appendChild(a);
  this.expand();
}, addSuccessor:function(b) {
  var c = this.rec, e = this.getTaskStore(), d = this.getDependencyStore();
  b = b || new this.self();
  b.calendar = b.calendar || this.getCalendar();
  b.taskStore = e;
  b.setStartDate(this.getEndDate(), true, e.skipWeekendsDuringDragDrop);
  b.setDuration(1, Sch.util.Date.DAY);
  this.addTaskBelow(b);
  var a = new d.model({fromTask:this, toTask:b, type:d.model.Type.EndToStart});
  d.add(a);
}, addMilestone:function(c) {
  var b = this.getTaskStore();
  c = c || new this.self();
  var a = this.getEndDate();
  if (a) {
    c.calendar = c.calendar || this.getCalendar();
    c.setStartEndDate(a, a, b.skipWeekendsDuringDragDrop);
  }
  this.addTaskBelow(c);
}, addPredecessor:function(c) {
  var b = this.getDependencyStore();
  c = c || new this.self();
  c.calendar = c.calendar || this.getCalendar();
  c.beginEdit();
  c.set(this.startDateField, c.calculateStartDate(this.getStartDate(), 1, Sch.util.Date.DAY));
  c.set(this.endDateField, this.getStartDate());
  c.set(this.durationField, 1);
  c.set(this.durationUnitField, Sch.util.Date.DAY);
  c.endEdit();
  this.addTaskAbove(c);
  var a = new b.model({fromTask:c, toTask:this, type:b.model.Type.EndToStart});
  b.add(a);
}, getSuccessors:function() {
  var h = this.getId() || this.internalId;
  var e = e || this.getDependencyStore();
  var c = this.getTaskStore(), g = [];
  for (var f = 0, a = e.getCount(); f < a; f++) {
    var d = e.getAt(f);
    if (d.getSourceId() == h) {
      var b = d.getTargetTask();
      if (b) {
        g.push(b);
      }
    }
  }
  return g;
}, getPredecessors:function() {
  var g = this.getId() || this.internalId;
  var d = d || this.getDependencyStore();
  var b = this.getTaskStore(), f = [];
  for (var e = 0, a = d.getCount(); e < a; e++) {
    var c = d.getAt(e);
    if (c.getTargetId() == g) {
      f.push(c.getSourceTask());
    }
  }
  return f;
}, addTaskAbove:function(a) {
  a = a || new this.self();
  this.parentNode.insertBefore(a, this);
}, addTaskBelow:function(a) {
  a = a || new this.self();
  if (this.nextSibling) {
    this.parentNode.insertBefore(a, this.nextSibling);
  } else {
    this.parentNode.appendChild(a);
  }
}, isAbove:function(a) {
  var b = this, c = Math.min(b.data.depth, a.data.depth);
  while (b.data.depth > c) {
    b = b.parentNode;
  }
  while (a.data.depth > c) {
    a = a.parentNode;
  }
  while (a.parentNode !== b.parentNode) {
    a = a.parentNode;
    b = b.parentNode;
  }
  return a.data.index > b.data.index;
}});
Ext.define('Gnt.model.Task', {extend:'Sch.model.Range', requires:['Sch.util.Date', 'Ext.data.NodeInterface'], mixins:['Gnt.model.task.More'], idProperty:'Id', customizableFields:[{name:'Id'}, {name:'Duration', type:'number', useNull:true}, {name:'Effort', type:'number', useNull:true}, {name:'EffortUnit', type:'string', defaultValue:'h'}, {name:'CalendarId', type:'string'}, {name:'DurationUnit', type:'string', defaultValue:'d', convert:function(a) {
  return a || 'd';
}}, {name:'PercentDone', type:'int', defaultValue:0}, {name:'ManuallyScheduled', type:'boolean', defaultValue:false}, {name:'SchedulingMode', type:'string', defaultValue:'Normal'}, {name:'BaselineStartDate', type:'date', dateFormat:'c'}, {name:'BaselineEndDate', type:'date', dateFormat:'c'}, {name:'BaselinePercentDone', type:'int', defaultValue:0}, {name:'Draggable', type:'boolean', persist:false, defaultValue:true}, {name:'Resizable', persist:false}, {name:'PhantomId', type:'string'}, {name:'PhantomParentId', 
type:'string'}], draggableField:'Draggable', resizableField:'Resizable', nameField:'Name', durationField:'Duration', durationUnitField:'DurationUnit', effortField:'Effort', effortUnitField:'EffortUnit', percentDoneField:'PercentDone', manuallyScheduledField:'ManuallyScheduled', schedulingModeField:'SchedulingMode', calendarIdField:'CalendarId', baselineStartDateField:'BaselineStartDate', baselineEndDateField:'BaselineEndDate', baselinePercentDoneField:'BaselinePercentDone', calendar:null, dependencyStore:null, 
taskStore:null, phantomIdField:'PhantomId', phantomParentIdField:'PhantomParentId', normalized:false, recognizedSchedulingModes:['Normal', 'Manual', 'FixedDuration', 'EffortDriven', 'DynamicAssignment'], constructor:function() {
  this.getModifiedFieldNames = function() {
    if (this.__isFilling__) {
      return [];
    }
    delete this.getModifiedFieldNames;
    return this.getModifiedFieldNames();
  };
  this.callParent(arguments);
}, normalize:function() {
  var c = this.getDuration(), g = this.getDurationUnit(), b = this.getStartDate(), f = this.getEndDate(), e = this.getSchedulingMode(), d = this.data;
  if (f && this.inclusiveEndDate) {
    var i = this.fields.getByKey(this.endDateField).dateFormat;
    var a = i && !Ext.Date.formatContainsHourInfo(i) || f.getHours() === 0 && f.getMinutes() === 0 && f.getSeconds() === 0 && f.getMilliseconds() === 0;
    if (a) {
      if (Ext.isNumber(c)) {
        f = d[this.endDateField] = this.calculateEndDate(b, c, g);
      } else {
        f = d[this.endDateField] = Ext.Date.add(f, Ext.Date.DAY, 1);
      }
    }
  }
  if (c == null && b && f) {
    d[this.durationField] = this.calculateDuration(b, f, g);
  }
  if ((e == 'Normal' || this.isManuallyScheduled()) && f == null && b && Ext.isNumber(c)) {
    d[this.endDateField] = this.calculateEndDate(b, c, g);
  }
  if (e == 'EffortDriven' || e == 'FixedDuration') {
    var j = this.get(this.effortField), h = this.getEffortUnit();
    if (j == null && b && f) {
      d[this.effortField] = this.calculateEffort(b, f, h);
    }
    if (f == null && b && j) {
      d[this.endDateField] = this.calculateEffortDrivenEndDate(b, j, h);
      if (c == null) {
        d[this.durationField] = this.calculateDuration(b, d[this.endDateField], g);
      }
    }
  }
  this.normalized = true;
}, normalizeEffort:function() {
  var c = this.childNodes;
  var b = 0;
  for (var a = 0; a < c.length; a++) {
    var d = c[a];
    if (!d.isLeaf()) {
      d.normalizeEffort();
    }
    b += d.getEffort('MILLI');
  }
  if (this.getEffort('MILLI') != b) {
    this.data[this.effortField] = this.getProjectCalendar().convertMSDurationToUnit(b, this.getEffortUnit());
  }
}, getInternalId:function() {
  return this.getId() || this.internalId;
}, getCalendar:function(a) {
  return a ? this.getOwnCalendar() : this.getOwnCalendar() || this.getProjectCalendar();
}, getOwnCalendar:function() {
  var a = this.get(this.calendarIdField);
  return a ? Gnt.data.Calendar.getCalendar(a) : this.calendar;
}, getProjectCalendar:function() {
  var a = this.stores[0];
  var b = a && a.getCalendar && a.getCalendar() || this.parentNode && this.parentNode.getProjectCalendar() || this.isRoot() && this.calendar;
  if (!b) {
    Ext.Error.raise("Can't find a project calendar in `getProjectCalendar`");
  }
  return b;
}, setCalendar:function(a) {
  this.calendar = a;
}, getDependencyStore:function() {
  var a = this.dependencyStore || this.getTaskStore().dependencyStore;
  if (!a) {
    Ext.Error.raise("Can't find a dependencyStore in `getDependencyStore`");
  }
  return a;
}, getResourceStore:function() {
  return this.getTaskStore().getResourceStore();
}, getAssignmentStore:function() {
  return this.getTaskStore().getAssignmentStore();
}, getTaskStore:function(b) {
  if (this.taskStore) {
    return this.taskStore;
  }
  var a = this.stores[0] && this.stores[0].taskStore || this.parentNode && this.parentNode.getTaskStore(b);
  if (!a && !b) {
    Ext.Error.raise("Can't find a taskStore in `getTaskStore`");
  }
  return this.taskStore = a;
}, isManuallyScheduled:function() {
  return this.get(this.schedulingModeField) == 'Manual' || this.get(this.manuallyScheduledField);
}, setManuallyScheduled:function(a) {
  if (a) {
    this.set(this.schedulingModeField, 'Manual');
  } else {
    if (this.get(this.schedulingModeField) == 'Manual') {
      this.set(this.schedulingModeField, 'Normal');
    }
  }
  return this.set(this.manuallyScheduledField, a);
}, setSchedulingMode:function(a) {
  if (Ext.Array.indexOf(this.recognizedSchedulingModes, a) == -1) {
    throw 'Unrecognized scheduling mode: ' + a;
  }
  this.beginEdit();
  this.set(this.schedulingModeField, a);
  if (a === 'FixedDuration') {
    this.updateEffortBasedOnDuration();
  }
  if (a === 'EffortDriven') {
    this.updateDurationBasedOnEffort();
  }
  this.endEdit();
}, skipNonWorkingTime:function(b, c) {
  var a = false;
  this.forEachAvailabilityIntervalWithResources(c ? {startDate:b} : {endDate:b, isForward:false}, function(f, e, d) {
    b = c ? f : e;
    a = true;
    return false;
  });
  return a ? new Date(b) : this.getCalendar().skipNonWorkingTime(b, c);
}, setStartDate:function(a, f, e) {
  this.beginEdit();
  var d = this.getCalendar();
  if (e && !this.isManuallyScheduled()) {
    if (!this.isMilestone() || d.isHoliday(a - 1)) {
      a = this.skipNonWorkingTime(a, true);
    }
  }
  var b = this.getSchedulingMode();
  this.set(this.startDateField, a);
  if (f !== false) {
    if (b == 'EffortDriven') {
      this.set(this.endDateField, this.calculateEffortDrivenEndDate(a, this.getEffort()));
    } else {
      var c = this.getDuration();
      if (Ext.isNumber(c)) {
        this.set(this.endDateField, this.calculateEndDate(a, c, this.getDurationUnit()));
      }
    }
  } else {
    if (this.getEndDate()) {
      this.set(this.durationField, this.calculateDuration(a, this.getEndDate(), this.getDurationUnit()));
    }
  }
  this.onPotentialEffortChange();
  this.endEdit();
}, setEndDate:function(a, e, d) {
  this.beginEdit();
  var c = this.getCalendar();
  if (d && !this.isManuallyScheduled()) {
    a = this.skipNonWorkingTime(a, false);
  }
  if (e !== false) {
    var b = this.getDuration();
    if (Ext.isNumber(b)) {
      this.set(this.startDateField, this.calculateStartDate(a, b, this.getDurationUnit()));
      this.set(this.endDateField, a);
    } else {
      this.set(this.endDateField, a);
    }
  } else {
    this.set(this.endDateField, a);
    if (this.getStartDate()) {
      this.set(this.durationField, this.calculateDuration(this.getStartDate(), a, this.getDurationUnit()));
    }
  }
  this.onPotentialEffortChange();
  this.endEdit();
}, setStartEndDate:function(a, b, c) {
  this.beginEdit();
  if (c && !this.isManuallyScheduled()) {
    a = a && this.skipNonWorkingTime(a, true);
    b = b && this.skipNonWorkingTime(b, false);
  }
  this.set(this.startDateField, a);
  this.set(this.endDateField, b);
  this.set(this.durationField, this.calculateDuration(a, b, this.getDurationUnit()));
  this.onPotentialEffortChange();
  this.endEdit();
}, getDuration:function(a) {
  if (!a) {
    return this.get(this.durationField);
  }
  var b = this.getProjectCalendar(), c = b.convertDurationToMs(this.get(this.durationField), this.get(this.durationUnitField));
  return b.convertMSDurationToUnit(c, a);
}, getEffort:function(a) {
  var b = this.get(this.effortField) || 0;
  if (!a) {
    return b;
  }
  var c = this.getProjectCalendar(), d = c.convertDurationToMs(b, this.get(this.effortUnitField));
  return c.convertMSDurationToUnit(d, a);
}, setEffort:function(b, a) {
  a = a || this.get(this.effortUnitField);
  this.beginEdit();
  this.set(this.effortField, b);
  this.set(this.effortUnitField, a);
  if (this.getSchedulingMode() === 'EffortDriven') {
    this.updateDurationBasedOnEffort();
  }
  if (this.getSchedulingMode() === 'DynamicAssignment') {
    this.updateAssignments();
  }
  this.endEdit();
}, getCalendarDuration:function(a) {
  return this.getProjectCalendar().convertMSDurationToUnit(this.getEndDate() - this.getStartDate(), a || this.get(this.durationUnitField));
}, setDuration:function(b, a) {
  a = a || this.get(this.durationUnitField);
  this.beginEdit();
  this.set(this.endDateField, this.calculateEndDate(this.getStartDate(), b, a));
  this.set(this.durationField, b);
  this.set(this.durationUnitField, a);
  this.onPotentialEffortChange();
  this.endEdit();
}, calculateStartDate:function(e, d, c) {
  c = c || this.getDurationUnit();
  if (this.isManuallyScheduled()) {
    return Sch.util.Date.add(a, c, -d);
  } else {
    if (this.getTaskStore(true) && this.hasAssignments()) {
      var b = this.getProjectCalendar().convertDurationToMs(d, c || this.getDurationUnit());
      var a;
      this.forEachAvailabilityIntervalWithResources({endDate:e, isForward:false}, function(i, h, g) {
        var f = h - i;
        if (f >= b) {
          a = new Date(h - b);
          return false;
        } else {
          b -= f;
        }
      });
      return a;
    } else {
      return this.getCalendar().calculateStartDate(e, d, c);
    }
  }
}, calculateEndDate:function(a, e, c) {
  c = c || this.getDurationUnit();
  if (this.isManuallyScheduled()) {
    return Sch.util.Date.add(a, c, e);
  } else {
    if (this.getTaskStore(true) && this.hasAssignments()) {
      var b = this.getProjectCalendar().convertDurationToMs(e, c || this.getDurationUnit());
      var d;
      this.forEachAvailabilityIntervalWithResources({startDate:a}, function(i, h, g) {
        var f = h - i;
        if (f >= b) {
          d = new Date(i + b);
          return false;
        } else {
          b -= f;
        }
      });
      return d;
    } else {
      return this.getCalendar().calculateEndDate(a, e, c);
    }
  }
}, calculateDuration:function(a, c, b) {
  b = b || this.getDurationUnit();
  if (!a || !c) {
    return 0;
  }
  if (this.isManuallyScheduled()) {
    return this.getProjectCalendar().convertMSDurationToUnit(c - a, b);
  } else {
    if (this.getTaskStore(true) && this.hasAssignments()) {
      var d = 0;
      this.forEachAvailabilityIntervalWithResources({startDate:a, endDate:c}, function(g, f, e) {
        d += f - g;
      });
      return this.getProjectCalendar().convertMSDurationToUnit(d, b);
    } else {
      return this.getCalendar().calculateDuration(a, c, b);
    }
  }
}, forEachAvailabilityIntervalWithResources:function(f, h, a) {
  a = a || this;
  var C = this;
  var d = f.startDate;
  var z = f.endDate;
  var p = f.isForward !== false;
  if (p ? !d : !z) {
    throw new Error('At least `startDate` or `endDate` is required, depending from the `isForward` option');
  }
  var j = new Date(p ? d : z);
  var b = f.includeEmptyIntervals;
  var c = this.getOwnCalendar();
  var G = Boolean(c);
  var E = this.getProjectCalendar();
  var A, v, r;
  if (f.resources) {
    A = f.resources;
    r = [];
    v = [];
    Ext.each(A, function(i) {
      v.push(i.getCalendar());
      r.push(C.getAssignmentFor(i));
    });
  } else {
    r = this.getAssignments();
    if (!r.length) {
      return;
    }
    A = [];
    v = [];
    Ext.each(r, function(k) {
      var i = k.getResource();
      A.push(i);
      v.push(i.getCalendar());
    });
  }
  var g = Sch.util.Date;
  var y, u, B, D, n;
  var t = p ? !z : !d;
  while (t || (p ? j < z : j > d)) {
    var q = {};
    var F = [];
    if (G) {
      var l = c.getAvailabilityIntervalsFor(j - (p ? 0 : 1));
      for (u = 0; u < l.length; u++) {
        B = l[u];
        D = B.startDate - 0;
        n = B.endDate - 0;
        if (!q[D]) {
          q[D] = [];
          F.push(D);
        }
        q[D].push({type:'00-taskAvailailabilityStart', typeBackward:'01-taskAvailailabilityStart'});
        F.push(n);
        q[n] = q[n] || [];
        q[n].push({type:'01-taskAvailailabilityEnd', typeBackward:'00-taskAvailailabilityEnd'});
      }
    }
    for (y = 0; y < v.length; y++) {
      var e = v[y].getAvailabilityIntervalsFor(j);
      for (u = 0; u < e.length; u++) {
        B = e[u];
        D = B.startDate - 0;
        n = B.endDate - 0;
        if (!q[D]) {
          q[D] = [];
          F.push(D);
        }
        q[D].push({type:'02-resourceAvailailabilityStart', typeBackward:'03-resourceAvailailabilityStart', assignment:r[y], resourceId:A[y].getInternalId(), units:r[y].getUnits()});
        if (!q[n]) {
          q[n] = [];
          F.push(n);
        }
        q[n].push({type:'03-resourceAvailailabilityEnd', typeBackward:'02-resourceAvailailabilityEnd', assignment:r[y], resourceId:A[y].getInternalId(), units:r[y].getUnits()});
      }
    }
    F.sort();
    var x = false;
    var o = {};
    var m = 0;
    var w, s;
    if (p) {
      for (y = 0; y < F.length; y++) {
        w = q[F[y]];
        w.sort(function(k, i) {
          return k.type < i.type;
        });
        for (u = 0; u < w.length; u++) {
          s = w[u];
          if (s.type == '00-taskAvailailabilityStart') {
            x = true;
          }
          if (s.type == '01-taskAvailailabilityEnd') {
            x = false;
          }
          if (s.type == '02-resourceAvailailabilityStart') {
            o[s.resourceId] = s;
            m++;
          }
          if (s.type == '03-resourceAvailailabilityEnd') {
            delete o[s.resourceId];
            m--;
          }
        }
        if ((x || !G) && (m || b)) {
          D = F[y];
          n = F[y + 1];
          if (D >= z || n <= d) {
            continue;
          }
          if (D < d) {
            D = d - 0;
          }
          if (n > z) {
            n = z - 0;
          }
          if (h.call(a, D, n, o) === false) {
            return false;
          }
        }
      }
    } else {
      for (y = F.length - 1; y >= 0; y--) {
        w = q[F[y]];
        w.sort(function(k, i) {
          return k.typeBackward < i.typeBackward;
        });
        for (u = 0; u < w.length; u++) {
          s = w[u];
          if (s.typeBackward == '00-taskAvailailabilityEnd') {
            x = true;
          }
          if (s.typeBackward == '01-taskAvailailabilityStart') {
            x = false;
          }
          if (s.typeBackward == '02-resourceAvailailabilityEnd') {
            o[s.resourceId] = s;
            m++;
          }
          if (s.typeBackward == '03-resourceAvailailabilityStart') {
            delete o[s.resourceId];
            m--;
          }
        }
        if ((x || !G) && (m || b)) {
          D = F[y - 1];
          n = F[y];
          if (D > z || n <= d) {
            continue;
          }
          if (D < d) {
            D = d - 0;
          }
          if (n > z) {
            n = z - 0;
          }
          if (h.call(a, D, n, o) === false) {
            return false;
          }
        }
      }
    }
    j = p ? g.getStartOfNextDay(j) : g.getEndOfPreviousDay(j);
  }
}, calculateEffortDrivenEndDate:function(a, c, b) {
  var e = this.getProjectCalendar().convertDurationToMs(c, b || this.getEffortUnit());
  var d = new Date(a);
  this.forEachAvailabilityIntervalWithResources({startDate:a}, function(l, k, j) {
    var m = 0;
    for (var h in j) {
      m += j[h].units;
    }
    var g = k - l;
    var f = m * g / 100;
    if (f >= e) {
      d = new Date(l + e / f * g);
      return false;
    } else {
      e -= f;
    }
  });
  return d;
}, recalculateParents:function() {
  var h = new Date(9999, 0, 0), e = new Date(0), m = this.parentNode;
  if (m && m.childNodes.length > 0) {
    var b = 0;
    for (var f = 0, j = m.childNodes.length; f < j; f++) {
      b += m.childNodes[f].getEffort('MILLI');
    }
    if (m.getEffort('MILLI') != b) {
      m.setEffort(this.getProjectCalendar().convertMSDurationToUnit(b, m.getEffortUnit()));
    }
  }
  var n, c;
  if (m && !m.isRoot() && m.childNodes.length > 0) {
    if (!m.isManuallyScheduled()) {
      for (var g = 0, d = m.childNodes.length; g < d; g++) {
        var a = m.childNodes[g];
        h = Sch.util.Date.min(h, a.getStartDate() || h);
        e = Sch.util.Date.max(e, a.getEndDate() || e);
      }
      n = h - new Date(9999, 0, 0) !== 0 && m.getStartDate() - h !== 0;
      c = e - new Date(0) !== 0 && m.getEndDate() - e !== 0;
      if (n && c) {
        m.setStartEndDate(h, e, false);
      } else {
        if (n) {
          m.setStartDate(h, c, false);
        } else {
          if (c) {
            m.setEndDate(e, false, false);
          }
        }
      }
    }
    if (!n && !c) {
      m.recalculateParents();
    }
  }
}, isMilestone:function() {
  return this.getDuration() === 0;
}, isBaselineMilestone:function() {
  var b = this.getBaselineStartDate(), a = this.getBaselineEndDate();
  if (b && a) {
    return a - b === 0;
  }
  return false;
}, afterEdit:function(b) {
  if (this.stores.length > 0 || !this.normalized) {
    this.callParent(arguments);
  } else {
    var a = this.taskStore || this.getTaskStore(true);
    if (a && !a.isFillingRoot) {
      a.afterEdit(this, b);
    }
    this.callParent(arguments);
  }
}, afterCommit:function() {
  this.callParent(arguments);
  if (this.stores.length > 0 || !this.normalized) {
    return;
  }
  var a = this.taskStore || this.getTaskStore(true);
  if (a && !a.isFillingRoot) {
    a.afterCommit(this);
  }
}, afterReject:function() {
  if (this.stores.length > 0) {
    this.callParent(arguments);
  } else {
    var a = this.getTaskStore(true);
    if (a && !a.isFillingRoot) {
      a.afterReject(this);
    }
    this.callParent(arguments);
  }
}, getDurationUnit:function() {
  return this.get(this.durationUnitField) || 'd';
}, getEffortUnit:function() {
  return this.get(this.effortUnitField) || 'd';
}, getBaselinePercentDone:function() {
  return this.get(this.baselinePercentDoneField) || 0;
}, isPersistable:function() {
  var a = this.parentNode;
  return !a.phantom;
}, getResources:function() {
  var b = this.getAssignmentStore(), c = this.getInternalId();
  var a = [];
  if (b) {
    b.each(function(d) {
      if (d.getTaskId() == c) {
        a.push(d.getResource());
      }
    });
  }
  return a;
}, getAssignments:function() {
  var b = this.getAssignmentStore(), c = this.getInternalId();
  var a = [];
  if (b) {
    b.each(function(d) {
      if (d.getTaskId() == c) {
        a.push(d);
      }
    });
  }
  return a;
}, hasAssignments:function() {
  var b = this.getAssignmentStore(), c = this.getInternalId();
  var a = false;
  if (b) {
    b.each(function(d) {
      if (d.getTaskId() == c) {
        a = true;
        return false;
      }
    });
  }
  return a;
}, getAssignmentFor:function(b) {
  var c = this.getAssignmentStore(), e = this.getInternalId(), d = b instanceof Gnt.model.Resource ? b.getInternalId() : b;
  var a;
  if (c) {
    c.each(function(f) {
      if (f.getTaskId() == e && f.getResourceId() == d) {
        a = f;
        return false;
      }
    });
  }
  return a || null;
}, unassign:function() {
  return this.unAssign.apply(this, arguments);
}, unAssign:function(a) {
  var b = this.getAssignmentStore();
  var c = a instanceof Gnt.model.Resource ? a.getInternalId() : a;
  b.removeAt(b.find('ResourceId', c));
}, assign:function(e, a) {
  var b = this.getTaskStore(), h = this.getInternalId(), f = b.getAssignmentStore(), d = b.getResourceStore();
  var g = e instanceof Gnt.model.Resource ? e.getInternalId() : e;
  f.each(function(i) {
    if (i.getTaskId() == h && i.getResourceId() == g) {
      throw "Resource can't be assigned twice to the same task";
    }
  });
  if (e instanceof Gnt.model.Resource && d.indexOf(e) == -1) {
    d.add(e);
  }
  var c = new Gnt.model.Assignment({TaskId:h, ResourceId:g, Units:a});
  f.add(c);
  return c;
}, calculateEffort:function(a, c, b) {
  var d = 0;
  this.forEachAvailabilityIntervalWithResources({startDate:a, endDate:c}, function(h, g, f) {
    var j = 0;
    for (var e in f) {
      j += f[e].units;
    }
    d += (g - h) * j / 100;
  });
  return this.getProjectCalendar().convertMSDurationToUnit(d, b || this.getEffortUnit());
}, updateAssignments:function() {
  var b = {};
  var a = this.getStartDate();
  var d = this.getEndDate();
  var c = 0;
  this.forEachAvailabilityIntervalWithResources({startDate:a, endDate:d}, function(h, g, f) {
    for (var i in f) {
      c += g - h;
    }
  });
  if (!c) {
    return;
  }
  var e = this.getEffort(Sch.util.Date.MILLI);
  Ext.Array.each(this.getAssignments(), function(f) {
    f.setUnits(e / c * 100);
  });
}, updateEffortBasedOnDuration:function() {
  this.setEffort(this.calculateEffort(this.getStartDate(), this.getEndDate()));
}, updateDurationBasedOnEffort:function() {
  this.setEndDate(this.calculateEffortDrivenEndDate(this.getStartDate(), this.getEffort(), this.getEffortUnit()), false);
}, onPotentialEffortChange:function() {
  if (this.getSchedulingMode() === 'FixedDuration') {
    this.updateEffortBasedOnDuration();
  }
  if (this.getSchedulingMode() === 'DynamicAssignment') {
    this.updateAssignments();
  }
}, onAssignmentMutation:function() {
  if (this.getSchedulingMode() === 'FixedDuration') {
    this.updateEffortBasedOnDuration();
  }
  if (this.getSchedulingMode() === 'EffortDriven') {
    this.updateDurationBasedOnEffort();
  }
}, onAssignmentStructureMutation:function() {
  if (this.getSchedulingMode() == 'FixedDuration') {
    this.updateEffortBasedOnDuration();
  }
  if (this.getSchedulingMode() === 'EffortDriven') {
    this.updateDurationBasedOnEffort();
  }
  if (this.getSchedulingMode() === 'DynamicAssignment') {
    this.updateAssignments();
  }
}, adjustToCalendar:function() {
  if (this.get('leaf') && !this.isManuallyScheduled()) {
    var a = this.hasIncomingDependencies();
    if (a) {
      this.constrain();
    } else {
      this.setStartDate(this.getStartDate(), true, true);
    }
  }
}, isEditable:function(a) {
  if ((a === this.durationField || a === this.endDateField) && this.getSchedulingMode() === 'EffortDriven') {
    return false;
  }
  if (a === this.effortField && this.getSchedulingMode() === 'FixedDuration') {
    return false;
  }
  return true;
}, isDraggable:function() {
  return this.getDraggable();
}, isResizable:function() {
  return this.getResizable();
}, ensureSingleSyncForMethod:function() {
  return function() {
    var a = this.getTaskStore(true);
    var c;
    if (a && a.autoSync && !a.autoSyncSuspended) {
      c = true;
      a.suspendAutoSync();
    }
    var b = this.callParent(arguments);
    if (c) {
      a.resumeAutoSync();
      a.sync();
    }
    return b;
  };
}, getId:function() {
  var a = this.data[this.idProperty];
  return a && a !== 'root' ? a : null;
}}, function() {
  Ext.data.NodeInterface.decorate(this);
  var a = ['addPredecessor', 'addSubtask', 'addSuccessor', 'indent', 'outdent', 'remove', 'insertBefore', 'appendChild'];
  this.override({remove:function() {
    var b = this.parentNode;
    var c = this.callParent(arguments);
    if (b.childNodes.length === 0 && this.getTaskStore().recalculateParents) {
      b.set('leaf', true);
    }
    return c;
  }, insertBefore:function(b) {
    if (this.phantom) {
      this.data[this.phantomIdField] = b.data[this.phantomParentIdField] = this.internalId;
    }
    return this.callParent(arguments);
  }, appendChild:function(b) {
    if (this.phantom) {
      this.data[this.phantomIdField] = b.data[this.phantomParentIdField] = this.internalId;
    }
    return this.callParent(arguments);
  }});
  Ext.each(a, function(c) {
    var b = {};
    b[c] = this.prototype.ensureSingleSyncForMethod(this.prototype[c]);
    this.override(b);
  }, this);
});
Ext.define('Gnt.data.Calendar', {extend:'Ext.data.Store', requires:['Ext.Date', 'Gnt.model.CalendarDay', 'Sch.model.Range', 'Sch.util.Date'], model:'Gnt.model.CalendarDay', daysPerMonth:30, daysPerWeek:7, hoursPerDay:24, unitsInMs:null, defaultNonWorkingTimeCssCls:'gnt-holiday', weekendsAreWorkdays:false, weekendFirstDay:6, weekendSecondDay:0, holidaysCache:null, availabilityIntervalsCache:null, weekAvailability:null, defaultWeekAvailability:null, nonStandardWeeksByStartDate:null, nonStandardWeeksStartDates:null, 
calendarId:null, parent:null, defaultAvailability:['00:00-24:00'], name:null, statics:{getCalendar:function(a) {
  if (a instanceof Gnt.data.Calendar) {
    return a;
  }
  return Ext.data.StoreManager.lookup('GNT_CALENDAR:' + a);
}, getAllCalendars:function() {
  var a = [];
  Ext.data.StoreManager.each(function(b) {
    if (b instanceof Gnt.data.Calendar) {
      a.push(b);
    }
  });
  return a;
}}, constructor:function(a) {
  a = a || {};
  if (a.calendarId) {
    this.storeId = 'GNT_CALENDAR:' + a.calendarId;
  }
  this.callParent(arguments);
  var c = this;
  var b = this.parent = Gnt.data.Calendar.getCalendar(a.parent);
  if (a.parent && !this.parent) {
    throw new Error('Invalid parent specified for calendar');
  }
  this.unitsInMs = {MILLI:1, SECOND:1000, MINUTE:60 * 1000, HOUR:60 * 60 * 1000, DAY:this.hoursPerDay * 60 * 60 * 1000, WEEK:this.daysPerWeek * this.hoursPerDay * 60 * 60 * 1000, MONTH:this.daysPerMonth * this.hoursPerDay * 60 * 60 * 1000, QUARTER:3 * this.daysPerMonth * 24 * 60 * 60 * 1000, YEAR:4 * 3 * this.daysPerMonth * 24 * 60 * 60 * 1000};
  this.defaultWeekAvailability = this.getDefaultWeekAvailability(this.weekendsAreWorkdays);
  Ext.Array.each(a.weekAvailability || [], function(e, d) {
    if (e) {
      e.setDate(new Date(0, 0, d));
      e.set(e.idProperty, 'WEEKDAY:' + d);
    }
    c.add(e);
  });
  this.holidaysCache = {};
  this.availabilityIntervalsCache = {};
  this.on({clear:this.clearCache, datachanged:this.clearCache, update:this.clearCache, load:this.updateAvailability, scope:this});
  b && b.on('clearcache', this.clearCache, this);
  this.updateAvailability();
}, getDefaultWeekAvailability:function(f) {
  var e = this.defaultAvailability;
  var d = this.weekendFirstDay;
  var a = this.weekendSecondDay;
  var c = [];
  for (var b = 0; b < 7; b++) {
    c.push(f || b != d && b != a ? new Gnt.model.CalendarDay({Availability:Ext.Array.clone(e), IsWorkingDay:true}) : new Gnt.model.CalendarDay({Availability:[]}));
  }
  return c;
}, updateAvailability:function() {
  var a = this.weekAvailability = [];
  var c = this.nonStandardWeeksStartDates = [];
  var b = this.nonStandardWeeksByStartDate = {};
  this.each(function(e) {
    var i = e.getId();
    var g = /^(\d)-(\d\d\d\d\/\d\d\/\d\d)-(\d\d\d\d\/\d\d\/\d\d)$/.exec(i);
    var f;
    if (g) {
      var d = Ext.Date.parse(g[2], 'Y/m/d') - 0;
      var h = Ext.Date.parse(g[3], 'Y/m/d') - 0;
      f = g[1];
      if (!b[d]) {
        b[d] = {startDate:new Date(d), endDate:new Date(h), name:e.getName(), weekAvailability:[]};
        c.push(d);
      }
      b[d].weekAvailability[f] = e;
    }
    g = /^WEEKDAY:(\d+)$/.exec(i);
    if (g) {
      f = g[1];
      if (f < 0 || f > 6) {
        throw new Error('Incorrect week day index');
      }
      a[f] = e;
    }
  });
  c.sort();
}, intersectsWithCurrentWeeks:function(b, d) {
  var e = this.nonStandardWeeksStartDates;
  var c = this.nonStandardWeeksByStartDate;
  var a = false;
  Ext.Array.each(e, function(h) {
    var f = c[h].startDate;
    var g = c[h].endDate;
    if (f <= b && b < g || f < d && d <= g) {
      a = true;
      return false;
    }
  });
  return a;
}, addNonStandardWeek:function(b, c, a) {
  b = Ext.Date.clearTime(new Date(b));
  c = Ext.Date.clearTime(new Date(c));
  if (this.intersectsWithCurrentWeeks(b, c)) {
    throw new Error('Can not add intersecting week');
  }
  Ext.Array.each(a, function(d, e) {
    if (d) {
      d.set(d.idProperty, e + '-' + Ext.Date.format(b, 'Y/m/d') + '-' + Ext.Date.format(c, 'Y/m/d'));
    }
  });
  b = b - 0;
  c = c - 0;
  this.nonStandardWeeksStartDates.push(b);
  this.nonStandardWeeksStartDates.sort();
  this.nonStandardWeeksByStartDate[b] = {startDate:new Date(b), endDate:new Date(c), weekAvailability:a};
  this.add(Ext.Array.clean(a));
}, getNonStandardWeekByStartDate:function(a) {
  return this.nonStandardWeeksByStartDate[Ext.Date.clearTime(new Date(a)) - 0];
}, getNonStandardWeekByDate:function(d) {
  d = Ext.Date.clearTime(new Date(d)) - 0;
  var e = this.nonStandardWeeksStartDates;
  var a = this.nonStandardWeeksByStartDate;
  for (var c = 0; c < e.length; c++) {
    var b = a[e[c]];
    if (b.startDate <= d && d <= b.endDate) {
      return b;
    }
  }
  return null;
}, removeNonStandardWeek:function(a) {
  a = Ext.Date.clearTime(new Date(a)) - 0;
  var b = this.getNonStandardWeekByStartDate(a);
  if (!b) {
    return;
  }
  this.remove(Ext.Array.clean(b.weekAvailability));
  delete this.nonStandardWeeksByStartDate[a];
  Ext.Array.remove(this.nonStandardWeeksStartDates, a);
}, clearCache:function() {
  this.holidaysCache = {};
  this.availabilityIntervalsCache = {};
  this.fireEvent('clearcache', this);
}, setWeekendsAreWorkDays:function(a) {
  if (a !== this.weekendsAreWorkdays) {
    this.weekendsAreWorkdays = a;
    this.clearCache();
    this.defaultWeekAvailability = this.getDefaultWeekAvailability(this.weekendsAreWorkdays);
  }
}, areWeekendsWorkDays:function() {
  return this.weekendsAreWorkdays;
}, getCalendarDay:function(b) {
  b = typeof b == 'number' ? new Date(b) : b;
  var a = this.getOverrideDay(b);
  if (a) {
    return a;
  }
  return this.getDefaultCalendarDay(b.getDay(), b);
}, getOverrideDay:function(a) {
  var b = this.getOwnCalendarDay(a);
  if (b) {
    return b;
  }
  if (this.parent) {
    return this.parent.getOverrideDay(a);
  }
  return null;
}, getOwnCalendarDay:function(a) {
  a = typeof a == 'number' ? new Date(a) : a;
  return this.getById(Ext.Date.clearTime(a, true) - 0);
}, getDefaultCalendarDay:function(c, b) {
  if (b) {
    var a = this.getNonStandardWeekByDate(b);
    if (a && a.weekAvailability[c]) {
      return a.weekAvailability[c];
    }
  }
  if (this.weekAvailability[c]) {
    return this.weekAvailability[c];
  }
  if (this.parent) {
    return this.parent.getDefaultCalendarDay(c);
  }
  return this.defaultWeekAvailability[c];
}, isHoliday:function(c) {
  var b = c - 0;
  var d = this.holidaysCache;
  if (d[b] != null) {
    return d[b];
  }
  c = typeof c == 'number' ? new Date(c) : c;
  var a = this.getCalendarDay(c);
  if (!a) {
    throw "Can't find day for " + c;
  }
  return d[b] = !a.getIsWorkingDay();
}, isWeekend:function(b) {
  var a = b.getDay();
  return a === this.weekendFirstDay || a === this.weekendSecondDay;
}, isWorkingDay:function(a) {
  return !this.isHoliday(a);
}, convertMSDurationToUnit:function(a, b) {
  return a / this.unitsInMs[Sch.util.Date.getNameOfUnit(b)];
}, convertDurationToMs:function(b, a) {
  return b * this.unitsInMs[Sch.util.Date.getNameOfUnit(a)];
}, getHolidaysRanges:function(d, g, a) {
  if (d > g) {
    Ext.Error.raise("startDate can't be bigger than endDate");
  }
  d = Ext.Date.clearTime(d, true);
  g = Ext.Date.clearTime(g, true);
  var c = [], h, e;
  for (e = d; e < g; e = Sch.util.Date.add(e, Sch.util.Date.DAY, 1)) {
    if (this.isHoliday(e) || this.weekendsAreWorkdays && a && this.isWeekend(e)) {
      var i = this.getCalendarDay(e);
      var j = i && i.getCls() || this.defaultNonWorkingTimeCssCls;
      var f = Sch.util.Date.add(e, Sch.util.Date.DAY, 1);
      if (!h) {
        h = {StartDate:e, EndDate:f, Cls:j};
      } else {
        if (h.Cls == j) {
          h.EndDate = f;
        } else {
          c.push(h);
          h = {StartDate:e, EndDate:f, Cls:j};
        }
      }
    } else {
      if (h) {
        c.push(h);
        h = null;
      }
    }
  }
  if (h) {
    c.push(h);
  }
  var b = [];
  Ext.each(c, function(k) {
    b.push(Ext.create('Sch.model.Range', {StartDate:k.StartDate, EndDate:k.EndDate, Cls:k.Cls}));
  });
  return b;
}, forEachAvailabilityInterval:function(r, f, p) {
  p = p || this;
  var l = this;
  var d = r.startDate;
  var j = r.endDate;
  var o = r.isForward !== false;
  if (o ? !d : !j) {
    throw new Error('At least `startDate` or `endDate` is required, depending from the `isForward` option');
  }
  var a = new Date(o ? d : j);
  var q = o ? !j : !d;
  var c = Sch.util.Date;
  while (q || (o ? a < j : a > d)) {
    var h = this.getAvailabilityIntervalsFor(a - (o ? 0 : 1));
    for (var g = o ? 0 : h.length - 1; o ? g < h.length : g >= 0; o ? g++ : g--) {
      var b = h[g];
      var k = b.startDate;
      var n = b.endDate;
      if (k >= j || n <= d) {
        continue;
      }
      var e = k < d ? d : k;
      var m = n > j ? j : n;
      if (f.call(p, e, m) === false) {
        return false;
      }
    }
    a = o ? c.getStartOfNextDay(a) : c.getEndOfPreviousDay(a);
  }
}, calculateDuration:function(a, d, b) {
  var c = 0;
  this.forEachAvailabilityInterval({startDate:a, endDate:d}, function(f, e) {
    c += e - f;
  });
  return this.convertMSDurationToUnit(c, b);
}, calculateEndDate:function(a, f, b) {
  if (!f) {
    return new Date(a);
  }
  var e = Sch.util.Date, d;
  f = this.convertDurationToMs(f, b);
  var c = f === 0 && Ext.Date.clearTime(a, true) - a === 0 ? e.add(a, Sch.util.Date.DAY, -1) : a;
  this.forEachAvailabilityInterval({startDate:c}, function(i, h) {
    var j = h - i;
    var g = i.getTimezoneOffset() - h.getTimezoneOffset();
    if (j >= f) {
      d = new Date(i - 0 + f);
      return false;
    } else {
      f -= j + g * 60 * 1000;
    }
  });
  return d;
}, calculateStartDate:function(d, c, b) {
  if (!c) {
    return new Date(d);
  }
  var a;
  c = this.convertDurationToMs(c, b);
  this.forEachAvailabilityInterval({endDate:d, isForward:false}, function(f, e) {
    var g = e - f;
    if (g >= c) {
      a = new Date(e - c);
      return false;
    } else {
      c -= g;
    }
  });
  return a;
}, skipNonWorkingTime:function(a, b) {
  this.forEachAvailabilityInterval(b ? {startDate:a} : {endDate:a, isForward:false}, function(d, c) {
    a = b ? d : c;
    return false;
  });
  return new Date(a);
}, skipWorkingDays:function(a, b) {
  var c = 0, d = b > 0, e = Sch.util.Date, f = Ext.Date.clone(a);
  b = Math.abs(b);
  while (c < b) {
    if (!this.isHoliday(f - (d ? 0 : 1))) {
      c++;
      if (d) {
        f = e.getStartOfNextDay(f, true);
      } else {
        f = e.getEndOfPreviousDay(f);
      }
    }
    if (d || c < b) {
      f = this.skipNonWorkingTime(f, d);
    }
  }
  e.copyTimeValues(f, a);
  return f;
}, getAvailabilityIntervalsFor:function(a) {
  a = Ext.Date.clearTime(new Date(a)) - 0;
  if (this.availabilityIntervalsCache[a]) {
    return this.availabilityIntervalsCache[a];
  }
  return this.availabilityIntervalsCache[a] = this.getCalendarDay(a).getAvailabilityIntervalsFor(a);
}, getParentableCalendars:function() {
  var c = this, a = [], d = Gnt.data.Calendar.getAllCalendars();
  var b = function(e) {
    if (!e.parent) {
      return false;
    }
    if (e.parent == c) {
      return true;
    }
    return b(e.parent);
  };
  Ext.Array.each(d, function(e) {
    if (e === c) {
      return;
    }
    if (!b(e)) {
      a.push({Id:e.calendarId, Name:e.name || e.calendarId});
    }
  });
  return a;
}});
Ext.define('Gnt.data.calendar.BusinessTime', {extend:'Gnt.data.Calendar', daysPerMonth:20, daysPerWeek:5, hoursPerDay:8, defaultAvailability:['08:00-12:00', '13:00-17:00']});
Ext.define('Gnt.data.TaskStore', {extend:'Ext.data.TreeStore', requires:['Sch.patches.TreeStore', 'Gnt.model.Task', 'Gnt.data.Calendar'], model:'Gnt.model.Task', calendar:null, dependencyStore:null, resourceStore:null, assignmentStore:null, weekendsAreWorkdays:false, buffered:false, pageSize:null, cascadeChanges:false, batchSync:true, recalculateParents:true, skipWeekendsDuringDragDrop:true, cascadeDelay:0, cascading:false, isFillingRoot:false, constructor:function(c) {
  this.addEvents('root-fill-start', 'root-fill-end', 'filter', 'clearfilter', 'beforecascade', 'cascade');
  c = c || {};
  if (!c.calendar) {
    var a = {};
    if (c.hasOwnProperty('weekendsAreWorkdays')) {
      a.weekendsAreWorkdays = c.weekendsAreWorkdays;
    } else {
      if (this.self.prototype.hasOwnProperty('weekendsAreWorkdays') && this.self != Gnt.data.TaskStore) {
        a.weekendsAreWorkdays = this.weekendsAreWorkdays;
      }
    }
    c.calendar = new Gnt.data.Calendar(a);
  }
  this.hasListeners = {};
  this.on({'root-fill-end':this.onRootFillEnd, remove:this.onTaskDeleted, beforesync:this.onTaskStoreBeforeSync, write:this.onTaskStoreWrite, scope:this});
  var b = c.dependencyStore;
  if (b) {
    delete c.dependencyStore;
    this.setDependencyStore(b);
  }
  var d = c.resourceStore;
  if (d) {
    delete c.resourceStore;
    this.setResourceStore(d);
  }
  var f = c.assignmentStore;
  if (f) {
    delete c.assignmentStore;
    this.setAssignmentStore(f);
  }
  var e = c.calendar;
  if (e) {
    delete c.calendar;
    this.setCalendar(e);
  }
  this.callParent([c]);
  if (Ext.data.reader.Xml && this.getProxy().getReader() instanceof Ext.data.reader.Xml) {
    Ext.override(this.getProxy().getReader(), {extractData:function(g) {
      var h = this.record;
      if (h != g.nodeName) {
        g = Ext.DomQuery.select('\x3e' + h, g);
      } else {
        g = [g];
      }
      return Ext.data.reader.Xml.superclass.extractData.apply(this, [g]);
    }});
  }
  if (this.autoSync && this.batchSync) {
    this.sync = Ext.Function.createBuffered(this.sync, 500);
  }
}, loadData:function(A, v) {
  var y = this, r = y.getRootNode(), c = v ? v.addRecords : false;
  if (!A.length) {
    return;
  } else {
    if (!r) {
      r = y.setRootNode();
    }
    y.suspendAutoSync();
    y.suspendEvents();
    if (!c) {
      r.removeAll();
    }
    var f = A.length, e = y.model, m = [], t = typeof A[0].get === 'function', b, p, o, w, x, z, u, n, h;
    for (var s = 0; s < f; s++) {
      p = y.getById(A[s].getId ? A[s].getId() : A[s].Id);
      b = 0;
      if (p) {
        w = t ? A[s].get('parentId') : A[s].parentId;
        x = p.get('parentId');
        z = t ? A[s].get('index') : A[s].index;
        u = p.get('index');
        if (t) {
          p.set(A[s].data);
        } else {
          p.set(A[s]);
        }
        if ((w || w === null ? w !== x : false) || (z ? z !== u : false)) {
          n = w === null ? r : y.getById(w);
          h = x === null ? r : y.getById(x);
        } else {
          b = 1;
        }
      } else {
        p = t ? new e(A[s].data) : new e(A[s]);
        x = p.get('parentId');
        if (x) {
          n = y.getById(x);
        } else {
          if (x === null) {
            n = r;
          }
        }
      }
      if (n && !b) {
        y.moveChildren(p, n, h);
      } else {
        if (typeof n === 'undefined' && !b) {
          o = {node:p, index:p.get('index') || 0, parentId:p.get('parentId')};
          m.push(o);
        }
      }
    }
    var g = 0, j = m.length, d, k;
    while (m.length) {
      if (g > m.length - 1) {
        g = 0;
      }
      d = m[g];
      k = d.parentId === null ? r : y.getById(d.parentId);
      if (k) {
        var a = y.nodeIsChild(d.node, n);
        if (a) {
          k.insertChild(d.index, d.node);
          y.fixNodeDates(d.node);
          m.splice(g, 1);
        }
      }
      g += 1;
      if (g === j - 1 && m.length === j) {
        throw 'Invalid data, possible infinite loop.';
      }
    }
    if (y.nodesToExpand) {
      s = 0;
      for (var q = y.nodesToExpand.length; s < q; s += 1) {
        p = y.nodesToExpand[s];
        if (p.childNodes.length) {
          p.expand();
        }
      }
      delete y.nodesToExpand;
    }
    this.fireEvent('datachanged');
    this.fireEvent('refresh');
    y.resumeAutoSync();
    y.resumeEvents();
    if (y.autoSync) {
      y.sync();
    }
  }
}, fixNodeDates:function(b) {
  var c = b.calculateDuration(b.getStartDate(), b.getEndDate(), b.getDurationUnit()), a;
  b.set({Duration:c});
  if (b.childNodes.length) {
    a = b.getChildAt(0);
    a.recalculateParents();
  } else {
    b.recalculateParents();
  }
}, nodeIsChild:function(c, b) {
  var d = b.getId(), a = true;
  if (c.childNodes.length) {
    c.cascadeBy(function(e) {
      if (e.getId() === d) {
        a = false;
        return false;
      }
    });
  }
  return a;
}, moveChildren:function(e, d, c) {
  if (e.get('expanded')) {
    if (!this.nodesToExpand) {
      this.nodesToExpand = [];
    }
    this.nodesToExpand.push(e);
    e.set('expanded', false);
  }
  var b, f = this.nodeIsChild(e, d), a = c || this.getById(e.get('parentId'));
  if (f) {
    if (e.childNodes.length) {
      b = e.copy(null, true);
      e.removeAll();
    }
    if (a && a.getId() !== d.getId()) {
      a.removeChild(e);
    }
    d.insertChild(e.get('index') || 0, e);
    if (b) {
      b.cascadeBy(function(h) {
        if (h !== b) {
          var g = h.copy(null);
          e.insertChild(g.get('index') || 0, g);
        }
      });
    }
    this.fixNodeDates(e);
  }
}, onNodeAdded:function(c, e) {
  if (!e.normalized && !e.isRoot()) {
    e.normalize();
  }
  if (Ext.isIE) {
    var d = this, b = d.getProxy(), a = b.getReader(), f = e.raw || e[e.persistenceProperty], g;
    Ext.Array.remove(d.removed, e);
    if (!e.isLeaf()) {
      g = a.getRoot(f);
      if (g) {
        d.fillNode(e, a.extractData(g));
        if (f[a.root]) {
          delete f[a.root];
        }
      }
    }
    if (d.autoSync && !d.autoSyncSuspended && (e.phantom || e.dirty)) {
      d.sync();
    }
  } else {
    this.callParent(arguments);
  }
}, setRootNode:function() {
  var b = this;
  this.tree.setRootNode = Ext.Function.createInterceptor(this.tree.setRootNode, function(c) {
    Ext.apply(c, {calendar:b.calendar, taskStore:b, dependencyStore:b.dependencyStore, phantom:false, dirty:false});
  });
  var a = this.callParent(arguments);
  delete this.tree.setRootNode;
  return a;
}, fillNode:function(g, c) {
  this.isFillingNode = true;
  if (g.isRoot()) {
    this.isFillingRoot = true;
    this.un({remove:this.onNodeUpdated, append:this.onNodeUpdated, insert:this.onNodeUpdated, update:this.onTaskUpdated, scope:this});
    this.fireEvent('root-fill-start', this, g, c);
  }
  var f = this, e = c ? c.length : 0, d = 0, b;
  if (e && f.sortOnLoad && !f.remoteSort && f.sorters && f.sorters.items) {
    b = Ext.create('Ext.util.MixedCollection');
    b.addAll(c);
    b.sort(f.sorters.items);
    c = b.items;
  }
  g.set('loaded', true);
  if (this.buffered) {
    for (; d < e; d++) {
      var a = c[d];
      a.__isFilling__ = true;
      g.appendChild(a, true, true);
      this.onNodeAdded(null, a);
      this.tree.registerNode(a);
    }
  } else {
    for (; d < e; d++) {
      c[d].__isFilling__ = true;
      g.appendChild(c[d], false, true);
    }
  }
  if (g.isRoot()) {
    this.getRootNode().cascadeBy(function(h) {
      delete h.__isFilling__;
    });
    this.isFillingRoot = false;
    this.on({remove:this.onNodeUpdated, append:this.onNodeUpdated, insert:this.onNodeUpdated, update:this.onTaskUpdated, scope:this});
    this.fireEvent('root-fill-end', this, g, c);
  }
  delete this.isFillingNode;
  return c;
}, onRootFillEnd:function(b, a) {
  a.normalizeEffort();
}, getById:function(a) {
  return this.tree.getNodeById(a);
}, setDependencyStore:function(a) {
  if (this.dependencyStore) {
    this.dependencyStore.un({add:this.onDependencyAddOrUpdate, update:this.onDependencyAddOrUpdate, beforesync:this.onBeforeDependencySync, scope:this});
  }
  this.dependencyStore = Ext.StoreMgr.lookup(a);
  if (a) {
    a.taskStore = this;
    a.on({add:this.onDependencyAddOrUpdate, update:this.onDependencyAddOrUpdate, scope:this});
  }
}, setResourceStore:function(a) {
  this.resourceStore = Ext.StoreMgr.lookup(a);
  a.taskStore = this;
}, getResourceStore:function() {
  return this.resourceStore || null;
}, setAssignmentStore:function(a) {
  if (this.assignmentStore) {
    this.assignmentStore.un({add:this.onAssignmentStructureMutation, update:this.onAssignmentMutation, remove:this.onAssignmentStructureMutation, scope:this});
  }
  this.assignmentStore = Ext.StoreMgr.lookup(a);
  a.taskStore = this;
  a.on({add:this.onAssignmentStructureMutation, update:this.onAssignmentMutation, remove:this.onAssignmentStructureMutation, scope:this});
}, getAssignmentStore:function() {
  return this.assignmentStore || null;
}, renormalizeTasks:function(b, a) {
  if (a instanceof Gnt.model.Task) {
    a.adjustToCalendar();
  } else {
    this.getRootNode().cascadeBy(function(c) {
      c.adjustToCalendar();
    });
  }
}, getCalendar:function() {
  return this.calendar || null;
}, setCalendar:function(c) {
  var b = {datachanged:this.renormalizeTasks, update:this.renormalizeTasks, clear:this.renormalizeTasks, scope:this};
  if (this.calendar) {
    this.calendar.un(b);
  }
  this.calendar = c;
  c.on(b);
  var a = this.tree && this.getRootNode();
  if (a) {
    a.calendar = c;
  }
}, filter:function() {
  this.fireEvent('filter', this, arguments);
}, clearFilter:function() {
  this.fireEvent('clearfilter', this);
}, getCriticalPaths:function() {
  var b = this.getRootNode(), a = [], d = new Date(0);
  b.cascadeBy(function(e) {
    d = Sch.util.Date.max(e.getEndDate(), d);
  });
  b.cascadeBy(function(e) {
    if (d - e.getEndDate() === 0 && !e.isRoot()) {
      a.push(e);
    }
  });
  var c = [];
  Ext.each(a, function(e) {
    c.push(e.getCriticalPaths());
  });
  return c;
}, onNodeUpdated:function(a, b) {
  if (!this.cascading && this.recalculateParents && !this.isFillingNode) {
    b.recalculateParents();
  }
}, onTaskUpdated:function(c, b, a) {
  var d = b.previous;
  if (!this.cascading && !this.isFillingNode && a !== Ext.data.Model.COMMIT && (d && (b.startDateField in d || b.endDateField in d || 'parentId' in d || b.effortField in d))) {
    if (this.cascadeChanges) {
      Ext.Function.defer(this.cascadeChangesForTask, this.cascadeDelay, this, [b]);
    }
    if (this.recalculateParents) {
      b.recalculateParents();
    }
  }
}, cascadeChangesForTask:function(a) {
  var c = this, b = {nbrAffected:0};
  Ext.each(a.getOutgoingDependencies(), function(d) {
    var e = d.getTargetTask();
    if (e) {
      if (!c.cascading) {
        c.fireEvent('beforecascade', c);
      }
      c.cascading = true;
      e.cascadeChanges(c, b);
    }
  });
  if (c.cascading) {
    c.cascading = false;
    c.fireEvent('cascade', c, b);
  }
}, onTaskDeleted:function(c, b) {
  var a = this.dependencyStore;
  if (a && !b.isReplace && !b.isMove) {
    a.remove(b.getAllDependencies(a));
  }
}, onAssignmentMutation:function(c, a) {
  var b = this;
  Ext.each(a, function(e) {
    var d = e.getTask(b);
    if (d) {
      d.onAssignmentMutation(e);
    }
  });
}, onAssignmentStructureMutation:function(c, a) {
  var b = this;
  Ext.each(a, function(d) {
    d.getTask(b).onAssignmentStructureMutation(d);
  });
}, onDependencyAddOrUpdate:function(b, d) {
  if (this.cascadeChanges) {
    var c = this, a;
    Ext.each(d, function(e) {
      a = e.getTargetTask();
      if (a) {
        a.constrain(c);
      }
    });
  }
}, getNewRecords:function() {
  return Ext.Array.filter(this.tree.flatten(), this.filterNew, this);
}, getUpdatedRecords:function() {
  return Ext.Array.filter(this.tree.flatten(), this.filterUpdated, this);
}, filterNew:function(a) {
  return a.phantom === true && a.isValid() && a != this.tree.root;
}, filterUpdated:function(a) {
  return a.dirty === true && a.phantom !== true && a.isValid() && a != this.tree.root;
}, onTaskStoreBeforeSync:function(b, c) {
  var a = b.create;
  if (a) {
    for (var e, d = a.length - 1; d >= 0; d--) {
      e = a[d];
      if (e.isPersistable()) {
        e._phantomId = e.internalId;
      } else {
        if (this.autoSync) {
          Ext.Array.remove(a, e);
        }
      }
    }
    if (a.length === 0) {
      delete b.create;
    }
  }
  return Boolean(b.create && b.create.length > 0 || b.update && b.update.length > 0 || b.destroy && b.destroy.length > 0);
}, onTaskStoreWrite:function(c, b) {
  var d = this.dependencyStore;
  if (!d || b.action !== 'create') {
    return;
  }
  var a = b.getRecords(), e;
  Ext.each(a, function(f) {
    e = f.getId();
    if (!f.phantom && e !== f._phantomId) {
      Ext.each(d.getNewRecords(), function(g) {
        var i = g.getSourceId();
        var h = g.getTargetId();
        if (i === f._phantomId) {
          g.setSourceId(e);
        } else {
          if (h === f._phantomId) {
            g.setTargetId(e);
          }
        }
      });
      Ext.each(f.childNodes, function(g) {
        if (g.phantom) {
          g.set('parentId', e);
        }
      });
      delete f._phantomId;
    }
  });
}, getTotalTimeSpan:function() {
  var a = new Date(9999, 0, 1), b = new Date(0), c = Sch.util.Date;
  this.getRootNode().cascadeBy(function(d) {
    if (d.getStartDate()) {
      a = c.min(d.getStartDate(), a);
    }
    if (d.getEndDate()) {
      b = c.max(d.getEndDate(), b);
    }
  });
  a = a < new Date(9999, 0, 1) ? a : null;
  b = b > new Date(0) ? b : null;
  return {start:a, end:b || a || null};
}, getCount:function(b) {
  var a = b === false ? 0 : -1;
  this.getRootNode().cascadeBy(function() {
    a++;
  });
  return a;
}, toArray:function() {
  var a = [];
  this.getRootNode().cascadeBy(function(b) {
    a.push(b);
  });
  return a;
}, remove:function(a) {
  Ext.each(a, function(b) {
    b.remove();
  });
}, indent:function(b) {
  b = Ext.isArray(b) ? b : [b];
  var a = Ext.Array.sort(b, function(d, c) {
    return d.data.index > c.data.index;
  });
  Ext.each(a, function(c) {
    c.indent();
  });
}, outdent:function(b) {
  var a = Ext.Array.sort(b, function(d, c) {
    return d.data.index > c.data.index;
  });
  Ext.each(a, function(c) {
    c.indent();
  });
  Ext.each(b, function(c) {
    c.outdent();
  });
}, getTasksForResource:function(a) {
  return a.getTasks();
}, getEventsForResource:function(a) {
  return this.getTasksForResource(a);
}, ensureSingleSyncForMethod:function() {
  return function() {
    var b;
    if (this.autoSync && !this.autoSyncSuspended) {
      b = true;
      this.suspendAutoSync();
    }
    var a = this.callParent(arguments);
    if (b) {
      this.resumeAutoSync();
      this.sync();
    }
    return a;
  };
}}, function() {
  var a = ['indent', 'outdent', 'afterEdit', 'remove'];
  Ext.each(a, function(c) {
    var b = {};
    b[c] = this.prototype.ensureSingleSyncForMethod(this.prototype[c]);
    this.override(b);
  }, this);
});
Ext.define('Gnt.data.DependencyStore', {extend:'Ext.data.Store', model:'Gnt.model.Dependency', constructor:function() {
  this.callParent(arguments);
  this.init();
}, init:function() {
  this.on({beforesync:this.onBeforeSyncOperation, scope:this});
}, onBeforeSyncOperation:function(a, b) {
  if (a.create) {
    for (var d, c = a.create.length - 1; c >= 0; c--) {
      d = a.create[c];
      if (!d.isPersistable()) {
        Ext.Array.remove(a.create, d);
      }
    }
    if (a.create.length === 0) {
      delete a.create;
    }
  }
  return Boolean(a.create && a.create.length > 0 || a.update && a.update.length > 0 || a.destroy && a.destroy.length > 0);
}, getDependenciesForTask:function(b) {
  var g = b.getId() || b.internalId;
  var e = [], f = this;
  for (var d = 0, a = f.getCount(); d < a; d++) {
    var c = f.getAt(d);
    if (c.getSourceId() == g || c.getTargetId() == g) {
      e.push(c);
    }
  }
  return e;
}, getIncomingDependenciesForTask:function(b) {
  var g = b.getId() || b.internalId;
  var e = [], f = this;
  for (var d = 0, a = f.getCount(); d < a; d++) {
    var c = f.getAt(d);
    if (c.getTargetId() == g) {
      e.push(c);
    }
  }
  return e;
}, getOutgoingDependenciesForTask:function(b) {
  var g = b.getId() || b.internalId;
  var e = [], f = this;
  for (var d = 0, a = f.getCount(); d < a; d++) {
    var c = f.getAt(d);
    if (c.getSourceId() == g) {
      e.push(c);
    }
  }
  return e;
}, hasTransitiveDependency:function(d, b, a) {
  var c = this;
  return this.findBy(function(f) {
    var e = f.getTargetId();
    if (f.getSourceId() === d) {
      return e === b && f !== a ? true : c.hasTransitiveDependency(f.getTargetId(), b, a);
    }
  }) >= 0;
}, isValidDependency:function(h, b, e) {
  var f = true;
  var d, c, a;
  if (h instanceof Gnt.model.Dependency) {
    d = h.getSourceId();
    c = this.getSourceTask(d);
    b = h.getTargetId();
    a = this.getTargetTask(b);
  } else {
    d = h;
    c = this.getSourceTask(d);
    a = this.getTargetTask(b);
  }
  if (!e && h instanceof Gnt.model.Dependency) {
    f = h.isValid();
  } else {
    f = d && b && d !== b;
  }
  if (f) {
    if (c && a && (c.contains(a) || a.contains(c))) {
      f = false;
    }
    var g = e || h instanceof Gnt.model.Dependency;
    if (f && (!g && this.areTasksLinked(d, b) || this.hasTransitiveDependency(b, d, g ? h : null))) {
      f = false;
    }
  }
  return f;
}, areTasksLinked:function(a, c) {
  var b = this;
  a = a instanceof Gnt.model.Task ? a.getId() || a.internalId : a;
  c = c instanceof Gnt.model.Task ? c.getId() || c.internalId : c;
  return this.findBy(function(f) {
    var d = f.getTargetId(), e = f.getSourceId();
    if (e === a && d === c || e === c && d === c) {
      return true;
    }
  }) >= 0;
}, getSourceTask:function(a) {
  var b = a instanceof Gnt.model.Dependency ? dependency.getSourceId() : a;
  return this.getTaskStore().getById(b);
}, getTargetTask:function(a) {
  var b = a instanceof Gnt.model.Dependency ? dependency.getSourceId() : a;
  return this.getTaskStore().getById(b);
}, getTaskStore:function() {
  return this.taskStore;
}});
Ext.define('Gnt.data.ResourceStore', {requires:['Gnt.model.Resource'], extend:'Sch.data.ResourceStore', model:'Gnt.model.Resource', taskStore:null, getTaskStore:function() {
  return this.taskStore || null;
}, getAssignmentStore:function() {
  return this.assignmentStore || null;
}, getByInternalId:function(a) {
  return this.data.getByKey(a) || this.getById(a);
}});
Ext.define('Gnt.data.AssignmentStore', {requires:['Gnt.model.Assignment'], extend:'Ext.data.Store', model:'Gnt.model.Assignment', taskStore:null, getTaskStore:function() {
  return this.taskStore;
}, getResourceStore:function() {
  return this.getTaskStore().resourceStore;
}, getByInternalId:function(a) {
  return this.data.getByKey(a) || this.getById(a);
}});
Ext.define('Gnt.template.Task', {extend:'Ext.XTemplate', constructor:function(a) {
  this.callParent(['\x3cdiv class\x3d"sch-event-wrap ' + a.baseCls + ' x-unselectable" style\x3d"left:{leftOffset}px;"\x3e' + (a.leftLabel ? '\x3cdiv class\x3d"sch-gantt-labelct sch-gantt-labelct-left"\x3e\x3clabel class\x3d"sch-gantt-label sch-gantt-label-left"\x3e{leftLabel}\x3c/label\x3e\x3c/div\x3e' : '') + '\x3cdiv id\x3d"' + a.prefix + '{id}" class\x3d"sch-gantt-item sch-gantt-task-bar {cls}" unselectable\x3d"on" style\x3d"width:{width}px;{style}"\x3e' + (a.enableDependencyDragDrop ? '\x3cdiv unselectable\x3d"on" class\x3d"sch-gantt-terminal sch-gantt-terminal-start"\x3e\x3c/div\x3e' : 
  '') + (a.resizeHandles === 'both' || a.resizeHandles === 'left' ? '\x3cdiv class\x3d"sch-resizable-handle sch-gantt-task-handle sch-resizable-handle-west"\x3e\x3c/div\x3e' : '') + '\x3cdiv class\x3d"sch-gantt-progress-bar" style\x3d"width:{percentDone}%;{progressBarStyle}" unselectable\x3d"on"\x3e\x26#160;\x3c/div\x3e' + (a.resizeHandles === 'both' || a.resizeHandles === 'right' ? '\x3cdiv class\x3d"sch-resizable-handle sch-gantt-task-handle sch-resizable-handle-east"\x3e\x3c/div\x3e' : '') + (a.enableDependencyDragDrop ? 
  '\x3cdiv unselectable\x3d"on" class\x3d"sch-gantt-terminal sch-gantt-terminal-end"\x3e\x3c/div\x3e' : '') + (a.enableProgressBarResize ? '\x3cdiv style\x3d"left:{percentDone}%" class\x3d"sch-gantt-progressbar-handle"\x3e\x3c/div\x3e' : '') + '\x3c/div\x3e' + (a.rightLabel ? '\x3cdiv class\x3d"sch-gantt-labelct sch-gantt-labelct-right" style\x3d"left:{width}px"\x3e\x3clabel class\x3d"sch-gantt-label sch-gantt-label-right"\x3e{rightLabel}\x3c/label\x3e\x3c/div\x3e' : '') + '\x3c/div\x3e', {compiled:true, 
  disableFormats:true}]);
}});
Ext.define('Gnt.template.Milestone', {extend:'Ext.XTemplate', constructor:function(a) {
  this.callParent(['\x3cdiv class\x3d"sch-event-wrap ' + a.baseCls + ' x-unselectable" style\x3d"left:{leftOffset}px"\x3e' + (a.leftLabel ? '\x3cdiv class\x3d"sch-gantt-labelct sch-gantt-labelct-left"\x3e\x3clabel class\x3d"sch-gantt-label sch-gantt-label-left"\x3e{leftLabel}\x3c/label\x3e\x3c/div\x3e' : '') + (a.printable ? '\x3cimg id\x3d"' + a.prefix + '{id}" src\x3d"' + a.imgSrc + '" class\x3d"sch-gantt-item sch-gantt-milestone-diamond {cls}" unselectable\x3d"on" style\x3d"{style}" /\x3e' : '\x3cdiv id\x3d"' + 
  a.prefix + '{id}" class\x3d"sch-gantt-item sch-gantt-milestone-diamond {cls}" unselectable\x3d"on" style\x3d"{style}"\x3e' + (a.enableDependencyDragDrop ? '\x3cdiv class\x3d"sch-gantt-terminal sch-gantt-terminal-start"\x3e\x3c/div\x3e\x3cdiv class\x3d"sch-gantt-terminal sch-gantt-terminal-end"\x3e\x3c/div\x3e' : '') + '\x3c/div\x3e') + (a.rightLabel ? '\x3cdiv class\x3d"sch-gantt-labelct sch-gantt-labelct-right" style\x3d"left:{width}px"\x3e\x3clabel class\x3d"sch-gantt-label sch-gantt-label-right"\x3e{rightLabel}\x3c/label\x3e\x3c/div\x3e' : 
  '') + '\x3c/div\x3e', {compiled:true, disableFormats:true}]);
}});
Ext.define('Gnt.template.ParentTask', {extend:'Ext.XTemplate', constructor:function(a) {
  this.callParent(['\x3cdiv class\x3d"sch-event-wrap ' + a.baseCls + ' x-unselectable" style\x3d"left:{leftOffset}px;"\x3e' + (a.leftLabel ? '\x3cdiv class\x3d"sch-gantt-labelct sch-gantt-labelct-left"\x3e\x3clabel class\x3d"sch-gantt-label sch-gantt-label-left"\x3e{leftLabel}\x3c/label\x3e\x3c/div\x3e' : '') + '\x3cdiv id\x3d"' + a.prefix + '{id}" class\x3d"sch-gantt-item sch-gantt-parenttask-bar {cls}" style\x3d"width:{width}px; {style}"\x3e\x3cdiv class\x3d"sch-gantt-progress-bar" style\x3d"width:{percentDone}%;{progressBarStyle}"\x3e\x26#160;\x3c/div\x3e' + 
  (a.enableDependencyDragDrop ? '\x3cdiv class\x3d"sch-gantt-terminal sch-gantt-terminal-start"\x3e\x3c/div\x3e' : '') + '\x3cdiv class\x3d"sch-gantt-parenttask-arrow sch-gantt-parenttask-leftarrow"\x3e\x3c/div\x3e\x3cdiv class\x3d"sch-gantt-parenttask-arrow sch-gantt-parenttask-rightarrow"\x3e\x3c/div\x3e' + (a.enableDependencyDragDrop ? '\x3cdiv class\x3d"sch-gantt-terminal sch-gantt-terminal-end"\x3e\x3c/div\x3e' : '') + '\x3c/div\x3e' + (a.rightLabel ? '\x3cdiv class\x3d"sch-gantt-labelct sch-gantt-labelct-right" style\x3d"left:{width}px"\x3e\x3clabel class\x3d"sch-gantt-label sch-gantt-label-right"\x3e{rightLabel}\x3c/label\x3e\x3c/div\x3e' : 
  '') + '\x3c/div\x3e', {compiled:true, disableFormats:true}]);
}});
Ext.define('Gnt.Tooltip', {extend:'Ext.ToolTip', requires:['Ext.Template'], startText:'Starts: ', endText:'Ends: ', durationText:'Duration:', mode:'startend', cls:'sch-tip', height:40, autoHide:false, anchor:'b-tl', maskOnDisable:false, initComponent:function() {
  if (this.mode === 'startend' && !this.startEndTemplate) {
    this.startEndTemplate = (new Ext.Template('\x3cdiv class\x3d"sch-timetipwrap {cls}"\x3e\x3cdiv\x3e' + this.startText + '{startText}\x3c/div\x3e\x3cdiv\x3e' + this.endText + '{endText}\x3c/div\x3e\x3c/div\x3e')).compile();
  }
  if (this.mode === 'duration' && !this.durationTemplate) {
    this.durationTemplate = (new Ext.Template('\x3cdiv class\x3d"sch-timetipwrap {cls}"\x3e', '\x3cdiv\x3e' + this.startText + ' {startText}\x3c/div\x3e', '\x3cdiv\x3e' + this.durationText + ' {duration} {unit}\x3c/div\x3e', '\x3c/div\x3e')).compile();
  }
  this.callParent(arguments);
}, update:function(e, b, d, a) {
  var c;
  if (this.mode === 'duration') {
    c = this.getDurationContent(e, b, d, a);
  } else {
    c = this.getStartEndContent(e, b, d, a);
  }
  this.callParent([c]);
}, getStartEndContent:function(b, f, a, h) {
  var e = this.gantt, i = e.getFormattedDate(b), d = i, g;
  if (f - b > 0) {
    d = e.getFormattedEndDate(f, b);
  }
  var c = {cls:a ? 'sch-tip-ok' : 'sch-tip-notok', startText:i, endText:d};
  if (this.showClock) {
    Ext.apply(c, {startHourDegrees:roundedStart.getHours() * 30, startMinuteDegrees:roundedStart.getMinutes() * 6});
    if (f) {
      Ext.apply(c, {endHourDegrees:g.getHours() * 30, endMinuteDegrees:g.getMinutes() * 6});
    }
  }
  return this.startEndTemplate.apply(c);
}, getDurationContent:function(f, b, d, a) {
  var c = a.getDurationUnit() || Sch.util.Date.DAY;
  var e = a.calculateDuration(f, b, c);
  return this.durationTemplate.apply({cls:d ? 'sch-tip-ok' : 'sch-tip-notok', startText:this.gantt.getFormattedDate(f), duration:parseFloat(Ext.Number.toFixed(e, 1)), unit:Sch.util.Date.getReadableNameOfUnit(c, e > 1)});
}, show:function(a) {
  if (a) {
    this.setTarget(a);
  }
  this.callParent([]);
}});
Ext.define('Gnt.feature.TaskDragDrop', {extend:'Ext.dd.DragZone', requires:['Gnt.Tooltip', 'Ext.dd.StatusProxy', 'Ext.dd.ScrollManager'], onDragEnter:Ext.emptyFn, onDragOut:Ext.emptyFn, constructor:function(a) {
  a = a || {};
  Ext.apply(this, a);
  this.proxy = this.proxy || Ext.create('Ext.dd.StatusProxy', {shadow:false, dropAllowed:'sch-gantt-dragproxy', dropNotAllowed:'sch-gantt-dragproxy', ensureAttachedToBody:Ext.emptyFn});
  var c = this, b = c.gantt;
  if (c.useTooltip) {
    c.tip = Ext.create('Gnt.Tooltip', {gantt:b});
  }
  c.callParent([b.el, Ext.apply(a, {ddGroup:c.gantt.id + '-task-dd'})]);
  c.scroll = false;
  c.isTarget = true;
  c.ignoreSelf = false;
  c.addInvalidHandleClass('sch-resizable-handle');
  c.addInvalidHandleClass('x-resizable-handle');
  c.addInvalidHandleClass('sch-gantt-terminal');
  c.addInvalidHandleClass('sch-gantt-progressbar-handle');
  Ext.dd.ScrollManager.register(c.gantt.el);
  c.gantt.ownerCt.el.appendChild(this.proxy.el);
  c.gantt.on({destroy:c.cleanUp, scope:c});
}, useTooltip:true, validatorFn:function(a, b, d, c) {
  return true;
}, validatorFnScope:null, cleanUp:function() {
  if (this.tip) {
    this.tip.destroy();
  }
  this.destroy();
}, containerScroll:false, dropAllowed:'sch-gantt-dragproxy', dropNotAllowed:'sch-gantt-dragproxy', destroy:function() {
  this.callParent(arguments);
  Ext.dd.ScrollManager.unregister(this.gantt.el);
}, autoOffset:function(a, e) {
  var d = this.dragData.repairXY, c = a - d[0], b = e - d[1];
  this.setDelta(c, b);
}, setXConstraint:function(c, b, a) {
  this.leftConstraint = c;
  this.rightConstraint = b;
  this.minX = c;
  this.maxX = b;
  if (a) {
    this.setXTicks(this.initPageX, a);
  }
  this.constrainX = true;
}, setYConstraint:function(a, c, b) {
  this.topConstraint = a;
  this.bottomConstraint = c;
  this.minY = a;
  this.maxY = c;
  if (b) {
    this.setYTicks(this.initPageY, b);
  }
  this.constrainY = true;
}, constrainTo:function(a, b) {
  this.resetConstraints();
  this.initPageX = a.left;
  this.initPageY = b.top;
  this.setXConstraint(a.left, a.right - (b.right - b.left), this.xTickSize);
  this.setYConstraint(b.top - 1, b.top - 1, this.yTickSize);
}, onDragOver:function(g, h) {
  var f = this.dragData, d = f.record, c = this.gantt, b = this.proxy.el.getX() + c.getXOffset(d), a = c.getDateFromXY([b, 0], 'round');
  if (!f.hidden) {
    Ext.fly(f.sourceNode).hide();
    f.hidden = true;
  }
  if (!a || a - f.start === 0) {
    return;
  }
  f.start = a;
  this.valid = this.validatorFn.call(this.validatorFnScope || c, d, a, f.duration, g) !== false;
  if (this.tip) {
    this.tip.update(a, d.calculateEndDate(a, d.getDuration(), d.getDurationUnit()), this.valid);
  }
}, onStartDrag:function() {
  var a = this.dragData.record;
  if (this.tip) {
    this.tip.enable();
    this.tip.show(Ext.get(this.dragData.sourceNode));
    this.tip.update(a.getStartDate(), a.getEndDate(), true);
  }
  this.gantt.fireEvent('taskdragstart', this.gantt, a);
}, getDragData:function(i) {
  var h = this.gantt, f = i.getTarget(h.eventSelector);
  if (f && !i.getTarget('.sch-gantt-baseline-item')) {
    var c = Ext.get(f), d = h.resolveTaskRecord(c);
    if (h.fireEvent('beforetaskdrag', h, d, i) === false) {
      return null;
    }
    var j = f.cloneNode(true), b = h.getSnapPixelAmount(), a = c.getXY();
    j.id = Ext.id();
    if (b <= 1) {
      Ext.fly(j).setStyle('left', 0);
    }
    this.constrainTo(Ext.fly(h.findItemByChild(f)).getRegion(), c.getRegion());
    if (b >= 1) {
      this.setXConstraint(this.leftConstraint, this.rightConstraint, b);
    }
    return {sourceNode:f, repairXY:a, ddel:j, record:d, duration:Sch.util.Date.getDurationInMinutes(d.getStartDate(), d.getEndDate())};
  }
  return null;
}, afterRepair:function() {
  Ext.fly(this.dragData.sourceNode).show();
  if (this.tip) {
    this.tip.hide();
  }
  this.dragging = false;
}, getRepairXY:function() {
  this.gantt.fireEvent('afterdnd', this.gantt);
  return this.dragData.repairXY;
}, onDragDrop:function(g, i) {
  var f = this.cachedTarget || Ext.dd.DragDropMgr.getDDById(i), d = this.dragData, b = this.gantt, a = d.record, h = d.start;
  var c = false;
  if (this.tip) {
    this.tip.disable();
  }
  if (this.valid && h && a.getStartDate() - h !== 0) {
    b.taskStore.on('update', function() {
      c = true;
    }, null, {single:true});
    a.setStartDate(h, true, b.taskStore.skipWeekendsDuringDragDrop);
    if (c) {
      b.fireEvent('taskdrop', b, a);
      if (Ext.isIE9) {
        this.proxy.el.setStyle('visibility', 'hidden');
        Ext.Function.defer(this.onValidDrop, 10, this, [f, g, i]);
      } else {
        this.onValidDrop(f, g, i);
      }
    }
  }
  if (!c) {
    this.onInvalidDrop(f, g, i);
  }
  b.fireEvent('aftertaskdrop', b, a);
}});
Ext.define('Gnt.feature.DependencyDragDrop', {extend:'Ext.util.Observable', constructor:function(b) {
  this.addEvents('beforednd', 'dndstart', 'drop', 'afterdnd');
  var a = b.ganttView;
  Ext.apply(this, {el:a.el, ddGroup:a.id + '-sch-dependency-dd', ganttView:a, dependencyStore:a.getDependencyStore()});
  this.el.on('mousemove', function() {
    this.setupDragZone();
    this.setupDropZone();
  }, this, {single:true});
  this.callParent(arguments);
}, fromText:'From: \x3cstrong\x3e{0}\x3c/strong\x3e {1}\x3cbr/\x3e', toText:'To: \x3cstrong\x3e{0}\x3c/strong\x3e {1}', startText:'Start', endText:'End', useLineProxy:true, terminalSelector:'.sch-gantt-terminal', destroy:function() {
  if (this.dragZone) {
    this.dragZone.destroy();
  }
  if (this.dropZone) {
    this.dropZone.destroy();
  }
  if (this.lineProxyEl) {
    this.lineProxyEl.destroy();
  }
}, initLineProxy:function(b, a) {
  var c = this.lineProxyEl = this.el.createChild({cls:'sch-gantt-connector-proxy'});
  c.alignTo(b, a ? 'l' : 'r');
  Ext.apply(this, {containerTop:this.el.getTop(), containerLeft:this.el.getLeft(), startXY:c.getXY(), startScrollLeft:this.el.dom.scrollLeft, startScrollTop:this.el.dom.scrollTop});
}, updateLineProxy:function(m) {
  var a = this.lineProxyEl, j = m[0] - this.startXY[0] + this.el.dom.scrollLeft - this.startScrollLeft, i = m[1] - this.startXY[1] + this.el.dom.scrollTop - this.startScrollTop, b = Math.max(1, Math.sqrt(Math.pow(j, 2) + Math.pow(i, 2)) - 2), h = Math.atan2(i, j) - Math.PI / 2, e;
  if (Ext.isIE) {
    var k = Math.cos(h), g = Math.sin(h), l = 'progid:DXImageTransform.Microsoft.Matrix(sizingMethod\x3d"auto expand", M11 \x3d ' + k + ', M12 \x3d ' + -g + ', M21 \x3d ' + g + ', M22 \x3d ' + k + ')', d, f;
    if (this.el.dom.scrollTop !== this.startScrollTop) {
      d = this.startScrollTop - this.containerTop;
    } else {
      d = this.el.dom.scrollTop - this.containerTop;
    }
    if (this.el.dom.scrollLeft !== this.startScrollLeft) {
      f = this.startScrollLeft - this.containerLeft;
    } else {
      f = this.el.dom.scrollLeft - this.containerLeft;
    }
    e = {height:b + 'px', top:Math.min(0, i) + this.startXY[1] + d + (i < 0 ? 2 : 0) + 'px', left:Math.min(0, j) + this.startXY[0] + f + (j < 0 ? 2 : 0) + 'px', filter:l, '-ms-filter':l};
  } else {
    var c = 'rotate(' + h + 'rad)';
    e = {height:b + 'px', '-o-transform':c, '-webkit-transform':c, '-moz-transform':c, transform:c};
  }
  a.show().setStyle(e);
}, setupDragZone:function() {
  var b = this, a = this.ganttView;
  this.dragZone = Ext.create('Ext.dd.DragZone', this.el, {ddGroup:this.ddGroup, onStartDrag:function() {
    this.el.addCls('sch-gantt-dep-dd-dragging');
    b.fireEvent('dndstart', b);
    if (b.useLineProxy) {
      var c = this.dragData;
      b.initLineProxy(c.sourceNode, c.isStart);
    }
  }, getDragData:function(g) {
    var f = g.getTarget(b.terminalSelector);
    if (f) {
      var d = a.resolveTaskRecord(f);
      if (b.fireEvent('beforednd', this, d) === false) {
        return null;
      }
      var c = !!f.className.match('sch-gantt-terminal-start'), h = Ext.core.DomHelper.createDom({cls:'sch-dd-dependency', children:[{tag:'span', cls:'sch-dd-dependency-from', html:Ext.String.format(b.fromText, d.getName(), c ? b.startText : b.endText)}, {tag:'span', cls:'sch-dd-dependency-to', html:Ext.String.format(b.toText, '', '')}]});
      return {fromId:d.getId() || d.internalId, isStart:c, repairXY:Ext.fly(f).getXY(), ddel:h, sourceNode:Ext.fly(f).up(a.eventSelector)};
    }
    return false;
  }, afterRepair:function() {
    this.el.removeCls('sch-gantt-dep-dd-dragging');
    this.dragging = false;
    b.fireEvent('afterdnd', this);
  }, onMouseUp:function() {
    this.el.removeCls('sch-gantt-dep-dd-dragging');
    if (b.lineProxyEl) {
      if (Ext.isIE) {
        Ext.destroy(b.lineProxyEl);
        b.lineProxyEl = null;
      } else {
        b.lineProxyEl.animate({to:{height:0}, duration:500, callback:function() {
          Ext.destroy(b.lineProxyEl);
          b.lineProxyEl = null;
        }});
      }
    }
  }, getRepairXY:function() {
    return this.dragData.repairXY;
  }});
}, setupDropZone:function() {
  var b = this, a = this.ganttView;
  this.dropZone = Ext.create('Ext.dd.DropZone', this.el, {ddGroup:this.ddGroup, getTargetFromEvent:function(c) {
    if (b.useLineProxy) {
      b.updateLineProxy(c.getXY());
    }
    return c.getTarget(b.terminalSelector);
  }, onNodeEnter:function(h, c, g, f) {
    var d = h.className.match('sch-gantt-terminal-start');
    Ext.fly(h).addCls(d ? 'sch-gantt-terminal-start-drophover' : 'sch-gantt-terminal-end-drophover');
  }, onNodeOut:function(h, c, g, f) {
    var d = h.className.match('sch-gantt-terminal-start');
    Ext.fly(h).removeCls(d ? 'sch-gantt-terminal-start-drophover' : 'sch-gantt-terminal-end-drophover');
  }, onNodeOver:function(k, c, j, i) {
    var d = a.resolveTaskRecord(k), f = d.getId() || d.internalId, g = k.className.match('sch-gantt-terminal-start'), h = Ext.String.format(b.toText, d.getName(), g ? b.startText : b.endText);
    c.proxy.el.down('.sch-dd-dependency-to').update(h);
    if (b.dependencyStore.isValidDependency(i.fromId, f)) {
      return this.dropAllowed;
    } else {
      return this.dropNotAllowed;
    }
  }, onNodeDrop:function(h, l, i, f) {
    var j, c = true, d = Gnt.model.Dependency.Type, g = a.resolveTaskRecord(h), k = g.getId() || g.internalId;
    if (b.lineProxyEl) {
      Ext.destroy(b.lineProxyEl);
      b.lineProxyEl = null;
    }
    this.el.removeCls('sch-gantt-dep-dd-dragging');
    if (f.isStart) {
      if (h.className.match('sch-gantt-terminal-start')) {
        j = d.StartToStart;
      } else {
        j = d.StartToEnd;
      }
    } else {
      if (h.className.match('sch-gantt-terminal-start')) {
        j = d.EndToStart;
      } else {
        j = d.EndToEnd;
      }
    }
    c = b.dependencyStore.isValidDependency(f.fromId, k);
    if (c) {
      b.fireEvent('drop', this, f.fromId, k, j);
    }
    b.fireEvent('afterdnd', this);
    return c;
  }});
}});
Ext.define('Gnt.feature.DragCreator', {requires:['Ext.Template', 'Sch.util.DragTracker', 'Gnt.Tooltip'], constructor:function(a) {
  Ext.apply(this, a || {});
  this.init();
}, disabled:false, showDragTip:true, dragTolerance:2, setDisabled:function(a) {
  this.disabled = a;
  if (this.dragTip) {
    this.dragTip.setDisabled(a);
  }
}, getProxy:function() {
  if (!this.proxy) {
    this.proxy = this.template.append(this.ganttView.ownerCt.el, {}, true);
  }
  return this.proxy;
}, onBeforeDragStart:function(f) {
  var c = this.ganttView, b = f.getTarget('.' + c.timeCellCls, 2);
  if (b) {
    var a = c.resolveTaskRecord(b);
    var d = c.getDateFromDomEvent(f);
    if (!this.disabled && b && !a.getStartDate() && !a.getEndDate() && c.fireEvent('beforedragcreate', c, a, d, f) !== false) {
      f.stopEvent();
      this.taskRecord = a;
      this.originalStart = d;
      this.rowRegion = c.getScheduleRegion(this.taskRecord, this.originalStart);
      this.dateConstraints = c.getDateConstraints(this.resourceRecord, this.originalStart);
      return true;
    }
  }
  return false;
}, onDragStart:function() {
  var c = this, a = c.ganttView, b = c.getProxy();
  c.start = c.originalStart;
  c.end = c.start;
  c.rowBoundaries = {top:c.rowRegion.top, bottom:c.rowRegion.bottom};
  b.setRegion({top:c.rowBoundaries.top, right:c.tracker.startXY[0], bottom:c.rowBoundaries.bottom, left:c.tracker.startXY[0]});
  b.show();
  c.ganttView.fireEvent('dragcreatestart', c.ganttView);
  if (c.showDragTip) {
    c.dragTip.update(c.start, c.end, true, this.taskRecord);
    c.dragTip.enable();
    c.dragTip.show(b);
  }
}, onDrag:function(g) {
  var d = this, c = d.ganttView, b = d.tracker.getRegion().constrainTo(d.rowRegion), f = c.getStartEndDatesFromRegion(b, 'round');
  if (!f) {
    return;
  }
  d.start = f.start || d.start;
  d.end = f.end || d.end;
  var a = d.dateConstraints;
  if (a) {
    d.end = Sch.util.Date.constrain(d.end, a.start, a.end);
    d.start = Sch.util.Date.constrain(d.start, a.start, a.end);
  }
  if (d.showDragTip) {
    d.dragTip.update(d.start, d.end, true, this.taskRecord);
  }
  Ext.apply(b, d.rowBoundaries);
  this.getProxy().setRegion(b);
}, onDragEnd:function(b) {
  var c = this.ganttView, a = true;
  if (this.showDragTip) {
    this.dragTip.disable();
  }
  if (!this.start || !this.end || this.end < this.start) {
    a = false;
  }
  if (a) {
    this.taskRecord.setStartEndDate(this.start, this.end);
    c.fireEvent('dragcreateend', c, this.taskRecord, b);
  }
  this.proxy.hide();
  c.fireEvent('afterdragcreate', c);
}, init:function() {
  var c = this.ganttView, a = c.el, b = Ext.Function.bind;
  this.lastTime = new Date();
  this.template = this.template || Ext.create('Ext.Template', '\x3cdiv class\x3d"sch-gantt-dragcreator-proxy"\x3e\x3c/div\x3e', {compiled:true, disableFormats:true});
  c.on({destroy:this.onGanttDestroy, scope:this});
  this.tracker = new Sch.util.DragTracker({el:a, tolerance:this.dragTolerance, onBeforeStart:b(this.onBeforeDragStart, this), onStart:b(this.onDragStart, this), onDrag:b(this.onDrag, this), onEnd:b(this.onDragEnd, this)});
  if (this.showDragTip) {
    this.dragTip = Ext.create('Gnt.Tooltip', {mode:'duration', cls:'sch-gantt-dragcreate-tip', gantt:c});
  }
}, onGanttDestroy:function() {
  if (this.dragTip) {
    this.dragTip.destroy();
  }
  if (this.tracker) {
    this.tracker.destroy();
  }
  if (this.proxy) {
    Ext.destroy(this.proxy);
    this.proxy = null;
  }
}});
Ext.define('Gnt.feature.LabelEditor', {extend:'Ext.Editor', labelPosition:'', constructor:function(b, a) {
  this.ganttView = b;
  this.ganttView.on('afterrender', this.onGanttRender, this);
  this.callParent([a]);
}, edit:function(a) {
  var b = this.ganttView.getElementFromEventRecord(a).up(this.ganttView.eventWrapSelector);
  this.record = a;
  this.startEdit(b.down(this.delegate), this.dataIndex ? a.get(this.dataIndex) : '');
}, delegate:'', dataIndex:'', shadow:false, completeOnEnter:true, cancelOnEsc:true, ignoreNoChange:true, onGanttRender:function(a) {
  if (!this.field.width) {
    this.autoSize = 'width';
  }
  this.on({beforestartedit:function(c, b, d) {
    return a.fireEvent('labeledit_beforestartedit', a, this.record, d, c);
  }, beforecomplete:function(c, d, b) {
    return a.fireEvent('labeledit_beforecomplete', a, d, b, this.record, c);
  }, complete:function(c, d, b) {
    this.record.set(this.dataIndex, d);
    a.fireEvent('labeledit_complete', a, d, b, this.record, c);
  }, scope:this});
  a.el.on('dblclick', function(c, b) {
    this.edit(a.resolveTaskRecord(b));
  }, this, {delegate:this.delegate});
}});
Ext.define('Gnt.feature.ProgressBarResize', {requires:['Ext.QuickTip', 'Ext.resizer.Resizer'], constructor:function(a) {
  Ext.apply(this, a || {});
  var b = this.gantt;
  b.on({destroy:this.cleanUp, scope:this});
  b.mon(b.el, 'mousedown', this.onMouseDown, this, {delegate:'.sch-gantt-progressbar-handle'});
  this.callParent(arguments);
}, useTooltip:true, increment:10, onMouseDown:function(d, b) {
  var c = this.gantt, f = c.resolveTaskRecord(b);
  if (c.fireEvent('beforeprogressbarresize', c, f) !== false) {
    var a = Ext.fly(b).prev('.sch-gantt-progress-bar');
    d.stopEvent();
    this.createResizable(a, f, d);
    c.fireEvent('progressbarresizestart', c, f);
  }
}, createResizable:function(d, a, h) {
  var c = h.getTarget(), i = d.up(this.gantt.eventSelector), g = i.getWidth() - 4, b = g * this.increment / 100;
  var f = Ext.create('Ext.resizer.Resizer', {target:d, taskRecord:a, handles:'e', minWidth:0, maxWidth:g, minHeight:1, widthIncrement:b, listeners:{resizedrag:this.partialResize, resize:this.afterResize, scope:this}});
  f.resizeTracker.onMouseDown(h, f.east.dom);
  i.select('.x-resizable-handle, .sch-gantt-terminal, .sch-gantt-progressbar-handle').hide();
  if (this.useTooltip) {
    if (!this.tip) {
      this.tip = Ext.create('Ext.ToolTip', {autoHide:false, anchor:'b', html:'%'});
    }
    this.tip.setTarget(d);
    this.tip.show();
    this.tip.body.update(a.getPercentDone() + '%');
  }
}, partialResize:function(c, b) {
  var a = Math.round(b * 100 / (c.maxWidth * this.increment)) * this.increment;
  if (this.tip) {
    this.tip.body.update(a + '%');
  }
}, afterResize:function(d, a, b, f) {
  var g = d.taskRecord;
  if (this.tip) {
    this.tip.hide();
  }
  var c = Math.round(a * 100 / (d.maxWidth * this.increment)) * this.increment;
  d.taskRecord.setPercentDone(c);
  d.destroy();
  this.gantt.fireEvent('afterprogressbarresize', this.gantt, g);
}, cleanUp:function() {
  if (this.tip) {
    this.tip.destroy();
  }
}});
Ext.define('Gnt.feature.TaskResize', {constructor:function(a) {
  Ext.apply(this, a);
  var b = this.gantt;
  b.on({destroy:this.cleanUp, scope:this});
  b.mon(b.el, 'mousedown', this.onMouseDown, this, {delegate:'.sch-resizable-handle'});
  this.callParent(arguments);
}, showDuration:true, useTooltip:true, validatorFn:Ext.emptyFn, validatorFnScope:null, onMouseDown:function(c) {
  var b = this.gantt, a = c.getTarget(b.eventSelector), d = b.resolveTaskRecord(a);
  if (b.fireEvent('beforetaskresize', b, d, c) === false) {
    return;
  }
  c.stopEvent();
  this.createResizable(Ext.get(a), d, c);
  b.fireEvent('taskresizestart', b, d);
}, createResizable:function(c, k, j) {
  var m = j.getTarget(), i = this.gantt, a = !!m.className.match('sch-resizable-handle-west'), d = i.getSnapPixelAmount(), f = c.getWidth(), l = c.up('.x-grid-row').getRegion();
  this.resizable = Ext.create('Ext.resizer.Resizer', {startLeft:c.getLeft(), startRight:c.getRight(), target:c, taskRecord:k, handles:a ? 'w' : 'e', constrainTo:l, minHeight:1, minWidth:d, widthIncrement:d, listeners:{resizedrag:this[a ? 'partialWestResize' : 'partialEastResize'], resize:this.afterResize, scope:this}});
  this.resizable.resizeTracker.onMouseDown(j, this.resizable[a ? 'west' : 'east'].dom);
  if (this.useTooltip) {
    if (!this.tip) {
      this.tip = Ext.create('Gnt.Tooltip', {mode:this.showDuration ? 'duration' : 'startend', gantt:this.gantt});
    }
    var b = k.getStartDate(), h = k.getEndDate();
    this.tip.show(c);
    this.tip.update(b, h, true, k);
  }
}, partialEastResize:function(i, f, b, g) {
  var c = this.gantt, a = c.getDateFromXY([i.startLeft + Math.min(f, this.resizable.maxWidth), 0], 'round');
  if (!a || i.end - a === 0) {
    return;
  }
  var h = i.taskRecord.getStartDate(), d = this.validatorFn.call(this.validatorFnScope || this, i.taskRecord, h, a) !== false;
  i.end = a;
  c.fireEvent('partialtaskresize', c, i.taskRecord, h, a, i.el, g);
  if (this.useTooltip) {
    this.tip.update(h, a, d, i.taskRecord);
  }
}, partialWestResize:function(i, f, b, g) {
  var c = this.gantt, h = c.getDateFromXY([i.startRight - Math.min(f, this.resizable.maxWidth), 0], 'round');
  if (!h || i.start - h === 0) {
    return;
  }
  var a = i.taskRecord.getEndDate(), d = this.validatorFn.call(this.validatorFnScope || this, i.taskRecord, h, a) !== false;
  i.start = h;
  c.fireEvent('partialtaskresize', c, i.taskRecord, h, a, i.el, g);
  if (this.useTooltip) {
    this.tip.update(h, a, d, i.taskRecord);
  }
}, afterResize:function(a, l, i, j) {
  if (this.useTooltip) {
    this.tip.hide();
  }
  var k = a.taskRecord, g = k.getStartDate(), m = k.getEndDate(), c = a.start || g, f = a.end || m, d = this.gantt;
  a.destroy();
  if (c && f && (c - g || f - m) && this.validatorFn.call(this.validatorFnScope || this, k, c, f, j) !== false) {
    var b = this.gantt.taskStore.skipWeekendsDuringDragDrop;
    if (c - g !== 0) {
      k.setStartDate(c <= f ? c : f, false, b);
    } else {
      k.setEndDate(c <= f ? f : c, false, b);
    }
  } else {
    d.refreshKeepingScroll();
  }
  d.fireEvent('aftertaskresize', d, k);
}, cleanUp:function() {
  if (this.tip) {
    this.tip.destroy();
  }
}});
Ext.define('Gnt.feature.WorkingTime', {extend:'Sch.plugin.Zones', requires:['Ext.data.Store', 'Sch.model.Range'], expandToFitView:true, calendar:null, init:function(a) {
  if (!this.calendar) {
    Ext.Error.raise("Required attribute 'calendar' missed during initialization of 'Gnt.feature.WorkingTime'");
  }
  this.bindCalendar(this.calendar);
  Ext.apply(this, {store:new Ext.data.Store({model:'Sch.model.Range'})});
  this.callParent(arguments);
  a.on('viewchange', this.onViewChange, this);
  this.onViewChange();
}, bindCalendar:function(b) {
  var a = {datachanged:this.refresh, update:this.refresh, scope:this, delay:1};
  if (this.calendar) {
    this.calendar.un(a);
  }
  b.on(a);
  this.calendar = b;
}, onViewChange:function() {
  var a = Sch.util.Date;
  if (a.compareUnits(this.timeAxis.unit, a.WEEK) > 0) {
    this.setDisabled(true);
  } else {
    this.setDisabled(false);
    this.refresh();
  }
}, refresh:function() {
  var a = this.schedulerView;
  this.store.removeAll(true);
  this.store.add(this.calendar.getHolidaysRanges(a.getStart(), a.getEnd(), true));
}});
Ext.define('Gnt.plugin.DependencyEditor', {extend:'Ext.form.FormPanel', mixins:['Ext.AbstractPlugin'], lockableScope:'normal', requires:['Ext.form.DisplayField', 'Ext.form.ComboBox', 'Ext.form.NumberField', 'Gnt.model.Dependency'], hideOnBlur:true, fromText:'From', toText:'To', typeText:'Type', lagText:'Lag', endToStartText:'Finish-To-Start', startToStartText:'Start-To-Start', endToEndText:'Finish-To-Finish', startToEndText:'Start-To-Finish', showLag:false, border:false, height:150, width:260, frame:true, 
labelWidth:60, constrain:false, initComponent:function() {
  Ext.apply(this, {items:this.buildFields(), defaults:{width:240}, floating:true, hideMode:'offsets'});
  this.callParent(arguments);
}, beforeRender:function() {
  this.addCls('sch-gantt-dependencyeditor');
  this.callParent(arguments);
}, init:function(a) {
  a.on('dependencydblclick', this.onDependencyDblClick, this);
  a.on('render', this.onGanttRender, this, {delay:50});
  this.gantt = a;
  this.taskStore = a.getTaskStore();
}, onGanttRender:function() {
  this.render(Ext.getBody());
  this.collapse(Ext.Component.DIRECTION_TOP, true);
  this.hide();
  if (this.hideOnBlur) {
    this.mon(Ext.getBody(), 'click', this.onMouseClick, this);
  }
}, show:function(a, b) {
  this.dependencyRecord = a;
  this.getForm().loadRecord(a);
  this.fromLabel.setValue(this.dependencyRecord.getSourceTask().getName());
  this.toLabel.setValue(this.dependencyRecord.getTargetTask().getName());
  this.callParent([]);
  this.el.setXY(b);
  this.expand(!this.constrain);
  if (this.constrain) {
    this.doConstrain(Ext.util.Region.getRegion(Ext.getBody()));
  }
}, buildFields:function() {
  var c = this, d = Gnt.model.Dependency, b = d.Type, a = [this.fromLabel = Ext.create('Ext.form.DisplayField', {fieldLabel:this.fromText}), this.toLabel = Ext.create('Ext.form.DisplayField', {fieldLabel:this.toText}), this.typeField = Ext.create('Ext.form.ComboBox', {name:d.prototype.nameField, fieldLabel:this.typeText, triggerAction:'all', queryMode:'local', valueField:'value', displayField:'text', editable:false, store:Ext.create('Ext.data.JsonStore', {fields:['text', 'value'], data:[{text:this.endToStartText, 
  value:b.EndToStart}, {text:this.startToStartText, value:b.StartToStart}, {text:this.endToEndText, value:b.EndToEnd}, {text:this.startToEndText, value:b.StartToEnd}]})})];
  if (this.showLag) {
    a.push(this.lagField = Ext.create('Ext.form.NumberField', {name:d.prototype.lagField, fieldLabel:this.lagText}));
  }
  return a;
}, onDependencyDblClick:function(c, a, d, b) {
  if (this.lagField) {
    this.lagField.name = a.lagField;
  }
  if (this.typeField) {
    this.typeField.name = a.typeField;
  }
  if (a != this.dependencyRecord) {
    this.show(a, d.getXY());
  }
}, onMouseClick:function(a) {
  if (this.collapsed || a.within(this.getEl()) || a.getTarget('.x-layer') || a.getTarget('.sch-ignore-click')) {
    return;
  }
  this.collapse();
}, afterCollapse:function() {
  delete this.dependencyRecord;
  this.hide();
  this.callParent(arguments);
}});
Ext.define('Gnt.plugin.TaskContextMenu', {extend:'Ext.menu.Menu', mixins:['Ext.AbstractPlugin'], lockableScope:'top', requires:['Gnt.model.Dependency'], plain:true, triggerEvent:'taskcontextmenu', texts:{newTaskText:'New task', newMilestoneText:'New milestone', deleteTask:'Delete task(s)', editLeftLabel:'Edit left label', editRightLabel:'Edit right label', add:'Add...', deleteDependency:'Delete dependency...', addTaskAbove:'Task above', addTaskBelow:'Task below', addMilestone:'Milestone', addSubtask:'Sub-task', 
addSuccessor:'Successor', addPredecessor:'Predecessor'}, grid:null, rec:null, lastHighlightedItem:null, createMenuItems:function() {
  var a = this.texts;
  return [{handler:this.deleteTask, requiresTask:true, scope:this, text:a.deleteTask}, {handler:this.editLeftLabel, requiresTask:true, scope:this, text:a.editLeftLabel}, {handler:this.editRightLabel, requiresTask:true, scope:this, text:a.editRightLabel}, {text:a.add, menu:{plain:true, items:[{handler:this.addTaskAboveAction, requiresTask:true, scope:this, text:a.addTaskAbove}, {handler:this.addTaskBelowAction, scope:this, text:a.addTaskBelow}, {handler:this.addMilestone, requiresTask:true, scope:this, 
  text:a.addMilestone}, {handler:this.addSubtask, requiresTask:true, scope:this, text:a.addSubtask}, {handler:this.addSuccessor, requiresTask:true, scope:this, text:a.addSuccessor}, {handler:this.addPredecessor, requiresTask:true, scope:this, text:a.addPredecessor}]}}, {text:a.deleteDependency, requiresTask:true, menu:{plain:true, listeners:{beforeshow:this.populateDependencyMenu, mouseover:this.onDependencyMouseOver, mouseleave:this.onDependencyMouseOut, scope:this}}}];
}, buildMenuItems:function() {
  this.items = this.createMenuItems();
}, initComponent:function() {
  this.buildMenuItems();
  this.callParent(arguments);
}, init:function(b) {
  b.on('destroy', this.cleanUp, this);
  var a = b.getSchedulingView(), c = b.lockedGrid.getView();
  if (this.triggerEvent === 'itemcontextmenu') {
    c.on('itemcontextmenu', this.onItemContextMenu, this);
    a.on('itemcontextmenu', this.onItemContextMenu, this);
  }
  a.on('taskcontextmenu', this.onTaskContextMenu, this);
  a.on('containercontextmenu', this.onContainerContextMenu, this);
  c.on('containercontextmenu', this.onContainerContextMenu, this);
  this.grid = b;
}, populateDependencyMenu:function(f) {
  var d = this.grid, b = d.getTaskStore(), e = this.rec.getAllDependencies(), a = d.dependencyStore;
  f.removeAll();
  if (e.length === 0) {
    return false;
  }
  var c = this.rec.getId() || this.rec.internalId;
  Ext.each(e, function(i) {
    var h = i.getSourceId(), g = b.getById(h == c ? i.getTargetId() : h);
    if (g) {
      f.add({depId:i.internalId, text:Ext.util.Format.ellipsis(g.getName(), 30), scope:this, handler:function(k) {
        var j;
        a.each(function(l) {
          if (l.internalId == k.depId) {
            j = l;
            return false;
          }
        });
        a.remove(j);
      }});
    }
  }, this);
}, onDependencyMouseOver:function(d, a, b) {
  if (a) {
    var c = this.grid.getSchedulingView();
    if (this.lastHighlightedItem) {
      c.unhighlightDependency(this.lastHighlightedItem.depId);
    }
    this.lastHighlightedItem = a;
    c.highlightDependency(a.depId);
  }
}, onDependencyMouseOut:function(b, a) {
  if (this.lastHighlightedItem) {
    this.grid.getSchedulingView().unhighlightDependency(this.lastHighlightedItem.depId);
  }
}, cleanUp:function() {
  this.destroy();
}, onTaskContextMenu:function(b, a, c) {
  this.activateMenu(a, c);
}, onItemContextMenu:function(b, a, d, c, f) {
  this.activateMenu(a, f);
}, onContainerContextMenu:function(a, b) {
  this.activateMenu(null, b);
}, activateMenu:function(c, b) {
  if (this.grid.isReadOnly()) {
    return;
  }
  b.stopEvent();
  this.rec = c;
  var a = this.query('[requiresTask]');
  Ext.each(a, function(d) {
    d.setDisabled(!c);
  });
  this.showAt(b.getXY());
}, copyTask:function(c) {
  var b = this.grid.getTaskStore().model;
  var a = new b({leaf:true});
  a.setPercentDone(0);
  a.setName(this.texts.newTaskText);
  a.set(a.startDateField, c && c.getStartDate() || null);
  a.set(a.endDateField, c && c.getEndDate() || null);
  a.set(a.durationField, c && c.getDuration() || null);
  a.set(a.durationUnitField, c && c.getDurationUnit() || 'd');
  return a;
}, addTaskAbove:function(a) {
  var b = this.rec;
  if (b) {
    b.addTaskAbove(a);
  } else {
    this.grid.taskStore.getRootNode().appendChild(a);
  }
}, addTaskBelow:function(a) {
  var b = this.rec;
  if (b) {
    b.addTaskBelow(a);
  } else {
    this.grid.taskStore.getRootNode().appendChild(a);
  }
}, deleteTask:function() {
  var a = this.grid.getSelectionModel().selected;
  this.grid.taskStore.remove(a.items);
}, editLeftLabel:function() {
  this.grid.getSchedulingView().editLeftLabel(this.rec);
}, editRightLabel:function() {
  this.grid.getSchedulingView().editRightLabel(this.rec);
}, addTaskAboveAction:function() {
  this.addTaskAbove(this.copyTask(this.rec));
}, addTaskBelowAction:function() {
  this.addTaskBelow(this.copyTask(this.rec));
}, addSubtask:function() {
  var a = this.rec;
  a.addSubtask(this.copyTask(a));
}, addSuccessor:function() {
  var a = this.rec;
  a.addSuccessor(this.copyTask(a));
}, addPredecessor:function() {
  var a = this.rec;
  a.addPredecessor(this.copyTask(a));
}, addMilestone:function() {
  var b = this.rec, a = this.copyTask(b);
  b.addTaskBelow(a);
  a.setStartEndDate(b.getEndDate(), b.getEndDate());
}});
Ext.define('Gnt.plugin.PdfExport', {extend:'Sch.plugin.PdfExport', getExportJsonHtml:function(d, g) {
  var b = this.scheduler.getSchedulingView(), c = b.dependencyView, a = c.painter.getDependencyTplData(b.dependencyStore.getRange()), e = c.lineTpl.apply(a), f = {dependencies:e, rowsAmount:d.rowsAmount, columnsAmountNormal:d.columnsAmountNormal, columnsAmountLocked:d.columnsAmountLocked, timeColumnWidth:d.timeColumnWidth, lockedGridWidth:d.lockedGridWidth, rowHeight:d.rowHeight};
  d.panelHTML = f;
  return this.callParent(arguments);
}, resizePanelHTML:function(e) {
  var f = this.callParent(arguments), b = f.select('.sch-dependencyview-ct').first(), d = e.k * e.rowsAmount * e.rowHeight, c = e.i * e.timeColumnWidth * (e.i === 1 ? e.columnsAmountLocked : e.columnsAmountNormal);
  b.dom.innerHTML = e.dependencies;
  b.applyStyles({top:-d + 'px', left:-c + 'px'});
  var a = f.select('.x-splitter').first();
  a.setHeight('100%');
  return f;
}});
Ext.define('Gnt.plugin.Printable', {extend:'Sch.plugin.Printable', getGridContent:function(c) {
  var f = this.callParent(arguments), d = c.getSchedulingView(), e = d.dependencyView, b = e.painter.getDependencyTplData(d.dependencyStore.getRange()), a;
  a = f.normalRows;
  f.normalRows = e.lineTpl.apply(b) + a;
  return f;
}});
Ext.define('Gnt.view.DependencyPainter', {extend:'Ext.util.Observable', requires:['Ext.util.Region'], constructor:function(a) {
  a = a || {};
  Ext.apply(this, a, {xOffset:8, yOffset:7, midRowOffset:6, arrowOffset:8});
}, getTaskBox:function(o) {
  var f = Sch.util.Date, h = o.getStartDate(), n = o.getEndDate(), c = this.ganttView.getStart(), b = this.ganttView.getEnd(), j = this.ganttView, a = j.getXYFromDate(f.max(h, c))[0], p = j.getXYFromDate(f.min(n, b))[0], i = this.taskStore.buffered, d, l = Ext.get(j.getEventNodeByRecord(o));
  if (!o.isVisible() || !h || !n || !f.intersectSpans(h, n, c, b)) {
    return null;
  }
  if (l || i) {
    var q = this.view.getXOffset(o), k, g, r = true;
    if (a > q) {
      a -= q;
    }
    p += q - 1;
    if (!o.isMilestone() && Ext.isIE) {
      if ((Ext.isIE7 || Ext.isIE6) && !Ext.isIEQuirks) {
        p += 5;
        a -= 2;
      } else {
        if ((Ext.isIE6 || Ext.isIE7 || Ext.isIE8) && Ext.isIEQuirks) {
          p += 1;
          a -= 2;
        }
      }
    }
    if (l) {
      d = l.getOffsetsTo(j.el);
      k = d[1] + j.el.getScroll().top;
      g = k + l.getHeight();
    } else {
      var e = j.store.first();
      var m = j.getNodes();
      if (o.isAbove(e)) {
        l = Ext.get(m[0]);
        d = l.getOffsetsTo(j.el);
        d[1] -= this.ganttView.rowHeight;
      } else {
        l = Ext.get(m[m.length - 1]);
        d = l.getOffsetsTo(j.el);
        d[1] += this.ganttView.rowHeight;
      }
      k = d[1] + j.el.getScroll().top;
      g = k + l.getHeight();
      r = false;
    }
    return {top:k, right:p, bottom:g, left:a, rendered:false};
  }
}, getRenderData:function(f) {
  var e = f.getSourceTask(), c = f.getTargetTask();
  if (!e || !c) {
    return null;
  }
  var a = this.getTaskBox(e);
  var d = this.getTaskBox(c);
  if (this.taskStore.buffered && a && !a.rendered && d && !d.rendered) {
    var g = this.ganttView.store.first();
    var b = this.ganttView.store.last();
    if (e.isAbove(g) && c.isAbove(g) || b.isAbove(e) && b.isAbove(c)) {
      return null;
    }
  }
  return {fromBox:a, toBox:d};
}, getDependencyTplData:function(q) {
  var n = this, j = n.taskStore;
  if (!Ext.isArray(q)) {
    q = [q];
  }
  if (q.length === 0 || j.getCount() <= 0) {
    return;
  }
  var c = [], b = Gnt.model.Dependency.Type, o = n.ganttView, p, k, g, m, h, a;
  for (var f = 0, d = q.length; f < d; f++) {
    a = q[f];
    var e = this.getRenderData(a);
    if (e) {
      m = e.fromBox;
      h = e.toBox;
      if (m && h) {
        switch(a.getType()) {
          case b.StartToEnd:
            p = n.getStartToEndCoordinates(m, h);
            break;
          case b.StartToStart:
            p = n.getStartToStartCoordinates(m, h);
            break;
          case b.EndToStart:
            p = n.getEndToStartCoordinates(m, h);
            break;
          case b.EndToEnd:
            p = n.getEndToEndCoordinates(m, h);
            break;
          default:
            throw 'Invalid dependency type: ' + a.getType();
        }
        if (p) {
          c.push({lineCoordinates:p, id:a.internalId, cls:a.getCls()});
        }
      }
    }
  }
  return c;
}, getStartToStartCoordinates:function(e, d, c, i) {
  var b = e.left, g = e.top - 1 + (e.bottom - e.top) / 2, a = d.left, f = d.top - 1 + (d.bottom - d.top) / 2, h = e.top < d.top ? f - this.yOffset - this.midRowOffset : f + this.yOffset + this.midRowOffset, j = this.xOffset + this.arrowOffset;
  if (b > a + this.xOffset) {
    j += b - a;
  }
  return [{x1:b, y1:g, x2:b - j, y2:g}, {x1:b - j, y1:g, x2:b - j, y2:f}, {x1:b - j, y1:f, x2:a - this.arrowOffset, y2:f}];
}, getStartToEndCoordinates:function(f, e) {
  var c = f.left, i = f.top - 1 + (f.bottom - f.top) / 2, a = e.right, g = e.top - 1 + (e.bottom - e.top) / 2, j = f.top < e.top ? g - this.yOffset - this.midRowOffset : g + this.yOffset + this.midRowOffset, h, b;
  if (a > c + this.xOffset - this.arrowOffset || Math.abs(a - c) < 2 * (this.xOffset + this.arrowOffset)) {
    b = c - this.xOffset - this.arrowOffset;
    var d = a + this.xOffset + this.arrowOffset;
    h = [{x1:c, y1:i, x2:b, y2:i}, {x1:b, y1:i, x2:b, y2:j}, {x1:b, y1:j, x2:d, y2:j}, {x1:d, y1:j, x2:d, y2:g}, {x1:d, y1:g, x2:a + this.arrowOffset, y2:g}];
  } else {
    b = c - this.xOffset - this.arrowOffset;
    h = [{x1:c, y1:i, x2:b, y2:i}, {x1:b, y1:i, x2:b, y2:g}, {x1:b, y1:g, x2:a + this.arrowOffset, y2:g}];
  }
  return h;
}, getEndToStartCoordinates:function(f, e) {
  var c = f.right, i = f.top - 1 + (f.bottom - f.top) / 2, a = e.left, g = e.top - 1 + (e.bottom - e.top) / 2, j = f.top < e.top ? g - this.yOffset - this.midRowOffset : g + this.yOffset + this.midRowOffset, h, b;
  if (a >= c - 6 && g > i) {
    b = Math.max(c - 6, a) + this.xOffset;
    g = e.top;
    h = [{x1:c, y1:i, x2:b, y2:i}, {x1:b, y1:i, x2:b, y2:g - this.arrowOffset}];
  } else {
    b = c + this.xOffset + this.arrowOffset;
    var d = a - this.xOffset - this.arrowOffset;
    if (g > i || a < c + 2 * this.arrowOffset) {
      h = [{x1:c, y1:i, x2:b, y2:i}, {x1:b, y1:i, x2:b, y2:j}, {x1:b, y1:j, x2:d, y2:j}, {x1:d, y1:j, x2:d, y2:g}, {x1:d, y1:g, x2:a - this.arrowOffset, y2:g}];
    } else {
      h = [{x1:c, y1:i, x2:d, y2:i}, {x1:d, y1:i, x2:d, y2:g}, {x1:d, y1:g, x2:a - this.arrowOffset, y2:g}];
    }
  }
  return h;
}, getEndToEndCoordinates:function(a, c) {
  var d = a.right, f = a.top - 1 + (a.bottom - a.top) / 2, b = c.right + this.arrowOffset, e = c.top - 1 + (c.bottom - c.top) / 2, g = b + this.xOffset + this.arrowOffset;
  if (d > b + this.xOffset) {
    g += d - b;
  }
  return [{x1:d, y1:f, x2:g, y2:f}, {x1:g, y1:f, x2:g, y2:e}, {x1:g, y1:e, x2:b, y2:e}];
}});
Ext.define('Gnt.view.Dependency', {extend:'Ext.util.Observable', requires:['Gnt.feature.DependencyDragDrop', 'Gnt.view.DependencyPainter'], containerEl:null, ganttView:null, painter:null, taskStore:null, store:null, dnd:null, lineTpl:null, enableDependencyDragDrop:true, renderAllDepsBuffered:false, dependencyCls:'sch-dependency', selectedCls:'sch-dependency-selected', constructor:function(a) {
  this.callParent(arguments);
  var b = this.ganttView;
  b.on({refresh:this.renderAllDependenciesBuffered, scope:this});
  this.bindTaskStore(b.getTaskStore());
  this.bindDependencyStore(a.store);
  if (!this.lineTpl) {
    this.lineTpl = Ext.create('Ext.XTemplate', '\x3ctpl for\x3d"."\x3e' + Ext.String.format('\x3ctpl for\x3d"lineCoordinates"\x3e\x3cdiv class\x3d"{0} sch-dep-{parent.id} {0}-line {parent.cls}-line " style\x3d"left:{[Math.min(values.x1, values.x2)]}px;top:{[Math.min(values.y1, values.y2)]}px;width:{[Math.abs(values.x1-values.x2)' + (Ext.isBorderBox ? '+2' : '') + ']}px;height:{[Math.abs(values.y1-values.y2)' + (Ext.isBorderBox ? '+2' : '') + ']}px"\x3e\x3c/div\x3e\x3c/tpl\x3e\x3cdiv style\x3d"left:{[values.lineCoordinates[values.lineCoordinates.length - 1].x2]}px;top:{[values.lineCoordinates[values.lineCoordinates.length - 1].y2]}px" class\x3d"{0}-arrow-ct {0} sch-dep-{id} {cls}-arrow-ct"\x3e\x3cimg src\x3d"' + 
    Ext.BLANK_IMAGE_URL + '" class\x3d"{0}-arrow {0}-arrow-{[this.getArrowDirection(values.lineCoordinates)]} {cls}-arrow" /\x3e\x3c/div\x3e', this.dependencyCls) + '\x3c/tpl\x3e', {compiled:true, disableFormats:true, getArrowDirection:function(d) {
      var c = d[d.length - 1];
      if (c.x1 === c.x2) {
        return 'down';
      } else {
        if (c.x1 > c.x2) {
          return 'left';
        } else {
          return 'right';
        }
      }
    }});
  }
  this.painter = Ext.create('Gnt.view.DependencyPainter', Ext.apply({rowHeight:b.rowHeight, taskStore:this.taskStore, view:b}, a));
  this.addEvents('beforednd', 'dndstart', 'drop', 'afterdnd', 'beforecascade', 'cascade', 'dependencydblclick');
  if (this.enableDependencyDragDrop) {
    this.dnd = Ext.create('Gnt.feature.DependencyDragDrop', {ganttView:this.ganttView});
    this.dnd.on('drop', this.onDependencyDrop, this);
    this.relayEvents(this.dnd, ['beforednd', 'dndstart', 'afterdnd', 'drop']);
  }
  this.containerEl = this.containerEl.createChild({cls:'sch-dependencyview-ct'});
  this.ganttView.mon(this.containerEl, 'dblclick', this.onDependencyDblClick, this, {delegate:'.' + this.dependencyCls});
  if (b.rendered) {
    this.renderAllDependenciesBuffered();
  }
}, bindDependencyStore:function(a) {
  a.on({datachanged:this.renderAllDependenciesBuffered, load:this.renderAllDependenciesBuffered, add:this.onDependencyAdd, update:this.onDependencyUpdate, remove:this.onDependencyDelete, scope:this});
  this.store = a;
}, unBindDependencyStore:function() {
  this.store.un({datachanged:this.renderAllDependenciesBuffered, load:this.renderAllDependenciesBuffered, add:this.onDependencyAdd, update:this.onDependencyUpdate, remove:this.onDependencyDelete, scope:this});
}, bindTaskStore:function(a) {
  var b = this.ganttView;
  if (b.animate) {
    b.on({afterexpand:this.renderAllDependenciesBuffered, aftercollapse:this.renderAllDependenciesBuffered, scope:this});
  } else {
    a.on({expand:this.renderAllDependenciesBuffered, collapse:this.renderAllDependenciesBuffered, scope:this});
  }
  a.on({cascade:this.onTaskStoreCascade, 'root-fill-start':this.onRootFillStart, remove:this.renderAllDependenciesBuffered, insert:this.renderAllDependenciesBuffered, append:this.renderAllDependenciesBuffered, move:this.renderAllDependenciesBuffered, update:this.onTaskUpdated, scope:this});
  this.taskStore = a;
}, onTaskStoreCascade:function(a, b) {
  if (b && b.nbrAffected > 0) {
    this.renderAllDependenciesBuffered();
  }
}, unBindTaskStore:function(a) {
  a = a || this.taskStore;
  var b = this.ganttView;
  if (!a) {
    return;
  }
  if (b.animate) {
    b.un({afterexpand:this.renderAllDependenciesBuffered, aftercollapse:this.renderAllDependenciesBuffered, scope:this});
  } else {
    a.un({expand:this.renderAllDependenciesBuffered, collapse:this.renderAllDependenciesBuffered, scope:this});
  }
  a.un({cascade:this.onTaskStoreCascade, remove:this.renderAllDependenciesBuffered, insert:this.renderAllDependenciesBuffered, append:this.renderAllDependenciesBuffered, move:this.renderAllDependenciesBuffered, 'root-fill-start':this.onRootFillStart, scope:this});
  a.un({update:this.onTaskUpdated, scope:this});
}, onRootFillStart:function() {
  var a = this.taskStore;
  this.unBindTaskStore(a);
  this.taskStore.on('root-fill-end', function() {
    this.bindTaskStore(a);
  }, this, {single:true});
}, onDependencyDblClick:function(b, a) {
  var c = this.getRecordForDependencyEl(a);
  this.fireEvent('dependencydblclick', this, c, b, a);
}, highlightDependency:function(a) {
  if (!(a instanceof Ext.data.Model)) {
    a = this.getDependencyRecordByInternalId(a);
  }
  this.getElementsForDependency(a).addCls(this.selectedCls);
}, unhighlightDependency:function(a) {
  if (!(a instanceof Ext.data.Model)) {
    a = this.getDependencyRecordByInternalId(a);
  }
  this.getElementsForDependency(a).removeCls(this.selectedCls);
}, getElementsForDependency:function(a) {
  var b = a instanceof Ext.data.Model ? a.internalId : a;
  return this.containerEl.select('.sch-dep-' + b);
}, depRe:new RegExp('sch-dep-([^\\s]+)'), getDependencyRecordByInternalId:function(d) {
  var c, b, a;
  for (b = 0, a = this.store.getCount(); b < a; b++) {
    c = this.store.getAt(b);
    if (c.internalId == d) {
      return c;
    }
  }
  return null;
}, getRecordForDependencyEl:function(c) {
  var a = c.className.match(this.depRe), d = null;
  if (a && a[1]) {
    var b = a[1];
    d = this.getDependencyRecordByInternalId(b);
  }
  return d;
}, renderAllDependenciesBuffered:function() {
  var a = this;
  this.containerEl.update('');
  setTimeout(function() {
    if (!a.ganttView.isDestroyed) {
      a.renderAllDependencies();
    }
  }, 0);
}, renderAllDependencies:function() {
  if (!this.containerEl.dom) {
    return;
  }
  this.getDependencyElements().remove();
  this.renderDependencies(this.store.data.items);
}, getDependencyElements:function() {
  return this.containerEl.select('.' + this.dependencyCls);
}, renderDependencies:function(b) {
  if (b) {
    var a = this.painter.getDependencyTplData(b);
    this.lineTpl[Ext.isIE ? 'insertFirst' : 'append'](this.containerEl, a);
  }
}, renderTaskDependencies:function(d) {
  var c = [];
  if (!Ext.isArray(d)) {
    d = [d];
  }
  for (var a = 0, b = d.length; a < b; a++) {
    c = c.concat(d[a].getAllDependencies());
  }
  this.renderDependencies(c);
}, onDependencyUpdate:function(b, a) {
  this.removeDependencyElements(a, false);
  this.renderDependencies(a);
}, onDependencyAdd:function(a, b) {
  this.renderDependencies(b);
}, removeDependencyElements:function(a, b) {
  if (b !== false) {
    this.getElementsForDependency(a).fadeOut({remove:true});
  } else {
    this.getElementsForDependency(a).remove();
  }
}, onDependencyDelete:function(b, a) {
  this.removeDependencyElements(a);
}, dimEventDependencies:function(a) {
  this.containerEl.select(this.depRe + a).setOpacity(0.2);
}, clearSelectedDependencies:function() {
  this.containerEl.select('.' + this.selectedCls).removeCls(this.selectedCls);
}, onTaskUpdated:function(c, b, a) {
  if (!this.taskStore.cascading && a != Ext.data.Model.COMMIT && (!b.previous || b.startDateField in b.previous || b.endDateField in b.previous)) {
    this.updateDependencies(b);
  }
}, updateDependencies:function(b) {
  if (!Ext.isArray(b)) {
    b = [b];
  }
  var a = this;
  Ext.each(b, function(c) {
    Ext.each(c.getAllDependencies(), function(d) {
      a.removeDependencyElements(d, false);
    });
  });
  this.renderTaskDependencies(b);
}, onDependencyDrop:function(e, c, b, d) {
  var a = new this.store.model({fromTask:c, toTask:b, type:d});
  if (this.store.isValidDependency(a)) {
    this.store.add(a);
  }
}, destroy:function() {
  if (this.dnd) {
    this.dnd.destroy();
  }
  this.unBindTaskStore();
  this.unBindDependencyStore();
}});
Ext.define('Gnt.view.Gantt', {extend:'Sch.view.TimelineTreeView', alias:['widget.ganttview'], requires:['Gnt.view.Dependency', 'Gnt.model.Task', 'Gnt.template.Task', 'Gnt.template.ParentTask', 'Gnt.template.Milestone', 'Gnt.feature.TaskDragDrop', 'Gnt.feature.ProgressBarResize', 'Gnt.feature.TaskResize', 'Sch.view.Horizontal'], uses:['Gnt.feature.LabelEditor', 'Gnt.feature.DragCreator'], _cmpCls:'sch-ganttview', rowHeight:22, barMargin:4, scheduledEventName:'task', trackOver:false, toggleOnDblClick:false, 
milestoneOffset:8, parentTaskOffset:6, eventSelector:'.sch-gantt-item', eventWrapSelector:'.sch-event-wrap', progressBarResizer:null, taskResizer:null, taskDragDrop:null, dragCreator:null, dependencyView:null, resizeConfig:null, dragDropConfig:null, constructor:function(a) {
  var b = a.panel._top;
  Ext.apply(this, {taskStore:b.taskStore, dependencyStore:b.dependencyStore, enableDependencyDragDrop:b.enableDependencyDragDrop, enableTaskDragDrop:b.enableTaskDragDrop, enableProgressBarResize:b.enableProgressBarResize, enableDragCreation:b.enableDragCreation, allowParentTaskMove:b.allowParentTaskMove, toggleParentTasksOnClick:b.toggleParentTasksOnClick, resizeHandles:b.resizeHandles, enableBaseline:b.baselineVisible || b.enableBaseline, leftLabelField:b.leftLabelField, rightLabelField:b.rightLabelField, 
  eventTemplate:b.eventTemplate, parentEventTemplate:b.parentEventTemplate, milestoneTemplate:b.milestoneTemplate, resizeConfig:b.resizeConfig, dragDropConfig:b.dragDropConfig});
  this.addEvents('taskclick', 'taskdblclick', 'taskcontextmenu', 'beforetaskresize', 'taskresizestart', 'partialtaskresize', 'aftertaskresize', 'beforeprogressbarresize', 'progressbarresizestart', 'afterprogressbarresize', 'beforetaskdrag', 'taskdragstart', 'taskdrop', 'aftertaskdrop', 'labeledit_beforestartedit', 'labeledit_beforecomplete', 'labeledit_complete', 'beforedependencydrag', 'dependencydragstart', 'dependencydrop', 'afterdependencydragdrop');
  this.callParent(arguments);
}, initComponent:function() {
  this.configureLabels();
  this.setupGanttEvents();
  this.callParent(arguments);
  this.setupTemplates();
}, getDependencyStore:function() {
  return this.dependencyStore;
}, configureFeatures:function() {
  if (this.enableProgressBarResize !== false) {
    this.progressBarResizer = Ext.create('Gnt.feature.ProgressBarResize', {gantt:this});
    this.on({beforeprogressbarresize:this.onBeforeTaskProgressBarResize, progressbarresizestart:this.onTaskProgressBarResizeStart, afterprogressbarresize:this.onTaskProgressBarResizeEnd, scope:this});
  }
  if (this.resizeHandles !== 'none') {
    this.taskResizer = Ext.create('Gnt.feature.TaskResize', Ext.apply({gantt:this, validatorFn:this.resizeValidatorFn || Ext.emptyFn, validatorFnScope:this.validatorFnScope || this}, this.resizeConfig || {}));
    this.on({beforedragcreate:this.onBeforeDragCreate, beforetaskresize:this.onBeforeTaskResize, taskresizestart:this.onTaskResizeStart, aftertaskresize:this.onTaskResizeEnd, scope:this});
  }
  if (this.enableTaskDragDrop) {
    this.taskDragDrop = Ext.create('Gnt.feature.TaskDragDrop', Ext.apply({gantt:this, validatorFn:this.dndValidatorFn || Ext.emptyFn, validatorFnScope:this.validatorFnScope || this}, this.dragDropConfig));
    this.on({beforetaskdrag:this.onBeforeTaskDrag, taskdragstart:this.onDragDropStart, aftertaskdrop:this.onDragDropEnd, scope:this});
  }
  if (this.enableDragCreation) {
    this.dragCreator = Ext.create('Gnt.feature.DragCreator', Ext.apply({ganttView:this}));
  }
}, prepareData:function(d, a, b) {
  var c = this, e = {}, f = c.gridDataColumns || c.getGridColumns();
  e[f[0].id] = this.renderTask(b);
  return e;
}, renderTask:function(k) {
  var l = k.getStartDate(), n = this.timeAxis, s = Sch.util.Date, b = {}, A = '', h = n.getStart(), g = n.getEnd(), C = k.isMilestone(), x = k.isLeaf(), o, q, u;
  if (l) {
    var v = k.getEndDate() || Sch.util.Date.add(l, Sch.util.Date.DAY, 1), e = Sch.util.Date.intersectSpans(l, v, h, g);
    if (e) {
      u = v > g;
      q = s.betweenLesser(l, h, g);
      var z = Math.floor(this.getXYFromDate(q ? l : h)[0]), d = Math.floor(this.getXYFromDate(u ? g : v)[0]), f = C ? 0 : d - z;
      if (!C && !x) {
        if (u) {
          f += this.parentTaskOffset;
        } else {
          f += 2 * this.parentTaskOffset;
        }
      }
      b = {id:k.internalId, leftOffset:C ? d || z : z, width:Math.max(1, f), percentDone:Math.min(k.getPercentDone() || 0, 100)};
      o = this.eventRenderer.call(this.eventRendererScope || this, k, b, k.store) || {};
      var t = this.leftLabelField, j = this.rightLabelField, B;
      if (t) {
        b.leftLabel = t.renderer.call(t.scope || this, k.data[t.dataIndex], k);
      }
      if (j) {
        b.rightLabel = j.renderer.call(j.scope || this, k.data[j.dataIndex], k);
      }
      Ext.apply(b, o);
      if (C) {
        B = this.milestoneTemplate;
      } else {
        b.width = Math.max(1, f);
        var p = '';
        if (u) {
          p = ' sch-event-endsoutside ';
        }
        if (!q) {
          p = ' sch-event-startsoutside ';
        }
        b.ctcls = (b.ctcls || '') + p;
        B = this[x ? 'eventTemplate' : 'parentEventTemplate'];
      }
      var i = ' sch-event-resizable-' + k.getResizable();
      if (k.dirty) {
        i += ' sch-dirty ';
      }
      if (k.isDraggable() === false) {
        i += ' sch-event-fixed ';
      }
      b.cls = (b.cls || '') + (k.getCls() || '') + i;
      A += B.apply(b);
    }
  }
  if (this.enableBaseline) {
    var r = k.getBaselineStartDate(), a = k.getBaselineEndDate();
    if (!o) {
      o = this.eventRenderer.call(this, k, b, k.store) || {};
    }
    if (r && a) {
      u = a > g;
      q = s.betweenLesser(r, h, g);
      var c = k.isBaselineMilestone(), w = c ? this.baselineMilestoneTemplate : k.isLeaf() ? this.baselineTaskTemplate : this.baselineParentTaskTemplate, m = Math.floor(this.getXYFromDate(q ? r : h)[0]), y = c ? 0 : Math.floor(this.getXYFromDate(u ? g : a)[0]) - m;
      A += w.apply({basecls:o.basecls || '', id:k.internalId + '-base', percentDone:k.getBaselinePercentDone(), leftOffset:m, width:Math.max(1, y)});
    }
  }
  return A;
}, setupTemplates:function() {
  var a = {leftLabel:!!this.leftLabelField, rightLabel:!!this.rightLabelField, prefix:this.eventPrefix, enableDependencyDragDrop:this.enableDependencyDragDrop !== false, resizeHandles:this.resizeHandles, enableProgressBarResize:this.enableProgressBarResize};
  if (!this.eventTemplate) {
    a.baseCls = 'sch-gantt-task {ctcls}';
    this.eventTemplate = Ext.create('Gnt.template.Task', a);
  }
  if (!this.parentEventTemplate) {
    a.baseCls = 'sch-gantt-parent-task {ctcls}';
    this.parentEventTemplate = Ext.create('Gnt.template.ParentTask', a);
  }
  if (!this.milestoneTemplate) {
    a.baseCls = 'sch-gantt-milestone {ctcls}';
    this.milestoneTemplate = Ext.create('Gnt.template.Milestone', a);
  }
  if (this.enableBaseline) {
    a = {prefix:this.eventPrefix};
    if (!this.baselineTaskTemplate) {
      a.baseCls = 'sch-gantt-task-baseline sch-gantt-baseline-item {basecls}';
      this.baselineTaskTemplate = Ext.create('Gnt.template.Task', a);
    }
    if (!this.baselineParentTaskTemplate) {
      a.baseCls = 'sch-gantt-parenttask-baseline sch-gantt-baseline-item {basecls}';
      this.baselineParentTaskTemplate = Ext.create('Gnt.template.ParentTask', a);
    }
    if (!this.baselineMilestoneTemplate) {
      a.baseCls = 'sch-gantt-milestone-baseline sch-gantt-baseline-item {basecls}';
      this.baselineMilestoneTemplate = Ext.create('Gnt.template.Milestone', a);
    }
  }
}, getDependencyView:function() {
  return this.dependencyView;
}, getTaskStore:function() {
  return this.taskStore;
}, initDependencies:function() {
  if (this.dependencyStore) {
    var b = this, a = Ext.create('Gnt.view.Dependency', {containerEl:b.el, ganttView:b, enableDependencyDragDrop:b.enableDependencyDragDrop, store:b.dependencyStore});
    a.on({beforednd:b.onBeforeDependencyDrag, dndstart:b.onDependencyDragStart, drop:b.onDependencyDrop, afterdnd:b.onAfterDependencyDragDrop, beforecascade:b.onBeforeCascade, cascade:b.onCascade, scope:b});
    b.dependencyView = a;
    b.relayEvents(a, ['dependencydblclick']);
  }
}, setupGanttEvents:function() {
  var a = this.getSelectionModel();
  if (this.toggleParentTasksOnClick) {
    this.on({taskclick:function(c, b) {
      if (!b.isLeaf()) {
        this.toggle(b);
      }
    }, scope:this});
  }
}, configureLabels:function() {
  var c = {renderer:function(d) {
    return d;
  }, dataIndex:undefined};
  var b = this.leftLabelField;
  if (b) {
    if (Ext.isString(b)) {
      b = this.leftLabelField = {dataIndex:b};
    }
    Ext.applyIf(b, c);
    if (b.editor) {
      b.editor = Ext.create('Gnt.feature.LabelEditor', this, {alignment:'r-r', delegate:'.sch-gantt-label-left', labelPosition:'left', field:b.editor, dataIndex:b.dataIndex});
    }
  }
  var a = this.rightLabelField;
  if (a) {
    if (Ext.isString(a)) {
      a = this.rightLabelField = {dataIndex:a};
    }
    Ext.applyIf(a, c);
    if (a.editor) {
      a.editor = Ext.create('Gnt.feature.LabelEditor', this, {alignment:'l-l', delegate:'.sch-gantt-label-right', labelPosition:'right', field:a.editor, dataIndex:a.dataIndex});
    }
  }
  this.on('labeledit_beforestartedit', this.onBeforeLabelEdit, this);
}, onBeforeTaskDrag:function(b, a) {
  return !this.readOnly && (this.allowParentTaskMove || a.isLeaf());
}, onDragDropStart:function() {
  if (this.tip) {
    this.tip.disable();
  }
}, onDragDropEnd:function() {
  if (this.tip) {
    this.tip.enable();
  }
}, onTaskProgressBarResizeStart:function() {
  if (this.tip) {
    this.tip.hide();
    this.tip.disable();
  }
}, onTaskProgressBarResizeEnd:function() {
  if (this.tip) {
    this.tip.enable();
  }
}, onTaskResizeStart:function() {
  if (this.tip) {
    this.tip.hide();
    this.tip.disable();
  }
}, onTaskResizeEnd:function() {
  if (this.tip) {
    this.tip.enable();
  }
}, onBeforeDragCreate:function() {
  return !this.readOnly;
}, onBeforeTaskResize:function(a, b) {
  return !this.readOnly && b.getSchedulingMode() !== 'EffortDriven';
}, onBeforeTaskProgressBarResize:function() {
  return !this.readOnly;
}, onBeforeLabelEdit:function() {
  return !this.readOnly;
}, onBeforeEdit:function() {
  return !this.readOnly;
}, beforeRender:function() {
  this.addCls('sch-ganttview');
  this.callParent(arguments);
}, afterRender:function() {
  this.initDependencies();
  this.callParent(arguments);
  this.el.on('mousemove', this.configureFeatures, this, {single:true});
}, resolveTaskRecord:function(a) {
  var b = this.findItemByChild(a);
  if (b) {
    return this.getRecord(this.findItemByChild(a));
  }
  return null;
}, resolveEventRecord:function(a) {
  return this.resolveTaskRecord(a);
}, highlightTask:function(b, a) {
  if (!(b instanceof Ext.data.Model)) {
    b = this.taskStore.getById(b);
  }
  if (b) {
    var d = this.getNode(b);
    if (d) {
      Ext.fly(d).addCls('sch-gantt-task-highlighted');
    }
    var c = b.getId() || b.internalId;
    if (a !== false) {
      this.dependencyStore.each(function(e) {
        if (e.getSourceId() == c) {
          this.highlightDependency(e.id);
          this.highlightTask(e.getTargetId(), a);
        }
      }, this);
    }
  }
}, unhighlightTask:function(a, c) {
  if (!(a instanceof Ext.data.Model)) {
    a = this.taskStore.getById(a);
  }
  if (a) {
    Ext.fly(this.getNode(a)).removeCls('sch-gantt-task-highlighted');
    var b = a.getId() || a.internalId;
    if (c !== false) {
      this.dependencyStore.each(function(d) {
        if (d.getSourceId() == b) {
          this.unhighlightDependency(d.id);
          this.unhighlightTask(d.getTargetId(), c);
        }
      }, this);
    }
  }
}, clearSelectedTasksAndDependencies:function() {
  this.getSelectionModel().deselectAll();
  this.getDependencyView().clearSelectedDependencies();
  this.el.select('tr.sch-gantt-task-highlighted').removeCls('sch-gantt-task-highlighted');
}, getCriticalPaths:function() {
  return this.taskStore.getCriticalPaths();
}, highlightCriticalPaths:function() {
  this.clearSelectedTasksAndDependencies();
  var g = this.getCriticalPaths(), c = this.getDependencyView(), f = this.dependencyStore, e, d, b, a;
  Ext.each(g, function(h) {
    for (d = 0, b = h.length; d < b; d++) {
      e = h[d];
      this.highlightTask(e, false);
      if (d < b - 1) {
        a = f.getAt(f.findBy(function(i) {
          return i.getTargetId() === (e.getId() || e.internalId) && i.getSourceId() === (h[d + 1].getId() || h[d + 1].internalId);
        }));
        c.highlightDependency(a);
      }
    }
  }, this);
  this.addCls('sch-gantt-critical-chain');
  this.getSelectionModel().setLocked(true);
}, unhighlightCriticalPaths:function() {
  this.el.removeCls('sch-gantt-critical-chain');
  this.getSelectionModel().setLocked(false);
  this.clearSelectedTasksAndDependencies();
}, getXOffset:function(a) {
  var b = 0;
  if (a.isMilestone()) {
    b = this.milestoneOffset;
  } else {
    if (!a.isLeaf()) {
      b = this.parentTaskOffset;
    }
  }
  return b;
}, onDestroy:function() {
  if (this.dependencyView) {
    this.dependencyView.destroy();
  }
  this.callParent(arguments);
}, highlightDependency:function(a) {
  this.dependencyView.highlightDependency(a);
}, unhighlightDependency:function(a) {
  this.dependencyView.unhighlightDependency(a);
}, onBeforeDependencyDrag:function(b, a) {
  return this.fireEvent('beforedependencydrag', this, a);
}, onDependencyDragStart:function(a) {
  this.fireEvent('dependencydragstart', this);
  if (this.tip) {
    this.tip.disable();
  }
}, onDependencyDrop:function(b, c, a, d) {
  this.fireEvent('dependencydrop', this, this.taskStore.getNodeById(c), this.taskStore.getById(a), d);
}, onAfterDependencyDragDrop:function() {
  this.fireEvent('afterdependencydragdrop', this);
  if (this.tip) {
    this.tip.enable();
  }
}, onBeforeCascade:function(a, b) {
  this.taskStore.un('update', this.onUpdate, this);
}, onCascade:function(a, b) {
  this.taskStore.on('update', this.onUpdate, this);
}, onUpdate:function(c, a, b, d) {
  if (d && d.length === 1 && d[0] === 'expanded') {
    return;
  }
  this.callParent(arguments);
}, getLeftEditor:function() {
  return this.leftLabelField.editor;
}, getRightEditor:function() {
  return this.rightLabelField.editor;
}, editLeftLabel:function(a) {
  var b = this.leftLabelField && this.getLeftEditor();
  if (b) {
    b.edit(a);
  }
}, editRightLabel:function(a) {
  var b = this.rightLabelField && this.getRightEditor();
  if (b) {
    b.edit(a);
  }
}, getOuterElementFromEventRecord:function(a) {
  var b = this.callParent([a]);
  return b && b.up(this.eventWrapSelector) || null;
}, getDependenciesForTask:function(a) {
  console.warn('`ganttPanel.getDependenciesForTask()` is deprecated, use `task.getAllDependencies()` instead');
  return a.getAllDependencies();
}, setNewTemplate:function() {
  var b = this, a = b.headerCt.getColumnsForTpl(true);
  b.tpl = b.getTableChunker().getTableTpl({columns:[a[0]], features:b.features});
}});
Ext.define('Gnt.panel.Gantt', {extend:'Sch.panel.TimelineTreePanel', alias:['widget.ganttpanel'], alternateClassName:['Sch.gantt.GanttPanel'], requires:['Gnt.view.Gantt', 'Gnt.model.Dependency', 'Gnt.data.ResourceStore', 'Gnt.data.AssignmentStore', 'Gnt.feature.WorkingTime', 'Gnt.data.Calendar', 'Gnt.data.TaskStore', 'Gnt.data.DependencyStore'], uses:['Sch.plugin.CurrentTimeLine'], lockedXType:'treepanel', normalXType:'ganttpanel', viewType:'ganttview', syncRowHeight:false, layout:'border', lightWeight:true, 
leftLabelField:null, rightLabelField:null, highlightWeekends:true, weekendsAreWorkdays:false, skipWeekendsDuringDragDrop:true, enableTaskDragDrop:true, enableDependencyDragDrop:true, enableProgressBarResize:false, toggleParentTasksOnClick:true, addRowOnTab:true, recalculateParents:true, cascadeChanges:false, showTodayLine:false, enableBaseline:false, baselineVisible:false, enableAnimations:false, workingTimePlugin:null, todayLinePlugin:null, allowParentTaskMove:false, enableDragCreation:true, eventRenderer:Ext.emptyFn, 
eventRendererScope:null, eventTemplate:null, parentEventTemplate:null, milestoneTemplate:null, autoHeight:null, calendar:null, taskStore:null, dependencyStore:null, resourceStore:null, assignmentStore:null, columnLines:false, dndValidatorFn:Ext.emptyFn, resizeHandles:'both', resizeValidatorFn:Ext.emptyFn, resizeConfig:null, dragDropConfig:null, initStores:function() {
  var a = Ext.StoreMgr.lookup(this.taskStore || this.store);
  if (!a) {
    Ext.Error.raise('You must specify a taskStore config');
  }
  if (!(a instanceof Gnt.data.TaskStore)) {
    Ext.Error.raise('A `taskStore` should be an instance of `Gnt.data.TaskStore` (or of a subclass)');
  }
  Ext.apply(this, {store:a, taskStore:a});
  var d = this.calendar = a.calendar;
  if (this.needToTranslateOption('weekendsAreWorkdays')) {
    d.setWeekendsAreWorkDays(this.weekendsAreWorkdays);
  }
  if (a.dependencyStore) {
    this.dependencyStore = a.dependencyStore;
  } else {
    if (this.dependencyStore) {
      this.dependencyStore = Ext.StoreMgr.lookup(this.dependencyStore);
      a.setDependencyStore(this.dependencyStore);
    } else {
      this.dependencyStore = Ext.create('Gnt.data.DependencyStore');
      a.setDependencyStore(this.dependencyStore);
    }
  }
  if (!(this.dependencyStore instanceof Gnt.data.DependencyStore)) {
    Ext.Error.raise('The Gantt dependency store should be a Gnt.data.DependencyStore, or a subclass thereof.');
  }
  var b;
  if (a.getResourceStore()) {
    b = a.getResourceStore();
  } else {
    if (this.resourceStore) {
      b = Ext.StoreMgr.lookup(this.resourceStore);
    } else {
      b = Ext.create('Gnt.data.ResourceStore');
    }
  }
  if (!(b instanceof Gnt.data.ResourceStore)) {
    Ext.Error.raise('A `ResourceStore` should be an instance of `Gnt.data.ResourceStore` (or of a subclass)');
  }
  var c;
  if (a.getAssignmentStore()) {
    c = a.getAssignmentStore();
  } else {
    if (this.assignmentStore) {
      c = Ext.StoreMgr.lookup(this.assignmentStore);
    } else {
      c = Ext.create('Gnt.data.AssignmentStore');
    }
  }
  if (!(c instanceof Gnt.data.AssignmentStore)) {
    Ext.Error.raise('An `assignmentStore` should be an instance of `Gnt.data.AssignmentStore` (or of a subclass)');
  }
  if (this.lockable) {
    this.bindAssignmentStore(c, true);
    this.bindResourceStore(b, true);
  }
}, initComponent:function() {
  if (Ext.isBoolean(this.showBaseline)) {
    this.enableBaseline = this.baselineVisible = this.showBaseline;
    this.showBaseline = Gnt.panel.Gantt.prototype.showBaseline;
  }
  this.autoHeight = false;
  this.initStores();
  if (this.needToTranslateOption('cascadeChanges')) {
    this.setCascadeChanges(this.cascadeChanges);
  }
  if (this.needToTranslateOption('recalculateParents')) {
    this.setRecalculateParents(this.recalculateParents);
  }
  if (this.needToTranslateOption('skipWeekendsDuringDragDrop')) {
    this.setSkipWeekendsDuringDragDrop(this.skipWeekendsDuringDragDrop);
  }
  if (this.lockable) {
    this.lockedGridConfig = this.lockedGridConfig || {};
    Ext.apply(this.lockedGridConfig, {columnLines:true, rowLines:true});
    this.configureFunctionality();
  }
  this.callParent(arguments);
  var a = this.getSchedulingView();
  this.relayEvents(a, ['taskclick', 'taskdblclick', 'taskcontextmenu', 'beforetaskresize', 'taskresizestart', 'partialtaskresize', 'aftertaskresize', 'beforeprogressbarresize', 'progressbarresizestart', 'afterprogressbarresize', 'beforetaskdrag', 'taskdragstart', 'taskdrop', 'aftertaskdrop', 'labeledit_beforestartedit', 'labeledit_beforecomplete', 'labeledit_complete', 'beforedependencydrag', 'dependencydragstart', 'dependencydrop', 'afterdependencydragdrop', 'dependencydblclick']);
  if (this.lockable) {
    this.bodyCls = (this.bodyCls || '') + ' sch-ganttpanel-container-body';
    a.store.calendar = this.calendar;
    this.fixSelectionModel();
    if (this.addRowOnTab) {
      var b = this.lockedGrid, c = this.getSelectionModel();
      c.onEditorTab = Ext.Function.createInterceptor(c.onEditorTab, function(h, i) {
        var g = b.view, f = h.getActiveRecord(), j = h.getActiveColumn(), d = g.getPosition(f, j);
        if (d.column === b.headerCt.getColumnCount() - 1 && d.row === b.view.store.getCount() - 1) {
          f.addTaskBelow({leaf:true});
        }
      });
    }
  }
}, needToTranslateOption:function(a) {
  return this.hasOwnProperty(a) || this.self.prototype.hasOwnProperty(a) && this.self != Gnt.panel.Gantt;
}, fixSelectionModel:function() {
  var a = this.getSelectionModel();
  var d = this.lockedGrid.getView();
  var c = this.normalGrid.getView();
  d.__lockedType = 'locked';
  c.__lockedType = 'normal';
  var e = d.onAdd;
  d.onAdd = function() {
    a.__preventUpdateOf = 'normal';
    e.apply(this, arguments);
    delete a.__preventUpdateOf;
  };
  var b = c.onAdd;
  c.onAdd = function() {
    a.__preventUpdateOf = 'locked';
    b.apply(this, arguments);
    delete a.__preventUpdateOf;
  };
  var f = d.store;
  d.bindStore(null);
  c.bindStore(null);
  d.bindStore(f);
  c.bindStore(f);
  Ext.apply(a, {onSelectChange:function(m, j, q, g) {
    var o = this, r = o.views, k = r.length, p = o.store, h = p.indexOf(m), n = j ? 'select' : 'deselect', l = 0;
    if ((q || o.fireEvent('before' + n, o, m, h)) !== false && g() !== false) {
      for (; l < k; l++) {
        if (!this.__preventUpdateOf || r[l].__lockedType != this.__preventUpdateOf) {
          if (j) {
            r[l].onRowSelect(h, q);
          } else {
            r[l].onRowDeselect(h, q);
          }
        }
      }
      if (!q) {
        o.fireEvent(n, o, m, h);
      }
    }
  }});
}, getDependencyView:function() {
  return this.getSchedulingView().getDependencyView();
}, disableWeekendHighlighting:function(a) {
  this.workingTimePlugin.setDisabled(a);
}, resolveTaskRecord:function(a) {
  return this.getSchedulingView().resolveTaskRecord(a);
}, fitTimeColumns:function() {
  this.getSchedulingView().fitColumns();
}, getResourceStore:function() {
  return this.getTaskStore().getResourceStore();
}, getAssignmentStore:function() {
  return this.getTaskStore().getAssignmentStore();
}, getTaskStore:function() {
  return this.taskStore;
}, getDependencyStore:function() {
  return this.dependencyStore;
}, onDragDropStart:function() {
  if (this.tip) {
    this.tip.hide();
    this.tip.disable();
  }
}, onDragDropEnd:function() {
  if (this.tip) {
    this.tip.enable();
  }
}, configureFunctionality:function() {
  var a = this.plugins = [].concat(this.plugins || []);
  if (this.highlightWeekends) {
    this.workingTimePlugin = Ext.create('Gnt.feature.WorkingTime', {calendar:this.calendar});
    a.push(this.workingTimePlugin);
  }
  if (this.showTodayLine) {
    this.todayLinePlugin = new Sch.plugin.CurrentTimeLine();
    a.push(this.todayLinePlugin);
  }
}, beforeRender:function() {
  if (this.lockable) {
    var a = ' sch-ganttpanel sch-horizontal ';
    if (this.highlightWeekends) {
      a += ' sch-ganttpanel-highlightweekends ';
    }
    this.addCls(a);
    if (this.baselineVisible) {
      this.showBaseline();
    }
  }
  this.callParent(arguments);
}, afterRender:function() {
  this.callParent(arguments);
  if (this.lockable) {
    this.applyPatches();
  }
}, showBaseline:function() {
  this.addCls('sch-ganttpanel-showbaseline');
}, hideBaseline:function() {
  this.removeCls('sch-ganttpanel-showbaseline');
}, toggleBaseline:function() {
  this.toggleCls('sch-ganttpanel-showbaseline');
}, zoomToFit:function() {
  var a = this.taskStore.getTotalTimeSpan();
  if (a.start && a.end && a.start < a.end) {
    this.setTimeSpan(a.start, a.end);
    this.fitTimeColumns();
  }
}, getCascadeChanges:function() {
  return this.taskStore.cascadeChanges;
}, setCascadeChanges:function(a) {
  this.taskStore.cascadeChanges = a;
}, getRecalculateParents:function() {
  return this.taskStore.recalculateParents;
}, setRecalculateParents:function(a) {
  this.taskStore.recalculateParents = a;
}, setSkipWeekendsDuringDragDrop:function(a) {
  this.taskStore.skipWeekendsDuringDragDrop = this.skipWeekendsDuringDragDrop = a;
}, getSkipWeekendsDuringDragDrop:function() {
  return this.taskStore.skipWeekendsDuringDragDrop;
}, applyPatches:function() {
  if (Ext.tree.plugin && Ext.tree.plugin.TreeViewDragDrop) {
    var a;
    Ext.each(this.lockedGrid.getView().plugins, function(b) {
      if (b instanceof Ext.tree.plugin.TreeViewDragDrop) {
        a = b;
        return false;
      }
    });
    if (!a || !a.dropZone) {
      return;
    }
    a.dropZone.handleNodeDrop = function(e, l, f) {
      var n = this, o = n.view, g = l.parentNode, p = o.getStore(), r = [], b, d, k, c, j, m, q, h;
      if (e.copy) {
        b = e.records;
        e.records = [];
        for (d = 0, k = b.length; d < k; d++) {
          e.records.push(Ext.apply({}, b[d].data));
        }
      }
      n.cancelExpand();
      if (f == 'before') {
        c = g.insertBefore;
        j = [null, l];
        l = g;
      } else {
        if (f == 'after') {
          if (l.nextSibling) {
            c = g.insertBefore;
            j = [null, l.nextSibling];
          } else {
            c = g.appendChild;
            j = [null];
          }
          l = g;
        } else {
          if (!l.isExpanded()) {
            m = true;
          }
          c = l.appendChild;
          j = [null];
        }
      }
      q = function() {
        var i;
        for (d = 0, k = e.records.length; d < k; d++) {
          j[0] = e.records[d];
          j[0].isMove = true;
          i = c.apply(l, j);
          delete j[0].isMove;
          if (Ext.enableFx && n.dropHighlight) {
            r.push(o.getNode(i));
          }
        }
        if (Ext.enableFx && n.dropHighlight) {
          Ext.Array.forEach(r, function(s) {
            if (s) {
              Ext.fly(s.firstChild ? s.firstChild : s).highlight(n.dropHighlightColor);
            }
          });
        }
      };
      if (m) {
        l.expand(false, q);
      } else {
        q();
      }
    };
  }
}, bindResourceStore:function(c, a) {
  var b = this;
  if (!a && b.resourceStore) {
    if (c !== b.resourceStore && b.resourceStore.autoDestroy) {
      b.resourceStore.destroy();
    } else {
      b.mun(b.resourceStore, {scope:b, datachanged:b.onResourceStoreDataChanged});
    }
    if (!c) {
      b.resourceStore = null;
    }
  }
  if (c) {
    c = Ext.data.StoreManager.lookup(c);
    b.mon(c, {scope:b, datachanged:b.onResourceStoreDataChanged});
    this.taskStore.setResourceStore(c);
  }
  b.resourceStore = c;
  if (c && !a) {
    b.getView().refreshKeepingScroll();
  }
}, bindAssignmentStore:function(c, a) {
  var b = this;
  if (!a && b.assignmentStore) {
    if (c !== b.assignmentStore && b.assignmentStore.autoDestroy) {
      b.assignmentStore.destroy();
    } else {
      b.mun(b.assignmentStore, {scope:b, datachanged:b.onAssignmentStoreDataChanged});
    }
    if (!c) {
      b.assignmentStore = null;
    }
  }
  if (c) {
    c = Ext.data.StoreManager.lookup(c);
    b.mon(c, {scope:b, datachanged:b.onAssignmentStoreDataChanged});
    this.taskStore.setAssignmentStore(c);
  }
  b.assignmentStore = c;
  if (c && !a) {
    b.getView().refreshKeepingScroll();
  }
}, onResourceStoreDataChanged:function() {
  this.getView().refreshKeepingScroll();
}, onAssignmentStoreDataChanged:function() {
  this.getView().refreshKeepingScroll();
}});
Ext.define('Gnt.column.EndDate', {extend:'Ext.grid.column.Date', alias:'widget.enddatecolumn', requires:['Ext.grid.CellEditor'], text:'Finish', width:100, align:'left', task:null, editorFormat:null, constructor:function(a) {
  a = a || {};
  var b = a.field || a.editor;
  delete a.field;
  delete a.editor;
  this.field = Ext.create('Ext.grid.CellEditor', {ignoreNoChange:true, field:b || {xtype:'datefield', format:a.editorFormat || a.format || this.format || Ext.Date.defaultFormat}, listeners:{beforecomplete:this.onBeforeEditComplete, scope:this}});
  this.callParent([a]);
  this.scope = this;
  this.renderer = a.renderer || this.rendererFunc;
  this.editorFormat = this.editorFormat || this.format;
}, beforeRender:function() {
  if (!this.dataIndex) {
    var a = this.up('treepanel');
    this.dataIndex = a.store.model.prototype.endDateField;
  }
  this.callParent(arguments);
}, rendererFunc:function(b, c, a) {
  if (!b) {
    return;
  }
  if (!a.isEditable(this.dataIndex)) {
    c.tdCls = (c.tdCls || '') + ' sch-column-readonly';
  }
  if (a.getEndDate() > a.getStartDate() && b - Ext.Date.clearTime(b, true) === 0 && !Ext.Date.formatContainsHourInfo(this.format)) {
    b = Sch.util.Date.add(b, Sch.util.Date.MILLI, -1);
  }
  return Ext.util.Format.date(b, this.format);
}, afterRender:function() {
  this.callParent(arguments);
  var a = this.ownerCt.up('treepanel');
  a.on({edit:this.onTreeEdit, beforeedit:this.onBeforeTreeEdit, scope:this});
}, onBeforeTreeEdit:function(b) {
  if (b.column == this) {
    b.doNotUpdateRecord = true;
    var a = this.task = b.record;
    if (!a.isEditable(this.dataIndex)) {
      return false;
    }
    if (a.getEndDate() > a.getStartDate()) {
      var c = b.value;
      if (c - Ext.Date.clearTime(c, true) === 0 && !Ext.Date.formatContainsHourInfo(this.editorFormat)) {
        c = Sch.util.Date.add(c, Sch.util.Date.MILLI, -1);
      }
      b.value = Ext.Date.parse(Ext.Date.format(c, this.editorFormat), this.editorFormat);
    }
  }
}, onBeforeEditComplete:function(b, c, a) {
  if (this.task && c < this.task.getStartDate()) {
    return false;
  }
}, onTreeEdit:function(c, b) {
  if (b.column === this && b.value) {
    var a = b.record;
    var d = b.value;
    if (!Ext.Date.formatContainsHourInfo(this.editorFormat)) {
      d = a.getCalendar().getCalendarDay(d).getAvailabilityEndFor(d) || d;
    }
    b.record.setEndDate(d, false);
  }
}});
Ext.define('Gnt.column.PercentDone', {extend:'Ext.grid.column.Number', alias:'widget.percentdonecolumn', text:'% Done', width:50, format:'0', align:'center', field:{xtype:'numberfield', minValue:0, maxValue:100}, beforeRender:function() {
  if (!this.dataIndex) {
    var a = this.up('treepanel');
    this.dataIndex = a.store.model.prototype.percentDoneField;
  }
  this.callParent(arguments);
}});
Ext.define('Gnt.column.StartDate', {extend:'Ext.grid.column.Date', alias:'widget.startdatecolumn', text:'Start', width:100, align:'left', editorFormat:null, constructor:function(a) {
  a = a || {};
  var b = a.field || a.editor;
  delete a.field;
  delete a.editor;
  this.field = Ext.create('Ext.grid.CellEditor', {ignoreNoChange:true, field:b || {xtype:'datefield', format:a.editorFormat || a.format || this.format || Ext.Date.defaultFormat}});
  this.callParent([a]);
  this.editorFormat = this.editorFormat || this.format;
}, beforeRender:function() {
  var a = this.up('treepanel');
  if (!this.dataIndex) {
    this.dataIndex = a.store.model.prototype.startDateField;
  }
  this.callParent(arguments);
  a.on({edit:this.onTreeEdit, beforeedit:this.onBeforeTreeEdit, scope:this});
}, onBeforeTreeEdit:function(c) {
  if (c.column == this) {
    c.doNotUpdateRecord = true;
    var b = c.record;
    if (!b.isEditable(this.dataIndex)) {
      return false;
    }
    var a = c.value;
    if (a) {
      c.value = Ext.Date.parse(Ext.Date.format(a, this.editorFormat), this.editorFormat);
    }
  }
}, onTreeEdit:function(c, b) {
  var a = b.record;
  var d = b.value;
  if (b.column == this && d && d - b.originalValue !== 0) {
    a.setStartDate(d, true, a.getTaskStore().skipWeekendsDuringDragDrop);
  }
}});
Ext.define('Gnt.column.WBS', {extend:'Ext.grid.column.Column', alias:'widget.wbscolumn', text:'#', width:40, align:'left', dataIndex:'index', renderer:function(f, g, b, h, d, e) {
  var a = e.getRootNode(), c = [];
  while (b !== a) {
    c.push(b.data.index + 1);
    b = b.parentNode;
  }
  return c.reverse().join('.');
}});
Ext.define('Gnt.column.SchedulingMode', {extend:'Ext.grid.column.Column', alias:'widget.schedulingmodecolumn', text:'Mode', width:100, align:'left', data:[['FixedDuration', 'Fixed duration'], ['EffortDriven', 'Effort driven'], ['DynamicAssignment', 'Dynamic assignment'], ['Manual', 'Manual'], ['Normal', 'Normal']], modeNames:null, pickerAlign:'tl-bl?', matchFieldWidth:true, constructor:function(a) {
  a = a || {};
  var c = a.field || a.editor;
  a.field = c || {xtype:'combo', editable:false, store:this.data, pickerAlign:this.pickerAlign, matchFieldWidth:this.matchFieldWidth};
  var b = this.modeNames = {};
  Ext.Array.each(this.data, function(d) {
    b[d[0]] = d[1];
  });
  this.scope = this;
  this.callParent([a]);
}, beforeRender:function() {
  if (!this.dataIndex) {
    var a = this.up('treepanel');
    this.dataIndex = a.store.model.prototype.schedulingModeField;
  }
  this.callParent(arguments);
}, renderer:function(a) {
  return this.modeNames[a];
}, afterRender:function() {
  this.callParent(arguments);
  this.tree = this.ownerCt.up('treepanel');
  this.tree.on('edit', this.onTreeEdit, this);
}, onTreeEdit:function(b, a) {
  if (a.column == this) {
    a.record.setSchedulingMode(a.value);
  }
}});
Ext.define('Gnt.column.ResourceAssignment', {extend:'Ext.grid.column.Column', alias:'widget.resourceassignmentcolumn', text:'Assigned Resources', tdCls:'sch-assignment-cell', showUnits:true, assignmentStore:null, initComponent:function() {
  this.formatString = '{0}' + (this.showUnits ? ' [{1}%]' : '');
  this.callParent(arguments);
}, afterRender:function() {
  this.scope = this;
  this.callParent(arguments);
  this.assignmentStore = this.getOwnerHeaderCt().up('ganttpanel').assignmentStore;
}, renderer:function(k, o, b, h, n, m, j) {
  var g = [], e = this.assignmentStore, a, f = b.getInternalId();
  if (e.resourceStore.getCount() > 0) {
    for (var d = 0, c = e.getCount(); d < c; d++) {
      a = e.getAt(d);
      if (a.getTaskId() === f) {
        g.push(Ext.String.format(this.formatString, a.getResourceName(), a.getUnits()));
      }
    }
    return g.join(', ');
  }
}});
Ext.define('Gnt.column.ResourceName', {extend:'Ext.grid.column.Column', alias:'widget.resourcenamecolumn', text:'Resource Name', dataIndex:'ResourceName', flex:1, align:'left'});
Ext.define('Gnt.column.AssignmentUnits', {extend:'Ext.grid.column.Number', alias:'widget.assignmentunitscolumn', text:'Units', dataIndex:'Units', format:'0 %', align:'left'});
Ext.define('Gnt.widget.AssignmentGrid', {requires:['Gnt.model.Resource', 'Gnt.model.Assignment', 'Gnt.column.ResourceName', 'Gnt.column.AssignmentUnits', 'Ext.grid.plugin.CellEditing'], extend:'Ext.grid.Panel', alias:'widget.assignmentgrid', readOnly:false, cls:'gnt-assignmentgrid', defaultAssignedUnits:100, sorter:{sorterFn:function(b, a) {
  var d = b.getUnits(), c = a.getUnits();
  if (!d && !c || d && c) {
    return b.get('ResourceName') < a.get('ResourceName') ? -1 : 1;
  }
  return d ? -1 : 1;
}}, constructor:function(a) {
  this.store = Ext.create('Ext.data.JsonStore', {model:Ext.define('Gnt.model.AssignmentEditing', {extend:'Gnt.model.Assignment', fields:['ResourceName']})});
  this.columns = this.buildColumns();
  if (!this.readOnly) {
    this.plugins = this.buildPlugins();
  }
  Ext.apply(this, {selModel:{selType:'checkboxmodel', mode:'MULTI', checkOnly:true, selectByPosition:function(b) {
    var c = this.store.getAt(b.row);
    this.select(c, true);
  }}});
  this.callParent(arguments);
}, initComponent:function() {
  this.loadResources();
  this.resourceStore.on({datachanged:this.loadResources, scope:this});
  this.getSelectionModel().on('select', this.onSelect, this, {delay:50});
  this.callParent(arguments);
}, onSelect:function(b, a) {
  if ((!this.cellEditing || !this.cellEditing.getActiveEditor()) && !a.getUnits()) {
    a.setUnits(this.defaultAssignedUnits);
  }
}, loadResources:function() {
  var d = [], b = this.resourceStore, e;
  for (var c = 0, a = b.getCount(); c < a; c++) {
    e = b.getAt(c).getId();
    d.push({ResourceId:e, ResourceName:b.getById(e).getName()});
  }
  this.store.loadData(d);
}, buildPlugins:function() {
  var a = this.cellEditing = Ext.create('Ext.grid.plugin.CellEditing', {clicksToEdit:1});
  a.on('edit', this.onEditingDone, this);
  return [a];
}, onEditingDone:function(a, b) {
  if (b.value) {
    this.getSelectionModel().select(b.record, true);
  } else {
    this.getSelectionModel().deselect(b.record);
    b.record.reject();
  }
}, buildColumns:function() {
  return [{xtype:'resourcenamecolumn', resourceStore:this.resourceStore}, {xtype:'assignmentunitscolumn', assignmentStore:this.assignmentStore, editor:{xtype:'numberfield', minValue:0, step:10}}];
}, loadTaskAssignments:function(d) {
  var b = this.store, f = this.getSelectionModel();
  f.deselectAll(true);
  for (var c = 0, a = b.getCount(); c < a; c++) {
    b.getAt(c).data.Units = '';
    b.getAt(c).data.Id = null;
  }
  b.suspendEvents();
  var e = this.assignmentStore.queryBy(function(g) {
    return g.getTaskId() === d;
  });
  e.each(function(h) {
    var g = b.findRecord('ResourceId', h.getResourceId(), 0, false, true, true);
    if (g) {
      g.setUnits(h.getUnits());
      g.set(g.idProperty, h.getId());
      f.select(g, true, true);
    }
  });
  b.resumeEvents();
  b.sort(this.sorter);
  this.getView().refresh();
}});
Ext.define('Gnt.widget.AssignmentField', {extend:'Ext.form.field.Picker', alias:'widget.assignmenteditor', requires:['Gnt.widget.AssignmentGrid'], matchFieldWidth:false, editable:false, cancelText:'Cancel', closeText:'Save and Close', assignmentStore:null, resourceStore:null, gridConfig:null, createPicker:function() {
  var a = new Gnt.widget.AssignmentGrid(Ext.apply({ownerCt:this.ownerCt, renderTo:document.body, frame:true, floating:true, hidden:true, height:200, width:300, resourceStore:this.resourceStore, assignmentStore:this.assignmentStore, fbar:this.buildButtons()}, this.gridConfig || {}));
  return a;
}, buildButtons:function() {
  return ['-\x3e', {text:this.closeText, handler:function() {
    Ext.Function.defer(this.onGridClose, Ext.isIE && !Ext.isIE9 ? 60 : 30, this);
  }, scope:this}, {text:this.cancelText, handler:this.collapse, scope:this}];
}, onExpand:function() {
  var a = this.resourceStore, b = this.picker;
  b.loadTaskAssignments(this.taskId);
}, onGridClose:function() {
  var b = this.picker.getSelectionModel(), a = b.selected;
  this.fireEvent('select', this, a);
  this.collapse();
}, collapseIf:function(b) {
  var a = this;
  if (this.picker && !b.getTarget('.x-editor') && !b.getTarget('.x-menu-item')) {
    a.callParent(arguments);
  }
}});
Ext.define('Gnt.widget.AssignmentCellEditor', {extend:'Ext.grid.CellEditor', requires:['Gnt.model.Assignment', 'Gnt.widget.AssignmentField'], assignmentStore:null, resourceStore:null, taskId:null, fieldConfig:null, allowBlur:false, constructor:function(a) {
  a = a || {};
  var b = a.fieldConfig || {};
  this.field = Ext.create('Gnt.widget.AssignmentField', Ext.apply(b, {assignmentStore:a.assignmentStore, resourceStore:a.resourceStore}));
  this.field.on({select:this.onSelect, collapse:this.cancelEdit, scope:this});
  this.callParent(arguments);
}, startEdit:function(c, d, b) {
  this.parentEl = null;
  var a = c.child('div').dom.innerHTML;
  this.taskId = this.field.taskId = b.record.getInternalId();
  this.callParent([c, a === '\x26nbsp;' ? '' : a]);
  this.field.expand();
}, onSelect:function(g, c) {
  var a = this.assignmentStore, f = this.taskId;
  var e = {};
  var d = [];
  c.each(function(i) {
    var h = i.getUnits();
    if (h > 0) {
      var k = i.getId();
      if (k) {
        e[k] = true;
        a.getById(k).setUnits(h);
      } else {
        var j = Ext.create(a.model);
        j.setTaskId(f);
        j.setResourceId(i.getResourceId());
        j.setUnits(h);
        e[j.internalId] = true;
        d.push(j);
      }
    }
  });
  var b = [];
  a.each(function(h) {
    if (h.getTaskId() === f && !e[h.getId() || h.internalId]) {
      b.push(h);
    }
  });
  a.remove(b);
  a.add(d);
  this.completeEdit();
}});
Ext.define('Gnt.widget.DurationField', {extend:'Ext.form.field.Number', alias:'widget.durationfield', alternateClassName:'Gnt.column.duration.Field', disableKeyFilter:true, minValue:0, durationRegex:/(-?\d+(?:[.,]\d+)?)\s*(\w+)?/i, unitsRegex:{MILLI:/^ms$|^mil/i, SECOND:/^s$|^sec/i, MINUTE:/^m$|^min/i, HOUR:/^h$|^hr$|^hour/i, DAY:/^d$|^day/i, WEEK:/^w$|^wk|^week/i, MONTH:/^mo|^mnt/i, QUARTER:/^q$|^quar|^qrt/i, YEAR:/^y$|^yr|^year/i}, durationUnit:'h', useAbbreviation:false, rawToValue:function(b) {
  var a = this.parseDuration(b);
  if (!a) {
    return null;
  }
  this.durationUnit = a.unit;
  return a.value != null ? a.value : null;
}, valueToRaw:function(a) {
  if (Ext.isNumber(a)) {
    return parseFloat(Ext.Number.toFixed(a, this.decimalPrecision)) + ' ' + Sch.util.Date[this.useAbbreviation ? 'getShortNameOfUnit' : 'getReadableNameOfUnit'](this.durationUnit, a > 1);
  }
  return '';
}, parseDuration:function(c) {
  if (c == null || !this.durationRegex.test(c)) {
    return null;
  }
  var a = this.durationRegex.exec(c);
  var e = this.parseValue(a[1]);
  var b = a[2];
  var d;
  if (b) {
    Ext.iterate(this.unitsRegex, function(f, g) {
      if (g.test(b)) {
        d = Sch.util.Date.getUnitByName(f);
        return false;
      }
    });
  }
  return {value:e, unit:d || this.durationUnit};
}, getDurationValue:function() {
  return this.parseDuration(this.getRawValue());
}, getErrors:function(b) {
  var a = this.parseDuration(b);
  if (!a) {
    return ['Invalid number format'];
  }
  return this.callParent([a.value]);
}});
Ext.define('Gnt.widget.DurationEditor', {extend:'Ext.grid.CellEditor', alias:['widget.durationeditor', 'widget.durationcolumneditor'], alternateClassName:'Gnt.column.duration.Editor', context:null, decimalPrecision:2, getDurationUnitMethod:'getDurationUnit', setDurationMethod:'setDuration', useAbbreviation:false, constructor:function(a) {
  a = a || {};
  Ext.apply(this, a);
  a.field = a.field || Ext.create('Gnt.widget.DurationField', {useAbbreviation:this.useAbbreviation, decimalPrecision:this.decimalPrecision});
  this.callParent([a]);
}, startEdit:function(c, b, a) {
  this.context = a;
  this.field.durationUnit = a.record[this.getDurationUnitMethod]();
  return this.callParent(arguments);
}, completeEdit:function(a) {
  var d = this, g = d.field, e;
  if (!d.editing) {
    return;
  }
  if (g.assertValue) {
    g.assertValue();
  }
  e = d.getValue();
  if (!g.isValid()) {
    if (d.revertInvalid !== false) {
      d.cancelEdit(a);
    }
    return;
  }
  if (String(e) === String(d.startValue) && d.ignoreNoChange) {
    d.hideEdit(a);
    return;
  }
  if (d.fireEvent('beforecomplete', d, e, d.startValue) !== false) {
    e = d.getValue();
    if (d.updateEl && d.boundEl) {
      d.boundEl.update(e);
    }
    d.hideEdit(a);
    var c = this.context;
    var b = c.record;
    var f = this.field.getDurationValue();
    b[this.setDurationMethod](f.value, f.unit);
    d.fireEvent('complete', d, e, d.startValue);
  }
}});
Ext.define('Gnt.column.Duration', {extend:'Ext.grid.column.Column', alias:'widget.durationcolumn', requires:['Gnt.widget.DurationField', 'Gnt.widget.DurationEditor'], text:'Duration', width:80, align:'left', decimalPrecision:2, getDurationUnitMethod:'getDurationUnit', setDurationMethod:'setDuration', useAbbreviation:false, constructor:function(a) {
  a = a || {};
  Ext.apply(this, a);
  a.editor = a.editor || Ext.create('Gnt.widget.DurationEditor', {useAbbreviation:this.useAbbreviation, decimalPrecision:this.decimalPrecision, getDurationUnitMethod:this.getDurationUnitMethod, setDurationMethod:this.setDurationMethod});
  if (!a.editor.isFormField) {
    a.editor = Ext.ComponentManager.create(a.editor, 'durationcolumneditor');
  }
  this.scope = this;
  this.callParent([a]);
  this.mon(this.editor, 'beforestartedit', this.onBeforeStartEdit, this);
}, beforeRender:function() {
  if (!this.dataIndex) {
    var a = this.up('treepanel');
    this.dataIndex = a.store.model.prototype.durationField;
  }
  this.callParent(arguments);
}, onBeforeStartEdit:function(b) {
  var a = b.context.record;
  return a.isEditable(this.dataIndex);
}, renderer:function(b, c, a) {
  if (!Ext.isNumber(b)) {
    return '';
  }
  if (!a.isEditable(this.dataIndex)) {
    c.tdCls = (c.tdCls || '') + ' sch-column-readonly';
  }
  b = parseFloat(Ext.Number.toFixed(b, this.decimalPrecision));
  return b + ' ' + Sch.util.Date[this.useAbbreviation ? 'getShortNameOfUnit' : 'getReadableNameOfUnit'](a[this.getDurationUnitMethod](), b > 1);
}});
Ext.define('Gnt.column.Effort', {extend:'Gnt.column.Duration', alias:'widget.effortcolumn', header:'Effort', getDurationUnitMethod:'getEffortUnit', setDurationMethod:'setEffort', beforeRender:function() {
  if (!this.dataIndex) {
    var a = this.up('treepanel');
    this.dataIndex = a.store.model.prototype.effortField;
  }
  this.callParent(arguments);
}});
Ext.define('Gnt.widget.Calendar', {extend:'Ext.picker.Date', alias:'widget.ganttcalendar', requires:['Gnt.data.Calendar', 'Sch.util.Date'], calendar:null, startDate:null, endDate:null, disabledDatesText:'Holiday', initComponent:function() {
  if (!this.calendar) {
    Ext.Error.raise('Required attribute "calendar" missing during initialization of `Gnt.widget.Calendar`');
  }
  if (!this.startDate) {
    Ext.Error.raise('Required attribute "startDate" missing during initialization of `Gnt.widget.Calendar`');
  }
  if (!this.endDate) {
    this.endDate = Sch.util.Date.add(this.startDate, Sch.util.Date.MONTH, 1);
  }
  this.setCalendar(this.calendar);
  this.minDate = this.value = this.startDate;
  this.injectDates();
  this.callParent(arguments);
}, injectDates:function() {
  var a = this;
  var b = a.disabledDates = [];
  Ext.each(a.calendar.getHolidaysRanges(a.startDate, a.endDate), function(c) {
    c.forEachDate(function(d) {
      b.push(Ext.Date.format(d, a.format));
    });
  });
  a.setDisabledDates(b);
}, setCalendar:function(b) {
  var a = {update:this.injectDates, remove:this.injectDates, add:this.injectDates, load:this.injectDates, clear:this.injectDates, scope:this};
  if (this.calendar) {
    this.calendar.un(a);
  }
  this.calendar = b;
  b.on(a);
}});
Ext.define('Gnt.widget.calendar.DayGrid', {extend:'Ext.grid.Panel', title:'Day overrides', height:180, nameText:'Name', dateText:'Date', noNameText:'[Day override]', initComponent:function() {
  Ext.applyIf(this, {store:Ext.create('Gnt.data.Calendar', {proxy:'memory'}), plugins:[Ext.create('Ext.grid.plugin.CellEditing', {clicksToEdit:2})], columns:[{header:this.nameText, dataIndex:'Name', flex:1, editor:{allowBlank:false}}, {header:this.dateText, dataIndex:'Date', width:100, xtype:'datecolumn', editor:{xtype:'datefield'}}]});
  this.callParent(arguments);
}});
Ext.define('Gnt.widget.calendar.WeekGrid', {extend:'Ext.grid.Panel', requires:['Gnt.model.WeekAvailability'], title:'Week overrides', border:true, height:220, nameText:'Name', startDateText:'Start date', endDateText:'End date', initComponent:function() {
  Ext.applyIf(this, {store:Ext.create('Ext.data.Store', {model:'Gnt.model.WeekAvailability', proxy:'memory'})});
  Ext.applyIf(this, {columns:[{header:this.nameText, dataIndex:this.store.model.prototype.nameField, flex:1, editor:{allowBlank:false}}, {header:this.startDateText, dataIndex:this.store.model.prototype.startDateField, width:100, xtype:'datecolumn', editor:{xtype:'datefield'}}, {header:this.endDateText, dataIndex:this.store.model.prototype.endDateField, width:100, xtype:'datecolumn', editor:{xtype:'datefield'}}], plugins:[Ext.create('Ext.grid.plugin.CellEditing', {clicksToEdit:2})]});
  this.callParent(arguments);
}});
Ext.define('Gnt.widget.calendar.ResourceCalendarGrid', {extend:'Ext.grid.Panel', requires:['Gnt.data.Calendar', 'Sch.util.Date'], alias:'widget.resourcecalendargrid', resourceStore:null, calendarStore:null, initComponent:function() {
  var a = this;
  this.calendarStore = this.calendarStore || Ext.create('Ext.data.Store', {fields:['Id', 'Name']});
  Ext.apply(a, {store:a.resourceStore, columns:[{header:'Name', dataIndex:'Name', flex:1}, {header:'Calendar', dataIndex:'CalendarId', flex:1, renderer:function(f, h, b, e, d, c) {
    if (!f) {
      var g = b.getCalendar();
      f = g ? g.calendarId : '';
    }
    var i = a.calendarStore.getById(f);
    return i ? i.get('Name') : f;
  }, editor:{xtype:'combobox', store:a.calendarStore, queryMode:'local', displayField:'Name', valueField:'Id', editable:false, allowBlank:false}}], border:true, height:180, plugins:[Ext.create('Ext.grid.plugin.CellEditing', {clicksToEdit:2})]});
  this.calendarStore.loadData(this.getCalendarData());
  this.callParent(arguments);
}, getCalendarData:function() {
  var a = [];
  Ext.Array.each(Gnt.data.Calendar.getAllCalendars(), function(b) {
    a.push({Id:b.calendarId, Name:b.name || b.calendarId});
  });
  return a;
}});
Ext.define('Gnt.widget.calendar.DayAvailabilityGrid', {extend:'Ext.grid.Panel', requires:['Gnt.data.Calendar', 'Sch.util.Date'], alias:'widget.dayavailabilitygrid', height:160, calendarDay:null, startText:'Start', endText:'End', addText:'Add', removeText:'Remove', workingTimeText:'Working time', nonworkingTimeText:'Non-working time', getDayTypeRadioGroup:function() {
  return this.down('radiogroup[name\x3d"dayType"]');
}, initComponent:function() {
  Ext.applyIf(this, {store:Ext.create('Ext.data.Store', {fields:['startTime', 'endTime'], proxy:{type:'memory', reader:{type:'json'}}}), plugins:[Ext.create('Ext.grid.plugin.CellEditing', {clicksToEdit:2})], dockedItems:[{xtype:'radiogroup', dock:'top', name:'dayType', padding:'0 5px', margin:0, items:[{boxLabel:this.workingTimeText, name:'IsWorkingDay', inputValue:true}, {boxLabel:this.nonworkingTimeText, name:'IsWorkingDay', inputValue:false}], listeners:{change:this.onDayTypeChanged, scope:this}}], 
  tbar:this.buildToolbar(), columns:[{header:this.startText, xtype:'datecolumn', format:'g:i a', dataIndex:'startTime', flex:1, editor:{xtype:'timefield', allowBlank:false, initDate:'31/12/1899'}}, {header:this.endText, xtype:'datecolumn', format:'g:i a', dataIndex:'endTime', flex:1, editor:{allowBlank:false, xtype:'timefield', initDate:'31/12/1899'}}], listeners:{selectionchange:this.onAvailabilityGridSelectionChange, scope:this}});
  this.callParent(arguments);
}, buildToolbar:function() {
  this.addButton = new Ext.Button({text:this.addText, iconCls:'gnt-action-add', handler:this.addAvailability, scope:this});
  this.removeButton = new Ext.Button({text:this.removeText, iconCls:'gnt-action-remove', handler:this.removeAvailability, scope:this, disabled:true});
  return [this.addButton, this.removeButton];
}, onAvailabilityGridSelectionChange:function(a) {
  if (this.removeButton) {
    this.removeButton.setDisabled(!a || a.getSelection().length === 0);
  }
}, onDayTypeChanged:function(a) {
  var b = a.getValue();
  if (Ext.isArray(b.IsWorkingDay)) {
    return;
  }
  this.getView().setDisabled(!b.IsWorkingDay);
}, addAvailability:function() {
  var a = this.getStore(), b = a.count();
  if (b >= 5) {
    return;
  }
  a.add({startTime:new Date(0, 0, 0, 12, 0), endTime:new Date(0, 0, 0, 13, 0)});
  if (b + 1 >= 5 && this.addButton) {
    this.addButton.setDisabled(true);
  }
}, removeAvailability:function() {
  var b = this.getStore(), c = b.count(), d = this.getSelectionModel();
  if (!d || d.getSelection().length === 0) {
    return;
  }
  var a = d.getSelection()[0];
  b.remove(a);
  if (c < 5 && this.addButton) {
    this.addButton.setDisabled(false);
  }
}, editAvailability:function(a) {
  this.calendarDay = a;
  this.getDayTypeRadioGroup().setValue({IsWorkingDay:a.getIsWorkingDay()});
  var b = this.calendarDay.getAvailability();
  this.getStore().loadData(b);
}, isWorkingDay:function() {
  return this.getDayTypeRadioGroup().getValue().IsWorkingDay;
}, isValid:function() {
  var c = this.getDayTypeRadioGroup().getValue().IsWorkingDay, b = [];
  if (c) {
    try {
      b = this.getIntervals();
      this.calendarDay.verifyAvailability(b);
    } catch (a) {
      Ext.MessageBox.alert('Error', a);
      return false;
    }
  }
  return true;
}, getIntervals:function() {
  var a = [];
  this.getStore().each(function(b) {
    a.push({startTime:b.get('startTime'), endTime:b.get('endTime')});
  });
  return a;
}});
Ext.define('Gnt.widget.calendar.WeekEditor', {extend:'Ext.form.Panel', requires:['Ext.grid.*', 'Gnt.data.Calendar', 'Sch.util.Date'], alias:'widget.calendarweekeditor', layout:'anchor', defaults:{border:false, anchor:'100%'}, getDefaultWeekAvailabilityHandler:null, startDate:null, endDate:null, startHeaderText:'Start', endHeaderText:'End', defaultTimeText:'Default time', workingTimeText:'Working time', nonworkingTimeText:'Non-working time', addText:'Add', removeText:'Remove', weekAvailability:null, 
currentWeekDay:null, _weekDaysGrid:null, getWeekDaysGrid:function() {
  if (this._weekDaysGrid != null) {
    return this._weekDaysGrid;
  }
  var a = Ext.Date.dayNames;
  return this._weekDaysGrid = Ext.create('Ext.grid.Panel', {hideHeaders:true, height:160, columns:[{header:'', dataIndex:'name', flex:1}], store:Ext.create('Ext.data.JsonStore', {fields:['id', 'name'], idProperty:'id', data:[{id:1, name:a[1]}, {id:2, name:a[2]}, {id:3, name:a[3]}, {id:4, name:a[4]}, {id:5, name:a[5]}, {id:6, name:a[6]}, {id:0, name:a[0]}]}), listeners:{selectionchange:{fn:this.onWeekDaysListSelectionChange, scope:this}}});
}, _availabilityGrid:null, getAvailabilityGrid:function() {
  if (!this._availabilityGrid) {
    this._availabilityGrid = Ext.create('Ext.grid.Panel', {height:160, plugins:[Ext.create('Ext.grid.plugin.CellEditing', {clicksToEdit:2})], tbar:[{text:this.addText, action:'add', handler:this.addAvailability, scope:this, iconCls:'gnt-action-add'}, {text:this.removeText, iconCls:'gnt-action-remove', action:'remove', handler:this.removeAvailability, scope:this}], store:Ext.create('Ext.data.Store', {fields:['startTime', 'endTime'], proxy:{type:'memory', reader:{type:'json'}}}), columns:[{header:this.startHeaderText, 
    xtype:'datecolumn', format:'g:i a', dataIndex:'startTime', flex:1, editor:{xtype:'timefield', allowBlank:false, initDate:'31/12/1899'}}, {header:this.endHeaderText, xtype:'datecolumn', format:'g:i a', dataIndex:'endTime', flex:1, editor:{allowBlank:false, xtype:'timefield', initDate:'31/12/1899'}}], listeners:{selectionchange:this.onAvailabilityGridSelectionChange, scope:this}});
  }
  return this._availabilityGrid;
}, getDayTypeRadioGroup:function() {
  return this.down('radiogroup[name\x3d"dayType"]');
}, initComponent:function() {
  if (!this.getDefaultWeekAvailabilityHandler && !Ext.isFunction(this.getDefaultWeekAvailabilityHandler)) {
    Ext.Error.raise('Required attribute "getDefaultWeekAvailabilityHandler" is missed during initialization of `Gnt.widget.calendar.WeekEditor`');
  }
  this.items = [{xtype:'radiogroup', padding:'0 5px', name:'dayType', items:[{boxLabel:this.defaultTimeText, name:'IsWorkingDay', inputValue:0}, {boxLabel:this.workingTimeText, name:'IsWorkingDay', inputValue:1}, {boxLabel:this.nonworkingTimeText, name:'IsWorkingDay', inputValue:2}], listeners:{change:{fn:this.onDayTypeChanged, scope:this}}}, {layout:'column', padding:'0 0 5px 0', defaults:{border:false}, items:[{margin:'0 10px 0 5px', columnWidth:0.5, items:this.getWeekDaysGrid()}, {columnWidth:0.5, 
  margin:'0 5px 0 0', items:this.getAvailabilityGrid()}]}];
  this.callParent(arguments);
}, addAvailability:function() {
  var b = this.getAvailabilityGrid(), a = b.getStore(), c = a.count();
  if (c >= 5) {
    return;
  }
  a.add({startTime:new Date(0, 0, 0, 12, 0), endTime:new Date(0, 0, 0, 13, 0)});
  if (c + 1 >= 5) {
    b.down('button[action\x3d"add"]').setDisabled(true);
  }
}, removeAvailability:function() {
  var c = this.getAvailabilityGrid(), b = c.getStore(), d = b.count(), e = c.getSelectionModel();
  if (!e || e.getSelection().length === 0) {
    return;
  }
  var a = e.getSelection()[0];
  b.remove(a);
  if (d < 5) {
    c.down('button[action\x3d"add"]').setDisabled(false);
  }
}, editAvailability:function(b, e, a) {
  this.startDate = b;
  this.endDate = e;
  this.weekAvailability = a;
  var c = this.getWeekDaysGrid(), d = c.getStore().getAt(0);
  c.getSelectionModel().select(d, false, true);
  this.refreshView(d);
}, applyChanges:function(a) {
  if (!this.validateAndSave()) {
    return false;
  }
  if (a && Ext.isFunction(a)) {
    a.call(this, this.weekAvailability);
  }
}, getIntervals:function() {
  var a = [];
  this.getAvailabilityGrid().getStore().each(function(b) {
    a.push({startTime:b.get('startTime'), endTime:b.get('endTime')});
  });
  return a;
}, onWeekDaysListSelectionChange:function(a, b) {
  if (!this.validateAndSave()) {
    return false;
  }
  this.refreshView(b[0]);
}, validateAndSave:function() {
  var c = this.currentWeekDay.get('IsWorkingDay'), b = [];
  if (c) {
    try {
      b = this.getIntervals();
      this.currentWeekDay.verifyAvailability(b);
    } catch (a) {
      Ext.MessageBox.alert('Error', a);
      return false;
    }
  }
  this.currentWeekDay.setAvailability(b);
  return true;
}, refreshView:function(d) {
  var g = d.getId(), b = this.weekAvailability[g], f = this.getDayTypeRadioGroup(), e = b.getAvailability(), c = /^(\d)-(\d\d\d\d\/\d\d\/\d\d)-(\d\d\d\d\/\d\d\/\d\d)$/.exec(b.getId()), a = !c ? 0 : b.get('IsWorkingDay') ? 1 : 2;
  this.currentWeekDay = b;
  f.setValue({IsWorkingDay:[a]});
  this.getAvailabilityGrid().getStore().loadData(e);
}, onAvailabilityGridSelectionChange:function(b) {
  var a = this.getAvailabilityGrid();
  a.down('button[action\x3d"remove"]').setDisabled(!b || b.getSelection().length === 0);
}, onDayTypeChanged:function(g) {
  var c = g.getValue();
  if (Ext.isArray(c.IsWorkingDay)) {
    return;
  }
  var a = this.getWeekDaysGrid(), d = a.getSelectionModel(), b = d.getSelection()[0].getId(), e = this.weekAvailability[b].get('Name'), f = [], i = Ext.Date.format(this.startDate, 'Y/m/d'), j = Ext.Date.format(this.endDate, 'Y/m/d');
  switch(c.IsWorkingDay) {
    case 0:
      var h = this.getDefaultWeekAvailabilityHandler()[b];
      h.set('Name', e);
      h.set('Date', null);
      f = h.getAvailability();
      this.weekAvailability[b] = h;
      break;
    default:
      f = this.weekAvailability[b].getAvailability();
      this.currentWeekDay.set('Id', Ext.String.format('{0}-{1}-{2}', b, i, j));
      this.currentWeekDay.set('IsWorkingDay', c.IsWorkingDay === 1);
      break;
  }
  this.getAvailabilityGrid().getStore().loadData(Ext.clone(f));
  this.getAvailabilityGrid().setDisabled(c.IsWorkingDay !== 1);
}});
Ext.define('Gnt.widget.calendar.DatePicker', {extend:'Ext.picker.Date', alias:'widget.gntdatepicker', calendar:null, workingDayCls:'gnt-datepicker-workingday', nonWorkingDayCls:'gnt-datepicker-nonworkingday', overriddenDayCls:'gnt-datepicker-overriddenday', overriddenWeekDayCls:'gnt-datepicker-overriddenweekday', _weeks:null, getWeekOverrides:function() {
  return this._weeks;
}, setWeekOverrides:function(a) {
  this._weeks = a;
}, _days:null, getDayOverrides:function() {
  return this._days;
}, setDayOverrides:function(a) {
  this._days = a;
}, update:function(b, e) {
  var d = this, c = 0, a = d.cells.elements;
  this.removeCustomCls();
  this.callParent(arguments);
  for (; c < d.numDays; ++c) {
    b = a[c].firstChild.dateValue;
    a[c].className += ' ' + this.getDateCls(b);
  }
}, getDateCls:function(d) {
  var b = '', f = 0, g = this;
  d = new Date(d);
  if (d.getMonth() !== this.getActive().getMonth()) {
    return;
  }
  if (this.getDayOverrides().getOverrideDay(d)) {
    b += ' ' + this.overriddenDayCls;
    if (!this.getDayOverrides().isWorkingDay(d)) {
      b += ' ' + this.nonWorkingDayCls;
    }
  } else {
    var e = null;
    this.getWeekOverrides().each(function(h) {
      if (Ext.Date.between(d, h.getStartDate(), h.getEndDate())) {
        e = h;
        return true;
      }
    });
    if (e) {
      b += ' ' + this.overriddenWeekDayCls;
      var c = (new Date(d)).getDay(), a = e.getAvailability();
      if (a && a[c] && a[c].getIsWorkingDay() === false) {
        b += ' ' + g.nonWorkingDayCls;
      }
    } else {
      if (!this.getDayOverrides().isWorkingDay(d)) {
        b += ' ' + this.nonWorkingDayCls;
      }
    }
  }
  return b.length > 0 ? b : this.workingDayCls;
}, removeCustomCls:function() {
  this.cells.removeCls([this.overriddenDayCls, this.nonWorkingDayCls, this.workingDayCls, this.overriddenWeekDayCls]);
}});
Ext.define('Gnt.widget.calendar.Calendar', {extend:'Ext.form.Panel', requires:['Ext.XTemplate', 'Gnt.data.Calendar', 'Gnt.widget.calendar.DayGrid', 'Gnt.widget.calendar.WeekGrid', 'Gnt.widget.calendar.DayAvailabilityGrid', 'Gnt.widget.calendar.WeekEditor', 'Gnt.widget.calendar.DatePicker'], alias:'widget.calendar', defaults:{padding:10, border:false}, workingDayCls:'gnt-datepicker-workingday', nonWorkingDayCls:'gnt-datepicker-nonworkingday', overriddenDayCls:'gnt-datepicker-overriddenday', overriddenWeekDayCls:'gnt-datepicker-overriddenweekday', 
calendar:null, dayOverrideNameHeaderText:'Name', dateText:'Date', addText:'Add', editText:'Edit', removeText:'Remove', workingDayText:'Working day', weekendsText:'Weekends', overriddenDayText:'Overridden day', overriddenWeekText:'Overridden week', defaultTimeText:'Default time', workingTimeText:'Working time', nonworkingTimeText:'Non-working time', dayGridConfig:null, weekGridConfig:null, datePickerConfig:null, dayOverridesText:'Day overrides', weekOverridesText:'Week overrides', okText:'OK', cancelText:'Cancel', 
dayGrid:null, weekGrid:null, getDayGrid:function() {
  if (!this.dayGrid) {
    this.dayGrid = Ext.create('Gnt.widget.calendar.DayGrid', Ext.apply({tbar:[{text:this.addText, action:'add', iconCls:'gnt-action-add', handler:this.addDay, scope:this}, {text:this.editText, action:'edit', iconCls:'gnt-action-edit', handler:this.editDay, scope:this}, {text:this.removeText, action:'remove', iconCls:'gnt-action-remove', handler:this.removeDay, scope:this}]}, this.dayGridConfig || {}));
  }
  return this.dayGrid;
}, getWeekGrid:function() {
  if (!this.weekGrid) {
    this.weekGrid = Ext.create('Gnt.widget.calendar.WeekGrid', Ext.apply({tbar:[{text:this.addText, action:'add', iconCls:'gnt-action-add', handler:this.addWeek, scope:this}, {text:this.editText, action:'edit', iconCls:'gnt-action-edit', handler:this.editWeek, scope:this}, {text:this.removeText, action:'remove', iconCls:'gnt-action-remove', handler:this.removeWeek, scope:this}]}, this.weekGridConfig || {}));
  }
  return this.weekGrid;
}, datePicker:null, getDatePicker:function() {
  if (!this.datePicker) {
    this.datePicker = Ext.create('Gnt.widget.calendar.DatePicker', this.datePickerConfig || {});
  }
  return this.datePicker;
}, legendTpl:'\x3cul class\x3d"gnt-calendar-legend"\x3e\x3cli class\x3d"gnt-calendar-legend-item"\x3e\x3cdiv class\x3d"gnt-calendar-legend-itemstyle {workingDayCls}"\x3e\x3c/div\x3e\x3cspan class\x3d"gnt-calendar-legend-itemname"\x3e{workingDayText}\x3c/span\x3e\x3cdiv style\x3d"clear: both"\x3e\x3c/div\x3e\x3c/li\x3e\x3cli\x3e\x3cdiv class\x3d"gnt-calendar-legend-itemstyle {nonWorkingDayCls}"\x3e\x3c/div\x3e\x3cspan class\x3d"gnt-calendar-legend-itemname"\x3e{weekendsText}\x3c/span\x3e\x3cdiv style\x3d"clear: both"\x3e\x3c/div\x3e\x3c/li\x3e\x3cli class\x3d"gnt-calendar-legend-override"\x3e\x3cdiv class\x3d"gnt-calendar-legend-itemstyle {overriddenDayCls}"\x3e31\x3c/div\x3e\x3cspan class\x3d"gnt-calendar-legend-itemname"\x3e{overriddenDayText}\x3c/span\x3e\x3cdiv style\x3d"clear: both"\x3e\x3c/div\x3e\x3c/li\x3e\x3cli class\x3d"gnt-calendar-legend-override"\x3e\x3cdiv class\x3d"gnt-calendar-legend-itemstyle {overriddenWeekDayCls}"\x3e31\x3c/div\x3e\x3cspan class\x3d"gnt-calendar-legend-itemname"\x3e{overriddenWeekText}\x3c/span\x3e\x3cdiv style\x3d"clear: both"\x3e\x3c/div\x3e\x3c/li\x3e\x3c/ul\x3e', 
dateInfoTpl:'\x3ctpl if\x3d"isWorkingDay \x3d\x3d true"\x3e\x3cdiv\x3eWorking hours for {date}:\x3c/div\x3e\x3c/tpl\x3e\x3ctpl if\x3d"isWorkingDay \x3d\x3d false"\x3e\x3cdiv\x3e{date} is non-working\x3c/div\x3e\x3c/tpl\x3e\x3cul class\x3d"gnt-calendar-availabilities"\x3e\x3ctpl for\x3d"availability"\x3e\x3cli\x3e{.}\x3c/li\x3e\x3c/tpl\x3e\x3c/ul\x3e\x3cspan\x3eBased on: \x3ctpl if\x3d"override \x3d\x3d true"\x3eoverride "{name}" in calendar "{calendarName}"\x3c/tpl\x3e\x3ctpl if\x3d"override \x3d\x3d false"\x3estandard day in calendar "{calendarName}"\x3c/tpl\x3e\x3c/span\x3e', 
initComponent:function() {
  var d = this;
  if (!(this.legendTpl instanceof Ext.Template)) {
    this.legendTpl = new Ext.XTemplate(this.legendTpl);
  }
  if (!(this.dateInfoTpl instanceof Ext.Template)) {
    this.dateInfoTpl = new Ext.XTemplate(this.dateInfoTpl);
  }
  if (!this.calendar) {
    Ext.Error.raise('Required attribute "calendar" is missed during initialization of `Gnt.widget.Calendar`');
  }
  var b = this.getWeekGrid(), a = this.getDayGrid(), c = this.getDatePicker();
  this.dayGrid.on({selectionchange:this.onDayGridSelectionChange, validateedit:this.onDayGridValidateEdit, edit:this.onDayGridEdit, scope:this});
  this.dayGrid.store.on({update:this.refreshView, remove:this.refreshView, add:this.refreshView, scope:this});
  this.weekGrid.on({selectionchange:this.onWeekGridSelectionChange, validateedit:this.onWeekGridValidateEdit, edit:this.onWeekGridEdit, scope:this});
  this.weekGrid.store.on({update:this.refreshView, remove:this.refreshView, add:this.refreshView, scope:this});
  this.datePicker.on({select:this.onDateSelect, scope:this});
  this.fillDaysStore();
  this.fillWeeksStore();
  c.setWeekOverrides(b.getStore());
  c.setDayOverrides(a.getStore());
  this.dateInfoPanel = new Ext.Panel({cls:'gnt-calendar-dateinfo', columnWidth:0.33, border:false, height:200});
  this.items = [{xtype:'container', layout:'hbox', pack:'start', align:'stretch', items:[{html:Ext.String.format('Calendar name: "{0}"', this.calendar.name), border:false, flex:1}, {xtype:'combobox', name:'cmb_parentCalendar', fieldLabel:'Parent calendar', store:Ext.create('Ext.data.Store', {fields:['Id', 'Name'], data:[{Id:-1, Name:'No parent'}].concat(d.calendar.getParentableCalendars())}), queryMode:'local', displayField:'Name', valueField:'Id', editable:false, emptyText:'Select parent', value:d.calendar.parent ? 
  d.calendar.parent.calendarId : -1, flex:1}]}, {layout:'column', defaults:{border:false}, items:[{margin:'0 15px 0 0', columnWidth:0.3, html:this.legendTpl.apply({workingDayText:this.workingDayText, weekendsText:this.weekendsText, overriddenDayText:this.overriddenDayText, overriddenWeekText:this.overriddenWeekText, workingDayCls:this.workingDayCls, nonWorkingDayCls:this.nonWorkingDayCls, overriddenDayCls:this.overriddenDayCls, overriddenWeekDayCls:this.overriddenWeekDayCls})}, {columnWidth:0.37, 
  margin:'0 5px 0 0', items:c}, this.dateInfoPanel]}, {xtype:'tabpanel', items:[a, b]}];
  this.callParent(arguments);
}, onRender:function() {
  this.onDateSelect(this.getDatePicker(), new Date());
  this.callParent(arguments);
}, fillDaysStore:function() {
  var a = [];
  this.calendar.each(function(b) {
    if (!b.getDate()) {
      return;
    }
    a.push(Ext.create('Gnt.model.CalendarDay', {Date:b.getDate(), Id:b.getId(), Name:b.getName(), IsWorkingDay:b.getIsWorkingDay(), Availability:b.getAvailability()}));
  });
  this.getDayGrid().getStore().loadData(a);
}, fillWeeksStore:function() {
  var c = [], b = this, a = this.getWeekGrid().store.model.prototype;
  Ext.Array.each(this.calendar.nonStandardWeeksStartDates, function(e) {
    var g = b.calendar.getNonStandardWeekByStartDate(e);
    var f = {};
    var d = b.calendar.getDefaultWeekAvailability();
    f[a.nameField] = g.name;
    f[a.startDateField] = g.startDate;
    f[a.endDateField] = g.endDate;
    f[a.availabilityField] = d;
    Ext.Array.each(d, function(h) {
      h.setName(g.name);
      h.clearDate(null);
    });
    Ext.Array.each(g.weekAvailability, function(k) {
      var l = k.getId();
      var j = /^(\d)-(\d\d\d\d\/\d\d\/\d\d)-(\d\d\d\d\/\d\d\/\d\d)$/.exec(l);
      if (!j) {
        return;
      }
      var i = j[1];
      var h = Ext.create('Gnt.model.CalendarDay');
      h.clearDate(null);
      h.setId(l);
      h.setName(g.name);
      h.setIsWorkingDay(k.getIsWorkingDay());
      h.setAvailability(k.getAvailability());
      d[i] = h;
    });
    c.push(f);
  });
  this.getWeekGrid().getStore().loadData(c);
}, reload:function() {
  var b = this.getWeekGrid(), a = this.getDayGrid();
  this.fillDaysStore();
  this.fillWeeksStore();
  this.getDatePicker().setWeekOverrides(b.getStore());
  this.getDatePicker().setDayOverrides(a.getStore());
}, editDay:function() {
  var c = this, e = this.getDayGrid().getSelectionModel();
  if (!e || e.getSelection().length === 0) {
    return;
  }
  var a = e.getSelection()[0];
  var b = new Gnt.widget.calendar.DayAvailabilityGrid({addText:this.addText, removeText:this.removeText, workingTimeText:this.workingTimeText, nonworkingTimeText:this.nonworkingTimeText});
  var d = Ext.create('Ext.window.Window', {title:this.dayOverridesText, modal:true, width:280, height:260, layout:'fit', items:b, buttons:[{text:this.okText, handler:function() {
    c.calendar.clearCache();
    if (b.isValid()) {
      var f = b.calendarDay;
      f.setIsWorkingDay(b.isWorkingDay());
      f.setAvailability(b.getIntervals());
      c.applyCalendarDay(f, a);
      c.refreshView();
      d.close();
    }
  }}, {text:this.cancelText, handler:function() {
    d.close();
  }}]});
  b.editAvailability(this.cloneCalendarDay(a));
  d.show();
}, addDay:function() {
  var a = this.getDatePicker().getValue(), b = this.getDayGrid(), c = Ext.create('Gnt.model.CalendarDay', {Name:'[Without name]', Cls:this.calendar.defaultNonWorkingTimeCssCls, Date:a, IsWorkingDay:false});
  b.getStore().insert(0, c);
  b.getSelectionModel().select([c], false, false);
}, removeDay:function() {
  var f = this.getDayGrid(), h = f.getSelectionModel(), c = f.getStore();
  if (!h || h.getSelection().length === 0) {
    return;
  }
  c.clearCache();
  var a = h.getSelection()[0], d = this.getDatePicker().getValue(), g = d.getDay(), b = this.getWeekOverrideDay(d), e = b != null;
  c.remove(a);
  if (b == null) {
    b = this.calendar.defaultWeekAvailability[g];
  }
  this.getDatePicker().setValue(d);
}, refreshView:function() {
  var e = this.getDatePicker().getValue(), b = this.getCalendarDay(e), d = this.getWeekGrid(), a = this.getDayGrid(), c = a.getStore().getOverrideDay(e), g;
  if (c) {
    a.getSelectionModel().select([c], false, true);
  } else {
    g = this.getWeekOverrideByDate(e);
    if (g) {
      d.getSelectionModel().select([g], false, true);
    }
  }
  var f = {name:b.getName(), date:Ext.Date.format(e, 'M j, Y'), calendarName:this.calendar.name || this.calendar.calendarId, availability:b.getAvailability(true), override:!!(c || g), isWorkingDay:b.getIsWorkingDay()};
  this.dateInfoPanel.update(this.dateInfoTpl.apply(f));
}, onDayGridSelectionChange:function(d) {
  if (!d || d.getSelection().length === 0) {
    return;
  }
  var a = d.getSelection()[0], b = a.getDate(), c = this.getDayGrid();
  this.getDatePicker().setValue(b);
}, onDayGridEdit:function(b, c) {
  if (c.field === 'Date') {
    var a = Ext.Date.clearTime(c.value, true);
    c.record.data[c.record.idProperty] = a - 0;
    c.grid.getStore().clearCache();
    this.getDatePicker().setValue(c.value);
  }
  this.refreshView();
}, onDayGridValidateEdit:function(b, c) {
  var a = c.grid.getStore();
  if (c.field === a.model.prototype.dateField && a.getOverrideDay(c.value) && c.value !== c.originalValue) {
    Ext.MessageBox.alert('Error', 'There is already an override for this day');
    return false;
  }
}, onDateSelect:function(b, a) {
  this.refreshView();
}, getCalendarDay:function(b) {
  var a = this.getOverrideDay(b);
  if (a) {
    return a;
  }
  a = this.getWeekOverrideDay(b);
  if (a) {
    return a;
  }
  return this.calendar.defaultWeekAvailability[b.getDay()];
}, getOverrideDay:function(a) {
  return this.getDayGrid().getStore().getOverrideDay(a);
}, getWeekOverrideDay:function(c) {
  var e = new Date(c), d = this.getWeekOverrideByDate(c), b = e.getDay();
  if (d == null) {
    return null;
  }
  var a = d.getAvailability();
  if (!a) {
    return null;
  }
  return a[b];
}, getWeekOverrideByDate:function(a) {
  var b = null;
  this.getWeekGrid().getStore().each(function(c) {
    if (Ext.Date.between(a, c.getStartDate(), c.getEndDate())) {
      b = c;
      return true;
    }
  });
  return b;
}, editWeek:function() {
  var f = this.getWeekGrid().getSelectionModel(), c = this;
  if (!f || f.getSelection().length === 0) {
    return;
  }
  var b = f.getSelection()[0];
  var a = new Gnt.widget.calendar.WeekEditor({getDefaultWeekAvailabilityHandler:function() {
    return c.getDefaultWeekAvailability();
  }});
  var e = Ext.create('Ext.window.Window', {title:this.weekOverridesText, modal:true, width:370, defaults:{border:false}, layout:'fit', items:a, buttons:[{text:this.okText, handler:function() {
    c.calendar.clearCache();
    a.applyChanges(function(g) {
      b.setAvailability(g);
      var i = c.getDatePicker().getValue(), h = g[i.getDay()];
      c.refreshView();
      e.close();
    });
  }}, {text:this.cancelText, handler:function() {
    e.close();
  }}]});
  var d = [];
  Ext.Array.each(b.getAvailability(), function(g) {
    d.push(c.cloneCalendarDay(g));
  });
  e.show();
  e.down('calendarweekeditor').editAvailability(b.getStartDate(), b.getEndDate(), d);
}, addWeek:function() {
  var a = this.getWeekGrid().getStore();
  var b = this.getDatePicker().getValue(), c = new a.model();
  c.setName('[Without name]');
  c.setStartDate(b);
  c.setEndDate(b);
  c.setAvailability(this.calendar.getDefaultWeekAvailability());
  a.insert(0, c);
  this.getWeekGrid().getSelectionModel().select([c], false, false);
}, removeWeek:function() {
  var f = this.getWeekGrid().getSelectionModel();
  if (!f || f.getSelection().length === 0) {
    return;
  }
  var a = f.getSelection()[0], c = this.getDatePicker().getValue(), e = c.getDay(), b = this.getOverrideDay(c), d = !!b;
  b = b || this.calendar.defaultWeekAvailability[e];
  this.getWeekGrid().getStore().remove(a);
  this.getDatePicker().setValue(c);
  this.refreshView();
}, onWeekGridSelectionChange:function(e) {
  if (!e || e.getSelection().length === 0) {
    return;
  }
  var a = e.getSelection()[0], b = a.getStartDate(), f = b.getDay(), d = a.getAvailability()[f], c = this.getWeekGrid();
  if (d == null) {
    d = this.calendar.defaultWeekAvailability[f];
  }
  this.getDatePicker().setValue(b);
}, onWeekGridEdit:function(f, h) {
  var c = h.record, a = c.getStartDate(), d = c.getEndDate(), i = a.getDay(), b = c.getAvailability(), k = b[i];
  prot = h.grid.getStore().model.prototype;
  if (k == null) {
    k = this.calendar.defaultWeekAvailability[i];
  }
  if (h.field == prot.startDateField || h.field == prot.endDateField) {
    var g = Ext.Date.format(a, 'Y/m/d');
    var j = Ext.Date.format(d, 'Y/m/d');
    Ext.Array.each(b, function(l) {
      var m = l.getId();
      var e = /^(\d)-(\d\d\d\d\/\d\d\/\d\d)-(\d\d\d\d\/\d\d\/\d\d)$/.exec(m);
      if (!e) {
        return;
      }
      l.set('Id', Ext.String.format('{0}-{1}-{2}', e[1], g, j));
    });
    this.getDatePicker().setValue(a);
  }
  this.refreshView();
}, onWeekGridValidateEdit:function(f, i) {
  var c = i.record, b = c.getStartDate(), h = c.getEndDate(), a = true;
  var d = i.grid.getStore();
  var g = d.model.prototype;
  if (i.field === g.startDateField && h < i.value || i.field === g.endDateField && b > i.value) {
    Ext.MessageBox.alert('Error', 'StartDate greater then EndDate');
    return false;
  }
  d.each(function(j) {
    var k = j.getStartDate(), e = j.getEndDate();
    if (k == b && e == h) {
      return;
    }
    if (i.field == g.startDateField && k < b && i.value <= e || i.field == g.endDateField && e > h && i.value >= k) {
      a = false;
      return true;
    }
  });
  if (!a) {
    Ext.MessageBox.alert('Error', "Dates shouldn't intersect");
    return false;
  }
}, applyChanges:function(b) {
  var a = this.down('combobox[name\x3d"cmb_parentCalendar"]').getValue();
  this.calendar.parent = a ? Gnt.data.Calendar.getCalendar(a) : null;
  this.calendar.proxy.extraParams.parentId = this.calendar.parent ? this.calendar.parent.calendarId : null;
  this.applyDays();
  this.applyWeeks();
  if (b && Ext.isFunction(b)) {
    b.call(this, this.calendar);
  }
}, applyCalendarDay:function(b, a) {
  a.beginEdit();
  a.setId(b.getId());
  a.setName(b.getName());
  a.setIsWorkingDay(b.getIsWorkingDay());
  a.setDate(b.getDate());
  a.setAvailability(b.getAvailability());
  a.endEdit();
}, applyWeek:function(d, c) {
  var b = this, a = /^(\d)-(\d\d\d\d\/\d\d\/\d\d)-(\d\d\d\d\/\d\d\/\d\d)$/;
  Ext.Array.each(d.getAvailability(), function(f, h) {
    var i = false, g = f.getId(), e = a.exec(g) ? false : true;
    Ext.Array.each(c.weekAvailability, function(j) {
      var l = j.getId(), k = a.exec(l);
      if (k[1] == h) {
        if (e) {
          b.calendar.remove(j);
        } else {
          b.applyCalendarDay(f, j);
        }
        i = true;
        return i;
      }
    });
    if (!i && !e) {
      b.calendar.add(f);
    }
  });
}, applyWeeks:function() {
  var c = this, b = this.getWeekGrid().getStore(), a = [], e = [], d = [];
  Ext.Array.each(this.calendar.nonStandardWeeksStartDates, function(f) {
    var g = false;
    b.each(function(i) {
      var h = Ext.Date.clearTime(i.getStartDate());
      if (h === f) {
        var j = c.calendar.getNonStandardWeekByDate(f);
        j.endDate == i.getEndDate() ? e.push([i, j]) : a.push(f);
        g = true;
        return true;
      }
    });
    if (!g) {
      a.push(f);
    }
  });
  b.each(function(f) {
    if (c.calendar.getNonStandardWeekByDate(f.getStartDate() == null)) {
      d.push(f);
    }
  });
  Ext.Array.each(a, function(f) {
    c.calendar.removeNonStandardWeek(f);
  });
  Ext.Array.each(d, function(f) {
    c.calendar.addNonStandardWeek(f.getStartDate(), f.getEndDate(), f.getAvailability());
  });
  Ext.Array.each(e, function(f) {
    c.applyWeek(f[0], f[1]);
  });
}, applyDays:function() {
  var c = this, b = this.getDayGrid().getStore(), a = [], e = [], d = [];
  this.calendar.each(function(f) {
    var g = /^(\d)-(\d\d\d\d\/\d\d\/\d\d)-(\d\d\d\d\/\d\d\/\d\d)$/.exec(f.getId());
    if (g) {
      return;
    }
    b.getOverrideDay(f.getDate()) == null ? a.push(f) : e.push(f);
  });
  b.each(function(f) {
    if (c.calendar.getOverrideDay(f.getDate()) == null) {
      d.push(f);
    }
  });
  this.calendar.remove(a);
  this.calendar.add(d);
  Ext.Array.each(e, function(f) {
    var g = b.getOverrideDay(f.getDate());
    c.applyCalendarDay(g, f);
  });
}, cloneCalendarDay:function(a) {
  return Ext.create('Gnt.model.CalendarDay', {Date:a.getDate(), Id:a.getId(), Name:a.getName(), IsWorkingDay:a.getIsWorkingDay(), Availability:a.getAvailability()});
}, getDefaultWeekAvailability:function() {
  return this.calendar.defaultWeekAvailability;
}, onDestroy:function() {
  this.getWeekGrid().destroy();
  this.getDayGrid().destroy();
  this.getDatePicker().destroy();
  this.callParent(arguments);
}});
Ext.onReady(function() {
  if (window.location.href.match('bryntum.com|ext-scheduler.com')) {
    return;
  } else {
    if (Sch && Sch.view && Sch.view.TimelineGridView) {
      var b = false;
      Sch.view.TimelineGridView.override({refresh:function() {
        this.callOverridden(arguments);
        if (b || !this.rendered) {
          return;
        }
        b = true;
        Ext.Function.defer(function() {
          this.el.select(this.eventSelector).setOpacity(0.15);
        }, 10 * 60 * 1000, this);
        var c = this.el.parent().createChild({tag:'a', href:'http://www.bryntum.com/store', title:'Click here to purchase a license', style:'display:block;height:54px;width:230px;background: #fff url(http://www.bryntum.com/site-images/bryntum-trial.png) no-repeat;z-index:10000;border:1px solid #ddd;-webkit-box-shadow: 2px 2px 2px rgba(100, 100, 100, 0.5);-moz-box-shadow: 2px 2px 2px rgba(100, 100, 100, 0.5);-moz-border-radius:5px;-webkit-border-radius:5px;position:absolute;bottom:10px;right:15px;'});
        try {
          if (!Ext.util.Cookies.get('bmeval')) {
            Ext.util.Cookies.set('bmeval', (new Date()).getTime(), Ext.Date.add(new Date(), Ext.Date.YEAR, 2));
          } else {
            var g = Ext.util.Cookies.get('bmeval'), d = new Date(parseInt(g, 10));
            if (Ext.Date.add(d, Ext.Date.DAY, 45) < new Date()) {
              this.el.select(this.eventSelector).hide();
              this.el.mask('Trial Period Expired!').setStyle('z-index', 10000);
              this.refresh = Ext.emptyFn;
            }
          }
        } catch (f) {
        }
      }});
    }
    if (Sch && Sch.view && Sch.view.TimelineTreeView) {
      var a = false;
      Sch.view.TimelineTreeView.override({refresh:function() {
        this.callOverridden(arguments);
        if (a || !this.rendered) {
          return;
        }
        a = true;
        Ext.Function.defer(function() {
          this.el.select(this.eventSelector).setOpacity(0.15);
        }, 10 * 60 * 1000, this);
        var c = this.el.parent().createChild({tag:'a', href:'http://www.bryntum.com/store', title:'Click here to purchase a license', style:'display:block;height:54px;width:230px;background: #fff url(http://www.bryntum.com/site-images/bryntum-trial.png) no-repeat;z-index:10000;border:1px solid #ddd;-webkit-box-shadow: 2px 2px 2px rgba(100, 100, 100, 0.5);-moz-box-shadow: 2px 2px 2px rgba(100, 100, 100, 0.5);-moz-border-radius:5px;-webkit-border-radius:5px;position:absolute;bottom:10px;right:15px;'});
        Ext.Function.defer(c.fadeOut, 10000, c);
        try {
          if (!Ext.util.Cookies.get('bmeval')) {
            Ext.util.Cookies.set('bmeval', (new Date()).getTime(), Ext.Date.add(new Date(), Ext.Date.YEAR, 2));
          } else {
            var g = Ext.util.Cookies.get('bmeval'), d = new Date(parseInt(g, 10));
            if (Ext.Date.add(d, Ext.Date.DAY, 45) < new Date()) {
              this.el.select(this.eventSelector).hide();
              this.el.mask('Trial Period Expired!').setStyle('z-index', 10000);
              this.refresh = Ext.emptyFn;
            }
          }
        } catch (f) {
        }
      }});
    }
  }
});
Ext.data.Connection.override({parseStatus:function(b) {
  var a = this.callOverridden(arguments);
  if (b === 0) {
    a.success = true;
  }
  return a;
}});
Ext.onReady(function() {
  window._gaq = window._gaq || [];
  window._gaq.push(['_setAccount', 'UA-11046863-1']);
  window._gaq.push(['_setDomainName', 'none']);
  window._gaq.push(['_setAllowLinker', true]);
  window._gaq.push(['_trackPageview']);
  (function() {
    var b = document.createElement('script');
    b.type = 'text/javascript';
    b.async = true;
    b.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var a = document.getElementsByTagName('script')[0];
    a.parentNode.insertBefore(b, a);
  })();
  window.onerror = function(h, c, a) {
    if (!window.__reported && h && (a || c)) {
      window.__reported = true;
      try {
        var b = new Image();
        var g = Ext.versions && Ext.versions.extjs && Ext.versions.extjs.version;
        var f = Sch.VERSION || '-';
        b.src = Ext.String.format('http://bryntum.com/errlog.php?msg\x3d{0}\x26url\x3d{1}\x26line\x3d{2}\x26href\x3d{3}\x26extVersion\x3d{4}\x26prodVersion\x3d{5}\x26magic\x3d{6}', encodeURIComponent(h), encodeURIComponent(c), encodeURIComponent(a), encodeURIComponent(window.location.href), encodeURIComponent(g), encodeURIComponent(f), 'maFSiO6W');
      } catch (d) {
      }
    }
  };
});
var _0xee2b = ['Robo.util.Array', 'isFunction', 'Invalid parameter: expected a function.', 'raise', 'length', 'Reduce of empty array with no initial value', 'define', 'Robo.Transaction', 'apply', 'callParent', 'actions', 'push', 'undo', 'redo', 'title', 'getTitle', 'Robo.data.Model', 'Ext.Mixin', 'onBeforeEndEdit', 'onAfterEndEdit', 'editMemento', 'editMementoFix', 'data', 'getModifiedFieldNames', 'previousValues', 'each', 'Array', '', 'Robo.action.Base', 'Abstract method call', 'phantom', 'phantomIdField', 
'getId', 'Robo.action.flat.Update', 'Ext.Array', 'initConfig', 'saveValues', 'getRecord', 'getFieldNames', 'oldValues', 'processSavingOldValue', 'map', 'newValues', 'processSavingNewValue', 'CUSTOMLY_PROCESSED', 'self', 'beginEdit', 'processRestoringValue', 'reduce', 'util', 'set', 'endEdit', 'previous', 'hasOwnProperty', 'Can not get previous value', 'get', 'identityFn', 'Edit of ', ' for ', 'modelName', ' ', 'Robo.action.flat.Add', 'records', 'remove', 'store', 'autoSync', 'removeFromRemoved', 
'prepareRecord', 'index', 'insert', 'unknown', 'Addition of ', ',', 'join', 'Robo.action.flat.Remove', 'Removal of ', 'Robo.action.tree.Append', 'newChild', 'removeChild', 'parent', 'lastParentId', 'removedNodes', 'getTreeStore', 'appendChild', 'Append of ', 'Robo.action.tree.Insert', 'insertedBefore', 'isFirst', 'insertBefore', 'updateInfo', 'Insertion of ', 'Robo.action.tree.Remove', 'dirty', 'removedChild', 'isMove', 'newParent', 'parentNode', 'newNextSibling', 'nextSibling', 'cascadeBy', 'Move of ', 
'Robo.action.tree.Update', 'expanded', 'expand', 'collapse', 'leaf', 'loaded', 'Robo.Manager', 'Ext.util.Observable', 'Ext.data.Store', 'Ext.data.StoreManager', 'created', 'timeout', 'treeStoreListeners', 'onTreeStoreAppend', 'onTreeStoreInsert', 'onTreeStoreRemove', 'onTreeStoreUpdate', 'onIncomingCommand', 'flatStoreListeners', 'onFlatStoreAdd', 'onFlatStoreRemove', 'onFlatStoreUpdate', 'clearQueuesOnLoad', 'clearQueues', 'stores', 'storesById', 'undoQueue', 'redoQueue', 'addStore', 'forEach', 
'lookup', 'StoreManager', 'Assert', 'Must provide a store or a valid store id', 'isObject', 'setStoreId', 'getModel', 'associations', 'prototype', 'getAssociatedStore', 'ROBO_MANAGED', 'hasStore', 'state', 'disabled', 'bindStore', 'storeId', 'indexOf', 'getStoreTypeListeners', 'on', 'undoRedoEventBus', 'getStoreTypeListenerStubs', 'un', 'stub', 'Object', 'TreeStore', 'unbindStore', 'paused', 'isRootSettingOrLoading', 'currentTransaction', 'startTransaction', 'ignoredFieldNames', 'getField', 'persist', 
'areIncomingCommandsEnabled', 'pause', 'resume', 'endTransaction', 'addTransaction', 'incomingCommandsDisabled', 'onAnyChangeInAnyStore', 'edit', 'hasPersistableChanges', 'filter', 'flat', 'action', 'addAction', 'tree', '$undoRedoMoving', 'start', 'fireEvent', 'undoqueuechange', 'redoqueuechange', 'hold', 'forEachStore', 'enabled', 'stop', 'clearUndoQueue', 'clearRedoQueue', "Can't hold, no transaction is currently in progress", "Can't release, no transaction is currently in progress", 'slice', 'notifyStoresAboutTransactionStart', 
'transactionBoundary', 'scheduleEndTransaction', 'transactionTimeout', 'transactionMaxDuration', 'hasActions', 'notifyStoresAboutTransactionEnd', 'transactionadd', 'Transaction', 'beforeundo', 'notifyStoresAboutUndoRedoStart', 'min', 'pop', 'unshift', 'notifyStoresAboutUndoRedoComplete', 'afterundo', 'beforeredo', 'shift', 'afterredo', 'onUndoRedoTransactionStart', 'onUndoRedoTransactionEnd', 'beforeUndoRedo', 'afterUndoRedo', '6.1.6', 'Robo.data.Store', 'constructor', 'destroy', 'fireEventArgs', 
'beforeSetRoot', 'beforeFillNode', 'afterSetRoot', 'afterFillNode', '$undoRedoEventBusFired', 'hasListener', 'inUndoRedoTransaction', 'undoRedoPostponed', 'Parameter must be a function', '__isSettingRoot', 'getRoot', 'clear', 'isRoot', 'isLoading', 'isTreeStore', 'Robo.widget.UndoButton', 'Ext.button.Split', 'widget.roboundobutton', 'baseCSSPrefix', 'fa fa-undo', 'Undo', 'robo', '`robo` is a required config for the ', '$className', 'robo-transaction-list', 'getTransactionItems', 'onTransactionClick', 
'menu', 'click', 'type', 'queuechange', 'onTransactionQueueChange', 'mon', 'setDisabled', 'removeAll', 'add', 'hide', 'Queue', 'onTransactionItemActivated', 'onTransactionItemDeActivated', 'reverse', 'transaction', 'rendered', 'activeCls', 'addCls', 'el', 'items', 'removeCls', 'Robo.widget.RedoButton', 'widget.roboredobutton', 'fa fa-repeat fa-redo', 'Redo', 'Robo.widget.StatusPanel', 'Ext.tree.Panel', 'widget.robostatuspanel', 'treecolumn', 'Title', 'Changed fields', 'fieldNames', 'fieldnames', 
'isActive', 'getActiveRowClass', 'bind', 'Function', 'robo-status-active', 'getActions', 'Update', ', ', 'setRootNode', 'scrollTo', 'getView', 'Sch.crud.AbstractManager', '$PhantomId', 'call', 'observable', 'mixins', 'activeRequests', 'delayedSyncs', 'transport', 'syncApplySequence', 'addStoreToApplySequence', 'autoLoad', 'load', 'storesIndex', 'isStore', 'object', 'getStoreDescriptor', 'isArray', 'string', 'masterStoreInfo', 'fillStoreDescriptor', 'setCrudManager', 'crudManager', 'memory', 'setProxy', 
'setAsynchronousLoad', 'bindStoreListeners', 'undefined', 'concat', 'splice', 'updateStoreIndex', 'onStoreUpdate', 'onStoreChange', 'onTreeStoreInsertOrAppend', 'onNodeRemove', 'mun', 'storeIdProperty', 'model', 'idProperty', 'writeAllFields', 'applyIf', 'unbindStoreListeners', 'removeStoreFromApplySequence', 'endupdate', 'ignoreUpdates', 'hasChanges', 'haschanges', 'autoSyncTimerId', 'sync', 'autoSyncTimeout', 'nochanges', 'getStore', 'isStoreDirty', 'getRemovedRecords', 'byIdMap', 'root', 'modified', 
'getKeys', 'isValid', 'getData', 'getRequestId', 'filterParam', 'pageSize', 'remoteFilter', 'serialize', 'getFilters', 'currentPage', 'page', 'resetIdsBeforeSync', 'processFieldMapping', 'processSubStores', 'critical', 'fieldMapping', 'isString', 'mapping', 'getStoreChanges', 'getNewRecords', 'getUpdatedRecords', 'prepareAdded', 'prepareUpdated', 'prepareRemoved', 'added', 'updated', 'removed', 'revision', 'children', 'getSubStoresData', 'rows', 'reject', 'proxy', 'beginUpdate', 'endUpdate', 'totalCount', 
'total', 'append', 'loadData', 'applyMetaData', 'metaData', 'id', '__loading', 'applyMetaDataToStore', 'loadDataToTreeStore', 'loadDataToFlatStore', 'storeDesc', 'getNodeById', 'getById', 'loadDataToStore', 'suspendChangesTracking', 'resumeChangesTracking', 'applyChangesToStore', "Can't find store for the response sub-package", 'log', 'isEqual', 'parentIdProperty', 'parentId', 'setId', 'commit', 'findByIdFn', 'removeRecordFn', "Can't find record to remove from the response package", 'getByKey', 'getApplyChangesToStoreHelpers', 
'findByPhantomFn', 'addRecordFn', 'applyRemovals', 'applyChangesToRecord', 'datachanged', 'applyingSyncResponse', 'applyingLoadResponse', 'trackResponseType', 'applyLoadResponse', 'applySyncResponse', 'random', 'now', 'floor', 'decode', 'success', 'requestfail', 'fail', 'CrudManager: ', ' failed, please inspect the server response', 'warn', 'requestsuccess', 'beforeresponseapply', 'before', 'applyResponse', 'requestdone', 'onResponse', 'getLoadPackage', 'beforeload', 'desc', 'cancelRequest', 'loadcanceled', 
'requestId', 'encode', 'onLoad', 'sendRequest', 'syncdelayed', 'getChangeSetPackage', 'beforesync', 'synccanceled', 'onSync', 'runDelayedSync', 'suspendEvents', 'commitChanges', 'resumeEvents', 'rejectChanges', 'console', 'destroyed', 'removeStore', 'Sch.app.CrudManagerDomain', 'Ext.app.EventDomain', 'crudmanager', 'crudmanager.', 'crud', 'monitor', 'alias', '*', 'prefix', 'Sch.column.Day', 'Ext.grid.column.Column', 'widget.weekview-day', 'center', 'sch-timetd', 'sch-daycolumn-header', 'isWeekend', 
'sch-daycolumn-header-weekend', 'tdCls', ' sch-daycolumn-weekend', 'getDate', 'getMonth', 'getYear', 'sch-daycolumn-header-today', ' sch-daycolumn-today', 'getDay', 'Sch.column.Resource', 'Ext.grid.Column', 'widget.resourcecolumn', ' sch-timetd', 'cls', ' sch-resourcecolumn-header', 'Sch.locale.Locale', 'Active', 'locale', 'bindRequire', '.', 'split', 'getName', 'localeName', 'namespaceId', 'En', 'triggerCreated', 'ClassManager', 'activeLocaleId', 'l10n', 'function', 'singleton', 'override', 'onLocalized', 
'getClass', 'getClassName', 'applyToClass', 'Sch.locale.En', 'year', 'years', 'yr', 'quarter', 'quarters', 'q', 'month', 'months', 'week', 'weeks', 'w', 'day', 'days', 'd', 'hour', 'hours', 'h', 'minute', 'minutes', 'second', 'seconds', 's', 'ms', 'Start time {0} is greater than end time {1}', 'Availability intervals should not intersect: [{0}] and [{1}]', 'Invalid format for availability string: {0}. It should have exact format: hh:mm-hh:mm', 'All day', 'Loading, please wait...', 'Saving changes, please wait...', 
'Loading events...', 'Current time', 'You’re deleting an event', 'Do you want to delete all occurrences of this event?', 'Do you want to delete this and all future occurrences of this event, or only the selected occurrence?', 'Delete All', 'Delete All Future Events', 'Delete Only This Event', 'You’re changing a repeating event', 'Do you want to change all occurrences of this event?', 'Do you want to change only this occurrence of the event, or this and all future occurrences?', 'All', 'All Future Events', 
'Only This Event', 'Yes', 'Cancel', 'Repeat event', 'Save', 'Frequency', 'Every', 'day(s)', 'week(s) on:', 'month(s)', 'year(s) in:', 'Each', 'On the', 'End repeat', 'time(s)', 'weekday', 'weekend day', 'first', 'third', 'fourth', 'fifth', 'last', ' and ', 'Daily', 'Weekly on {1}', 'Monthly on {1}', 'Yearly on {1} of {2}', 'Every {0} days', 'Every {0} weeks on {1}', 'Every {0} months on {1}', 'Every {0} years on {1} of {2}', 'the first', 'the second', 'the third', 'the fourth', 'the fifth', 'the last', 
'{0} {1}', 'Never', 'After', 'On date', 'Weekly', 'Monthly', 'Yearly', 'None', 'Custom...', 'Repeat', 'Delete', 'Name', 'Start', 'End', 'Resource', 'New booking...', 'Paper format', 'Orientation', 'Schedule range', 'Show header', 'Show footer', 'Portrait', 'Landscape', 'Complete schedule', 'Visible schedule', 'Date range', 'Export from', 'Export to', 'Control pagination', 'Adjust column width', 'Adjust column width and row height', 'Specify date range', 'Select columns', 'Complete schedule (for all events)', 
'DPI (dots per inch)', 'Rows range', 'All rows', 'Visible rows', '[no title]', 'Export Settings', 'Export', 'Exporting...', 'An error occurred', 'Fetching row {0} of {1}', 'Built page {0} of {1}', 'Please wait...', 'Print settings', 'Print', 'Please disable pop-up blocker since the print-plugin needs to be able to open new tabs', 'Browser pop-up blocker detected', 'Exporter', 'Single page', 'Multiple pages (vertically)', 'Multiple pages', 'Split', 'Hide split part', 'Total', 'From', 'To', 'G:i', 
'D d/m', 'g:i:s', 'D, d g:iA', 'm/d h:i A', 'D d M', 'm/d', 'd M', 'Y F d', 'm/d/Y', 'D d M Y', 'Y F', 'M Y', 'Y', 'Sch.mixin.Localizable', 'localize', 'getLocale', 'Cannot find locale: ', ' [', ']', 'isLocaleApplied', 'applyLocale', 'superclass', 'inTextLocaleRegExp', 'replace', 'exec', 'localizableProperties', 'localizeText', 'beforeInitComponent', 'localizeProperties', 'Sch.column.ResourceName', 'widget.scheduler_resourcenamecolumn', 'name', 'Sch.column.Summary', 'widget.summarycolumn', 'top', 
'_sch_not_used', 'emptyFn', 'scope', 'beforerender', 'onMyBeforeRender', 'schedulerPanel', 'tablepanel[lockable\x3dtrue]', 'up', 'getTimeAxis', 'getEventStore', 'getStart', 'getEnd', 'getEventsForResource', 'calculate', 'showPercent', 'getDurationInMinutes', 'Date', 'round', ' %', 'nbrDecimals', 'toFixed', 'DAY', 'getShortNameOfUnit', 'HOUR', 'MINUTE', 'getStartDate', 'getEndDate', 'intersectSpans', 'max', 'Sch.view.HorizontalTimeAxis', 'Ext.XTemplate', 'Ymd_His', 'sch-column-header', 'sch-header-row', 
'\x3ctable border\x3d"0" cellspacing\x3d"0" cellpadding\x3d"0" style\x3d"width: {totalWidth}px; {tstyle}" class\x3d"{{tableCls}} sch-header-row-{position} {cls}"\x3e\x3ctbody\x3e\x3ctr\x3e\x3ctpl for\x3d"cells"\x3e\x3ctd class\x3d"{{baseCls}} {headerCls} sch-header-cell-{align}" data-date\x3d"{[fm.date(values.start, Sch.view.HorizontalTimeAxis.encodeDateFormat)]}" style\x3d"text-align: {align}; width: {width}px; {style}" tabIndex\x3d"0"headerPosition\x3d"{parent.position}" headerIndex\x3d"{[xindex-1]}"\x3e\x3cdiv class\x3d"sch-simple-timeheader"\x3e{header}\x3c/div\x3e{{resizeHandle}}\x3c/td\x3e\x3c/tpl\x3e\x3c/tr\x3e\x3c/tbody\x3e\x3c/table\x3e', 
'touch', 'versions', 'update', 'onModelUpdate', 'containerEl', 'headerHtmlRowTpl', 'Template', '{{resizeHandle}}', 'enableTickResizing', '\x3cdiv class\x3d"sch-header-cell-resizehandle"\x3e\x3c/div\x3e', '{{tableCls}}', 'tableCls', '{{baseCls}}', 'baseCls', 'trackHeaderOver', 'hoverCls', 'highlightCell', 'clearHighlight', 'tap', 'onElClick', 'doubletap', 'dblclick', 'contextmenu', '_listenerCfg', '.sch-simple-timeheader', 'height', 'render', 'getColumnConfig', 'getTotalWidth', 'embedCellWidths', 
'border-top : 0;', 'middle', 'bottom', 'getTickWidth', 'compactCellWidthThreshold', 'sch-header-row-compact', 'dom', 'table', 'select', 'fly', 'display', 'style', 'none', 'deleteTimeAxisRows', 'afterbegin', 'getHTML', 'insertAdjacentHTML', 'sch-header-single-row', 'refresh', 'end', 'getDistanceBetweenDates', 'width', 'display: none', 'delegatedTarget', 'headerPosition', 'getAttribute', 'headerIndex', 'timeheader', 'highlightedCell', 'Sch.feature.HeaderResize', 'Ext.AbstractPlugin', 'onColumnRender', 
'mousedown', 'onMouseDown', 'selector', 'getEl', 'clientX', 'isNumber', 'browserEvent', 'parentElement', 'originalCellWidth', 'getWidth', 'startClientX', 'getClientX', 'currentCell', 'getBody', 'mousemove', 'onMouseMove', 'getCmp', 'mouseup', 'onMouseUp', 'minCellWidth', 'px', 'timelinegrid,timelinetree', 'getLeft', 'getDateFromCoordinate', 'getSchedulingView', 'getX', 'timeAxisViewModel', 'setTickWidth', 'scrollToDate', 'offset', 'Sch.column.timeAxis.Horizontal', 'widget.timeaxiscolumn', 'sch-simple-timeaxis', 
'sch-column-header-over', 'theme', 'toLowerCase', 'classic', '.sch-header-cell-resizehandle', 'feature', 'addPlugin', 'sch-horizontaltimeaxis-ct', 'createChild', 'titleEl', 'headerView', 'HorizontalTimeAxis', 'view', 'ownHoverCls', 'create', 'onTimeAxisViewRefresh', 'afterlayout', 'ownerCt', 'resize', 'onHeaderContainerResize', 'getAvailableWidthForSchedule', 'getAvailableWidth', 'setWidth', 'grid', 'timeheaderclick', 'timeheaderdblclick', 'timeheadercontextmenu', 'horizontaltimeaxiscolumnrender', 
'enableBubble', 'relayEvents', 'focusable', 'headerCls', 'renderData', 'getRootHeaderCt', 'componentLayoutCounter', 'updateLayout', 'ensureSizing', 'isVisible', 'lastBox', 'hidden', 'getScrollbarSize', 'setAvailableWidth', 'getHeight', 'table:last-of-type tr', 'down', 'getHeaders', 'setHeight', 'table tr', 'Sch.column.timeAxis.Vertical', 'widget.verticaltimeaxis', 'right', ' sch-verticaltimeaxis-cell', 'sch-verticaltimeaxis-header', 'columnConfig', 'height:', 'isWeek', 'isMajorTick', 'getMajorHeaderName', 
'headerConfig', ' sch-column-line-solid', 'getBottomHeader', 'renderer', 'dateFormat', 'format', 'Sch.crud.encoder.Json', 'json', 'JSON', 'Sch.crud.encoder.Xml', 'xml', '\x26amp;', '\x26lt;', '\x26gt;', '\x26quot;', 'stringReplaces', 'encodeRecord', '\x3crecord\x3e', '\x3cfield id\x3d"', 'encodeString', '"\x3e', '$store', 'encodeStoreChanges', '\x3c/field\x3e', '\x3c/record\x3e', '\x3cstore id\x3d"', '\x3cadded\x3e', 'encodeRecords', '\x3c/added\x3e', '\x3cupdated\x3e', '\x3c/updated\x3e', '\x3cremoved\x3e', 
'\x3c/removed\x3e', '\x3c/store\x3e', '\x3cload requestId\x3d"', '"/\x3e', '" page\x3d"', '" pageSize\x3d"', '\x3c/load\x3e', '\x3csync requestId\x3d"', '" revision\x3d"', '\x3c/sync\x3e', 'DOMParser', 'text/xml', 'parseFromString', 'ActiveXObject', 'Microsoft.XMLDOM', 'async', 'loadXML', 'decodeRecord', 'childNodes', 'nodeName', 'field', 'firstChild', 'getElementByTagName', 'decodeStore', 'nodeValue', 'getElementsByTagName', 'record', 'decodeRecords', 'stringToXML', 'documentElement', 'false', 'true', 
'code', 'message', 'Sch.crud.transport.Ajax', 'GET', 'POST', 'abort', 'Ajax', 'paramName', 'params', 'method', 'defaultMethod', 'url', 'failure', 'responseXml', 'responseText', 'requestConfig', 'beforesend', 'request', 'Sch.util.Patch', 'disableOverrides', 'ieOnly', 'isIE', 'macOnly', 'isMac', 'minVersion', 'equals', 'extjs', 'isGreaterThan', 'maxVersion', 'isLessThan', 'target', 'applyFn', 'overrides', 'require', 'Sch.patches.CollectionKey', 'Ext.util.CollectionKey', '6.0.0', 'https://www.sencha.com/forum/showthread.php?310532-Ext.util.Collection-key-configuration-application-and-cloning-is-broken', 
'patches/001_collection_key.t.js', "Ext.util.CollectionKey::clone() is broken due to wrong usage of Ext's configuration facility.", 'We relay on the (though) private Ext.data.LocalStore::extraKeys configuration, we use it to define additional', 'unique but complex keys for Assignment and Dependency stores. Upon store filtering such keys are being cloned', "but due to the broken config key's clone() method throws an exception", 'applyKeyFn', 'CollectionKey', 'updateKeyFn', 'Sch.util.Cache', 'cache', 
'stats', 'isModel', '[ undefined / null ]', 'key', 'miss', 'hit', 'include', 'union', 'Sch.data.util.EventAssignmentsCache', 'Ext.data.Model', 'getEventId', 'eventIdField', 'move', 'eventStoreDetacher', 'assignmentStoreDetacher', 'assignmentStoreFiltersDetacher', 'assignmentStore', 'destroyMembers', 'getRange', 'Sch.data.util.ResourceAssignmentsCache', 'getResourceStore', 'getResourceId', 'resourceIdField', 'resourceStoreDetacher', 'Sch.data.mixin.UniversalModelGetter', 'getModelById', 'getModelByInternalId', 
'byInternalIdMap', 'getByInternalId', 'Sch.data.mixin.CacheHintHelper', 'loadRecords', 'cacheresethint', 'Sch.model.Customizable', 'convert', 'flexSetter', 'storePreviousFlex', '__editing', 'deletePreviousFlex', '__editCounter', 'fieldsInitialValue', 'fields', '$onExtended', 'customizableFields', 'allCustomizableFields', 'isCustomizableField', 'Id', 'removeFields', 'charAt', 'substr', 'Field', 'isCustomizableModel', 'data.field.', 'auto', 'capitalize', 'String', '__getterFor__', '__setterFor__', 
'replaceFields', 'onExtended', 'Sch.model.Assignment', 'ResourceId', 'EventId', 'internalId', 'joined', 'getAssignmentStore', 'getEvent', 'getResource', 'copy', 'makeAssignmentEventResourceCompositeKey', 'event(', ')-resource(', ')', 'Sch.data.AssignmentStore', 'Sch.data.util.AssignmentStoreEventResourcesCache', 'Sch.data.util.AssignmentStoreResourceEventsCache', 'getEventResourceCompositeKey', 'store.assignmentstore', 'assignments', 'eventAssignmentsCache', 'createEventAssignmentCache', 'resourceAssignmentsCache', 
'createResourceAssignmentCache', 'eventResourceCache', 'resourceEventsCache', 'eventStore', 'StoreMgr', 'attachToEventStore', 'eventstorechange', 'onEventNodeRemove', 'onEventStoreResourceStoreChange', 'onEventRemove', 'attachToResourceStore', 'onResourceNodeRemove', 'onResourceRemove', 'getAssignmentsForEvent', 'getAssignmentsForResource', 'returnTrue', 'mapAssignmentsForEvent', 'mapAssignmentsForResource', 'isFiltered', 'contains', 'isEventAssignedToResource', 'setEventId', 'setResourceId', 'removeAssignmentsForEvent', 
'getAssignmentForEventAndResource', 'getResourcesForEvent', 'byEventIdResourceId', 'Sch.model.CalendarDay', 'Ext.data.Types', 'date', 'c', 'DATE', 'Types', 'clearTime', 'Weekday', 'int', 'OverrideStartDate', 'OverrideEndDate', 'Type', 'IsWorkingDay', 'boolean', 'Cls', 'sch-nonworkingtime', 'Availability', 'dateField', 'availabilityField', 'availabilityCache', 'parseInterval', 'verifyAvailability', 'stringifyIntervals', 'getAvailability', 'startTime', 'sort', 'endTime', 'startTimeAfterEndTime', 'H:i', 
'availabilityIntervalsShouldNotIntersect', 'stringifyInterval', '0', 'getHours', 'prependZero', ':', 'getMinutes', '-', 'invalidFormat', 'getTotalMS', 'setAvailability', 'number', 'getFullYear', 'getAvailabilityIntervalsFor', 'startDate', 'endDate', 'Sch.util.Date', 'Ext.Date', 'unitHash', 'MILLI', 'SECOND', 'MONTH', 'YEAR', 'units', 'WEEK', 'QUARTER', 'unitNames', 'setUnitNames', 'unitsByName', '_unitNames', 'compareUnits', 'setHours', 'setMinutes', 'getSeconds', 'setSeconds', 'getMilliseconds', 
'setMilliseconds', 'clone', 'getTime', 'setDate', 'getFirstDateOfMonth', 'getLastDateOfMonth', 'setMonth', 'setFullYear', 'getDurationInYears', 'getDurationInMonths', 'getDurationInDays', 'getDurationInHours', 'getDurationInSeconds', 'getDurationInMilliseconds', 'getTimezoneOffset', 'betweenLesser', 'getUnitByName', 'Incorrect UnitName', 'plural', 'single', 'abbrev', 'Unknown unit name: ', 'Error', 'Invalid date unit', 'getStartOfNextDay', 'Ymd', 'YmW', 'Ym', 'getUnitDurationInMs', 'getWeekOfYear', 
'getSubUnit', 'setValueInUnits', 'splitMonth', 'splitDay', 'ceil', 'setDateToMidday', 'setDateToHours', 'isSameDate', 'Sch.model.Range', 'StartDate', 'EndDate', 'startDateField', 'setEndDate', 'endDateField', 'setStartDate', 'isScheduled', 'getDates', 'areDatesValid', 'setStartEndDate', 'Sch.data.Calendar', 'store.calendar', '00:00-24:00', 'Calendar', 'GNT_CALENDAR:', 'unregister', 'calendarId', 'setParent', 'setCalendarId', 'unitsInMs', 'hoursPerDay', 'daysPerWeek', 'daysPerMonth', 'defaultWeekAvailability', 
'getDefaultWeekAvailability', 'onCalendarUpdate', 'onCalendarDataChange', 'clearCache', 'clsField', 'nameField', 'some', 'EDIT', 'Model', 'shouldReactOnCalendarDayFieldUpdate', 'register', 'extraParams', 'defaultAvailability', 'weekendFirstDay', 'weekendSecondDay', 'weekendsAreWorkdays', 'WEEKDAY', 'suspendCacheUpdate', 'holidaysCache', 'availabilityIntervalsCache', 'daysIndex', 'weekAvailability', 'nonStandardWeeksStartDates', 'nonStandardWeeksByStartDate', 'getType', 'getWeekday', 'WEEKDAYOVERRIDE', 
'getOverrideStartDate', 'getOverrideEndDate', 'Y/m/d', 'parse', 'mainDay', 'Incorrect week day index', 'resetCache', 'calendarchange', 'forEachNonStandardWeek', 'intersectsWithCurrentWeeks', 'Can not add intersecting week', 'isCalendarDayModel', 'setType', 'setOverrideStartDate', 'setOverrideEndDate', 'setWeekday', 'Week override', 'setName', 'getNonStandardWeekByStartDate', 'clean', 'getOverrideDay', 'getWeekDay', 'getDefaultCalendarDay', 'getOwnCalendarDay', 'getNonStandardWeekByDate', 'getCalendarDay', 
"Can't find day for ", 'getIsWorkingDay', 'isHoliday', 'getNameOfUnit', 'convertDurationToMs', 'convertMSDurationToUnit', "startDate can't be bigger than endDate", 'getNext', 'getCls', 'defaultNonWorkingTimeCssCls', 'isForward', 'At least `startDate` or `endDate` is required, depending from the `isForward` option', 'availabilitySearchLimit', 'getEndOfPreviousDay', 'forEachAvailabilityInterval', 'skipNonWorkingTime: Cannot skip non-working time, please ensure that this calendar has any working period of time specified', 
'calculateEndDate', 'calculateStartDate', 'getAllCalendars', 'isChildOf', 'getCalendar', 'Invalid parent specified for the calendar', 'onParentCalendarChange', 'onParentDestroy', 'parentchange', 'Sch.data.CrudManager', 'resourceStore', 'dependencyStore', 'addRelatedStores', 'getEventStoreInfo', 'getDependencyStore', 'Sch.data.util.EventDependencyCache', 'getSourceId', 'getTargetId', 'addSuccessor', 'addPredecessor', 'removeSuccessor', 'removePredecessor', 'clearSuccessors', 'clearPredecessors', 'moveSuccessors', 
'movePredecessors', 'has', 'setSuccessors', 'setPredecessors', 'collect', 'fromField', 'toField', 'dependencyStoreDetacher', 'makeSuccessorsKey', 'makePredecessorsKey', '@#!#@', '@#!#@succ', '@#!#@pred', 'Sch.model.DependencyBase', 'Bidirectional', 'FromSide', 'ToSide', 'Highlighted', 'isRangeModel', 'setSourceEvent', 'setTargetEvent', 'setSourceId', 'setTargetId', 'getFrom', 'setFrom', 'getTo', 'setTo', 'getSourceEvent', 'getTargetEvent', 'StartToStart', 'StartToEnd', 'EndToEnd', 'EndToStart', 'getHighlighted', 
'setHighlighted', 'Sch.model.Dependency', 'isEmpty', 'left', 'Sch.data.DependencyStore', 'makeDependencySourceTargetCompositeKey', 'DependencyStore', 'store.sch_dependencystore', 'dependencies', 'eventDependencyCache', 'createEventDependencyCache', 'removeEventDependencies', 'isNode', 'getPredecessors', 'reduceEventDependencies', 'getSuccessors', 'reduceEventIncomingDependencies', 'reduceEventOutgoingDependencies', 'mapEventDependencies', 'mapEventIncomingDependencies', 'mapEventOutgoingDependencies', 
"Can't get event predecessors, no event store configured", 'truthy', "Can't get event successors, no event store configured", 'getEventDependencies', 'unique', 'getEventIncomingDependencies', 'getEventOutgoingDependencies', 'bySourceTargetId', 'getDependencyForSourceAndTargetEvents', 'isHighlightedWith', 'source(', ')-target(', 'Sch.data.util.IdConsistencyManager', 'onEventIdChanged', 'onResourceIdChanged', 'getUpdateAssignmentEventIdFieldFn', 'getUpdateDependencySourceTargedIdFieldFn', 'getUpdateEventResourceIdFieldFn', 
'getUpdateAssignmentResourceIdFieldFn', 'Sch.data.util.ModelPersistencyManager', 'onEventStoreBeforeSync', 'onResourceStoreBeforeSync', 'onAssignmentStoreBeforeSync', 'onDependencyStoreBeforeSync', 'removeNonPersistableRecordsToCreate', 'shallContinueSync', 'isPersistable', 'Sch.data.util.ResourceEventsCache', 'eventStoreFiltersDetacher', 'Sch.data.mixin.EventStore', 'createResourceEventsCache', 'idConsistencyManager', 'createIdConsistencyManager', 'modelPersistencyManager', 'createModelPersistencyManager', 
'setEventStore', 'setResourceStore', 'resourcestorechange', 'setAssignmentStore', 'assignmentstorechange', 'setDependencyStore', 'dependencystorechange', 'Assignment', 'forEachScheduledEvent', 'addAll', 'compareWithPrecision', 'MAX_VALUE', 'MIN_VALUE', 'lastTotalTimeSpan', 'getEvents', 'Must be implemented by consuming class', 'Event', 'assignEventToResource', 'unassignEventFromResource', 'removeAssignmentsForResource', 'getResources', 'Sch.model.Recurrence', 'DAILY', 'Interval', 'Count', 'Days', 
'MonthDays', 'Months', 'Positions', 'WEEKLY', 'MONTHLY', 'YEARLY', 'Ymd\\THis\\Z', 'event', 'rule', 'suspendEventNotifying', 'setRule', 'resumeEventNotifying', 'getFrequency', 'sanitizing', 'setPositions', 'setDays', 'setMonthDays', 'setMonths', 'getDays', 'encodeDay', 'DayRuleEncoder', 'recurrence', 'getMonthDays', 'getMonths', 'sanitize', 'suspendedEventNotifying', 'onRecurrenceChanged', 'FREQ\x3d', 'getInterval', 'INTERVAL\x3d', 'BYDAY\x3d', 'BYMONTHDAY\x3d', 'BYMONTH\x3d', 'getCount', 'COUNT\x3d', 
'UNTIL\x3d', 'getPositions', 'BYSETPOS\x3d', ';', '\x3d', 'setFrequency', 'FREQ', 'setInterval', 'INTERVAL', 'setCount', 'COUNT', 'UNTIL', 'BYDAY', 'BYMONTHDAY', 'BYMONTH', 'BYSETPOS', 'Sch.data.util.DelayedCalls', 'delayedCalls', 'Oject', 'timer', 'delayed-', '-start', 'beforeFn', 'fn', 'entries', 'afterFn', '-end', '$name', 'caller', 'schedule', 'args', 'cancel', 'execute', 'delayedCallTimeout', 'Sch.data.util.recurrence.AbstractIterator', 'NONE', 'isValidPosition', 'Sch.data.util.recurrence.DailyIterator', 
'MAX_OCCURRENCES_COUNT', 'Sch.data.util.recurrence.DayRuleEncoder', 'dayParseRegExp', 'SU', 'MO', 'TU', 'WE', 'TH', 'FR', 'SA', 'decodeDay', 'Sch.data.util.recurrence.WeeklyIterator', 'eventStartDate', 'interval', 'count', 'copyTimeValues', 'Sch.data.util.recurrence.MonthlyIterator', 'getDaysInMonth', 'abs', 'monthDays', 'positions', 'getNthDayInPeriod', 'getNthDayOfMonth', 'forEachDateAtPositions', 'Sch.data.util.recurrence.YearlyIterator', 'buildDate', 'Sch.data.mixin.RecurringEvents', 'recurrenceIterators', 
'addRecurrenceIterators', 'delayed-regenerate-occurrences-start', 'delayed-regenerate-occurrences-end', 'delayed-generate-occurrences-start', 'delayed-generate-occurrences-end', 'onDelayedRegenerateOccurrencesEnd', 'onDelayedGenerateOccurrencesEnd', 'onEventStoreDestroy', 'generate-occurrences', 'regenerate-occurrences', 'DelayedCalls', 'frequency', 'getRecurrence', 'isRecurring', 'getRecurrenceIteratorForEvent', "Can't find iterator for ", ' frequency', 'getExceptionDates', 'toMap', 'getOccurrenceByStartDate', 
'buildOccurrence', 'forEachDate', 'getValues', 'isIterable', 'mergeDelayedCallEntries', 'occurrencesToRemove', 'getOccurrencesForEvents', 'generateOccurrencesForEvents', 'generate-occurrences-start', 'buildOccurrencesForEvent', 'generate-occurrences-end', 'getRecurringEvents', 'generate-occurrences-all-start', 'generate-occurrences-all-end', 'isRecurrableEvent', 'queryBy', 'getRecurringEventId', 'isOccurrence', 'getOccurrencesForAll', 'occurrencesready', 'Sch.model.mixin.RecurrableEvent', 'RecurringEventId', 
'RecurrenceRule', 'ExceptionDates', 'useStrict', 'isDate', 'getRecurringEvent', 'setRecurringEventId', 'isRecurrenceModel', 'recurrenceModel', 'setEvent', 'getRule', 'recurrenceRuleField', 'getRecurrenceRule', 'getOccurrences', 'removeOccurrencesForEvents', 'setRecurrenceRule', 'setExceptionDates', '_startDateValue', 'beforeStartDateChange', 'afterStartDateChange', 'lookupEntity', 'Schema', 'schema', 'Sch.model.Event', 'IconCls', 'Draggable', 'Resizable', 'AllDay', 'isEventStore', 'Event::getResource() is not applicable for events with multiple assignments, please use Event::getResources() instead.', 
'assign', 'isResourceModel', 'reassignEventFromResourceToResource', 'getDraggable', 'getResizable', 'isEventPersistable', 'getAllDay', 'getAllDayStartDate', 'statics', 'getAllDayEndDate', 'getAllDayDisplayStartDate', 'Sch.data.EventStore', 'store.eventstore', 'events', 'The model for the EventStore must subclass Sch.model.Event', 'setupRecurringEvents', 'Sch.data.mixin.ResourceStore', 'intersectsRange', 'Sch.model.Resource', 'Resource must be added to a store to be able to check if it above of an other resource', 
'Sch.data.ResourceStore', 'store.resourcestore', 'resources', 'The model for the ResourceStore must subclass Sch.model.Resource', 'Sch.patches.TreeStore', 'Ext.data.TreeStore', '5.1.0', 'Sch.patches.TreeStoreInternalIdMap', '5.1.1', 'Sch.data.mixin.FilterableTreeStore', 'inheritables', 'FilterableTreeStore', 'mixin', 'reApplyFilterOnDataChange', 'reapplyFilterOnDataChange', 'treeFilter', 'isNodeFilteredIn', 'dataChangeListeners', 'onNeedToUpdateFilter', 'onStoreBeforeLoad', 'onStoreLoad', 'filterUpdateSuspended', 
'monitoringDataChange', 'suspendIncrementalFilterRefresh', 'reapplyFilter', 'isTreeFiltered', 'currentFilterGeneration', 'isFilteredFlag', 'lastTreeFilter', 'stopDataChangeMonitoring', 'refreshNodeStoreContent', 'filter-clear', 'isHiddenFlag', 'lastTreeHiding', 'hideNodesBy', 'filterTreeBy', 'addFilter', 'getRootNode', 'rootVisible', '__filterGen', 'isLeaf', 'isExpanded', 'shallow', 'checkParents', 'fullMatchingParents', 'onlyParents', 'isOldFilter', "Can't combine `onlyParents` and `checkParents` options", 
'addedWhileFiltered', 'keepExpandStateWhileFiltered', 'filterGeneration', 'nodestore-datachange-start', 'markFilteredNodes', 'startDataChangeMonitoring', 'nodestore-datachange-end', 'filter-set', 'loading', 'hasNativeFilters', "Can't hide nodes of a filtered tree store", 'removeAt', 'needsLocalFilter', 'filterVisible', 'indexOfNextVisibleNode', 'raw', 'filterFn', 'visible', 'registerNode', 'previousSibling', 'lastChild', 'isLoaded', 'onNodeExpand', 'fillCount', 'needsSync', 'lazyFill', 'getReader', 
'getProxy', 'rootProperty', 'initialConfig', 'childType', 'extractData', 'fillNode', 'doFilter', 'afterEdit', 'Store', 'Sch.data.ResourceTreeStore', 'store.resourcetreestore', 'initTreeFiltering', 'The model for the ResourceTreeStore must subclass Sch.model.Resource', 'isSettingRoot', 'Sch.model.TimeAxisTick', 'Sch.data.TimeAxis', 'Ext.data.JsonStore', 'plain', 'setModel', 'mode', 'setMode', 'originalContinuous', 'continuous', 'reconfigure', 'endreconfigure', 'viewPreset', 'getPreset', 'Manager', 
'preset', 'consumeViewPreset', 'isConfigured', 'getAdjustedDates', 'beforereconfigure', 'beginreconfigure', 'unit', 'increment', 'generateTicks', 'Invalid time axis configuration or filter, please check your input data.', 'isContinuous', 'adjustedStart', 'adjustedEnd', 'visibleTickStart', 'visibleTickEnd', 'generateTicksValidatorFn', 'clearFilter', 'Invalid time axis filter - no ticks passed through the filter. Please check your filter method.', 'autoAdjust', 'mainUnit', 'defaultSpan', 'shiftUnit', 
'ceilDate', 'floorDate', 'getAt', 'resolutionIncrement', 'resolutionUnit', 'weekStartDay', 'setTimeSpan', 'getShiftIncrement', 'getShiftUnit', 'shiftIncrement', 'splitUnit', 'findBy', 'betweenLesserEqual', 'dateInAxis', 'getTickFromDate', 'timeSpanInAxis', 'Invalid time axis configuration', 'timeResolution', 'getMainHeader', 'uncache', 'destory', 'Sch.data.util.recurrence.Legend', 'SU,MO,TU,WE,TH,FR,SA', 'MO,TU,WE,TH,FR', 'SU,SA', 'getDaysLegend', 'dayNames', 'arrayToText', 'getShortMonthName', 'monthNames', 
'position', 'allDaysValue', 'workingDaysValue', 'nonWorkingDaysValue', 'getShortDayName', 'daysFormat', 'Sch.eventlayout.Horizontal', 'nbrOfBandsByResource', 'applyLayout', 'sortEvents', 'layoutEventsInBands', 'bandIndexToPxConvertScope', 'bandIndexToPxConvertFn', 'findClosestSuccessor', 'Sch.eventlayout.Table', 'timeAxis', 'getPositionFromDate', 'Sch.eventlayout.Vertical', 'findStartSlot', 'getCluster', 'barMargin', 'getPriorOverlappingEvents', 'sortOverlappers', 'Sch.feature.AbstractTimeSpan', 
'sch-header-secondary-canvas', 'uniqueCls', 'sch-timespangroup-', 'isReady', 'viewready', 'init', 'innerHeaderTpl', 'headerTemplate', '\x3ctpl for\x3d"."\x3e', '\x3cdiv id\x3d"{id}" class\x3d"{cls}" title\x3d"{[values.Name || values.Text || ""]}" style\x3d"{side}:{position}px;"\x3e', '{[this.renderInner(values)]}', '\x3c/div\x3e', '\x3c/tpl\x3e', 'schedulerView', 'panel', 'Error: You must define a store for this plugin', 'showHeaderElements', 'renderHeaderElements', 'onViewReady', 'removeElements', 
'removeBodyElements', 'removeHeaderElements', 'getContainerEl', 'headerContainerEl', 'isHorizontal', 'getHorizontalTimeAxisColumn', 'lockedGrid', 'headerContainerCls', 'getHeaderContainerEl', 'getBodyElements', 'getHeaderElements', '-header-', 'prepareTemplateData', 'getTemplateData', 'sch-header-indicator ', 'getSecondaryCanvasEl', 'storeListeners', 'renderElements', 'refreshSingle', 'onTimelinePanelBeforeModeChange', 'onTimelinePanelModeChange', 'viewListeners', 'headerListeners', 'isWeekView', 
'headerCt', 'forceNewRenderingTimeout', 'renderElementsBuffered', '_renderTimer', 'renderElementsInternal', 'renderDelay', 'defer', 'rtl', 'setRight', 'setLeft', 'getTimeAxisViewModel', 'getElementData', 'template', 'getHeaderElementData', 'isDestroyed', 'getColumns', 'getColumnManager', 'renderBodyElementsInternal', 'renderingDoneEvent', 'getElementId', 'className', '$cls', 'setTop', 'setElementX', 'setSize', 'getHeaderElementId', 'size', 'autoDestroy', 'updateBodyElement', 'updateHeaderElement', 
'Sch.plugin.Lines', 'plugin.scheduler_lines', 'sch-timeline', 'innerTpl', 'side', '\x3cdiv id\x3d"{id}" ', 'showTip', 'title\x3d"{[this.getTipText(values)]}" ', 'class\x3d"{$cls}" style\x3d"', ':{left}px;top:{top}px;width:{width}px"\x3e', 'getFormattedDate', 'Text', 'getElementCls', 'expandToFitView', 'getTimeSpanRegion', 'x', 'y', 'getCoordinateFromDate', 'getHeaderElementPosition', 'getHeaderElementCls', 'Sch.feature.ColumnLines', 'sch-column-line', 'columnlinessynced', 'onHostDestroy', 'populate', 
'setData', 'useLowestHeader', 'getLowestHeader', 'columnLinesFor', 'cellGenerator', 'sch-column-line-solid', 'forEachInterval', 'Sch.util.ScrollManager', 'both', 'doScroll', 'activeEl', 'refreshElRegion', 'clearScrollInterval', 'scrollProcess', 'cmp', '[isViewport]', 'dir', 'getScrollX', 'activeCmp', 'getVerticalScroll', 'r', 'maxPosition', 'l', 'u', 'animDuration', 'triggerRefresh', 'scrollHorizontallyBy', 'scrollVerticallyBy', 'horizontal', 'vertical', 'Invalid direction: ', 'direction', 'isScrollAllowed', 
'getY', 'pt', 'scrollElRegion', 'isScrollable', 'getElement', 'getScrollable', 'vthresh', 'startScrollInterval', 'hthresh', 'getRegion', 'getScrollableContainerRegion', 'getScrollableMaxPosition', 'Sch.util.DragTracker', 'Ext.dd.DragTracker', 'Ext.util.Region', 'Touch', 'supports', 'isEdge', 'TouchEvent', 'handle', 'handleListeners', 'translate', 'dragstart', 'bindListenersOnDragStart', 'getListeners', 'dragend', 'unbindListenersOnDragEnd', 'deferTimer', 'xStep', 'yStep', 'getScroll', 'startXY', 
'getCurrentScroll', 'scrollWidth', 'getXY', 'startScroll', 'touches', 'pointerType', 'mouse', 'stopPropagation', 'lastXY', 'preventDefault', 'scroll', 'active', 'tolerance', 'triggerStart', 'onDrag', 'drag', 'Sch.tooltip.ClockTemplate', 'transform:rotate(Ddeg);', '\x3cdiv class\x3d"sch-clockwrap sch-supports-border-radius sch-clock-{[this.mode]}"\x3e\x3cdiv class\x3d"sch-clock"\x3e\x3cdiv class\x3d"sch-hourIndicator" style\x3d"{[this.getHourStyle((values.date.getHours() % 12) * 30,', 'hourTop', ', + ', 
'hourHeight', ')]}"\x3e{[Ext.Date.monthNames[values.date.getMonth()].substr(0,3)]}\x3c/div\x3e\x3cdiv class\x3d"sch-minuteIndicator" style\x3d"{[this.getMinuteStyle(values.date.getMinutes() * 6,', 'minuteTop', 'minuteHeight', ')]}"\x3e{[values.date.getDate()]}\x3c/div\x3e\x3cdiv class\x3d"sch-clock-dot"\x3e\x3c/div\x3e\x3c/div\x3e\x3cspan class\x3d"sch-clock-text"\x3e{text}\x3c/span\x3e\x3c/div\x3e', 'getRotateStyle', 'Sch.tooltip.Tooltip', 'Ext.tip.ToolTip', 'b', '0 3 0 0', 'clockTpl', 'tooltip', 
'\x3cdiv class\x3d"', 'fa sch-tip-{[values.valid ? "ok fa-check" : "notok fa-ban"]} "\x3e{[this.renderClock(values.startDate, values.startText, "sch-tooltip-startdate")]}{[this.renderClock(values.endDate, values.endText, "sch-tooltip-enddate")]}\x3cdiv class\x3d"sch-tip-message"\x3e{message}\x3c/div\x3e\x3c/div\x3e', 'valid', 'allDay', 'getFormattedEndDate', 'calendar', 'allday', '6.2.1', 'getVersion', 'realignToTarget', 'realign', 'getTimeResolution', 'sch-day-resolution', 'sch-hour-resolution', 
'clock', 'offsetAdjust', 'mouseOffsets', 'setTarget', 'show', 'bl-tl?', 'alignTo', 'mouseenter', 'Sch.tooltip.HoverTip', 'widget.scheduler_hovertip', 'sch-hovertip', '\x3cdiv class\x3d"sch-hovertip-msg"\x3e{message}\x3c/div\x3e', 'messageTpl', 'beforeshow', 'tipOnBeforeShow', 'handleMouseMove', 'onBodyMouseDown', 'itemCls', 'getTarget', 'eventSelector', 'getDateFromDomEvent', 'resolveResource', 'lastTime', 'lastResource', 'setClockMode', 'updateHoverTip', 'getText', 'Sch.feature.DragCreator', 'Ext.ToolTip', 
'\x3cdiv class\x3d"sch-dragcreator-proxy"\x3e\x3cdiv class\x3d"sch-event-inner"\x3e\x26#160;\x3c/div\x3e\x3c/div\x3e', 'onSchedulerDestroy', 'boxready', 'initDragTracker', 'hoverTip', 'dragTip', '-10000px', 'setStyle', 'timeCellCls', 'isCreateAllowed', 'beforedragcreate', 'resourceRecord', 'originalStart', 'resourceRegion', 'getScheduleRegion', 'dateConstraints', 'getDateConstraints', 'disable', 'tracker', 'dragging', 'enable', 'disableHoverTip', 'originalScroll', 'rowBoundaries', 'setBox', 'dragcreatestart', 
'showDragTip', 'showForElement', 'visibility', 'activate', 'ScrollManager', 'getStartEndDatesFromRegion', 'constrain', 'validatorFnScope', 'validatorFn', 'setY', 'eventSwallower', 'unbindTimer', 'finalize', 'beforedragcreatefinalize', 'deactivate', 'isTaskModel', 'taskStore', 'setCalendar', 'dragcreateend', 'createEvent', 'e', 'afterdragcreate', 'dragTolerance', 'verifyLeftButtonPressed', 'onBeforeDragStart', 'onDragStart', 'onDragEnd', 'trackerConfig', 'bindRightClickPreventer', 'windows', 'platformTags', 
'showHoverTip', 'setupTooltips', 'stopDragCreateOnRightClick', 'button', 'ToolTip', 'tip', 'sch-dragcreate-tip', 'scheduler_hovertip', 'ComponentManager', 'Sch.feature.SchedulerDragZone', 'Ext.dd.DragZone', 'Ext.dd.StatusProxy', 'Sch.patches.DragZone', 'transparent', 'SHIFT', 'sch-dd-ref', 'sch-resizable-handle', 'sch-terminal', 'dropAllowed', 'dropNotAllowed', 'dd', 'isTarget', 'ignoreSelf', 'invalidCssClasses', 'addInvalidHandleClass', 'touchScroll', 'showTooltip', 'highlight', 'sch-dragproxy', 
'constrainDragToResource', 'getMode', 'sch-dragdrop-tip', 'preventRightClick', 'cleanupListeners', 'setDelta', 'clearTicks', 'showExactDropPosition', 'resetConstraints', 'initPageX', 'initPageY', 'setXConstraint', 'setYConstraint', 'leftConstraint', 'rightConstraint', 'minX', 'maxX', 'setXTicks', 'constrainX', 'topConstraint', 'bottomConstraint', 'minY', 'maxY', 'setYTicks', 'constrainY', 'getEventBarElements', 'dragData', 'handleMouseUp', 'DragDropManager', 'originalHidden', 'setVisibilityForSourceEvents', 
'enableCopy', 'enableCopyKey', 'Key', 'onShiftKeyStateChange', 'newResource', 'updateDragContext', 'getDateFromXY', 'sourceDate', 'origStart', 'shouldAdjustForRtl', 'setX', 'eventdrag', 'draggedRecords', 'getEventRecord', 'isAllDayDrop', 'vAdjustedPointerDate', 'getAllDayDisplayEndDate', 'scrollLeft', 'body', 'started', 'resolveEventRecord', 'resolveAssignmentRecord', 'isDraggable', 'isReadOnly', 'Resource could not be resolved for event: ', 'adjust', 'getConstrainRegion', 'getSnapPixelAmount', 'setupConstraints', 
'getRelatedRecords', 'getElementsFromEventRecord', 'isAssignmentModel', 'eventBarEls', 'getElementById', 'copyKeyPressed', 'ddel', 'getDragElement', 'sch-event-hover', 'eventdragstart', 'viewScrollListener', 'onViewScroll', 'gridScrollListener', 'timelinetree,timelinegrid', 'deltaSetXY', 'getTargetCoord', '_dd', 'setLocalXY', 'onDragOver', 'sch-event-copy', 'refElements', 'getKey', 'keydown', 'ESC', 'abortDrag', 'ddCallbackArgs', 'stopDrag', 'stopEvent', 'beforeeventdrag', 'triggerEvent', 'keyListener', 
'onKey', 'getDoc', 'refElement', 'dragDropProxyCls', '.sch-event', 'origEnd', 'offsets', 'afterDragFinalized', 'isCopyKeyPressed', 'timeDiff', 'hAdjustedPointerDate', 'EventStore', 'updateRecordsMultipleAssignmentMode', 'updateRecordsSingleAssignmentMode', 'copiedRecords', 'eventdrop', 'fullCopy', 'reassign', 'setAllDay', 'duration', 'skipWeekendsDuringDragDrop', 'adjustStartDate', 'isAssignedTo', 'unassign', 'elementFromPoint', 'block', 'grid-group-hd', 'grid-item', 'match', 'snapRelativeToEventStartDate', 
'roundDate', '.sch-schedulerview', 'resolveSchedulerView', 'pointerDate', 'resolveStartEndDates', 'getEventSelectionModel', 'getDraggableSelections', 'div', 'sch-dd-wrap', 'createDom', 'DomHelper', 'core', 'cloneNode', 'getOffsetsTo', 'cachedTarget', 'getDDById', 'DragDropMgr', 'isValidDrop', 'sch-before-drag-finalized', 'beforeeventdropfinalize', 'updateRecords', 'onInvalidDrop', 'onValidDrop', 'aftereventdrop', 'startsOutsideView', 'getDateFromTick', 'endsOutsideView', 'Sch.feature.DragDrop', 'eventDragZone', 
'targetEl', 'dragConfig', 'cleanUp', 'Sch.patches.Grouping', '6.5.2', 'Ext.grid.feature.Grouping', 'showMenuBy', 'createInterceptor', 'getMenuItems', 'getMenu', '#groupMenuItem', 'groupable', 'dataIndex', 'getVisibleGridColumns', '#groupToggleMenuItem', 'isGrouped', 'setChecked', 'Sch.feature.Grouping', 'feature.scheduler_grouping', '{[this.renderCells(values)]}', '\x3ctpl for\x3d"."\x3e\x3cdiv class\x3d"sch-grid-group-hd-cell {cellCls}" style\x3d"{cellStyle}; width: {width}px;"\x3e\x3cspan\x3e{value}\x3c/span\x3e\x3c/div\x3e\x3c/tpl\x3e', 
'headerRenderer', 'value', '\x26nbsp;', 'headerCellTpl', 'groupHeaderTpl', 'schedulerGroupHeaderTpl', 'renderCells', 'getRowId', 'retrieveNode', 'groupingFeature', 'isLockedView', 'getStoreListeners', 'onResourceAdd', 'onEventAddOrRemove', 'onEventUpdate', 'onAssignmentAddOrRemove', 'onAssignmentUpdate', 'getRecordGroup', 'refreshGroupHeader', 'refreshGrouping', 'getGroupField', 'ignoreCollectionAdd', 'refreshNode', 'Sch.widget.recurrence.ConfirmationDialog', 'Ext.window.MessageBox', 'widget.recurrenceconfirmationdialog', 
'sch-recurrenceconfirmation', 'actionType', 'eventRecord', 'actionType and eventRecord must be specified for Sch.widget.recurrence.ConfirmationDialog', 'dialogCls', '-title', '-all-message', '-further-message', 'QUESTION', 'MessageBox', 'dispatchHandler', 'buttonText', 'getButtonText', '-all-btn-text', '-further-btn-text', '-only-this-btn-text', 'yes', 'no', 'multipleHandler', 'singleHandler', 'cancelHandler', 'getButtonHandler', 'handlerScope', 'changerFn', 'values', 'changerFnScope', 'setRecurrence', 
'addExceptionDate', 'Sch.widget.RecurrenceConfirmation', 'Sch.feature.RecurringEvents', 'feature.scheduler_recurring_events', 'sch-recurringevents', 'setPanel', 'bindPanel', 'setView', 'setTimeAxis', 'refreshOccurrences', 'panelCls', 'stopTracking', 'viewReady', 'bindView', 'panelDetacher', 'onPanelEventStoreChange', 'onPanelDestroy', 'viewDetacher', 'onBeforeEventDropFinalize', 'onBeforeEventResizeFinalize', 'isRecurringEventStore', 'bindEventStore', 'startTracking', 'onEventsLoaded', 'onEventAdd', 
'onGenerateOccurrencesStart', 'onGenerateOccurrencesEnd', 'onDelayedRegenerateOccurrencesStart', 'bindTimeAxis', 'timeAxisDetacher', 'onTimeAxisReconfigure', '_fadeOutRemoval', 'fadeOutRemoval', 'suspendTracking', 'resumeTracking', 'generateOccurrencesForEventsBuffered', 'isTrackingSuspended', 'isRecurrenceRelatedFieldChange', 'regenerateOccurrencesForEventsBuffered', 'trackingSuspended', 'RecurrenceConfirmation', 'widget', 'Sch.feature.ResizeZone', 'Ext.resizer.Resizer', '.sch-resizable-handle', 
'resizer', 'eventRec', 'isResizable', 'handlePos', 'getHandlePosition', 'origEl', 'mouseDownEvent', 'tipInstance', 'sch-resize-tip', 'beforeeventresize', 'sch-event-resizing', 'createResizer', 'resizeTracker', 'getTipInstance', 'eventresizestart', 'east', 'west', 'north', 'south', 'n', 'getRight', 'getBottom', 'getTop', 'partialResize', 'afterResize', 'z-index', 'getStyle', 'isStart', 'getStartEndDates', 'showExactResizePosition', 'getEventColumns', 'weekview', 'otherEdgeX', 'maxWidth', 'otherEdgeY', 
'maxHeight', 'eventpartialresize', 'beforeeventresizefinalize', 'repaintEventsForResource', 'eventresizeend', 'aftereventresize', 'Sch.field.CellEditor', 'Ext.form.field.Text', 'widget.celleditorfield', 'H', 'Start date is incorrect', 'End date is incorrect', 'Start date is less then end date', 'divider', 'bottomUnit', 'mergeDates', 'Sch.field.SegmentedButton', 'Ext.button.Segmented', 'widget.segmentedbuttonfield', 'Ext.form.field.Field', 'sch-segmentedbuttonfield', 'checkboxgroup', 'initField', 
'initDefaultName', 'segmentedButtonFieldCls', 'change', 'onFieldChange', 'allowBlank', 'setValue', 'Sch.layout.TableLayout', 'Ext.view.TableLayout', 'layout.timeline_tablelayout', 'owner', 'ownerGrid', 'lockingPartner', 'collapsed', 'context', 'doSyncRowHeights', 'syncRowHeight', 'syncRowHeightOnNextLayout', 'columnFlusherId', '-columns', 'rowHeightFlusherId', '-rows', 'bufferedRenderer', 'beforeTableLayout', 'beginLayout', 'isRunning', 'componentLayout', 'lockingPartnerContext', 'rowHeightSynchronizer', 
'syncRowHeightBegin', 'viewContext', 'headerContext', 'Sch.plugin.Zones', 'plugin.scheduler_zones', 'sch-zone', '\x3ctpl for\x3d"."\x3e\x3cdiv id\x3d"{id}" class\x3d"{$cls}" style\x3d"', ':{left}px;top:{top}px;height:{height}px;width:{width}px;{style}"\x3e', '\x3c/div\x3e\x3c/tpl\x3e', 'border-left-width:', 'border-top-width:', 'sch-header-indicator sch-header-indicator-', 'start ', 'end ', 'getZoneHeaderElementData', 'updateZoneHeaderElement', 'Sch.plugin.RowZones', 'scheduler', 'registerRenderer', 
'\x3ctpl for\x3d"."\x3e\x3cdiv id\x3d"', '-{id}" class\x3d"', ' {Cls}" style\x3d"', ':{start}px;width:{width}px;top:{start}px;height:{width}px;{style}"\x3e', '{', '}', 'fullRefresh', 'onZoneAdd', 'onZoneRemove', 'onZoneUpdate', 'getViewRecordByZone', 'getNode', 'grid-cell-inner', 'querySelector', 'getZoneContainerEl', 'appendZoneElement', 'getNodes', 'renderRecordZones', 'getEventRenderData', 'getRecordZones', 'isBoolean', 'Sch.plugin.ResourceZones', 'plugin.scheduler_resourcezones', 'sch-resourcezone', 
'onResourceStoreChange', 'grid-cell:nth-child(', ') .', 'Sch.mixin.AbstractSchedulerPanel', 'AbstractManager', 'Sch.crud.AbstractManager not loaded, did you forget to require crudManager class (e.g. Sch.data.CrudManager)?', 'xclass', 'isTree', 'Your eventStore should be a subclass of Sch.data.EventStore (or consume the EventStore mixin)', 'initStores', 'eventBodyTemplate', 'isVertical', 'refreshResourceColumns', 'verticalListeners', 'calendarResourceStoreListeners', 'refreshViews', 'allDayNormalHeader', 
'applyStartEndParameters', 'passStartEndParameters', 'startParamName', 'setExtraParam', 'endParamName', 'resourceColumnClass', 'mainRenderer', 'registerEventEditor', 'Sch.template.Event', '\x3cdiv class\x3d"sch-resizable-handle sch-resizable-handle-DIR"\x3e\x3c/div\x3e', '\x3cdiv class\x3d"sch-terminal sch-terminal-SIDE"\x3e\x3c/div\x3e', 'getOuterMarkup', 'terminalSides', 'terminalTpl', '\x3cdiv unselectable\x3d"on" tabindex\x3d"-1" id\x3d"', 'eventPrefix', '{id}" style\x3d"right:{right}px;left:{left}px;top:{top}px;height:{height}px;width:{width}px;{style}" class\x3d"sch-event ', 
'unselectable {internalCls} {cls}"\x3e', 'resizeHandles', 'resizeTpl', '\x3cdiv unselectable\x3d"on" class\x3d"sch-event-inner"\x3e', '\x3ctpl if\x3d"iconCls"\x3e\x3ci class\x3d"sch-event-icon {iconCls}"\x3e\x3c/i\x3e\x3c/tpl\x3e', 'getInnerMarkup', '{body}', 'Sch.view.Vertical', 'Ext.Element', '[id^\x3d', '-]', 'query', 'getViewContainerElementTop', 'translateToScheduleCoordinate', 'getDateFromPosition', 'eventBorderWidth', 'getScheduleCell', 'getTableRegion', 'translateToPageCoordinate', 'getResourceColumnWidth', 
'resourceColumnWidth', 'cellBorderWidth', 'cellTopBorderWidth', 'generateTplData', 'getResourceColumnLayoutAvailableWidth', 'eventLayout', '\x26#160;', 'eventTpl', 'altColCls', 'cellCls', 'is', 'getResourceRecordFromDomId', 'timeCellSelector', 'relayoutRenderedEvents', 'renderSingle', 'isSelected', 'onEventBarSelect', 'repaintAllEvents', 'asap', 'isRangeInAxis', 'filterEventsForResource', 'getScheduledEventsForResource', 'node', 'eventrepaint', 'clientWidth', 'setViewColumnWidth', 'getViewContainerHeight', 
'getResourceEventBox', 'managedEventSizing', 'getBox', 'adjustItemBox', 'Sch.mixin.AbstractSchedulerView', 'sch-schedulerview', 'sch-col-alt', 'sch-event-highlighted', 'sch-event', 'horizontalLayoutCls', 'verticalLayoutCls', 'eventCls', 'eventTemplateClass', 'eventResizeHandles', 'layoutEventVertically', 'horizontalEventSorterFn', 'verticalEventSorterFn', ' sch-event-resizable-', ' sch-dirty ', ' sch-event-endsoutside ', ' sch-event-startsoutside ', ' sch-event-fixed ', ' sch-event-milestone ', 'selectedEventCls', 
' sch-event-recurring ', ' sch-event-occurrence ', 'isHighlighted', 'highlightDirtyEvents', 'highlightedEventCls', '-calendar-', '-x', 'internalCls', 'iconCls', 'eventBarIconClsField', 'getIconCls', 'eventRenderer', 'eventRendererScope', 'eventBarTextField', 'htmlEncode', 'getResourceRegion', 'getEventRecordFromDomElement', 'getFirstSelectedEventForResource', 'getResourceRecordFromDomElement', 'getEventIdFromDomNodeId', 'getEventRecordFromDomId', 'getResourceIdFromDomNodeId', 'isDateRangeAvailable', 
'getEventsInTimeSpan', 'triggerHighlightEvents', 'getEventsInView', 'filterBy', 'highlightEvents', 'eventEditor', 'editor', 'toArray', 'beforeeventadd', 'onEventDataRefresh', 'onAssignmentAdd', 'onAssignmentRemove', 'refreshView', 'refreshKeepingScroll', 'AbstractSchedulerView::scrollEventIntoView() is not applicable for events with multiple assignments, please use AbstractSchedulerView::scrollResourceEventIntoView() instead.', 'scrollResourceEventIntoView', 'dynamicRowHeight', 'Sch.preset.ViewPreset', 
'normalizeUnits', 'toUpperCase', 'headers', 'mainHeader', 'rowHeight', 'timeColumnWidth', 'timeRowHeight', 'timeAxisColumnWidth', 'displayDateFormat', 'Sch.preset.Manager', 'Ext.util.MixedCollection', 'G:i:s', '30', 'i', 'D, gA/d', 'Y-m-d G:i', 'W M Y', 'Y-m-d', 'd/m', '{0}', 'substring', '\x3cdiv class\x3d"sch-calendarcolumn-ct"\x3e\x3cspan class\x3d"sch-calendarcolumn-hours"\x3e{0}\x3c/span\x3e\x3cspan class\x3d"sch-calendarcolumn-minutes {2}"\x3e{1}\x3c/span\x3e\x3c/div\x3e', 'sch-calendarcolumn-minutes-non-zero', 
'D d', '\x3cdiv class\x3d"sch-calendarcolumn-ct"\x3e\x3cspan class\x3d"sch-calendarcolumn-hours"\x3e{0}\x3c/span\x3e\x3cspan class\x3d"sch-calendarcolumn-minutes"\x3e{1}\x3c/span\x3e\x3c/div\x3e', 'registerDefaults', 'middleDateFormat', 'topDateFormat', 'bottomDateFormat', 'eachKey', 'containsKey', 'removeAtKey', 'Invalid preset, please check your configuration', 'defaultPresets', 'registerPreset', 'Sch.view.model.TimeAxis', 'headersDatesCache', 'ViewPreset', 'rowHeightVertical', 'availableWidth', 
'Invalid available width provided to Sch.view.model.TimeAxis', 'forceFit', 'createHeaderRow', 'originalTickWidth', 'calculateTickWidth', 'Invalid column width calculated in Sch.view.model.TimeAxis', 'updateTickWidth', 'calendarColumnDates', 'align', 'trim', 'getDefaultValue', 'header', ' sch-dayheadercell-', 'isWorkingDay', ' sch-dayheadercell-nonworking', ' sch-dayheadercell-today', 'getDurationInUnit', 'calendarRowsAmount', 'getCalendarColumnDates', 'weekViewColumnWidth', 'getUnit', 'getUnitToBaseUnitRatio', 
'snapToIncrement', 'getResolution', 'getSingleUnitInPixels', 'tickWidth', 'getVisibleTickTimeSpan', 'getMeasuringUnit', 'suppressFit', 'rowHeightHorizontal', 'rowHeight info not available', 'columnwidthchange', 'forEachAuxInterval', 'Sch.mixin.Zoomable', 'manyYears', 'monthAndYear', 'weekDateAndMonth', 'weekAndMonth', 'weekAndDayLetter', 'weekAndDay', 'hourAndDay', 'minuteAndHour', 'secondAndMinute', 'zoomLevels', 'minZoomLevel', 'setMinZoomLevel', 'maxZoomLevel', 'setMaxZoomLevel', 'onTimelineReady', 
'getZoomLevelUnit', 'actualWidth', 'presetToZoomLevel', 'calculateCurrentZoomLevel', 'getMilliSecondsPerPixelForZoomLevel', "Can't find current zoom level index", 'Invalid range for `setMinZoomLevel`', 'Number', 'beforezoomchange', 'zoomToLevel', 'getOuterEl', 'centerDate', 'getViewportCenterDateCached', 'calculateOptimalDateRange', 'customWidth', 'isZooming', 'resolution', 'setViewPreset', 'zoomchange', 'leftMargin', 'rightMargin', 'adjustStart', 'adjustEnd', 'zoomToSpan', 'getCurrentZoomLevelIndex', 
'zoomKeepsOriginalTimespan', 'visibleZoomFactor', 'zoomOnMouseWheel', 'wheel', 'onWheel', 'scrollWheelBlockTimeout', 'ctrlKey', 'preventScrollZoom', 'deltaY', 'zoomOut', 'zoomIn', 'Sch.mixin.AbstractTimelinePanel', 'applyViewPreset', '_oldViewPresetArgs', 'calendarViewPreset', 'initializeZooming', 'viewchange', 'clearCenterDateCache', 'setupClearCenterDateCache', 'renderers', 'readRowHeightFromPreset', 'TimeAxis', 'autoAdjustTimeAxis', 'setRowHeight', 'onTimeAxisViewModelUpdate', 'refCount', 'onPanelDestroyed', 
'sch-horizontal', 'sch-vertical', 'sch-vertical-resource', 'sch-calendar', 'sch-timelinepanel', 'You must define a valid view preset object. See Sch.preset.Manager class for reference', 'setReadOnly', 'cachedCenterDate', 'getViewportCenterDate', 'viewPresetActiveScroll', 'View preset not found', 'beforeviewchange', 'setDisplayDateFormat', 'L', 'infiniteScroll', 'cachedScrollDate', 'cachedScrollDateIsCentered', 'getViewRowHeight', 'setColumnWidth', 'notScroll', 'scrollVerticallyTo', '6.2.0', 'normalScrollbarScroller', 
'scrollHorizontallyTo', 'suspendLayouts', 'shiftNext', 'resumeLayouts', 'shiftPrevious', 'scrollToCoordinate', 'shiftToDate', 'scrollToDateCentered', 'Sch.view.Horizontal', 'getRowNode', 'cellBottomBorderWidth', 'rowHasDynamicRowHeight', 'findRowByChild', 'getRecordForRowNode', 'clientHeight', 'repaintEventsForResources', 'fadeOut', 'getGroups', 'groupField', 'isRowVisible', 'isElementRenderedAndDisplayed', 'getNodeContainer', 'getResultEventBox', 'startIndex', 'all', 'endIndex', 'getRowHeight', 
'isAbove', 'relPos', 'after', 'Sch.mixin.AbstractTimelineView', 'Ext.dom.Query', 'sch-event-selected', '.sch-timetd', 'sch-horizontal-view', 'sch-vertical-view', 'sch-calendar-view', 'horizontalViewClass', 'verticalViewClass', 'weekViewClass', 'showAllDayHeader', 'getDisplayDateFormat', 'stripEscapeRe', 'test', 'hourInfoRe', 'fitToAvailableWidth', 'getColumnCount', 'setResolution', 'setSnapToIncrement', 'readOnly', '_cmpCls', '-readonly', 'horizontalViewCls', 'weekviewViewCls', 'verticalViewCls', 
'ViewCls', 'getVisibleDateRange', 'setViewRowHeight', 'getCellByPosition', 'getViewportHeight', 'getViewportWidth', 'getItemBox', 'getConnectorStartSide', 'getConnectorEndSide', '%LICENSE%', 'Sch.mixin.FilterableTreeView', 'onFilterChangeStart', 'onFilterChangeEnd', 'allowExpandCollapseWhileFiltered', 'onFilterCleared', 'onFilterSet', 'prevBlockRefresh', 'blockRefresh', 'toggle', 'sch-tree-filtered', 'Sch.mixin.GridViewCanvas', 'afterOnRender', 'sch-secondary-canvas', 'sch-secondary-canvas-layer', 
'sch-item-canvas', 'sch-item-canvas-layer', 'isItemCanvasAvailable', 'presentation', 'secondaryCanvasCls', 'getItemCanvasEl', 'itemsCanvasEl', '_underMixinControl', 'isGarbage', "Can't get sub canvas element, view's node container isn't rendered yet", 'itemsCanvasCls', 'insertFirst', '[data-sch-secondary-canvas-layer\x3d"', '"]', 'selectNode', 'Query', 'zIndex', 'itemsCanvasLayerCls', 'onBufferedRendererViewReady', '6.5.3', 'tablepanel', 'onRangeFetched', 'Sch.mixin.PartnerTimelinePanel', 'partnerTimelinePanel', 
'onLockedGridResize', 'getCollapsed', 'onPartnerCollapseExpand', 'setupScrollSync', 'onBeforeZoomChange', 'onViewChange', 'scrollstart', 'component', 'scrollend', 'getPosition', 'suspendPartnerSync', 'Sch.patches.Element_6_7', 'Ext.dom.Element', '6.7.0', 'SVGAnimatedString', 'animVal', 'classList', 'classMap', 'isSynchronized', 'Sch.patches.NavigationModel6_0_2', 'Ext.grid.NavigationModel', '6.0.2', 'column', '_initializeTimelineView', 'scrollIntoView', 'ensureVisible', 'Sch.patches.View', 'Ext.view.View', 
'keyEventRe', 'getNavigationModel', 'item', 'itemSelector', 'editingPlugin', 'getActiveEditor', 'processUIEvent', 'processSpecialEvent', 'isInputField', 'SPACE', 'isNavKeyPress', 'Sch.patches.Scroller_6_5', 'Ext.scroll.Scroller', '6.5.0', '6.5.1.9999', 'readPosition', 'positionDirty', 'isScrolling', 'fireScrollStart', 'fireScroll', 'bufferedOnDomScrollEnd', 'updateDomScrollPosition', 'Sch.patches.LayoutContext_6_5', 'Ext.layout.Context', 'currentLayout', 'Sch.patches.ToolTip', 'onTargetOver', 'onTargetOut', 
'anchor', 'anchorTarget', 'afterSetPosition', 'anchorEl', 'syncAnchor', 'Sch.patches.AbstractView', 'Ext.view.AbstractView', 'patches/002_abstract_view.t.js', 'viewStyleSheet', 'cssRules', 'ownerNode', 'AbstractView', 'Sch.patches.SpreadsheetModel', 'Ext.grid.selection.SpreadsheetModel', '6.6.0', 'cellSelector', 'getHeaderByCell', 'selected', 'checkCellClicked', 'lastOverRecord', 'setRangeStart', 'isDragging', 'extensible', 'changeSelectionRange', 'within', 'scrollTowardsPointer', 'Sch.patches.CellEditingPlugin', 
'Ext.grid.plugin.CellEditing', '8.0.1', 'disableBufferedRenderingSupport', 'editors', 'renderingRows', 'editing', 'cancelEdit', 'cacheElement', 'Sch.patches.TableScroller', 'Ext.scroll.TableScroller', 'restoreTimer', 'onDomScrollEnd', '_partners', 'suspendSync', 'invokingPartners', 'axes', 'scroller', 'Sch.tooltip.EventTip', 'widget.scheduler_eventtip', 'Ext.Number', 'Ext.util.Format', 'Ext.util.Point', 'sch-tooltip-eventtip', 't', '7 -7 -7 7', 'onTipBeforeShow', 'getAnchorAlign', 'mouseOffset', 
'anchorSize', 'tip-anchor-top', 'anchorToTarget', 'trackMouse', 'currentTarget', 'pointerEvent', 'getPoint', 'intersect', 'tl-br', 'bl-tr', 'tr-bl', 'br-tl', 'convertPositionSpec', 'axisLock', 'targetOffset', 'constrainPosition', 'constrainTo', 'isRegion', 'Region', 'constraintInsets', 'parseBox', 'Format', 'inside', 'triggerElement', 'window[modal\x3dtrue]{isVisible()}', 'isDescendantOf', 'getActive', 'WindowManager', 'beforetooltipshow', 'getDataForTooltipTpl', 'tooltipTpl', 'allowOver', 'relatedTarget', 
'Sch.mixin.TimelineView', 'longpress', 'keyup', 'afterrender', 'sch-timelineview', 'eventAnimations', 'sch-animations-enabled', 'scheduledEventName', 'resolveEventRecordFromResourceRow', 'overScheduledEventClass', 'setMouseOverEnabled', 'touchstart', 'setupTooltip', 'setupTimeCellEvents', 'rowSelector', 'handleScheduleBarEvent', 'handleResourceRowEvent', 'onEventMouseOver', 'onEventMouseOut', 'hoveredEventNode', 'preventOverCls', 'eventmouseenter', 'eventmouseleave', 'highlightedItem', 'overItemCls', 
'tipCfg', 'timeAxisColumn', 'timeaxiscolumn', 'blockRestoringInfiniteScrollDate', 'resumeRestoringInfiniteScrollDate', 'handleScheduleEvent', 'grid-item-container', 'getNodeByRecord', 'findItemByChild', 'getScrollY', 'getHorizontalScroll', 'setConfig', 'rootInheritedState', 'getMaxPosition', 'getVerticalScrollableMaxHeight', 'getVerticalScroller', 'timelinegrid, timelinetree', 'scrollBy', 'getScrollIntoViewXY', 'offsetWidth', 'offsetHeight', 'Sch.view.TimelineGridView', 'Ext.grid.View', 'setupInfiniteScroll', 
'6.0.1', 'Windows', 'os', 'onIdle', 'idle', 'GlobalEvents', 'calculateInfiniteScrollingDateRange', 'bindInfiniteScrollListeners', 'onHorizontalScroll', 'ignoreNextHorizontalScroll', 'bufferThreshold', 'bufferCoef', '_translatable', 'translatable', 'stopAnimation', 'scrollStateSaved', 'boxIsReady', 'restoreScrollToCachedDate', 'scrollLeftPos', 'setScrollX', 'lastScrollPos', 'dd-drag-proxy', 'unbindInfiniteScrollListeners', 'Sch.patches.BoundList', 'Ext.view.BoundList', ':htmlEncode}', 'Sch.patches.DragDropManager', 
'Ext.dd.ScrollManager', 'Ext.dd.DragDropManager', 'dragCurrent', 'offsetX', 'startX', 'offsetY', 'startY', 'setPosition', 'currentPoint', 'dragThreshMet', 'clickPixelThresh', 'claimGesture', 'startDrag', 'b4Drag', 'moveOnly', 'fireEvents', 'innerWidth', 'isLocked', 'deltaX', 'notifyOccluded', 'CSSPointerEvents', 'isOpera', 'getDragEl', 'clientY', 'dragOvers', 'isTypeOfDD', 'isOverTarget', 'groups', 'ids', 'getZIndex', 'byZIndex', 'b4DragOut', 'onDragOut', 'onDragEnter', 'b4DragOver', 'b4DragDrop', 
'onDragDrop', 'forceCachedTarget', 'onFire', 'createSequence', 'onStop', 'Sch.patches.NavigationModel', 'PAGE_DOWN', 'PAGE_UP', 'lastFocused', 'getVisibleColumnManager', 'cellFocusable', 'isNormalView', 'isIE11m', 'focus', 'Sch.view.WeekView', '-calendar-]', 'getGridColumns', 'getColumnsBy', 'getColumnsByResource', 'getWeekViewColumnWidth', 'getColumnEvents', 'forEachEventRelatedSelection', 'getColumnsForDateRange', 'repaintEventsForColumn', 'isAncestor', 'getIndex', 'td:nth-child(', ') [id^\x3d', 
'Sch.mixin.SchedulerView', 'Ext.Factory', 'eventPrefix missing', '_destroy', '_afterRender', 'onRowUpdated', 'clearRowHeightCache', 'loadingText', 'dragCreator', 'lockedGridDependsOnSchedule', 'cellIndex', 'data-cellIndex', 'pinch', 'eventSelModel', 'isSelectionModel', 'simpleSelect', 'SIMPLE', 'multiSelect', 'MULTI', 'SINGLE', 'eventSelModelType', 'assignmentmodel', 'eventmodel', 'allowDeselect', 'disableSelection', 'selection', 'Factory', 'bindToView', 'setupEventListeners', 'configureFunctionality', 
'doResize', 'afterHeaderResized', 'itemupdate', 'ResizeZone', 'resizePlug', 'allowOverlap', 'resizeValidatorFn', 'resizeConfig', 'enableEventDragDrop', 'DragDrop', 'scheduler_split', 'findPlugin', 'dragdropPlug', 'dndValidatorFn', 'enableDragCreation', 'createValidatorFn', 'createConfig', 'createEventOnDblClick', 'doCreateEventOnDblClick', 'mainScheduler', 'getEventEditor', 'allDayField', 'onEventCreated', 'showRecord', 'disableViewScroller', 'onDragDropStart', 'onDragDropEnd', 'onBeforeDragCreate', 
'onDragCreateStart', 'onDragCreateEnd', 'onAfterDragCreate', 'onBeforeResize', 'onResizeStart', 'onResizeEnd', 'origWidth', 'dragHd', 'columnRenderer', 'scrollElementIntoView', 'scrollTask', 'getPath', 'Sch.view.SchedulerGridView', 'widget.schedulergridview', 'SchedulerView', 'Sch.selection.EventModel', 'Ext.selection.Model', 'selection.eventmodel', 'Ext.util.KeyNav', 'getSelectionStore', 'onEventClick', 'onEventMouseDown', 'onItemMouseDown', 'onSelectionStoreLoad', 'deselectAll', 'selectedOnMouseDown', 
'ignoreRightMouseSelection', 'selectWithEvent', 'deselectOnContainerClick', 'deselect', 'onEventBarDeselect', 'getSelection', 'getSelected', 'isCollection', 'isBag', 'isRows', 'getSource', 'refreshing', 'suspendChanges', 'pruneRemoved', 'clearSelections', 'doSelect', 'lastSelected', 'resumeChanges', 'updating', 'maybeFireSelectionChange', 'Sch.selection.AssignmentModel', 'selection.assignmentmodel', 'onAssignmentStoreRemove', 'onAssignmentStoreClear', 'onAssignmentStoreRefresh', 'resolveAssignmentRecordFromEventNode', 
'Sch.mixin.SchedulerPanel', 'Sch.panel.AllDayHeader', 'sch-schedulerpanel', 'eventclick', 'eventlongpress', 'eventmousedown', 'eventmouseup', 'eventdblclick', 'eventcontextmenu', 'eventkeydown', 'eventkeyup', 'normalViewConfig', 'getDependencyViewConfig', 'calendarListeners', 'refreshCalendarColumns', 'calendarNormalGridListeners', 'onCalendarColumnResize', 'onCalendarResourceStoreChange', 'enableDependencyDragDrop', 'recurringEvents', 'isInstance', 'setGroupingFeatureDisabled', 'addDockedAllDayHeader', 
'onLockedViewResize', 'resourceZones', 'resourceZonesPlug', 'resourceZonesConfig', 'plugin', 'onColWidthChange', 'relayedViewEvents', 'enableRowHeightInjection', 'sch-scheduler-with-dependencies', 'scheduler_resourcenamecolumn', 'verticalColumns', 'verticaltimeaxis', 'timeAxisColumnCfg', 'calendarColumns', 'calendarTimeAxisCfg', 'weekViewTimeAxisCfg', 'columns', 'createResourceColumns', 'group', 'bindGroupingFeatureListener', 'orientation', 'reconfigureBufferedRendering', 'normalGrid', 'doSuspendLayouts', 
'doResumeLayouts', 'onNormalViewItemUpdate', 'selectionchange', 'handleTimelineKeyEvent', 'isIE11', 'handleTimelineEventClick', 'destroyStores', 'destroyDockedAllDayHeader', 'getLocalX', 'onBeginReconfigure', 'onEndReconfigure', '{%', 'this.processCellValues(values);', 'this.nextTpl.applyOut(values, out, parent);', '%}', 'embedRowHeight', 'addCellTpl', 'hasCustomRenderer', 'horizontalColumns', 'getNumberOfBands', ';height:', 'px;', 'columnManager', 'createCalendarRows', 'createCalendarColumns', 'processStore', 
'dataSource', 'refreshGroupingStore', 'Mode is undefined', 'beforemodechange', 'suspendRefresh', 'unbindGroupingFeatureListener', 'configureHorizontalMode', 'configureVerticalMode', 'configureWeekViewMode', 'resumeRefresh', 'getSplitter', 'setVisible', 'modechange', 'horizontalCls', 'weekviewCls', 'verticalCls', 'horizontalLockedWidth', 'gridcolumn', 'allDayLockedHeader', 'sch-all-day-locked-header', 'unselectable', 'addDocked', 'alldayheader', '__oldLeadingBufferZone', 'leadingBufferZone', 'getLockedScroller', 
'trailingBufferZone', 'setViewSize', 'getRowTicks', 'weekViewColumnClass', 'text', 'updateCalendarColumnDates', 'syncRowHeights', 'Sch.plugin.CurrentTimeLine', 'plugin.scheduler_currenttimeline', 'sch-todayLine', 'tooltipText', 'autoUpdate', 'updateDate', 'updateInterval', 'Sch.patches.LockingScroller', 'getNormalScroller', 'TimelineGridPanel', 'TimelineTreePanel', 'Sch.plugin.NonWorkingTime', 'plugin.scheduler_nonworkingtime', 'Gnt.feature.WorkingTime', "Required attribute 'calendar' missed during initialization of 'Sch.plugin.NonWorkingTime'", 
'bindCalendar', 'isUnitGreater', 'getHolidaysRanges', 'Sch.mixin.TimelinePanel', 'Ext.grid.plugin.BufferedRenderer', 'Ext.layout.container.Border', 'Sch.patches.TablePanel_6_2_1', 'Sch.patches.TableView', 'Sch.patches.BufferedRenderer', 'Sch.patches.BufferedRenderer_6_2_1', 'Sch.patches.CellContext', 'Sch.patches.TimelineGridView', 'Sch.patches.TimelineGridViewScroll6_2', 'Sch.patches.TimelinePanel', 'Sch.patches.TouchAction', 'sch-tip', 'border', 'configureChildGrids', 'configureColumns', '6.0.2.437', 
'viewConfig', 'timeline_tablelayout', '-timelineview', 'autoGenId', 'sch-lockedview', 'sch-locked-column-fixer', 'sch-rtl', 'sch-ltr', 'plugins', 'highlightWeekends', 'workingTimePlugin', 'sch-timelinepanel-highlightweekends', 'showTodayLine', 'todayLinePlugin', 'patchNavigationModel', 'refreshHeaderContainerScrollable', 'bindAutoTimeSpanListeners', 'getTimeSpanDefiningStore', 'applyStartEndDatesFromStore', 'forceDefineTimeSpanByStore', 'columnLines', 'columnLinesFeature', 'scheduleclick', 'scheduledblclick', 
'schedulecontextmenu', 'schedulelongpress', 'schedulepinch', 'schedulepinchstart', 'schedulepinchend', 'showCrudManagerMask', 'beforeCrudOperationStart', 'onCrudOperationComplete', 'onCrudBeforeLoad', 'onCrudLoad', 'patchHeaderScrollSync', 'afterInitComponent', 'isConfiguring', 'refreshAxes', 'zoomMinLevel', 'zoomMaxLevel', 'currentZoomLevel', 'waitingForAutoTimeSpan', 'unbindAutoTimeSpanListeners', 'setupPartnerTimelinePanel', 'onNormalGridCollapse', 'onNormalGridExpand', 'onHeaderClick', '.sch-daycolumn-header', 
'onLockedGridCollapse', 'onLockedGridExpand', 'onLockedGridItemDblClick', 'enablePinchZoom', 'onSchedulePinchStart', 'onSchedulePinch', 'onSchedulePinchEnd', 'rootchange', 'nodeappend', 'applyStartEndDatesAfterTreeAppend', 'Abstract method called', 'getTotalTimeSpan', 'column-header', 'Day', 'switchToDayViewOnWeekDayHeaderDblClick', 'locked', '"Right" columns must have a fixed width', 'lockable', 'erase', 'variableRowHeight', 'horizontalTimeAxisColumnCfg', 'reExpander', 'placeholder', 'savedWidth', 
'getPlaceholder', 'sch-normalgrid-collapsed', 'savingText', 'setLoading', 'renderWaitListener', 'pinchStartDistanceX', 'pageX', 'pinchStartDistanceY', 'pageY', 'pinchDistanceX', 'pinchDistanceY', 'schedulePinchThreshold', 'focusItem', 'focusCls', 'hasCls', 'rowclick', 'rowIdx', 'getHeaderContainer', 'syncWithPartners', 'patchHeaderScrollSyncDetacher', 'storechange', 'lockedGridConfig', 'normalGridConfig', 'schedulerConfig', 'lockedXType', 'xtype', 'normalXType', 'viewType', 'syncLockedWidth', 'scrollerOwner', 
'setupLockableFilterableTree', 'sch-timelinepanel-splitter', 'cellclick', 'onNormalGridCellClick', 'zoomOnTimeAxisDoubleClick', 'getSelectionModel', 'splitter', 'child', 'FilterableTreeView', '#unlockItem', '#lockItem', 'prev', 'fitColumns', 'setScrollY', 'refreshSuspensionCount', 'beforerefresh', 'preventRefresh', 'The Ext JS version you are using needs to be updated to at least ', 'ignore', 'Sch.panel.TimelineGridPanel', 'Ext.grid.Panel', 'widget.timelinegrid', 'gridpanel', 'TimelinePanel', 'Sch.template.DependencyInfo', 
'\x3cdl class\x3d"sch-dep-tip"\x3e\x3ctpl if\x3d"!values.dependency"\x3e\x3cdiv class\x3d"', 'fa {[values.valid ? \'fa-check-circle sch-dep-tip-valid\' : \'fa-times-circle sch-dep-tip-invalid\']}"\x3e\x3c/div\x3e\x3c/tpl\x3e\x3cdt class\x3d"sch-dep-tip-from-title"\x3e__FROM__:\x3c/dt\x3e\x3cdd class\x3d"sch-dep-tip-from-value"\x3e{[Ext.htmlEncode(values.fromTask.getName()) || "\x26nbsp;"]}\x3c/dd\x3e\x3cdt class\x3d"sch-dep-tip-to-title"\x3e__TO__:\x3c/dt\x3e\x3cdd class\x3d"sch-dep-tip-to-value"\x3e{[values.toTask \x26\x26 Ext.htmlEncode(values.toTask.getName()) || "\x26nbsp;"]}\x3c/dd\x3e\x3c/dl\x3e', 
'toText', 'fromText', 'Sch.view.dependency.Tooltip', 'sch-dependency-tip', '.sch-dependency', 'getPrimaryView', 'dependencyView', 'tpl', 'getDependencyForElement', 'Sch.view.dependency.DropZone', 'Ext.dd.DropZone', 'terminalSelector', 'tplData', 'createTooltip', 'fromId', 'fromSide', 'isValidLink', 'showBy', 'sch-terminal-', 'invalid', '-drop', 'tipTpl', 'sch-dependency-tip sch-create-dependency-tip', 'sch-terminal-valid-drop', 'sch-terminal-invalid-drop', 'createDependencyModel', 'drop', 'afterdrop', 
'Dependency', 'setFromSide', 'setToSide', 'getTypeFromSides', 'isValidDependency', 'destroyTip', 'Sch.view.dependency.DragZone', 'schdependencydragzone.default', 'Ext.mixin.Factoryable', 'dropZone', 'createDropZone', 'onDependencyDragStart', 'onDependencyAfterDrop', 'getDropZoneConfig', 'dependency', 'ddGroup', 'lineProxyEl', 'sch-dependency-connector-proxy', 'top:', 'scrollingElement', 'getBoundingClientRect', 'scrollTop', 'pow', 'sqrt', 'atan2', 'PI', 'rotate(', 'rad)', 'beforedrag', 'createElement', 
'sourceTerminal', 'useLineProxy', 'initLineProxy', 'sch-terminal-hidden', '.sch-terminal:not(.', 'updateLineProxy', 'sch-terminals-visible', 'animationDuration', 'animate', 'repairXY', 'Sch.util.RectangularPathFinder', 'schpathfinder.rectangular', 'getConfig', 'startBox', 'endBox', 'startShift', 'endShift', 'startSide', 'endSide', 'startArrowSize', 'endArrowSize', 'startArrowMargin', 'endArrowMargin', 'horizontalMargin', 'verticalMargin', 'startHorizontalMargin', 'startVerticalMargin', 'endHorizontalMargin', 
'endVerticalMargin', 'otherBoxes', 'normalizeSide', 'getConnectionCoordinatesFromBoxSideShift', 'calcGridBaseBoxFromBoxAndDrawParams', 'buildPathGrid', 'convertDecartPointToGridPoint', 'findPathOnGrid', 'prependPathWithArrowStaffSegment', 'appendPathWithArrowStaffSegment', 'optimizePath', 'numericSortFn', 'xs', 'ys', 'points', 'permitted', 'waveForward', 'collectPath', 'ix', 'iy', 'distance', 'getGridPointNeighbors', 'x1', 'y1', 'x2', 'y2', 'sideToSide', 'Sch.template.Dependency', '\x3ctpl if\x3d"startArrow"\x3e\x3cdiv style\x3d"__SIDE__:{startArrow.side}px;top:{startArrow.top}px" class\x3d"sch-dependency sch-dependency-arrow sch-dependency-start-arrow sch-dependency-arrow-{startArrow.dir} {lineCls} {[ this.getSuffixedCls(values.cls, "-arrow") ]} {[ values.highlighted || "" ]}" \x3ctpl if\x3d"dependencyId"\x3edata-sch-dependency-id\x3d"{[values.dependencyId]}"\x3c/tpl\x3e\x3e\x3c/div\x3e\x3c/tpl\x3e\x3ctpl for\x3d"segments"\x3e\x3cdiv class\x3d"sch-dependency sch-dependency-line sch-dependency-line-{dir} {parent.lineCls} {[ parent.highlighted || "" ]} {[ this.getSuffixedCls(parent.cls, "-line") ]}" style\x3d"__SIDE__:{side}px;top:{top}px;\x3ctpl if\x3d"width !\x3d\x3d null \x26\x26 width !\x3d\x3d undefined"\x3ewidth:{width}px;\x3c/tpl\x3e\x3ctpl if\x3d"height !\x3d\x3d null \x26\x26 height !\x3d\x3d undefined"\x3eheight:{height}px\x3c/tpl\x3e" \x3ctpl if\x3d"parent.dependencyId"\x3edata-sch-dependency-id\x3d"{parent.dependencyId}"\x3c/tpl\x3e\x3e\x3c/div\x3e\x3c/tpl\x3e\x3ctpl if\x3d"endArrow"\x3e\x3cdiv style\x3d"__SIDE__:{endArrow.side}px;top:{endArrow.top}px" class\x3d"sch-dependency sch-dependency-arrow sch-dependency-end-arrow sch-dependency-arrow-{endArrow.dir} {lineCls} {[ this.getSuffixedCls(values.cls, "-arrow") ]} {[ values.highlighted || "" ]}" \x3ctpl if\x3d"dependencyId"\x3edata-sch-dependency-id\x3d"{dependencyId}"\x3c/tpl\x3e\x3e\x3c/div\x3e\x3c/tpl\x3e', 
'$1', 'Sch.view.dependency.Painter', 'schdependencypainter.default', 'data-sch-dependency-id', 'pathFinder', 'getPathFinderConfig', 'createPathFinder', 'getLineTpl', 'getRtl', 'setLineTpl', 'resetRowIntersectionCache', 'XTemplate', 'RectangularPathFinder', 'getCanvasCls', 'getUseDependencyRowIntersectionCache', 'filterByRowIntersections', 'generatePaintMarkup', 'innerHTML', 'syncContent', 'beforeEnd', 'insertHtml', 'getLineDefsForDependencies', 'path', 'findPath', 'getLineTplData', '[', 'dependencyIdAttr', 
'\x3d"', 'getDom', 'Zero height dependency line boxes detected', 'getRealLineThickness', 'lineCls', 'dependencyId', 'highlighted', 'getSegmentDir', 'convertSideToDir', 'getDateRange', 'getViewStartDate', 'getViewEndDate', 'allInRowIntersectionCache', 'isInRowIntersectionCache', 'isDependencyInTimeSpan', 'getIndexForCache', 'rowIntersectionCache', 'cachedDependencies', 'keys', 'Not implemented for scheduler with multi assignment', 'getTaskStore', 'addToRowIntersectionCacheIfNotPresent', 'createLineDef', 
'getHorizontalMargin', 'getVerticalMargin', 'getBidirectional', 'getStartArrowMargin', 'getStartArrowSize', 'getEndArrowMargin', 'getEndArrowSize', 'getFromSide', 'getToSide', 'Invalid dependency type: ', 'from', 'to', '-rtl', 'sideToDir', 'Sch.view.dependency.renderingstrategy.Abstract', 'Method is not allowed to call at this state', 'canDrawDependencies', '_depsToRender', '_depsRendered', "Can't render unstorred dependency", '{isHidden()}', '_scheduledRenderDetacher', 'scheduledRender', '_fsaState', 
'_scheduledRenderCancelId', 'rendering-start', 'hasListeners', '_renderPromise', '_renderPromiseResolve', '_renderPromiseReject', 'isDependencyCanvasPresent', 'getDependencyCanvas', 'paint', 'getPainter', 'getElementsForDependency', 'resolve', 'Promise', "Can't render unstored dependency", 'delegateRendering', 'Delegate rendering result must be an array', 'Delegate rendering result array length must be 2', 'rendering-progress', 'rendering-complete', 'rendering-canceled', 'asapCancel', 'sch_dependency_rendering_strategy.abstract', 
'Ext.mixin.Observable', 'then', 'Sch.view.dependency.renderingstrategy.Combined', 'sch_dependency_rendering_strategy.combined', 'bulk', 'delegateRenderingBulk', 'delegateRenderingAsync', 'getDepsPerStep', 'Sch.view.dependency.View', 'schdependencyview.base', 'Ext.dom.CompositeElementLite', 'sch-dependencyview-ct', 'sch-dependency-selected', 'sch-dependency-over', 'Dependency view requires a primary view to be configured in', 'Dependency view requires `Sch.mixin.GridViewCanvas` mixin to be mixed into scheduling view, or the corresponding interface to be implemented', 
'isFunctionProp', 'painter', 'getPainterConfig', 'createPainter', 'resetPainterCache', 'updatePainterCache', 'startDrawDependencies', 'getEnableDependencyDragDrop', 'dragZone', '-dep-dd', '.sch-terminal', 'getDragTipTpl', 'getDragZoneConfig', 'createDragZone', 'onDependencyDrop', 'getShowTooltip', 'getTipTpl', 'stopDrawDependencies', 'primaryViewDetacher', 'primaryViewLockableDetacher', 'primaryViewElDetacher', 'renderingStrategy', 'getDrawDependencies', 'isDependencyCanvasAvailable', 'createRenderingStrategy', 
'getPrimaryViewListeners', 'getPrimaryViewElListeners', 'ownerLockable', 'getPrimaryViewLockableListeners', 'getDependencyStoreListeners', 'renderAllDependencies', 'destroyRenderingStrategy', 'destroyDetachers', 'destroyDependencyCanvas', 'getAsyncRenderingDepsPerStep', 'Combined', 'renderingstrategy', 'getBulkRenderingDependencyLimit', 'onPrimaryViewItemAdd', 'onPrimaryViewItemRemove', 'onPrimaryViewItemUpdate', 'onPrimaryViewRefresh', 'onPrimaryViewExpandBody', 'onPrimaryViewCollapseBody', 'onPrimaryViewEventRepaint', 
'onPrimaryViewDependencyElPointerEvent', 'onDependencyStoreAdd', 'onDependencyStoreRemove', 'onDependencyStoreUpdate', 'onDependencyStoreRefresh', 'onDependencyStoreClear', 'Painter', 'DragZone', 'getCanvasLayer', 'isItemCanvasPresent', 'getCanvasSpecification', 'updateDependencies', 'renderDependencies', 'clearDependencies', 'getElementDependencyInternalId', 'getSelectedCls', 'unhighlight', 'getHighlightedDependencies', 'getOverCls', 'mouseover', 'mouseout', 'maybeSwitchRenderingStrategy', '.sch-terminal-hidden', 
'Sch.view.dependency.Mixin', 'initComponent', 'setupDependencyView', 'dependencyViewConfig', 'View', 'dependencyViewRelayDetacher', 'dependencyDragRelayDetacher', 'createDependencyView', 'setupDependencyViewRelay', 'dependencyviewready', 'getDependencyView', 'dependencyclick', 'dependencydblclick', 'dependencycontextmenu', 'dependencymouseover', 'dependencymouseout', 'Sch.panel.SchedulerGrid', 'widget.schedulergrid', 'widget.schedulerpanel', 'Sch.SchedulerPanel', 'schedulergridview', 'SchedulerPanel', 
'Sch.view.AllDayMode', 'Sch.view.AllDay', 'isCalendarContext', 'additionalEventCls', 'getColor', ';background-color: ', 'sch-all-day-header', 'resourcestore', 'dayAndWeek', 'G', 'relayedConfigs', 'mainSchedulerTimeAxis', 'mainSchedulerView', 'onMainTimeAxisReconfigure', 'onSchedulingViewUpdate', 'syncTimeAxisSpan', 'syncScroll', 'fixEventSelection', 'oldHeaderCtLayout', 'roundFlex', 'layout', 'onContainerGridAfterLayout', 'storedColumnWidth', 'resetStoredColumnWidth', 'syncLockedHeaderComponent', 
'lockedHeaderPartner', 'getDesiredComponentHeight', 'lastTimeTdHeight', 'normalView', 'addPartner', 'clearPartnerSelection', 'clearSelection', 'getSelectionMode', 'Sch.panel.TimelineTreePanel', 'widget.timelinetree', 'treepanel', 'Sch.panel.SchedulerTree', 'widget.schedulertree', 'Sch.panel.SchedulerTree only support horizontal mode', 'refreshCounter', 'scrollable', 'getSpacerXY', 'scrollHeight', 'bufferedrefresh', 'bodyHeight', 'isIE8', 'getBorderWidth', 'bodyTop', 'elements', 'viewClientHeight', 
'teleported', 'numFromEdge', 'lastScrollDirection', 'offsetTop', 'getFirstVisibleRowIndex', 'Ext.grid.CellContext', 'isGreaterThanOrEqual', 'Sch.patches.DateField', 'Ext.form.field.Date', '6.5.1.345', 'rawDate', 'onTabOut', 'Sch.patches.DragZoneDupIds', 'https://www.sencha.com/forum/showthread.php?338467-DragZone-duplicates-DOM-ids-which-leads-to-error-if-one-Ext-get()s-duplicated-element', 'patches/005_dragzone_dup_ids.t.js', 'Drag zone clones dragged element into drag status proxy without substituting cloned element id, thus we might', 
'hit the case when there are two or more elements with the same id in the DOM. If such original element has been', 'accessed before via Ext.get(), i.e. it is cached in Ext.dom.Element cache, then accessing the similar element', 'inside drag proxy with Ext.get() will lead to duplicate ids exception thrown from Ext.get()', 'onStartDrag', 'Sch.patches.Element', 'pxRe', 'offsetParent', 'Sch.patches.Element_6_5', 'isIE11p', 'Sch.patches.TablePanelScroll6.2', 'Ext.panel.Table', 'resumePartnerSync', 'ensureLockedVisible', 
'isEntity', 'callback', 'deferredEnsureVisible', 'doEnsureVisible', 'getCellSelector', 'Ext.view.Table', 'Ext.dom.TouchAction', 'onTouchEnd', 'TouchAction', 'Sch.plugin.CellPlugin', 'plugin.scheduler_cellplugin', 'Ext.form.field.Base', 'sch-cellplugin-highlighter', 'sch-cellplugin-highlighter-editing', 'sch-cellplugin-active', '\x3cdiv class\x3d"{cls}" style\x3d"width: {width}px; height: {height}px;"\x3e', '\x3cdiv class\x3d"sch-cellplugin-border sch-cellplugin-border-horizontal sch-cellplugin-border-top"\x3e\x3c/div\x3e', 
'\x3cdiv class\x3d"sch-cellplugin-border sch-cellplugin-border-horizontal sch-cellplugin-border-bottom"\x3e\x3c/div\x3e', '\x3cdiv class\x3d"sch-cellplugin-border sch-cellplugin-border-vertical sch-cellplugin-border-left"\x3e\x3c/div\x3e', '\x3cdiv class\x3d"sch-cellplugin-border sch-cellplugin-border-vertical sch-cellplugin-border-right"\x3e\x3c/div\x3e', 'schedulingView', 'lockedView', 'keyNav', 'itemkeydown', 'onKeyUp', 'onKeyDown', 'onKeyRight', 'onKeyLeft', 'onKeyTab', 'onKeyEnter', 'onKeyEsc', 
'itemadd', 'onItemAdd', 'handleSingleClickTask', 'handleCellClick', 'onContainerClick', 'destroyHighlighter', 'onCellClick', 'onCellDblClick', 'onEventDblClick', 'onEditorKeyDown', 'onGroupCollapse', 'onGroupExpand', 'moveContainerElToSecondaryCanvas', 'onViewModelUpdate', 'onBeforeReconfigure', 'bindResourceStore', 'onLockedCellClick', 'onBeforeItemKeyDown', 'tickIndex', 'shiftKey', 'editPrevious', 'editNext', 'TAB', 'onEditorKeyEnter', 'ENTER', 'completeEdit', 'beginEditBelow', 'getEventOrCell', 
'showEditorInCell', 'getResourceIndex', 'refreshCell', 'resource', 'isSpecialKey', 'renderElement', 'Base', 'form', 'setMaxWidth', 'frameCls', '.sch-cellplugin-clone', 'selContext', 'sch-cellplugin-clone', 'frameTemplate', 'Helper', 'Element', 'setVisibilityMode', 'applyVisibilityMode', 'inputEl', 'dblClickTimeout', 'delay', 'singleClickEditing', 'handleCellDblClick', 'celldblclick', 'resourceIndex', 'isCellContext', 'getCellEvents', 'beforeselect', 'onBeforeSelect', 'addSelection', 'alignEditor', 
'onAfterSelect', 'getContextFromPosition', 'alignEditorWithRecord', 'alignEditorWithCell', 'alignEditorToBox', 'getRow', 'moveUp', 'moveDown', 'moveLeft', 'moveRight', 'walkRecs', 'sortBy', 'findPreviousIndex', 'findNextIndex', 'eventIndexInCell', 'stripPosition', 'getNbrOfTicks', 'getAbove', 'getBelow', 'getPrevious', '__oldHeight', 'expandResourceRow', 'getNewBottomEditorCoordinate', 'beforecelledit', '.sch-cellplugin-border', 'editingCls', 'getResourceRecord', 'recordNode', 'getMaxWidth', 'begincelledit', 
'getValue', 'beforecancelcelledit', 'stopEditing', 'cancelcelledit', 'beforecompletecelledit', 'completecelledit', 'collapseResourceRow', 'Sch.plugin.DragSelector', 'plugin.scheduler_dragselector', 'onBeforeStart', 'onStart', 'onEnd', 'setCmp', 'onSchedulingViewRender', 'bodyRegion', 'getEventNodes', 'eventData', 'sm', 'updateSelection', 'region', 'deselectNode', 'setDisplayed', 'initEl', 'sch-drag-selector', 'Sch.plugin.mixin.Editor', 'beforeShowRecord', 'beforeEditorHide', 'afterShowRecord', 'sch-event-editor-ignore-click', 
'normal', 'saveOnEnter', 'saveAndCloseOnEnter', 'setRecurringEvents', 'onCmpAfterRender', 'onCmpEventStoreChange', 'onCmpResourceStoreChange', 'onAfterEventAdd', 'onAfterEventSave', 'onAfterEventDelete', 'hideDragProxy', 'onActivateEditor', 'addRepaintListener', 'isSchedulerGrid', 'isSchedulerTree', 'eventRepaintListener', 'onEventRepaint', 'setRecord', 'alignToEl', 'alignEditorToElement', 'loadRecord', 'isEventEditor', 'scrollNewEventIntoView', 'scrollEventIntoView', 'hideEditor', 'isWindow', 'hideOnBlur', 
'mouseDownAction', 'registerEditorInComponent', 'dragProxyEl', 'getFloatingComponents', 'ignoreCls', 'isEventWithinComponent', 'ignoreCheckMaxDepth', 'mask', 'getSelectorToAlignEditorBy', 'Sch.widget.mixin.CustomizableRecordForm', 'customizableRecordForm', 'beforeCustomizableRecordLoad', 'beforeCustomizableRecordUpdate', 'afterCustomizableRecordUpdate', 'customizableFieldNames', 'renameCustomizableFieldNamesOnce', 'customizableFieldNamesRenamed', 'renameCustomizableFieldNames', 'extractCustomizableFieldNames', 
'getForm', 'findField', 'hiddenfield', 'getFieldValues', 'buildMissingCustomizableRecordField', 'updateAllFields', 'autogeneratedFieldsToRemove', 'addMissingCustomizableRecordFields', 'Sch.widget.recurrence.field.FrequencyComboBox', 'Ext.form.field.ComboBox', 'widget.frequencycombo', '\x3cul class\x3d"', 'list-plain"\x3e', '\x3cli class\x3d"', 'boundlist-item {cls}"\x3e{text}\x3c/li\x3e', '\x3c/ul\x3e', 'local', 'emptyText', 'buildOptions', 'Sch.widget.recurrence.field.RecurrenceComboBox', 'widget.recurrencecombo', 
'L{None}', 'custom', 'sch-recurrencecombo-split', 'customValue', 'splitCls', 'isCustomRecurrence', 'Sch.widget.recurrence.LegendButton', 'Ext.button.Button', 'widget.recurrencelegendbutton', 'refreshLegend', 'getLegend', 'Legend', 'setText', 'Sch.widget.recurrence.field.PositionsComboBox', 'Ext.data.ArrayStore', 'widget.positionscombobox', 'sch-recurrenceformpositions-split', '1', 'defaultValue', '-1', 'position-1', 'buildDayNumbers', 'findExact', 'Sch.widget.recurrence.field.DaysComboBox', 'widget.dayscombo', 
'sch-recurrenceformdays-split', 'buildWeekDays', 'Sch.widget.recurrence.field.DaysSegmentedButton', 'widget.dayssegmentedbutton', '0 0 10 0', 'buildItems', 'Sch.widget.recurrence.field.MonthDaysSegmentedButton', 'widget.monthdayssegmentedbutton', 'MAX_DAYS_IN_MONTH', 'Sch.widget.recurrence.field.MonthsSegmentedButton', 'widget.monthssegmentedbutton', 'Sch.widget.recurrence.field.StopConditionComboBox', 'widget.stopconditioncombo', 'sch-combo-with-no-value', 'Sch.widget.recurrence.Form', 'Ext.form.Panel', 
'Ext.layout.container.HBox', 'Ext.layout.container.VBox', 'Ext.form.field.Display', 'Ext.form.field.Number', 'Ext.form.field.Radio', 'widget.recurrenceform', 'vbox', 'stretch', 'radio', 'checkbox', 'Recurrence', 'setupCustomizableRecordForm', 'frequencyField', 'frequencycombo', 'onFrequencyFieldChange', 'intervalField', 'numberfield', '0 5 0 0', 'intervalUnit', 'displayfield', 'daysButtonField', 'dayssegmentedbutton', 'daysField', 'monthDaysRadioField', 'radiofield', 'radioFieldName', 'togglePositionAndDayFields', 
'monthdaysButtonField', 'monthdayssegmentedbutton', 'monthDaysField', 'monthsButtonField', 'monthssegmentedbutton', 'monthsField', 'positionAndDayRadioField', 'positionAndDayCheckboxField', 'checkboxFieldName', 'stopRecurrenceField', 'stopconditioncombo', 'onStopRecurrenceFieldChange', 'countField', 'countUnit', 'countFieldContainer', 'fieldcontainer', 'hbox', 'datefield', 'intervalContainer', 'positionsCombo', 'positionscombobox', 'positionsField', 'MONTHLY|YEARLY', 'daysCombo', 'dayscombo', 'positionDayContainer', 
'[forFrequency]', 'forFrequency', 'toggleStopFields', 'Sch.widget.recurrence.Dialog', 'Ext.window.Window', 'widget.recurrencedialog', 'sch-recurrencedialog', 'L{Repeat event}', 'recurrenceDialogCls', 'recurrenceform', '10 10 0 10', 'buttons', 'onSaveClick', 'onCancelClick', 'saveHandler', 'updateRecord', 'close', 'pickerfield', 'getPicker', '[floating]', 'Sch.widget.recurrence.EventEditorMixin', 'Ext.form.field.Hidden', 'getRecurrableEventDefaultFields', 'getRecurrableEventFloatingComponents', 'onRecurrableEventLoad', 
'onRecurrableEventBeforeDelete', 'onRecurrableEventBeforeSave', 'onEditorDestroy', 'recurrenceDialog', 'recurrenceRule', 'recurrenceCombo', 'recurrencecombo', 'onRecurrenceComboChange', 'recurrenceLegendButton', 'recurrencelegendbutton', 'onRecurrenceLegendClick', 'recurrencedialog', 'recurrenceDialogSaveHandler', 'recurrenceDialogCancelHandler', 'onRecurrableEventStartDateChange', 'delete', 'showRecurrenceDialog', 'getStartDateValue', 'captureRecurrence', 'makeRecurrence', 'capturedRecurrence', 
'loadingRecord', 'inOnRecurrenceUpdate', 'onRecurrenceUpdate', 'getCapturedRecurrence', 'setEventStartDate', 'Sch.widget.EventEditor', 'widget.eventeditorform', 'plugin.scheduler_eventeditorform', 'Ext.form.Label', 'Ext.form.field.Time', 'Ext.Button', 'sch-eventeditor', 'EventType', 'eventeditorCls', 'setupRecurrableEventEditorMixin', 'buildButtons', 'container', 'defaultFields', '5 5 5 5', '100%', 'getDefaultFields', 'fieldsPanelConfig', '#defaultFields', 'tagName', 'input', 'save', 'suspendDateFieldsChange', 
'startTimeField', 'endTimeField', 'resumeDateFieldsChange', 'toggleAllDayFields', '-name-field', 'textfield', 'nameText', 'nameFieldConfig', 'showResourceField', 'resourceField', '-resource-field', 'combo', 'resourceText', 'resourceFieldConfig', 'merge', '-all-day-field', 'checkboxfield', 'allDayText', 'onAllDayChange', 'allDayFieldConfig', '-start-date-field', 'startDateText', 'onDatesChange', 'startDateConfig', '-start-time-field', '-timefield', 'timefield', 'timeFormat', '0 0 0 10', 'startTimeConfig', 
'-end-date-field', 'endDateText', 'endDateConfig', '-end-time-field', 'endTimeConfig', 'saveButton', 'deleteButton', 'suspendCheckChange', 'reset', 'isNewRecord', 'setResourcesValue', 'currentForm', 'typeField', 'dynamicForm', '\x3e form[EventType]', '\x3e form[EventType\x3d', "Can't find form for with EventType equal to ", 'setActiveItem', 'getLayout', "Can't switch active component in the 'fieldsPanel'", 'loadevent', 'setHidden', 'fieldId', '-picker', 'valueField', 'displayField', 'setDisplayTpl', 
'setStore', 'doSave', 'beforeeventsave', 'isSavingEvent', 'onBeforeSave', 'assignResourcesToEvent', 'aftereventadd', 'aftereventsave', 'onAfterSave', '[isFormField]:not([excludeForm])', 'isHidden', 'combineDateAndTime', 'getResourcesValue', 'getEndDateValue', 'deleteEvent', 'doDeleteEvent', 'beforeeventdelete', 'aftereventdelete', 'saveText', 'showDeleteButton', 'deleteText', 'onDeleteClick', 'cancelButton', 'cancelText', 'Sch.plugin.EditorWindow', 'widget.scheduler_editorwindow', 'plugin.scheduler_editorwindow', 
'sch-eventeditor-window', 'fit', 'eventeditorform', 'editorConfig', 'initEditor', '[floating\x3dtrue]', 'floatAboveFloatingContainer', 'addIgnoreCls', 'setTitle', 'tl-tr', '?', 'setZIndex', 'Sch.plugin.EventEditor', 'widget.eventeditor', 'plugin.scheduler_eventeditor', 'sch-eventeditor-floating-container', 'floatingCls', 'bl', 'Sch.plugin.EventTools', 'Ext.Container', 'plugin.scheduler_eventtools', 'b-t', 'tool', 'sch-tool', 'sch-tool-over', 'Must define an items property for this plugin to function correctly', 
'sch-event-tools', 'defaultAlign', 'onOperationStart', 'onOperationEnd', 'onEventMouseEnter', 'onContainerMouseLeave', 'onContainerMouseEnter', 'hideTimer', 'clearTimeout', 'targetNode', 'visibleFn', 'hideDelay', 'Sch.plugin.exporter.AbstractExporter', 'abstractexporter', '\x3cdiv class\x3d"sch-export-header" style\x3d"height:{height}px; width:{width}px"\x3e\x3ch2\x3e{pageNo}/{totalPages}\x3c/h2\x3e\x3c/div\x3e', '\x3c!DOCTYPE html\x3e\x3chtml class\x3d"', 'border-box {htmlClasses}"\x3e\x3chead\x3e\x3cmeta content\x3d"text/html; charset\x3dUTF-8" http-equiv\x3d"Content-Type" /\x3e\x3ctitle\x3e{title}\x3c/title\x3e{styles}\x3c/head\x3e\x3cbody class\x3d"', 
'webkit sch-export {bodyClasses}"\x3e{header}\x3cdiv id\x3d"{id}" class\x3d"{componentClasses}" style\x3d"height:{bodyHeight}px; width:{totalWidth}px; position: relative !important"\x3e{HTML}\x3c/div\x3e{footer}\x3c/body\x3e\x3c/html\x3e', 'pageHeaderHeight', 'headerHeight', 'pageFooterHeight', 'footerHeight', 'exporterId', 'getUserHeaderTplData', 'getUserFooterTplData', 'tableSelector', 'collectRowsStepTimer', 'collectRowsTimer', 'scrollToTimer', 'timer1', 'timer2', 'headerTpl', 'getTplInstance', 
'footerTpl', 'isTemplate', 'ie\\d?|', 'gecko', 'g', ' sch-ie-export', 'getComponent', 'lockedBodySelector', '#', 'normalBodySelector', 'lockedHeader', 'normalHeader', 'printHeight', 'paperHeight', 'showHeader', 'exportConfig', 'showFooter', 'saveComponentState', 'initDependencyPainter', 'landscape', 'paperWidth', 'getBufferedRenderer', 'range', 'complete', 'dateFrom', 'dateTo', 'current', 'completedata', 'ticks', 'getTicks', 'rowsRange', 'findVisibleRowsRange', 'getTranslateURLsToAbsolute', 'link[rel\x3d"stylesheet"], style', 
'origin', 'href', 'setAttribute', 'outerHTML', 'styleSheet', '\x3cstyle type\x3d"text/css"\x3e', 'cssText', '\x3c/style\x3e', 'AbstractTimeSpan', 'setTimeColumnWidth', 'lockedBox', 'suspendInfiniteScroll', '_renderDelay', 'forEachTimeSpanPlugin', 'normalBox', 'setComponentRange', 'cellSize', 'setCellSize', 'beforeExport', 'prepareColumns', 'expandAllBeforeExport', 'expandAll', 'fitComponentIntoPage', 'stylesheets', 'getStylesheets', 'depViewBeforeRefreshDetacher', 'updateCanvasLayer', 'depView', 
'restoreComponentState', 'restoreInfiniteScroll', 'afterExport', 'restoreSettings', 'columnWidth', 'normalWidth', 'normalLeft', 'lockedWidth', 'lockedCollapse', 'normalCollapse', 'restoreComponentScroll', 'lockedScrollX', 'normalScrollX', 'scrollY', 'Sch.plugin.exporter.AbstractExporter: [extractPages] "callback" has to be provided.', 'enableGarbageCollector', 'GarbageCollector', 'normalRows', 'lockedRows', 'extractedPages', 'numberOfPages', 'lockedRowsHeight', 'normalRowsHeight', 'firstExportedRowOffset', 
'secondaryCanvasOffset', '_abort', 'setPaperSize', 'setComponent', 'prepareComponent', 'callbacks', 'collectRows', 'collectRowsTimerTimeout', 'renderPages', 'restoreComponent', 'submitPages', 'Sch.plugin.exporter.AbstractExporter: [getExpectedNumberOfPages] Abstract method called.', 'preparePageToCommit', 'beforecommitpage', 'getExpectedNumberOfPages', 'commitpage', 'fillRecordRelatedBoxes', 'onRowsCollected', 'Sch.plugin.exporter.AbstractExporter: [onRowsCollected] Abstract method called.', 'iterateTimeout', 
'canStartRowsCollecting', 'depViewRefreshBlocker', 'isBuffered', 'initFirstExportedRowOffset', 'collectRowsStep', 'iterateAsync', 'getScrollTop', 'getRowVisibilityThreshold', 'collectLockedRow', 'collectNormalRow', 'collectrows', 'callAsync', 'html', 'applyPageTpl', 'getPageTplData', 'getTpl', 'getHeaderTpl', 'headerTplDataFn', 'headerTplDataFnScope', 'getHeaderTplData', 'src', 'img', 'getFooterTpl', 'footerTplDataFn', 'footerTplDataFnScope', 'getFooterTplData', 'getBodyClasses', 'getComponentClasses', 
'applyHeaderTpl', 'applyFooterTpl', ' of ', 'getCurrentPage', 'getItemSelector', 'getLockedGridBody', 'fillLockedGrid', 'fillNormalGrid', 'emptyLockedGrid', 'appendRows', 'emptyNormalGrid', 'getNormalGridBody', 'row', 'getTotalHeight', 'bufferedHeightMargin', 'getLockedGridWidth', 'box-inner', '.sch-secondary-canvas', '.sch-remove', '0px', 'transform', '.sch-column-line', '-targetEl', '-innerCt', 'grid-scroll-container', 'grid-scroll-body', 'overflow-y', 'grid-view', 'margin', 'grid-scroll-container ', 
'scroller-spacer', 'setCurrentPage', '_oldStart', '_oldEnd', '_oldScrollX', 'eventBoxes', 'exporter', 'dependencyPainter', 'clonePainter', 'dependencyPainterMembers', 'dependenciesHtml', 'Sch.plugin.exporter.SinglePage', 'singlepage', 'getTotalSize', 'px*', 'startPage', 'fillGrids', 'commitPage', 'onPagesExtracted', '.sch-zone', '.sch-dependencyview-ct', 'overflow', 'Sch.plugin.exporter.MultiPage', 'multipage', 'depsTopOffset', 'rowPageIndex', 'columnPageIndex', 'pagesPerColumn', 'buildPages', 'buildPageFrames', 
'pageFrames', 'rowIteratorStep', 'rowIndex', 'leftHeight', 'lockeds', 'normals', 'rowsHeight', 'pageFrame', 'lockedColumnPages', 'leftWidth', 'removeHiddenLockedColumns', 'normalGridOffset', 'normalGridWidth', 'removeInvisibleEvents', 'showLockedColumns', 'startOffset', 'getVisibleColumns', 'lockedGridOffset', 'lockedGridWidth', 'border-style', 'calculateLockedColumnPages', 'buildPageFrame', 'getExpectedColumnsNumber', 'getExpectedPagesPerColumn', 'lockedColumns', ' (column: ', ', row: ', 'removeNode', 
'lockedHidden', 'grid-inner-normal', 'normalHidden', 'Sch.plugin.exporter.MultiPageVertical', 'multipagevertical', 'visibleColumns', 'visibleColumnsWidth', 'minAverageColumnWidth', 'fitLockedColumnWidth', 'minRowHeight', '_restoreColumnWidth', 'Sch.widget.ResizePicker', 'Ext.Panel', 'widget.dualrangepicker', 'position:absolute; margin:5px', 'horizontalCfg', 'dialogConfig', 'verticalCfg', 'scrollerDisabled', 'dockedItems', 'margin-top:10px', 'stateful', 'exporter_resize_vertical', 'onSliderChange', 
'onSliderChangeComplete', 'slider', 'margin-left:28px', 'exporter_resize_horizontal', 'sch-ux-range-picker', 'valueHandle', 'sch-ux-range-value', 'span', 'valueSpan', 'updateValuesFromHandles', 'setValues', 'onBodyClick', 'getAvailableHeight', 'getValuesFromXY', 'maxValue', 'minValue', 'getXYFromValues', 'positionValueText', 'setValueText', 'updatePosition', 'changecomplete', 'Sch.widget.ColumnPicker', 'sch-columnpicker-list', 'fa fa-check', 'processColumns', 'getColumnTitle', 'columnEmptyRegExp', 
'columnEmptyText', 'selectedItemCls', 'Sch.widget.ExportDialogForm', 'Ext.form.FieldContainer', 'Ext.form.field.Checkbox', 'widget.export_dialog_form', 'fieldDefaults', '99%', 'createFields', 'rangeField', 'onRangeChange', 'exportersField', 'onExporterChange', 'dateFromField', 'dateToField', 'showShowHeaderField', 'showShowFooterField', 'onlyVisibleRows', 'resizePicker', '\x26cellSize[0]\x3d', '\x26cellSize[1]\x3d', 'columnPicker', 'getSelectedColumns', '\x3ctable class\x3d"sch-fieldcontainer-label-wrap"\x3e\x3ctd width\x3d"1" class\x3d"sch-fieldcontainer-label"\x3e', 
'\x3ctd\x3e\x3cdiv class\x3d"sch-fieldcontainer-separator"\x3e\x3c/div\x3e\x3c/table\x3e', 'showResizePicker', '10 20', 'resizerHolder', 'adjustCols', 'adjustColsAndRows', 'dateRangeFromText', 'sch-exportdialogform-date', 'dateRangeFormat', 'defaultFormat', 'dateRangeRestriction', 'applyStateful', 'dateFromFieldConfig', 'dateRangeToText', 'dateToFieldConfig', 'datesHolder', 'specifyDateRange', 'showColumnPicker', 'columnPickerLabel', 'sch-export-dialog-columns', 'columnPickerConfig', 'showDPIField', 
'dpiField', 'dpiFieldLabel', 'sch-export-dialog-dpi', 'DPI', 'dpiFieldConfig', 'showHeaderField', 'showHeaderLabel', 'sch-export-dialog-header', 'applyStatefulFull', 'showHeaderFieldConfig', 'showFooterField', 'showFooterLabel', 'sch-export-dialog-footer', 'showFooterFieldConfig', 'formatField', 'combobox', 'formatFieldLabel', 'pageFormats', 'A5', 'A4', 'A3', 'Letter', 'Legal', 'formatFieldConfig', 'orientationField', 'orientationFieldLabel', 'orientationPortraitText', 'portrait', 'orientationLandscapeText', 
'orientationFieldConfig', 'rangeFieldLabel', 'sch-export-dialog-range', 'completeViewText', 'completeDataText', 'dateRangeText', 'currentViewText', 'rangeFieldConfig', 'exportersFieldLabel', 'defaultExporter', 'sch-export-dialog-exporter', 'exporters', 'exportersFieldConfig', 'showRowsRangeField', 'rowsRangeField', 'rowsRangeLabel', 'sch-export-dialog-rowsrange', 'allRowsLabel', 'visibleRowsLabel', 'rowsRangeFieldConfig', 'stateId', '_', 'applyFieldState', 'getFieldState', 'disableFields', 'Sch.widget.ExportDialog', 
'Sch.widget.PdfExportDialog', 'Ext.ProgressBar', 'widget.exportdialog', 'sch-exportdialog', 'Sch.widget.ExportDialog: doExportFn needs to be set in the config', 'export_dialog_form', 'pageFormats,startDate,endDate,rowHeight,columnWidth,defaultExporter,exporters,dateRangeFormat,exportConfig,showColumnPicker,columnPickerConfig,showDPIField,dpiFieldConfig,showShowHeaderField,showShowFooterField,showResizePicker,stateful,stateId,dateRangeRestriction,showRowsRangeField,rowsRangeFieldConfig,rangeFieldConfig,formatFieldConfig,orientationFieldConfig,exportersFieldConfig', 
'formConfigs', 'form_', 'isForm', 'mapFormConfigs', 'buildForm', 'buttonsPanel', 'buttonsPanelScope', 'progressBar', 'buildProgressBar', 'medium', 'export', 'exportButtonText', 'onExportButtonPress', 'exportButtonConfig', 'cancelButtonText', 'onCancelButtonPress', 'cancelButtonConfig', 'doExportFnScope', 'onExportSuccess', 'onExportFailure', 'doExportFn', '#export', 'defaultFormXType', 'progressBarText', '4px 10px 10px 10px', 'Sch.plugin.Export', 'Sch.plugin.PdfExport', 'plugin.scheduler_export', 
'pdf', 'exportersIndex', 'exportDialogConfig', 'WebSocket', 'enableWebSocket', 'fileFormat', 'setFileFormat', 'buildExporters', 'initExporters', 'bindExporters', 'showExportDialog', 'doExport', 'isExporter', 'createExporter', 'bindExporter', 'onPageCommit', 'onRowCollected', 'translateURLsToAbsolute', 'exporterConfig', 'getExporterConfig', 'AbstractExporter', 'getActiveExportDialog', 'buildExportDialog', 'setActiveExportDialog', 'onExportDialogDestroy', 'onExportProgress', 'exportDialogClassName', 
'buildExportDialogConfig', 'getPageFormats', 'gridcolumn[ignoreInExport!\x3dtrue]', 'cancelExport', 'updateProgress', 'updateText', 'generalError', 'alert', 'Msg', 'pageSizes', 'getExportConfig', 'getExporter', 'beforeexport', 'myBeforeExport', 'extractPages', 'currentAjaxRequest', 'currentWebSocketRequest', 'unmask', 'progressupdate', 'requestingPrintServer', 'doSocketRequest', 'doRequest', 'fetchingRows', 'builtPage', 'myAfterExport', 'hideExportDialogTimer', 'hideExportDialogTimeout', 'openAfterExport', 
'ExportedPanel', 'open', 'a', 'download', 'openInNewTab', '_blank', 'error', 'showError', 'printServer', 'ws', 'getPaperFormat', 'getParameters', 'onopen', 'send', 'onmessage', '/', 'file', 'msg', 'debug', 'onRequestSuccess', 'onRequestFailure', 'getAjaxConfig', 'Print server URL is not defined, please specify printServer config', 'write', 'document', 'testResponse', 'foo', 'Wrong server response received', 'status', 'statusText', 'win', 'exportstart', 'sch-export-mask', 'afterexport', 'openAfterExportTimer', 
'Sch.plugin.HeaderTooltip', 'plugin.scheduler_headertooltip', 'M j, Y H:i', 'sch-header-tooltip', 'tipCls', 'delegateCls', 'beforeTipShow', 'dataset', 'encodeDateFormat', 'getTipContent', 'Sch.plugin.HeaderZoom', 'plugin.scheduler_headerzoom', 'onModeChange', 'onTimeAxisColumnRender', 'headerRegion', 'beforeheaderzoom', 'Sch.plugin.Pan', 'plugin.scheduler_pan', 'onRender', 'disableOnKey', 'KEY_SHIFT', 'KEY_CTRL', 'altKey', 'KEY_ALT', ' \x3e div \x3e *', 'mouseX', 'mouseY', 'isGecko', 'enableVerticalPan', 
'Sch.plugin.Printable', 'Ext.window.Toast', 'Sch.plugin.Print', 'plugin.scheduler_printable', 'plugin.scheduler_print', '\x3c!DOCTYPE HTML\x3e', '{docType}\x3chtml class\x3d"', 'border-box {htmlClasses}"\x3e\x3chead\x3e\x3cmeta content\x3d"text/html; charset\x3dUTF-8" http-equiv\x3d"Content-Type" /\x3e\x3ctitle\x3e{title}\x3c/title\x3e{styles}\x3c/head\x3e\x3cbody class\x3d"sch-print-body {bodyClasses}"\x3e\x3cdiv class\x3d"sch-print-ct" style\x3d"width:{totalWidth}px"\x3e\x3ctpl for\x3d"pages"\x3e{html}\x3c/tpl\x3e\x3c/div\x3e\x3cscript type\x3d"text/javascript"\x3e{setupScript}\x3c/script\x3e\x3c/body\x3e\x3c/html\x3e', 
'{header}\x3cdiv id\x3d"{id}" class\x3d"{componentClasses}" style\x3d"height:{bodyHeight}px; width:{totalWidth}px; position: relative !important"\x3e{HTML}\x3c/div\x3e{footer}\x3cdiv style\x3d"page-break-after:always;"\x3e\x3c/div\x3e', 'window.onload \x3d function(){ document._loaded  \x3d true;if ({autoPrintAndClose}) {window.print();if (!{isChrome}) window.close();}}', 'mainTpl', 'dialogTitle', 'print', 'getPopupBlockedMessageConfig', 'toast', 'disablePopupBlocking', 'popupBlockerDetected', 'pageTpl', 
'beforePrint', 'afterPrint', 'printPages', 'sch-print-normal-rows-ct', 'fakeBackgroundColor', 'sch-print-fake-background', 'sch-print-locked-rows-ct', 'removeSecondaryCanvas', 'border-right-width', 'sch-print-normalheader', 'sch-print-lockedheader', 'wrapHeaders', '\x3cdiv class\x3d"sch-print-header-wrap"\x3e\x3c/div\x3e', 'wrap', 'bodyWrap', 'absolute', 'docType', '{isChrome}', 'isChrome', '{autoPrintAndClose}', 'autoPrintAndClose', 'setupScriptTpl', 'prepareMainTplData', 'printgrid', 'closed', 
'showPopupBlockedMessage', 'printWindow', 'onBeforePageCommit', 'Sch.plugin.SimpleEditor', 'Ext.Editor', 'plugin.scheduler_simpleeditor', 'Ext.form.TextField', 'sch-simpleeditor', '.sch-event-inner', 'boundEl', 'onSchedulerRender', 'renderTo', 'eventEl', 'delegate', 'startEdit', 'onStartEdit', 'onAfterEdit', 'onTriggerEvent', 'allowBlur', 'newEventText', 'Sch.plugin.Split', 'Ext.menu.Menu', 'plugin.scheduler_split', 'sch-dosplitmerge', 'sch-grid-split', 'sch-grid-split-resize-handle', 'sch-grid-split-clone', 
'__cloned', 'setupGrid', 'createMenu', 'addGridListeners', 'isSplit', 'splitGrid', 'gridClone', 'cloneGrid', 'gridCloneCls', 'docked .', 'resizable-handle-north', 'resizeHandleCls', 'onMainGridResize', 'setupSynchronization', 'showAt', 'splitMergeMenuItem', 'mergeText', 'splitText', 'grid-cell', 'splitPosition', 'splitMergeMenuItemId', 'onSplitMergeMenuItemClick', 'menuConfig', 'onMenuTriggerEvent', 'onBeforeGridModeChange', 'cloneColumn', 'getGridViewHeight', 'getCloneMaxHeight', 'staticCloneConfig', 
'getCloneConfig', 'flex', 'setupColumnSync', 'onColumnResize', 'onColumnsChanged', 'setMaxHeight', 'headercontainer', 'Sch.plugin.SummaryBar', 'plugin.scheduler_summarybar', 'sch-summaryrow-title', 'sch-summaryrow-view', '\x3ctable style\x3d"width: {totalWidth}px;" cellpadding\x3d"0" cellspacing\x3d"0"\x3e\x3ctr\x3e\x3ctpl for\x3d"bars"\x3e\x3ctd style\x3d"width: {width}px;"\x3e\x3cdiv class\x3d"sch-summaryrow-bar-wrapper"\x3e\x3cdiv class\x3d"sch-summaryrow-bar {cls}" style\x3d"{style}" {attr}\x3e\x3cspan class\x3d"sch-summaryrow-bar-text"\x3e{value}\x3c/span\x3e\x3c/div\x3e\x3c/div\x3e\x3c/td\x3e\x3c/tpl\x3e\x3c/tr\x3e\x3c/table\x3e', 
'initBars', 'setupListeners', 'titleContainer', 'titleContainerCls', '\x3cspan class\x3d"sch-summaryrow-title-text" style\x3d"line-height: ', 'px;"\x3e', 'totalText', '\x3c/span\x3e', 'barContainer', 'barContainerCls', 'renderSummaryRow', 'onGridModeChange', 'destroyBars', 'buildRenderData', 'getScheduledEventsInTimeSpan', 'Sch.plugin.TimeGap', 'plugin.scheduler_timegap', 'populateStore', 'eventStoreListeners', 'getZoneCls', 'Sch.plugin.TreeCellEditing', 'plugin.scheduler_treecellediting', 'beforeedit', 
'onMyBeforeEdit', '_startEdit', 'isTaskField', 'setSuppressTaskUpdate', 'getEditor', '_cancelEdit', 'myCancelEdit', 'editingstart', 'isTimelineTreePanel', 'isTimelineGridPanel', 'applyChanges', 'task', 'instantUpdate', 'setTask', '_valueFromTaskField', 'checkReadOnly', 'originalValue', 'Sch.preset.ViewPresetHeaderRow', 'Sch.util.Debug', 'schedulerDebugWin', 'padding:10px', '\x3cbr/\x3e', '.sch-schedulerpanel', 'No scheduler component found', 'Your event store must be or extend Sch.data.EventStore', 
'Scheduler view start: ', ', end: ', 'No store configured', 'No event store configured', ' records in the resource store', ' records in the eventStore', 'Your event model must extend Sch.model.Event', 'Your resource model must extend Sch.model.Resource', 'idProperty on the event model is incorrectly setup, value: ', 'idProperty on the resource model is incorrectly setup, value: ', ' events present in the DOM', 'The eventStore reader is misconfigured - The StartDate field is not setup correctly, please investigate', 
'StartDate is configured with dateFormat: ', 'See Ext JS docs for information about different date formats: http://docs.sencha.com/extjs/#!/api/Ext.Date', 'The eventStore reader is misconfigured - The EndDate field is not setup correctly, please investigate', 'EndDate is configured with dateFormat: ', 'reader', 'jsonData', 'Dumping jsonData to console', 'rawData', 'Records in the event store:', '. ', 'Event store has no data. Has it been loaded properly?', 'nodeStore', 'Records in the resource store:', 
'Resource store has no data.', 'Everything seems to be setup ok!', 'Sch.view.dependency.renderingstrategy.Async', 'sch_dependency_rendering_strategy.async', 'Sch.view.dependency.renderingstrategy.Bulk', 'sch_dependency_rendering_strategy.bulk', 'Sch.widget.PagingToolbar', 'Ext.toolbar.Paging', 'widget.sch_pagingtoolbar', 'getStoreId', 'loadPage', 'getPageData', 'RETURN', 'readPageFromInput', 'pageCount', 'beforechange', 'HOME', 'END', 'UP', 'DOWN', '__BRYNTUM_TRIAL', 'bryntum.com', 'location', 'bmeval', 
'Cookies', 'callOverridden', 'bryntum-trial', 'https://www.bryntum.com/store', 'Click here to purchase a license', '\x3cimg src\x3d"//www.bryntum.com/site-images/logo2.png" style\x3d"margin:5px 0 0 5px; " width\x3d"100"/\x3e\x3cdiv style\x3d"padding:5px;font-weight:bold"\x3eTRIAL VERSION. CLICK HERE TO BUY\x3c/div\x3e', 'color:#FFF;background: #888; z-index:10000;border-radius:3px;box-shadow: 2px 2px 4px rgba(100, 100, 100, 0.7);position:absolute;bottom:10px;right:15px;', 'Trial Period Expired!', 
'trialmask', '.trialmask', '\x3ch4\x3eTRIAL PERIOD EXPIRED\x3c/h4\x3e Click \x3ca href\x3d"https://bryntum.com/store"\x3e\x3cstrong\x3ehere\x3c/strong\x3e\x3c/a\x3e to purchase your licenses.\x3c/p\x3e', 'background-color', 'rgba(255, 255, 255, 0.8)', 'border-radius', '3px', 'box-shadow', '2px 2px 4px rgba(100, 100, 100, 0.7)', "BRYNTUM TRIAL LICENSE, for purchasing and licensing options please visit: www.bryntum.com/store (btw, we're hiring: www.bryntum.com/company/careers )", 'Sch', 'TimelineGridView', 
'onReady', 'Connection'];
Ext[_0xee2b[6]](_0xee2b[0], {singleton:true, reduce:function(_0x8e22x1, _0x8e22x2, _0x8e22x3) {
  _0x8e22x1 = Object(_0x8e22x1);
  if (!Ext[_0xee2b[1]](_0x8e22x2)) {
    Ext[_0xee2b[3]](_0xee2b[2]);
  }
  var _0x8e22x4 = 0, _0x8e22x5 = _0x8e22x1[_0xee2b[4]] >>> 0, _0x8e22x6 = _0x8e22x3;
  if (arguments[_0xee2b[4]] < 3) {
    while (true) {
      if (_0x8e22x4 in _0x8e22x1) {
        _0x8e22x6 = _0x8e22x1[_0x8e22x4++];
        break;
      }
      if (++_0x8e22x4 >= _0x8e22x5) {
        throw new TypeError(_0xee2b[5]);
      }
    }
  }
  for (; _0x8e22x4 < _0x8e22x5; ++_0x8e22x4) {
    if (_0x8e22x4 in _0x8e22x1) {
      _0x8e22x6 = _0x8e22x2(_0x8e22x6, _0x8e22x1[_0x8e22x4], _0x8e22x4, _0x8e22x1);
    }
  }
  return _0x8e22x6;
}});
Ext[_0xee2b[6]](_0xee2b[7], {actions:null, title:null, constructor:function(_0x8e22x3) {
  _0x8e22x3 = _0x8e22x3 || {};
  Ext[_0xee2b[8]](this, _0x8e22x3);
  this[_0xee2b[9]]([_0x8e22x3]);
  this[_0xee2b[10]] = [];
}, hasActions:function() {
  return this[_0xee2b[10]][_0xee2b[4]] > 0;
}, addAction:function(_0x8e22x3) {
  this[_0xee2b[10]][_0xee2b[11]](_0x8e22x3);
}, getActions:function() {
  return this[_0xee2b[10]];
}, undo:function() {
  for (var _0x8e22x3 = this[_0xee2b[10]][_0xee2b[4]] - 1; _0x8e22x3 >= 0; _0x8e22x3--) {
    this[_0xee2b[10]][_0x8e22x3][_0xee2b[12]]();
  }
}, redo:function() {
  for (var _0x8e22x3 = 0; _0x8e22x3 < this[_0xee2b[10]][_0xee2b[4]]; _0x8e22x3++) {
    this[_0xee2b[10]][_0x8e22x3][_0xee2b[13]]();
  }
}, getTitle:function() {
  if (this[_0xee2b[14]]) {
    return this[_0xee2b[14]];
  }
  var _0x8e22x3 = this[_0xee2b[10]][0];
  return _0x8e22x3 ? _0x8e22x3[_0xee2b[15]]() : null;
}});
Ext[_0xee2b[6]](_0xee2b[16], {extend:_0xee2b[17], modelName:null, editMementoFix:null, mixinConfig:{before:{endEdit:_0xee2b[18]}, after:{endEdit:_0xee2b[19]}}, onBeforeEndEdit:function(_0x8e22x6, _0x8e22x4) {
  var _0x8e22x3 = this[_0xee2b[20]];
  if (_0x8e22x3) {
    this[_0xee2b[21]] = _0x8e22x3;
    if (!_0x8e22x4) {
      _0x8e22x4 = this[_0xee2b[23]](_0x8e22x3[_0xee2b[22]]);
    }
    if (!_0x8e22x3[_0xee2b[24]]) {
      _0x8e22x3[_0xee2b[24]] = {};
    }
    Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x4, function(_0x8e22x5) {
      _0x8e22x3[_0xee2b[24]][_0x8e22x5] = _0x8e22x3[_0xee2b[22]][_0x8e22x5];
    });
  }
}, onAfterEndEdit:function(_0x8e22x3, _0x8e22x6) {
  delete this[_0xee2b[21]];
}, getTitle:function() {
  return _0xee2b[27];
}});
Ext[_0xee2b[6]](_0xee2b[28], {constructor:function(_0x8e22x3) {
  Ext[_0xee2b[8]](this, _0x8e22x3);
}, undo:function() {
  throw new Error(_0xee2b[29]);
}, redo:function() {
  throw new Error(_0xee2b[29]);
}, getTitle:function() {
  return _0xee2b[27];
}, prepareRecord:function(_0x8e22x3) {
  _0x8e22x3[_0xee2b[30]] = true;
  if (_0x8e22x3[_0xee2b[31]]) {
    _0x8e22x3[_0xee2b[22]][_0x8e22x3[_0xee2b[31]]] = _0x8e22x3[_0xee2b[32]]();
  }
  return _0x8e22x3;
}});
Ext[_0xee2b[6]](_0xee2b[33], {extend:_0xee2b[28], requires:[_0xee2b[34]], inheritableStatics:{CUSTOMLY_PROCESSED:{}}, config:{record:null, fieldNames:null}, oldValues:null, newValues:null, constructor:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  _0x8e22x6[_0xee2b[9]]([_0x8e22x3]);
  _0x8e22x6[_0xee2b[35]](_0x8e22x3);
  _0x8e22x6[_0xee2b[36]]();
}, saveValues:function() {
  var _0x8e22x6 = this, _0x8e22x3 = _0x8e22x6[_0xee2b[37]](), _0x8e22x4 = _0x8e22x6[_0xee2b[38]]();
  if (_0x8e22x4) {
    _0x8e22x6[_0xee2b[39]] = Ext[_0xee2b[26]][_0xee2b[41]](_0x8e22x4, function(_0x8e22x5) {
      return _0x8e22x6[_0xee2b[40]](_0x8e22x5, _0x8e22x3);
    });
    _0x8e22x6[_0xee2b[42]] = Ext[_0xee2b[26]][_0xee2b[41]](_0x8e22x4, function(_0x8e22x5) {
      return _0x8e22x6[_0xee2b[43]](_0x8e22x5, _0x8e22x3);
    });
  }
}, undo:function() {
  var _0x8e22x6, _0x8e22x5 = this, _0x8e22x3 = _0x8e22x5[_0xee2b[37]](), _0x8e22x2 = _0x8e22x5[_0xee2b[38]](), _0x8e22x4;
  if (_0x8e22x2) {
    _0x8e22x6 = _0x8e22x5[_0xee2b[45]][_0xee2b[44]];
    _0x8e22x3[_0xee2b[46]]();
    _0x8e22x4 = Robo[_0xee2b[49]][_0xee2b[26]][_0xee2b[48]](_0x8e22x2, function(_0x8e22x7, _0x8e22x8, _0x8e22x1) {
      var _0x8e22x9;
      if (_0x8e22x8) {
        _0x8e22x9 = _0x8e22x5[_0xee2b[47]](_0x8e22x5[_0xee2b[39]][_0x8e22x1], _0x8e22x8, _0x8e22x3, _0xee2b[12]);
        if (_0x8e22x9 !== _0x8e22x6) {
          _0x8e22x7[_0x8e22x8] = _0x8e22x9;
        }
      }
      return _0x8e22x7;
    }, {});
    _0x8e22x3[_0xee2b[50]](_0x8e22x4);
    _0x8e22x3[_0xee2b[51]]();
  }
}, redo:function() {
  var _0x8e22x6, _0x8e22x5 = this, _0x8e22x3 = _0x8e22x5[_0xee2b[37]](), _0x8e22x2 = _0x8e22x5[_0xee2b[38]](), _0x8e22x4;
  if (_0x8e22x2) {
    _0x8e22x6 = _0x8e22x5[_0xee2b[45]][_0xee2b[44]];
    _0x8e22x3[_0xee2b[46]]();
    _0x8e22x4 = Robo[_0xee2b[49]][_0xee2b[26]][_0xee2b[48]](_0x8e22x2, function(_0x8e22x7, _0x8e22x8, _0x8e22x1) {
      var _0x8e22x9;
      if (_0x8e22x8) {
        _0x8e22x9 = _0x8e22x5[_0xee2b[47]](_0x8e22x5[_0xee2b[42]][_0x8e22x1], _0x8e22x8, _0x8e22x3, _0xee2b[13]);
        if (_0x8e22x9 !== _0x8e22x6) {
          _0x8e22x7[_0x8e22x8] = _0x8e22x9;
        }
      }
      return _0x8e22x7;
    }, {});
    _0x8e22x3[_0xee2b[50]](_0x8e22x4);
    _0x8e22x3[_0xee2b[51]]();
  }
}, processSavingOldValue:function(_0x8e22x4, _0x8e22x6) {
  var _0x8e22x3 = _0x8e22x6[_0xee2b[52]] && _0x8e22x6[_0xee2b[52]][_0xee2b[53]](_0x8e22x4) && _0x8e22x6[_0xee2b[52]] || _0x8e22x6[_0xee2b[24]] && _0x8e22x6[_0xee2b[24]][_0xee2b[53]](_0x8e22x4) && _0x8e22x6[_0xee2b[24]] || _0x8e22x6[_0xee2b[21]] && _0x8e22x6[_0xee2b[21]][_0xee2b[24]] && _0x8e22x6[_0xee2b[21]][_0xee2b[24]][_0xee2b[53]](_0x8e22x4) && _0x8e22x6[_0xee2b[21]][_0xee2b[24]] || _0x8e22x6[_0xee2b[21]] && _0x8e22x6[_0xee2b[21]][_0xee2b[22]] && _0x8e22x6[_0xee2b[21]][_0xee2b[22]][_0xee2b[53]](_0x8e22x4) && 
  _0x8e22x6[_0xee2b[21]][_0xee2b[22]];
  if (!_0x8e22x3) {
    throw _0xee2b[54];
  }
  return _0x8e22x3[_0x8e22x4];
}, processSavingNewValue:function(_0x8e22x6, _0x8e22x3) {
  return _0x8e22x3[_0xee2b[55]](_0x8e22x6);
}, processRestoringValue:Ext[_0xee2b[56]], getTitle:function() {
  var _0x8e22x3 = this[_0xee2b[37]]();
  var _0x8e22x6 = this[_0xee2b[38]]();
  if (_0x8e22x3[_0xee2b[15]]) {
    return _0xee2b[57] + _0x8e22x6[0] + _0xee2b[58] + _0x8e22x3[_0xee2b[15]](this);
  }
  if (_0x8e22x3[_0xee2b[59]]) {
    return _0xee2b[57] + _0x8e22x3[_0xee2b[59]] + _0xee2b[60] + _0x8e22x3[_0xee2b[32]]();
  }
  return _0xee2b[27];
}});
Ext[_0xee2b[6]](_0xee2b[61], {extend:_0xee2b[28], store:null, records:null, index:null, autoSync:false, undo:function() {
  var _0x8e22x3 = this[_0xee2b[62]];
  this[_0xee2b[64]][_0xee2b[63]](_0x8e22x3);
  if (!this[_0xee2b[65]]) {
    for (var _0x8e22x6 = 0; _0x8e22x6 < _0x8e22x3[_0xee2b[4]]; _0x8e22x6++) {
      this[_0xee2b[64]][_0xee2b[66]](_0x8e22x3[_0x8e22x6]);
    }
  }
}, redo:function() {
  if (this[_0xee2b[65]]) {
    this[_0xee2b[62]] = Ext[_0xee2b[26]][_0xee2b[41]](this[_0xee2b[62]], this[_0xee2b[67]]);
  }
  this[_0xee2b[64]][_0xee2b[69]](this[_0xee2b[68]], this[_0xee2b[62]]);
}, getRecord:function() {
  return this[_0xee2b[62]][0];
}, getTitle:function() {
  var _0x8e22x3 = this;
  var _0x8e22x6 = Ext[_0xee2b[26]][_0xee2b[41]](this[_0xee2b[62]], function(_0x8e22x4) {
    if (_0x8e22x4[_0xee2b[15]]) {
      return _0x8e22x4[_0xee2b[15]](_0x8e22x3);
    }
    if (_0x8e22x4[_0xee2b[59]]) {
      return _0x8e22x4[_0xee2b[59]] + _0xee2b[60] + _0x8e22x4[_0xee2b[32]]();
    }
    return _0xee2b[70];
  });
  return _0xee2b[71] + _0x8e22x6[_0xee2b[73]](_0xee2b[72]);
}});
Ext[_0xee2b[6]](_0xee2b[74], {extend:_0xee2b[28], store:null, records:null, index:null, autoSync:false, undo:function() {
  var _0x8e22x3 = this;
  if (_0x8e22x3[_0xee2b[65]]) {
    _0x8e22x3[_0xee2b[62]] = Ext[_0xee2b[26]][_0xee2b[41]](_0x8e22x3[_0xee2b[62]], _0x8e22x3[_0xee2b[67]]);
  }
  _0x8e22x3[_0xee2b[64]][_0xee2b[69]](_0x8e22x3[_0xee2b[68]], _0x8e22x3[_0xee2b[62]]);
}, redo:function() {
  var _0x8e22x3 = this;
  _0x8e22x3[_0xee2b[64]][_0xee2b[63]](_0x8e22x3[_0xee2b[62]]);
}, getRecord:function() {
  return this[_0xee2b[62]][0];
}, getTitle:function() {
  var _0x8e22x3 = this;
  var _0x8e22x6 = Ext[_0xee2b[26]][_0xee2b[41]](this[_0xee2b[62]], function(_0x8e22x4) {
    if (_0x8e22x4[_0xee2b[15]]) {
      return _0x8e22x4[_0xee2b[15]](_0x8e22x3);
    }
    if (_0x8e22x4[_0xee2b[59]]) {
      return _0x8e22x4[_0xee2b[59]] + _0xee2b[60] + _0x8e22x4[_0xee2b[32]]();
    }
    return _0xee2b[70];
  });
  return _0xee2b[75] + _0x8e22x6[_0xee2b[73]](_0xee2b[72]);
}});
Ext[_0xee2b[6]](_0xee2b[76], {extend:_0xee2b[28], parent:null, newChild:null, autoSync:false, undo:function() {
  var _0x8e22x3 = this[_0xee2b[77]];
  this[_0xee2b[79]][_0xee2b[78]](_0x8e22x3);
  delete _0x8e22x3[_0xee2b[22]][_0xee2b[80]];
  if (!this[_0xee2b[65]]) {
    Ext[_0xee2b[26]][_0xee2b[63]](this[_0xee2b[79]][_0xee2b[82]]()[_0xee2b[81]], _0x8e22x3);
  }
}, redo:function() {
  if (this[_0xee2b[65]]) {
    this[_0xee2b[77]] = this[_0xee2b[67]](this[_0xee2b[77]]);
  }
  this[_0xee2b[79]][_0xee2b[83]](this[_0xee2b[77]]);
}, getRecord:function() {
  return this[_0xee2b[77]];
}, getTitle:function() {
  var _0x8e22x3 = this[_0xee2b[77]];
  var _0x8e22x6;
  if (_0x8e22x3[_0xee2b[15]]) {
    _0x8e22x6 = _0x8e22x3[_0xee2b[15]](this);
  } else {
    if (_0x8e22x3[_0xee2b[59]]) {
      return _0x8e22x3[_0xee2b[59]] + _0xee2b[60] + _0x8e22x3[_0xee2b[32]]();
    }
  }
  return _0xee2b[84] + _0x8e22x6;
}});
Ext[_0xee2b[6]](_0xee2b[85], {extend:_0xee2b[28], parent:null, newChild:null, insertedBefore:null, autoSync:false, undo:function() {
  var _0x8e22x3 = this[_0xee2b[77]];
  this[_0xee2b[79]][_0xee2b[78]](_0x8e22x3);
  delete _0x8e22x3[_0xee2b[22]][_0xee2b[80]];
  if (!this[_0xee2b[65]]) {
    Ext[_0xee2b[26]][_0xee2b[63]](this[_0xee2b[79]][_0xee2b[82]]()[_0xee2b[81]], _0x8e22x3);
  }
}, redo:function() {
  var _0x8e22x6 = this[_0xee2b[86]], _0x8e22x3 = _0x8e22x6 && _0x8e22x6[_0xee2b[87]]();
  if (this[_0xee2b[65]]) {
    this[_0xee2b[77]] = this[_0xee2b[67]](this[_0xee2b[77]]);
  }
  this[_0xee2b[79]][_0xee2b[88]](this[_0xee2b[77]], _0x8e22x6);
  if (_0x8e22x3) {
    _0x8e22x6[_0xee2b[89]](false, {isFirst:false});
  }
}, getRecord:function() {
  return this[_0xee2b[77]];
}, getTitle:function() {
  var _0x8e22x3 = this[_0xee2b[77]];
  var _0x8e22x6;
  if (_0x8e22x3[_0xee2b[15]]) {
    _0x8e22x6 = _0x8e22x3[_0xee2b[15]](this);
  } else {
    if (_0x8e22x3[_0xee2b[59]]) {
      return _0x8e22x3[_0xee2b[59]] + _0xee2b[60] + _0x8e22x3[_0xee2b[32]]();
    }
  }
  return _0xee2b[90] + _0x8e22x6;
}});
Ext[_0xee2b[6]](_0xee2b[91], {extend:_0xee2b[28], parent:null, removedChild:null, nextSibling:null, newParent:null, newNextSibling:null, dirty:false, isMove:false, autoSync:false, constructor:function(_0x8e22x3) {
  this[_0xee2b[9]](arguments);
  this[_0xee2b[92]] = this[_0xee2b[93]][_0xee2b[92]];
}, undo:function() {
  var _0x8e22x4 = this;
  if (_0x8e22x4[_0xee2b[94]]) {
    _0x8e22x4[_0xee2b[95]] = _0x8e22x4[_0xee2b[93]][_0xee2b[96]];
    _0x8e22x4[_0xee2b[97]] = _0x8e22x4[_0xee2b[93]][_0xee2b[98]];
  }
  var _0x8e22x5 = _0x8e22x4[_0xee2b[98]];
  var _0x8e22x6 = _0x8e22x5 && _0x8e22x5[_0xee2b[87]]();
  if (!_0x8e22x4[_0xee2b[94]] && _0x8e22x4[_0xee2b[65]]) {
    _0x8e22x4[_0xee2b[93]] = _0x8e22x4[_0xee2b[67]](_0x8e22x4[_0xee2b[93]]);
  }
  var _0x8e22x2 = _0x8e22x4[_0xee2b[93]];
  _0x8e22x4[_0xee2b[79]][_0xee2b[88]](_0x8e22x2, _0x8e22x5);
  _0x8e22x2[_0xee2b[92]] = _0x8e22x4[_0xee2b[92]];
  if (!_0x8e22x4[_0xee2b[94]] && !_0x8e22x4[_0xee2b[65]]) {
    var _0x8e22x3 = _0x8e22x2[_0xee2b[82]]();
    _0x8e22x2[_0xee2b[99]](function(_0x8e22x1) {
      Ext[_0xee2b[26]][_0xee2b[63]](_0x8e22x3[_0xee2b[81]], _0x8e22x1);
    });
  }
  if (_0x8e22x6) {
    _0x8e22x5[_0xee2b[89]](false, {isFirst:false});
  }
}, redo:function() {
  if (this[_0xee2b[94]]) {
    var _0x8e22x6 = this[_0xee2b[97]];
    var _0x8e22x3 = _0x8e22x6 && _0x8e22x6[_0xee2b[87]]();
    this[_0xee2b[95]][_0xee2b[88]](this[_0xee2b[93]], _0x8e22x6);
    if (_0x8e22x3) {
      _0x8e22x6[_0xee2b[89]](false, {isFirst:false});
    }
  } else {
    this[_0xee2b[79]][_0xee2b[78]](this[_0xee2b[93]]);
    delete this[_0xee2b[93]][_0xee2b[22]][_0xee2b[80]];
  }
}, getRecord:function() {
  return this[_0xee2b[93]];
}, getTitle:function() {
  var _0x8e22x3 = this[_0xee2b[93]];
  var _0x8e22x6;
  if (_0x8e22x3[_0xee2b[15]]) {
    _0x8e22x6 = _0x8e22x3[_0xee2b[15]](this);
  } else {
    if (_0x8e22x3[_0xee2b[59]]) {
      return _0x8e22x3[_0xee2b[59]] + _0xee2b[60] + _0x8e22x3[_0xee2b[32]]();
    }
  }
  return this[_0xee2b[94]] ? _0xee2b[100] + _0x8e22x6 : _0xee2b[75] + _0x8e22x6;
}});
Ext[_0xee2b[6]](_0xee2b[101], {extend:_0xee2b[33], processRestoringValue:function(_0x8e22x4, _0x8e22x2, _0x8e22x3, _0x8e22x5) {
  var _0x8e22x6 = this;
  if (_0x8e22x2 === _0xee2b[102]) {
    if (_0x8e22x4) {
      _0x8e22x3[_0xee2b[103]]();
    } else {
      _0x8e22x3[_0xee2b[104]]();
    }
    _0x8e22x4 = _0x8e22x6[_0xee2b[45]][_0xee2b[44]];
  } else {
    if (_0x8e22x2 == _0xee2b[105]) {
      _0x8e22x4 = _0x8e22x6[_0xee2b[9]](arguments);
      if (_0x8e22x4 === true && _0x8e22x5 == _0xee2b[12]) {
        _0x8e22x3[_0xee2b[22]][_0xee2b[106]] = false;
      }
    } else {
      _0x8e22x4 = _0x8e22x6[_0xee2b[9]](arguments);
    }
  }
  return _0x8e22x4;
}});
Ext[_0xee2b[6]](_0xee2b[107], {extend:_0xee2b[108], requires:[_0xee2b[0], _0xee2b[7], _0xee2b[16], _0xee2b[33], _0xee2b[61], _0xee2b[74], _0xee2b[76], _0xee2b[85], _0xee2b[91], _0xee2b[101], _0xee2b[109], _0xee2b[110]], stores:null, storesById:null, autoSync:false, treeStoreListeners:null, flatStoreListeners:null, stub:function() {
}, undoQueue:null, redoQueue:null, ignoredFieldNames:{expanded:1}, state:_0xee2b[111], transactionBoundary:_0xee2b[112], transactionMaxDuration:100, clearQueuesOnLoad:false, transactionTimeout:null, currentTransaction:null, constructor:function(_0x8e22x6) {
  var _0x8e22x4 = this;
  _0x8e22x6 = _0x8e22x6 || {};
  Ext[_0xee2b[8]](_0x8e22x4, _0x8e22x6);
  _0x8e22x4[_0xee2b[113]] = {nodeappend:_0x8e22x4[_0xee2b[114]], nodeinsert:_0x8e22x4[_0xee2b[115]], noderemove:_0x8e22x4[_0xee2b[116]], update:_0x8e22x4[_0xee2b[117]], 'robo-command':_0x8e22x4[_0xee2b[118]], scope:_0x8e22x4};
  _0x8e22x4[_0xee2b[119]] = {add:_0x8e22x4[_0xee2b[120]], remove:_0x8e22x4[_0xee2b[121]], update:_0x8e22x4[_0xee2b[122]], 'robo-command':_0x8e22x4[_0xee2b[118]], scope:_0x8e22x4};
  if (_0x8e22x4[_0xee2b[123]]) {
    Ext[_0xee2b[8]](_0x8e22x4[_0xee2b[113]], {load:_0x8e22x4[_0xee2b[124]], clear:_0x8e22x4[_0xee2b[124]]});
    Ext[_0xee2b[8]](_0x8e22x4[_0xee2b[119]], {load:_0x8e22x4[_0xee2b[124]], clear:_0x8e22x4[_0xee2b[124]]});
  }
  _0x8e22x4[_0xee2b[9]]([_0x8e22x6]);
  var _0x8e22x3 = _0x8e22x4[_0xee2b[125]] || [];
  _0x8e22x4[_0xee2b[125]] = [];
  _0x8e22x4[_0xee2b[126]] = {};
  _0x8e22x4[_0xee2b[127]] = [];
  _0x8e22x4[_0xee2b[128]] = [];
  Ext[_0xee2b[26]][_0xee2b[130]](_0x8e22x3, function(_0x8e22x5) {
    _0x8e22x4[_0xee2b[129]](_0x8e22x5);
  });
}, addStore:function(_0x8e22x4, _0x8e22x7) {
  _0x8e22x4 = Ext[_0xee2b[22]][_0xee2b[132]][_0xee2b[131]](_0x8e22x4);
  Ext[_0xee2b[133]] && Ext[_0xee2b[133]][_0xee2b[135]](_0x8e22x4, _0xee2b[134]);
  this[_0xee2b[125]][_0xee2b[11]](_0x8e22x4);
  if (_0x8e22x7) {
    _0x8e22x4[_0xee2b[136]](_0x8e22x7);
  }
  var _0x8e22x5 = _0x8e22x4[_0xee2b[137]]();
  var _0x8e22x2 = _0x8e22x5[_0xee2b[139]][_0xee2b[138]] || {};
  for (var _0x8e22x3 in _0x8e22x2) {
    var _0x8e22x9 = _0x8e22x2[_0x8e22x3];
    var _0x8e22x6 = _0x8e22x9[_0xee2b[140]];
    if (_0x8e22x6 && (!_0x8e22x9[_0xee2b[141]] || !_0x8e22x9[_0xee2b[141]][this[_0xee2b[32]]()])) {
      var _0x8e22x1 = this;
      _0x8e22x9[_0xee2b[140]] = function() {
        var _0x8e22xa = _0x8e22x6[_0xee2b[8]](this, arguments);
        if (!_0x8e22x1[_0xee2b[142]](_0x8e22xa)) {
          _0x8e22x1[_0xee2b[129]](_0x8e22xa);
          if (_0x8e22x1[_0xee2b[143]] !== _0xee2b[144] && _0x8e22x1[_0xee2b[143]] !== _0xee2b[111]) {
            _0x8e22x1[_0xee2b[145]](_0x8e22xa);
          }
        }
        return _0x8e22xa;
      };
      _0x8e22x9[_0xee2b[141]] = _0x8e22x9[_0xee2b[141]] || {};
      _0x8e22x9[_0xee2b[141]][this[_0xee2b[32]]()] = _0x8e22x1;
    }
  }
  if (_0x8e22x4[_0xee2b[146]]) {
    this[_0xee2b[126]][_0x8e22x4[_0xee2b[146]]] = _0x8e22x4;
  }
}, getStoreById:function(_0x8e22x3) {
  return this[_0xee2b[126]][_0x8e22x3];
}, hasStore:function(_0x8e22x3) {
  return Ext[_0xee2b[26]][_0xee2b[147]](this[_0xee2b[125]], _0x8e22x3) !== -1;
}, bindStore:function(_0x8e22x3) {
  (_0x8e22x3[_0xee2b[150]] || _0x8e22x3)[_0xee2b[149]](this[_0xee2b[148]](_0x8e22x3));
  if (_0x8e22x3[_0xee2b[150]]) {
    _0x8e22x3[_0xee2b[149]](this[_0xee2b[151]](_0x8e22x3));
  }
}, unbindStore:function(_0x8e22x3) {
  (_0x8e22x3[_0xee2b[150]] || _0x8e22x3)[_0xee2b[152]](this[_0xee2b[148]](_0x8e22x3));
  if (_0x8e22x3[_0xee2b[150]]) {
    _0x8e22x3[_0xee2b[152]](this[_0xee2b[151]](_0x8e22x3));
  }
}, getStoreTypeListenerStubs:function(_0x8e22x3) {
  var _0x8e22x4 = this;
  var _0x8e22x6 = this[_0xee2b[148]](_0x8e22x3);
  _0x8e22x6 = Ext[_0xee2b[8]]({}, _0x8e22x6);
  Ext[_0xee2b[154]][_0xee2b[25]](_0x8e22x6, function(_0x8e22x5) {
    _0x8e22x6[_0x8e22x5] = _0x8e22x4[_0xee2b[153]];
  });
  return _0x8e22x6;
}, getStoreTypeListeners:function(_0x8e22x3) {
  var _0x8e22x6;
  if (Ext[_0xee2b[22]][_0xee2b[155]] && _0x8e22x3 instanceof Ext[_0xee2b[22]][_0xee2b[155]]) {
    _0x8e22x6 = this[_0xee2b[113]];
  } else {
    _0x8e22x6 = this[_0xee2b[119]];
  }
  return _0x8e22x6;
}, removeStore:function(_0x8e22x3) {
  Ext[_0xee2b[26]][_0xee2b[63]](this[_0xee2b[125]], _0x8e22x3);
  this[_0xee2b[126]][_0x8e22x3[_0xee2b[146]]] = null;
  this[_0xee2b[156]](_0x8e22x3);
}, forEachStore:function(_0x8e22x3) {
  Ext[_0xee2b[26]][_0xee2b[130]](this[_0xee2b[125]], _0x8e22x3, this);
}, onAnyChangeInAnyStore:function(_0x8e22x3) {
  if (this[_0xee2b[143]] === _0xee2b[157] || _0x8e22x3[_0xee2b[158]] && _0x8e22x3[_0xee2b[158]]()) {
    return false;
  }
  if (!this[_0xee2b[159]]) {
    this[_0xee2b[160]]();
  }
  return true;
}, hasPersistableChanges:function(_0x8e22x3, _0x8e22x4) {
  var _0x8e22x6 = this[_0xee2b[161]];
  return Robo[_0xee2b[49]][_0xee2b[26]][_0xee2b[48]](_0x8e22x4, function(_0x8e22x5, _0x8e22x1) {
    var _0x8e22x2 = _0x8e22x3[_0xee2b[162]](_0x8e22x1);
    return _0x8e22x5 || !_0x8e22x2 || _0x8e22x2[_0xee2b[163]] && !_0x8e22x6[_0xee2b[53]](_0x8e22x1);
  }, false);
}, onIncomingCommand:function(_0x8e22x3, _0x8e22x5, _0x8e22x6) {
  _0x8e22x6 = _0x8e22x6 || [];
  var _0x8e22x4 = this;
  if (_0x8e22x4[_0xee2b[164]]()) {
    switch(_0x8e22x5) {
      case _0xee2b[165]:
      case _0xee2b[166]:
      case _0xee2b[167]:
      case _0xee2b[160]:
      case _0xee2b[168]:
        _0x8e22x4[_0x8e22x5][_0xee2b[8]](_0x8e22x4, _0x8e22x6);
        break;
    }
  }
}, incomingCommandsDisabled:0, areIncomingCommandsEnabled:function() {
  return !this[_0xee2b[169]];
}, disableIncomingCommands:function() {
  this[_0xee2b[169]]++;
}, enableIncomingCommands:function() {
  this[_0xee2b[169]]--;
}, onFlatStoreUpdate:function(_0x8e22x4, _0x8e22x3, _0x8e22x6, _0x8e22x2) {
  var _0x8e22x5 = this;
  if (!_0x8e22x5[_0xee2b[170]](_0x8e22x4) || _0x8e22x6 !== _0xee2b[171] || !_0x8e22x2 || !_0x8e22x2[_0xee2b[4]] || !_0x8e22x5[_0xee2b[172]](_0x8e22x3, _0x8e22x2)) {
    return;
  }
  _0x8e22x5[_0xee2b[159]][_0xee2b[176]](new Robo[_0xee2b[175]][_0xee2b[174]].Update({record:_0x8e22x3, fieldNames:_0x8e22x2[_0xee2b[173]](function(_0x8e22x1) {
    return !(_0x8e22x1 in _0x8e22x5[_0xee2b[161]]);
  })}));
}, onFlatStoreAdd:function(_0x8e22x6, _0x8e22x3, _0x8e22x4) {
  if (!this[_0xee2b[170]](_0x8e22x6)) {
    return;
  }
  this[_0xee2b[159]][_0xee2b[176]](new Robo[_0xee2b[175]][_0xee2b[174]].Add({autoSync:this[_0xee2b[65]], store:_0x8e22x6, records:_0x8e22x3, index:_0x8e22x4}));
}, onFlatStoreRemove:function(_0x8e22x4, _0x8e22x6, _0x8e22x5, _0x8e22x3) {
  if (!this[_0xee2b[170]](_0x8e22x4)) {
    return;
  }
  this[_0xee2b[159]][_0xee2b[176]](new Robo[_0xee2b[175]][_0xee2b[174]].Remove({autoSync:this[_0xee2b[65]], store:_0x8e22x4, records:_0x8e22x6, index:_0x8e22x5, isMove:_0x8e22x3}));
}, onTreeStoreUpdate:function(_0x8e22x4, _0x8e22x3, _0x8e22x6, _0x8e22x2) {
  var _0x8e22x5 = this;
  if (!_0x8e22x5[_0xee2b[170]](_0x8e22x4) || _0x8e22x6 !== _0xee2b[171] || !_0x8e22x2 || !_0x8e22x2[_0xee2b[4]] || !_0x8e22x5[_0xee2b[172]](_0x8e22x3, _0x8e22x2)) {
    return;
  }
  _0x8e22x5[_0xee2b[159]][_0xee2b[176]](new Robo[_0xee2b[175]][_0xee2b[177]].Update({record:_0x8e22x3, fieldNames:_0x8e22x2[_0xee2b[173]](function(_0x8e22x1) {
    return !(_0x8e22x1 in _0x8e22x5[_0xee2b[161]]);
  })}));
}, onTreeStoreAppend:function(_0x8e22x6, _0x8e22x3) {
  if (!_0x8e22x6 || !this[_0xee2b[170]](_0x8e22x6[_0xee2b[82]]())) {
    return;
  }
  if (_0x8e22x3[_0xee2b[178]] && _0x8e22x3[_0xee2b[178]][this[_0xee2b[32]]()]) {
    delete _0x8e22x3[_0xee2b[178]][this[_0xee2b[32]]()];
  } else {
    this[_0xee2b[159]][_0xee2b[176]](new Robo[_0xee2b[175]][_0xee2b[177]].Append({autoSync:this[_0xee2b[65]], parent:_0x8e22x6, newChild:_0x8e22x3}));
  }
}, onTreeStoreInsert:function(_0x8e22x4, _0x8e22x3, _0x8e22x6) {
  if (!_0x8e22x4 || !this[_0xee2b[170]](_0x8e22x4[_0xee2b[82]]())) {
    return;
  }
  if (_0x8e22x3[_0xee2b[178]] && _0x8e22x3[_0xee2b[178]][this[_0xee2b[32]]()]) {
    delete _0x8e22x3[_0xee2b[178]][this[_0xee2b[32]]()];
  } else {
    this[_0xee2b[159]][_0xee2b[176]](new Robo[_0xee2b[175]][_0xee2b[177]].Insert({autoSync:this[_0xee2b[65]], parent:_0x8e22x4, newChild:_0x8e22x3, insertedBefore:_0x8e22x6}));
  }
}, onTreeStoreRemove:function(_0x8e22x4, _0x8e22x5, _0x8e22x3, _0x8e22x6) {
  if (!_0x8e22x4 || !this[_0xee2b[170]](_0x8e22x4[_0xee2b[82]]())) {
    return;
  }
  if (_0x8e22x3) {
    _0x8e22x5[_0xee2b[178]] = _0x8e22x5[_0xee2b[178]] || {};
    _0x8e22x5[_0xee2b[178]][this[_0xee2b[32]]()] = true;
  }
  this[_0xee2b[159]][_0xee2b[176]](new Robo[_0xee2b[175]][_0xee2b[177]].Remove({autoSync:this[_0xee2b[65]], parent:_0x8e22x4, removedChild:_0x8e22x5, nextSibling:_0x8e22x6[_0xee2b[98]], isMove:_0x8e22x3}));
}, start:function() {
  if (this[_0xee2b[143]] === _0xee2b[111] || this[_0xee2b[143]] === _0xee2b[144]) {
    this[_0xee2b[180]](_0xee2b[179], this);
    this[_0xee2b[180]](_0xee2b[181], this, this[_0xee2b[127]]);
    this[_0xee2b[180]](_0xee2b[182], this, this[_0xee2b[128]]);
  }
  if (this[_0xee2b[143]] !== _0xee2b[183]) {
    this[_0xee2b[184]](this[_0xee2b[145]]);
    this[_0xee2b[143]] = _0xee2b[185];
  }
}, stop:function() {
  this[_0xee2b[167]]();
  this[_0xee2b[184]](this[_0xee2b[156]]);
  this[_0xee2b[143]] = _0xee2b[144];
  this[_0xee2b[124]]();
  this[_0xee2b[180]](_0xee2b[186], this);
}, clearQueues:function() {
  this[_0xee2b[187]]();
  this[_0xee2b[188]]();
}, pause:function() {
  this[_0xee2b[143]] = _0xee2b[157];
}, resume:function() {
  this[_0xee2b[143]] = _0xee2b[185];
}, hold:function() {
  Ext[_0xee2b[133]] && Ext[_0xee2b[133]][_0xee2b[135]](this[_0xee2b[159]], _0xee2b[189]);
  this[_0xee2b[143]] = _0xee2b[183];
}, release:function() {
  Ext[_0xee2b[133]] && Ext[_0xee2b[133]][_0xee2b[135]](this[_0xee2b[159]], _0xee2b[190]);
  this[_0xee2b[143]] = _0xee2b[185];
}, getUndoQueue:function() {
  return this[_0xee2b[127]][_0xee2b[191]]();
}, getRedoQueue:function() {
  return this[_0xee2b[128]][_0xee2b[191]]();
}, clearUndoQueue:function() {
  if (this[_0xee2b[127]][_0xee2b[4]]) {
    this[_0xee2b[127]] = [];
    this[_0xee2b[180]](_0xee2b[181], this, this[_0xee2b[127]][_0xee2b[191]]());
  }
}, clearRedoQueue:function() {
  if (this[_0xee2b[128]][_0xee2b[4]]) {
    this[_0xee2b[128]] = [];
    this[_0xee2b[180]](_0xee2b[182], this, this[_0xee2b[128]][_0xee2b[191]]());
  }
}, startTransaction:function(_0x8e22x4) {
  var _0x8e22x3 = this, _0x8e22x6;
  if (_0x8e22x3[_0xee2b[143]] === _0xee2b[144]) {
    return;
  }
  if (_0x8e22x3[_0xee2b[159]]) {
    _0x8e22x3[_0xee2b[167]]();
  }
  _0x8e22x6 = new Robo.Transaction({title:_0x8e22x4});
  _0x8e22x3[_0xee2b[159]] = _0x8e22x6;
  _0x8e22x3[_0xee2b[192]](_0x8e22x6);
  if (_0x8e22x3[_0xee2b[193]] === _0xee2b[112]) {
    _0x8e22x3[_0xee2b[194]]();
  }
}, scheduleEndTransaction:function() {
  var _0x8e22x3 = this;
  if (_0x8e22x3[_0xee2b[195]]) {
    clearTimeout(_0x8e22x3[_0xee2b[195]]);
  }
  _0x8e22x3[_0xee2b[195]] = setTimeout(function() {
    if (_0x8e22x3[_0xee2b[143]] !== _0xee2b[183]) {
      _0x8e22x3[_0xee2b[167]]();
      _0x8e22x3[_0xee2b[195]] = null;
    } else {
      _0x8e22x3[_0xee2b[194]]();
    }
  }, _0x8e22x3[_0xee2b[196]]);
}, endTransaction:function() {
  var _0x8e22x6 = this, _0x8e22x3 = _0x8e22x6[_0xee2b[159]];
  if (!_0x8e22x3) {
    return false;
  }
  _0x8e22x6[_0xee2b[159]] = null;
  if (_0x8e22x6[_0xee2b[193]] === _0xee2b[112]) {
    clearTimeout(_0x8e22x6[_0xee2b[195]]);
    _0x8e22x6[_0xee2b[195]] = null;
  }
  if (_0x8e22x3[_0xee2b[197]]()) {
    _0x8e22x6[_0xee2b[168]](_0x8e22x3);
  }
  _0x8e22x6[_0xee2b[198]](_0x8e22x3);
  return _0x8e22x3[_0xee2b[197]]();
}, addTransaction:function(_0x8e22x3) {
  this[_0xee2b[127]][_0xee2b[11]](_0x8e22x3);
  this[_0xee2b[180]](_0xee2b[181], this, this[_0xee2b[127]][_0xee2b[191]]());
  if (this[_0xee2b[128]][_0xee2b[4]]) {
    this[_0xee2b[128]][_0xee2b[4]] = 0;
    this[_0xee2b[180]](_0xee2b[182], this, this[_0xee2b[128]][_0xee2b[191]]());
  }
  this[_0xee2b[180]](_0xee2b[199], this, _0x8e22x3);
}, undo:function(_0x8e22x2) {
  var _0x8e22x4 = this[_0xee2b[127]], _0x8e22x6, _0x8e22x1, _0x8e22x5, _0x8e22x3 = _0x8e22x4[_0xee2b[4]];
  if (this[_0xee2b[143]] === _0xee2b[144] || _0x8e22x2 === 0 || !_0x8e22x4[_0xee2b[4]]) {
    return;
  }
  if (_0x8e22x2 instanceof Robo[_0xee2b[200]]) {
    _0x8e22x6 = Ext[_0xee2b[26]][_0xee2b[147]](_0x8e22x4, _0x8e22x2);
    if (_0x8e22x6 === -1) {
      return;
    }
    _0x8e22x2 = _0x8e22x4[_0xee2b[4]] - _0x8e22x6;
  }
  _0x8e22x2 = _0x8e22x2 || 1;
  this[_0xee2b[180]](_0xee2b[201], this);
  this[_0xee2b[165]]();
  this[_0xee2b[202]]();
  for (_0x8e22x5 = 0; _0x8e22x5 < Math[_0xee2b[203]](_0x8e22x2, _0x8e22x3); _0x8e22x5++) {
    _0x8e22x1 = _0x8e22x4[_0xee2b[204]]();
    _0x8e22x1[_0xee2b[12]]();
    this[_0xee2b[128]][_0xee2b[205]](_0x8e22x1);
  }
  this[_0xee2b[206]]();
  this[_0xee2b[180]](_0xee2b[181], this, _0x8e22x4[_0xee2b[191]]());
  this[_0xee2b[180]](_0xee2b[182], this, this[_0xee2b[128]][_0xee2b[191]]());
  this[_0xee2b[166]]();
  this[_0xee2b[180]](_0xee2b[207], this);
}, redo:function(_0x8e22x5) {
  var _0x8e22x2 = this[_0xee2b[128]], _0x8e22x1, _0x8e22x6, _0x8e22x4, _0x8e22x3 = _0x8e22x2[_0xee2b[4]];
  if (this[_0xee2b[143]] === _0xee2b[144] || _0x8e22x5 === 0 || !_0x8e22x2[_0xee2b[4]]) {
    return;
  }
  if (_0x8e22x5 instanceof Robo[_0xee2b[200]]) {
    _0x8e22x6 = Ext[_0xee2b[26]][_0xee2b[147]](_0x8e22x2, _0x8e22x5);
    if (_0x8e22x6 === -1) {
      return;
    }
    _0x8e22x5 = _0x8e22x6 + 1;
  }
  _0x8e22x5 = _0x8e22x5 || 1;
  this[_0xee2b[180]](_0xee2b[208], this);
  this[_0xee2b[165]]();
  this[_0xee2b[202]]();
  for (_0x8e22x4 = 0; _0x8e22x4 < Math[_0xee2b[203]](_0x8e22x5, _0x8e22x3); _0x8e22x4++) {
    _0x8e22x1 = this[_0xee2b[128]][_0xee2b[209]]();
    _0x8e22x1[_0xee2b[13]]();
    this[_0xee2b[127]][_0xee2b[11]](_0x8e22x1);
  }
  this[_0xee2b[206]]();
  this[_0xee2b[180]](_0xee2b[182], this, this[_0xee2b[128]][_0xee2b[191]]());
  this[_0xee2b[180]](_0xee2b[181], this, this[_0xee2b[127]][_0xee2b[191]]());
  this[_0xee2b[166]]();
  this[_0xee2b[180]](_0xee2b[210], this);
}, undoAll:function() {
  this[_0xee2b[12]](this[_0xee2b[127]][_0xee2b[4]]);
}, redoAll:function() {
  this[_0xee2b[13]](this[_0xee2b[128]][_0xee2b[4]]);
}, notifyStoresAboutTransactionStart:function(_0x8e22x3) {
  this[_0xee2b[184]](function(_0x8e22x6) {
    _0x8e22x6[_0xee2b[211]] && _0x8e22x6[_0xee2b[211]](this, _0x8e22x3);
  });
}, notifyStoresAboutTransactionEnd:function(_0x8e22x3) {
  this[_0xee2b[184]](function(_0x8e22x6) {
    _0x8e22x6[_0xee2b[212]] && _0x8e22x6[_0xee2b[212]](this, _0x8e22x3);
  });
}, notifyStoresAboutUndoRedoStart:function() {
  this[_0xee2b[184]](function(_0x8e22x3) {
    _0x8e22x3[_0xee2b[213]] && _0x8e22x3[_0xee2b[213]](this);
  });
}, notifyStoresAboutUndoRedoComplete:function() {
  this[_0xee2b[184]](function(_0x8e22x3) {
    _0x8e22x3[_0xee2b[214]] && _0x8e22x3[_0xee2b[214]](this);
  });
}}, function() {
  Ext[_0xee2b[8]](Robo, {VERSION:_0xee2b[215]});
});
Ext[_0xee2b[6]](_0xee2b[216], {extend:_0xee2b[17], requires:[_0xee2b[108]], undoRedoPostponed:null, inUndoRedoTransaction:false, undoRedoEventBus:null, mixinConfig:{before:{constructor:_0xee2b[217], destroy:_0xee2b[218], fireEventArgs:_0xee2b[219], setRoot:_0xee2b[220], fillNode:_0xee2b[221]}, after:{setRoot:_0xee2b[222], fillNode:_0xee2b[223]}}, constructor:function() {
  var _0x8e22x3 = this;
  _0x8e22x3[_0xee2b[150]] = new Ext[_0xee2b[49]].Observable();
}, destroy:function() {
  Ext[_0xee2b[218]](this[_0xee2b[150]]);
}, fireEventArgs:function(_0x8e22x3, _0x8e22x6) {
  var _0x8e22x4 = this;
  if (!_0x8e22x6[_0xee2b[53]](_0xee2b[224])) {
    _0x8e22x6[_0xee2b[224]] = {};
  }
  if (!_0x8e22x6[_0xee2b[224]][_0x8e22x3]) {
    _0x8e22x6[_0xee2b[224]][_0x8e22x3] = true;
    _0x8e22x4[_0xee2b[150]][_0xee2b[225]](_0x8e22x3) && _0x8e22x4[_0xee2b[150]][_0xee2b[219]](_0x8e22x3, _0x8e22x6);
  }
}, isInUndoRedoTransaction:function() {
  return this[_0xee2b[226]];
}, onUndoRedoTransactionStart:function(_0x8e22x3, _0x8e22x6) {
  this[_0xee2b[226]] = true;
}, onUndoRedoTransactionEnd:function(_0x8e22x3, _0x8e22x6) {
  this[_0xee2b[226]] = false;
}, isUndoingOrRedoing:function() {
  return !!this[_0xee2b[227]];
}, beforeUndoRedo:function(_0x8e22x3) {
  this[_0xee2b[227]] = [];
}, afterUndoRedo:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  if (_0x8e22x6[_0xee2b[227]]) {
    Ext[_0xee2b[26]][_0xee2b[130]](_0x8e22x6[_0xee2b[227]], function(_0x8e22x4) {
      _0x8e22x4();
    });
  }
  _0x8e22x6[_0xee2b[227]] = null;
}, postponeAfterUndoRedo:function(_0x8e22x3) {
  Ext[_0xee2b[133]] && Ext[_0xee2b[133]][_0xee2b[1]](_0x8e22x3, _0xee2b[228]);
  this[_0xee2b[227]][_0xee2b[11]](_0x8e22x3);
}, beforeSetRoot:function() {
  this[_0xee2b[229]] = true;
}, afterSetRoot:function() {
  this[_0xee2b[229]] = false;
  if (!this[_0xee2b[230]]()) {
    this[_0xee2b[180]](_0xee2b[231], this);
  }
}, beforeFillNode:function(_0x8e22x3) {
  if (_0x8e22x3[_0xee2b[232]]()) {
    this[_0xee2b[220]]();
  }
}, afterFillNode:function(_0x8e22x3) {
  if (_0x8e22x3[_0xee2b[232]]()) {
    this[_0xee2b[222]]();
  }
}, isRootSettingOrLoading:function() {
  return this[_0xee2b[233]]() || this[_0xee2b[234]] && this[_0xee2b[229]];
}});
Ext[_0xee2b[6]](_0xee2b[235], {extend:_0xee2b[236], alias:_0xee2b[237], iconCls:Ext[_0xee2b[238]] + _0xee2b[239], robo:null, transactionList:null, type:_0xee2b[12], text:_0xee2b[240], disabled:true, constructor:function(_0x8e22x3) {
  _0x8e22x3 = _0x8e22x3 || {};
  Ext[_0xee2b[8]](this, _0x8e22x3);
  if (!this[_0xee2b[241]]) {
    throw new Error(_0xee2b[242] + this[_0xee2b[243]]);
  }
  this[_0xee2b[9]](_0x8e22x3);
}, initComponent:function() {
  var _0x8e22x3 = this;
  Ext[_0xee2b[8]](this, {menu:new Ext[_0xee2b[247]].Menu({cls:_0xee2b[244], items:this[_0xee2b[245]](), listeners:{click:this[_0xee2b[246]], scope:this}})});
  this[_0xee2b[149]](_0xee2b[248], function() {
    _0x8e22x3[_0xee2b[241]][_0x8e22x3[_0xee2b[249]]]();
  });
  this[_0xee2b[252]](_0x8e22x3[_0xee2b[241]], _0x8e22x3[_0xee2b[249]] + _0xee2b[250], this[_0xee2b[251]], this);
  this[_0xee2b[9]]();
}, onTransactionQueueChange:function(_0x8e22x6, _0x8e22x3) {
  this[_0xee2b[253]](_0x8e22x3[_0xee2b[4]] === 0);
  var _0x8e22x4 = this[_0xee2b[247]];
  _0x8e22x4[_0xee2b[254]]();
  _0x8e22x4[_0xee2b[255]](this[_0xee2b[245]]());
  if (!_0x8e22x3[_0xee2b[4]]) {
    _0x8e22x4[_0xee2b[256]]();
  }
}, getTransactionItems:function() {
  var _0x8e22x6 = this;
  var _0x8e22x3 = Ext[_0xee2b[26]][_0xee2b[41]](this[_0xee2b[241]][this[_0xee2b[249]] + _0xee2b[257]], function(_0x8e22x4) {
    return new Ext[_0xee2b[247]].Item({text:_0x8e22x4[_0xee2b[15]](), transaction:_0x8e22x4, listeners:{activate:_0x8e22x6[_0xee2b[258]], deactivate:_0x8e22x6[_0xee2b[259]], scope:_0x8e22x6}});
  });
  if (this[_0xee2b[249]] == _0xee2b[12]) {
    _0x8e22x3[_0xee2b[260]]();
  }
  return _0x8e22x3;
}, onTransactionClick:function(_0x8e22x6, _0x8e22x3) {
  if (!_0x8e22x3) {
    return;
  }
  this[_0xee2b[241]][this[_0xee2b[249]]](_0x8e22x3[_0xee2b[261]]);
}, onTransactionItemActivated:function(_0x8e22x3) {
  this[_0xee2b[247]][_0xee2b[266]][_0xee2b[25]](function(_0x8e22x6) {
    if (_0x8e22x6 == _0x8e22x3) {
      return false;
    }
    if (_0x8e22x6[_0xee2b[262]]) {
      _0x8e22x6[_0xee2b[265]][_0xee2b[264]](_0x8e22x6[_0xee2b[263]]);
    }
  });
}, onTransactionItemDeActivated:function(_0x8e22x3) {
  this[_0xee2b[247]][_0xee2b[266]][_0xee2b[25]](function(_0x8e22x6) {
    if (_0x8e22x6 == _0x8e22x3) {
      return false;
    }
    if (_0x8e22x6[_0xee2b[262]]) {
      _0x8e22x6[_0xee2b[265]][_0xee2b[267]](_0x8e22x6[_0xee2b[263]]);
    }
  });
}});
Ext[_0xee2b[6]](_0xee2b[268], {extend:_0xee2b[235], alias:_0xee2b[269], iconCls:Ext[_0xee2b[238]] + _0xee2b[270], type:_0xee2b[13], text:_0xee2b[271]});
Ext[_0xee2b[6]](_0xee2b[272], {extend:_0xee2b[273], alias:_0xee2b[274], robo:null, type:_0xee2b[12], constructor:function(_0x8e22x3) {
  _0x8e22x3 = _0x8e22x3 || {};
  Ext[_0xee2b[8]](this, _0x8e22x3);
  if (!this[_0xee2b[241]]) {
    throw new Error(_0xee2b[242] + this[_0xee2b[243]]);
  }
  this[_0xee2b[9]](_0x8e22x3);
}, initComponent:function() {
  var _0x8e22x3 = this;
  Ext[_0xee2b[8]](this, {rootVisible:false, columns:[{xtype:_0xee2b[275], text:_0xee2b[276], dataIndex:_0xee2b[14], width:250}, {text:_0xee2b[277], dataIndex:_0xee2b[278], flex:1, tdCls:_0xee2b[279]}], store:{fields:[_0xee2b[14], _0xee2b[278], _0xee2b[280]]}, viewConfig:{getRowClass:Ext[_0xee2b[283]][_0xee2b[282]](this[_0xee2b[281]], this)}});
  this[_0xee2b[252]](_0x8e22x3[_0xee2b[241]], _0x8e22x3[_0xee2b[249]] + _0xee2b[250], this[_0xee2b[251]], this);
  this[_0xee2b[9]]();
}, getActiveRowClass:function(_0x8e22x3, _0x8e22x5, _0x8e22x4, _0x8e22x6) {
  return _0x8e22x3[_0xee2b[55]](_0xee2b[280]) ? _0xee2b[284] : _0xee2b[27];
}, onTransactionQueueChange:function(_0x8e22x4, _0x8e22x3) {
  var _0x8e22x5 = this[_0xee2b[249]];
  var _0x8e22x6 = Ext[_0xee2b[26]][_0xee2b[41]](_0x8e22x3, function(_0x8e22x9, _0x8e22x2) {
    var _0x8e22x1 = _0x8e22x5 == _0xee2b[12] ? _0x8e22x2 == _0x8e22x3[_0xee2b[4]] - 1 : _0x8e22x2 === 0;
    return {leaf:false, expanded:true, title:_0x8e22x9[_0xee2b[15]](), isActive:_0x8e22x1, children:Ext[_0xee2b[26]][_0xee2b[41]](_0x8e22x9[_0xee2b[285]](), function(_0x8e22xa) {
      var _0x8e22x7 = _0x8e22xa[_0xee2b[37]]();
      return {leaf:true, title:_0x8e22xa[_0xee2b[15]](), fieldNames:_0x8e22xa instanceof Robo[_0xee2b[175]][_0xee2b[174]][_0xee2b[286]] ? _0x8e22xa[_0xee2b[278]][_0xee2b[73]](_0xee2b[287]) : _0xee2b[27], isActive:_0x8e22x1};
    })};
  });
  this[_0xee2b[64]][_0xee2b[288]]({expanded:true, children:_0x8e22x6});
  this[_0xee2b[290]]()[_0xee2b[289]](0, Infinity);
}});
Ext[_0xee2b[6]](_0xee2b[291], {requires:[_0xee2b[110]], mixins:{observable:_0xee2b[108]}, isCrudManager:true, revision:null, stores:null, storeIdProperty:_0xee2b[146], filterParam:_0xee2b[173], storesIndex:null, activeRequests:null, delayedSyncs:null, transport:null, trackResponseType:false, phantomIdField:_0xee2b[292], autoLoad:false, autoSyncTimeout:100, autoSync:false, resetIdsBeforeSync:true, syncApplySequence:null, writeAllFields:false, fieldMapping:false, destroyed:false, ignoreUpdates:0, loaded:false, 
createMissingRecords:false, autoSyncTimerId:null, applyingLoadResponse:false, applyingSyncResponse:false, constructor:function(_0x8e22x6) {
  _0x8e22x6 = _0x8e22x6 || {};
  this[_0xee2b[295]][_0xee2b[294]][_0xee2b[217]][_0xee2b[293]](this, _0x8e22x6);
  this[_0xee2b[296]] = {};
  this[_0xee2b[297]] = [];
  this[_0xee2b[298]] = _0x8e22x6[_0xee2b[298]] || this[_0xee2b[298]] || {};
  var _0x8e22x3 = _0x8e22x6[_0xee2b[125]] || this[_0xee2b[125]];
  this[_0xee2b[125]] = [];
  this[_0xee2b[129]](_0x8e22x3);
  var _0x8e22x4 = _0x8e22x6[_0xee2b[299]] || this[_0xee2b[299]];
  if (_0x8e22x4) {
    this[_0xee2b[299]] = null;
    this[_0xee2b[300]](_0x8e22x4);
  }
  if (this[_0xee2b[301]]) {
    this[_0xee2b[302]]();
  }
}, updateStoreIndex:function() {
  var _0x8e22x6 = {};
  for (var _0x8e22x5 = 0, _0x8e22x3 = this[_0xee2b[125]][_0xee2b[4]]; _0x8e22x5 < _0x8e22x3; _0x8e22x5++) {
    var _0x8e22x4 = this[_0xee2b[125]][_0x8e22x5];
    if (_0x8e22x4[_0xee2b[146]]) {
      _0x8e22x6[_0x8e22x4[_0xee2b[146]]] = this[_0xee2b[125]][_0x8e22x5];
    }
  }
  this[_0xee2b[303]] = _0x8e22x6;
}, getStoreDescriptor:function(_0x8e22x6) {
  if (!_0x8e22x6) {
    return;
  }
  if (_0x8e22x6[_0xee2b[304]]) {
    for (var _0x8e22x4 = 0, _0x8e22x3 = this[_0xee2b[125]][_0xee2b[4]]; _0x8e22x4 < _0x8e22x3; _0x8e22x4++) {
      if (this[_0xee2b[125]][_0x8e22x4][_0xee2b[64]] === _0x8e22x6) {
        return this[_0xee2b[125]][_0x8e22x4];
      }
    }
  } else {
    if (typeof _0x8e22x6 == _0xee2b[305]) {
      return this[_0xee2b[303]][_0x8e22x6[_0xee2b[146]]];
    } else {
      return this[_0xee2b[303]][_0x8e22x6] || this[_0xee2b[306]](Ext[_0xee2b[22]][_0xee2b[132]][_0xee2b[55]](_0x8e22x6));
    }
  }
}, getStore:function(_0x8e22x3) {
  var _0x8e22x6 = this[_0xee2b[306]](_0x8e22x3);
  return _0x8e22x6 && _0x8e22x6[_0xee2b[64]];
}, forEachStore:function(_0x8e22x2, _0x8e22x5) {
  if (!_0x8e22x2) {
    return;
  }
  var _0x8e22x6 = this[_0xee2b[125]];
  for (var _0x8e22x4 = 0, _0x8e22x3 = _0x8e22x6[_0xee2b[4]]; _0x8e22x4 < _0x8e22x3; _0x8e22x4++) {
    if (_0x8e22x2[_0xee2b[293]](_0x8e22x5 || this, _0x8e22x6[_0x8e22x4][_0xee2b[64]], _0x8e22x6[_0x8e22x4][_0xee2b[146]], _0x8e22x6[_0x8e22x4]) === false) {
      break;
    }
  }
}, addStore:function(_0x8e22xb, _0x8e22x7, _0x8e22x3) {
  if (!_0x8e22xb) {
    return;
  }
  if (!Ext[_0xee2b[307]](_0x8e22xb)) {
    _0x8e22xb = [_0x8e22xb];
  }
  var _0x8e22x1 = [];
  for (var _0x8e22x9 = 0, _0x8e22x4 = _0x8e22xb[_0xee2b[4]]; _0x8e22x9 < _0x8e22x4; _0x8e22x9++) {
    var _0x8e22xc = _0x8e22xb[_0x8e22x9];
    if (_0x8e22xc[_0xee2b[304]]) {
      _0x8e22xc = {store:_0x8e22xc};
    } else {
      if (typeof _0x8e22xc == _0xee2b[305]) {
        if (_0x8e22xc[_0xee2b[125]]) {
          if (!Ext[_0xee2b[307]](_0x8e22xc[_0xee2b[125]])) {
            _0x8e22xc[_0xee2b[125]] = [_0x8e22xc[_0xee2b[125]]];
          }
          for (var _0x8e22x5 = 0, _0x8e22x6 = _0x8e22xc[_0xee2b[125]][_0xee2b[4]]; _0x8e22x5 < _0x8e22x6; _0x8e22x5++) {
            var _0x8e22xd = _0x8e22xc[_0xee2b[125]][_0x8e22x5], _0x8e22x2 = _0x8e22xd;
            if (_0xee2b[308] === typeof _0x8e22xd) {
              _0x8e22x2 = {storeId:_0x8e22xd};
            }
            _0x8e22x2[_0xee2b[309]] = _0x8e22xc;
            _0x8e22xc[_0xee2b[125]][_0x8e22x5] = _0x8e22x2;
          }
        }
      } else {
        _0x8e22xc = {store:Ext[_0xee2b[22]][_0xee2b[132]][_0xee2b[55]](_0x8e22xc)};
      }
    }
    _0x8e22x1[_0xee2b[11]](this[_0xee2b[310]](_0x8e22xc));
    if (_0x8e22xc[_0xee2b[64]][_0xee2b[311]]) {
      _0x8e22xc[_0xee2b[64]][_0xee2b[311]](this);
    } else {
      _0x8e22xc[_0xee2b[64]][_0xee2b[312]] = this;
    }
    if (_0x8e22xc[_0xee2b[64]][_0xee2b[234]]) {
      _0x8e22xc[_0xee2b[64]][_0xee2b[314]]({type:_0xee2b[313]});
    }
    _0x8e22xc[_0xee2b[64]][_0xee2b[315]](false);
    this[_0xee2b[316]](_0x8e22xc[_0xee2b[64]]);
  }
  if (typeof _0x8e22x7 === _0xee2b[317]) {
    this[_0xee2b[125]][_0xee2b[11]][_0xee2b[8]](this[_0xee2b[125]], _0x8e22x1);
  } else {
    var _0x8e22xe = _0x8e22x7;
    if (_0x8e22x3) {
      if (_0x8e22x3[_0xee2b[304]] || typeof _0x8e22x3 !== _0xee2b[305]) {
        _0x8e22x3 = this[_0xee2b[306]](_0x8e22x3);
      }
      _0x8e22xe += Ext[_0xee2b[26]][_0xee2b[147]](this[_0xee2b[125]], _0x8e22x3);
    }
    this[_0xee2b[125]][_0xee2b[319]][_0xee2b[8]](this[_0xee2b[125]], [][_0xee2b[318]]([_0x8e22xe, 0], _0x8e22x1));
  }
  this[_0xee2b[320]]();
}, bindStoreListeners:function(_0x8e22x6, _0x8e22x3) {
  var _0x8e22x4 = {update:this[_0xee2b[321]], clear:this[_0xee2b[322]], scope:this};
  if (_0x8e22x6[_0xee2b[234]]) {
    Ext[_0xee2b[8]](_0x8e22x4, {nodeappend:this[_0xee2b[323]], nodeinsert:this[_0xee2b[323]], noderemove:this[_0xee2b[324]]});
  } else {
    Ext[_0xee2b[8]](_0x8e22x4, {add:this[_0xee2b[322]], remove:this[_0xee2b[322]]});
  }
  if (_0x8e22x3) {
    this[_0xee2b[325]](_0x8e22x6, _0x8e22x4);
  } else {
    this[_0xee2b[252]](_0x8e22x6, _0x8e22x4);
  }
}, unbindStoreListeners:function(_0x8e22x3) {
  this[_0xee2b[316]](_0x8e22x3, true);
}, fillStoreDescriptor:function(_0x8e22x5) {
  var _0x8e22x3 = _0x8e22x5[_0xee2b[64]], _0x8e22x4 = _0x8e22x3[_0xee2b[326]] || this[_0xee2b[326]], _0x8e22x6 = _0x8e22x3[_0xee2b[137]] && _0x8e22x3[_0xee2b[137]]() || _0x8e22x3[_0xee2b[327]];
  _0x8e22x6 = _0x8e22x6 && _0x8e22x6[_0xee2b[139]];
  Ext[_0xee2b[330]](_0x8e22x5, {storeId:_0x8e22x3[_0x8e22x4], phantomIdField:_0x8e22x6 && _0x8e22x6[_0xee2b[31]], idProperty:_0x8e22x6 && _0x8e22x6[_0xee2b[328]], writeAllFields:_0x8e22x3[_0xee2b[329]]});
  return _0x8e22x5;
}, removeStore:function(_0x8e22x6) {
  for (var _0x8e22x4 = 0, _0x8e22x3 = this[_0xee2b[125]][_0xee2b[4]]; _0x8e22x4 < _0x8e22x3; _0x8e22x4++) {
    var _0x8e22x5 = this[_0xee2b[125]][_0x8e22x4];
    if (_0x8e22x5 === _0x8e22x6 || _0x8e22x5[_0xee2b[64]] === _0x8e22x6 || _0x8e22x5[_0xee2b[146]] === _0x8e22x6) {
      this[_0xee2b[331]](_0x8e22x5[_0xee2b[64]]);
      delete this[_0xee2b[303]][_0x8e22x5[_0xee2b[146]]];
      this[_0xee2b[125]][_0xee2b[319]](_0x8e22x4, 1);
      if (this[_0xee2b[299]]) {
        this[_0xee2b[332]](_0x8e22x6);
      }
      break;
    }
  }
}, addStoreToApplySequence:function(_0x8e22x4, _0x8e22x3, _0x8e22x2) {
  if (!_0x8e22x4) {
    return;
  }
  if (!Ext[_0xee2b[307]](_0x8e22x4)) {
    _0x8e22x4 = [_0x8e22x4];
  }
  var _0x8e22x9 = [];
  for (var _0x8e22x5 = 0, _0x8e22x6 = _0x8e22x4[_0xee2b[4]]; _0x8e22x5 < _0x8e22x6; _0x8e22x5++) {
    var _0x8e22x1 = this[_0xee2b[306]](_0x8e22x4[_0x8e22x5]);
    if (_0x8e22x1) {
      _0x8e22x9[_0xee2b[11]](_0x8e22x1);
    }
  }
  if (!this[_0xee2b[299]]) {
    this[_0xee2b[299]] = [];
  }
  if (typeof _0x8e22x3 === _0xee2b[317]) {
    this[_0xee2b[299]][_0xee2b[11]][_0xee2b[8]](this[_0xee2b[299]], _0x8e22x9);
  } else {
    var _0x8e22x7 = _0x8e22x3;
    if (_0x8e22x2) {
      if (_0x8e22x2[_0xee2b[304]] || typeof _0x8e22x2 !== _0xee2b[305]) {
        _0x8e22x2 = this[_0xee2b[306]](_0x8e22x2);
      }
      _0x8e22x7 += Ext[_0xee2b[26]][_0xee2b[147]](this[_0xee2b[299]], _0x8e22x2);
    }
    this[_0xee2b[299]][_0xee2b[319]][_0xee2b[8]](this[_0xee2b[299]], [][_0xee2b[318]]([_0x8e22x7, 0], _0x8e22x9));
  }
}, removeStoreFromApplySequence:function(_0x8e22x6) {
  for (var _0x8e22x4 = 0, _0x8e22x3 = this[_0xee2b[299]][_0xee2b[4]]; _0x8e22x4 < _0x8e22x3; _0x8e22x4++) {
    var _0x8e22x5 = this[_0xee2b[299]][_0x8e22x4];
    if (_0x8e22x5 === _0x8e22x6 || _0x8e22x5[_0xee2b[64]] === _0x8e22x6 || _0x8e22x5[_0xee2b[146]] === _0x8e22x6) {
      this[_0xee2b[299]][_0xee2b[319]](_0x8e22x4, 1);
      break;
    }
  }
}, onNodeRemove:function(_0x8e22x3) {
  var _0x8e22x6 = _0x8e22x3 && _0x8e22x3[_0xee2b[82]]();
  _0x8e22x6 && _0x8e22x6[_0xee2b[149]](_0xee2b[333], this[_0xee2b[322]], this, {single:true});
}, onStoreUpdate:function(_0x8e22x2, _0x8e22x4, _0x8e22x5, _0x8e22x6) {
  if (!_0x8e22x2[_0xee2b[234]] || _0x8e22x4 !== _0x8e22x2[_0xee2b[230]]()) {
    var _0x8e22x3 = _0x8e22x6 && _0x8e22x6[_0xee2b[4]] === 1 && _0x8e22x4[_0xee2b[162]](_0x8e22x6[0]) && !_0x8e22x4[_0xee2b[162]](_0x8e22x6[0])[_0xee2b[163]];
    if (!_0x8e22x3) {
      this[_0xee2b[322]]();
    }
  }
}, onTreeStoreInsertOrAppend:function(_0x8e22x3, _0x8e22x6) {
  if (!_0x8e22x6[_0xee2b[232]]()) {
    this[_0xee2b[322]]();
  }
}, suspendChangesTracking:function() {
  this[_0xee2b[334]]++;
}, resumeChangesTracking:function(_0x8e22x3) {
  this[_0xee2b[334]]--;
  _0x8e22x3 && this[_0xee2b[322]]();
}, onStoreChange:function() {
  if (this[_0xee2b[334]]) {
    return;
  }
  var _0x8e22x3 = this;
  if (this[_0xee2b[335]]()) {
    this[_0xee2b[180]](_0xee2b[336], this);
    if (this[_0xee2b[65]]) {
      if (!this[_0xee2b[337]]) {
        this[_0xee2b[337]] = setTimeout(function() {
          _0x8e22x3[_0xee2b[337]] = null;
          _0x8e22x3[_0xee2b[338]]();
        }, this[_0xee2b[339]]);
      }
    }
  } else {
    this[_0xee2b[180]](_0xee2b[340], this);
  }
}, hasChanges:function(_0x8e22x6) {
  var _0x8e22x4;
  if (_0x8e22x6) {
    _0x8e22x4 = this[_0xee2b[341]](_0x8e22x6);
    if (!_0x8e22x4) {
      return false;
    }
    return this[_0xee2b[342]](_0x8e22x4);
  }
  for (var _0x8e22x5 = 0, _0x8e22x3 = this[_0xee2b[125]][_0xee2b[4]]; _0x8e22x5 < _0x8e22x3; _0x8e22x5++) {
    if (this[_0xee2b[342]](this[_0xee2b[125]][_0x8e22x5][_0xee2b[64]])) {
      return true;
    }
  }
  return false;
}, isStoreDirty:function(_0x8e22x5) {
  if (_0x8e22x5[_0xee2b[343]]()[_0xee2b[4]]) {
    return true;
  }
  if (_0x8e22x5[_0xee2b[234]]) {
    for (var _0x8e22x1 in _0x8e22x5[_0xee2b[344]]) {
      var _0x8e22x6 = _0x8e22x5[_0xee2b[344]][_0x8e22x1];
      if (_0x8e22x6[_0xee2b[92]] === true && !_0x8e22x6[_0xee2b[55]](_0xee2b[345]) && (Ext[_0xee2b[154]][_0xee2b[347]](_0x8e22x6[_0xee2b[346]])[_0xee2b[4]] !== 1 || !(_0xee2b[102] in _0x8e22x6[_0xee2b[346]]) && !(_0xee2b[80] in _0x8e22x6[_0xee2b[346]]))) {
        return true;
      } else {
        if (!_0x8e22x6[_0xee2b[55]](_0xee2b[345]) && _0x8e22x6[_0xee2b[30]] && _0x8e22x6[_0xee2b[348]]()) {
          return true;
        }
      }
    }
  } else {
    var _0x8e22x4 = _0x8e22x5[_0xee2b[349]]()[_0xee2b[266]];
    for (var _0x8e22x2 = 0, _0x8e22x3 = _0x8e22x4[_0xee2b[4]]; _0x8e22x2 < _0x8e22x3; _0x8e22x2++) {
      if (_0x8e22x4[_0x8e22x2][_0xee2b[92]] || _0x8e22x4[_0x8e22x2][_0xee2b[30]]) {
        return true;
      }
    }
  }
  return false;
}, getLoadPackage:function(_0x8e22xf) {
  var _0x8e22x8 = {type:_0xee2b[302], requestId:this[_0xee2b[350]](), stores:[]};
  var _0x8e22xe = this[_0xee2b[125]], _0x8e22x5 = _0x8e22x8[_0xee2b[125]];
  for (var _0x8e22x9 = 0, _0x8e22x2 = _0x8e22xe[_0xee2b[4]]; _0x8e22x9 < _0x8e22x2; _0x8e22x9++) {
    var _0x8e22xd = _0x8e22xe[_0x8e22x9], _0x8e22x6 = _0x8e22xd[_0xee2b[351]] || _0x8e22xd[_0xee2b[64]][_0xee2b[351]] || this[_0xee2b[351]], _0x8e22x3 = _0x8e22xf && _0x8e22xf[_0x8e22xd[_0xee2b[146]]], _0x8e22x7 = _0x8e22xd[_0xee2b[352]] || _0x8e22xd[_0xee2b[64]][_0xee2b[352]];
    if (_0x8e22xd[_0xee2b[64]][_0xee2b[353]] && _0x8e22x6) {
      _0x8e22x3 = _0x8e22x3 || {};
      var _0x8e22x4 = [];
      _0x8e22xd[_0xee2b[64]][_0xee2b[355]]()[_0xee2b[25]](function(_0x8e22xa) {
        _0x8e22x4[_0xee2b[11]](_0x8e22xa[_0xee2b[354]]());
      });
      _0x8e22x3[_0x8e22x6] = _0x8e22x4;
    }
    if (_0x8e22x3 || _0x8e22x7) {
      var _0x8e22x1 = Ext[_0xee2b[8]]({storeId:_0x8e22xd[_0xee2b[146]], page:1, pageSize:_0x8e22x7}, _0x8e22x3);
      _0x8e22xe[_0x8e22x9][_0xee2b[356]] = _0x8e22x1[_0xee2b[357]];
      _0x8e22x5[_0xee2b[11]](_0x8e22x1);
    } else {
      _0x8e22x5[_0xee2b[11]](_0x8e22xd[_0xee2b[146]]);
    }
  }
  return _0x8e22x8;
}, prepareAdded:function(_0x8e22x6, _0x8e22x8, _0x8e22x7) {
  var _0x8e22x9 = this, _0x8e22xd = [];
  for (var _0x8e22x2 = 0, _0x8e22x4 = _0x8e22x6[_0xee2b[4]]; _0x8e22x2 < _0x8e22x4; _0x8e22x2++) {
    var _0x8e22x1 = _0x8e22x6[_0x8e22x2], _0x8e22x5 = _0x8e22x1[_0xee2b[349]]({serialize:true, persist:true}), _0x8e22x3 = _0x8e22x1[_0xee2b[349]]({serialize:true, persist:true, critical:true, changes:true});
    _0x8e22x5 = Ext[_0xee2b[330]](_0x8e22x5, _0x8e22x3);
    if (!_0x8e22x5[_0xee2b[53]](_0x8e22x8)) {
      _0x8e22x5[_0x8e22x8] = _0x8e22x1[_0xee2b[32]]();
    }
    if (_0x8e22x9[_0xee2b[358]]) {
      delete _0x8e22x5[_0x8e22x1[_0xee2b[328]]];
    }
    _0x8e22x9[_0xee2b[359]](_0x8e22x5, _0x8e22x1);
    if (_0x8e22x7) {
      _0x8e22x9[_0xee2b[360]](_0x8e22x1, _0x8e22x5, _0x8e22x7);
    }
    _0x8e22xd[_0xee2b[11]](_0x8e22x5);
  }
  return _0x8e22xd;
}, prepareUpdated:function(_0x8e22x6, _0x8e22xe, _0x8e22xd) {
  var _0x8e22x7 = this, _0x8e22xc = [], _0x8e22x3 = _0x8e22xd[_0xee2b[329]] || _0x8e22xd[_0xee2b[329]] !== false && _0x8e22x7[_0xee2b[329]];
  for (var _0x8e22x1 = 0, _0x8e22x4 = _0x8e22x6[_0xee2b[4]]; _0x8e22x1 < _0x8e22x4; _0x8e22x1++) {
    var _0x8e22x9 = _0x8e22x6[_0x8e22x1], _0x8e22x2 = _0x8e22x9[_0xee2b[349]]({serialize:true, persist:true, critical:!_0x8e22x3, changes:!_0x8e22x3});
    _0x8e22x2[_0x8e22x9[_0xee2b[328]]] = _0x8e22x9[_0xee2b[32]]();
    for (var _0x8e22xf in _0x8e22x2) {
      var _0x8e22x8 = _0x8e22x9[_0xee2b[162]](_0x8e22xf);
      var _0x8e22x5 = !_0x8e22x8 || (_0x8e22x3 ? !_0x8e22x8[_0xee2b[163]] && !_0x8e22x8[_0xee2b[361]] : !_0x8e22x8[_0xee2b[163]]);
      if (_0x8e22x5) {
        delete _0x8e22x2[_0x8e22xf];
      }
    }
    _0x8e22x7[_0xee2b[359]](_0x8e22x2, _0x8e22x9);
    if (_0x8e22xe) {
      _0x8e22x7[_0xee2b[360]](_0x8e22x9, _0x8e22x2, _0x8e22xe);
    }
    _0x8e22xc[_0xee2b[11]](_0x8e22x2);
  }
  return _0x8e22xc;
}, prepareRemoved:function(_0x8e22x5) {
  var _0x8e22x3 = [];
  for (var _0x8e22x2 = 0, _0x8e22x4 = _0x8e22x5[_0xee2b[4]]; _0x8e22x2 < _0x8e22x4; _0x8e22x2++) {
    var _0x8e22x6 = _0x8e22x5[_0x8e22x2], _0x8e22x1 = {};
    _0x8e22x1[_0x8e22x6[_0xee2b[328]]] = _0x8e22x6[_0xee2b[32]]();
    _0x8e22x3[_0xee2b[11]](_0x8e22x1);
  }
  return _0x8e22x3;
}, processFieldMapping:function(_0x8e22x5, _0x8e22x3) {
  var _0x8e22x4 = this;
  if (!_0x8e22x4[_0xee2b[362]]) {
    return;
  }
  if (Ext[_0xee2b[1]](_0x8e22x4[_0xee2b[362]])) {
    _0x8e22x4[_0xee2b[362]](_0x8e22x5, _0x8e22x3);
    return;
  }
  for (var _0x8e22x1 in _0x8e22x5) {
    var _0x8e22x2 = _0x8e22x3[_0xee2b[162]](_0x8e22x1), _0x8e22x6 = _0x8e22x2 && _0x8e22x2[Ext[_0xee2b[363]](_0x8e22x4[_0xee2b[362]]) ? _0x8e22x4[_0xee2b[362]] : _0xee2b[364]];
    if (_0x8e22x6 && _0x8e22x6 !== _0x8e22x1) {
      _0x8e22x5[_0x8e22x6] = _0x8e22x5[_0x8e22x1];
      delete _0x8e22x5[_0x8e22x1];
    }
  }
}, processSubStores:function(_0x8e22x6, _0x8e22x1, _0x8e22x3) {
  for (var _0x8e22x5 = 0, _0x8e22x7 = _0x8e22x3[_0xee2b[4]]; _0x8e22x5 < _0x8e22x7; _0x8e22x5++) {
    var _0x8e22x9 = _0x8e22x3[_0x8e22x5][_0xee2b[146]], _0x8e22x4 = _0x8e22x6[_0xee2b[55]](_0x8e22x9);
    if (_0x8e22x4) {
      var _0x8e22x2 = this[_0xee2b[365]](Ext[_0xee2b[8]]({store:_0x8e22x4}, _0x8e22x3[_0x8e22x5]));
      if (_0x8e22x2) {
        _0x8e22x1[_0x8e22x9] = Ext[_0xee2b[8]](_0x8e22x2, {$store:true});
      } else {
        delete _0x8e22x1[_0x8e22x9];
      }
    } else {
      delete _0x8e22x1[_0x8e22x9];
    }
  }
}, getStoreChanges:function(_0x8e22x5, _0x8e22x9) {
  _0x8e22x9 = _0x8e22x9 || _0x8e22x5[_0xee2b[31]] || this[_0xee2b[31]];
  var _0x8e22x1 = _0x8e22x5[_0xee2b[64]], _0x8e22x2 = _0x8e22x1[_0xee2b[366]](), _0x8e22x4 = _0x8e22x1[_0xee2b[367]](), _0x8e22x7 = _0x8e22x1[_0xee2b[343]](), _0x8e22x6 = _0x8e22x5[_0xee2b[125]];
  var _0x8e22x3;
  if (_0x8e22x2[_0xee2b[4]]) {
    _0x8e22x2 = this[_0xee2b[368]](_0x8e22x2, _0x8e22x9, _0x8e22x6);
  }
  if (_0x8e22x4[_0xee2b[4]]) {
    _0x8e22x4 = this[_0xee2b[369]](_0x8e22x4, _0x8e22x6, _0x8e22x5);
  }
  if (_0x8e22x7[_0xee2b[4]]) {
    _0x8e22x7 = this[_0xee2b[370]](_0x8e22x7);
  }
  if (_0x8e22x2[_0xee2b[4]] || _0x8e22x4[_0xee2b[4]] || _0x8e22x7[_0xee2b[4]]) {
    _0x8e22x3 = {};
    if (_0x8e22x2[_0xee2b[4]]) {
      _0x8e22x3[_0xee2b[371]] = _0x8e22x2;
    }
    if (_0x8e22x4[_0xee2b[4]]) {
      _0x8e22x3[_0xee2b[372]] = _0x8e22x4;
    }
    if (_0x8e22x7[_0xee2b[4]]) {
      _0x8e22x3[_0xee2b[373]] = _0x8e22x7;
    }
  }
  return _0x8e22x3;
}, getChangeSetPackage:function() {
  var _0x8e22x5 = {type:_0xee2b[338], requestId:this[_0xee2b[350]](), revision:this[_0xee2b[374]]};
  var _0x8e22x1 = this[_0xee2b[125]], _0x8e22x8 = 0;
  for (var _0x8e22x6 = 0, _0x8e22x3 = _0x8e22x1[_0xee2b[4]]; _0x8e22x6 < _0x8e22x3; _0x8e22x6++) {
    var _0x8e22x2 = _0x8e22x1[_0x8e22x6], _0x8e22x9 = _0x8e22x2[_0xee2b[31]] || this[_0xee2b[31]], _0x8e22x7 = _0x8e22x2[_0xee2b[146]];
    var _0x8e22x4 = this[_0xee2b[365]](_0x8e22x2, _0x8e22x9);
    if (_0x8e22x4) {
      _0x8e22x8++;
      _0x8e22x5[_0x8e22x7] = _0x8e22x4;
    }
  }
  return _0x8e22x8 ? _0x8e22x5 : null;
}, getSubStoresData:function(_0x8e22x7, _0x8e22x1, _0x8e22x9, _0x8e22x2) {
  if (!_0x8e22x7) {
    return;
  }
  var _0x8e22x8 = [];
  var _0x8e22x3 = function(_0x8e22xf, _0x8e22xc) {
    for (var _0x8e22x10 = 0, _0x8e22xa = _0x8e22xc[_0xee2b[4]]; _0x8e22x10 < _0x8e22xa; _0x8e22x10++) {
      var _0x8e22xd = _0x8e22xc[_0x8e22x10][_0xee2b[146]];
      if (_0x8e22xf[_0x8e22xd]) {
        _0x8e22x8[_0xee2b[11]]({id:_0x8e22xf[_0x8e22x9], storeDesc:_0x8e22xc[_0x8e22x10], data:_0x8e22xf[_0x8e22xd]});
        delete _0x8e22xf[_0x8e22xd];
      }
    }
  };
  var _0x8e22x5 = 0, _0x8e22x4 = _0x8e22x7[_0xee2b[4]];
  if (_0x8e22x2) {
    for (; _0x8e22x5 < _0x8e22x4; _0x8e22x5++) {
      _0x8e22x3(_0x8e22x7[_0x8e22x5], _0x8e22x1);
      var _0x8e22x6 = this[_0xee2b[376]](_0x8e22x7[_0x8e22x5][_0xee2b[375]], _0x8e22x1, _0x8e22x9, true);
      if (_0x8e22x6) {
        _0x8e22x8 = _0x8e22x8[_0xee2b[318]](_0x8e22x6);
      }
    }
  } else {
    for (; _0x8e22x5 < _0x8e22x4; _0x8e22x5++) {
      _0x8e22x3(_0x8e22x7[_0x8e22x5], _0x8e22x1);
    }
  }
  return _0x8e22x8;
}, loadDataToTreeStore:function(_0x8e22x6, _0x8e22x2, _0x8e22x4, _0x8e22x1) {
  var _0x8e22x5 = _0x8e22x2 && _0x8e22x2[_0xee2b[377]] || [];
  var _0x8e22x3 = _0x8e22x6[_0xee2b[230]]();
  if (_0x8e22x3) {
    _0x8e22x3[_0xee2b[346]] = null;
    _0x8e22x3[_0xee2b[378]]();
  }
  _0x8e22x6[_0xee2b[379]][_0xee2b[22]] = _0x8e22x5;
  _0x8e22x6[_0xee2b[302]]({onChildNodesAvailable:function() {
    var _0x8e22x9 = this[_0xee2b[355]]();
    _0x8e22x9[_0xee2b[380]]();
    _0x8e22x9[_0xee2b[381]]();
  }});
}, loadDataToFlatStore:function(_0x8e22x6, _0x8e22x2, _0x8e22x4, _0x8e22x1) {
  var _0x8e22x5 = _0x8e22x2 && _0x8e22x2[_0xee2b[377]] || [];
  _0x8e22x6[_0xee2b[382]] = _0x8e22x2[_0xee2b[383]];
  _0x8e22x6[_0xee2b[356]] = _0x8e22x1[_0xee2b[356]];
  var _0x8e22x3 = Ext[_0xee2b[26]][_0xee2b[41]](_0x8e22x5, function(_0x8e22x9) {
    return new _0x8e22x6[_0xee2b[327]](_0x8e22x9);
  });
  _0x8e22x6[_0xee2b[385]](_0x8e22x3, _0x8e22x4 && _0x8e22x4[_0xee2b[384]] || _0x8e22x2[_0xee2b[384]]);
  _0x8e22x6[_0xee2b[180]](_0xee2b[302], _0x8e22x6, _0x8e22x3, true);
}, applyMetaDataToStore:function(_0x8e22x6, _0x8e22x3) {
  if (_0x8e22x3) {
    if (_0x8e22x6[_0xee2b[386]]) {
      _0x8e22x6[_0xee2b[386]](_0x8e22x3, this);
    } else {
      _0x8e22x6[_0xee2b[387]] = _0x8e22x3;
    }
  }
}, loadDataToStore:function(_0x8e22x3, _0x8e22x2, _0x8e22xb) {
  var _0x8e22xd = _0x8e22x3[_0xee2b[64]], _0x8e22x1 = _0x8e22xd[_0xee2b[137]](), _0x8e22xe = _0x8e22x3[_0xee2b[125]], _0x8e22xf = _0x8e22x3[_0xee2b[328]] || _0x8e22x1 && _0x8e22x1[_0xee2b[139]] && _0x8e22x1[_0xee2b[139]][_0xee2b[328]] || _0xee2b[388], _0x8e22x7 = _0x8e22xd[_0xee2b[234]], _0x8e22x8;
  _0x8e22xd[_0xee2b[389]] = true;
  if (_0x8e22x2) {
    this[_0xee2b[390]](_0x8e22xd, _0x8e22x2[_0xee2b[387]]);
    var _0x8e22xc = _0x8e22x2[_0xee2b[377]] || [];
    if (_0x8e22xc) {
      if (_0x8e22xe) {
        _0x8e22x8 = this[_0xee2b[376]](_0x8e22xc, _0x8e22xe, _0x8e22xf, _0x8e22x7);
      }
      var _0x8e22x4 = _0x8e22x7 ? this[_0xee2b[391]] : this[_0xee2b[392]];
      _0x8e22x4[_0xee2b[293]](this, _0x8e22xd, _0x8e22x2, _0x8e22xb, _0x8e22x3);
      if (_0x8e22x8) {
        for (var _0x8e22x5 = 0, _0x8e22x6 = _0x8e22x8[_0xee2b[4]]; _0x8e22x5 < _0x8e22x6; _0x8e22x5++) {
          var _0x8e22x9 = _0x8e22x8[_0x8e22x5];
          this[_0xee2b[396]](Ext[_0xee2b[8]]({store:_0x8e22xd[_0x8e22x7 ? _0xee2b[394] : _0xee2b[395]](_0x8e22x9[_0xee2b[388]])[_0xee2b[55]](_0x8e22x9[_0xee2b[393]][_0xee2b[146]])}, _0x8e22x9[_0xee2b[393]]), _0x8e22x9[_0xee2b[22]]);
        }
      }
    }
  }
  _0x8e22xd[_0xee2b[389]] = false;
}, loadData:function(_0x8e22x4, _0x8e22x5) {
  _0x8e22x5 = _0x8e22x5 || {};
  this[_0xee2b[397]]();
  for (var _0x8e22x2 = 0, _0x8e22x6 = this[_0xee2b[125]][_0xee2b[4]]; _0x8e22x2 < _0x8e22x6; _0x8e22x2++) {
    var _0x8e22x9 = this[_0xee2b[125]][_0x8e22x2], _0x8e22x3 = _0x8e22x9[_0xee2b[146]], _0x8e22x1 = _0x8e22x4[_0x8e22x3];
    if (_0x8e22x1) {
      this[_0xee2b[396]](_0x8e22x9, _0x8e22x1, _0x8e22x5[_0x8e22x3]);
    }
  }
  this[_0xee2b[398]]();
}, applyChangesToRecord:function(_0x8e22x7, _0x8e22xd, _0x8e22xb, _0x8e22xc) {
  var _0x8e22x9 = _0x8e22x7[_0xee2b[22]], _0x8e22x1 = {}, _0x8e22x5 = false, _0x8e22x3;
  if (_0x8e22xb) {
    for (var _0x8e22x2 = 0, _0x8e22x4 = _0x8e22xb[_0xee2b[4]]; _0x8e22x2 < _0x8e22x4; _0x8e22x2++) {
      _0x8e22x3 = _0x8e22xb[_0x8e22x2][_0xee2b[146]];
      if (_0x8e22xd[_0xee2b[53]](_0x8e22x3)) {
        _0x8e22x1[_0x8e22x3] = true;
        var _0x8e22xa = _0x8e22x7[_0xee2b[55]](_0x8e22x3);
        if (_0x8e22xa) {
          this[_0xee2b[399]](Ext[_0xee2b[8]]({store:_0x8e22xa}, _0x8e22xb[_0x8e22x2]), _0x8e22xd[_0x8e22x3]);
        } else {
          Ext[_0xee2b[401]](_0xee2b[400]);
        }
      }
    }
  }
  for (_0x8e22x3 in _0x8e22xd) {
    if (_0x8e22xd[_0xee2b[53]](_0x8e22x3) && !_0x8e22x1[_0x8e22x3]) {
      var _0x8e22xe = _0x8e22xd[_0x8e22x3];
      if (!_0x8e22x7[_0xee2b[402]](_0x8e22x9[_0x8e22x3], _0x8e22xe)) {
        var _0x8e22x6 = _0x8e22xc && _0x8e22xc[_0xee2b[403]] || _0xee2b[404];
        if (!_0x8e22x5) {
          _0x8e22x5 = true;
          _0x8e22x7[_0xee2b[46]]();
        }
        if (_0x8e22x3 === _0x8e22x7[_0xee2b[328]]) {
          _0x8e22x7[_0xee2b[405]](_0x8e22xe);
        } else {
          if (_0x8e22x3 === _0x8e22x6 && _0x8e22xc[_0xee2b[234]]) {
            var _0x8e22x10 = _0x8e22xe && _0x8e22xc[_0xee2b[394]](_0x8e22xe) || _0x8e22xc[_0xee2b[230]]();
            _0x8e22x10[_0xee2b[83]](_0x8e22x7);
          } else {
            if (_0x8e22x7[_0xee2b[162]](_0x8e22x3)) {
              _0x8e22x7[_0xee2b[50]](_0x8e22x3, _0x8e22xe);
            }
          }
        }
      }
    }
  }
  if (_0x8e22x5) {
    _0x8e22x7[_0xee2b[51]]();
  }
  _0x8e22x7[_0xee2b[406]]();
}, applyRemovals:function(_0x8e22xc, _0x8e22xe, _0x8e22x5) {
  var _0x8e22xb = _0x8e22x5[_0xee2b[328]], _0x8e22xf = _0x8e22xc[_0xee2b[234]] ? _0x8e22xc[_0xee2b[81]] : _0x8e22xc[_0xee2b[373]], _0x8e22x11 = _0x8e22x5[_0xee2b[407]], _0x8e22x3 = _0x8e22x5[_0xee2b[408]], _0x8e22x7 = 0;
  for (var _0x8e22x9 = 0, _0x8e22x2 = _0x8e22xe[_0xee2b[4]]; _0x8e22x9 < _0x8e22x2; _0x8e22x9++) {
    var _0x8e22x1 = false;
    var _0x8e22x4 = _0x8e22xe[_0x8e22x9][_0x8e22xb];
    for (var _0x8e22x10 = 0, _0x8e22x6 = _0x8e22xf[_0xee2b[4]]; _0x8e22x10 < _0x8e22x6; _0x8e22x10++) {
      if (_0x8e22xf[_0x8e22x10][_0xee2b[32]]() == _0x8e22x4) {
        _0x8e22xf[_0xee2b[319]](_0x8e22x10, 1);
        _0x8e22x1 = true;
        _0x8e22x7++;
        break;
      }
    }
    if (!_0x8e22x1) {
      var _0x8e22xa = _0x8e22x11(_0x8e22x4);
      if (_0x8e22xa) {
        this[_0xee2b[397]]();
        _0x8e22x3(_0x8e22xa);
        Ext[_0xee2b[26]][_0xee2b[63]](_0x8e22xf, _0x8e22xa);
        _0x8e22x7++;
        this[_0xee2b[398]]();
      } else {
        Ext[_0xee2b[401]](_0xee2b[409]);
      }
    }
  }
  return _0x8e22x7;
}, getApplyChangesToStoreHelpers:function(_0x8e22x3) {
  if (_0x8e22x3[_0xee2b[234]]) {
    var _0x8e22x4 = function(_0x8e22x5) {
      return _0x8e22x3[_0xee2b[394]](_0x8e22x5);
    }, _0x8e22x6 = _0x8e22x3[_0xee2b[403]] || _0xee2b[404];
    return {findByPhantomFn:_0x8e22x4, findByIdFn:_0x8e22x4, addRecordFn:function(_0x8e22x2) {
      var _0x8e22x5 = _0x8e22x2[_0x8e22x6] && _0x8e22x3[_0xee2b[394]](_0x8e22x2[_0x8e22x6]) || _0x8e22x3[_0xee2b[230]]();
      return _0x8e22x5[_0xee2b[83]](_0x8e22x2);
    }, removeRecordFn:function(_0x8e22x5) {
      return _0x8e22x5[_0xee2b[96]][_0xee2b[78]](_0x8e22x5);
    }};
  } else {
    return {findByPhantomFn:function(_0x8e22x5) {
      return _0x8e22x3[_0xee2b[22]][_0xee2b[410]](_0x8e22x5);
    }, findByIdFn:function(_0x8e22x5) {
      return _0x8e22x3[_0xee2b[395]](_0x8e22x5);
    }, addRecordFn:function(_0x8e22x5) {
      return _0x8e22x3[_0xee2b[255]](_0x8e22x5)[0];
    }, removeRecordFn:function(_0x8e22x5) {
      return _0x8e22x3[_0xee2b[63]](_0x8e22x5);
    }};
  }
}, applyChangesToStore:function(_0x8e22xe, _0x8e22x12) {
  var _0x8e22x13 = this, _0x8e22x6 = _0x8e22xe[_0xee2b[31]] || _0x8e22x13[_0xee2b[31]], _0x8e22x7 = _0x8e22xe[_0xee2b[328]], _0x8e22x9 = _0x8e22xe[_0xee2b[64]];
  if (!_0x8e22x7) {
    var _0x8e22x2 = _0x8e22x9[_0xee2b[137]] && _0x8e22x9[_0xee2b[137]]() || _0x8e22x9[_0xee2b[327]];
    _0x8e22x2 = _0x8e22x2 && _0x8e22x2[_0xee2b[139]];
    _0x8e22x7 = _0x8e22x2 && _0x8e22x2[_0xee2b[328]] || _0xee2b[388];
  }
  var _0x8e22x11 = _0x8e22x13[_0xee2b[411]](_0x8e22x9), _0x8e22xc = _0x8e22x11[_0xee2b[412]], _0x8e22xf = _0x8e22x11[_0xee2b[407]], _0x8e22x3 = _0x8e22x11[_0xee2b[413]], _0x8e22x14 = _0x8e22x11[_0xee2b[408]], _0x8e22x15 = _0x8e22x12[_0xee2b[387]], _0x8e22x10 = _0x8e22x12[_0xee2b[377]], _0x8e22x16 = _0x8e22x12[_0xee2b[373]], _0x8e22xa = 0, _0x8e22x4;
  _0x8e22x15 && _0x8e22x13[_0xee2b[390]](_0x8e22x9, _0x8e22x15);
  if (_0x8e22x16) {
    _0x8e22xa = _0x8e22x13[_0xee2b[414]](_0x8e22x9, _0x8e22x16, {idProperty:_0x8e22x7, findByIdFn:_0x8e22xf, removeRecordFn:_0x8e22x14});
  }
  if (_0x8e22x10) {
    var _0x8e22x17, _0x8e22xb, _0x8e22x5, _0x8e22x1 = _0x8e22xe[_0xee2b[125]];
    for (var _0x8e22x18 = 0, _0x8e22x19 = _0x8e22x10[_0xee2b[4]]; _0x8e22x18 < _0x8e22x19; _0x8e22x18++) {
      _0x8e22x17 = _0x8e22x10[_0x8e22x18];
      _0x8e22x5 = _0x8e22x17[_0x8e22x6];
      _0x8e22xb = _0x8e22x17[_0x8e22x7];
      _0x8e22x4 = null;
      if (_0x8e22x5 != null && _0x8e22x5 !== _0xee2b[27]) {
        _0x8e22x4 = _0x8e22xc(_0x8e22x5);
      } else {
        if (_0x8e22xb != null && _0x8e22xb !== _0xee2b[27]) {
          _0x8e22x4 = _0x8e22xf(_0x8e22xb);
        }
      }
      if (_0x8e22x4) {
        _0x8e22x13[_0xee2b[415]](_0x8e22x4, _0x8e22x17, _0x8e22x1, _0x8e22x9);
      } else {
        _0x8e22x4 = _0x8e22x3(_0x8e22x17);
        _0x8e22x4[_0xee2b[406]]();
      }
    }
  }
  if (_0x8e22xa > 0) {
    _0x8e22x9[_0xee2b[180]](_0xee2b[416], _0x8e22x9);
    _0x8e22x9[_0xee2b[180]](_0xee2b[406], _0x8e22x9);
  }
}, applySyncResponse:function(_0x8e22x4) {
  this[_0xee2b[417]] = true;
  this[_0xee2b[397]]();
  var _0x8e22x6 = this[_0xee2b[299]] || this[_0xee2b[125]];
  for (var _0x8e22x5 = 0, _0x8e22x3 = _0x8e22x6[_0xee2b[4]]; _0x8e22x5 < _0x8e22x3; _0x8e22x5++) {
    var _0x8e22x2 = _0x8e22x4[_0x8e22x6[_0x8e22x5][_0xee2b[146]]];
    if (_0x8e22x2) {
      this[_0xee2b[399]](_0x8e22x6[_0x8e22x5], _0x8e22x2);
    }
  }
  this[_0xee2b[417]] = false;
  this[_0xee2b[398]]();
}, applyLoadResponse:function(_0x8e22x3, _0x8e22x6) {
  this[_0xee2b[418]] = true;
  this[_0xee2b[385]](_0x8e22x3, _0x8e22x6);
  this[_0xee2b[418]] = false;
}, applyResponse:function(_0x8e22x3, _0x8e22x6, _0x8e22x4) {
  if (this[_0xee2b[419]]) {
    _0x8e22x3 = _0x8e22x6[_0xee2b[249]] || _0x8e22x3;
  }
  switch(_0x8e22x3) {
    case _0xee2b[302]:
      this[_0xee2b[420]](_0x8e22x6, _0x8e22x4);
      break;
    case _0xee2b[338]:
      this[_0xee2b[421]](_0x8e22x6);
      break;
  }
}, getRequestId:function() {
  return Math[_0xee2b[424]](Math[_0xee2b[422]]() * Date[_0xee2b[423]]());
}, onResponse:function(_0x8e22x3, _0x8e22x5, _0x8e22x2, _0x8e22x4) {
  this[_0xee2b[296]][_0x8e22x3] = null;
  var _0x8e22x6 = this[_0xee2b[425]](_0x8e22x5);
  if (!_0x8e22x6 || !_0x8e22x6[_0xee2b[426]]) {
    this[_0xee2b[180]](_0xee2b[427], this, _0x8e22x3, _0x8e22x6, _0x8e22x2);
    this[_0xee2b[180]](_0x8e22x3 + _0xee2b[428], this, _0x8e22x6, _0x8e22x2, _0x8e22x4);
    if (_0xee2b[308] != typeof _0x8e22x5) {
      _0x8e22x5 = _0xee2b[27] + _0x8e22x5;
    }
    this[_0xee2b[431]](_0xee2b[429] + _0x8e22x3 + _0xee2b[430], _0x8e22x5[_0xee2b[4]] < 1024 * 1024 && _0x8e22x5 || _0xee2b[27]);
  } else {
    this[_0xee2b[180]](_0xee2b[432], this, _0x8e22x3, _0x8e22x6, _0x8e22x2);
    this[_0xee2b[180]](_0x8e22x3 + _0xee2b[426], this, _0x8e22x6, _0x8e22x2, _0x8e22x4);
    if (this[_0xee2b[180]](_0xee2b[433], this, _0x8e22x3, _0x8e22x6) !== false && this[_0xee2b[180]](_0xee2b[434] + _0x8e22x3 + _0xee2b[8], this, _0x8e22x6, _0x8e22x4) !== false) {
      this[_0xee2b[374]] = _0x8e22x6[_0xee2b[374]];
      this[_0xee2b[435]](_0x8e22x3, _0x8e22x6, _0x8e22x4);
      this[_0xee2b[180]](_0xee2b[436], this, _0x8e22x3, _0x8e22x6, _0x8e22x2);
      this[_0xee2b[180]](_0x8e22x3, this, _0x8e22x6, _0x8e22x2, _0x8e22x4);
      if (_0x8e22x3 === _0xee2b[302] || !this[_0xee2b[335]]()) {
        this[_0xee2b[180]](_0xee2b[340], this);
      }
    }
  }
  return _0x8e22x6;
}, onLoad:function(_0x8e22x6, _0x8e22x4, _0x8e22x3) {
  this[_0xee2b[106]] = true;
  return this[_0xee2b[437]](_0xee2b[302], _0x8e22x6, _0x8e22x4, _0x8e22x3);
}, onSync:function(_0x8e22x6, _0x8e22x4, _0x8e22x3) {
  return this[_0xee2b[437]](_0xee2b[338], _0x8e22x6, _0x8e22x4, _0x8e22x3);
}, load:function(_0x8e22x2, _0x8e22x3, _0x8e22x5) {
  var _0x8e22x6;
  if (typeof _0x8e22x2 === _0xee2b[305]) {
    _0x8e22x6 = _0x8e22x2;
    _0x8e22x2 = _0x8e22x3;
    _0x8e22x3 = _0x8e22x5;
    _0x8e22x5 = arguments[3];
  }
  var _0x8e22x4 = this[_0xee2b[438]](_0x8e22x6);
  if (this[_0xee2b[180]](_0xee2b[439], this, _0x8e22x4) !== false) {
    _0x8e22x5 = _0x8e22x5 || this;
    if (this[_0xee2b[296]][_0xee2b[302]]) {
      this[_0xee2b[441]](this[_0xee2b[296]][_0xee2b[302]][_0xee2b[440]]);
      this[_0xee2b[180]](_0xee2b[442], this, _0x8e22x4);
    }
    this[_0xee2b[296]][_0xee2b[302]] = {id:_0x8e22x4[_0xee2b[443]]};
    this[_0xee2b[296]][_0xee2b[302]][_0xee2b[440]] = this[_0xee2b[446]]({data:this[_0xee2b[444]](_0x8e22x4), type:_0xee2b[302], success:function(_0x8e22x9, _0x8e22x7) {
      var _0x8e22x1 = this[_0xee2b[445]](_0x8e22x9, _0x8e22x7, _0x8e22x6);
      if (_0x8e22x3 && (!_0x8e22x1 || !_0x8e22x1[_0xee2b[426]])) {
        _0x8e22x3[_0xee2b[293]](_0x8e22x5, _0x8e22x1, _0x8e22x9, _0x8e22x6);
      } else {
        if (_0x8e22x2) {
          _0x8e22x2[_0xee2b[293]](_0x8e22x5, _0x8e22x1, _0x8e22x9, _0x8e22x6);
        }
      }
    }, failure:function(_0x8e22x1, _0x8e22x9) {
      this[_0xee2b[445]](_0x8e22x1, _0x8e22x9);
      if (_0x8e22x3) {
        _0x8e22x3[_0xee2b[8]](_0x8e22x5, arguments);
      }
    }, scope:this});
  } else {
    this[_0xee2b[180]](_0xee2b[442], this, _0x8e22x4);
  }
}, sync:function(_0x8e22x5, _0x8e22x3, _0x8e22x4) {
  if (this[_0xee2b[296]][_0xee2b[338]]) {
    this[_0xee2b[297]][_0xee2b[11]](arguments);
    this[_0xee2b[180]](_0xee2b[447], this, arguments);
    return;
  }
  var _0x8e22x6 = this[_0xee2b[448]]();
  _0x8e22x4 = _0x8e22x4 || this;
  if (!_0x8e22x6) {
    if (_0x8e22x5) {
      _0x8e22x5[_0xee2b[293]](_0x8e22x4, null, null);
    }
    return;
  }
  if (this[_0xee2b[180]](_0xee2b[449], this, _0x8e22x6) === false) {
    this[_0xee2b[180]](_0xee2b[450], this, _0x8e22x6);
    return;
  }
  this[_0xee2b[296]][_0xee2b[338]] = {id:_0x8e22x6[_0xee2b[443]]};
  this[_0xee2b[296]][_0xee2b[338]][_0xee2b[440]] = this[_0xee2b[446]]({data:this[_0xee2b[444]](_0x8e22x6), type:_0xee2b[338], success:function(_0x8e22x7, _0x8e22x1) {
    var _0x8e22x9 = this[_0xee2b[296]][_0xee2b[338]];
    var _0x8e22x2 = this[_0xee2b[451]](_0x8e22x7, _0x8e22x1);
    if (_0x8e22x3 && (!_0x8e22x2 || !_0x8e22x2[_0xee2b[426]])) {
      _0x8e22x3[_0xee2b[293]](_0x8e22x4, _0x8e22x2, _0x8e22x7, _0x8e22x9);
    } else {
      if (_0x8e22x5) {
        _0x8e22x5[_0xee2b[293]](_0x8e22x4, _0x8e22x2, _0x8e22x7, _0x8e22x9);
      }
    }
    this[_0xee2b[452]]();
  }, failure:function(_0x8e22x1, _0x8e22x2) {
    this[_0xee2b[451]](_0x8e22x1, _0x8e22x2);
    if (_0x8e22x3) {
      _0x8e22x3[_0xee2b[8]](_0x8e22x4, arguments);
    }
    this[_0xee2b[452]]();
  }, scope:this});
}, runDelayedSync:function() {
  var _0x8e22x3 = this[_0xee2b[297]][_0xee2b[209]]();
  if (!_0x8e22x3) {
    return;
  }
  this[_0xee2b[338]][_0xee2b[8]](this, _0x8e22x3);
}, commit:function() {
  for (var _0x8e22x4 = 0, _0x8e22x3 = this[_0xee2b[125]][_0xee2b[4]]; _0x8e22x4 < _0x8e22x3; _0x8e22x4++) {
    var _0x8e22x6 = this[_0xee2b[125]][_0x8e22x4][_0xee2b[64]];
    _0x8e22x6[_0xee2b[453]](true);
    _0x8e22x6[_0xee2b[454]]();
    _0x8e22x6[_0xee2b[455]]();
  }
}, reject:function() {
  for (var _0x8e22x6 = 0, _0x8e22x3 = this[_0xee2b[125]][_0xee2b[4]]; _0x8e22x6 < _0x8e22x3; _0x8e22x6++) {
    this[_0xee2b[125]][_0x8e22x6][_0xee2b[64]][_0xee2b[456]]();
  }
}, warn:function() {
  if (_0xee2b[457] in window) {
    var _0x8e22x3 = console;
    _0x8e22x3[_0xee2b[401]] && _0x8e22x3[_0xee2b[401]][_0xee2b[8]] && _0x8e22x3[_0xee2b[401]][_0xee2b[8]](_0x8e22x3, arguments);
  }
}, isLoading:function() {
  return Boolean(this[_0xee2b[296]][_0xee2b[302]] || this[_0xee2b[418]]);
}, destroy:function() {
  var _0x8e22x3 = this;
  if (_0x8e22x3[_0xee2b[458]]) {
    return;
  }
  _0x8e22x3[_0xee2b[296]][_0xee2b[302]] && _0x8e22x3[_0xee2b[441]](_0x8e22x3[_0xee2b[296]][_0xee2b[302]][_0xee2b[440]]);
  _0x8e22x3[_0xee2b[296]][_0xee2b[338]] && _0x8e22x3[_0xee2b[441]](_0x8e22x3[_0xee2b[296]][_0xee2b[338]][_0xee2b[440]]);
  while (_0x8e22x3[_0xee2b[125]][_0xee2b[4]] > 0) {
    _0x8e22x3[_0xee2b[459]](_0x8e22x3[_0xee2b[125]][0]);
  }
  clearTimeout(_0x8e22x3[_0xee2b[337]]);
  _0x8e22x3[_0xee2b[458]] = true;
}});
Ext[_0xee2b[6]](_0xee2b[460], {extend:_0xee2b[461], singleton:true, requires:[_0xee2b[291]], type:_0xee2b[462], prefix:_0xee2b[463], constructor:function() {
  var _0x8e22x3 = this;
  _0x8e22x3[_0xee2b[9]]();
  _0x8e22x3[_0xee2b[465]](Sch[_0xee2b[464]].AbstractManager);
}, match:function(_0x8e22x5, _0x8e22x6) {
  var _0x8e22x3 = false, _0x8e22x4 = _0x8e22x5[_0xee2b[466]];
  if (_0x8e22x6 === _0xee2b[467]) {
    _0x8e22x3 = true;
  } else {
    if (_0x8e22x4) {
      _0x8e22x3 = Ext[_0xee2b[26]][_0xee2b[147]](_0x8e22x4, this[_0xee2b[468]] + _0x8e22x6) > -1;
    }
  }
  return _0x8e22x3;
}});
Ext[_0xee2b[6]](_0xee2b[469], {extend:_0xee2b[470], alias:_0xee2b[471], align:_0xee2b[472], start:null, end:null, draggable:false, groupable:false, hideable:false, sortable:false, menuDisabled:true, enableLocking:false, lockable:false, flex:1, resizable:false, cellFocusable:false, tdCls:_0xee2b[473], initComponent:function() {
  var _0x8e22x3 = new Date();
  this[_0xee2b[264]](_0xee2b[474]);
  if (this[_0xee2b[475]]()) {
    this[_0xee2b[264]](_0xee2b[476]);
    this[_0xee2b[477]] = (this[_0xee2b[477]] || _0xee2b[27]) + _0xee2b[478];
  }
  if (this[_0xee2b[179]][_0xee2b[479]]() === _0x8e22x3[_0xee2b[479]]() && this[_0xee2b[179]][_0xee2b[480]]() === _0x8e22x3[_0xee2b[480]]() && this[_0xee2b[179]][_0xee2b[481]]() === _0x8e22x3[_0xee2b[481]]()) {
    this[_0xee2b[264]](_0xee2b[482]);
    this[_0xee2b[477]] = (this[_0xee2b[477]] || _0xee2b[27]) + _0xee2b[483];
  }
  this[_0xee2b[9]](arguments);
}, isWeekend:function() {
  var _0x8e22x3 = this[_0xee2b[179]][_0xee2b[484]]();
  return _0x8e22x3 === 6 || _0x8e22x3 === 0;
}});
Ext[_0xee2b[6]](_0xee2b[485], {extend:_0xee2b[486], alias:_0xee2b[487], align:_0xee2b[472], menuDisabled:true, hideable:false, sortable:false, locked:false, lockable:false, draggable:false, enableLocking:false, cellFocusable:false, model:null, initComponent:function() {
  this[_0xee2b[477]] = (this[_0xee2b[477]] || _0xee2b[27]) + _0xee2b[488];
  this[_0xee2b[489]] = (this[_0xee2b[489]] || _0xee2b[27]) + _0xee2b[490];
  this[_0xee2b[9]](arguments);
}});
Ext[_0xee2b[6]](_0xee2b[491], {l10n:null, localeName:null, namespaceId:null, constructor:function() {
  if (!Sch[_0xee2b[493]][_0xee2b[492]]) {
    Sch[_0xee2b[493]][_0xee2b[492]] = {};
    this[_0xee2b[494]]();
  }
  var _0x8e22x6 = this[_0xee2b[45]][_0xee2b[497]]()[_0xee2b[496]](_0xee2b[495]);
  var _0x8e22x3 = this[_0xee2b[498]] = _0x8e22x6[_0xee2b[204]]();
  this[_0xee2b[499]] = _0x8e22x6[_0xee2b[73]](_0xee2b[495]);
  var _0x8e22x4 = Sch[_0xee2b[493]][_0xee2b[492]][this[_0xee2b[499]]];
  if (!(_0x8e22x3 == _0xee2b[500] && _0x8e22x4 && _0x8e22x4[_0xee2b[498]] != _0xee2b[500])) {
    this[_0xee2b[8]]();
  }
}, bindRequire:function() {
  var _0x8e22x3 = Ext[_0xee2b[502]][_0xee2b[501]];
  Ext[_0xee2b[502]][_0xee2b[501]] = function(_0x8e22x5) {
    _0x8e22x3[_0xee2b[8]](this, arguments);
    if (_0x8e22x5) {
      var _0x8e22x4 = Ext[_0xee2b[502]][_0xee2b[55]](_0x8e22x5);
      for (var _0x8e22x6 in Sch[_0xee2b[493]][_0xee2b[492]]) {
        Sch[_0xee2b[493]][_0xee2b[492]][_0x8e22x6][_0xee2b[8]](_0x8e22x4);
      }
    }
  };
}, applyToClass:function(_0x8e22x4, _0x8e22x6) {
  var _0x8e22x5 = this, _0x8e22x2 = _0x8e22x5[_0xee2b[45]][_0xee2b[497]]();
  _0x8e22x6 = _0x8e22x6 || Ext[_0xee2b[502]][_0xee2b[55]](_0x8e22x4);
  if (_0x8e22x6 && _0x8e22x6[_0xee2b[503]] !== _0x8e22x2) {
    var _0x8e22x3 = _0x8e22x5[_0xee2b[504]][_0x8e22x4];
    if (typeof _0x8e22x3 === _0xee2b[505]) {
      _0x8e22x3(_0x8e22x4);
    } else {
      if (_0x8e22x6[_0xee2b[506]]) {
        _0x8e22x6[_0xee2b[504]] = Ext[_0xee2b[8]]({}, _0x8e22x3, _0x8e22x6[_0xee2b[139]] && _0x8e22x6[_0xee2b[139]][_0xee2b[504]]);
      } else {
        if (_0x8e22x6[_0xee2b[139]][_0xee2b[53]](_0xee2b[504])) {
          _0x8e22x3 = Ext[_0xee2b[8]]({}, _0x8e22x3, _0x8e22x6[_0xee2b[139]] && _0x8e22x6[_0xee2b[139]][_0xee2b[504]]);
        }
        Ext[_0xee2b[507]](_0x8e22x6, {l10n:_0x8e22x3});
      }
    }
    _0x8e22x6[_0xee2b[503]] = _0x8e22x2;
    if (_0x8e22x6[_0xee2b[508]]) {
      _0x8e22x6[_0xee2b[508]]();
    }
  }
}, apply:function(_0x8e22x9) {
  if (this[_0xee2b[504]]) {
    var _0x8e22x1 = this;
    if (_0x8e22x9) {
      if (!Ext[_0xee2b[307]](_0x8e22x9)) {
        _0x8e22x9 = [_0x8e22x9];
      }
      var _0x8e22x4, _0x8e22x6;
      for (var _0x8e22x5 = 0, _0x8e22x3 = _0x8e22x9[_0xee2b[4]]; _0x8e22x5 < _0x8e22x3; _0x8e22x5++) {
        if (Ext[_0xee2b[135]](_0x8e22x9[_0x8e22x5])) {
          if (_0x8e22x9[_0x8e22x5][_0xee2b[506]]) {
            _0x8e22x6 = _0x8e22x9[_0x8e22x5];
            _0x8e22x4 = Ext[_0xee2b[510]](Ext[_0xee2b[509]](_0x8e22x6));
          } else {
            _0x8e22x6 = Ext[_0xee2b[509]](_0x8e22x9[_0x8e22x5]);
            _0x8e22x4 = Ext[_0xee2b[510]](_0x8e22x6);
          }
        } else {
          _0x8e22x6 = null;
          _0x8e22x4 = _0xee2b[308] === typeof _0x8e22x9[_0x8e22x5] ? _0x8e22x9[_0x8e22x5] : Ext[_0xee2b[510]](_0x8e22x9[_0x8e22x5]);
        }
        if (_0x8e22x4) {
          if (_0x8e22x4 in this[_0xee2b[504]]) {
            _0x8e22x1[_0xee2b[511]](_0x8e22x4, _0x8e22x6);
          }
        }
      }
    } else {
      Sch[_0xee2b[493]][_0xee2b[492]][this[_0xee2b[499]]] = this;
      for (var _0x8e22x2 in this[_0xee2b[504]]) {
        _0x8e22x1[_0xee2b[511]](_0x8e22x2);
      }
    }
  }
}});
Ext[_0xee2b[6]](_0xee2b[512], {extend:_0xee2b[491], singleton:true, l10n:{'Sch.util.Date':{unitNames:{YEAR:{single:_0xee2b[513], plural:_0xee2b[514], abbrev:_0xee2b[515]}, QUARTER:{single:_0xee2b[516], plural:_0xee2b[517], abbrev:_0xee2b[518]}, MONTH:{single:_0xee2b[519], plural:_0xee2b[520], abbrev:_0xee2b[252]}, WEEK:{single:_0xee2b[521], plural:_0xee2b[522], abbrev:_0xee2b[523]}, DAY:{single:_0xee2b[524], plural:_0xee2b[525], abbrev:_0xee2b[526]}, HOUR:{single:_0xee2b[527], plural:_0xee2b[528], 
abbrev:_0xee2b[529]}, MINUTE:{single:_0xee2b[530], plural:_0xee2b[531], abbrev:_0xee2b[203]}, SECOND:{single:_0xee2b[532], plural:_0xee2b[533], abbrev:_0xee2b[534]}, MILLI:{single:_0xee2b[535], plural:_0xee2b[535], abbrev:_0xee2b[535]}}}, 'Sch.model.CalendarDay':{startTimeAfterEndTime:_0xee2b[536], availabilityIntervalsShouldNotIntersect:_0xee2b[537], invalidFormat:_0xee2b[538]}, 'Sch.panel.SchedulerTree':{'All day':_0xee2b[539]}, 'Sch.panel.SchedulerGrid':{'All day':_0xee2b[539]}, 'Sch.panel.TimelineGridPanel':{weekStartDay:1, 
loadingText:_0xee2b[540], savingText:_0xee2b[541]}, 'Sch.panel.TimelineTreePanel':{weekStartDay:1, loadingText:_0xee2b[540], savingText:_0xee2b[541]}, 'Sch.mixin.SchedulerView':{loadingText:_0xee2b[542]}, 'Sch.plugin.CurrentTimeLine':{tooltipText:_0xee2b[543]}, 'Sch.widget.recurrence.ConfirmationDialog':{'delete-title':_0xee2b[544], 'delete-all-message':_0xee2b[545], 'delete-further-message':_0xee2b[546], 'delete-all-btn-text':_0xee2b[547], 'delete-further-btn-text':_0xee2b[548], 'delete-only-this-btn-text':_0xee2b[549], 
'update-title':_0xee2b[550], 'update-all-message':_0xee2b[551], 'update-further-message':_0xee2b[552], 'update-all-btn-text':_0xee2b[553], 'update-further-btn-text':_0xee2b[554], 'update-only-this-btn-text':_0xee2b[555], Yes:_0xee2b[556], Cancel:_0xee2b[557]}, 'Sch.widget.recurrence.Dialog':{'Repeat event':_0xee2b[558], Cancel:_0xee2b[557], Save:_0xee2b[559]}, 'Sch.widget.recurrence.Form':{Frequency:_0xee2b[560], Every:_0xee2b[561], DAILYintervalUnit:_0xee2b[562], WEEKLYintervalUnit:_0xee2b[563], 
MONTHLYintervalUnit:_0xee2b[564], YEARLYintervalUnit:_0xee2b[565], Each:_0xee2b[566], 'On the':_0xee2b[567], 'End repeat':_0xee2b[568], 'time(s)':_0xee2b[569]}, 'Sch.widget.recurrence.field.DaysComboBox':{day:_0xee2b[524], weekday:_0xee2b[570], 'weekend day':_0xee2b[571]}, 'Sch.widget.recurrence.field.PositionsComboBox':{position1:_0xee2b[572], position2:_0xee2b[532], position3:_0xee2b[573], position4:_0xee2b[574], position5:_0xee2b[575], 'position-1':_0xee2b[576]}, 'Sch.data.util.recurrence.Legend':{', ':_0xee2b[287], 
' and ':_0xee2b[577], Daily:_0xee2b[578], 'Weekly on {1}':_0xee2b[579], 'Monthly on {1}':_0xee2b[580], 'Yearly on {1} of {2}':_0xee2b[581], 'Every {0} days':_0xee2b[582], 'Every {0} weeks on {1}':_0xee2b[583], 'Every {0} months on {1}':_0xee2b[584], 'Every {0} years on {1} of {2}':_0xee2b[585], position1:_0xee2b[586], position2:_0xee2b[587], position3:_0xee2b[588], position4:_0xee2b[589], position5:_0xee2b[590], 'position-1':_0xee2b[591], day:_0xee2b[524], weekday:_0xee2b[570], 'weekend day':_0xee2b[571], 
daysFormat:_0xee2b[592]}, 'Sch.widget.recurrence.field.StopConditionComboBox':{Never:_0xee2b[593], After:_0xee2b[594], 'On date':_0xee2b[595]}, 'Sch.widget.recurrence.field.FrequencyComboBox':{Daily:_0xee2b[578], Weekly:_0xee2b[596], Monthly:_0xee2b[597], Yearly:_0xee2b[598]}, 'Sch.widget.recurrence.field.RecurrenceComboBox':{None:_0xee2b[599], 'Custom...':_0xee2b[600]}, 'Sch.widget.EventEditor':{Repeat:_0xee2b[601], saveText:_0xee2b[559], deleteText:_0xee2b[602], cancelText:_0xee2b[557], nameText:_0xee2b[603], 
allDayText:_0xee2b[539], startDateText:_0xee2b[604], endDateText:_0xee2b[605], resourceText:_0xee2b[606]}, 'Sch.plugin.SimpleEditor':{newEventText:_0xee2b[607]}, 'Sch.widget.ExportDialogForm':{formatFieldLabel:_0xee2b[608], orientationFieldLabel:_0xee2b[609], rangeFieldLabel:_0xee2b[610], showHeaderLabel:_0xee2b[611], showFooterLabel:_0xee2b[612], orientationPortraitText:_0xee2b[613], orientationLandscapeText:_0xee2b[614], completeViewText:_0xee2b[615], currentViewText:_0xee2b[616], dateRangeText:_0xee2b[617], 
dateRangeFromText:_0xee2b[618], dateRangeToText:_0xee2b[619], exportersFieldLabel:_0xee2b[620], adjustCols:_0xee2b[621], adjustColsAndRows:_0xee2b[622], specifyDateRange:_0xee2b[623], columnPickerLabel:_0xee2b[624], completeDataText:_0xee2b[625], dpiFieldLabel:_0xee2b[626], rowsRangeLabel:_0xee2b[627], allRowsLabel:_0xee2b[628], visibleRowsLabel:_0xee2b[629], columnEmptyText:_0xee2b[630]}, 'Sch.widget.ExportDialog':{title:_0xee2b[631], exportButtonText:_0xee2b[632], cancelButtonText:_0xee2b[557], 
progressBarText:_0xee2b[633]}, 'Sch.plugin.Export':{generalError:_0xee2b[634], fetchingRows:_0xee2b[635], builtPage:_0xee2b[636], requestingPrintServer:_0xee2b[637]}, 'Sch.plugin.Printable':{dialogTitle:_0xee2b[638], exportButtonText:_0xee2b[639], disablePopupBlocking:_0xee2b[640], popupBlockerDetected:_0xee2b[641]}, 'Sch.plugin.exporter.AbstractExporter':{name:_0xee2b[642]}, 'Sch.plugin.exporter.SinglePage':{name:_0xee2b[643]}, 'Sch.plugin.exporter.MultiPageVertical':{name:_0xee2b[644]}, 'Sch.plugin.exporter.MultiPage':{name:_0xee2b[645]}, 
'Sch.plugin.Split':{splitText:_0xee2b[646], mergeText:_0xee2b[647]}, 'Sch.plugin.SummaryBar':{totalText:_0xee2b[648]}, 'Sch.column.ResourceName':{name:_0xee2b[603]}, 'Sch.template.DependencyInfo':{fromText:_0xee2b[649], toText:_0xee2b[650]}, 'Sch.preset.Manager':{hourAndDay:{displayDateFormat:_0xee2b[651], middleDateFormat:_0xee2b[651], topDateFormat:_0xee2b[652]}, secondAndMinute:{displayDateFormat:_0xee2b[653], topDateFormat:_0xee2b[654]}, dayAndWeek:{displayDateFormat:_0xee2b[655], middleDateFormat:_0xee2b[656]}, 
weekAndDay:{displayDateFormat:_0xee2b[657], bottomDateFormat:_0xee2b[658], middleDateFormat:_0xee2b[659]}, weekAndMonth:{displayDateFormat:_0xee2b[660], middleDateFormat:_0xee2b[657], topDateFormat:_0xee2b[660]}, weekAndDayLetter:{displayDateFormat:_0xee2b[660], middleDateFormat:_0xee2b[661]}, weekDateAndMonth:{displayDateFormat:_0xee2b[660], middleDateFormat:_0xee2b[526], topDateFormat:_0xee2b[662]}, monthAndYear:{displayDateFormat:_0xee2b[660], middleDateFormat:_0xee2b[663], topDateFormat:_0xee2b[664]}, 
year:{displayDateFormat:_0xee2b[660], middleDateFormat:_0xee2b[664]}, manyYears:{displayDateFormat:_0xee2b[660], middleDateFormat:_0xee2b[664]}}}});
Ext[_0xee2b[6]](_0xee2b[665], {extend:_0xee2b[17], requires:[_0xee2b[512]], activeLocaleId:_0xee2b[27], l10n:null, inTextLocaleRegExp:/L\{([^}]+)\}/g, localizableProperties:null, isLocaleApplied:function() {
  var _0x8e22x6 = this[_0xee2b[506]] && this[_0xee2b[503]] || this[_0xee2b[45]][_0xee2b[503]];
  if (!_0x8e22x6) {
    return false;
  }
  for (var _0x8e22x3 in Sch[_0xee2b[493]][_0xee2b[492]]) {
    if (_0x8e22x6 === Sch[_0xee2b[493]][_0xee2b[492]][_0x8e22x3][_0xee2b[45]][_0xee2b[497]]()) {
      return true;
    }
  }
  return false;
}, applyLocale:function() {
  for (var _0x8e22x3 in Sch[_0xee2b[493]][_0xee2b[492]]) {
    Sch[_0xee2b[493]][_0xee2b[492]][_0x8e22x3][_0xee2b[8]](this[_0xee2b[506]] ? this : this[_0xee2b[45]][_0xee2b[497]]());
  }
}, L:function() {
  return this[_0xee2b[666]][_0xee2b[8]](this, arguments);
}, localize:function(_0x8e22x5, _0x8e22x6, _0x8e22x4) {
  var _0x8e22x3 = this[_0xee2b[667]](_0x8e22x5, _0x8e22x6, _0x8e22x4);
  if (_0x8e22x3 === null || _0x8e22x3 === undefined) {
    throw _0xee2b[668] + _0x8e22x5 + _0xee2b[669] + this[_0xee2b[45]][_0xee2b[497]]() + _0xee2b[670];
  }
  return _0x8e22x3;
}, getLocale:function(_0x8e22x1, _0x8e22x4, _0x8e22x2) {
  if (!this[_0xee2b[671]]() && !_0x8e22x2) {
    this[_0xee2b[672]]();
  }
  if (this[_0xee2b[53]](_0xee2b[504]) && this[_0xee2b[504]] && this[_0xee2b[504]][_0xee2b[53]](_0x8e22x1) && _0xee2b[505] != typeof this[_0xee2b[504]][_0x8e22x1]) {
    return this[_0xee2b[504]][_0x8e22x1];
  }
  var _0x8e22x6 = this[_0xee2b[45]] && this[_0xee2b[45]][_0xee2b[139]];
  var _0x8e22x3 = _0x8e22x6[_0xee2b[504]] && _0x8e22x6[_0xee2b[504]][_0x8e22x1];
  if (_0x8e22x3 === null || _0x8e22x3 === undefined) {
    var _0x8e22x5 = _0x8e22x6 && _0x8e22x6[_0xee2b[673]];
    if (_0x8e22x5 && _0x8e22x5[_0xee2b[666]]) {
      _0x8e22x3 = _0x8e22x5[_0xee2b[666]](_0x8e22x1, _0x8e22x4, _0x8e22x2);
    }
  }
  return _0x8e22x3;
}, localizeText:function(_0x8e22x5) {
  var _0x8e22x4, _0x8e22x3, _0x8e22x6 = this[_0xee2b[674]];
  while (_0x8e22x4 = _0x8e22x6[_0xee2b[676]](_0x8e22x5)) {
    if (_0x8e22x3 = this[_0xee2b[667]](_0x8e22x4[1])) {
      _0x8e22x5 = _0x8e22x5[_0xee2b[675]](_0x8e22x4[0], _0x8e22x3);
    }
  }
  return _0x8e22x5;
}, localizeProperties:function() {
  var _0x8e22x4 = this, _0x8e22x6 = _0x8e22x4[_0xee2b[677]];
  if (_0x8e22x6) {
    _0x8e22x6 = _0x8e22x6[_0xee2b[496]](_0xee2b[72]);
    for (var _0x8e22x3 = _0x8e22x6[_0xee2b[4]] - 1; _0x8e22x3 >= 0; _0x8e22x3--) {
      _0x8e22x4[_0x8e22x6[_0x8e22x3]] = _0x8e22x4[_0xee2b[678]](_0x8e22x4[_0x8e22x6[_0x8e22x3]]);
    }
  }
}, mixinConfig:{before:{initComponent:_0xee2b[679]}}, beforeInitComponent:function() {
  this[_0xee2b[680]]();
}});
Ext[_0xee2b[6]](_0xee2b[681], {extend:_0xee2b[486], alias:_0xee2b[682], mixins:[_0xee2b[665]], initComponent:function() {
  Ext[_0xee2b[8]](this, {text:this.L(_0xee2b[683])});
  this[_0xee2b[9]](arguments);
}, renderer:function(_0x8e22x6, _0x8e22x4, _0x8e22x3) {
  return _0x8e22x3[_0xee2b[497]]();
}});
Ext[_0xee2b[6]](_0xee2b[684], {extend:_0xee2b[470], alias:[_0xee2b[685]], lockableScope:_0xee2b[686], showPercent:false, nbrDecimals:1, sortable:false, fixed:true, menuDisabled:true, width:80, dataIndex:_0xee2b[687], schedulerPanel:null, lockable:false, init:Ext[_0xee2b[688]], constructor:function(_0x8e22x3) {
  this[_0xee2b[689]] = this;
  this[_0xee2b[9]](arguments);
  this[_0xee2b[149]](_0xee2b[690], this[_0xee2b[691]], this);
}, onMyBeforeRender:function() {
  this[_0xee2b[692]] = this[_0xee2b[694]](_0xee2b[693]);
}, getTimeAxis:function() {
  return this[_0xee2b[692]][_0xee2b[695]]();
}, getEventStore:function() {
  return this[_0xee2b[692]][_0xee2b[696]]();
}, renderer:function(_0x8e22xa, _0x8e22x3, _0x8e22x1) {
  var _0x8e22x9 = this[_0xee2b[695]](), _0x8e22x5 = this[_0xee2b[696]](), _0x8e22x2 = _0x8e22x9[_0xee2b[697]](), _0x8e22x7 = _0x8e22x9[_0xee2b[698]](), _0x8e22x6 = this[_0xee2b[700]](_0x8e22x5[_0xee2b[699]](_0x8e22x1), _0x8e22x2, _0x8e22x7);
  if (_0x8e22x6 <= 0) {
    return _0xee2b[27];
  }
  if (this[_0xee2b[701]]) {
    var _0x8e22x4 = Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[702]](_0x8e22x2, _0x8e22x7);
    return Math[_0xee2b[704]](_0x8e22x6 * 100 / _0x8e22x4) + _0xee2b[705];
  } else {
    if (_0x8e22x6 > 1440) {
      return (_0x8e22x6 / 1440)[_0xee2b[707]](this[_0xee2b[706]]) + _0xee2b[60] + Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[709]](_0xee2b[708]);
    }
    if (_0x8e22x6 >= 30) {
      return (_0x8e22x6 / 60)[_0xee2b[707]](this[_0xee2b[706]]) + _0xee2b[60] + Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[709]](_0xee2b[710]);
    }
    return _0x8e22x6 + _0xee2b[60] + Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[709]](_0xee2b[711]);
  }
}, calculate:function(_0x8e22x4, _0x8e22x9, _0x8e22x5) {
  var _0x8e22x2 = 0, _0x8e22x6, _0x8e22x3, _0x8e22x1 = Sch[_0xee2b[49]][_0xee2b[703]];
  Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x4, function(_0x8e22x7) {
    _0x8e22x6 = _0x8e22x7[_0xee2b[712]]();
    _0x8e22x3 = _0x8e22x7[_0xee2b[713]]();
    if (_0x8e22x1[_0xee2b[714]](_0x8e22x9, _0x8e22x5, _0x8e22x6, _0x8e22x3)) {
      _0x8e22x2 += _0x8e22x1[_0xee2b[702]](_0x8e22x1[_0xee2b[715]](_0x8e22x6, _0x8e22x9), _0x8e22x1[_0xee2b[203]](_0x8e22x3, _0x8e22x5));
    }
  });
  return _0x8e22x2;
}});
Ext[_0xee2b[6]](_0xee2b[716], {extend:_0xee2b[108], requires:[_0xee2b[717]], statics:{encodeDateFormat:_0xee2b[718]}, trackHeaderOver:true, compactCellWidthThreshold:15, baseCls:_0xee2b[719], tableCls:_0xee2b[720], enableTickResizing:false, headerHtmlRowTpl:_0xee2b[721], model:null, hoverCls:_0xee2b[27], containerEl:null, height:null, constructor:function(_0x8e22x4) {
  var _0x8e22x5 = this;
  var _0x8e22x3 = !!Ext[_0xee2b[723]][_0xee2b[722]];
  Ext[_0xee2b[8]](this, _0x8e22x4);
  _0x8e22x5[_0xee2b[9]](arguments);
  _0x8e22x5[_0xee2b[327]][_0xee2b[149]](_0xee2b[724], _0x8e22x5[_0xee2b[725]], this, {priority:5});
  _0x8e22x5[_0xee2b[726]] = Ext[_0xee2b[55]](_0x8e22x5[_0xee2b[726]]);
  if (!(_0x8e22x5[_0xee2b[727]] instanceof Ext[_0xee2b[728]])) {
    if (Ext[_0xee2b[363]](_0x8e22x5[_0xee2b[727]])) {
      _0x8e22x5[_0xee2b[727]] = _0x8e22x5[_0xee2b[727]][_0xee2b[675]](_0xee2b[734], this[_0xee2b[735]])[_0xee2b[675]](_0xee2b[732], this[_0xee2b[733]])[_0xee2b[675]](_0xee2b[729], this[_0xee2b[730]] ? _0xee2b[731] : _0xee2b[27]);
    }
    _0x8e22x5[_0xee2b[727]] = new Ext.XTemplate(_0x8e22x5[_0xee2b[727]]);
  }
  if (_0x8e22x5[_0xee2b[736]] && _0x8e22x5[_0xee2b[737]]) {
    _0x8e22x5[_0xee2b[726]][_0xee2b[149]]({mousemove:_0x8e22x5[_0xee2b[738]], delegate:_0xee2b[495] + this[_0xee2b[735]], scope:_0x8e22x5});
    _0x8e22x5[_0xee2b[726]][_0xee2b[149]]({mouseleave:_0x8e22x5[_0xee2b[739]], scope:_0x8e22x5});
  }
  var _0x8e22x6 = {scope:this, delegate:_0xee2b[495] + this[_0xee2b[735]]};
  if (_0x8e22x3) {
    _0x8e22x6[_0xee2b[740]] = this[_0xee2b[741]](_0xee2b[740]);
    _0x8e22x6[_0xee2b[742]] = this[_0xee2b[741]](_0xee2b[742]);
  } else {
    _0x8e22x6[_0xee2b[248]] = this[_0xee2b[741]](_0xee2b[248]);
    _0x8e22x6[_0xee2b[743]] = this[_0xee2b[741]](_0xee2b[743]);
    _0x8e22x6[_0xee2b[744]] = this[_0xee2b[741]](_0xee2b[744]);
  }
  _0x8e22x5[_0xee2b[745]] = _0x8e22x6;
  if (_0x8e22x5[_0xee2b[726]]) {
    _0x8e22x5[_0xee2b[726]][_0xee2b[149]](_0x8e22x6);
  }
}, destroy:function() {
  var _0x8e22x3 = this;
  if (_0x8e22x3[_0xee2b[726]]) {
    _0x8e22x3[_0xee2b[726]][_0xee2b[152]](_0x8e22x3._listenerCfg);
    _0x8e22x3[_0xee2b[726]][_0xee2b[152]]({mousemove:_0x8e22x3[_0xee2b[738]], delegate:_0xee2b[746], scope:_0x8e22x3});
    _0x8e22x3[_0xee2b[726]][_0xee2b[152]]({mouseleave:_0x8e22x3[_0xee2b[739]], scope:_0x8e22x3});
  }
  _0x8e22x3[_0xee2b[327]][_0xee2b[152]](_0xee2b[724], _0x8e22x3[_0xee2b[725]], this, {priority:5});
}, onModelUpdate:function() {
  this[_0xee2b[747]] = null;
  this[_0xee2b[748]]();
}, getHTML:function() {
  var _0x8e22x4 = this[_0xee2b[327]][_0xee2b[749]]();
  var _0x8e22x6 = this[_0xee2b[327]][_0xee2b[750]]();
  var _0x8e22x3 = Ext[_0xee2b[154]][_0xee2b[347]](_0x8e22x4)[_0xee2b[4]];
  var _0x8e22x5 = _0xee2b[27];
  if (_0x8e22x4[_0xee2b[686]]) {
    this[_0xee2b[751]](_0x8e22x4[_0xee2b[686]]);
    _0x8e22x5 += this[_0xee2b[727]][_0xee2b[8]]({totalWidth:_0x8e22x6, cells:_0x8e22x4[_0xee2b[686]], position:_0xee2b[686], tstyle:_0xee2b[752]});
  }
  if (_0x8e22x4[_0xee2b[753]]) {
    this[_0xee2b[751]](_0x8e22x4[_0xee2b[753]]);
    _0x8e22x5 += this[_0xee2b[727]][_0xee2b[8]]({totalWidth:_0x8e22x6, cells:_0x8e22x4[_0xee2b[753]], position:_0xee2b[753], tstyle:_0x8e22x4[_0xee2b[686]] ? _0xee2b[27] : _0xee2b[752], cls:!_0x8e22x4[_0xee2b[754]] && this[_0xee2b[327]][_0xee2b[755]]() <= this[_0xee2b[756]] ? _0xee2b[757] : _0xee2b[27]});
  }
  if (_0x8e22x4[_0xee2b[754]]) {
    this[_0xee2b[751]](_0x8e22x4[_0xee2b[754]]);
    _0x8e22x5 += this[_0xee2b[727]][_0xee2b[8]]({totalWidth:_0x8e22x6, cells:_0x8e22x4[_0xee2b[754]], position:_0xee2b[754], cls:this[_0xee2b[327]][_0xee2b[755]]() <= this[_0xee2b[756]] ? _0xee2b[757] : _0xee2b[27]});
  }
  return _0x8e22x5;
}, deleteTimeAxisRows:function() {
  var _0x8e22x3 = this[_0xee2b[726]], _0x8e22x6 = _0x8e22x3[_0xee2b[758]];
  Ext[_0xee2b[761]](_0x8e22x6)[_0xee2b[760]](_0xee2b[759])[_0xee2b[63]]();
}, render:function() {
  if (!this[_0xee2b[726]]) {
    return;
  }
  var _0x8e22x5 = this[_0xee2b[726]], _0x8e22x2 = _0x8e22x5[_0xee2b[758]], _0x8e22x4 = _0x8e22x2[_0xee2b[763]][_0xee2b[762]], _0x8e22x3 = this[_0xee2b[327]][_0xee2b[749]](), _0x8e22x6 = _0x8e22x2[_0xee2b[96]];
  _0x8e22x2[_0xee2b[763]][_0xee2b[762]] = _0xee2b[764];
  _0x8e22x6[_0xee2b[78]](_0x8e22x2);
  this[_0xee2b[765]]();
  _0x8e22x2[_0xee2b[768]](_0xee2b[766], this[_0xee2b[767]]());
  if (!_0x8e22x3[_0xee2b[686]] && !_0x8e22x3[_0xee2b[753]]) {
    this[_0xee2b[726]][_0xee2b[264]](_0xee2b[769]);
  } else {
    this[_0xee2b[726]][_0xee2b[267]](_0xee2b[769]);
  }
  _0x8e22x6 && _0x8e22x6[_0xee2b[83]](_0x8e22x2);
  _0x8e22x2[_0xee2b[763]][_0xee2b[762]] = _0x8e22x4;
  this[_0xee2b[180]](_0xee2b[770], this);
}, embedCellWidths:function(_0x8e22x6, _0x8e22x2) {
  for (var _0x8e22x4 = 0; _0x8e22x4 < _0x8e22x6[_0xee2b[4]]; _0x8e22x4++) {
    var _0x8e22x3 = _0x8e22x6[_0x8e22x4];
    var _0x8e22x5 = this[_0xee2b[327]][_0xee2b[772]](_0x8e22x3[_0xee2b[179]], _0x8e22x3[_0xee2b[771]]);
    if (_0x8e22x5) {
      _0x8e22x3[_0xee2b[773]] = _0x8e22x5;
    } else {
      _0x8e22x3[_0xee2b[773]] = 0;
      _0x8e22x3[_0xee2b[763]] = _0xee2b[774];
    }
  }
}, onElClick:function(_0x8e22x3) {
  return function(_0x8e22x2, _0x8e22x1) {
    _0x8e22x1 = _0x8e22x2[_0xee2b[775]] || _0x8e22x1;
    var _0x8e22x6 = Ext[_0xee2b[761]](_0x8e22x1)[_0xee2b[777]](_0xee2b[776]), _0x8e22x4 = Ext[_0xee2b[761]](_0x8e22x1)[_0xee2b[777]](_0xee2b[778]), _0x8e22x5 = this[_0xee2b[327]][_0xee2b[749]]()[_0x8e22x6][_0x8e22x4];
    this[_0xee2b[180]](_0xee2b[779] + _0x8e22x3, this, _0x8e22x5[_0xee2b[179]], _0x8e22x5[_0xee2b[771]], _0x8e22x2);
  };
}, highlightCell:function(_0x8e22x4, _0x8e22x3) {
  var _0x8e22x6 = this;
  if (_0x8e22x3 !== _0x8e22x6[_0xee2b[780]]) {
    _0x8e22x6[_0xee2b[739]]();
    _0x8e22x6[_0xee2b[780]] = _0x8e22x3;
    Ext[_0xee2b[761]](_0x8e22x3)[_0xee2b[264]](_0x8e22x6[_0xee2b[737]]);
  }
}, clearHighlight:function() {
  var _0x8e22x6 = this, _0x8e22x3 = _0x8e22x6[_0xee2b[780]];
  if (_0x8e22x3) {
    Ext[_0xee2b[761]](_0x8e22x3)[_0xee2b[267]](_0x8e22x6[_0xee2b[737]]);
    delete _0x8e22x6[_0xee2b[780]];
  }
}});
Ext[_0xee2b[6]](_0xee2b[781], {extend:_0xee2b[782], selector:null, currentCell:null, originalCellWidth:null, startClientX:null, timeAxisViewModel:null, minCellWidth:15, init:function(_0x8e22x3) {
  _0x8e22x3[_0xee2b[149]](_0xee2b[748], this[_0xee2b[783]], this);
}, onColumnRender:function(_0x8e22x3) {
  _0x8e22x3[_0xee2b[787]]()[_0xee2b[149]](_0xee2b[784], this[_0xee2b[785]], this, {delegate:this[_0xee2b[786]]});
}, getClientX:function(_0x8e22x3) {
  return Ext[_0xee2b[789]](_0x8e22x3[_0xee2b[788]]) ? _0x8e22x3[_0xee2b[788]] : _0x8e22x3[_0xee2b[790]][_0xee2b[788]];
}, onMouseDown:function(_0x8e22x5, _0x8e22x6) {
  var _0x8e22x4 = this, _0x8e22x3 = _0x8e22x6[_0xee2b[791]];
  _0x8e22x4[_0xee2b[792]] = Ext[_0xee2b[761]](_0x8e22x3)[_0xee2b[793]]();
  _0x8e22x4[_0xee2b[794]] = _0x8e22x4[_0xee2b[795]](_0x8e22x5);
  _0x8e22x4[_0xee2b[796]] = _0x8e22x3;
  _0x8e22x4[_0xee2b[800]]()[_0xee2b[252]](Ext[_0xee2b[797]](), _0xee2b[798], _0x8e22x4[_0xee2b[799]], _0x8e22x4);
  _0x8e22x4[_0xee2b[800]]()[_0xee2b[252]](Ext[_0xee2b[797]](), _0xee2b[801], _0x8e22x4[_0xee2b[802]], _0x8e22x4, {capture:true, single:true});
}, onMouseMove:function(_0x8e22x1, _0x8e22x8) {
  var _0x8e22x7 = this, _0x8e22x4 = _0x8e22x7[_0xee2b[796]], _0x8e22x9 = _0x8e22x4[_0xee2b[98]], _0x8e22xa = _0x8e22x7[_0xee2b[794]] - _0x8e22x7[_0xee2b[795]](_0x8e22x1), _0x8e22x6 = _0x8e22x7[_0xee2b[792]], _0x8e22x5 = Math[_0xee2b[715]](_0x8e22x7[_0xee2b[803]], _0x8e22x6 - _0x8e22xa);
  if (_0x8e22x9 && _0x8e22x5 < _0x8e22x6) {
    var _0x8e22x3 = Math[_0xee2b[203]](_0x8e22x6 * 2 - _0x8e22x7[_0xee2b[803]], _0x8e22x6 + _0x8e22xa);
    _0x8e22x9[_0xee2b[763]][_0xee2b[773]] = _0x8e22x3 + _0xee2b[804];
  }
  _0x8e22x4[_0xee2b[763]][_0xee2b[773]] = _0x8e22x5 + _0xee2b[804];
}, onMouseUp:function(_0x8e22x5, _0x8e22x8) {
  var _0x8e22x9 = this, _0x8e22x7 = _0x8e22x9[_0xee2b[800]]()[_0xee2b[694]](_0xee2b[805]), _0x8e22x3 = _0x8e22x7[_0xee2b[808]]()[_0xee2b[807]](Ext[_0xee2b[761]](_0x8e22x9[_0xee2b[796]])[_0xee2b[806]]()), _0x8e22x4 = Ext[_0xee2b[761]](_0x8e22x9[_0xee2b[796]])[_0xee2b[809]]() - _0x8e22x7[_0xee2b[808]]()[_0xee2b[809]](), _0x8e22x6 = _0x8e22x9[_0xee2b[795]](_0x8e22x5) - _0x8e22x9[_0xee2b[794]], _0x8e22x1 = _0x8e22x9[_0xee2b[792]] / _0x8e22x9[_0xee2b[810]][_0xee2b[755]](), _0x8e22xa = Math[_0xee2b[715]](_0x8e22x9[_0xee2b[803]], 
  _0x8e22x9[_0xee2b[810]][_0xee2b[755]]() + _0x8e22x6 / _0x8e22x1);
  _0x8e22x9[_0xee2b[810]][_0xee2b[811]](Math[_0xee2b[704]](_0x8e22xa));
  _0x8e22x7[_0xee2b[812]](_0x8e22x3, false, _0x8e22x4);
  _0x8e22x9[_0xee2b[800]]()[_0xee2b[325]](Ext[_0xee2b[797]](), _0xee2b[798], _0x8e22x9[_0xee2b[799]], _0x8e22x9);
  this[_0xee2b[796]] = this[_0xee2b[813]] = null;
}});
Ext[_0xee2b[6]](_0xee2b[814], {extend:_0xee2b[470], alias:_0xee2b[815], requires:[_0xee2b[716], _0xee2b[781]], draggable:false, groupable:false, hideable:false, sortable:false, resizable:false, menuDisabled:true, cls:_0xee2b[816], tdCls:_0xee2b[473], enableLocking:false, locked:false, lockable:false, enableTickResizing:false, cellFocusable:false, timeAxisViewModel:null, headerView:null, hoverCls:_0xee2b[27], ownHoverCls:_0xee2b[817], trackHeaderOver:true, compactCellWidthThreshold:Ext[_0xee2b[818]] && 
Ext[_0xee2b[818]][_0xee2b[683]][_0xee2b[819]]() === _0xee2b[820] ? 15 : 35, initComponent:function() {
  if (this[_0xee2b[730]]) {
    this[_0xee2b[823]](new Sch[_0xee2b[822]].HeaderResize({selector:_0xee2b[821], timeAxisViewModel:this[_0xee2b[810]]}));
  }
  this[_0xee2b[9]](arguments);
}, afterRender:function() {
  var _0x8e22x6 = this;
  var _0x8e22x3 = _0x8e22x6[_0xee2b[826]][_0xee2b[825]]({cls:_0xee2b[824]});
  if (!(_0x8e22x6[_0xee2b[827]] instanceof Sch[_0xee2b[829]][_0xee2b[828]])) {
    _0x8e22x6[_0xee2b[827]] = Ext[_0xee2b[831]](Ext[_0xee2b[330]](_0x8e22x6[_0xee2b[827]] || {}, {xclass:_0xee2b[716], model:_0x8e22x6[_0xee2b[810]], containerEl:_0x8e22x3, hoverCls:_0x8e22x6[_0xee2b[830]], trackHeaderOver:_0x8e22x6[_0xee2b[736]], enableTickResizing:this[_0xee2b[730]], compactCellWidthThreshold:_0x8e22x6[_0xee2b[756]]}));
  }
  _0x8e22x6[_0xee2b[827]][_0xee2b[149]](_0xee2b[770], _0x8e22x6[_0xee2b[832]], _0x8e22x6);
  _0x8e22x6[_0xee2b[827]][_0xee2b[748]]();
  _0x8e22x6[_0xee2b[834]][_0xee2b[840]][_0xee2b[149]](_0xee2b[833], function() {
    if (!_0x8e22x6[_0xee2b[834]]) {
      return;
    }
    _0x8e22x6[_0xee2b[252]](_0x8e22x6[_0xee2b[834]], _0xee2b[835], _0x8e22x6[_0xee2b[836]], _0x8e22x6);
    if (this[_0xee2b[793]]() > 0) {
      if (_0x8e22x6[_0xee2b[837]]() !== _0x8e22x6[_0xee2b[810]][_0xee2b[838]]()) {
        _0x8e22x6[_0xee2b[810]][_0xee2b[724]](_0x8e22x6[_0xee2b[837]]());
      }
      _0x8e22x6[_0xee2b[839]](_0x8e22x6[_0xee2b[810]][_0xee2b[750]]());
    }
  }, null, {single:true});
  this[_0xee2b[845]](_0xee2b[841], _0xee2b[842], _0xee2b[843], _0xee2b[844]);
  _0x8e22x6[_0xee2b[846]](_0x8e22x6[_0xee2b[827]], [_0xee2b[841], _0xee2b[842], _0xee2b[843]]);
  _0x8e22x6[_0xee2b[9]](arguments);
  _0x8e22x6[_0xee2b[847]] = false;
  this[_0xee2b[180]](_0xee2b[844], this);
}, initRenderData:function() {
  var _0x8e22x3 = this;
  _0x8e22x3[_0xee2b[849]][_0xee2b[848]] = _0x8e22x3[_0xee2b[849]][_0xee2b[848]] || _0x8e22x3[_0xee2b[848]];
  return _0x8e22x3[_0xee2b[9]](arguments);
}, destroy:function() {
  if (this[_0xee2b[827]]) {
    this[_0xee2b[827]][_0xee2b[218]]();
    this[_0xee2b[827]] = null;
  }
  this[_0xee2b[9]](arguments);
}, onTimeAxisViewRefresh:function() {
  var _0x8e22x6 = this[_0xee2b[850]]()[_0xee2b[840]];
  if (!_0x8e22x6 || _0x8e22x6[_0xee2b[851]]) {
    this[_0xee2b[827]][_0xee2b[152]](_0xee2b[770], this[_0xee2b[832]], this);
    var _0x8e22x3 = this[_0xee2b[810]][_0xee2b[750]]();
    if (this[_0xee2b[793]]() !== _0x8e22x3) {
      this[_0xee2b[839]](_0x8e22x3);
    } else {
      this[_0xee2b[852]]();
    }
    this[_0xee2b[853]]();
    this[_0xee2b[827]][_0xee2b[149]](_0xee2b[770], this[_0xee2b[832]], this);
  }
}, getAvailableWidthForSchedule:function() {
  if (!this[_0xee2b[834]]) {
    return 0;
  }
  var _0x8e22x5 = this[_0xee2b[834]][_0xee2b[854]](true) ? this[_0xee2b[834]][_0xee2b[793]]() : this[_0xee2b[834]][_0xee2b[855]] && this[_0xee2b[834]][_0xee2b[855]][_0xee2b[773]] || 0, _0x8e22x3 = this[_0xee2b[834]][_0xee2b[266]], _0x8e22x4;
  for (var _0x8e22x6 = 1; _0x8e22x6 < _0x8e22x3[_0xee2b[4]]; _0x8e22x6++) {
    _0x8e22x4 = _0x8e22x3[_0xee2b[55]](_0x8e22x6);
    if (!_0x8e22x4[_0xee2b[856]]) {
      _0x8e22x5 -= _0x8e22x4[_0xee2b[854]](true) ? _0x8e22x4[_0xee2b[793]]() : _0x8e22x4[_0xee2b[855]] && _0x8e22x4[_0xee2b[855]][_0xee2b[773]] || 0;
    }
  }
  return Math[_0xee2b[715]](0, _0x8e22x5 - Ext[_0xee2b[857]]()[_0xee2b[773]] - 1);
}, onResize:function() {
  this[_0xee2b[9]](arguments);
  this[_0xee2b[810]][_0xee2b[858]](this[_0xee2b[837]]());
}, onHeaderContainerResize:function(_0x8e22x2, _0x8e22x4, _0x8e22x3, _0x8e22x6, _0x8e22x5) {
  this[_0xee2b[810]][_0xee2b[858]](this[_0xee2b[837]]());
  if (_0x8e22x3 !== _0x8e22x5) {
    this[_0xee2b[827]][_0xee2b[748]]();
  }
}, ensureSizing:function() {
  var _0x8e22x6 = this[_0xee2b[827]][_0xee2b[726]];
  var _0x8e22x2 = this[_0xee2b[834]][_0xee2b[859]]();
  var _0x8e22x3 = _0x8e22x6[_0xee2b[859]]();
  var _0x8e22x5 = _0x8e22x2 - _0x8e22x3;
  if (_0x8e22x5 > 0) {
    var _0x8e22x4 = _0x8e22x6[_0xee2b[861]](_0xee2b[860]);
    if (_0x8e22x4) {
      _0x8e22x6[_0xee2b[760]](_0xee2b[864])[_0xee2b[863]](_0x8e22x2 / this[_0xee2b[810]][_0xee2b[862]]()[_0xee2b[4]]);
    }
  }
}, refresh:function() {
  if (this[_0xee2b[262]]) {
    this[_0xee2b[810]][_0xee2b[724]](null, true);
    this[_0xee2b[827]][_0xee2b[748]]();
  }
}});
Ext[_0xee2b[6]](_0xee2b[865], {extend:_0xee2b[470], alias:_0xee2b[866], align:_0xee2b[867], draggable:false, groupable:false, hideable:false, sortable:false, menuDisabled:true, timeAxis:null, timeAxisViewModel:null, enableLocking:false, locked:true, lockable:false, dataIndex:_0xee2b[179], initComponent:function() {
  this[_0xee2b[9]](arguments);
  this[_0xee2b[477]] = (this[_0xee2b[477]] || _0xee2b[27]) + _0xee2b[868];
  this[_0xee2b[689]] = this;
  this[_0xee2b[264]](_0xee2b[869]);
}, renderer:function(_0x8e22x5, _0x8e22x4, _0x8e22x3, _0x8e22x1) {
  var _0x8e22x6 = this[_0xee2b[810]];
  if (!_0x8e22x6[_0xee2b[870]][_0xee2b[753]]) {
    return;
  }
  _0x8e22x4[_0xee2b[763]] = _0xee2b[871] + (_0x8e22x6[_0xee2b[755]]() - 1) + _0xee2b[804];
  var _0x8e22x2;
  if (!_0x8e22x6[_0xee2b[872]]() && _0x8e22x5 && _0x8e22x6[_0xee2b[873]](_0x8e22x5)) {
    _0x8e22x2 = _0x8e22x6[_0xee2b[875]][_0x8e22x6[_0xee2b[874]]()];
    _0x8e22x4[_0xee2b[477]] += _0xee2b[876];
  } else {
    _0x8e22x2 = _0x8e22x6[_0xee2b[877]]();
  }
  if (_0x8e22x2[_0xee2b[878]]) {
    return _0x8e22x2[_0xee2b[878]][_0xee2b[293]](_0x8e22x2[_0xee2b[689]] || this, _0x8e22x3[_0xee2b[22]][_0xee2b[179]], _0x8e22x3[_0xee2b[22]][_0xee2b[771]], _0x8e22x4, _0x8e22x1);
  } else {
    return Ext[_0xee2b[703]][_0xee2b[880]](_0x8e22x5, _0x8e22x2[_0xee2b[879]]);
  }
}});
Ext[_0xee2b[6]](_0xee2b[881], {format:_0xee2b[882], encode:function(_0x8e22x3) {
  return Ext[_0xee2b[883]][_0xee2b[444]](_0x8e22x3);
}, decode:function(_0x8e22x3) {
  if (typeof _0x8e22x3 == _0xee2b[305]) {
    return _0x8e22x3;
  }
  return Ext[_0xee2b[883]][_0xee2b[425]](_0x8e22x3, true);
}});
Ext[_0xee2b[6]](_0xee2b[884], {requires:[_0xee2b[717]], format:_0xee2b[885], stringReplaces:[[/&/g, _0xee2b[886]], [/</g, _0xee2b[887]], [/>/g, _0xee2b[888]], [/"/g, _0xee2b[889]]], encodeString:function(_0x8e22x2) {
  if (!_0x8e22x2) {
    return _0x8e22x2;
  }
  var _0x8e22x3 = _0x8e22x2.toString(), _0x8e22x4 = this[_0xee2b[890]];
  for (var _0x8e22x5 = 0, _0x8e22x6 = _0x8e22x4[_0xee2b[4]]; _0x8e22x5 < _0x8e22x6; _0x8e22x5++) {
    _0x8e22x3 = _0x8e22x3[_0xee2b[675]](_0x8e22x4[_0x8e22x5][0], _0x8e22x4[_0x8e22x5][1]);
  }
  return _0x8e22x3;
}, encodeRecords:function(_0x8e22x4) {
  var _0x8e22x3 = _0xee2b[27];
  for (var _0x8e22x5 = 0, _0x8e22x6 = _0x8e22x4[_0xee2b[4]]; _0x8e22x5 < _0x8e22x6; _0x8e22x5++) {
    _0x8e22x3 += this[_0xee2b[891]](_0x8e22x4[_0x8e22x5]);
  }
  return _0x8e22x3;
}, encodeRecord:function(_0x8e22x6) {
  var _0x8e22x3 = _0xee2b[892];
  for (var _0x8e22x4 in _0x8e22x6) {
    var _0x8e22x5 = _0x8e22x6[_0x8e22x4];
    _0x8e22x3 += _0xee2b[893] + this[_0xee2b[894]](_0x8e22x4) + _0xee2b[895] + (_0x8e22x5 && _0x8e22x5[_0xee2b[896]] ? this[_0xee2b[897]]({storeId:_0x8e22x4}, _0x8e22x5) : this[_0xee2b[894]](_0x8e22x5)) + _0xee2b[898];
  }
  _0x8e22x3 += _0xee2b[899];
  return _0x8e22x3;
}, encodeStoreChanges:function(_0x8e22x6, _0x8e22x4) {
  var _0x8e22x3 = _0xee2b[900] + this[_0xee2b[894]](_0x8e22x6[_0xee2b[146]]) + _0xee2b[895];
  if (_0x8e22x4[_0xee2b[371]]) {
    _0x8e22x3 += _0xee2b[901] + this[_0xee2b[902]](_0x8e22x4[_0xee2b[371]]) + _0xee2b[903];
  }
  if (_0x8e22x4[_0xee2b[372]]) {
    _0x8e22x3 += _0xee2b[904] + this[_0xee2b[902]](_0x8e22x4[_0xee2b[372]]) + _0xee2b[905];
  }
  if (_0x8e22x4[_0xee2b[373]]) {
    _0x8e22x3 += _0xee2b[906] + this[_0xee2b[902]](_0x8e22x4[_0xee2b[373]]) + _0xee2b[907];
  }
  _0x8e22x3 += _0xee2b[908];
  return _0x8e22x3;
}, encode:function(_0x8e22x2) {
  var _0x8e22x3, _0x8e22x5, _0x8e22x6, _0x8e22x4;
  switch(_0x8e22x2[_0xee2b[249]]) {
    case _0xee2b[302]:
      _0x8e22x3 = _0xee2b[909] + this[_0xee2b[894]](_0x8e22x2[_0xee2b[443]]) + _0xee2b[895];
      for (_0x8e22x5 = 0, _0x8e22x6 = _0x8e22x2[_0xee2b[125]][_0xee2b[4]]; _0x8e22x5 < _0x8e22x6; _0x8e22x5++) {
        _0x8e22x4 = _0x8e22x2[_0xee2b[125]][_0x8e22x5];
        if (typeof _0x8e22x4 === _0xee2b[308]) {
          _0x8e22x3 += _0xee2b[900] + this[_0xee2b[894]](_0x8e22x4) + _0xee2b[910];
        } else {
          _0x8e22x3 += _0xee2b[900] + this[_0xee2b[894]](_0x8e22x4[_0xee2b[146]]) + _0xee2b[911] + this[_0xee2b[894]](_0x8e22x4[_0xee2b[357]]) + _0xee2b[912] + this[_0xee2b[894]](_0x8e22x4[_0xee2b[352]]) + _0xee2b[910];
        }
      }
      _0x8e22x3 += _0xee2b[913];
      return _0x8e22x3;
    case _0xee2b[338]:
      _0x8e22x3 = _0xee2b[914] + this[_0xee2b[894]](_0x8e22x2[_0xee2b[443]]) + _0xee2b[915] + this[_0xee2b[894]](_0x8e22x2[_0xee2b[374]]) + _0xee2b[895];
      for (_0x8e22x5 in _0x8e22x2) {
        if (_0x8e22x2[_0xee2b[53]](_0x8e22x5)) {
          _0x8e22x4 = this[_0xee2b[341]](_0x8e22x5);
          if (_0x8e22x4) {
            _0x8e22x3 += this[_0xee2b[897]](_0x8e22x4, _0x8e22x2[_0x8e22x5]);
          }
        }
      }
      _0x8e22x3 += _0xee2b[916];
      break;
  }
  return _0x8e22x3;
}, stringToXML:function(_0x8e22x6) {
  if (!_0x8e22x6) {
    return;
  }
  var _0x8e22x3;
  if (window[_0xee2b[917]]) {
    _0x8e22x3 = (new DOMParser())[_0xee2b[919]](_0x8e22x6, _0xee2b[918]);
  } else {
    if (window[_0xee2b[920]]) {
      _0x8e22x3 = new ActiveXObject(_0xee2b[921]);
      _0x8e22x3[_0xee2b[922]] = false;
      _0x8e22x3[_0xee2b[923]](_0x8e22x6);
    }
  }
  return _0x8e22x3;
}, decodeRecords:function(_0x8e22x5) {
  var _0x8e22x6 = [];
  for (var _0x8e22x4 = 0, _0x8e22x3 = _0x8e22x5[_0xee2b[4]]; _0x8e22x4 < _0x8e22x3; _0x8e22x4++) {
    _0x8e22x6[_0xee2b[11]](this[_0xee2b[924]](_0x8e22x5[_0x8e22x4]));
  }
  return _0x8e22x6;
}, decodeRecord:function(_0x8e22x1) {
  var _0x8e22x6 = _0x8e22x1[_0xee2b[925]], _0x8e22x3 = {}, _0x8e22x9;
  for (var _0x8e22x2 = 0, _0x8e22x4 = _0x8e22x6[_0xee2b[4]]; _0x8e22x2 < _0x8e22x4; _0x8e22x2++) {
    var _0x8e22x7 = _0x8e22x6[_0x8e22x2];
    if (_0x8e22x7[_0xee2b[926]] == _0xee2b[927]) {
      _0x8e22x9 = _0xee2b[27];
      if (_0x8e22x7[_0xee2b[928]]) {
        var _0x8e22x5 = this[_0xee2b[929]](_0x8e22x7, _0xee2b[64]);
        _0x8e22x9 = _0x8e22x5 ? this[_0xee2b[930]](_0x8e22x5) : _0x8e22x7[_0xee2b[928]][_0xee2b[931]];
      }
      _0x8e22x3[_0x8e22x7[_0xee2b[777]](_0xee2b[388])] = _0x8e22x9;
    }
  }
  return _0x8e22x3;
}, getElementsByTagName:function(_0x8e22x1, _0x8e22x4) {
  var _0x8e22x2 = _0x8e22x1[_0xee2b[925]], _0x8e22x6 = [];
  for (var _0x8e22x5 = 0, _0x8e22x3 = _0x8e22x2[_0xee2b[4]]; _0x8e22x5 < _0x8e22x3; _0x8e22x5++) {
    if (_0x8e22x2[_0x8e22x5][_0xee2b[926]] == _0x8e22x4) {
      _0x8e22x6[_0xee2b[11]](_0x8e22x2[_0x8e22x5]);
    }
  }
  return _0x8e22x6;
}, getElementByTagName:function(_0x8e22x2, _0x8e22x6) {
  var _0x8e22x5 = _0x8e22x2[_0xee2b[925]];
  for (var _0x8e22x4 = 0, _0x8e22x3 = _0x8e22x5[_0xee2b[4]]; _0x8e22x4 < _0x8e22x3; _0x8e22x4++) {
    if (_0x8e22x5[_0x8e22x4][_0xee2b[926]] == _0x8e22x6) {
      return _0x8e22x5[_0x8e22x4];
    }
  }
}, decodeStore:function(_0x8e22x3) {
  var _0x8e22x5 = {}, _0x8e22x4 = this[_0xee2b[932]](_0x8e22x3, _0xee2b[377]);
  if (_0x8e22x4[_0xee2b[4]]) {
    _0x8e22x5[_0xee2b[377]] = this[_0xee2b[934]](this[_0xee2b[932]](_0x8e22x4[0], _0xee2b[933]));
    var _0x8e22x6 = parseInt(_0x8e22x4[0][_0xee2b[777]](_0xee2b[383]), 10);
    if (isNaN(_0x8e22x6) || _0x8e22x6 < _0x8e22x5[_0xee2b[377]][_0xee2b[4]]) {
      _0x8e22x6 = _0x8e22x5[_0xee2b[377]][_0xee2b[4]];
    }
    _0x8e22x5[_0xee2b[383]] = _0x8e22x6;
  }
  var _0x8e22x2 = this[_0xee2b[929]](_0x8e22x3, _0xee2b[373]);
  if (_0x8e22x2) {
    _0x8e22x5[_0xee2b[373]] = this[_0xee2b[934]](this[_0xee2b[932]](_0x8e22x2, _0xee2b[933]));
  }
  return _0x8e22x5;
}, decode:function(_0x8e22x3) {
  var _0x8e22x5 = typeof _0x8e22x3 == _0xee2b[308] ? this[_0xee2b[935]](_0x8e22x3) : _0x8e22x3;
  if (!_0x8e22x5) {
    return;
  }
  var _0x8e22xd = {}, _0x8e22x2 = _0x8e22x5[_0xee2b[936]], _0x8e22x9 = _0x8e22x2[_0xee2b[932]](_0xee2b[64]), _0x8e22x1, _0x8e22x7;
  _0x8e22xd[_0xee2b[443]] = _0x8e22x2[_0xee2b[777]](_0xee2b[443]);
  _0x8e22xd[_0xee2b[374]] = _0x8e22x2[_0xee2b[777]](_0xee2b[374]);
  _0x8e22xd[_0xee2b[426]] = _0x8e22x2[_0xee2b[777]](_0xee2b[426]) || _0xee2b[937];
  _0x8e22xd[_0xee2b[426]] = _0x8e22xd[_0xee2b[426]][_0xee2b[819]]() == _0xee2b[938];
  if (!_0x8e22xd[_0xee2b[426]]) {
    _0x8e22xd[_0xee2b[939]] = _0x8e22x2[_0xee2b[777]](_0xee2b[939]);
    var _0x8e22x8 = _0x8e22x2[_0xee2b[932]](_0xee2b[940])[0];
    _0x8e22xd[_0xee2b[940]] = _0x8e22x8 && _0x8e22x8[_0xee2b[928]] && _0x8e22x8[_0xee2b[928]][_0xee2b[931]];
  }
  for (var _0x8e22x4 = 0, _0x8e22x6 = _0x8e22x9[_0xee2b[4]]; _0x8e22x4 < _0x8e22x6; _0x8e22x4++) {
    _0x8e22x1 = _0x8e22x9[_0x8e22x4];
    _0x8e22x7 = _0x8e22x1[_0xee2b[777]](_0xee2b[388]);
    if (this[_0xee2b[341]](_0x8e22x7)) {
      _0x8e22xd[_0x8e22x7] = this[_0xee2b[930]](_0x8e22x1);
    }
  }
  return _0x8e22xd;
}});
Ext[_0xee2b[6]](_0xee2b[941], {defaultMethod:{load:_0xee2b[942], sync:_0xee2b[943]}, cancelRequest:function(_0x8e22x3) {
  Ext[_0xee2b[945]][_0xee2b[944]](_0x8e22x3);
}, sendRequest:function(_0x8e22x6) {
  var _0x8e22x4 = _0x8e22x6[_0xee2b[22]], _0x8e22x5 = this[_0xee2b[298]][_0x8e22x6[_0xee2b[249]]], _0x8e22x2 = _0x8e22x5[_0xee2b[946]], _0x8e22x1 = Ext[_0xee2b[8]]({}, _0x8e22x5 && _0x8e22x5[_0xee2b[947]]), _0x8e22x9 = _0x8e22x5[_0xee2b[948]] || this[_0xee2b[949]][_0x8e22x6[_0xee2b[249]]];
  var _0x8e22x3 = Ext[_0xee2b[8]]({url:_0x8e22x5[_0xee2b[950]], method:_0x8e22x9, params:_0x8e22x1, failure:_0x8e22x6[_0xee2b[951]], success:function(_0x8e22x7, _0x8e22xa) {
    if (_0x8e22x6[_0xee2b[426]]) {
      _0x8e22x6[_0xee2b[426]][_0xee2b[293]](_0x8e22x6[_0xee2b[689]] || this, _0x8e22x7[_0xee2b[952]] || _0x8e22x7[_0xee2b[953]]);
    }
  }, scope:_0x8e22x6[_0xee2b[689]]}, _0x8e22x5[_0xee2b[954]]);
  if (!_0x8e22x2) {
    if (this[_0xee2b[880]] === _0xee2b[885]) {
      Ext[_0xee2b[8]](_0x8e22x3, {xmlData:_0x8e22x4});
    } else {
      Ext[_0xee2b[8]](_0x8e22x3, {jsonData:_0x8e22x4});
    }
  } else {
    _0x8e22x3[_0xee2b[947]] = _0x8e22x3[_0xee2b[947]] || {};
    _0x8e22x3[_0xee2b[947]][_0x8e22x2] = _0x8e22x4;
  }
  this[_0xee2b[180]](_0xee2b[955], this, _0x8e22x1, _0x8e22x6[_0xee2b[249]], _0x8e22x3);
  return Ext[_0xee2b[945]][_0xee2b[956]](_0x8e22x3);
}});
Ext[_0xee2b[6]](_0xee2b[957], {target:null, minVersion:null, maxVersion:null, reportUrl:null, obsoleteTestName:null, description:null, applyFn:null, ieOnly:false, macOnly:false, overrides:null, onClassExtended:function(_0x8e22x3, _0x8e22x6) {
  if (Sch[_0xee2b[958]]) {
    return;
  }
  if (_0x8e22x6[_0xee2b[959]] && !Ext[_0xee2b[960]]) {
    return;
  }
  if (_0x8e22x6[_0xee2b[961]] && !Ext[_0xee2b[962]]) {
    return;
  }
  if ((!_0x8e22x6[_0xee2b[963]] || Ext[_0xee2b[723]][_0xee2b[965]][_0xee2b[964]](_0x8e22x6[_0xee2b[963]]) || Ext[_0xee2b[723]][_0xee2b[965]][_0xee2b[966]](_0x8e22x6[_0xee2b[963]])) && (!_0x8e22x6[_0xee2b[967]] || Ext[_0xee2b[723]][_0xee2b[965]][_0xee2b[964]](_0x8e22x6[_0xee2b[967]]) || Ext[_0xee2b[723]][_0xee2b[965]][_0xee2b[968]](_0x8e22x6[_0xee2b[967]]))) {
    Ext[_0xee2b[972]](_0x8e22x6[_0xee2b[969]], function() {
      if (_0x8e22x6[_0xee2b[970]]) {
        _0x8e22x6[_0xee2b[970]]();
      } else {
        if (_0x8e22x6[_0xee2b[971]]) {
          Ext[_0xee2b[502]][_0xee2b[55]](_0x8e22x6[_0xee2b[969]])[_0xee2b[507]](_0x8e22x6[_0xee2b[971]]);
        }
      }
    });
  }
}});
Ext[_0xee2b[6]](_0xee2b[973], {extend:_0xee2b[957], target:_0xee2b[974], minVersion:_0xee2b[975], reportUrl:_0xee2b[976], obsoleteTestName:_0xee2b[977], description:[_0xee2b[978], _0xee2b[979], _0xee2b[980], _0xee2b[981]][_0xee2b[73]](_0xee2b[60]), applyFn:function() {
  var _0x8e22x3;
  _0x8e22x3 = Ext[_0xee2b[49]][_0xee2b[983]][_0xee2b[139]][_0xee2b[982]];
  Ext[_0xee2b[49]][_0xee2b[983]][_0xee2b[139]][_0xee2b[982]] = Ext[_0xee2b[56]];
  Ext[_0xee2b[49]][_0xee2b[983]][_0xee2b[139]][_0xee2b[984]] = _0x8e22x3;
}});
Ext[_0xee2b[6]](_0xee2b[985], {cache:null, constructor:function() {
  var _0x8e22x3 = this;
  _0x8e22x3[_0xee2b[986]] = {};
  _0x8e22x3[_0xee2b[45]][_0xee2b[987]][Ext[_0xee2b[510]](_0x8e22x3)] = _0x8e22x3[_0xee2b[987]] = {hit:0, miss:0};
}, key:function(_0x8e22x6) {
  var _0x8e22x3;
  if (_0x8e22x6 && _0x8e22x6[_0xee2b[988]]) {
    _0x8e22x3 = _0x8e22x6[_0xee2b[32]]().toString();
  } else {
    if (_0x8e22x6 === undefined || _0x8e22x6 === null) {
      _0x8e22x3 = _0xee2b[989];
    } else {
      _0x8e22x3 = _0x8e22x6.toString();
    }
  }
  return _0x8e22x3;
}, has:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  _0x8e22x3 = _0x8e22x6[_0xee2b[990]](_0x8e22x3);
  return _0x8e22x6[_0xee2b[986]][_0xee2b[53]](_0x8e22x3);
}, get:function(_0x8e22x6, _0x8e22x4) {
  var _0x8e22x5 = this, _0x8e22x3;
  _0x8e22x6 = _0x8e22x5[_0xee2b[990]](_0x8e22x6);
  _0x8e22x3 = _0x8e22x5[_0xee2b[986]][_0xee2b[53]](_0x8e22x6) && _0x8e22x5[_0xee2b[986]][_0x8e22x6];
  !_0x8e22x3 && _0x8e22x4 ? ++_0x8e22x5[_0xee2b[987]][_0xee2b[991]] : ++_0x8e22x5[_0xee2b[987]][_0xee2b[992]];
  if (!_0x8e22x3 && _0x8e22x4) {
    _0x8e22x3 = _0x8e22x4();
  } else {
    if (!_0x8e22x3) {
      _0x8e22x3 = [];
    }
  }
  _0x8e22x5[_0xee2b[986]][_0x8e22x6] = _0x8e22x3;
  return _0x8e22x3;
}, add:function(_0x8e22x4, _0x8e22x6) {
  var _0x8e22x5 = this, _0x8e22x3 = _0x8e22x5[_0xee2b[990]](_0x8e22x4);
  if (!_0x8e22x5[_0xee2b[986]][_0xee2b[53]](_0x8e22x3)) {
    _0x8e22x5[_0xee2b[986]][_0x8e22x3] = _0x8e22x5[_0xee2b[55]](_0x8e22x4);
  }
  arguments[_0xee2b[4]] > 1 && Ext[_0xee2b[26]][_0xee2b[993]](_0x8e22x5[_0xee2b[986]][_0x8e22x3], _0x8e22x6);
  return _0x8e22x5;
}, set:function(_0x8e22x6, _0x8e22x5) {
  var _0x8e22x4 = this, _0x8e22x3 = _0x8e22x4[_0xee2b[990]](_0x8e22x6);
  _0x8e22x4[_0xee2b[986]][_0x8e22x3] = _0x8e22x5;
  return _0x8e22x4;
}, remove:function(_0x8e22x6, _0x8e22x3) {
  var _0x8e22x4 = this;
  _0x8e22x6 = _0x8e22x4[_0xee2b[990]](_0x8e22x6);
  if (_0x8e22x4[_0xee2b[986]][_0xee2b[53]](_0x8e22x6)) {
    Ext[_0xee2b[26]][_0xee2b[63]](_0x8e22x4[_0xee2b[986]][_0x8e22x6], _0x8e22x3);
  }
  return _0x8e22x4;
}, move:function(_0x8e22x4, _0x8e22x5, _0x8e22x3) {
  var _0x8e22x6 = this;
  _0x8e22x4 = _0x8e22x6[_0xee2b[990]](_0x8e22x4);
  _0x8e22x5 = _0x8e22x6[_0xee2b[990]](_0x8e22x5);
  if (_0x8e22x4 != _0x8e22x5 && arguments[_0xee2b[4]] >= 3) {
    _0x8e22x6[_0xee2b[63]](_0x8e22x4, _0x8e22x3);
    _0x8e22x6[_0xee2b[255]](_0x8e22x5, _0x8e22x3);
  } else {
    if (_0x8e22x4 != _0x8e22x5 && _0x8e22x6[_0xee2b[986]][_0xee2b[53]](_0x8e22x4) && _0x8e22x6[_0xee2b[986]][_0xee2b[53]](_0x8e22x5)) {
      _0x8e22x6[_0xee2b[986]][_0x8e22x5] = Ext[_0xee2b[26]][_0xee2b[994]](_0x8e22x6[_0xee2b[986]][_0x8e22x5], _0x8e22x6[_0xee2b[986]][_0x8e22x4]);
      _0x8e22x6[_0xee2b[986]][_0x8e22x4] = [];
    } else {
      if (_0x8e22x4 != _0x8e22x5 && _0x8e22x6[_0xee2b[986]][_0xee2b[53]](_0x8e22x4)) {
        _0x8e22x6[_0xee2b[986]][_0x8e22x5] = _0x8e22x6[_0xee2b[986]][_0x8e22x4];
        _0x8e22x6[_0xee2b[986]][_0x8e22x4] = [];
      }
    }
  }
  return _0x8e22x6;
}, clear:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  if (!arguments[_0xee2b[4]]) {
    _0x8e22x6[_0xee2b[986]] = {};
  } else {
    _0x8e22x3 = _0x8e22x6[_0xee2b[990]](_0x8e22x3);
    if (_0x8e22x6[_0xee2b[986]][_0xee2b[53]](_0x8e22x3)) {
      delete _0x8e22x6[_0xee2b[986]][_0x8e22x3];
    }
  }
  return _0x8e22x6;
}, uncache:function(_0x8e22x6) {
  var _0x8e22x4 = this, _0x8e22x3;
  for (_0x8e22x3 in _0x8e22x4[_0xee2b[986]]) {
    if (_0x8e22x4[_0xee2b[986]][_0xee2b[53]](_0x8e22x3)) {
      _0x8e22x4[_0xee2b[986]][_0x8e22x3] = Ext[_0xee2b[26]][_0xee2b[63]](_0x8e22x4[_0xee2b[986]][_0x8e22x3], _0x8e22x6);
    }
  }
  return _0x8e22x4;
}, inheritableStatics:{stats:{}}});
Ext[_0xee2b[6]](_0xee2b[995], {extend:_0xee2b[985], requires:[_0xee2b[996]], assignmentStore:null, assignmentStoreDetacher:null, assignmentStoreFiltersDetacher:null, eventStoreDetacher:null, constructor:function(_0x8e22x9) {
  var _0x8e22x7 = this, _0x8e22x5 = _0x8e22x9[_0xee2b[696]]();
  _0x8e22x7[_0xee2b[9]]();
  function _0x8e22x8(_0x8e22xf, _0x8e22xe) {
    Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22xe, function(_0x8e22xc) {
      _0x8e22x7[_0xee2b[255]](_0x8e22xc[_0xee2b[997]](), _0x8e22xc);
    });
  }
  function _0x8e22x6(_0x8e22xf, _0x8e22xe) {
    Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22xe, function(_0x8e22xc) {
      _0x8e22x7[_0xee2b[63]](_0x8e22xc[_0xee2b[997]](), _0x8e22xc);
    });
  }
  function _0x8e22x10(_0x8e22xc, _0x8e22x19, _0x8e22xf) {
    var _0x8e22xb = _0x8e22x19[_0xee2b[998]], _0x8e22xe = _0x8e22x19[_0xee2b[52]] && _0x8e22xb in _0x8e22x19[_0xee2b[52]], _0x8e22x11 = _0x8e22xe && _0x8e22x19[_0xee2b[52]][_0x8e22xb];
    if (_0x8e22xe) {
      _0x8e22x7[_0xee2b[999]](_0x8e22x11, _0x8e22x19[_0xee2b[997]](), _0x8e22x19);
    }
  }
  function _0x8e22xd(_0x8e22xe) {
    _0x8e22x7[_0xee2b[231]]();
  }
  function _0x8e22x4(_0x8e22xe, _0x8e22xf) {
    _0x8e22x7[_0xee2b[231]]();
    _0x8e22x3(_0x8e22xf);
  }
  function _0x8e22xa(_0x8e22xf, _0x8e22xc, _0x8e22xb, _0x8e22xe) {
    _0x8e22x7[_0xee2b[999]](_0x8e22xb, _0x8e22xe);
  }
  function _0x8e22x2(_0x8e22xf, _0x8e22xe) {
    Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22xe, function(_0x8e22xc) {
      _0x8e22x7[_0xee2b[231]](_0x8e22xc);
    });
  }
  function _0x8e22x1() {
    _0x8e22x7[_0xee2b[231]]();
  }
  function _0x8e22x3(_0x8e22xe) {
    Ext[_0xee2b[218]](_0x8e22x7[_0xee2b[1000]]);
    _0x8e22x7[_0xee2b[1000]] = _0x8e22xe && _0x8e22xe[_0xee2b[149]]({idchanged:_0x8e22xa, remove:_0x8e22x2, cacheresethint:_0x8e22x1, clear:_0x8e22x1, rootchange:_0x8e22x1, priority:100, destroyable:true});
  }
  _0x8e22x7[_0xee2b[1001]] = _0x8e22x9[_0xee2b[149]]({add:_0x8e22x8, remove:_0x8e22x6, update:_0x8e22x10, cacheresethint:_0x8e22xd, clear:_0x8e22xd, eventstorechange:_0x8e22x4, priority:100, destroyable:true});
  _0x8e22x7[_0xee2b[1002]] = _0x8e22x9[_0xee2b[355]]()[_0xee2b[149]]({endupdate:_0x8e22xd, priority:1002, destroyable:true});
  _0x8e22x3(_0x8e22x5);
  _0x8e22x7[_0xee2b[1003]] = _0x8e22x9;
}, destroy:function() {
  var _0x8e22x3 = this;
  Ext[_0xee2b[1004]](_0x8e22x3, _0xee2b[1001], _0xee2b[1002], _0xee2b[1000]);
  _0x8e22x3[_0xee2b[1003]] = null;
}, get:function(_0x8e22x3, _0x8e22x6) {
  var _0x8e22x4 = this;
  _0x8e22x3 = _0x8e22x4[_0xee2b[990]](_0x8e22x3);
  _0x8e22x6 = _0x8e22x6 || function() {
    return Ext[_0xee2b[26]][_0xee2b[173]](_0x8e22x4[_0xee2b[1003]][_0xee2b[1005]](), function(_0x8e22x5) {
      return _0x8e22x5[_0xee2b[997]]() == _0x8e22x3;
    });
  };
  return _0x8e22x4[_0xee2b[9]]([_0x8e22x3, _0x8e22x6]);
}});
Ext[_0xee2b[6]](_0xee2b[1006], {extend:_0xee2b[985], requires:[_0xee2b[996]], assignmentStore:null, assignmentStoreDetacher:null, eventStoreDetacher:null, resourceStoreDetacher:null, constructor:function(_0x8e22x7) {
  var _0x8e22x8 = this, _0x8e22x1 = _0x8e22x7[_0xee2b[696]](), _0x8e22xe = _0x8e22x1 && _0x8e22x1[_0xee2b[1007]]();
  _0x8e22x8[_0xee2b[9]]();
  function _0x8e22xd(_0x8e22x11, _0x8e22xb) {
    Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22xb, function(_0x8e22x19) {
      _0x8e22x8[_0xee2b[255]](_0x8e22x19[_0xee2b[1008]](), _0x8e22x19);
    });
  }
  function _0x8e22x6(_0x8e22x11, _0x8e22xb) {
    Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22xb, function(_0x8e22x19) {
      _0x8e22x8[_0xee2b[63]](_0x8e22x19[_0xee2b[1008]](), _0x8e22x19);
    });
  }
  function _0x8e22xc(_0x8e22x19, _0x8e22x16, _0x8e22x11) {
    var _0x8e22x15 = _0x8e22x16[_0xee2b[1009]], _0x8e22x18 = _0x8e22x16[_0xee2b[52]] && _0x8e22x15 in _0x8e22x16[_0xee2b[52]], _0x8e22xb = _0x8e22x18 && _0x8e22x16[_0xee2b[52]][_0x8e22x15];
    if (_0x8e22x18) {
      _0x8e22x8[_0xee2b[999]](_0x8e22xb, _0x8e22x16[_0xee2b[1008]](), _0x8e22x16);
    }
  }
  function _0x8e22x10(_0x8e22xb) {
    _0x8e22x8[_0xee2b[231]]();
  }
  function _0x8e22x4(_0x8e22xb, _0x8e22x11) {
    _0x8e22x3(_0x8e22x11);
    _0x8e22x5(_0x8e22x11 && _0x8e22x11[_0xee2b[1007]]());
  }
  function _0x8e22xf(_0x8e22xb, _0x8e22x11) {
    _0x8e22x8[_0xee2b[231]]();
    _0x8e22x5(_0x8e22x11);
  }
  function _0x8e22xa(_0x8e22x11, _0x8e22x19, _0x8e22x18, _0x8e22xb) {
    _0x8e22x8[_0xee2b[999]](_0x8e22x18, _0x8e22xb);
  }
  function _0x8e22x9(_0x8e22xb, _0x8e22x11) {
    Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x11, function(_0x8e22x19) {
      _0x8e22x8[_0xee2b[231]](_0x8e22x19);
    });
  }
  function _0x8e22x2() {
    _0x8e22x8[_0xee2b[231]]();
  }
  function _0x8e22x3(_0x8e22xb) {
    Ext[_0xee2b[218]](_0x8e22x8[_0xee2b[1000]]);
    _0x8e22x8[_0xee2b[1000]] = _0x8e22xb && _0x8e22xb[_0xee2b[149]]({resourcestorechange:_0x8e22xf, priority:100, destroyable:true});
  }
  function _0x8e22x5(_0x8e22xb) {
    Ext[_0xee2b[218]](_0x8e22x8[_0xee2b[1010]]);
    _0x8e22x8[_0xee2b[1010]] = _0x8e22xb && _0x8e22xb[_0xee2b[149]]({idchanged:_0x8e22xa, remove:_0x8e22x9, clear:_0x8e22x2, cacheresethint:_0x8e22x2, rootchange:_0x8e22x2, priority:100, destroyable:true});
  }
  _0x8e22x8[_0xee2b[1001]] = _0x8e22x7[_0xee2b[149]]({add:_0x8e22xd, remove:_0x8e22x6, update:_0x8e22xc, clear:_0x8e22x10, cacheresethint:_0x8e22x10, eventstorechange:_0x8e22x4, priority:100, destroyable:true});
  _0x8e22x8[_0xee2b[1002]] = _0x8e22x7[_0xee2b[355]]()[_0xee2b[149]](_0xee2b[333], _0x8e22x10, _0x8e22x8, {priority:1002, destroyable:true});
  _0x8e22x3(_0x8e22x1);
  _0x8e22x5(_0x8e22xe);
  _0x8e22x8[_0xee2b[1003]] = _0x8e22x7;
}, destroy:function() {
  var _0x8e22x3 = this;
  Ext[_0xee2b[1004]](_0x8e22x3, _0xee2b[1001], _0xee2b[1002], _0xee2b[1000], _0xee2b[1010]);
  _0x8e22x3[_0xee2b[1003]] = null;
}, get:function(_0x8e22x3, _0x8e22x6) {
  var _0x8e22x4 = this;
  _0x8e22x3 = _0x8e22x4[_0xee2b[990]](_0x8e22x3);
  _0x8e22x6 = _0x8e22x6 || function() {
    return Ext[_0xee2b[26]][_0xee2b[173]](_0x8e22x4[_0xee2b[1003]][_0xee2b[1005]](), function(_0x8e22x5) {
      return _0x8e22x5[_0xee2b[1008]]() == _0x8e22x3;
    });
  };
  return _0x8e22x4[_0xee2b[9]]([_0x8e22x3, _0x8e22x6]);
}});
Ext[_0xee2b[6]](_0xee2b[1011], {onClassMixedIn:function(_0x8e22x3) {
  var _0x8e22x6 = {};
  if (_0x8e22x3[_0xee2b[139]][_0xee2b[234]]) {
    _0x8e22x6[_0xee2b[1012]] = _0x8e22x3[_0xee2b[139]][_0xee2b[394]];
  } else {
    _0x8e22x6[_0xee2b[1012]] = _0x8e22x3[_0xee2b[139]][_0xee2b[395]];
  }
  if (_0x8e22x3[_0xee2b[139]][_0xee2b[234]]) {
    _0x8e22x6[_0xee2b[1013]] = function(_0x8e22x4) {
      return this[_0xee2b[1014]][_0x8e22x4] || null;
    };
  } else {
    _0x8e22x6[_0xee2b[1013]] = _0x8e22x3[_0xee2b[139]][_0xee2b[1015]];
  }
  Ext[_0xee2b[507]](_0x8e22x3, _0x8e22x6);
}});
Ext[_0xee2b[6]](_0xee2b[1016], {extend:_0xee2b[17], mixinConfig:{before:{loadRecords:_0xee2b[1017], removeAll:_0xee2b[254]}}, loadRecords:function() {
  this[_0xee2b[180]](_0xee2b[1018], this);
}, removeAll:function(_0x8e22x3) {
  if (_0x8e22x3) {
    this[_0xee2b[180]](_0xee2b[1018], this);
  }
}});
Ext[_0xee2b[6]](_0xee2b[1019], function(_0x8e22x3) {
  return {extend:_0xee2b[996], mixins:{robo:_0xee2b[16]}, isCustomizableModel:true, customizableFields:null, previous:null, __editing:null, __editCounter:0, constructor:function() {
    var _0x8e22x6 = this[_0xee2b[9]](arguments);
    return _0x8e22x6;
  }, storePreviousFlex:Ext[_0xee2b[283]][_0xee2b[1021]](function(_0x8e22x2, _0x8e22x5) {
    var _0x8e22x4 = this, _0x8e22x6 = _0x8e22x4[_0xee2b[55]](_0x8e22x2);
    if (_0x8e22x6 instanceof Date && !(_0x8e22x5 instanceof Date)) {
      _0x8e22x5 = _0x8e22x4[_0xee2b[162]](_0x8e22x2)[_0xee2b[1020]](_0x8e22x5, _0x8e22x4);
    }
    if (_0x8e22x6 instanceof Date && _0x8e22x6 - _0x8e22x5 || !(_0x8e22x6 instanceof Date) && _0x8e22x6 !== _0x8e22x5) {
      _0x8e22x4[_0xee2b[52]][_0x8e22x2] = _0x8e22x6;
    }
  }), deletePreviousFlex:Ext[_0xee2b[283]][_0xee2b[1021]](function(_0x8e22x4, _0x8e22x6) {
    delete this[_0xee2b[52]][_0x8e22x4];
  }), set:function(_0x8e22x1, _0x8e22x2) {
    var _0x8e22x5 = this, _0x8e22x4 = false, _0x8e22x6 = null;
    if (!_0x8e22x5[_0xee2b[52]]) {
      _0x8e22x4 = true;
      _0x8e22x5[_0xee2b[52]] = {};
    }
    _0x8e22x5[_0xee2b[1022]](_0x8e22x1, _0x8e22x2);
    _0x8e22x6 = _0x8e22x5[_0xee2b[9]](arguments);
    if (!_0x8e22x5[_0xee2b[1023]]) {
      if (_0x8e22x4) {
        delete _0x8e22x5[_0xee2b[52]];
      } else {
        _0x8e22x5[_0xee2b[1024]](_0x8e22x1, _0x8e22x2);
      }
    }
    return _0x8e22x6;
  }, reject:function() {
    var _0x8e22x4 = this, _0x8e22x6 = _0x8e22x4[_0xee2b[346]] || {}, _0x8e22x5;
    _0x8e22x4[_0xee2b[1023]] = true;
    _0x8e22x4[_0xee2b[52]] = _0x8e22x4[_0xee2b[52]] || {};
    for (_0x8e22x5 in _0x8e22x6) {
      if (_0x8e22x6[_0xee2b[53]](_0x8e22x5)) {
        if (typeof _0x8e22x6[_0x8e22x5] != _0xee2b[505]) {
          _0x8e22x4[_0xee2b[52]][_0x8e22x5] = _0x8e22x4[_0xee2b[55]](_0x8e22x5);
        }
      }
    }
    _0x8e22x4[_0xee2b[9]](arguments);
    delete _0x8e22x4[_0xee2b[52]];
    _0x8e22x4[_0xee2b[1023]] = false;
  }, beginEdit:function() {
    this[_0xee2b[1025]]++;
    this[_0xee2b[1023]] = true;
    this[_0xee2b[9]](arguments);
  }, cancelEdit:function() {
    this[_0xee2b[1025]] = 0;
    this[_0xee2b[1023]] = false;
    this[_0xee2b[9]](arguments);
    delete this[_0xee2b[52]];
  }, endEdit:function(_0x8e22x4, _0x8e22x5) {
    if (--this[_0xee2b[1025]] === 0) {
      if (!_0x8e22x4 && this[_0xee2b[23]]) {
        var _0x8e22x6 = this[_0xee2b[20]];
        if (!_0x8e22x5) {
          _0x8e22x5 = this[_0xee2b[23]](_0x8e22x6[_0xee2b[22]]);
        }
        if (_0x8e22x5 && _0x8e22x5[_0xee2b[4]] === 0) {
          _0x8e22x4 = true;
        }
      }
      this[_0xee2b[9]]([_0x8e22x4][_0xee2b[318]](Array[_0xee2b[139]][_0xee2b[191]][_0xee2b[293]](arguments, 1)));
      this[_0xee2b[1023]] = false;
      delete this[_0xee2b[52]];
    }
  }};
}, function(_0x8e22x3) {
  _0x8e22x3[_0xee2b[1028]][_0xee2b[205]]({fn:function(_0x8e22x6, _0x8e22x4) {
    if (_0x8e22x4) {
      if (Ext[_0xee2b[307]](_0x8e22x4)) {
        _0x8e22x6[_0xee2b[1026]] = _0x8e22x4[_0xee2b[191]]();
      } else {
        if (_0x8e22x4[_0xee2b[1027]]) {
          if (!Ext[_0xee2b[307]](_0x8e22x4[_0xee2b[1027]])) {
            _0x8e22x6[_0xee2b[1026]] = [_0x8e22x4[_0xee2b[1027]]];
          } else {
            _0x8e22x6[_0xee2b[1026]] = _0x8e22x4[_0xee2b[1027]][_0xee2b[191]]();
          }
        }
      }
    }
  }});
  _0x8e22x3[_0xee2b[1045]](function(_0x8e22x5, _0x8e22x1, _0x8e22x4) {
    var _0x8e22x6 = Ext[_0xee2b[502]], _0x8e22x2 = _0x8e22x6[_0xee2b[501]];
    _0x8e22x6[_0xee2b[501]] = function(_0x8e22xd) {
      var _0x8e22xe = _0x8e22x5[_0xee2b[139]];
      if (_0x8e22xe[_0xee2b[1029]]) {
        _0x8e22xe[_0xee2b[1030]] = (_0x8e22x5[_0xee2b[673]][_0xee2b[1030]] || [])[_0xee2b[318]](_0x8e22xe[_0xee2b[1029]]);
      } else {
        _0x8e22xe[_0xee2b[1030]] = _0x8e22x5[_0xee2b[673]][_0xee2b[1030]] || [];
      }
      var _0x8e22x8 = {};
      Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22xe[_0xee2b[1030]], function(_0x8e22xc) {
        if (typeof _0x8e22xc == _0xee2b[308]) {
          _0x8e22xc = {name:_0x8e22xc};
        }
        _0x8e22x8[_0x8e22xc[_0xee2b[683]]] = _0x8e22xc;
      });
      var _0x8e22x9 = _0x8e22xe[_0xee2b[1027]];
      var _0x8e22x7 = [];
      var _0x8e22xa = [];
      Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x9, function(_0x8e22xc) {
        if (_0x8e22xc[_0xee2b[1031]]) {
          _0x8e22xa[_0xee2b[11]](_0x8e22xc[_0xee2b[497]]());
        }
      });
      if (_0x8e22xe[_0xee2b[328]] !== _0xee2b[388] && _0x8e22xe[_0xee2b[162]](_0xee2b[388])) {
        if (!_0x8e22xe[_0xee2b[162]](_0xee2b[388])[_0xee2b[53]](_0xee2b[683])) {
          _0x8e22xa[_0xee2b[11]](_0xee2b[388]);
        }
      }
      if (_0x8e22xe[_0xee2b[328]] !== _0xee2b[1032] && _0x8e22xe[_0xee2b[162]](_0xee2b[1032])) {
        if (!_0x8e22xe[_0xee2b[162]](_0xee2b[1032])[_0xee2b[53]](_0xee2b[683])) {
          _0x8e22xa[_0xee2b[11]](_0xee2b[1032]);
        }
      }
      _0x8e22x5[_0xee2b[1033]](_0x8e22xa);
      function _0x8e22xf(_0x8e22xb, _0x8e22xc, _0x8e22x18) {
        if (!_0x8e22xc) {
          return;
        }
        if (!Ext[_0xee2b[307]](_0x8e22xc)) {
          _0x8e22xc = [_0x8e22xc];
        }
        var _0x8e22x19;
        for (var _0x8e22x11 = _0x8e22xc[_0xee2b[4]] - 1; _0x8e22x11 >= 0; _0x8e22x11--) {
          if (_0x8e22xc[_0x8e22x11][_0xee2b[683]] == _0x8e22x18) {
            _0x8e22x19 = _0x8e22xc[_0x8e22x11];
            break;
          }
        }
        Ext[_0xee2b[330]](_0x8e22xb, _0x8e22x19);
      }
      function _0x8e22x10(_0x8e22xb) {
        var _0x8e22x15 = _0x8e22x5, _0x8e22x11 = _0x8e22x15[_0xee2b[139]], _0x8e22x19 = _0x8e22xb === _0xee2b[1032] ? _0xee2b[328] : _0x8e22xb[_0xee2b[1034]](0)[_0xee2b[819]]() + _0x8e22xb[_0xee2b[1035]](1) + _0xee2b[1036], _0x8e22xc = {name:_0x8e22x11[_0x8e22x19] || _0x8e22xb, isCustomizableField:true}, _0x8e22x18;
        while (_0x8e22x11 && _0x8e22x11[_0xee2b[1037]]) {
          _0x8e22x18 = _0x8e22x11[_0x8e22x19] || _0x8e22xb;
          _0x8e22x11[_0xee2b[53]](_0xee2b[1029]) && _0x8e22xf(_0x8e22xc, _0x8e22x11[_0xee2b[1029]], _0x8e22xb);
          _0x8e22xf(_0x8e22xc, _0x8e22x15[_0xee2b[1026]], _0x8e22x18);
          _0x8e22x11 = _0x8e22x15[_0xee2b[673]];
          _0x8e22x15 = _0x8e22x11 && _0x8e22x11[_0xee2b[45]];
        }
        return _0x8e22xc;
      }
      _0x8e22xa = [];
      Ext[_0xee2b[154]][_0xee2b[25]](_0x8e22x8, function(_0x8e22xc, _0x8e22x19) {
        var _0x8e22x18 = _0x8e22x19[_0xee2b[683]] || _0x8e22x19[_0xee2b[497]]();
        var _0x8e22x12 = _0x8e22x18 === _0xee2b[1032] ? _0xee2b[328] : _0x8e22x18[_0xee2b[1034]](0)[_0xee2b[819]]() + _0x8e22x18[_0xee2b[1035]](1) + _0xee2b[1036];
        var _0x8e22x14 = _0x8e22xe[_0x8e22x12] || _0x8e22x18;
        _0x8e22xe[_0xee2b[162]](_0x8e22x14) && _0x8e22xa[_0xee2b[11]](_0x8e22x14);
        var _0x8e22x16 = _0x8e22x10(_0x8e22x18);
        _0x8e22x7[_0xee2b[11]](Ext[_0xee2b[831]](_0xee2b[1038] + (_0x8e22x16[_0xee2b[249]] || _0xee2b[1039]), _0x8e22x16));
        var _0x8e22x11 = Ext[_0xee2b[1041]][_0xee2b[1040]](_0x8e22x18);
        if (_0x8e22x11 != _0xee2b[1032]) {
          var _0x8e22x15 = _0xee2b[55] + _0x8e22x11;
          var _0x8e22xb = _0xee2b[50] + _0x8e22x11;
          if (!_0x8e22xe[_0x8e22x15] || _0x8e22xe[_0x8e22x15][_0xee2b[1042]] && _0x8e22xe[_0x8e22x15][_0xee2b[1042]] != _0x8e22x14) {
            _0x8e22xe[_0x8e22x15] = function() {
              return this[_0xee2b[55]](this[_0x8e22x12] || _0x8e22x14);
            };
            _0x8e22xe[_0x8e22x15][_0xee2b[1042]] = _0x8e22x14;
          }
          if (!_0x8e22xe[_0x8e22xb] || _0x8e22xe[_0x8e22xb][_0xee2b[1043]] && _0x8e22xe[_0x8e22xb][_0xee2b[1043]] != _0x8e22x14) {
            _0x8e22xe[_0x8e22xb] = function(_0x8e22x13) {
              return this[_0xee2b[50]](this[_0x8e22x12] || _0x8e22x14, _0x8e22x13);
            };
            _0x8e22xe[_0x8e22xb][_0xee2b[1043]] = _0x8e22x14;
          }
        }
      });
      _0x8e22x5[_0xee2b[1044]](_0x8e22x7, _0x8e22xa);
      _0x8e22x2[_0xee2b[8]](this, arguments);
      _0x8e22x6[_0xee2b[501]] = _0x8e22x2;
    };
  });
});
Ext[_0xee2b[6]](_0xee2b[1046], {extend:_0xee2b[1019], idProperty:_0xee2b[1032], isAssignmentModel:true, customizableFields:[{name:_0xee2b[1047]}, {name:_0xee2b[1048]}], resourceIdField:_0xee2b[1047], eventIdField:_0xee2b[1048], getInternalId:function() {
  return this[_0xee2b[1049]];
}, getAssignmentStore:function() {
  return this[_0xee2b[1050]] && this[_0xee2b[1050]][0];
}, getEventStore:function() {
  var _0x8e22x3 = this[_0xee2b[1051]]();
  return _0x8e22x3 && _0x8e22x3[_0xee2b[696]]();
}, getResourceStore:function() {
  var _0x8e22x3 = this[_0xee2b[696]]();
  return _0x8e22x3 && _0x8e22x3[_0xee2b[1007]]();
}, getEvent:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  _0x8e22x3 = _0x8e22x3 || _0x8e22x6[_0xee2b[696]]();
  return _0x8e22x3 && _0x8e22x3[_0xee2b[1012]](_0x8e22x6[_0xee2b[997]]());
}, getResource:function(_0x8e22x6) {
  var _0x8e22x3 = this;
  _0x8e22x6 = _0x8e22x6 || _0x8e22x3[_0xee2b[1007]]();
  return _0x8e22x6 && _0x8e22x6[_0xee2b[1012]](_0x8e22x3[_0xee2b[1008]]());
}, getEventName:function(_0x8e22x3) {
  var _0x8e22x6 = this[_0xee2b[1052]](_0x8e22x3);
  return _0x8e22x6 && _0x8e22x6[_0xee2b[497]]() || _0xee2b[27];
}, getResourceName:function(_0x8e22x3) {
  var _0x8e22x6 = this[_0xee2b[1053]](_0x8e22x3);
  return _0x8e22x6 && _0x8e22x6[_0xee2b[497]]() || _0xee2b[27];
}, isPersistable:function() {
  var _0x8e22x6 = this, _0x8e22x3 = _0x8e22x6[_0xee2b[1052]](), _0x8e22x4 = _0x8e22x6[_0xee2b[1053]]();
  return _0x8e22x3 && !_0x8e22x3[_0xee2b[30]] && _0x8e22x4 && !_0x8e22x4[_0xee2b[30]];
}, fullCopy:function() {
  return this[_0xee2b[1054]][_0xee2b[8]](this, arguments);
}, getEventResourceCompositeKey:function() {
  var _0x8e22x3 = this;
  return _0x8e22x3[_0xee2b[45]][_0xee2b[1055]](_0x8e22x3[_0xee2b[997]](), _0x8e22x3[_0xee2b[1008]]());
}, inheritableStatics:{makeAssignmentEventResourceCompositeKey:function() {
  var _0x8e22x3 = [];
  return function(_0x8e22x6, _0x8e22x4) {
    _0x8e22x3[_0xee2b[4]] = 0;
    _0x8e22x3[_0xee2b[11]](_0xee2b[1056], _0x8e22x6, _0xee2b[1057], _0x8e22x4, _0xee2b[1058]);
    return _0x8e22x3[_0xee2b[73]](_0xee2b[27]);
  };
}()}});
Ext[_0xee2b[6]](_0xee2b[1059], {extend:_0xee2b[109], requires:[_0xee2b[973], _0xee2b[995], _0xee2b[1006]], uses:[_0xee2b[995], _0xee2b[1006], _0xee2b[1060], _0xee2b[1061]], mixins:[_0xee2b[1011], _0xee2b[1016], _0xee2b[216]], config:{extraKeys:{byEventIdResourceId:{keyFn:_0xee2b[1062]}}}, model:_0xee2b[1046], alias:_0xee2b[1063], storeId:_0xee2b[1064], eventResourceCache:null, resourceEventsCache:null, eventStoreDetacher:null, resourceStoreDetacher:null, eventStore:null, constructor:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  _0x8e22x6[_0xee2b[9]]([_0x8e22x3]);
  _0x8e22x6[_0xee2b[1065]] = _0x8e22x6[_0xee2b[1065]] || _0x8e22x6[_0xee2b[1066]]();
  _0x8e22x6[_0xee2b[1067]] = _0x8e22x6[_0xee2b[1067]] || _0x8e22x6[_0xee2b[1068]]();
}, destroy:function() {
  var _0x8e22x3 = this;
  Ext[_0xee2b[1004]](_0x8e22x3, _0xee2b[1069], _0xee2b[1070], _0xee2b[1065], _0xee2b[1070], _0xee2b[1000], _0xee2b[1010]);
  _0x8e22x3[_0xee2b[9]]();
}, createEventAssignmentCache:function() {
  return new Sch[_0xee2b[22]][_0xee2b[49]].EventAssignmentsCache(this);
}, createResourceAssignmentCache:function() {
  return new Sch[_0xee2b[22]][_0xee2b[49]].ResourceAssignmentsCache(this);
}, createAssignmentStoreEventResourcesCache:function() {
  return new Sch[_0xee2b[22]][_0xee2b[49]].AssignmentStoreEventResourcesCache(this);
}, createAssignmentStoreResourceEventsCache:function() {
  return new Sch[_0xee2b[22]][_0xee2b[49]].AssignmentStoreResourceEventsCache(this);
}, getEventStore:function() {
  return this[_0xee2b[1071]];
}, setEventStore:function(_0x8e22x3) {
  var _0x8e22x6 = this, _0x8e22x4 = _0x8e22x6[_0xee2b[1071]];
  _0x8e22x6[_0xee2b[1071]] = _0x8e22x3 && Ext[_0xee2b[1072]][_0xee2b[131]](_0x8e22x3) || null;
  _0x8e22x6[_0xee2b[1073]](_0x8e22x6[_0xee2b[1071]]);
  if ((_0x8e22x4 || _0x8e22x3) && _0x8e22x4 !== _0x8e22x3) {
    _0x8e22x6[_0xee2b[180]](_0xee2b[1074], _0x8e22x6, _0x8e22x3, _0x8e22x4);
  }
}, attachToEventStore:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  Ext[_0xee2b[218]](_0x8e22x6[_0xee2b[1000]]);
  if (_0x8e22x3 && _0x8e22x3[_0xee2b[234]]) {
    _0x8e22x6[_0xee2b[1000]] = _0x8e22x3[_0xee2b[149]]({noderemove:_0x8e22x6[_0xee2b[1075]], resourcestorechange:_0x8e22x6[_0xee2b[1076]], scope:_0x8e22x6, destroyable:true, priority:200});
  } else {
    if (_0x8e22x3) {
      _0x8e22x6[_0xee2b[1000]] = _0x8e22x3[_0xee2b[149]]({remove:_0x8e22x6[_0xee2b[1077]], resourcestorechange:_0x8e22x6[_0xee2b[1076]], scope:_0x8e22x6, destroyable:true, priority:200});
    }
  }
  _0x8e22x6[_0xee2b[1078]](_0x8e22x3 && _0x8e22x3[_0xee2b[1007]]());
}, attachToResourceStore:function(_0x8e22x6) {
  var _0x8e22x3 = this;
  Ext[_0xee2b[218]](_0x8e22x3[_0xee2b[1010]]);
  if (_0x8e22x6) {
    if (_0x8e22x6[_0xee2b[234]]) {
      _0x8e22x3[_0xee2b[1010]] = _0x8e22x6[_0xee2b[149]]({noderemove:_0x8e22x3[_0xee2b[1079]], scope:_0x8e22x3, destroyable:true, priority:200});
    } else {
      _0x8e22x3[_0xee2b[1010]] = _0x8e22x6[_0xee2b[149]]({remove:_0x8e22x3[_0xee2b[1080]], scope:_0x8e22x3, destroyable:true, priority:200});
    }
  }
}, onEventStoreResourceStoreChange:function(_0x8e22x6, _0x8e22x3, _0x8e22x4) {
  this[_0xee2b[1078]](_0x8e22x3);
}, onEventRemove:function(_0x8e22x2, _0x8e22x5, _0x8e22x4, _0x8e22x6) {
  var _0x8e22x1 = this, _0x8e22x3;
  if (!_0x8e22x6) {
    _0x8e22x3 = [];
    Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x5, function(_0x8e22x9) {
      _0x8e22x3 = _0x8e22x3[_0xee2b[318]](_0x8e22x1[_0xee2b[1081]](_0x8e22x9));
    });
    _0x8e22x3[_0xee2b[4]] && _0x8e22x1[_0xee2b[63]](_0x8e22x3);
  }
}, onEventNodeRemove:function(_0x8e22x4, _0x8e22x2, _0x8e22x6) {
  var _0x8e22x5 = this, _0x8e22x3;
  if (!_0x8e22x6) {
    _0x8e22x3 = [];
    _0x8e22x2[_0xee2b[99]](function(_0x8e22x1) {
      _0x8e22x3 = _0x8e22x3[_0xee2b[318]](_0x8e22x5[_0xee2b[1081]](_0x8e22x1));
    });
    _0x8e22x3[_0xee2b[4]] && _0x8e22x5[_0xee2b[63]](_0x8e22x3);
  }
}, onResourceRemove:function(_0x8e22x2, _0x8e22x1, _0x8e22x4, _0x8e22x6) {
  var _0x8e22x5 = this, _0x8e22x3;
  if (!_0x8e22x6) {
    _0x8e22x3 = [];
    Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x1, function(_0x8e22x9) {
      _0x8e22x3 = _0x8e22x3[_0xee2b[318]](_0x8e22x5[_0xee2b[1082]](_0x8e22x9));
    });
    _0x8e22x3[_0xee2b[4]] && _0x8e22x5[_0xee2b[63]](_0x8e22x3);
  }
}, onResourceNodeRemove:function(_0x8e22x5, _0x8e22x2, _0x8e22x6) {
  var _0x8e22x4 = this, _0x8e22x3;
  if (!_0x8e22x6) {
    _0x8e22x3 = [];
    _0x8e22x2[_0xee2b[99]](function(_0x8e22x1) {
      _0x8e22x3 = _0x8e22x3[_0xee2b[318]](_0x8e22x4[_0xee2b[1082]](_0x8e22x1));
    });
    _0x8e22x3[_0xee2b[4]] && _0x8e22x4[_0xee2b[63]](_0x8e22x3);
  }
}, mapAssignmentsForEvent:function(_0x8e22x5, _0x8e22x6, _0x8e22x2) {
  var _0x8e22x4 = this, _0x8e22x3 = [];
  _0x8e22x6 = _0x8e22x6 || Ext[_0xee2b[56]];
  _0x8e22x2 = _0x8e22x2 || Ext[_0xee2b[1083]];
  if (_0x8e22x6 !== Ext[_0xee2b[56]] || _0x8e22x2 !== Ext[_0xee2b[1083]]) {
    Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x4[_0xee2b[1065]][_0xee2b[55]](_0x8e22x5), function(_0x8e22x9) {
      var _0x8e22x1 = _0x8e22x6(_0x8e22x9);
      _0x8e22x2(_0x8e22x1) && _0x8e22x3[_0xee2b[11]](_0x8e22x1);
    });
  } else {
    _0x8e22x3 = _0x8e22x3[_0xee2b[318]](_0x8e22x4[_0xee2b[1065]][_0xee2b[55]](_0x8e22x5));
  }
  return _0x8e22x3;
}, mapAssignmentsForResource:function(_0x8e22x5, _0x8e22x6, _0x8e22x2) {
  var _0x8e22x4 = this, _0x8e22x3 = [];
  _0x8e22x6 = _0x8e22x6 || Ext[_0xee2b[56]];
  _0x8e22x2 = _0x8e22x2 || Ext[_0xee2b[1083]];
  if (_0x8e22x6 !== Ext[_0xee2b[56]] || _0x8e22x2 !== Ext[_0xee2b[1083]]) {
    Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x4[_0xee2b[1067]][_0xee2b[55]](_0x8e22x5), function(_0x8e22x9) {
      var _0x8e22x1 = _0x8e22x6(_0x8e22x9);
      _0x8e22x2(_0x8e22x1) && _0x8e22x3[_0xee2b[11]](_0x8e22x1);
    });
  } else {
    _0x8e22x3 = [][_0xee2b[318]](_0x8e22x4[_0xee2b[1067]][_0xee2b[55]](_0x8e22x5));
  }
  return _0x8e22x3;
}, getAssignmentsForEvent:function(_0x8e22x3) {
  return this[_0xee2b[1084]](_0x8e22x3);
}, removeAssignmentsForEvent:function(_0x8e22x6) {
  var _0x8e22x3 = this;
  _0x8e22x3[_0xee2b[63]](_0x8e22x3[_0xee2b[1081]](_0x8e22x6));
}, getAssignmentsForResource:function(_0x8e22x3) {
  return this[_0xee2b[1085]](_0x8e22x3);
}, removeAssignmentsForResource:function(_0x8e22x6) {
  var _0x8e22x3 = this;
  _0x8e22x3[_0xee2b[63]](_0x8e22x3[_0xee2b[1082]](_0x8e22x6));
}, getResourcesForEvent:function(_0x8e22x5) {
  var _0x8e22x4 = this, _0x8e22x3;
  if (_0x8e22x4[_0xee2b[1069]]) {
    _0x8e22x3 = _0x8e22x4[_0xee2b[1069]][_0xee2b[55]](_0x8e22x5);
  } else {
    _0x8e22x3 = _0x8e22x4[_0xee2b[1084]](_0x8e22x5, function _0x8e22x2(_0x8e22x1) {
      return _0x8e22x1[_0xee2b[1053]]();
    }, function _0x8e22x6(_0x8e22x1) {
      return !!_0x8e22x1;
    });
  }
  return _0x8e22x3;
}, getEventsForResource:function(_0x8e22x2) {
  var _0x8e22x5 = this, _0x8e22x6 = this[_0xee2b[696]](), _0x8e22x3;
  _0x8e22x3 = _0x8e22x5[_0xee2b[1085]](_0x8e22x2, function _0x8e22x1(_0x8e22x9) {
    return _0x8e22x9[_0xee2b[1052]]();
  }, function _0x8e22x4(_0x8e22x9) {
    return !!_0x8e22x9 && (!_0x8e22x6[_0xee2b[1086]]() || _0x8e22x6[_0xee2b[1087]](_0x8e22x9));
  });
  return _0x8e22x3;
}, assignEventToResource:function(_0x8e22x4, _0x8e22x2, _0x8e22x5) {
  var _0x8e22x6 = this, _0x8e22x3 = [];
  _0x8e22x5 = _0x8e22x5 || Ext[_0xee2b[56]];
  var _0x8e22x1 = Ext[_0xee2b[307]](_0x8e22x2) ? _0x8e22x2 : [_0x8e22x2];
  Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x1, function(_0x8e22x9) {
    if (!_0x8e22x6[_0xee2b[1088]](_0x8e22x4, _0x8e22x9)) {
      var _0x8e22x7 = new _0x8e22x6[_0xee2b[327]]();
      _0x8e22x7 = _0x8e22x5(_0x8e22x7);
      _0x8e22x7[_0xee2b[1089]](_0x8e22x4 && _0x8e22x4[_0xee2b[988]] && _0x8e22x4[_0xee2b[32]]() || _0x8e22x4);
      _0x8e22x7[_0xee2b[1090]](_0x8e22x9 && _0x8e22x9[_0xee2b[988]] && _0x8e22x9[_0xee2b[32]]() || _0x8e22x9);
      _0x8e22x3[_0xee2b[11]](_0x8e22x7);
    }
  });
  _0x8e22x6[_0xee2b[255]](_0x8e22x3);
  return _0x8e22x3;
}, unassignEventFromResource:function(_0x8e22x6, _0x8e22x4) {
  var _0x8e22x3 = this, _0x8e22x5;
  if (!_0x8e22x4) {
    this[_0xee2b[1091]](_0x8e22x6);
  } else {
    if (_0x8e22x3[_0xee2b[1088]](_0x8e22x6, _0x8e22x4)) {
      _0x8e22x5 = _0x8e22x3[_0xee2b[1092]](_0x8e22x6, _0x8e22x4);
      _0x8e22x3[_0xee2b[63]](_0x8e22x5);
    }
  }
  return _0x8e22x5;
}, isEventAssignedToResource:function(_0x8e22x1, _0x8e22x9) {
  var _0x8e22x2 = this, _0x8e22x4 = _0x8e22x2[_0xee2b[1093]](_0x8e22x1), _0x8e22x6 = false, _0x8e22x5, _0x8e22x3;
  if (_0x8e22x9 && _0x8e22x9[_0xee2b[988]]) {
    _0x8e22x9 = _0x8e22x9[_0xee2b[32]]();
  }
  for (_0x8e22x5 = 0, _0x8e22x3 = _0x8e22x4[_0xee2b[4]]; !_0x8e22x6 && _0x8e22x5 < _0x8e22x3; _0x8e22x5++) {
    _0x8e22x6 = _0x8e22x4[_0x8e22x5];
    _0x8e22x6 = _0x8e22x6[_0xee2b[32]]() == _0x8e22x9;
  }
  return _0x8e22x6;
}, getAssignmentForEventAndResource:function(_0x8e22x6, _0x8e22x4) {
  var _0x8e22x3 = this;
  if (_0x8e22x6 && _0x8e22x6[_0xee2b[988]]) {
    _0x8e22x6 = _0x8e22x6[_0xee2b[32]]();
  }
  if (_0x8e22x4 && _0x8e22x4[_0xee2b[988]]) {
    _0x8e22x4 = _0x8e22x4[_0xee2b[32]]();
  }
  return _0x8e22x3[_0xee2b[1094]][_0xee2b[55]](_0x8e22x3[_0xee2b[327]][_0xee2b[1055]](_0x8e22x6, _0x8e22x4));
}, commitChanges:function() {
  this[_0xee2b[453]](true);
  this[_0xee2b[9]](arguments);
  this[_0xee2b[455]]();
}});
Ext[_0xee2b[6]](_0xee2b[1095], {requires:[_0xee2b[1096]], extend:_0xee2b[1019], mixins:[_0xee2b[665]], idProperty:_0xee2b[1032], isCalendarDayModel:true, customizableFields:[{name:_0xee2b[703], type:_0xee2b[1097], dateFormat:_0xee2b[1098], persist:true, convert:function(_0x8e22x6, _0x8e22x3) {
  if (!_0x8e22x6) {
    return;
  }
  var _0x8e22x4 = Ext[_0xee2b[22]][_0xee2b[1100]][_0xee2b[1099]][_0xee2b[1020]][_0xee2b[293]](this, _0x8e22x6);
  if (_0x8e22x4) {
    Ext[_0xee2b[703]][_0xee2b[1101]](_0x8e22x4);
  }
  return _0x8e22x4;
}}, {name:_0xee2b[1102], type:_0xee2b[1103]}, {name:_0xee2b[1104], type:_0xee2b[1097], dateFormat:_0xee2b[1098]}, {name:_0xee2b[1105], type:_0xee2b[1097], dateFormat:_0xee2b[1098]}, {name:_0xee2b[1106], defaultValue:_0xee2b[708]}, {name:_0xee2b[1107], type:_0xee2b[1108], defaultValue:false}, {name:_0xee2b[1109], defaultValue:_0xee2b[1110]}, _0xee2b[603], {name:_0xee2b[1111], persist:true, convert:function(_0x8e22x6, _0x8e22x3) {
  if (_0x8e22x6) {
    return typeof _0x8e22x6 === _0xee2b[308] ? [_0x8e22x6] : _0x8e22x6;
  } else {
    return [];
  }
}}], availabilityCache:null, weekdayField:_0xee2b[1102], overrideStartDateField:_0xee2b[1104], overrideEndDateField:_0xee2b[1105], typeField:_0xee2b[1106], dateField:_0xee2b[703], isWorkingDayField:_0xee2b[1107], clsField:_0xee2b[1109], nameField:_0xee2b[603], availabilityField:_0xee2b[1111], setDate:function(_0x8e22x3) {
  if (_0x8e22x3) {
    _0x8e22x3 = Ext[_0xee2b[703]][_0xee2b[1101]](_0x8e22x3, true);
  }
  this[_0xee2b[50]](this[_0xee2b[1112]], _0x8e22x3);
}, clearDate:function() {
  this[_0xee2b[50]](this[_0xee2b[1112]], null);
}, getAvailability:function(_0x8e22x6) {
  var _0x8e22x4 = this;
  if (_0x8e22x6) {
    return this[_0xee2b[55]](this[_0xee2b[1113]]);
  }
  if (this[_0xee2b[1114]]) {
    return this[_0xee2b[1114]];
  }
  var _0x8e22x3 = Ext[_0xee2b[26]][_0xee2b[41]](this[_0xee2b[55]](this[_0xee2b[1113]]), function(_0x8e22x5) {
    return typeof _0x8e22x5 === _0xee2b[308] ? _0x8e22x4[_0xee2b[1115]](_0x8e22x5) : _0x8e22x5;
  });
  this[_0xee2b[1116]](_0x8e22x3);
  return this[_0xee2b[1114]] = _0x8e22x3;
}, setAvailability:function(_0x8e22x3) {
  this[_0xee2b[1114]] = null;
  this[_0xee2b[50]](this[_0xee2b[1113]], this[_0xee2b[1117]](_0x8e22x3));
  this[_0xee2b[1118]]();
}, verifyAvailability:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  _0x8e22x3[_0xee2b[1120]](function(_0x8e22x5, _0x8e22x4) {
    return _0x8e22x5[_0xee2b[1119]] - _0x8e22x4[_0xee2b[1119]];
  });
  Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x3, function(_0x8e22x4, _0x8e22x5) {
    if (_0x8e22x4[_0xee2b[1119]] > _0x8e22x4[_0xee2b[1121]]) {
      throw new Error(Ext[_0xee2b[1041]][_0xee2b[880]](_0x8e22x6.L(_0xee2b[1122]), Ext[_0xee2b[703]][_0xee2b[880]](_0x8e22x4[_0xee2b[1119]], _0xee2b[1123]), Ext[_0xee2b[703]][_0xee2b[880]](_0x8e22x4[_0xee2b[1121]], _0xee2b[1123])));
    }
    if (_0x8e22x5 > 0 && _0x8e22x3[_0x8e22x5 - 1][_0xee2b[1121]] > _0x8e22x4[_0xee2b[1119]]) {
      throw new Error(Ext[_0xee2b[1041]][_0xee2b[880]](_0x8e22x6.L(_0xee2b[1124]), _0x8e22x6[_0xee2b[1125]](_0x8e22x3[_0x8e22x5 - 1]), _0x8e22x6[_0xee2b[1125]](_0x8e22x4)));
    }
  });
}, prependZero:function(_0x8e22x3) {
  return _0x8e22x3 < 10 ? _0xee2b[1126] + _0x8e22x3 : _0x8e22x3;
}, stringifyInterval:function(_0x8e22x6) {
  var _0x8e22x4 = _0x8e22x6[_0xee2b[1119]];
  var _0x8e22x3 = _0x8e22x6[_0xee2b[1121]];
  return this[_0xee2b[1128]](_0x8e22x4[_0xee2b[1127]]()) + _0xee2b[1129] + this[_0xee2b[1128]](_0x8e22x4[_0xee2b[1130]]()) + _0xee2b[1131] + (_0x8e22x3[_0xee2b[479]]() == 1 ? 24 : this[_0xee2b[1128]](_0x8e22x3[_0xee2b[1127]]())) + _0xee2b[1129] + this[_0xee2b[1128]](_0x8e22x3[_0xee2b[1130]]());
}, stringifyIntervals:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  return Ext[_0xee2b[26]][_0xee2b[41]](_0x8e22x3, function(_0x8e22x4) {
    if (typeof _0x8e22x4 === _0xee2b[308]) {
      return _0x8e22x4;
    }
    return _0x8e22x6[_0xee2b[1125]](_0x8e22x4);
  });
}, parseInterval:function(_0x8e22x6) {
  var _0x8e22x3 = /(\d\d):(\d\d)-(\d\d):(\d\d)/[_0xee2b[676]](_0x8e22x6);
  if (!_0x8e22x3) {
    throw new Error(Ext[_0xee2b[1041]][_0xee2b[880]](this.L(_0xee2b[1132]), _0x8e22x6));
  }
  return {startTime:new Date(2016, 11, 0, _0x8e22x3[1], _0x8e22x3[2]), endTime:new Date(2016, 11, 0, _0x8e22x3[3], _0x8e22x3[4])};
}, getTotalHours:function() {
  return this[_0xee2b[1133]]() / 1000 / 60 / 60;
}, getTotalMS:function() {
  var _0x8e22x3 = 0;
  Ext[_0xee2b[26]][_0xee2b[25]](this[_0xee2b[1118]](), function(_0x8e22x6) {
    _0x8e22x3 += _0x8e22x6[_0xee2b[1121]] - _0x8e22x6[_0xee2b[1119]];
  });
  return _0x8e22x3;
}, addAvailabilityInterval:function(_0x8e22x2, _0x8e22x4) {
  var _0x8e22x6;
  function _0x8e22x3(_0x8e22x1) {
    return new Date(2016, 11, _0x8e22x1[_0xee2b[479]]() == 1 ? 1 : 0, _0x8e22x1[_0xee2b[1127]](), _0x8e22x1[_0xee2b[1130]]());
  }
  if (_0x8e22x2 instanceof Date) {
    _0x8e22x6 = {startTime:_0x8e22x3(_0x8e22x2), endTime:_0x8e22x3(_0x8e22x4)};
  } else {
    _0x8e22x6 = this[_0xee2b[1115]](_0x8e22x2 + (_0x8e22x4 ? _0xee2b[1131] + _0x8e22x4 : _0xee2b[27]));
  }
  var _0x8e22x5 = this[_0xee2b[1118]]()[_0xee2b[318]](_0x8e22x6);
  this[_0xee2b[1116]](_0x8e22x5);
  this[_0xee2b[1134]](_0x8e22x5);
}, removeAvailabilityInterval:function(_0x8e22x3) {
  var _0x8e22x6 = this[_0xee2b[1118]]();
  _0x8e22x6[_0xee2b[319]](_0x8e22x3, 1);
  this[_0xee2b[1134]](_0x8e22x6);
}, getAvailabilityIntervalsFor:function(_0x8e22x4) {
  _0x8e22x4 = typeof _0x8e22x4 == _0xee2b[1135] ? new Date(_0x8e22x4) : _0x8e22x4;
  var _0x8e22x6 = _0x8e22x4[_0xee2b[1136]]();
  var _0x8e22x5 = _0x8e22x4[_0xee2b[480]]();
  var _0x8e22x3 = _0x8e22x4[_0xee2b[479]]();
  return Ext[_0xee2b[26]][_0xee2b[41]](this[_0xee2b[1118]](), function(_0x8e22x2) {
    var _0x8e22x1 = _0x8e22x2[_0xee2b[1121]][_0xee2b[479]]();
    return {startDate:new Date(_0x8e22x6, _0x8e22x5, _0x8e22x3, _0x8e22x2[_0xee2b[1119]][_0xee2b[1127]](), _0x8e22x2[_0xee2b[1119]][_0xee2b[1130]]()), endDate:new Date(_0x8e22x6, _0x8e22x5, _0x8e22x3 + (_0x8e22x1 == 1 ? 1 : 0), _0x8e22x2[_0xee2b[1121]][_0xee2b[1127]](), _0x8e22x2[_0xee2b[1121]][_0xee2b[1130]]())};
  });
}, getAvailabilityStartFor:function(_0x8e22x6) {
  var _0x8e22x3 = this[_0xee2b[1137]](_0x8e22x6);
  if (!_0x8e22x3[_0xee2b[4]]) {
    return null;
  }
  return _0x8e22x3[0][_0xee2b[1138]];
}, getAvailabilityEndFor:function(_0x8e22x6) {
  var _0x8e22x3 = this[_0xee2b[1137]](_0x8e22x6);
  if (!_0x8e22x3[_0xee2b[4]]) {
    return null;
  }
  return _0x8e22x3[_0x8e22x3[_0xee2b[4]] - 1][_0xee2b[1139]];
}});
Ext[_0xee2b[6]](_0xee2b[1140], {requires:_0xee2b[1141], mixins:[_0xee2b[665]], singleton:true, stripEscapeRe:/(\\.)/g, hourInfoRe:/([gGhHisucUOPZ]|MS)/, unitHash:null, unitsByName:{}, MIN_VALUE:new Date(-8.64E15), MAX_VALUE:new Date(8.64E15), constructor:function() {
  var _0x8e22x4 = this, _0x8e22x3 = Ext[_0xee2b[703]];
  var _0x8e22x6 = _0x8e22x4[_0xee2b[1142]] = {MILLI:_0x8e22x3[_0xee2b[1143]], SECOND:_0x8e22x3[_0xee2b[1144]], MINUTE:_0x8e22x3[_0xee2b[711]], HOUR:_0x8e22x3[_0xee2b[710]], DAY:_0x8e22x3[_0xee2b[708]], WEEK:_0xee2b[523], MONTH:_0x8e22x3[_0xee2b[1145]], QUARTER:_0xee2b[518], YEAR:_0x8e22x3[_0xee2b[1146]]};
  Ext[_0xee2b[8]](_0x8e22x4, _0x8e22x6);
  _0x8e22x4[_0xee2b[1147]] = [_0x8e22x4[_0xee2b[1143]], _0x8e22x4[_0xee2b[1144]], _0x8e22x4[_0xee2b[711]], _0x8e22x4[_0xee2b[710]], _0x8e22x4[_0xee2b[708]], _0x8e22x4[_0xee2b[1148]], _0x8e22x4[_0xee2b[1145]], _0x8e22x4[_0xee2b[1149]], _0x8e22x4[_0xee2b[1146]]];
}, onLocalized:function() {
  this[_0xee2b[1151]](this.L(_0xee2b[1150]));
}, setUnitNames:function(_0x8e22x2) {
  var _0x8e22x5 = this[_0xee2b[1152]] = {};
  this[_0xee2b[504]][_0xee2b[1150]] = _0x8e22x2;
  this[_0xee2b[1153]] = Ext[_0xee2b[8]]({}, _0x8e22x2);
  var _0x8e22x6 = this[_0xee2b[1142]];
  for (var _0x8e22x3 in _0x8e22x6) {
    if (_0x8e22x6[_0xee2b[53]](_0x8e22x3)) {
      var _0x8e22x4 = _0x8e22x6[_0x8e22x3];
      this[_0xee2b[1153]][_0x8e22x4] = this[_0xee2b[1153]][_0x8e22x3];
      _0x8e22x5[_0x8e22x3] = _0x8e22x4;
      _0x8e22x5[_0x8e22x4] = _0x8e22x4;
    }
  }
}, betweenLesser:function(_0x8e22x6, _0x8e22x4, _0x8e22x3) {
  return _0x8e22x4 <= _0x8e22x6 && _0x8e22x6 < _0x8e22x3;
}, betweenLesserEqual:function(_0x8e22x6, _0x8e22x4, _0x8e22x3) {
  return _0x8e22x4 <= _0x8e22x6 && _0x8e22x6 <= _0x8e22x3;
}, constrain:function(_0x8e22x6, _0x8e22x4, _0x8e22x3) {
  return this[_0xee2b[203]](this[_0xee2b[715]](_0x8e22x6, _0x8e22x4), _0x8e22x3);
}, compareUnits:function(_0x8e22x4, _0x8e22x6) {
  var _0x8e22x3 = Ext[_0xee2b[26]][_0xee2b[147]](this[_0xee2b[1147]], _0x8e22x4), _0x8e22x5 = Ext[_0xee2b[26]][_0xee2b[147]](this[_0xee2b[1147]], _0x8e22x6);
  return _0x8e22x3 > _0x8e22x5 ? 1 : _0x8e22x3 < _0x8e22x5 ? -1 : 0;
}, isUnitGreater:function(_0x8e22x6, _0x8e22x3) {
  return this[_0xee2b[1154]](_0x8e22x6, _0x8e22x3) > 0;
}, copyTimeValues:function(_0x8e22x6, _0x8e22x3) {
  _0x8e22x6[_0xee2b[1155]](_0x8e22x3[_0xee2b[1127]]());
  _0x8e22x6[_0xee2b[1156]](_0x8e22x3[_0xee2b[1130]]());
  _0x8e22x6[_0xee2b[1158]](_0x8e22x3[_0xee2b[1157]]());
  _0x8e22x6[_0xee2b[1160]](_0x8e22x3[_0xee2b[1159]]());
  return _0x8e22x6;
}, add:function(_0x8e22x6, _0x8e22x4, _0x8e22x2) {
  var _0x8e22x1 = Ext[_0xee2b[703]][_0xee2b[1161]](_0x8e22x6);
  if (!_0x8e22x4 || _0x8e22x2 === 0) {
    return _0x8e22x1;
  }
  switch(_0x8e22x4[_0xee2b[819]]()) {
    case this[_0xee2b[1143]]:
      _0x8e22x1 = new Date(_0x8e22x6[_0xee2b[1162]]() + _0x8e22x2);
      break;
    case this[_0xee2b[1144]]:
      _0x8e22x1 = new Date(_0x8e22x6[_0xee2b[1162]]() + _0x8e22x2 * 1000);
      break;
    case this[_0xee2b[711]]:
      _0x8e22x1 = new Date(_0x8e22x6[_0xee2b[1162]]() + _0x8e22x2 * 60000);
      break;
    case this[_0xee2b[710]]:
      _0x8e22x1 = new Date(_0x8e22x6[_0xee2b[1162]]() + _0x8e22x2 * 3600000);
      break;
    case this[_0xee2b[708]]:
      _0x8e22x1[_0xee2b[1163]](_0x8e22x6[_0xee2b[479]]() + _0x8e22x2);
      if (_0x8e22x1[_0xee2b[1127]]() === 23 && _0x8e22x6[_0xee2b[1127]]() === 0) {
        _0x8e22x1 = Ext[_0xee2b[703]][_0xee2b[255]](_0x8e22x1, Ext[_0xee2b[703]].HOUR, 1);
      }
      break;
    case this[_0xee2b[1148]]:
      _0x8e22x1[_0xee2b[1163]](_0x8e22x6[_0xee2b[479]]() + _0x8e22x2 * 7);
      break;
    case this[_0xee2b[1145]]:
      var _0x8e22x3 = _0x8e22x6[_0xee2b[479]]();
      if (_0x8e22x3 > 28) {
        _0x8e22x3 = Math[_0xee2b[203]](_0x8e22x3, Ext[_0xee2b[703]][_0xee2b[1165]](this[_0xee2b[255]](Ext[_0xee2b[703]][_0xee2b[1164]](_0x8e22x6), this.MONTH, _0x8e22x2))[_0xee2b[479]]());
      }
      _0x8e22x1[_0xee2b[1163]](_0x8e22x3);
      _0x8e22x1[_0xee2b[1166]](_0x8e22x1[_0xee2b[480]]() + _0x8e22x2);
      break;
    case this[_0xee2b[1149]]:
      _0x8e22x1 = this[_0xee2b[255]](_0x8e22x6, this.MONTH, _0x8e22x2 * 3);
      break;
    case this[_0xee2b[1146]]:
      _0x8e22x1[_0xee2b[1167]](_0x8e22x6[_0xee2b[1136]]() + _0x8e22x2);
      break;
  }
  return _0x8e22x1;
}, getUnitDurationInMs:function(_0x8e22x3) {
  return this[_0xee2b[255]](new Date(1, 0, 1), _0x8e22x3, 1) - new Date(1, 0, 1);
}, getMeasuringUnit:function(_0x8e22x3) {
  if (_0x8e22x3 === this[_0xee2b[1148]]) {
    return this[_0xee2b[708]];
  }
  return _0x8e22x3;
}, getDurationInUnit:function(_0x8e22x2, _0x8e22x3, _0x8e22x4, _0x8e22x5) {
  var _0x8e22x6;
  switch(_0x8e22x4) {
    case this[_0xee2b[1146]]:
      _0x8e22x6 = this[_0xee2b[1168]](_0x8e22x2, _0x8e22x3);
      break;
    case this[_0xee2b[1149]]:
      _0x8e22x6 = this[_0xee2b[1169]](_0x8e22x2, _0x8e22x3) / 3;
      break;
    case this[_0xee2b[1145]]:
      _0x8e22x6 = this[_0xee2b[1169]](_0x8e22x2, _0x8e22x3);
      break;
    case this[_0xee2b[1148]]:
      _0x8e22x6 = this[_0xee2b[1170]](_0x8e22x2, _0x8e22x3) / 7;
      break;
    case this[_0xee2b[708]]:
      _0x8e22x6 = this[_0xee2b[1170]](_0x8e22x2, _0x8e22x3);
      break;
    case this[_0xee2b[710]]:
      _0x8e22x6 = this[_0xee2b[1171]](_0x8e22x2, _0x8e22x3);
      break;
    case this[_0xee2b[711]]:
      _0x8e22x6 = this[_0xee2b[702]](_0x8e22x2, _0x8e22x3);
      break;
    case this[_0xee2b[1144]]:
      _0x8e22x6 = this[_0xee2b[1172]](_0x8e22x2, _0x8e22x3);
      break;
    case this[_0xee2b[1143]]:
      _0x8e22x6 = this[_0xee2b[1173]](_0x8e22x2, _0x8e22x3);
      break;
  }
  return _0x8e22x5 ? _0x8e22x6 : Math[_0xee2b[704]](_0x8e22x6);
}, getUnitToBaseUnitRatio:function(_0x8e22x6, _0x8e22x3) {
  if (_0x8e22x6 === _0x8e22x3) {
    return 1;
  }
  switch(_0x8e22x6) {
    case this[_0xee2b[1146]]:
      switch(_0x8e22x3) {
        case this[_0xee2b[1149]]:
          return 1 / 4;
        case this[_0xee2b[1145]]:
          return 1 / 12;
      }break;
    case this[_0xee2b[1149]]:
      switch(_0x8e22x3) {
        case this[_0xee2b[1146]]:
          return 4;
        case this[_0xee2b[1145]]:
          return 1 / 3;
      }break;
    case this[_0xee2b[1145]]:
      switch(_0x8e22x3) {
        case this[_0xee2b[1146]]:
          return 12;
        case this[_0xee2b[1149]]:
          return 3;
      }break;
    case this[_0xee2b[1148]]:
      switch(_0x8e22x3) {
        case this[_0xee2b[708]]:
          return 1 / 7;
        case this[_0xee2b[710]]:
          return 1 / 168;
      }break;
    case this[_0xee2b[708]]:
      switch(_0x8e22x3) {
        case this[_0xee2b[1148]]:
          return 7;
        case this[_0xee2b[710]]:
          return 1 / 24;
        case this[_0xee2b[711]]:
          return 1 / 1440;
      }break;
    case this[_0xee2b[710]]:
      switch(_0x8e22x3) {
        case this[_0xee2b[708]]:
          return 24;
        case this[_0xee2b[711]]:
          return 1 / 60;
      }break;
    case this[_0xee2b[711]]:
      switch(_0x8e22x3) {
        case this[_0xee2b[710]]:
          return 60;
        case this[_0xee2b[1144]]:
          return 1 / 60;
        case this[_0xee2b[1143]]:
          return 1 / 60000;
      }break;
    case this[_0xee2b[1144]]:
      switch(_0x8e22x3) {
        case this[_0xee2b[1143]]:
          return 1 / 1000;
      }break;
    case this[_0xee2b[1143]]:
      switch(_0x8e22x3) {
        case this[_0xee2b[1144]]:
          return 1000;
      }break;
  }
  return -1;
}, isUnitDivisibleIntoSubunit:function(_0x8e22x6, _0x8e22x3) {
  var _0x8e22x4 = _0x8e22x6 === this[_0xee2b[1145]] && _0x8e22x3 === this[_0xee2b[1148]];
  return !_0x8e22x4;
}, getDurationInMilliseconds:function(_0x8e22x6, _0x8e22x3) {
  return _0x8e22x3 - _0x8e22x6;
}, getDurationInSeconds:function(_0x8e22x6, _0x8e22x3) {
  return (_0x8e22x3 - _0x8e22x6) / 1000;
}, getDurationInMinutes:function(_0x8e22x6, _0x8e22x3) {
  return (_0x8e22x3 - _0x8e22x6) / 60000;
}, getDurationInHours:function(_0x8e22x6, _0x8e22x3) {
  return (_0x8e22x3 - _0x8e22x6) / 3600000;
}, getDurationInDays:function(_0x8e22x4, _0x8e22x6) {
  var _0x8e22x3 = _0x8e22x4[_0xee2b[1174]]() - _0x8e22x6[_0xee2b[1174]]();
  return (_0x8e22x6 - _0x8e22x4 + _0x8e22x3 * 60 * 1000) / 86400000;
}, getDurationInMonths:function(_0x8e22x6, _0x8e22x3) {
  return (_0x8e22x3[_0xee2b[1136]]() - _0x8e22x6[_0xee2b[1136]]()) * 12 + (_0x8e22x3[_0xee2b[480]]() - _0x8e22x6[_0xee2b[480]]());
}, getDurationInYears:function(_0x8e22x6, _0x8e22x3) {
  return this[_0xee2b[1169]](_0x8e22x6, _0x8e22x3) / 12;
}, min:function(_0x8e22x6, _0x8e22x3) {
  return (_0x8e22x6 && _0x8e22x6.valueOf() || _0x8e22x6) < (_0x8e22x3 && _0x8e22x3.valueOf() || _0x8e22x3) ? _0x8e22x6 : _0x8e22x3;
}, max:function(_0x8e22x6, _0x8e22x3) {
  return (_0x8e22x6 && _0x8e22x6.valueOf() || _0x8e22x6) > (_0x8e22x3 && _0x8e22x3.valueOf() || _0x8e22x3) ? _0x8e22x6 : _0x8e22x3;
}, intersectSpans:function(_0x8e22x4, _0x8e22x5, _0x8e22x6, _0x8e22x3) {
  return this[_0xee2b[1175]](_0x8e22x4, _0x8e22x6, _0x8e22x3) || this[_0xee2b[1175]](_0x8e22x6, _0x8e22x4, _0x8e22x5);
}, getNameOfUnit:function(_0x8e22x3) {
  _0x8e22x3 = this[_0xee2b[1176]](_0x8e22x3);
  switch(_0x8e22x3[_0xee2b[819]]()) {
    case this[_0xee2b[1146]]:
      return _0xee2b[1146];
    case this[_0xee2b[1149]]:
      return _0xee2b[1149];
    case this[_0xee2b[1145]]:
      return _0xee2b[1145];
    case this[_0xee2b[1148]]:
      return _0xee2b[1148];
    case this[_0xee2b[708]]:
      return _0xee2b[708];
    case this[_0xee2b[710]]:
      return _0xee2b[710];
    case this[_0xee2b[711]]:
      return _0xee2b[711];
    case this[_0xee2b[1144]]:
      return _0xee2b[1144];
    case this[_0xee2b[1143]]:
      return _0xee2b[1143];
  }
  throw _0xee2b[1177];
}, getReadableNameOfUnit:function(_0x8e22x6, _0x8e22x3) {
  if (!this[_0xee2b[671]]()) {
    this[_0xee2b[672]]();
  }
  return this[_0xee2b[1153]][_0x8e22x6][_0x8e22x3 ? _0xee2b[1178] : _0xee2b[1179]];
}, getShortNameOfUnit:function(_0x8e22x3) {
  if (!this[_0xee2b[671]]()) {
    this[_0xee2b[672]]();
  }
  return this[_0xee2b[1153]][_0x8e22x3][_0xee2b[1180]];
}, getUnitByName:function(_0x8e22x3) {
  if (!this[_0xee2b[671]]()) {
    this[_0xee2b[672]]();
  }
  if (!this[_0xee2b[1152]][_0x8e22x3]) {
    Ext[_0xee2b[1182]][_0xee2b[3]](_0xee2b[1181] + _0x8e22x3);
  }
  return this[_0xee2b[1152]][_0x8e22x3];
}, getNext:function(_0x8e22x4, _0x8e22x9, _0x8e22x3, _0x8e22x1) {
  var _0x8e22x2 = Ext[_0xee2b[703]][_0xee2b[1161]](_0x8e22x4);
  _0x8e22x1 = arguments[_0xee2b[4]] < 4 ? 1 : _0x8e22x1;
  _0x8e22x3 = _0x8e22x3 == null ? 1 : _0x8e22x3;
  switch(_0x8e22x9) {
    case this[_0xee2b[1143]]:
      _0x8e22x2 = this[_0xee2b[255]](_0x8e22x4, _0x8e22x9, _0x8e22x3);
      break;
    case this[_0xee2b[1144]]:
      _0x8e22x2 = this[_0xee2b[255]](_0x8e22x4, _0x8e22x9, _0x8e22x3);
      if (_0x8e22x2[_0xee2b[1159]]() > 0) {
        _0x8e22x2[_0xee2b[1160]](0);
      }
      break;
    case this[_0xee2b[711]]:
      _0x8e22x2 = this[_0xee2b[255]](_0x8e22x4, _0x8e22x9, _0x8e22x3);
      if (_0x8e22x2[_0xee2b[1157]]() > 0) {
        _0x8e22x2[_0xee2b[1158]](0);
      }
      if (_0x8e22x2[_0xee2b[1159]]() > 0) {
        _0x8e22x2[_0xee2b[1160]](0);
      }
      break;
    case this[_0xee2b[710]]:
      _0x8e22x2 = this[_0xee2b[255]](_0x8e22x4, _0x8e22x9, _0x8e22x3);
      if (_0x8e22x2[_0xee2b[1130]]() > 0) {
        _0x8e22x2[_0xee2b[1156]](0);
      }
      if (_0x8e22x2[_0xee2b[1157]]() > 0) {
        _0x8e22x2[_0xee2b[1158]](0);
      }
      if (_0x8e22x2[_0xee2b[1159]]() > 0) {
        _0x8e22x2[_0xee2b[1160]](0);
      }
      break;
    case this[_0xee2b[708]]:
      var _0x8e22x5 = _0x8e22x4[_0xee2b[1127]]() === 23 && this[_0xee2b[255]](_0x8e22x2, this.HOUR, 1)[_0xee2b[1127]]() === 1;
      if (_0x8e22x5) {
        _0x8e22x2 = this[_0xee2b[255]](_0x8e22x2, this.DAY, 2);
        this[_0xee2b[1101]](_0x8e22x2);
        return _0x8e22x2;
      }
      this[_0xee2b[1101]](_0x8e22x2);
      _0x8e22x2 = this[_0xee2b[255]](_0x8e22x2, this.DAY, _0x8e22x3);
      if (_0x8e22x2[_0xee2b[1127]]() === 1) {
        this[_0xee2b[1101]](_0x8e22x2);
      }
      break;
    case this[_0xee2b[1148]]:
      this[_0xee2b[1101]](_0x8e22x2);
      var _0x8e22x6 = _0x8e22x2[_0xee2b[484]]();
      _0x8e22x2 = this[_0xee2b[255]](_0x8e22x2, this.DAY, _0x8e22x1 - _0x8e22x6 + 7 * (_0x8e22x3 - (_0x8e22x1 <= _0x8e22x6 ? 0 : 1)));
      if (_0x8e22x2[_0xee2b[484]]() !== _0x8e22x1) {
        _0x8e22x2 = this[_0xee2b[255]](_0x8e22x2, this.HOUR, 1);
      } else {
        this[_0xee2b[1101]](_0x8e22x2);
      }
      break;
    case this[_0xee2b[1145]]:
      _0x8e22x2 = this[_0xee2b[255]](_0x8e22x2, this.MONTH, _0x8e22x3);
      _0x8e22x2[_0xee2b[1163]](1);
      this[_0xee2b[1101]](_0x8e22x2);
      break;
    case this[_0xee2b[1149]]:
      _0x8e22x2 = this[_0xee2b[255]](_0x8e22x2, this.MONTH, (_0x8e22x3 - 1) * 3 + (3 - _0x8e22x2[_0xee2b[480]]() % 3));
      this[_0xee2b[1101]](_0x8e22x2);
      _0x8e22x2[_0xee2b[1163]](1);
      break;
    case this[_0xee2b[1146]]:
      _0x8e22x2 = new Date(_0x8e22x2[_0xee2b[1136]]() + _0x8e22x3, 0, 1);
      break;
    default:
      throw new Error(_0xee2b[1183] + _0x8e22x9);
  }
  return _0x8e22x2;
}, getNumberOfMsFromTheStartOfDay:function(_0x8e22x3) {
  return _0x8e22x3 - this[_0xee2b[1101]](_0x8e22x3, true) || 86400000;
}, getNumberOfMsTillTheEndOfDay:function(_0x8e22x3) {
  return this[_0xee2b[1184]](_0x8e22x3, true) - _0x8e22x3;
}, getStartOfNextDay:function(_0x8e22x6, _0x8e22x1, _0x8e22x2) {
  var _0x8e22x5 = this[_0xee2b[255]](_0x8e22x2 ? _0x8e22x6 : this[_0xee2b[1101]](_0x8e22x6, _0x8e22x1), this.DAY, 1);
  if (_0x8e22x5[_0xee2b[479]]() == _0x8e22x6[_0xee2b[479]]()) {
    var _0x8e22x4 = this[_0xee2b[255]](this[_0xee2b[1101]](_0x8e22x6, _0x8e22x1), this.DAY, 2)[_0xee2b[1174]]();
    var _0x8e22x3 = _0x8e22x6[_0xee2b[1174]]();
    _0x8e22x5 = this[_0xee2b[255]](_0x8e22x5, this.MINUTE, _0x8e22x3 - _0x8e22x4);
  }
  return _0x8e22x5;
}, getEndOfPreviousDay:function(_0x8e22x6, _0x8e22x4) {
  var _0x8e22x3 = _0x8e22x4 ? _0x8e22x6 : this[_0xee2b[1101]](_0x8e22x6, true);
  if (_0x8e22x3 - _0x8e22x6) {
    return _0x8e22x3;
  } else {
    return this[_0xee2b[255]](_0x8e22x3, this.DAY, -1);
  }
}, timeSpanContains:function(_0x8e22x4, _0x8e22x6, _0x8e22x5, _0x8e22x3) {
  return _0x8e22x5 - _0x8e22x4 >= 0 && _0x8e22x6 - _0x8e22x3 >= 0;
}, compareWithPrecision:function(_0x8e22x2, _0x8e22x4, _0x8e22x1) {
  var _0x8e22x5 = Sch[_0xee2b[49]][_0xee2b[703]], _0x8e22x6 = Ext[_0xee2b[703]], _0x8e22x3;
  switch(_0x8e22x1) {
    case _0x8e22x5[_0xee2b[708]]:
      _0x8e22x2 = Number(_0x8e22x6[_0xee2b[880]](_0x8e22x2, _0xee2b[1185]));
      _0x8e22x4 = Number(_0x8e22x6[_0xee2b[880]](_0x8e22x4, _0xee2b[1185]));
      break;
    case _0x8e22x5[_0xee2b[1148]]:
      _0x8e22x2 = Number(_0x8e22x6[_0xee2b[880]](_0x8e22x2, _0xee2b[1186]));
      _0x8e22x4 = Number(_0x8e22x6[_0xee2b[880]](_0x8e22x4, _0xee2b[1186]));
      break;
    case _0x8e22x5[_0xee2b[1145]]:
      _0x8e22x2 = Number(_0x8e22x6[_0xee2b[880]](_0x8e22x2, _0xee2b[1187]));
      _0x8e22x4 = Number(_0x8e22x6[_0xee2b[880]](_0x8e22x4, _0xee2b[1187]));
      break;
    case _0x8e22x5[_0xee2b[1149]]:
      _0x8e22x2 = _0x8e22x2[_0xee2b[1136]]() * 4 + Math[_0xee2b[424]](_0x8e22x2[_0xee2b[480]]() / 3);
      _0x8e22x4 = _0x8e22x4[_0xee2b[1136]]() * 4 + Math[_0xee2b[424]](_0x8e22x4[_0xee2b[480]]() / 3);
      break;
    case _0x8e22x5[_0xee2b[1146]]:
      _0x8e22x2 = _0x8e22x2[_0xee2b[1136]]();
      _0x8e22x4 = _0x8e22x4[_0xee2b[1136]]();
      break;
    default:
    case _0x8e22x5[_0xee2b[1143]]:
    case _0x8e22x5[_0xee2b[1144]]:
    case _0x8e22x5[_0xee2b[711]]:
    case _0x8e22x5[_0xee2b[710]]:
      _0x8e22x1 = _0x8e22x1 && this[_0xee2b[1188]](_0x8e22x1) || 1;
      _0x8e22x2 = Math[_0xee2b[424]](_0x8e22x2.valueOf() / _0x8e22x1);
      _0x8e22x4 = Math[_0xee2b[424]](_0x8e22x4.valueOf() / _0x8e22x1);
      break;
  }
  _0x8e22x2 < _0x8e22x4 && (_0x8e22x3 = -1) || _0x8e22x2 > _0x8e22x4 && (_0x8e22x3 = +1) || (_0x8e22x3 = 0);
  return _0x8e22x3;
}, getValueInUnits:function(_0x8e22x3, _0x8e22x6) {
  switch(_0x8e22x6) {
    case this[_0xee2b[1146]]:
      return _0x8e22x3[_0xee2b[1136]]();
    case this[_0xee2b[1149]]:
      return Math[_0xee2b[424]](_0x8e22x3[_0xee2b[480]]() / 3) + 1;
    case this[_0xee2b[1145]]:
      return _0x8e22x3[_0xee2b[480]]();
    case this[_0xee2b[1148]]:
      return Ext[_0xee2b[703]][_0xee2b[1189]](_0x8e22x3);
    case this[_0xee2b[708]]:
      return _0x8e22x3[_0xee2b[479]]();
    case this[_0xee2b[710]]:
      return _0x8e22x3[_0xee2b[1127]]();
    case this[_0xee2b[711]]:
      return _0x8e22x3[_0xee2b[1130]]();
    case this[_0xee2b[1144]]:
      return _0x8e22x3[_0xee2b[1157]]();
  }
}, setValueInUnits:function(_0x8e22x6, _0x8e22x4, _0x8e22x2) {
  var _0x8e22x3 = Ext[_0xee2b[703]][_0xee2b[1161]](_0x8e22x6), _0x8e22x5;
  switch(_0x8e22x4) {
    case this[_0xee2b[1146]]:
      _0x8e22x5 = _0xee2b[1167];
      break;
    case this[_0xee2b[1145]]:
      _0x8e22x5 = _0xee2b[1166];
      break;
    case this[_0xee2b[708]]:
      _0x8e22x5 = _0xee2b[1163];
      break;
    case this[_0xee2b[710]]:
      _0x8e22x5 = _0xee2b[1155];
      break;
    case this[_0xee2b[711]]:
      _0x8e22x5 = _0xee2b[1156];
      break;
    case this[_0xee2b[1144]]:
      _0x8e22x5 = _0xee2b[1158];
      break;
    case this[_0xee2b[1143]]:
      _0x8e22x5 = _0xee2b[1160];
      break;
  }
  _0x8e22x3[_0x8e22x5](_0x8e22x2);
  return _0x8e22x3;
}, getSubUnit:function(_0x8e22x3) {
  switch(_0x8e22x3) {
    case this[_0xee2b[1146]]:
      return this[_0xee2b[1145]];
    case this[_0xee2b[1145]]:
      return this[_0xee2b[708]];
    case this[_0xee2b[708]]:
      return this[_0xee2b[710]];
    case this[_0xee2b[710]]:
      return this[_0xee2b[711]];
    case this[_0xee2b[711]]:
      return this[_0xee2b[1144]];
    case this[_0xee2b[1144]]:
      return this[_0xee2b[1143]];
  }
}, setValueInSubUnits:function(_0x8e22x3, _0x8e22x6, _0x8e22x4) {
  _0x8e22x6 = this[_0xee2b[1190]](_0x8e22x6);
  return this[_0xee2b[1191]](_0x8e22x3, _0x8e22x6, _0x8e22x4);
}, mergeDates:function(_0x8e22x4, _0x8e22x6, _0x8e22x3) {
  var _0x8e22x5 = Ext[_0xee2b[703]][_0xee2b[1161]](_0x8e22x4);
  switch(_0x8e22x3) {
    case this[_0xee2b[1146]]:
      _0x8e22x5[_0xee2b[1167]](_0x8e22x6[_0xee2b[1136]]());
    case this[_0xee2b[1145]]:
      _0x8e22x5[_0xee2b[1166]](_0x8e22x6[_0xee2b[480]]());
    case this[_0xee2b[1148]]:
    case this[_0xee2b[708]]:
      if (_0x8e22x3 === this[_0xee2b[1148]]) {
        _0x8e22x5 = this[_0xee2b[255]](_0x8e22x5, this.DAY, _0x8e22x6[_0xee2b[484]]() - _0x8e22x5[_0xee2b[484]]());
      } else {
        _0x8e22x5[_0xee2b[1163]](_0x8e22x6[_0xee2b[479]]());
      }
    case this[_0xee2b[710]]:
      _0x8e22x5[_0xee2b[1155]](_0x8e22x6[_0xee2b[1127]]());
    case this[_0xee2b[711]]:
      _0x8e22x5[_0xee2b[1156]](_0x8e22x6[_0xee2b[1130]]());
    case this[_0xee2b[1144]]:
      _0x8e22x5[_0xee2b[1158]](_0x8e22x6[_0xee2b[1157]]());
    case this[_0xee2b[1143]]:
      _0x8e22x5[_0xee2b[1160]](_0x8e22x6[_0xee2b[1159]]());
  }
  return _0x8e22x5;
}, splitToSubUnits:function(_0x8e22x5, _0x8e22x4, _0x8e22x3, _0x8e22x6) {
  _0x8e22x3 = _0x8e22x3 || 1;
  _0x8e22x6 = arguments[_0xee2b[4]] < 4 ? 1 : _0x8e22x6;
  switch(_0x8e22x4) {
    case this[_0xee2b[1145]]:
      return this[_0xee2b[1192]](_0x8e22x5, _0x8e22x3, _0x8e22x6);
    case this[_0xee2b[1148]]:
    case this[_0xee2b[708]]:
      return this[_0xee2b[1193]](_0x8e22x5, _0x8e22x3);
    default:
      break;
  }
}, splitYear:function(_0x8e22x2, _0x8e22x4) {
  var _0x8e22x6 = this[_0xee2b[1101]](_0x8e22x2, true);
  _0x8e22x6[_0xee2b[1166]](0);
  _0x8e22x6[_0xee2b[1163]](1);
  var _0x8e22x3 = [];
  for (var _0x8e22x5 = 0; _0x8e22x5 <= 12; _0x8e22x5 = _0x8e22x5 + _0x8e22x4) {
    _0x8e22x3[_0xee2b[11]](this[_0xee2b[255]](_0x8e22x6, this.MONTH, _0x8e22x5));
  }
  return _0x8e22x3;
}, splitMonth:function(_0x8e22x7, _0x8e22x4, _0x8e22x9) {
  var _0x8e22x6 = this[_0xee2b[1101]](_0x8e22x7, true);
  _0x8e22x6[_0xee2b[1163]](1);
  _0x8e22x6 = this[_0xee2b[255]](_0x8e22x6, this.DAY, _0x8e22x9 - _0x8e22x6[_0xee2b[484]]());
  var _0x8e22x5 = Ext[_0xee2b[703]][_0xee2b[1161]](_0x8e22x6);
  var _0x8e22x1 = this[_0xee2b[255]](_0x8e22x6, this.MONTH, 1);
  var _0x8e22x3 = [];
  for (var _0x8e22x2 = 0; _0x8e22x5[_0xee2b[1162]]() < _0x8e22x1[_0xee2b[1162]](); _0x8e22x2 = _0x8e22x2 + _0x8e22x4) {
    _0x8e22x5 = this[_0xee2b[255]](_0x8e22x6, this.WEEK, _0x8e22x2);
    _0x8e22x3[_0xee2b[11]](_0x8e22x5);
  }
  return _0x8e22x3;
}, splitWeek:function(_0x8e22x1, _0x8e22x4, _0x8e22x2) {
  var _0x8e22x6 = this[_0xee2b[255]](_0x8e22x1, this.DAY, _0x8e22x2 - _0x8e22x1[_0xee2b[484]]());
  _0x8e22x6 = this[_0xee2b[1101]](_0x8e22x6);
  var _0x8e22x3 = [];
  for (var _0x8e22x5 = 0; _0x8e22x5 <= 7; _0x8e22x5 = _0x8e22x5 + _0x8e22x4) {
    _0x8e22x3[_0xee2b[11]](this[_0xee2b[255]](_0x8e22x6, this.DAY, _0x8e22x5));
  }
  return _0x8e22x3;
}, splitDay:function(_0x8e22x2, _0x8e22x6) {
  var _0x8e22x5 = this[_0xee2b[1101]](_0x8e22x2, true);
  var _0x8e22x3 = [];
  for (var _0x8e22x4 = 0; _0x8e22x4 <= 24; _0x8e22x4 = _0x8e22x4 + _0x8e22x6) {
    _0x8e22x3[_0xee2b[11]](this[_0xee2b[255]](_0x8e22x5, this.HOUR, _0x8e22x4));
  }
  return _0x8e22x3;
}, splitHour:function(_0x8e22x2, _0x8e22x6) {
  var _0x8e22x5 = new Date(_0x8e22x2[_0xee2b[1162]]());
  _0x8e22x5[_0xee2b[1156]](0);
  _0x8e22x5[_0xee2b[1158]](0);
  _0x8e22x5[_0xee2b[1160]](0);
  var _0x8e22x3 = [];
  for (var _0x8e22x4 = 0; _0x8e22x4 <= 60; _0x8e22x4 = _0x8e22x4 + _0x8e22x6) {
    _0x8e22x3[_0xee2b[11]](this[_0xee2b[255]](_0x8e22x5, this.MINUTE, _0x8e22x4));
  }
  return _0x8e22x3;
}, splitMinute:function(_0x8e22x2, _0x8e22x6) {
  var _0x8e22x5 = Ext[_0xee2b[703]][_0xee2b[1161]](_0x8e22x2);
  _0x8e22x5[_0xee2b[1158]](0);
  _0x8e22x5[_0xee2b[1160]](0);
  var _0x8e22x3 = [];
  for (var _0x8e22x4 = 0; _0x8e22x4 <= 60; _0x8e22x4 = _0x8e22x4 + _0x8e22x6) {
    _0x8e22x3[_0xee2b[11]](this[_0xee2b[255]](_0x8e22x5, this.SECOND, _0x8e22x4));
  }
  return _0x8e22x3;
}, clearTime:function(_0x8e22x3, _0x8e22x6) {
  if (_0x8e22x3[_0xee2b[1127]]() > 0 || _0x8e22x3[_0xee2b[1130]]() > 0 || _0x8e22x3[_0xee2b[1157]]() > 0) {
    return Ext[_0xee2b[703]][_0xee2b[1101]](_0x8e22x3, _0x8e22x6);
  }
  return _0x8e22x6 ? Ext[_0xee2b[703]][_0xee2b[1161]](_0x8e22x3) : _0x8e22x3;
}, getWeekNumber:function(_0x8e22x3) {
  var _0x8e22x6 = new Date(_0x8e22x3.valueOf());
  var _0x8e22x4 = (_0x8e22x3[_0xee2b[484]]() + 6) % 7;
  _0x8e22x6[_0xee2b[1163]](_0x8e22x6[_0xee2b[479]]() - _0x8e22x4 + 3);
  var _0x8e22x5 = _0x8e22x6.valueOf();
  _0x8e22x6[_0xee2b[1166]](0, 1);
  if (_0x8e22x6[_0xee2b[484]]() != 4) {
    _0x8e22x6[_0xee2b[1166]](0, 1 + (4 - _0x8e22x6[_0xee2b[484]]() + 7) % 7);
  }
  return 1 + Math[_0xee2b[1194]]((_0x8e22x5 - _0x8e22x6) / 604800000);
}, getWeekStartDate:function(_0x8e22x3, _0x8e22x4) {
  var _0x8e22x6 = this[_0xee2b[1195]](_0x8e22x3, true);
  _0x8e22x4 = typeof _0x8e22x4 !== _0xee2b[1135] ? 1 : _0x8e22x4;
  while (_0x8e22x6[_0xee2b[484]]() !== _0x8e22x4) {
    _0x8e22x6 = Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[255]](_0x8e22x6, Sch[_0xee2b[49]][_0xee2b[703]].DAY, -1);
  }
  return _0x8e22x6;
}, getWeekEndDate:function(_0x8e22x6, _0x8e22x3) {
  var _0x8e22x4 = this[_0xee2b[1195]](_0x8e22x6, true);
  _0x8e22x3 = typeof _0x8e22x3 !== _0xee2b[1135] ? 0 : _0x8e22x3;
  while (_0x8e22x4[_0xee2b[484]]() !== _0x8e22x3) {
    _0x8e22x4 = Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[255]](_0x8e22x4, Sch[_0xee2b[49]][_0xee2b[703]].DAY, 1);
  }
  return _0x8e22x4;
}, setDateToHours:function(_0x8e22x6, _0x8e22x4, _0x8e22x3) {
  if (_0x8e22x4) {
    return new Date(_0x8e22x6[_0xee2b[1136]](), _0x8e22x6[_0xee2b[480]](), _0x8e22x6[_0xee2b[479]](), _0x8e22x3);
  }
  _0x8e22x6[_0xee2b[1155]](_0x8e22x3);
  _0x8e22x6[_0xee2b[1156]](0);
  _0x8e22x6[_0xee2b[1158]](0);
  _0x8e22x6[_0xee2b[1160]](0);
  return _0x8e22x6;
}, setDateToMidnight:function(_0x8e22x3, _0x8e22x6) {
  return this[_0xee2b[1196]](_0x8e22x3, _0x8e22x6, 0);
}, setDateToMidday:function(_0x8e22x3, _0x8e22x6) {
  return this[_0xee2b[1196]](_0x8e22x3, _0x8e22x6, 12);
}, isLaterDate:function(_0x8e22x3, _0x8e22x6) {
  return !this[_0xee2b[1197]](_0x8e22x3, _0x8e22x6) && _0x8e22x3 > _0x8e22x6;
}, isSameDate:function(_0x8e22x3, _0x8e22x6) {
  return _0x8e22x3[_0xee2b[1136]]() === _0x8e22x6[_0xee2b[1136]]() && _0x8e22x3[_0xee2b[480]]() === _0x8e22x6[_0xee2b[480]]() && _0x8e22x3[_0xee2b[479]]() === _0x8e22x6[_0xee2b[479]]();
}, isEarlierDate:function(_0x8e22x3, _0x8e22x6) {
  return !this[_0xee2b[1197]](_0x8e22x3, _0x8e22x6) && _0x8e22x3 < _0x8e22x6;
}});
Ext[_0xee2b[6]](_0xee2b[1198], {extend:_0xee2b[1019], requires:[_0xee2b[1140]], idProperty:_0xee2b[1032], isRangeModel:true, startDateField:_0xee2b[1199], endDateField:_0xee2b[1200], nameField:_0xee2b[603], clsField:_0xee2b[1109], customizableFields:[{name:_0xee2b[1199], type:_0xee2b[1097], dateFormat:_0xee2b[1098]}, {name:_0xee2b[1200], type:_0xee2b[1097], dateFormat:_0xee2b[1098]}, {name:_0xee2b[1109], type:_0xee2b[308]}, {name:_0xee2b[603], type:_0xee2b[308]}], setStartDate:function(_0x8e22x3, 
_0x8e22x5) {
  var _0x8e22x4 = this[_0xee2b[713]]();
  var _0x8e22x6 = this[_0xee2b[712]]();
  this[_0xee2b[46]]();
  this[_0xee2b[50]](this[_0xee2b[1201]], _0x8e22x3);
  if (_0x8e22x5 === true && _0x8e22x4 && _0x8e22x6) {
    this[_0xee2b[1202]](Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[255]](_0x8e22x3, Sch[_0xee2b[49]][_0xee2b[703]].MILLI, _0x8e22x4 - _0x8e22x6));
  }
  this[_0xee2b[51]]();
}, setEndDate:function(_0x8e22x6, _0x8e22x5) {
  var _0x8e22x3 = this[_0xee2b[712]]();
  var _0x8e22x4 = this[_0xee2b[713]]();
  this[_0xee2b[46]]();
  this[_0xee2b[50]](this[_0xee2b[1203]], _0x8e22x6);
  if (_0x8e22x5 === true && _0x8e22x3 && _0x8e22x4) {
    this[_0xee2b[1204]](Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[255]](_0x8e22x6, Sch[_0xee2b[49]][_0xee2b[703]].MILLI, -(_0x8e22x4 - _0x8e22x3)));
  }
  this[_0xee2b[51]]();
}, setStartEndDate:function(_0x8e22x6, _0x8e22x3) {
  this[_0xee2b[46]]();
  this[_0xee2b[50]](this[_0xee2b[1201]], _0x8e22x6);
  this[_0xee2b[50]](this[_0xee2b[1203]], _0x8e22x3);
  this[_0xee2b[51]]();
}, getDates:function() {
  var _0x8e22x5 = [], _0x8e22x4 = this[_0xee2b[713]]();
  if (this[_0xee2b[1205]]()) {
    var _0x8e22x6 = Ext[_0xee2b[703]][_0xee2b[1101]](this[_0xee2b[712]](), true);
    if (_0x8e22x4 - this[_0xee2b[712]]() === 0) {
      _0x8e22x5[_0xee2b[11]](_0x8e22x6);
    } else {
      for (var _0x8e22x3 = _0x8e22x6; _0x8e22x3 < _0x8e22x4; _0x8e22x3 = Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[255]](_0x8e22x3, Sch[_0xee2b[49]][_0xee2b[703]].DAY, 1)) {
        _0x8e22x5[_0xee2b[11]](_0x8e22x3);
      }
    }
  }
  return _0x8e22x5;
}, forEachDate:function(_0x8e22x6, _0x8e22x3) {
  return Ext[_0xee2b[26]][_0xee2b[25]](this[_0xee2b[1206]](), _0x8e22x6, _0x8e22x3);
}, isScheduled:function() {
  var _0x8e22x3 = this;
  return Boolean(_0x8e22x3[_0xee2b[712]]() && _0x8e22x3[_0xee2b[713]]() && _0x8e22x3[_0xee2b[1207]]());
}, isValid:function() {
  var _0x8e22x4 = this, _0x8e22x3 = _0x8e22x4[_0xee2b[9]](), _0x8e22x5, _0x8e22x6;
  if (_0x8e22x3) {
    _0x8e22x5 = _0x8e22x4[_0xee2b[712]](), _0x8e22x6 = _0x8e22x4[_0xee2b[713]]();
    _0x8e22x3 = !_0x8e22x5 || !_0x8e22x6 || _0x8e22x6 - _0x8e22x5 >= 0;
  }
  return _0x8e22x3;
}, areDatesValid:function() {
  var _0x8e22x6 = this, _0x8e22x4 = _0x8e22x6[_0xee2b[712]](), _0x8e22x3 = _0x8e22x6[_0xee2b[713]]();
  return !_0x8e22x4 || !_0x8e22x3 || _0x8e22x3 - _0x8e22x4 >= 0;
}, shift:function(_0x8e22x6, _0x8e22x3) {
  this[_0xee2b[1208]](Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[255]](this[_0xee2b[712]](), _0x8e22x6, _0x8e22x3), Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[255]](this[_0xee2b[713]](), _0x8e22x6, _0x8e22x3));
}, fullCopy:function() {
  return this[_0xee2b[1054]][_0xee2b[8]](this, arguments);
}, intersectsRange:function(_0x8e22x5, _0x8e22x3) {
  var _0x8e22x4 = this[_0xee2b[712]]();
  var _0x8e22x6 = this[_0xee2b[713]]();
  return _0x8e22x4 && _0x8e22x6 && Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[714]](_0x8e22x4, _0x8e22x6, _0x8e22x5, _0x8e22x3);
}});
Ext[_0xee2b[6]](_0xee2b[1209], {extend:_0xee2b[109], alias:_0xee2b[1210], requires:[_0xee2b[1141], _0xee2b[1095], _0xee2b[1198], _0xee2b[1140]], mixins:[_0xee2b[1011], _0xee2b[216]], model:_0xee2b[1095], daysPerMonth:30, daysPerWeek:7, hoursPerDay:24, unitsInMs:null, defaultNonWorkingTimeCssCls:_0xee2b[1110], weekendsAreWorkdays:false, weekendFirstDay:6, weekendSecondDay:0, holidaysCache:null, availabilityIntervalsCache:null, daysIndex:null, weekAvailability:null, defaultWeekAvailability:null, nonStandardWeeksByStartDate:null, 
nonStandardWeeksStartDates:null, calendarId:null, parent:null, defaultAvailability:[_0xee2b[1211]], name:null, suspendCacheUpdate:0, availabilitySearchLimit:1825, inheritableStatics:{getCalendar:function(_0x8e22x3) {
  if (_0x8e22x3 instanceof Sch[_0xee2b[22]][_0xee2b[1212]]) {
    return _0x8e22x3;
  }
  return Ext[_0xee2b[22]][_0xee2b[132]][_0xee2b[131]](_0xee2b[1213] + _0x8e22x3);
}, getAllCalendars:function() {
  var _0x8e22x3 = [];
  Ext[_0xee2b[22]][_0xee2b[132]][_0xee2b[25]](function(_0x8e22x6) {
    if (_0x8e22x6 instanceof Sch[_0xee2b[22]][_0xee2b[1212]]) {
      _0x8e22x3[_0xee2b[11]](_0x8e22x6);
    }
  });
  return _0x8e22x3;
}, removeAll:function() {
  var _0x8e22x3 = Ext[_0xee2b[22]][_0xee2b[132]];
  _0x8e22x3[_0xee2b[25]](function(_0x8e22x6) {
    if (_0x8e22x6 instanceof Sch[_0xee2b[22]][_0xee2b[1212]]) {
      _0x8e22x3[_0xee2b[1214]](_0x8e22x6);
      Ext[_0xee2b[218]](_0x8e22x6);
    }
  });
}}, constructor:function(_0x8e22x3) {
  _0x8e22x3 = _0x8e22x3 || {};
  var _0x8e22x6 = _0x8e22x3[_0xee2b[79]];
  delete _0x8e22x3[_0xee2b[79]];
  var _0x8e22x4 = _0x8e22x3[_0xee2b[1215]];
  delete _0x8e22x3[_0xee2b[1215]];
  this[_0xee2b[9]](arguments);
  this[_0xee2b[1216]](_0x8e22x6);
  this[_0xee2b[1217]](_0x8e22x4);
  this[_0xee2b[1218]] = {MILLI:1, SECOND:1000, MINUTE:60 * 1000, HOUR:60 * 60 * 1000, DAY:this[_0xee2b[1219]] * 60 * 60 * 1000, WEEK:this[_0xee2b[1220]] * this[_0xee2b[1219]] * 60 * 60 * 1000, MONTH:this[_0xee2b[1221]] * this[_0xee2b[1219]] * 60 * 60 * 1000, QUARTER:3 * this[_0xee2b[1221]] * this[_0xee2b[1219]] * 60 * 60 * 1000, YEAR:12 * this[_0xee2b[1221]] * this[_0xee2b[1219]] * 60 * 60 * 1000};
  this[_0xee2b[1222]] = this[_0xee2b[1223]]();
  this[_0xee2b[149]]({update:this[_0xee2b[1224]], add:this[_0xee2b[1225]], remove:this[_0xee2b[1225]], filter:this[_0xee2b[1225]], sort:this[_0xee2b[1225]], clear:this[_0xee2b[1225]], refresh:this[_0xee2b[1225]], write:this[_0xee2b[1225]], scope:this});
  this[_0xee2b[1226]]();
}, shouldReactOnCalendarDayFieldUpdate:function(_0x8e22x3, _0x8e22x6) {
  return Boolean(Ext[_0xee2b[26]][_0xee2b[1229]](_0x8e22x6, function(_0x8e22x4) {
    return _0x8e22x4 !== _0x8e22x3[_0xee2b[1227]] && _0x8e22x4 !== _0x8e22x3[_0xee2b[1228]];
  }));
}, onCalendarUpdate:function(_0x8e22x4, _0x8e22x3, _0x8e22x6, _0x8e22x5) {
  if (_0x8e22x6 == Ext[_0xee2b[22]][_0xee2b[1231]][_0xee2b[1230]] && this[_0xee2b[1232]](_0x8e22x3, _0x8e22x5)) {
    this[_0xee2b[1225]]();
  }
}, onCalendarDataChange:function() {
  this[_0xee2b[1226]]();
}, getCalendarId:function() {
  return this[_0xee2b[1215]];
}, setCalendarId:function(_0x8e22x6) {
  if (this[_0xee2b[1215]] != null) {
    Ext[_0xee2b[22]][_0xee2b[132]][_0xee2b[1214]](this);
  }
  this[_0xee2b[1215]] = _0x8e22x6;
  if (_0x8e22x6 != null) {
    this[_0xee2b[146]] = _0xee2b[1213] + _0x8e22x6;
    Ext[_0xee2b[22]][_0xee2b[132]][_0xee2b[1233]](this);
  } else {
    this[_0xee2b[146]] = null;
  }
  var _0x8e22x3 = this[_0xee2b[379]];
  if (_0x8e22x3 && _0x8e22x3[_0xee2b[1234]]) {
    _0x8e22x3[_0xee2b[1234]][_0xee2b[1215]] = _0x8e22x6;
  }
}, getDefaultWeekAvailability:function() {
  var _0x8e22x2 = this[_0xee2b[1235]];
  var _0x8e22x5 = this[_0xee2b[1236]];
  var _0x8e22x3 = this[_0xee2b[1237]];
  var _0x8e22x4 = [];
  for (var _0x8e22x6 = 0; _0x8e22x6 < 7; _0x8e22x6++) {
    _0x8e22x4[_0xee2b[11]](this[_0xee2b[1238]] || _0x8e22x6 != _0x8e22x5 && _0x8e22x6 != _0x8e22x3 ? new this[_0xee2b[327]]({Type:_0xee2b[1239], Weekday:_0x8e22x6, Availability:_0x8e22x2 && _0x8e22x2[_0xee2b[191]]() || [], IsWorkingDay:true}) : new this[_0xee2b[327]]({Type:_0xee2b[1239], Weekday:_0x8e22x6, Availability:[]}));
  }
  return _0x8e22x4;
}, resetCache:function() {
  if (this[_0xee2b[1240]] > 0) {
    return;
  }
  this[_0xee2b[1241]] = {};
  this[_0xee2b[1242]] = {};
  var _0x8e22x4 = this[_0xee2b[1243]] = {};
  var _0x8e22x3 = this[_0xee2b[1244]] = [];
  var _0x8e22x5 = this[_0xee2b[1245]] = [];
  var _0x8e22x6 = this[_0xee2b[1246]] = {};
  this[_0xee2b[25]](function(_0x8e22xd) {
    var _0x8e22x2 = _0x8e22xd[_0xee2b[32]]();
    var _0x8e22xf = /^(\d)-(\d\d\d\d\/\d\d\/\d\d)-(\d\d\d\d\/\d\d\/\d\d)$/[_0xee2b[676]](_0x8e22x2);
    var _0x8e22x8 = /^WEEKDAY:(\d+)$/[_0xee2b[676]](_0x8e22x2);
    var _0x8e22xe = _0x8e22xd[_0xee2b[1247]]();
    var _0x8e22x10 = _0x8e22xd[_0xee2b[1248]]();
    if (_0x8e22xe == _0xee2b[1249] || _0x8e22xf) {
      var _0x8e22x1, _0x8e22xa;
      if (_0x8e22xe == _0xee2b[1249]) {
        _0x8e22x1 = _0x8e22xd[_0xee2b[1250]]();
        _0x8e22xa = _0x8e22xd[_0xee2b[1251]]();
      }
      if (_0x8e22xf) {
        _0x8e22x1 = Ext[_0xee2b[703]][_0xee2b[1253]](_0x8e22xf[2], _0xee2b[1252]);
        _0x8e22xa = Ext[_0xee2b[703]][_0xee2b[1253]](_0x8e22xf[3], _0xee2b[1252]);
        _0x8e22x10 = _0x8e22xf[1];
      }
      if (_0x8e22x1 && _0x8e22xa && _0x8e22x10 != null) {
        var _0x8e22x7 = _0x8e22x1 - 0;
        if (!_0x8e22x6[_0x8e22x7]) {
          _0x8e22x6[_0x8e22x7] = {startDate:new Date(_0x8e22x1), endDate:new Date(_0x8e22xa), name:_0x8e22xd[_0xee2b[497]](), weekAvailability:[], mainDay:null};
          _0x8e22x5[_0xee2b[11]](_0x8e22x7);
        }
        if (_0x8e22x10 >= 0) {
          _0x8e22x6[_0x8e22x7][_0xee2b[1244]][_0x8e22x10] = _0x8e22xd;
        } else {
          _0x8e22x6[_0x8e22x7][_0xee2b[1254]] = _0x8e22xd;
        }
      }
    } else {
      if (_0x8e22xe == _0xee2b[1239] || _0x8e22x8) {
        if (_0x8e22x8) {
          _0x8e22x10 = _0x8e22x8[1];
        }
        if (_0x8e22x10 != null) {
          if (_0x8e22x10 < 0 || _0x8e22x10 > 6) {
            throw new Error(_0xee2b[1255]);
          }
          _0x8e22x3[_0x8e22x10] = _0x8e22xd;
        }
      } else {
        var _0x8e22x9 = _0x8e22xd[_0xee2b[479]]();
        if (_0x8e22x9) {
          _0x8e22x4[_0x8e22x9 - 0] = _0x8e22xd;
        }
      }
    }
  });
  _0x8e22x5[_0xee2b[1120]](function(_0x8e22x1, _0x8e22x2) {
    return _0x8e22x1 - _0x8e22x2;
  });
}, clearCache:function() {
  if (this[_0xee2b[1240]] > 0) {
    return;
  }
  this[_0xee2b[1256]]();
  this[_0xee2b[180]](_0xee2b[1257], this);
}, intersectsWithCurrentWeeks:function(_0x8e22x6, _0x8e22x4) {
  var _0x8e22x3 = false;
  this[_0xee2b[1258]](function(_0x8e22x1) {
    var _0x8e22x5 = _0x8e22x1[_0xee2b[1138]];
    var _0x8e22x2 = _0x8e22x1[_0xee2b[1139]];
    if (_0x8e22x5 <= _0x8e22x6 && _0x8e22x6 < _0x8e22x2 || _0x8e22x5 < _0x8e22x4 && _0x8e22x4 <= _0x8e22x2) {
      _0x8e22x3 = true;
      return false;
    }
  });
  return _0x8e22x3;
}, addNonStandardWeek:function(_0x8e22x6, _0x8e22x1, _0x8e22x3, _0x8e22x4) {
  _0x8e22x6 = Ext[_0xee2b[703]][_0xee2b[1101]](new Date(_0x8e22x6));
  _0x8e22x1 = Ext[_0xee2b[703]][_0xee2b[1101]](new Date(_0x8e22x1));
  if (this[_0xee2b[1259]](_0x8e22x6, _0x8e22x1)) {
    throw new Error(_0xee2b[1260]);
  }
  var _0x8e22x2 = this[_0xee2b[327]];
  var _0x8e22x9 = [];
  Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x3, function(_0x8e22x7, _0x8e22xa) {
    if (_0x8e22x7 && _0x8e22x7[_0xee2b[1261]]) {
      _0x8e22x7[_0xee2b[1262]](_0xee2b[1249]);
      _0x8e22x7[_0xee2b[1263]](_0x8e22x6);
      _0x8e22x7[_0xee2b[1264]](_0x8e22x1);
      _0x8e22x7[_0xee2b[1265]](_0x8e22xa);
      _0x8e22x7[_0xee2b[1267]](_0x8e22x4 || _0xee2b[1266]);
      _0x8e22x9[_0xee2b[11]](_0x8e22x7);
    } else {
      if (Ext[_0xee2b[307]](_0x8e22x7)) {
        var _0x8e22x8 = new _0x8e22x2();
        _0x8e22x8[_0xee2b[1262]](_0xee2b[1249]);
        _0x8e22x8[_0xee2b[1263]](_0x8e22x6);
        _0x8e22x8[_0xee2b[1264]](_0x8e22x1);
        _0x8e22x8[_0xee2b[1265]](_0x8e22xa);
        _0x8e22x8[_0xee2b[1267]](_0x8e22x4 || _0xee2b[1266]);
        _0x8e22x8[_0xee2b[1134]](_0x8e22x7);
        _0x8e22x9[_0xee2b[11]](_0x8e22x8);
      }
    }
  });
  var _0x8e22x5 = new _0x8e22x2();
  _0x8e22x5[_0xee2b[1262]](_0xee2b[1249]);
  _0x8e22x5[_0xee2b[1263]](_0x8e22x6);
  _0x8e22x5[_0xee2b[1264]](_0x8e22x1);
  _0x8e22x5[_0xee2b[1265]](-1);
  _0x8e22x5[_0xee2b[1267]](_0x8e22x4 || _0xee2b[1266]);
  _0x8e22x9[_0xee2b[11]](_0x8e22x5);
  this[_0xee2b[255]](_0x8e22x9);
}, getNonStandardWeekByStartDate:function(_0x8e22x3) {
  return this[_0xee2b[1246]][Ext[_0xee2b[703]][_0xee2b[1101]](new Date(_0x8e22x3)) - 0] || null;
}, getNonStandardWeekByDate:function(_0x8e22x5) {
  _0x8e22x5 = Ext[_0xee2b[703]][_0xee2b[1101]](new Date(_0x8e22x5)) - 0;
  var _0x8e22x2 = this[_0xee2b[1245]];
  var _0x8e22x3 = this[_0xee2b[1246]];
  for (var _0x8e22x4 = 0; _0x8e22x4 < _0x8e22x2[_0xee2b[4]]; _0x8e22x4++) {
    var _0x8e22x6 = _0x8e22x3[_0x8e22x2[_0x8e22x4]];
    if (_0x8e22x6[_0xee2b[1138]] > _0x8e22x5) {
      break;
    }
    if (_0x8e22x6[_0xee2b[1138]] <= _0x8e22x5 && _0x8e22x5 <= _0x8e22x6[_0xee2b[1139]]) {
      return _0x8e22x6;
    }
  }
  return null;
}, removeNonStandardWeek:function(_0x8e22x3) {
  _0x8e22x3 = Ext[_0xee2b[703]][_0xee2b[1101]](new Date(_0x8e22x3)) - 0;
  var _0x8e22x6 = this[_0xee2b[1268]](_0x8e22x3);
  if (!_0x8e22x6) {
    return;
  }
  this[_0xee2b[63]](Ext[_0xee2b[26]][_0xee2b[1269]](_0x8e22x6[_0xee2b[1244]])[_0xee2b[318]](_0x8e22x6[_0xee2b[1254]]));
}, forEachNonStandardWeek:function(_0x8e22x2, _0x8e22x4) {
  var _0x8e22x5 = this;
  var _0x8e22x1 = this[_0xee2b[1245]];
  var _0x8e22x3 = this[_0xee2b[1246]];
  for (var _0x8e22x6 = 0; _0x8e22x6 < _0x8e22x1[_0xee2b[4]]; _0x8e22x6++) {
    if (_0x8e22x2[_0xee2b[293]](_0x8e22x4 || _0x8e22x5, _0x8e22x3[_0x8e22x1[_0x8e22x6]]) === false) {
      return false;
    }
  }
}, setWeekendsAreWorkDays:function(_0x8e22x3) {
  if (_0x8e22x3 !== this[_0xee2b[1238]]) {
    this[_0xee2b[1238]] = _0x8e22x3;
    this[_0xee2b[1222]] = this[_0xee2b[1223]]();
    this[_0xee2b[1226]]();
  }
}, areWeekendsWorkDays:function() {
  return this[_0xee2b[1238]];
}, getCalendarDay:function(_0x8e22x3) {
  _0x8e22x3 = typeof _0x8e22x3 == _0xee2b[1135] ? new Date(_0x8e22x3) : _0x8e22x3;
  return this[_0xee2b[1270]](_0x8e22x3) || this[_0xee2b[1271]](_0x8e22x3[_0xee2b[484]](), _0x8e22x3) || this[_0xee2b[1272]](_0x8e22x3[_0xee2b[484]]());
}, getOverrideDay:function(_0x8e22x3) {
  return this[_0xee2b[1273]](_0x8e22x3) || this[_0xee2b[79]] && this[_0xee2b[79]][_0xee2b[1270]](_0x8e22x3) || null;
}, getOwnCalendarDay:function(_0x8e22x3) {
  _0x8e22x3 = typeof _0x8e22x3 == _0xee2b[1135] ? new Date(_0x8e22x3) : _0x8e22x3;
  return this[_0xee2b[1243]][Ext[_0xee2b[703]][_0xee2b[1101]](_0x8e22x3, true) - 0];
}, getWeekDay:function(_0x8e22x4, _0x8e22x6) {
  if (_0x8e22x6) {
    var _0x8e22x3 = this[_0xee2b[1274]](_0x8e22x6);
    if (_0x8e22x3 && _0x8e22x3[_0xee2b[1244]][_0x8e22x4]) {
      return _0x8e22x3[_0xee2b[1244]][_0x8e22x4];
    }
  }
  return this[_0xee2b[1244]][_0x8e22x4] || this[_0xee2b[79]] && this[_0xee2b[79]][_0xee2b[1271]](_0x8e22x4, _0x8e22x6) || null;
}, getDefaultCalendarDay:function(_0x8e22x3) {
  if (!this[_0xee2b[53]](_0xee2b[1235]) && !this[_0xee2b[53]](_0xee2b[1238]) && this[_0xee2b[79]]) {
    return this[_0xee2b[79]][_0xee2b[1272]](_0x8e22x3);
  }
  return this[_0xee2b[1222]][_0x8e22x3];
}, isHoliday:function(_0x8e22x4) {
  var _0x8e22x6 = _0x8e22x4 - 0;
  var _0x8e22x5 = this[_0xee2b[1241]];
  if (_0x8e22x5[_0x8e22x6] != null) {
    return _0x8e22x5[_0x8e22x6];
  }
  _0x8e22x4 = typeof _0x8e22x4 == _0xee2b[1135] ? new Date(_0x8e22x4) : _0x8e22x4;
  var _0x8e22x3 = this[_0xee2b[1275]](_0x8e22x4);
  if (!_0x8e22x3) {
    throw new Error(_0xee2b[1276] + _0x8e22x4);
  }
  return _0x8e22x5[_0x8e22x6] = !_0x8e22x3[_0xee2b[1277]]();
}, isWeekend:function(_0x8e22x6) {
  var _0x8e22x3 = _0x8e22x6[_0xee2b[484]]();
  return _0x8e22x3 === this[_0xee2b[1236]] || _0x8e22x3 === this[_0xee2b[1237]];
}, isWorkingDay:function(_0x8e22x3) {
  return !this[_0xee2b[1278]](_0x8e22x3);
}, convertMSDurationToUnit:function(_0x8e22x3, _0x8e22x6) {
  return _0x8e22x3 / this[_0xee2b[1218]][Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[1279]](_0x8e22x6)];
}, convertDurationToMs:function(_0x8e22x6, _0x8e22x3) {
  return _0x8e22x6 * this[_0xee2b[1218]][Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[1279]](_0x8e22x3)];
}, convertDuration:function(_0x8e22x2, _0x8e22x5, _0x8e22x6) {
  var _0x8e22x4 = this, _0x8e22x3 = _0x8e22x2;
  if (_0x8e22x5 != _0x8e22x6) {
    _0x8e22x3 = _0x8e22x4[_0xee2b[1281]](_0x8e22x4[_0xee2b[1280]](_0x8e22x2, _0x8e22x5), _0x8e22x6);
  }
  return _0x8e22x3;
}, getHolidaysRanges:function(_0x8e22x4, _0x8e22x1, _0x8e22x3) {
  if (_0x8e22x4 > _0x8e22x1) {
    Ext[_0xee2b[1182]][_0xee2b[3]](_0xee2b[1282]);
  }
  _0x8e22x4 = Ext[_0xee2b[703]][_0xee2b[1101]](_0x8e22x4, true);
  _0x8e22x1 = _0x8e22x1 - Ext[_0xee2b[703]][_0xee2b[1101]](_0x8e22x1, true) > 0 ? Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[1184]](_0x8e22x1, true, true) : _0x8e22x1;
  var _0x8e22x6 = [], _0x8e22x9, _0x8e22x5;
  for (_0x8e22x5 = _0x8e22x4; _0x8e22x5 < _0x8e22x1; _0x8e22x5 = Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[1283]](_0x8e22x5, Sch[_0xee2b[49]][_0xee2b[703]].DAY, 1)) {
    if (this[_0xee2b[1278]](_0x8e22x5) || this[_0xee2b[1238]] && _0x8e22x3 && this[_0xee2b[475]](_0x8e22x5)) {
      var _0x8e22x7 = this[_0xee2b[1275]](_0x8e22x5);
      var _0x8e22xa = _0x8e22x7 && _0x8e22x7[_0xee2b[1284]]() || this[_0xee2b[1285]];
      var _0x8e22x2 = Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[1283]](_0x8e22x5, Sch[_0xee2b[49]][_0xee2b[703]].DAY, 1);
      if (!_0x8e22x9) {
        _0x8e22x9 = new Sch[_0xee2b[327]].Range({StartDate:_0x8e22x5, EndDate:_0x8e22x2, Cls:_0x8e22xa});
      } else {
        if (_0x8e22x9[_0xee2b[1284]]() == _0x8e22xa) {
          _0x8e22x9[_0xee2b[1202]](_0x8e22x2);
        } else {
          _0x8e22x6[_0xee2b[11]](_0x8e22x9);
          _0x8e22x9 = new Sch[_0xee2b[327]].Range({StartDate:_0x8e22x5, EndDate:_0x8e22x2, Cls:_0x8e22xa});
        }
      }
    } else {
      if (_0x8e22x9) {
        _0x8e22x6[_0xee2b[11]](_0x8e22x9);
        _0x8e22x9 = null;
      }
    }
  }
  if (_0x8e22x9) {
    _0x8e22x6[_0xee2b[11]](_0x8e22x9);
  }
  return _0x8e22x6;
}, forEachAvailabilityInterval:function(_0x8e22x11, _0x8e22x1, _0x8e22xb) {
  _0x8e22xb = _0x8e22xb || this;
  var _0x8e22x5 = _0x8e22x11[_0xee2b[1138]];
  var _0x8e22xd = _0x8e22x11[_0xee2b[1139]];
  var _0x8e22xc = _0x8e22x11[_0xee2b[1286]] !== false;
  if (_0x8e22xc ? !_0x8e22x5 : !_0x8e22xd) {
    throw new Error(_0xee2b[1287]);
  }
  var _0x8e22x3 = new Date(_0x8e22xc ? _0x8e22x5 : _0x8e22xd);
  var _0x8e22x4 = Sch[_0xee2b[49]][_0xee2b[703]];
  if (_0x8e22xc) {
    if (!_0x8e22xd) {
      _0x8e22xd = _0x8e22x4[_0xee2b[255]](_0x8e22x5, _0x8e22x4.DAY, _0x8e22x11[_0xee2b[1288]] || this[_0xee2b[1288]] || 5 * 365);
    }
  } else {
    if (!_0x8e22x5) {
      _0x8e22x5 = _0x8e22x4[_0xee2b[255]](_0x8e22xd, _0x8e22x4.DAY, -(_0x8e22x11[_0xee2b[1288]] || this[_0xee2b[1288]] || 5 * 365));
    }
  }
  var _0x8e22x9 = false;
  while (_0x8e22xc ? _0x8e22x3 < _0x8e22xd : _0x8e22x3 > _0x8e22x5) {
    var _0x8e22x8 = this[_0xee2b[1137]](_0x8e22x3 - (_0x8e22xc ? 0 : 1), _0x8e22xc ? _0x8e22x9 : false);
    for (var _0x8e22x7 = _0x8e22xc ? 0 : _0x8e22x8[_0xee2b[4]] - 1; _0x8e22xc ? _0x8e22x7 < _0x8e22x8[_0xee2b[4]] : _0x8e22x7 >= 0; _0x8e22xc ? _0x8e22x7++ : _0x8e22x7--) {
      var _0x8e22x6 = _0x8e22x8[_0x8e22x7];
      var _0x8e22x10 = _0x8e22x6[_0xee2b[1138]];
      var _0x8e22xf = _0x8e22x6[_0xee2b[1139]];
      if (_0x8e22x10 >= _0x8e22xd || _0x8e22xf <= _0x8e22x5) {
        continue;
      }
      var _0x8e22x2 = _0x8e22x10 < _0x8e22x5 ? _0x8e22x5 : _0x8e22x10;
      var _0x8e22xe = _0x8e22xf > _0x8e22xd ? _0x8e22xd : _0x8e22xf;
      if (_0x8e22x1[_0xee2b[293]](_0x8e22xb, _0x8e22x2, _0x8e22xe) === false) {
        return false;
      }
    }
    _0x8e22x3 = _0x8e22xc ? _0x8e22x4[_0xee2b[1184]](_0x8e22x3, false, _0x8e22x9) : _0x8e22x4[_0xee2b[1289]](_0x8e22x3, _0x8e22x9);
    _0x8e22x9 = true;
  }
}, calculateDuration:function(_0x8e22x3, _0x8e22x5, _0x8e22x6) {
  var _0x8e22x4 = 0;
  this[_0xee2b[1290]]({startDate:_0x8e22x3, endDate:_0x8e22x5}, function(_0x8e22x9, _0x8e22x1) {
    var _0x8e22x2 = _0x8e22x9[_0xee2b[1174]]() - _0x8e22x1[_0xee2b[1174]]();
    _0x8e22x4 += _0x8e22x1 - _0x8e22x9 + _0x8e22x2 * 60 * 1000;
  });
  return this[_0xee2b[1281]](_0x8e22x4, _0x8e22x6);
}, calculateEndDate:function(_0x8e22x3, _0x8e22x1, _0x8e22x6) {
  if (!_0x8e22x1) {
    return new Date(_0x8e22x3);
  }
  var _0x8e22x2 = Sch[_0xee2b[49]][_0xee2b[703]], _0x8e22x5;
  _0x8e22x1 = this[_0xee2b[1280]](_0x8e22x1, _0x8e22x6);
  var _0x8e22x4 = _0x8e22x1 === 0 && Ext[_0xee2b[703]][_0xee2b[1101]](_0x8e22x3, true) - _0x8e22x3 === 0 ? _0x8e22x2[_0xee2b[255]](_0x8e22x3, Sch[_0xee2b[49]][_0xee2b[703]].DAY, -1) : _0x8e22x3;
  this[_0xee2b[1290]]({startDate:_0x8e22x4}, function(_0x8e22xa, _0x8e22x7) {
    var _0x8e22x8 = _0x8e22x7 - _0x8e22xa;
    var _0x8e22x9 = _0x8e22xa[_0xee2b[1174]]() - _0x8e22x7[_0xee2b[1174]]();
    if (_0x8e22x8 >= _0x8e22x1) {
      _0x8e22x5 = new Date(_0x8e22xa - 0 + _0x8e22x1);
      return false;
    } else {
      _0x8e22x1 -= _0x8e22x8 + _0x8e22x9 * 60 * 1000;
    }
  });
  return _0x8e22x5;
}, calculateStartDate:function(_0x8e22x5, _0x8e22x4, _0x8e22x6) {
  if (!_0x8e22x4) {
    return new Date(_0x8e22x5);
  }
  var _0x8e22x3;
  _0x8e22x4 = this[_0xee2b[1280]](_0x8e22x4, _0x8e22x6);
  this[_0xee2b[1290]]({endDate:_0x8e22x5, isForward:false}, function(_0x8e22x1, _0x8e22x2) {
    var _0x8e22x9 = _0x8e22x2 - _0x8e22x1;
    if (_0x8e22x9 >= _0x8e22x4) {
      _0x8e22x3 = new Date(_0x8e22x2 - _0x8e22x4);
      return false;
    } else {
      _0x8e22x4 -= _0x8e22x9;
    }
  });
  return _0x8e22x3;
}, skipNonWorkingTime:function(_0x8e22x3, _0x8e22x4) {
  var _0x8e22x6 = false;
  this[_0xee2b[1290]](_0x8e22x4 ? {startDate:_0x8e22x3} : {endDate:_0x8e22x3, isForward:false}, function(_0x8e22x2, _0x8e22x5) {
    _0x8e22x3 = _0x8e22x4 ? _0x8e22x2 : _0x8e22x5;
    _0x8e22x6 = true;
    return false;
  });
  if (!_0x8e22x6) {
    throw new Error(_0xee2b[1291]);
  }
  return new Date(_0x8e22x3);
}, skipWorkingTime:function(_0x8e22x3, _0x8e22x4, _0x8e22x6) {
  return _0x8e22x4 >= 0 ? this[_0xee2b[1292]](_0x8e22x3, _0x8e22x4, _0x8e22x6) : this[_0xee2b[1293]](_0x8e22x3, -_0x8e22x4, _0x8e22x6);
}, getAvailabilityIntervalsFor:function(_0x8e22x3, _0x8e22x6) {
  if (_0x8e22x6) {
    _0x8e22x3 = _0x8e22x3.valueOf();
  } else {
    if (_0x8e22x3 instanceof Date) {
      _0x8e22x3 = (new Date(_0x8e22x3[_0xee2b[1136]](), _0x8e22x3[_0xee2b[480]](), _0x8e22x3[_0xee2b[479]]())).valueOf();
    } else {
      _0x8e22x3 = Ext[_0xee2b[703]][_0xee2b[1101]](new Date(_0x8e22x3)).valueOf();
    }
  }
  return this[_0xee2b[1242]][_0x8e22x3] = this[_0xee2b[1242]][_0x8e22x3] || this[_0xee2b[1275]](_0x8e22x3)[_0xee2b[1137]](_0x8e22x3);
}, isChildOf:function(_0x8e22x4) {
  var _0x8e22x3 = this, _0x8e22x6 = false;
  while (_0x8e22x3 && !_0x8e22x6) {
    _0x8e22x6 = _0x8e22x3 === _0x8e22x4;
    _0x8e22x3 = _0x8e22x3[_0xee2b[79]];
  }
  return _0x8e22x6;
}, getParentableCalendars:function() {
  var _0x8e22x6 = this, _0x8e22x3 = [], _0x8e22x4 = Sch[_0xee2b[22]][_0xee2b[1212]][_0xee2b[1294]]();
  Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x4, function(_0x8e22x5) {
    if (_0x8e22x5 !== _0x8e22x6 && !_0x8e22x5[_0xee2b[1295]](_0x8e22x6)) {
      _0x8e22x3[_0xee2b[11]]({Id:_0x8e22x5[_0xee2b[1215]], Name:_0x8e22x5[_0xee2b[683]] || _0x8e22x5[_0xee2b[1215]]});
    }
  });
  return _0x8e22x3;
}, setParent:function(_0x8e22x2) {
  var _0x8e22x5 = Sch[_0xee2b[22]][_0xee2b[1212]][_0xee2b[1296]](_0x8e22x2);
  if (_0x8e22x2 && !_0x8e22x5) {
    throw new Error(_0xee2b[1297]);
  }
  if (this[_0xee2b[79]] != _0x8e22x5) {
    var _0x8e22x6 = this[_0xee2b[379]];
    var _0x8e22x4 = {calendarchange:this[_0xee2b[1298]], destroy:this[_0xee2b[1299]], scope:this};
    var _0x8e22x3 = this[_0xee2b[79]];
    if (_0x8e22x3) {
      _0x8e22x3[_0xee2b[152]](_0x8e22x4);
    }
    this[_0xee2b[79]] = _0x8e22x5;
    if (_0x8e22x5) {
      _0x8e22x5[_0xee2b[149]](_0x8e22x4);
    }
    if (_0x8e22x6 && _0x8e22x6[_0xee2b[1234]]) {
      _0x8e22x6[_0xee2b[1234]][_0xee2b[404]] = _0x8e22x5 ? _0x8e22x5[_0xee2b[1215]] : null;
    }
    this[_0xee2b[1226]]();
    this[_0xee2b[180]](_0xee2b[1300], this, _0x8e22x5, _0x8e22x3);
  }
}, onParentCalendarChange:function() {
  this[_0xee2b[1226]]();
}, onParentDestroy:function() {
  this[_0xee2b[1216]](null);
}, isAvailabilityIntersected:function(_0x8e22xb, _0x8e22x6, _0x8e22xe) {
  var _0x8e22xf, _0x8e22x3, _0x8e22x2, _0x8e22x7;
  for (var _0x8e22x9 = 0; _0x8e22x9 < 7; _0x8e22x9++) {
    _0x8e22xf = this[_0xee2b[1271]](_0x8e22x9) || this[_0xee2b[1272]](_0x8e22x9);
    _0x8e22x2 = _0x8e22xb[_0xee2b[1271]](_0x8e22x9) || _0x8e22xb[_0xee2b[1272]](_0x8e22x9);
    if (!_0x8e22xf || !_0x8e22x2) {
      continue;
    }
    _0x8e22x3 = _0x8e22xf[_0xee2b[1118]]();
    _0x8e22x7 = _0x8e22x2[_0xee2b[1118]]();
    for (var _0x8e22x1 = 0, _0x8e22x4 = _0x8e22x3[_0xee2b[4]]; _0x8e22x1 < _0x8e22x4; _0x8e22x1++) {
      for (var _0x8e22x5 = 0, _0x8e22xc = _0x8e22x7[_0xee2b[4]]; _0x8e22x5 < _0x8e22xc; _0x8e22x5++) {
        if (_0x8e22x7[_0x8e22x5][_0xee2b[1119]] < _0x8e22x3[_0x8e22x1][_0xee2b[1121]] && _0x8e22x7[_0x8e22x5][_0xee2b[1121]] > _0x8e22x3[_0x8e22x1][_0xee2b[1119]]) {
          return true;
        }
      }
    }
  }
  var _0x8e22x11 = false;
  this[_0xee2b[1258]](function(_0x8e22xa) {
    if (_0x8e22xa[_0xee2b[1138]] >= _0x8e22xe) {
      return false;
    }
    if (_0x8e22x6 < _0x8e22xa[_0xee2b[1139]]) {
      _0x8e22x11 = true;
      return false;
    }
  });
  return _0x8e22x11;
}});
Ext[_0xee2b[6]](_0xee2b[1301], {extend:_0xee2b[291], mixins:[_0xee2b[881], _0xee2b[941]], resourceStore:null, eventStore:null, assignmentStore:null, dependencyStore:null, addRelatedStores:true, constructor:function(_0x8e22x4) {
  _0x8e22x4 = _0x8e22x4 || {};
  var _0x8e22x7 = _0x8e22x4[_0xee2b[1302]] || this[_0xee2b[1302]] || new Sch[_0xee2b[22]].ResourceStore(), _0x8e22x5 = _0x8e22x4[_0xee2b[1071]] || this[_0xee2b[1071]] || new Sch[_0xee2b[22]].EventStore(), _0x8e22x9 = _0x8e22x4[_0xee2b[1003]] || this[_0xee2b[1003]], _0x8e22x3 = _0x8e22x4[_0xee2b[1303]] || this[_0xee2b[1303]], _0x8e22xa = [];
  if (_0x8e22x5 && _0x8e22x4[_0xee2b[1304]] !== false) {
    var _0x8e22x1 = this[_0xee2b[1305]](_0x8e22x5, _0x8e22x4);
    _0x8e22x9 = _0x8e22x9 || _0x8e22x1[_0xee2b[1003]];
    _0x8e22x7 = _0x8e22x7 || _0x8e22x1[_0xee2b[1302]];
    _0x8e22x3 = _0x8e22x3 || _0x8e22x1[_0xee2b[1303]];
  }
  _0x8e22x5 && _0x8e22xa[_0xee2b[11]](_0x8e22x5);
  _0x8e22x7 && _0x8e22xa[_0xee2b[11]](_0x8e22x7);
  _0x8e22x9 && _0x8e22xa[_0xee2b[11]](_0x8e22x9);
  _0x8e22x3 && _0x8e22xa[_0xee2b[11]](_0x8e22x3);
  if (_0x8e22xa[_0xee2b[4]]) {
    var _0x8e22x6 = [];
    _0x8e22x7 && _0x8e22x6[_0xee2b[11]](_0x8e22x7);
    _0x8e22x5 && _0x8e22x6[_0xee2b[11]](_0x8e22x5);
    _0x8e22x9 && _0x8e22x6[_0xee2b[11]](_0x8e22x9);
    _0x8e22x3 && _0x8e22x6[_0xee2b[11]](_0x8e22x3);
    if (_0x8e22x6[_0xee2b[4]]) {
      _0x8e22x4[_0xee2b[299]] = (_0x8e22x4[_0xee2b[299]] || _0x8e22x4[_0xee2b[125]] || [])[_0xee2b[318]](_0x8e22x6);
    }
    var _0x8e22x2 = _0x8e22x4[_0xee2b[125]] || this[_0xee2b[125]];
    if (_0x8e22x2 && !Ext[_0xee2b[307]](_0x8e22x2)) {
      _0x8e22x2 = [_0x8e22x2];
    }
    _0x8e22x4[_0xee2b[125]] = (_0x8e22x2 || [])[_0xee2b[318]](_0x8e22xa);
  }
  this[_0xee2b[9]]([_0x8e22x4]);
  this[_0xee2b[1071]] = this[_0xee2b[306]](_0x8e22x5);
  this[_0xee2b[1302]] = this[_0xee2b[306]](_0x8e22x7);
  this[_0xee2b[1003]] = this[_0xee2b[306]](_0x8e22x9);
  this[_0xee2b[1303]] = this[_0xee2b[306]](_0x8e22x3);
}, getEventStoreInfo:function(_0x8e22x5, _0x8e22x4) {
  if (!_0x8e22x5[_0xee2b[304]]) {
    if (typeof _0x8e22x5 == _0xee2b[308]) {
      _0x8e22x5 = Ext[_0xee2b[22]][_0xee2b[132]][_0xee2b[55]](_0x8e22x5);
    } else {
      _0x8e22x5 = _0x8e22x5[_0xee2b[64]];
    }
  }
  var _0x8e22x3 = {}, _0x8e22x1 = _0x8e22x4[_0xee2b[1003]], _0x8e22x2 = _0x8e22x4[_0xee2b[1302]], _0x8e22x6 = _0x8e22x4[_0xee2b[1303]];
  !_0x8e22x1 && (_0x8e22x3[_0xee2b[1003]] = _0x8e22x5[_0xee2b[1051]]());
  !_0x8e22x2 && (_0x8e22x3[_0xee2b[1302]] = _0x8e22x5[_0xee2b[1007]]());
  !_0x8e22x6 && (_0x8e22x3[_0xee2b[1303]] = _0x8e22x5[_0xee2b[1306]]());
  return _0x8e22x3;
}, getResourceStore:function() {
  return this[_0xee2b[1302]] && this[_0xee2b[1302]][_0xee2b[64]];
}, setResourceStore:function(_0x8e22x3) {
  if (this[_0xee2b[1007]]()) {
    this[_0xee2b[459]](this[_0xee2b[1007]]());
  }
  this[_0xee2b[129]](_0x8e22x3);
  this[_0xee2b[1302]] = {store:_0x8e22x3};
}, getEventStore:function() {
  return this[_0xee2b[1071]] && this[_0xee2b[1071]][_0xee2b[64]];
}, setEventStore:function(_0x8e22x3) {
  if (this[_0xee2b[696]]()) {
    this[_0xee2b[459]](this[_0xee2b[696]]());
  }
  this[_0xee2b[129]](_0x8e22x3);
  this[_0xee2b[1071]] = {store:_0x8e22x3};
}, getAssignmentStore:function() {
  return this[_0xee2b[1003]] && this[_0xee2b[1003]][_0xee2b[64]];
}, setAssignmentStore:function(_0x8e22x3) {
  if (this[_0xee2b[1051]]()) {
    this[_0xee2b[459]](this[_0xee2b[1051]]());
  }
  this[_0xee2b[129]](_0x8e22x3);
  this[_0xee2b[1003]] = {store:_0x8e22x3};
}, getDependencyStore:function() {
  return this[_0xee2b[1303]] && this[_0xee2b[1303]][_0xee2b[64]];
}, setDependencyStore:function(_0x8e22x3) {
  if (this[_0xee2b[1306]]()) {
    this[_0xee2b[459]](this[_0xee2b[1306]]());
  }
  this[_0xee2b[129]](_0x8e22x3);
  this[_0xee2b[1303]] = {store:_0x8e22x3};
}});
Ext[_0xee2b[6]](_0xee2b[1307], function() {
  var _0x8e22x8 = {allowNull:false, filtered:false, collapsed:true};
  var _0x8e22x9 = [null];
  function _0x8e22xa(_0x8e22xd, _0x8e22x10) {
    Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x10, function(_0x8e22xf) {
      var _0x8e22xc = _0x8e22xf[_0xee2b[1308]](), _0x8e22xe = _0x8e22xf[_0xee2b[1309]]();
      if (_0x8e22xc) {
        _0x8e22xd[_0xee2b[255]](_0x8e22xc, _0x8e22xf);
      }
      if (_0x8e22xe) {
        _0x8e22xd[_0xee2b[255]](_0x8e22xe, _0x8e22xf);
      }
      if (_0x8e22xc && _0x8e22xe) {
        _0x8e22xd[_0xee2b[1310]](_0x8e22xc, _0x8e22xf);
        _0x8e22xd[_0xee2b[1311]](_0x8e22xe, _0x8e22xf);
      }
    });
  }
  function _0x8e22x7(_0x8e22xd, _0x8e22x10) {
    Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x10, function(_0x8e22xf) {
      var _0x8e22xc = _0x8e22xf[_0xee2b[1308]](), _0x8e22xe = _0x8e22xf[_0xee2b[1309]]();
      if (_0x8e22xc) {
        _0x8e22xd[_0xee2b[63]](_0x8e22xc, _0x8e22xf);
        _0x8e22xd[_0xee2b[1312]](_0x8e22xc, _0x8e22xf);
      }
      if (_0x8e22xe) {
        _0x8e22xd[_0xee2b[63]](_0x8e22xe, _0x8e22xf);
        _0x8e22xd[_0xee2b[1313]](_0x8e22xe, _0x8e22xf);
      }
    });
  }
  function _0x8e22x2(_0x8e22x10, _0x8e22xd) {
    Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22xd, function(_0x8e22xe) {
      _0x8e22x10[_0xee2b[231]](_0x8e22xe);
      _0x8e22x10[_0xee2b[1314]](_0x8e22xe);
      _0x8e22x10[_0xee2b[1315]](_0x8e22xe);
    });
  }
  function _0x8e22x1(_0x8e22xf, _0x8e22x10, _0x8e22xd, _0x8e22xb, _0x8e22xc, _0x8e22xe) {
    if (_0x8e22x10 !== _0x8e22xd) {
      _0x8e22xf[_0xee2b[999]](_0x8e22xd, _0x8e22x10, _0x8e22xe);
      _0x8e22xf[_0xee2b[1316]](_0x8e22xd, _0x8e22x10, _0x8e22xe);
    }
    if (_0x8e22xb !== _0x8e22xc) {
      _0x8e22xf[_0xee2b[999]](_0x8e22xc, _0x8e22xb, _0x8e22xe);
      _0x8e22xf[_0xee2b[1317]](_0x8e22xc, _0x8e22xb, _0x8e22xe);
    }
  }
  function _0x8e22x6(_0x8e22xe, _0x8e22x10, _0x8e22xd) {
    _0x8e22xe[_0xee2b[999]](_0x8e22x10, _0x8e22xd);
    _0x8e22xe[_0xee2b[1316]](_0x8e22x10, _0x8e22xd);
    _0x8e22xe[_0xee2b[1317]](_0x8e22x10, _0x8e22xd);
  }
  function _0x8e22x3(_0x8e22x10, _0x8e22xd) {
    Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22xd, function(_0x8e22xe) {
      if (!_0x8e22x10[_0xee2b[1318]](_0x8e22xe)) {
        _0x8e22x10[_0xee2b[50]](_0x8e22xe, []);
        _0x8e22x10[_0xee2b[1319]](_0x8e22xe, []);
        _0x8e22x10[_0xee2b[1320]](_0x8e22xe, []);
      }
    });
  }
  function _0x8e22x4(_0x8e22xe, _0x8e22xd, _0x8e22x10) {
    _0x8e22xe[_0xee2b[231]]();
    _0x8e22xa(_0x8e22xe, _0x8e22xd[_0xee2b[1005]]());
    _0x8e22x10 && (!_0x8e22x10[_0xee2b[230]] || _0x8e22x10[_0xee2b[230]]()) && _0x8e22x3(_0x8e22xe, _0x8e22x10[_0xee2b[1321]](_0x8e22x10[_0xee2b[137]]()[_0xee2b[328]], _0x8e22x8));
  }
  function _0x8e22x5(_0x8e22xf, _0x8e22xe, _0x8e22xd, _0x8e22x10) {
    _0x8e22xe = Ext[_0xee2b[26]][_0xee2b[48]](_0x8e22xe, function(_0x8e22xc, _0x8e22xb) {
      _0x8e22xf[_0xee2b[50]](_0x8e22xb, []);
      _0x8e22xc[_0x8e22xf[_0xee2b[990]](_0x8e22xb)] = true;
    }, {});
    _0x8e22xd[_0xee2b[25]](function(_0x8e22x19) {
      var _0x8e22x18 = _0x8e22x19[_0xee2b[1308]](), _0x8e22x11 = _0x8e22x19[_0xee2b[1309]](), _0x8e22xb = _0x8e22xe[_0xee2b[53]](_0x8e22x18), _0x8e22xc = _0x8e22xe[_0xee2b[53]](_0x8e22x11);
      _0x8e22xb && _0x8e22xf[_0xee2b[255]](_0x8e22x18, _0x8e22x19);
      _0x8e22xb && _0x8e22xf[_0xee2b[1310]](_0x8e22x18, _0x8e22x19);
      _0x8e22xc && _0x8e22xf[_0xee2b[255]](_0x8e22x11, _0x8e22x19);
      _0x8e22xc && _0x8e22xf[_0xee2b[1311]](_0x8e22x11, _0x8e22x19);
    });
    Ext[_0xee2b[154]][_0xee2b[25]](_0x8e22xe, function(_0x8e22xc) {
      if (!_0x8e22xf[_0xee2b[1318]](_0x8e22xc) && (_0x8e22x10[_0xee2b[394]] ? _0x8e22x10[_0xee2b[394]](_0x8e22xc) : _0x8e22x10[_0xee2b[395]](_0x8e22xc))) {
        _0x8e22xf[_0xee2b[50]](_0x8e22xc, []);
      }
    });
  }
  return {extend:_0xee2b[985], dependencyStore:null, dependencyStoreDetacher:null, eventStoreDetacher:null, constructor:function(_0x8e22xe) {
    var _0x8e22x12 = this;
    _0x8e22x12[_0xee2b[9]]();
    _0x8e22x12[_0xee2b[1303]] = _0x8e22xe;
    function _0x8e22x14(_0x8e22x1a, _0x8e22x1b) {
      _0x8e22xa(_0x8e22x12, _0x8e22x1b);
    }
    function _0x8e22xc(_0x8e22x1b, _0x8e22x1c, _0x8e22x1d, _0x8e22x1a) {
      !_0x8e22x1a && _0x8e22x7(_0x8e22x12, _0x8e22x1c);
    }
    function _0x8e22xf(_0x8e22x1e, _0x8e22x1b, _0x8e22x1c) {
      var _0x8e22x1f = _0x8e22x1b[_0xee2b[1322]], _0x8e22x1d = _0x8e22x1b[_0xee2b[1323]], _0x8e22x1a = _0x8e22x1b[_0xee2b[52]] && _0x8e22x1f in _0x8e22x1b[_0xee2b[52]], _0x8e22x20 = _0x8e22x1b[_0xee2b[52]] && _0x8e22x1d in _0x8e22x1b[_0xee2b[52]], _0x8e22x21 = _0x8e22x1a && _0x8e22x1b[_0xee2b[52]][_0x8e22x1f], _0x8e22x22 = _0x8e22x20 && _0x8e22x1b[_0xee2b[52]][_0x8e22x1d];
      if (_0x8e22x1a || _0x8e22x20) {
        if (!_0x8e22x21 && _0x8e22x1b[_0xee2b[52]][_0xee2b[53]](_0x8e22x1f) || !_0x8e22x22 && _0x8e22x1b[_0xee2b[52]][_0xee2b[53]](_0x8e22x1d)) {
          _0x8e22x7(_0x8e22x12, [_0x8e22x1b]);
          _0x8e22xa(_0x8e22x12, [_0x8e22x1b]);
        } else {
          _0x8e22x1(_0x8e22x12, _0x8e22x1a ? _0x8e22x1b[_0xee2b[1308]]() : false, _0x8e22x1a ? _0x8e22x21 : false, _0x8e22x20 ? _0x8e22x1b[_0xee2b[1309]]() : false, _0x8e22x20 ? _0x8e22x22 : false, _0x8e22x1b);
        }
      }
    }
    function _0x8e22x10(_0x8e22x1a) {
      _0x8e22x4(_0x8e22x12, _0x8e22x1a, _0x8e22x1a[_0xee2b[696]]());
    }
    function _0x8e22xb(_0x8e22x1a, _0x8e22x1b) {
      _0x8e22x4(_0x8e22x12, _0x8e22x1a, _0x8e22x1b);
      _0x8e22xd(_0x8e22x1b);
    }
    function _0x8e22x13(_0x8e22x1b, _0x8e22x1d, _0x8e22x1c, _0x8e22x1a) {
      _0x8e22x6(_0x8e22x12, _0x8e22x1c, _0x8e22x1a);
    }
    function _0x8e22x23(_0x8e22x1b, _0x8e22x1a) {
      _0x8e22x3(_0x8e22x12, _0x8e22x1a);
    }
    function _0x8e22x16(_0x8e22x1a, _0x8e22x1b) {
      _0x8e22x3(_0x8e22x12, _0x8e22x9[0] = _0x8e22x1b, _0x8e22x9);
    }
    function _0x8e22x11(_0x8e22x1a, _0x8e22x1b) {
      _0x8e22x3(_0x8e22x12, _0x8e22x9[0] = _0x8e22x1b, _0x8e22x9);
    }
    function _0x8e22x19(_0x8e22x1b, _0x8e22x1c, _0x8e22x1d, _0x8e22x1a) {
      !_0x8e22x1a && _0x8e22x2(_0x8e22x12, _0x8e22x1c);
    }
    function _0x8e22x17(_0x8e22x1b, _0x8e22x1d, _0x8e22x1a) {
      !_0x8e22x1a && _0x8e22x2(_0x8e22x12, _0x8e22x9[0] = _0x8e22x1d, _0x8e22x9);
    }
    function _0x8e22x15() {
      _0x8e22x4(_0x8e22x12, _0x8e22x12[_0xee2b[1303]], _0x8e22x12[_0xee2b[1303]][_0xee2b[696]]());
    }
    function _0x8e22x18(_0x8e22x1a, _0x8e22x1b) {
      if (!_0x8e22x1b) {
        _0x8e22x4(_0x8e22x12, _0x8e22x12[_0xee2b[1303]], _0x8e22x12[_0xee2b[1071]]);
      } else {
        if (!Ext[_0xee2b[307]](_0x8e22x1b)) {
          _0x8e22x1b = [_0x8e22x1b];
        }
        _0x8e22x5(_0x8e22x12, _0x8e22x1b, _0x8e22x12[_0xee2b[1303]], _0x8e22x12[_0xee2b[1071]]);
      }
    }
    function _0x8e22xd(_0x8e22x1a) {
      var _0x8e22x1b;
      Ext[_0xee2b[218]](_0x8e22x12[_0xee2b[1000]]);
      if (_0x8e22x1a) {
        _0x8e22x1b = {idchanged:_0x8e22x13, cacheresethint:_0x8e22x15, clear:_0x8e22x15, refresh:_0x8e22x15, 'event-dependency-cache-invalidate':_0x8e22x18, priority:100, destroyable:true};
        if (_0x8e22x1a[_0xee2b[234]]) {
          _0x8e22x1b = Ext[_0xee2b[8]](_0x8e22x1b, {nodeappend:_0x8e22x16, nodeinsert:_0x8e22x11, noderemove:_0x8e22x17, rootchange:_0x8e22x15});
        } else {
          _0x8e22x1b = Ext[_0xee2b[8]](_0x8e22x1b, {add:_0x8e22x23, remove:_0x8e22x19});
        }
        _0x8e22x12[_0xee2b[1000]] = _0x8e22x1a[_0xee2b[149]](_0x8e22x1b);
      }
    }
    _0x8e22x12[_0xee2b[1324]] = _0x8e22xe[_0xee2b[149]]({add:_0x8e22x14, remove:_0x8e22xc, update:_0x8e22xf, refresh:_0x8e22x10, cacheresethint:_0x8e22x10, clear:_0x8e22x10, eventstorechange:_0x8e22xb, 'event-dependency-cache-invalidate':_0x8e22x18, priority:100, destroyable:true});
    _0x8e22x4(_0x8e22x12, _0x8e22xe, _0x8e22xe[_0xee2b[696]]());
  }, destroy:function() {
    var _0x8e22xd = this;
    Ext[_0xee2b[1004]](_0x8e22xd, _0xee2b[1324], _0xee2b[1000]);
    _0x8e22xd[_0xee2b[1303]] = null;
  }, get:function(_0x8e22x10, _0x8e22xe) {
    var _0x8e22xf = this;
    return _0x8e22xf[_0xee2b[9]]([_0x8e22x10]);
  }, getSuccessors:function(_0x8e22x10, _0x8e22xe) {
    var _0x8e22xf = this;
    return _0x8e22xf[_0xee2b[55]](_0x8e22xf[_0xee2b[45]][_0xee2b[1325]](_0x8e22xf[_0xee2b[990]](_0x8e22x10)), _0x8e22xe);
  }, getPredecessors:function(_0x8e22x10, _0x8e22xe) {
    var _0x8e22xf = this;
    return _0x8e22xf[_0xee2b[55]](_0x8e22xf[_0xee2b[45]][_0xee2b[1326]](_0x8e22xf[_0xee2b[990]](_0x8e22x10)), _0x8e22xe);
  }, addSuccessor:function(_0x8e22xe, _0x8e22x10) {
    var _0x8e22xf = this;
    return arguments[_0xee2b[4]] > 1 ? _0x8e22xf[_0xee2b[255]](_0x8e22xf[_0xee2b[45]][_0xee2b[1325]](_0x8e22xf[_0xee2b[990]](_0x8e22xe)), _0x8e22x10) : _0x8e22xf[_0xee2b[255]](_0x8e22xf[_0xee2b[45]][_0xee2b[1325]](_0x8e22xf[_0xee2b[990]](_0x8e22xe)));
  }, addPredecessor:function(_0x8e22xe, _0x8e22x10) {
    var _0x8e22xf = this;
    return arguments[_0xee2b[4]] > 1 ? _0x8e22xf[_0xee2b[255]](_0x8e22xf[_0xee2b[45]][_0xee2b[1326]](_0x8e22xf[_0xee2b[990]](_0x8e22xe)), _0x8e22x10) : _0x8e22xf[_0xee2b[255]](_0x8e22xf[_0xee2b[45]][_0xee2b[1326]](_0x8e22xf[_0xee2b[990]](_0x8e22xe)));
  }, setSuccessors:function(_0x8e22x10, _0x8e22xf) {
    var _0x8e22xe = this;
    _0x8e22xe[_0xee2b[50]](_0x8e22xe[_0xee2b[45]][_0xee2b[1325]](_0x8e22xe[_0xee2b[990]](_0x8e22x10)), _0x8e22xf);
  }, setPredecessors:function(_0x8e22x10, _0x8e22xf) {
    var _0x8e22xe = this;
    _0x8e22xe[_0xee2b[50]](_0x8e22xe[_0xee2b[45]][_0xee2b[1326]](_0x8e22xe[_0xee2b[990]](_0x8e22x10)), _0x8e22xf);
  }, removeSuccessor:function(_0x8e22xe, _0x8e22x10) {
    var _0x8e22xf = this;
    return _0x8e22xf[_0xee2b[63]](_0x8e22xf[_0xee2b[45]][_0xee2b[1325]](_0x8e22xf[_0xee2b[990]](_0x8e22xe)), _0x8e22x10);
  }, removePredecessor:function(_0x8e22xe, _0x8e22x10) {
    var _0x8e22xf = this;
    return _0x8e22xf[_0xee2b[63]](_0x8e22xf[_0xee2b[45]][_0xee2b[1326]](_0x8e22xf[_0xee2b[990]](_0x8e22xe)), _0x8e22x10);
  }, moveSuccessors:function(_0x8e22xe, _0x8e22xf, _0x8e22xd) {
    var _0x8e22x10 = this;
    return arguments[_0xee2b[4]] >= 3 ? _0x8e22x10[_0xee2b[999]](_0x8e22x10[_0xee2b[45]][_0xee2b[1325]](_0x8e22x10[_0xee2b[990]](_0x8e22xe)), _0x8e22x10[_0xee2b[45]][_0xee2b[1325]](_0x8e22x10[_0xee2b[990]](_0x8e22xf)), _0x8e22xd) : _0x8e22x10[_0xee2b[999]](_0x8e22x10[_0xee2b[45]][_0xee2b[1325]](_0x8e22x10[_0xee2b[990]](_0x8e22xe)), _0x8e22x10[_0xee2b[45]][_0xee2b[1325]](_0x8e22x10[_0xee2b[990]](_0x8e22xf)));
  }, movePredecessors:function(_0x8e22xe, _0x8e22xf, _0x8e22xd) {
    var _0x8e22x10 = this;
    return arguments[_0xee2b[4]] >= 3 ? _0x8e22x10[_0xee2b[999]](_0x8e22x10[_0xee2b[45]][_0xee2b[1326]](_0x8e22x10[_0xee2b[990]](_0x8e22xe)), _0x8e22x10[_0xee2b[45]][_0xee2b[1326]](_0x8e22x10[_0xee2b[990]](_0x8e22xf)), _0x8e22xd) : _0x8e22x10[_0xee2b[999]](_0x8e22x10[_0xee2b[45]][_0xee2b[1326]](_0x8e22x10[_0xee2b[990]](_0x8e22xe)), _0x8e22x10[_0xee2b[45]][_0xee2b[1326]](_0x8e22x10[_0xee2b[990]](_0x8e22xf)));
  }, clearSuccessors:function(_0x8e22x10) {
    var _0x8e22xe = this;
    return _0x8e22xe[_0xee2b[231]](_0x8e22xe[_0xee2b[45]][_0xee2b[1325]](_0x8e22xe[_0xee2b[990]](_0x8e22x10)));
  }, clearPredecessors:function(_0x8e22x10) {
    var _0x8e22xe = this;
    return _0x8e22xe[_0xee2b[231]](_0x8e22xe[_0xee2b[45]][_0xee2b[1326]](_0x8e22xe[_0xee2b[990]](_0x8e22x10)));
  }, inheritableStatics:{splitKey:function(_0x8e22x10) {
    _0x8e22x10 = _0x8e22x10[_0xee2b[496]](_0xee2b[1327]);
    return {id:_0x8e22x10[0], type:_0x8e22x10[_0xee2b[4]] && _0x8e22x10[1] || false};
  }, makeSuccessorsKey:function(_0x8e22x10) {
    return _0x8e22x10 + _0xee2b[1328];
  }, makePredecessorsKey:function(_0x8e22x10) {
    return _0x8e22x10 + _0xee2b[1329];
  }}};
});
Ext[_0xee2b[6]](_0xee2b[1330], {extend:_0xee2b[1019], isDependencyModel:true, inheritableStatics:{Type:{StartToStart:0, StartToEnd:1, EndToStart:2, EndToEnd:3}}, idProperty:_0xee2b[1032], customizableFields:[{name:_0xee2b[649]}, {name:_0xee2b[650]}, {name:_0xee2b[1106], type:_0xee2b[1103], defaultValue:2}, {name:_0xee2b[1109], defaultValue:_0xee2b[27]}, {name:_0xee2b[1331], type:_0xee2b[1108]}, {name:_0xee2b[1332], type:_0xee2b[308]}, {name:_0xee2b[1333], type:_0xee2b[308]}, {name:_0xee2b[1334], 
type:_0xee2b[308], persist:false, defaultValue:_0xee2b[27]}], fromField:_0xee2b[649], toField:_0xee2b[650], typeField:_0xee2b[1106], clsField:_0xee2b[1109], bidirectionalField:_0xee2b[1331], highlightedField:_0xee2b[1334], constructor:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  _0x8e22x6[_0xee2b[9]](arguments);
  if (_0x8e22x3) {
    if (_0x8e22x3[_0x8e22x6[_0xee2b[1322]]] && _0x8e22x3[_0x8e22x6[_0xee2b[1322]]][_0xee2b[1335]]) {
      _0x8e22x6[_0xee2b[1336]](_0x8e22x3[_0x8e22x6[_0xee2b[1322]]]);
      delete _0x8e22x3[_0xee2b[1322]];
    }
    if (_0x8e22x3[_0x8e22x6[_0xee2b[1323]]] && _0x8e22x3[_0x8e22x6[_0xee2b[1323]]][_0xee2b[1335]]) {
      _0x8e22x6[_0xee2b[1337]](_0x8e22x3[_0x8e22x6[_0xee2b[1323]]]);
      delete _0x8e22x3[_0xee2b[1323]];
    }
  }
}, getEventStore:function() {
  return this[_0xee2b[64]][_0xee2b[696]]();
}, getSourceEvent:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  return (_0x8e22x3 || _0x8e22x6[_0xee2b[696]]())[_0xee2b[1012]](_0x8e22x6[_0xee2b[1308]]());
}, setSourceEvent:function(_0x8e22x3) {
  this[_0xee2b[1338]](_0x8e22x3[_0xee2b[32]]());
}, getTargetEvent:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  return (_0x8e22x3 || _0x8e22x6[_0xee2b[696]]())[_0xee2b[1012]](_0x8e22x6[_0xee2b[1309]]());
}, setTargetEvent:function(_0x8e22x3) {
  this[_0xee2b[1339]](_0x8e22x3[_0xee2b[32]]());
}, getSourceId:function() {
  return this[_0xee2b[1340]]();
}, setSourceId:function(_0x8e22x3) {
  return this[_0xee2b[1341]](_0x8e22x3);
}, getTargetId:function() {
  return this[_0xee2b[1342]]();
}, setTargetId:function(_0x8e22x3) {
  return this[_0xee2b[1343]](_0x8e22x3);
}, isPersistable:function() {
  var _0x8e22x3 = this, _0x8e22x6 = _0x8e22x3[_0xee2b[1344]](), _0x8e22x4 = _0x8e22x3[_0xee2b[1345]]();
  return _0x8e22x6 && !_0x8e22x6[_0xee2b[30]] && _0x8e22x4 && !_0x8e22x4[_0xee2b[30]];
}, getDateRange:function() {
  var _0x8e22x3 = this[_0xee2b[1344]]();
  var _0x8e22x5 = this[_0xee2b[1345]]();
  if (_0x8e22x3 && _0x8e22x5 && _0x8e22x3[_0xee2b[1205]]() && _0x8e22x5[_0xee2b[1205]]()) {
    var _0x8e22x4 = this[_0xee2b[45]][_0xee2b[1106]];
    var _0x8e22x6, _0x8e22x2;
    switch(this[_0xee2b[1247]]()) {
      case _0x8e22x4[_0xee2b[1346]]:
        _0x8e22x6 = _0x8e22x3[_0xee2b[712]]();
        _0x8e22x2 = _0x8e22x5[_0xee2b[712]]();
        break;
      case _0x8e22x4[_0xee2b[1347]]:
        _0x8e22x6 = _0x8e22x3[_0xee2b[712]]();
        _0x8e22x2 = _0x8e22x5[_0xee2b[713]]();
        break;
      case _0x8e22x4[_0xee2b[1348]]:
        _0x8e22x6 = _0x8e22x3[_0xee2b[713]]();
        _0x8e22x2 = _0x8e22x5[_0xee2b[713]]();
        break;
      case _0x8e22x4[_0xee2b[1349]]:
        _0x8e22x6 = _0x8e22x3[_0xee2b[713]]();
        _0x8e22x2 = _0x8e22x5[_0xee2b[712]]();
        break;
    }
    return {start:Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[203]](_0x8e22x6, _0x8e22x2), end:Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[715]](_0x8e22x6, _0x8e22x2)};
  }
  return null;
}, highlight:function(_0x8e22x3) {
  var _0x8e22x4 = this, _0x8e22x6 = _0x8e22x4[_0xee2b[1350]]()[_0xee2b[496]](_0xee2b[60]);
  if (!Ext[_0xee2b[26]][_0xee2b[1087]](_0x8e22x6, _0x8e22x3)) {
    var _0x8e22x5 = _0x8e22x6[_0xee2b[318]](_0x8e22x3);
    _0x8e22x4[_0xee2b[1351]](_0x8e22x5[_0xee2b[73]](_0xee2b[60]));
  }
}, unhighlight:function(_0x8e22x3) {
  var _0x8e22x4 = this, _0x8e22x6 = _0x8e22x4[_0xee2b[1350]]()[_0xee2b[496]](_0xee2b[60]);
  if (Ext[_0xee2b[26]][_0xee2b[1087]](_0x8e22x6, _0x8e22x3)) {
    var _0x8e22x5 = Ext[_0xee2b[26]][_0xee2b[63]](_0x8e22x6, _0x8e22x3);
    _0x8e22x4[_0xee2b[1351]](_0x8e22x5[_0xee2b[73]](_0xee2b[60]));
  }
}, isHighlightedWith:function(_0x8e22x3) {
  var _0x8e22x4 = this, _0x8e22x6 = _0x8e22x4[_0xee2b[1350]]()[_0xee2b[496]](_0xee2b[60]);
  return Ext[_0xee2b[26]][_0xee2b[1087]](_0x8e22x6, _0x8e22x3);
}});
Ext[_0xee2b[6]](_0xee2b[1352], {extend:_0xee2b[1330], isValid:function(_0x8e22x6) {
  var _0x8e22x2 = this, _0x8e22x5 = _0x8e22x2[_0xee2b[9]](arguments), _0x8e22x1 = _0x8e22x2[_0xee2b[1308]](), _0x8e22x3 = _0x8e22x2[_0xee2b[1309]](), _0x8e22x4 = _0x8e22x2[_0xee2b[1247]]();
  return Ext[_0xee2b[789]](_0x8e22x4) && !Ext[_0xee2b[1353]](_0x8e22x1) && !Ext[_0xee2b[1353]](_0x8e22x3) && _0x8e22x1 != _0x8e22x3;
}, getTypeFromSides:function(_0x8e22x5, _0x8e22x6, _0x8e22x2) {
  var _0x8e22x4 = this[_0xee2b[45]][_0xee2b[1106]], _0x8e22x3 = _0x8e22x2 ? _0xee2b[867] : _0xee2b[1354], _0x8e22x1 = _0x8e22x2 ? _0xee2b[1354] : _0xee2b[867];
  if (_0x8e22x5 === _0x8e22x3) {
    return _0x8e22x6 === _0x8e22x3 ? _0x8e22x4[_0xee2b[1346]] : _0x8e22x4[_0xee2b[1347]];
  }
  return _0x8e22x6 === _0x8e22x1 ? _0x8e22x4[_0xee2b[1348]] : _0x8e22x4[_0xee2b[1349]];
}});
Ext[_0xee2b[6]](_0xee2b[1355], {extend:_0xee2b[109], requires:[_0xee2b[973], _0xee2b[1307]], mixins:[_0xee2b[1011], _0xee2b[1016], _0xee2b[216]], config:{extraKeys:{bySourceTargetId:{keyFn:function(_0x8e22x3) {
  return Sch[_0xee2b[22]][_0xee2b[1357]][_0xee2b[1356]](_0x8e22x3[_0xee2b[1308]](), _0x8e22x3[_0xee2b[1309]]());
}}}}, model:_0xee2b[1352], alias:_0xee2b[1358], storeId:_0xee2b[1359], eventStoreDetacher:null, eventStore:null, constructor:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  _0x8e22x6[_0xee2b[9]]([_0x8e22x3]);
  _0x8e22x6[_0xee2b[1360]] = _0x8e22x6[_0xee2b[1360]] || _0x8e22x6[_0xee2b[1361]]();
}, destroy:function() {
  var _0x8e22x3 = this;
  Ext[_0xee2b[1004]](_0x8e22x3, _0xee2b[1360], _0xee2b[1000]);
  _0x8e22x3[_0xee2b[9]]();
}, createEventDependencyCache:function() {
  return new Sch[_0xee2b[22]][_0xee2b[49]].EventDependencyCache(this);
}, getEventStore:function() {
  return this[_0xee2b[1071]];
}, setEventStore:function(_0x8e22x3) {
  var _0x8e22x6 = this, _0x8e22x4 = _0x8e22x6[_0xee2b[1071]];
  _0x8e22x6[_0xee2b[1071]] = _0x8e22x3 && Ext[_0xee2b[1072]][_0xee2b[131]](_0x8e22x3) || null;
  _0x8e22x6[_0xee2b[1073]](_0x8e22x6[_0xee2b[1071]]);
  if ((_0x8e22x4 || _0x8e22x3) && _0x8e22x4 !== _0x8e22x3) {
    _0x8e22x6[_0xee2b[180]](_0xee2b[1074], _0x8e22x6, _0x8e22x3, _0x8e22x4);
  }
}, attachToEventStore:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  Ext[_0xee2b[218]](_0x8e22x6[_0xee2b[1000]]);
  if (_0x8e22x3 && _0x8e22x3[_0xee2b[234]]) {
    _0x8e22x6[_0xee2b[1000]] = _0x8e22x3[_0xee2b[149]]({noderemove:_0x8e22x6[_0xee2b[1075]], scope:_0x8e22x6, destroyable:true, priority:200});
  } else {
    if (_0x8e22x3) {
      _0x8e22x6[_0xee2b[1000]] = _0x8e22x3[_0xee2b[149]]({remove:_0x8e22x6[_0xee2b[1077]], scope:_0x8e22x6, destroyable:true, priority:200});
    }
  }
}, onEventRemove:function(_0x8e22x5, _0x8e22x4, _0x8e22x6, _0x8e22x3) {
  !_0x8e22x3 && this[_0xee2b[1362]](_0x8e22x4, false);
}, onEventNodeRemove:function(_0x8e22x6, _0x8e22x4, _0x8e22x3) {
  !_0x8e22x3 && this[_0xee2b[1362]](_0x8e22x4, false);
}, reduceEventDependencies:function(_0x8e22x5, _0x8e22x2, _0x8e22x3, _0x8e22x1, _0x8e22x6) {
  var _0x8e22x4 = this;
  _0x8e22x6 = _0x8e22x6 || function(_0x8e22x7) {
    var _0x8e22x9 = _0x8e22x7 && _0x8e22x7[_0xee2b[988]] ? _0x8e22x7[_0xee2b[32]]() : _0x8e22x7;
    return _0x8e22x4[_0xee2b[1360]][_0xee2b[55]](_0x8e22x7, function() {
      return Ext[_0xee2b[26]][_0xee2b[173]](_0x8e22x4[_0xee2b[1005]](), function(_0x8e22xa) {
        return _0x8e22xa[_0xee2b[1309]]() == _0x8e22x9 || _0x8e22xa[_0xee2b[1308]]() == _0x8e22x9;
      });
    });
  };
  _0x8e22x5 = Ext[_0xee2b[307]](_0x8e22x5) ? _0x8e22x5 : [_0x8e22x5];
  _0x8e22x1 = _0x8e22x1 === undefined ? true : false;
  Ext[_0xee2b[26]][_0xee2b[48]](_0x8e22x5, function(_0x8e22x9, _0x8e22x7) {
    if (_0x8e22x7[_0xee2b[1363]] && !_0x8e22x1) {
      _0x8e22x7[_0xee2b[99]](function(_0x8e22xa) {
        _0x8e22x9 = Ext[_0xee2b[26]][_0xee2b[48]](_0x8e22x6(_0x8e22xa), _0x8e22x2, _0x8e22x9);
      });
    } else {
      _0x8e22x9 = Ext[_0xee2b[26]][_0xee2b[48]](_0x8e22x6(_0x8e22x7), _0x8e22x2, _0x8e22x9);
    }
  }, _0x8e22x3);
  return _0x8e22x3;
}, reduceEventIncomingDependencies:function(_0x8e22x4, _0x8e22x5, _0x8e22x3, _0x8e22x2) {
  var _0x8e22x6 = this;
  return _0x8e22x6[_0xee2b[1365]](_0x8e22x4, _0x8e22x5, _0x8e22x3, _0x8e22x2, function(_0x8e22x9) {
    var _0x8e22x1 = _0x8e22x9 && _0x8e22x9[_0xee2b[988]] ? _0x8e22x9[_0xee2b[32]]() : _0x8e22x9;
    return _0x8e22x6[_0xee2b[1360]][_0xee2b[1364]](_0x8e22x9, function() {
      return Ext[_0xee2b[26]][_0xee2b[173]](_0x8e22x6[_0xee2b[1005]](), function(_0x8e22x7) {
        return _0x8e22x7[_0xee2b[1309]]() == _0x8e22x1;
      });
    });
  });
}, reduceEventOutgoingDependencies:function(_0x8e22x4, _0x8e22x5, _0x8e22x3, _0x8e22x2) {
  var _0x8e22x6 = this;
  return _0x8e22x6[_0xee2b[1365]](_0x8e22x4, _0x8e22x5, _0x8e22x3, _0x8e22x2, function(_0x8e22x9) {
    var _0x8e22x1 = _0x8e22x9 && _0x8e22x9[_0xee2b[988]] ? _0x8e22x9[_0xee2b[32]]() : _0x8e22x9;
    return _0x8e22x6[_0xee2b[1360]][_0xee2b[1366]](_0x8e22x9, function() {
      return Ext[_0xee2b[26]][_0xee2b[173]](_0x8e22x6[_0xee2b[1005]](), function(_0x8e22x7) {
        return _0x8e22x7[_0xee2b[1308]]() == _0x8e22x1;
      });
    });
  });
}, mapEventDependencies:function(_0x8e22x4, _0x8e22x6, _0x8e22x5, _0x8e22x2, _0x8e22x3) {
  return this[_0xee2b[1365]](_0x8e22x4, function(_0x8e22x1, _0x8e22x9) {
    _0x8e22x5(_0x8e22x9) && _0x8e22x1[_0xee2b[11]](_0x8e22x9);
    return _0x8e22x1;
  }, [], _0x8e22x2, _0x8e22x3);
}, mapEventIncomingDependencies:function(_0x8e22x6, _0x8e22x3, _0x8e22x4, _0x8e22x5) {
  return this[_0xee2b[1367]](_0x8e22x6, function(_0x8e22x2, _0x8e22x1) {
    _0x8e22x4(_0x8e22x1) && _0x8e22x2[_0xee2b[11]](_0x8e22x1);
    return _0x8e22x2;
  }, [], _0x8e22x5);
}, mapEventOutgoingDependencies:function(_0x8e22x6, _0x8e22x3, _0x8e22x4, _0x8e22x5) {
  return this[_0xee2b[1368]](_0x8e22x6, function(_0x8e22x2, _0x8e22x1) {
    _0x8e22x4(_0x8e22x1) && _0x8e22x2[_0xee2b[11]](_0x8e22x1);
    return _0x8e22x2;
  }, [], _0x8e22x5);
}, getEventDependencies:function(_0x8e22x3, _0x8e22x6) {
  return this[_0xee2b[1369]](_0x8e22x3, Ext[_0xee2b[56]], Ext[_0xee2b[1083]], _0x8e22x6);
}, getEventIncomingDependencies:function(_0x8e22x3, _0x8e22x6) {
  return this[_0xee2b[1370]](_0x8e22x3, Ext[_0xee2b[56]], Ext[_0xee2b[1083]], _0x8e22x6);
}, getEventOutgoingDependencies:function(_0x8e22x3, _0x8e22x6) {
  return this[_0xee2b[1371]](_0x8e22x3, Ext[_0xee2b[56]], Ext[_0xee2b[1083]], _0x8e22x6);
}, getEventPredecessors:function(_0x8e22x4, _0x8e22x5) {
  var _0x8e22x6 = this, _0x8e22x3 = _0x8e22x6[_0xee2b[696]]();
  Ext[_0xee2b[133]] && Ext[_0xee2b[133]][_0xee2b[1373]](_0x8e22x3, _0xee2b[1372]);
  return _0x8e22x6[_0xee2b[1365]](_0x8e22x4, function(_0x8e22x2, _0x8e22x9) {
    var _0x8e22x1 = _0x8e22x9[_0xee2b[1340]](), _0x8e22x7 = _0x8e22x1 && _0x8e22x3[_0xee2b[1012]](_0x8e22x1);
    if (_0x8e22x7) {
      _0x8e22x2[_0xee2b[11]](_0x8e22x7);
    }
    return _0x8e22x2;
  }, [], _0x8e22x5, function(_0x8e22x2) {
    return _0x8e22x6[_0xee2b[1360]][_0xee2b[1364]](_0x8e22x2);
  });
}, getEventSuccessors:function(_0x8e22x4, _0x8e22x5) {
  var _0x8e22x6 = this, _0x8e22x3 = _0x8e22x6[_0xee2b[696]]();
  Ext[_0xee2b[133]] && Ext[_0xee2b[133]][_0xee2b[1373]](_0x8e22x3, _0xee2b[1374]);
  return _0x8e22x6[_0xee2b[1365]](_0x8e22x4, function(_0x8e22x2, _0x8e22x9) {
    var _0x8e22x7 = _0x8e22x9[_0xee2b[1342]](), _0x8e22x1 = _0x8e22x7 && _0x8e22x3[_0xee2b[1012]](_0x8e22x7);
    if (_0x8e22x1) {
      _0x8e22x2[_0xee2b[11]](_0x8e22x1);
    }
    return _0x8e22x2;
  }, [], _0x8e22x5, function(_0x8e22x2) {
    return _0x8e22x6[_0xee2b[1360]][_0xee2b[1366]](_0x8e22x2);
  });
}, removeEventDependencies:function(_0x8e22x6, _0x8e22x5) {
  var _0x8e22x3 = this, _0x8e22x4;
  _0x8e22x4 = _0x8e22x3[_0xee2b[1375]](_0x8e22x6, _0x8e22x5);
  _0x8e22x4[_0xee2b[4]] && _0x8e22x3[_0xee2b[63]](Ext[_0xee2b[26]][_0xee2b[1376]](_0x8e22x4));
}, removeEventIncomingDependencies:function(_0x8e22x6, _0x8e22x5) {
  var _0x8e22x3 = this, _0x8e22x4;
  _0x8e22x4 = _0x8e22x3[_0xee2b[1377]](_0x8e22x6, _0x8e22x5);
  _0x8e22x4[_0xee2b[4]] && _0x8e22x3[_0xee2b[63]](Ext[_0xee2b[26]][_0xee2b[1376]](_0x8e22x4));
}, removeEventOutgoingDependencies:function(_0x8e22x6, _0x8e22x5) {
  var _0x8e22x3 = this, _0x8e22x4;
  _0x8e22x4 = _0x8e22x3[_0xee2b[1378]](_0x8e22x6, _0x8e22x5);
  _0x8e22x4[_0xee2b[4]] && _0x8e22x3[_0xee2b[63]](Ext[_0xee2b[26]][_0xee2b[1376]](_0x8e22x4));
}, getDependencyForSourceAndTargetEvents:function(_0x8e22x3, _0x8e22x6) {
  var _0x8e22x4 = this;
  _0x8e22x3 = _0x8e22x3 && _0x8e22x3[_0xee2b[988]] && _0x8e22x3[_0xee2b[32]]() || _0x8e22x3;
  _0x8e22x6 = _0x8e22x6 && _0x8e22x6[_0xee2b[988]] && _0x8e22x6[_0xee2b[32]]() || _0x8e22x6;
  return _0x8e22x4[_0xee2b[1379]][_0xee2b[55]](_0x8e22x4[_0xee2b[45]][_0xee2b[1356]](_0x8e22x3, _0x8e22x6));
}, getEventsLinkingDependency:function(_0x8e22x6, _0x8e22x3) {
  var _0x8e22x4 = this;
  return _0x8e22x4[_0xee2b[1380]](_0x8e22x6, _0x8e22x3) || _0x8e22x4[_0xee2b[1380]](_0x8e22x3, _0x8e22x6);
}, isValidDependency:function(_0x8e22x4) {
  var _0x8e22x6 = _0x8e22x4[_0xee2b[1308]]();
  var _0x8e22x3 = _0x8e22x4[_0xee2b[1309]]();
  return _0x8e22x6 != null && _0x8e22x3 != null && _0x8e22x6 !== _0x8e22x3;
}, getHighlightedDependencies:function(_0x8e22x3) {
  return Ext[_0xee2b[26]][_0xee2b[48]](this[_0xee2b[1005]](), function(_0x8e22x6, _0x8e22x4) {
    if (_0x8e22x4[_0xee2b[1381]](_0x8e22x3)) {
      _0x8e22x6[_0xee2b[11]](_0x8e22x4);
    }
    return _0x8e22x6;
  }, []);
}, inheritableStatics:{makeDependencySourceTargetCompositeKey:function() {
  var _0x8e22x3 = [];
  return function(_0x8e22x4, _0x8e22x6) {
    _0x8e22x3[_0xee2b[4]] = 0;
    _0x8e22x3[_0xee2b[11]](_0xee2b[1382], _0x8e22x4, _0xee2b[1383], _0x8e22x6, _0xee2b[1058]);
    return _0x8e22x3[_0xee2b[73]](_0xee2b[27]);
  };
}()}});
Ext[_0xee2b[6]](_0xee2b[1384], {config:{eventStore:null, resourceStore:null, assignmentStore:null, dependencyStore:null}, eventStoreDetacher:null, resourceStoreDetacher:null, constructor:function(_0x8e22x3) {
  this[_0xee2b[35]](_0x8e22x3);
}, updateEventStore:function(_0x8e22x3, _0x8e22x4) {
  var _0x8e22x6 = this;
  Ext[_0xee2b[1004]](_0x8e22x6, _0xee2b[1000]);
  if (_0x8e22x3) {
    _0x8e22x6[_0xee2b[1000]] = _0x8e22x3[_0xee2b[149]]({idchanged:_0x8e22x6[_0xee2b[1385]], scope:_0x8e22x6, destroyable:true, priority:200});
  }
}, updateResourceStore:function(_0x8e22x3, _0x8e22x6) {
  var _0x8e22x4 = this;
  Ext[_0xee2b[1004]](_0x8e22x4, _0xee2b[1010]);
  if (_0x8e22x3) {
    _0x8e22x4[_0xee2b[1010]] = _0x8e22x3[_0xee2b[149]]({idchanged:_0x8e22x4[_0xee2b[1386]], scope:_0x8e22x4, destroyable:true, priority:200});
  }
}, onEventIdChanged:function(_0x8e22x1, _0x8e22x3, _0x8e22x5, _0x8e22x2) {
  var _0x8e22xa = this, _0x8e22x9 = _0x8e22xa[_0xee2b[1051]](), _0x8e22x4 = _0x8e22xa[_0xee2b[1306]](), _0x8e22x6, _0x8e22x7;
  if (_0x8e22x9) {
    _0x8e22x6 = _0x8e22xa[_0xee2b[1387]](_0x8e22x9, _0x8e22x5, _0x8e22x2);
  }
  if (_0x8e22x4) {
    _0x8e22x7 = _0x8e22xa[_0xee2b[1388]](_0x8e22x4, _0x8e22x5, _0x8e22x2);
  }
  if (_0x8e22x6 || _0x8e22x7) {
    _0x8e22x1[_0xee2b[149]](_0xee2b[724], function() {
      _0x8e22x6 && _0x8e22x6();
      _0x8e22x7 && _0x8e22x7();
    }, null, {single:true, priority:200});
  }
}, onResourceIdChanged:function(_0x8e22xa, _0x8e22x2, _0x8e22x6, _0x8e22x5) {
  var _0x8e22x7 = this, _0x8e22x1 = _0x8e22x7[_0xee2b[696]](), _0x8e22x9 = _0x8e22x7[_0xee2b[1051]](), _0x8e22x4, _0x8e22x3;
  if (_0x8e22x1 && !_0x8e22x9) {
    _0x8e22x4 = _0x8e22x7[_0xee2b[1389]](_0x8e22x1, _0x8e22x6, _0x8e22x5);
  }
  if (_0x8e22x9) {
    _0x8e22x3 = _0x8e22x7[_0xee2b[1390]](_0x8e22x9, _0x8e22x6, _0x8e22x5);
  }
  if (_0x8e22x4 || _0x8e22x9) {
    _0x8e22xa[_0xee2b[149]](_0xee2b[724], function() {
      _0x8e22x4 && _0x8e22x4();
      _0x8e22x3 && _0x8e22x3();
    }, null, {single:true, priority:200});
  }
}, getUpdateEventResourceIdFieldFn:function(_0x8e22x4, _0x8e22x5, _0x8e22x3) {
  var _0x8e22x6 = _0x8e22x4[_0xee2b[1005]]();
  return function() {
    Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x6, function(_0x8e22x2) {
      _0x8e22x2[_0xee2b[1008]]() == _0x8e22x5 && _0x8e22x2[_0xee2b[1090]](_0x8e22x3);
    });
  };
}, getUpdateAssignmentEventIdFieldFn:function(_0x8e22x4, _0x8e22x5, _0x8e22x6) {
  var _0x8e22x3 = _0x8e22x4[_0xee2b[1081]](_0x8e22x5);
  return function() {
    Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x3, function(_0x8e22x2) {
      _0x8e22x2[_0xee2b[997]]() == _0x8e22x5 && _0x8e22x2[_0xee2b[1089]](_0x8e22x6);
    });
  };
}, getUpdateAssignmentResourceIdFieldFn:function(_0x8e22x4, _0x8e22x5, _0x8e22x6) {
  var _0x8e22x3 = _0x8e22x4[_0xee2b[1082]](_0x8e22x5);
  return function() {
    Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x3, function(_0x8e22x2) {
      _0x8e22x2[_0xee2b[1008]]() == _0x8e22x5 && _0x8e22x2[_0xee2b[1090]](_0x8e22x6);
    });
  };
}, getUpdateDependencySourceTargedIdFieldFn:function(_0x8e22x6, _0x8e22x5, _0x8e22x3) {
  var _0x8e22x4 = _0x8e22x6[_0xee2b[1375]](_0x8e22x5);
  return function() {
    Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x4, function(_0x8e22x2) {
      _0x8e22x2[_0xee2b[1308]]() == _0x8e22x5 && _0x8e22x2[_0xee2b[1338]](_0x8e22x3);
      _0x8e22x2[_0xee2b[1309]]() == _0x8e22x5 && _0x8e22x2[_0xee2b[1339]](_0x8e22x3);
    });
  };
}});
Ext[_0xee2b[6]](_0xee2b[1391], {config:{eventStore:null, resourceStore:null, assignmentStore:null, dependencyStore:null}, eventStoreDetacher:null, resourceStoreDetacher:null, assignmentStoreDetacher:null, dependencyStoreDetacher:null, constructor:function(_0x8e22x3) {
  this[_0xee2b[35]](_0x8e22x3);
}, updateEventStore:function(_0x8e22x3, _0x8e22x4) {
  var _0x8e22x6 = this;
  Ext[_0xee2b[1004]](_0x8e22x6, _0xee2b[1000]);
  if (_0x8e22x3 && _0x8e22x3[_0xee2b[65]]) {
    _0x8e22x6[_0xee2b[1000]] = _0x8e22x3[_0xee2b[149]]({beforesync:_0x8e22x6[_0xee2b[1392]], scope:_0x8e22x6, destroyable:true, priority:100});
  }
}, updateResourceStore:function(_0x8e22x3, _0x8e22x6) {
  var _0x8e22x4 = this;
  Ext[_0xee2b[1004]](_0x8e22x4, _0xee2b[1010]);
  if (_0x8e22x3 && _0x8e22x3[_0xee2b[65]]) {
    _0x8e22x4[_0xee2b[1010]] = _0x8e22x3[_0xee2b[149]]({beforesync:_0x8e22x4[_0xee2b[1393]], scope:_0x8e22x4, destroyable:true, priority:100});
  }
}, updateAssignmentStore:function(_0x8e22x3, _0x8e22x6) {
  var _0x8e22x4 = this;
  Ext[_0xee2b[1004]](_0x8e22x4, _0xee2b[1001]);
  if (_0x8e22x3 && _0x8e22x3[_0xee2b[65]]) {
    _0x8e22x4[_0xee2b[1001]] = _0x8e22x3[_0xee2b[149]]({beforesync:_0x8e22x4[_0xee2b[1394]], scope:_0x8e22x4, destroyable:true, priority:100});
  }
}, updateDependencyStore:function(_0x8e22x4, _0x8e22x3) {
  var _0x8e22x6 = this;
  Ext[_0xee2b[1004]](_0x8e22x6, _0xee2b[1324]);
  if (_0x8e22x4 && _0x8e22x4[_0xee2b[65]]) {
    _0x8e22x6[_0xee2b[1324]] = _0x8e22x4[_0xee2b[149]]({beforesync:_0x8e22x6[_0xee2b[1395]], scope:_0x8e22x6, destroyable:true, priority:100});
  }
}, onEventStoreBeforeSync:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  _0x8e22x6[_0xee2b[1396]](_0x8e22x3);
  return _0x8e22x6[_0xee2b[1397]](_0x8e22x3);
}, onResourceStoreBeforeSync:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  _0x8e22x6[_0xee2b[1396]](_0x8e22x3);
  return _0x8e22x6[_0xee2b[1397]](_0x8e22x3);
}, onAssignmentStoreBeforeSync:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  _0x8e22x6[_0xee2b[1396]](_0x8e22x3);
  return _0x8e22x6[_0xee2b[1397]](_0x8e22x3);
}, onDependencyStoreBeforeSync:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  _0x8e22x6[_0xee2b[1396]](_0x8e22x3);
  return _0x8e22x6[_0xee2b[1397]](_0x8e22x3);
}, removeNonPersistableRecordsToCreate:function(_0x8e22x6) {
  var _0x8e22x3 = _0x8e22x6[_0xee2b[831]] || [], _0x8e22x5, _0x8e22x4;
  for (_0x8e22x4 = _0x8e22x3[_0xee2b[4]] - 1; _0x8e22x4 >= 0; --_0x8e22x4) {
    _0x8e22x5 = _0x8e22x3[_0x8e22x4];
    if (!_0x8e22x5[_0xee2b[1398]]()) {
      Ext[_0xee2b[26]][_0xee2b[63]](_0x8e22x3, _0x8e22x5);
    }
  }
  if (_0x8e22x3[_0xee2b[4]] === 0) {
    delete _0x8e22x6[_0xee2b[831]];
  }
}, shallContinueSync:function(_0x8e22x3) {
  return Boolean(_0x8e22x3[_0xee2b[831]] && _0x8e22x3[_0xee2b[831]][_0xee2b[4]] > 0 || _0x8e22x3[_0xee2b[724]] && _0x8e22x3[_0xee2b[724]][_0xee2b[4]] > 0 || _0x8e22x3[_0xee2b[218]] && _0x8e22x3[_0xee2b[218]][_0xee2b[4]] > 0);
}});
Ext[_0xee2b[6]](_0xee2b[1399], {extend:_0xee2b[985], requires:[_0xee2b[996]], eventStore:null, eventStoreDetacher:null, resourceStoreDetacher:null, constructor:function(_0x8e22x4) {
  var _0x8e22xa = this, _0x8e22x8 = _0x8e22x4[_0xee2b[1007]]();
  _0x8e22xa[_0xee2b[9]]();
  function _0x8e22x10(_0x8e22xf, _0x8e22xe) {
    Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22xe, function(_0x8e22xc) {
      _0x8e22xa[_0xee2b[255]](_0x8e22xc[_0xee2b[1008]](), _0x8e22xc);
    });
  }
  function _0x8e22x2(_0x8e22xf, _0x8e22xe) {
    Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22xe, function(_0x8e22xc) {
      _0x8e22xa[_0xee2b[63]](_0x8e22xc[_0xee2b[1008]](), _0x8e22xc);
    });
  }
  function _0x8e22x5(_0x8e22xc, _0x8e22x19, _0x8e22xf, _0x8e22x11) {
    var _0x8e22x18 = _0x8e22x19[_0xee2b[1009]], _0x8e22xb = _0x8e22x19[_0xee2b[52]] && _0x8e22x18 in _0x8e22x19[_0xee2b[52]], _0x8e22xe = _0x8e22xb && _0x8e22x19[_0xee2b[52]][_0x8e22x18];
    if (_0x8e22xb) {
      _0x8e22xa[_0xee2b[999]](_0x8e22xe, _0x8e22x19[_0xee2b[1008]](), _0x8e22x19);
    }
  }
  function _0x8e22x9() {
    _0x8e22xa[_0xee2b[231]]();
  }
  function _0x8e22xd(_0x8e22xf, _0x8e22xe, _0x8e22xc) {
    _0x8e22xa[_0xee2b[231]]();
    _0x8e22x3(_0x8e22xe);
  }
  function _0x8e22x7(_0x8e22xf, _0x8e22xc, _0x8e22xb, _0x8e22xe) {
    _0x8e22xa[_0xee2b[999]](_0x8e22xb, _0x8e22xe);
  }
  function _0x8e22x1(_0x8e22xe, _0x8e22xf) {
    Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22xf, function(_0x8e22xc) {
      _0x8e22xa[_0xee2b[231]](_0x8e22xc);
    });
  }
  function _0x8e22x6() {
    _0x8e22xa[_0xee2b[231]]();
  }
  function _0x8e22x3(_0x8e22xe) {
    Ext[_0xee2b[218]](_0x8e22xa[_0xee2b[1010]]);
    _0x8e22xa[_0xee2b[1010]] = _0x8e22xe && _0x8e22xe[_0xee2b[149]]({idchanged:_0x8e22x7, remove:_0x8e22x1, clear:_0x8e22x6, cacheresethint:_0x8e22x6, rootchange:_0x8e22x6, priority:100, destroyable:true});
  }
  _0x8e22xa[_0xee2b[1000]] = _0x8e22x4[_0xee2b[149]]({add:_0x8e22x10, remove:_0x8e22x2, update:_0x8e22x5, clear:_0x8e22x9, cacheresethint:_0x8e22x9, rootchange:_0x8e22x9, resourcestorechange:_0x8e22xd, priority:100, destroyable:true});
  _0x8e22xa[_0xee2b[1400]] = _0x8e22x4[_0xee2b[355]]()[_0xee2b[149]](_0xee2b[333], _0x8e22x9, this, {priority:1002, destroyable:true});
  _0x8e22x3(_0x8e22x8);
  _0x8e22xa[_0xee2b[1071]] = _0x8e22x4;
}, destroy:function() {
  var _0x8e22x3 = this;
  Ext[_0xee2b[1004]](_0x8e22x3, _0xee2b[1000], _0xee2b[1400], _0xee2b[1010]);
  _0x8e22x3[_0xee2b[1071]] = null;
}, get:function(_0x8e22x3, _0x8e22x6) {
  var _0x8e22x4 = this;
  _0x8e22x3 = _0x8e22x4[_0xee2b[990]](_0x8e22x3);
  _0x8e22x6 = _0x8e22x6 || function() {
    return Ext[_0xee2b[26]][_0xee2b[173]](_0x8e22x4[_0xee2b[1071]][_0xee2b[1005]](), function(_0x8e22x5) {
      return _0x8e22x5[_0xee2b[1008]]() == _0x8e22x3;
    });
  };
  return _0x8e22x4[_0xee2b[9]]([_0x8e22x3, _0x8e22x6]);
}});
Ext[_0xee2b[6]](_0xee2b[1401], {extend:_0xee2b[17], requires:[_0xee2b[1140], _0xee2b[1384], _0xee2b[1391], _0xee2b[1399]], isEventStore:true, assignmentStore:null, resourceStore:null, resourceEventsCache:null, idConsistencyManager:null, modelPersistencyManager:null, mixinConfig:{after:{constructor:_0xee2b[217], destroy:_0xee2b[218]}}, constructor:function() {
  var _0x8e22x3 = this;
  _0x8e22x3[_0xee2b[1070]] = _0x8e22x3[_0xee2b[1402]]();
  _0x8e22x3[_0xee2b[1403]] = _0x8e22x3[_0xee2b[1404]]();
  _0x8e22x3[_0xee2b[1405]] = _0x8e22x3[_0xee2b[1406]]();
}, destroy:function() {
  var _0x8e22x3 = this;
  Ext[_0xee2b[1004]](_0x8e22x3, _0xee2b[1070], _0xee2b[1403], _0xee2b[1405]);
}, createResourceEventsCache:function() {
  return new Sch[_0xee2b[22]][_0xee2b[49]].ResourceEventsCache(this);
}, createIdConsistencyManager:function() {
  var _0x8e22x3 = this;
  return new Sch[_0xee2b[22]][_0xee2b[49]].IdConsistencyManager({eventStore:_0x8e22x3, resourceStore:_0x8e22x3[_0xee2b[1007]](), assignmentStore:_0x8e22x3[_0xee2b[1051]](), dependencyStore:_0x8e22x3[_0xee2b[1306]]()});
}, createModelPersistencyManager:function() {
  var _0x8e22x3 = this;
  return new Sch[_0xee2b[22]][_0xee2b[49]].ModelPersistencyManager({eventStore:_0x8e22x3, resourceStore:_0x8e22x3[_0xee2b[1007]](), assignmentStore:_0x8e22x3[_0xee2b[1051]](), dependencyStore:_0x8e22x3[_0xee2b[1306]]()});
}, getResourceStore:function() {
  return this[_0xee2b[1302]];
}, setResourceStore:function(_0x8e22x6) {
  var _0x8e22x3 = this, _0x8e22x4 = _0x8e22x3[_0xee2b[1302]];
  if (_0x8e22x3[_0xee2b[1302]]) {
    _0x8e22x3[_0xee2b[1302]][_0xee2b[1407]](null);
    _0x8e22x3[_0xee2b[1403]] && _0x8e22x3[_0xee2b[1403]][_0xee2b[1408]](null);
    _0x8e22x3[_0xee2b[1405]] && _0x8e22x3[_0xee2b[1405]][_0xee2b[1408]](null);
  }
  _0x8e22x3[_0xee2b[1302]] = _0x8e22x6 && Ext[_0xee2b[1072]][_0xee2b[131]](_0x8e22x6) || null;
  if (_0x8e22x3[_0xee2b[1302]]) {
    _0x8e22x3[_0xee2b[1405]] && _0x8e22x3[_0xee2b[1405]][_0xee2b[1408]](_0x8e22x3[_0xee2b[1302]]);
    _0x8e22x3[_0xee2b[1403]] && _0x8e22x3[_0xee2b[1403]][_0xee2b[1408]](_0x8e22x3[_0xee2b[1302]]);
    _0x8e22x6[_0xee2b[1407]](_0x8e22x3);
  }
  if ((_0x8e22x4 || _0x8e22x6) && _0x8e22x4 !== _0x8e22x6) {
    _0x8e22x3[_0xee2b[180]](_0xee2b[1409], _0x8e22x3, _0x8e22x6, _0x8e22x4);
  }
}, getAssignmentStore:function() {
  return this[_0xee2b[1003]];
}, setAssignmentStore:function(_0x8e22x6) {
  var _0x8e22x3 = this, _0x8e22x4 = _0x8e22x3[_0xee2b[1003]];
  if (_0x8e22x3[_0xee2b[1003]]) {
    _0x8e22x3[_0xee2b[1003]][_0xee2b[1407]](null);
    _0x8e22x3[_0xee2b[1403]] && _0x8e22x3[_0xee2b[1403]][_0xee2b[1410]](null);
    _0x8e22x3[_0xee2b[1405]] && _0x8e22x3[_0xee2b[1405]][_0xee2b[1410]](null);
  }
  _0x8e22x3[_0xee2b[1003]] = _0x8e22x6 && Ext[_0xee2b[1072]][_0xee2b[131]](_0x8e22x6) || null;
  if (_0x8e22x3[_0xee2b[1003]]) {
    _0x8e22x3[_0xee2b[1405]] && _0x8e22x3[_0xee2b[1405]][_0xee2b[1410]](_0x8e22x3[_0xee2b[1003]]);
    _0x8e22x3[_0xee2b[1403]] && _0x8e22x3[_0xee2b[1403]][_0xee2b[1410]](_0x8e22x3[_0xee2b[1003]]);
    _0x8e22x3[_0xee2b[1003]][_0xee2b[1407]](_0x8e22x3);
    Ext[_0xee2b[218]](_0x8e22x3[_0xee2b[1070]]);
  } else {
    _0x8e22x3[_0xee2b[1070]] = _0x8e22x3[_0xee2b[1402]]();
  }
  if ((_0x8e22x4 || _0x8e22x6) && _0x8e22x4 !== _0x8e22x6) {
    _0x8e22x3[_0xee2b[180]](_0xee2b[1411], _0x8e22x3, _0x8e22x6, _0x8e22x4);
  }
}, getDependencyStore:function() {
  return this[_0xee2b[1303]];
}, setDependencyStore:function(_0x8e22x3) {
  var _0x8e22x6 = this, _0x8e22x4 = _0x8e22x6[_0xee2b[1357]];
  if (_0x8e22x6[_0xee2b[1303]]) {
    _0x8e22x6[_0xee2b[1303]][_0xee2b[1407]](null);
    _0x8e22x6[_0xee2b[1403]] && _0x8e22x6[_0xee2b[1403]][_0xee2b[1412]](null);
    _0x8e22x6[_0xee2b[1405]] && _0x8e22x6[_0xee2b[1405]][_0xee2b[1412]](null);
  }
  _0x8e22x6[_0xee2b[1303]] = _0x8e22x3 && Ext[_0xee2b[1072]][_0xee2b[131]](_0x8e22x3) || null;
  if (_0x8e22x6[_0xee2b[1303]]) {
    _0x8e22x6[_0xee2b[1405]] && _0x8e22x6[_0xee2b[1405]][_0xee2b[1412]](_0x8e22x6[_0xee2b[1303]]);
    _0x8e22x6[_0xee2b[1403]] && _0x8e22x6[_0xee2b[1403]][_0xee2b[1412]](_0x8e22x6[_0xee2b[1303]]);
    _0x8e22x6[_0xee2b[1303]][_0xee2b[1407]](_0x8e22x6);
  }
  if ((_0x8e22x4 || _0x8e22x3) && _0x8e22x4 !== _0x8e22x3) {
    _0x8e22x6[_0xee2b[180]](_0xee2b[1413], _0x8e22x6, _0x8e22x3, _0x8e22x4);
  }
}, isDateRangeAvailable:function(_0x8e22x9, _0x8e22x3, _0x8e22x4, _0x8e22x2) {
  var _0x8e22x1 = Sch[_0xee2b[49]][_0xee2b[703]], _0x8e22x6 = _0x8e22x2 ? this[_0xee2b[699]](_0x8e22x2) : this[_0xee2b[1005]](), _0x8e22x5 = true;
  if (Sch[_0xee2b[327]][_0xee2b[1414]] && _0x8e22x4 instanceof Sch[_0xee2b[327]][_0xee2b[1414]]) {
    _0x8e22x4 = _0x8e22x4[_0xee2b[1052]](this);
  }
  Ext[_0xee2b[25]](_0x8e22x6, function(_0x8e22x7) {
    _0x8e22x5 = _0x8e22x4 === _0x8e22x7 || !_0x8e22x1[_0xee2b[714]](_0x8e22x9, _0x8e22x3, _0x8e22x7[_0xee2b[712]](), _0x8e22x7[_0xee2b[713]]());
    return _0x8e22x5;
  });
  return _0x8e22x5;
}, getEventsInTimeSpan:function(_0x8e22x1, _0x8e22x6, _0x8e22x3) {
  var _0x8e22x5 = new Ext[_0xee2b[49]].MixedCollection();
  var _0x8e22x4 = [];
  if (_0x8e22x3 !== false) {
    var _0x8e22x2 = Sch[_0xee2b[49]][_0xee2b[703]];
    this[_0xee2b[1415]](function(_0x8e22xa, _0x8e22x7, _0x8e22x9) {
      if (_0x8e22x2[_0xee2b[714]](_0x8e22x7, _0x8e22x9, _0x8e22x1, _0x8e22x6)) {
        _0x8e22x4[_0xee2b[11]](_0x8e22xa);
      }
    });
  } else {
    this[_0xee2b[1415]](function(_0x8e22xa, _0x8e22x7, _0x8e22x9) {
      if (_0x8e22x7 - _0x8e22x1 >= 0 && _0x8e22x6 - _0x8e22x9 >= 0) {
        _0x8e22x4[_0xee2b[11]](_0x8e22xa);
      }
    });
  }
  _0x8e22x5[_0xee2b[1416]](_0x8e22x4);
  return _0x8e22x5;
}, getEventsByStartDate:function(_0x8e22x4) {
  var _0x8e22x6 = Sch[_0xee2b[49]][_0xee2b[703]];
  var _0x8e22x3 = [];
  this[_0xee2b[1415]](function(_0x8e22x1, _0x8e22x2, _0x8e22x5) {
    if (_0x8e22x6[_0xee2b[1417]](_0x8e22x2, _0x8e22x4, _0x8e22x6.DAY) === 0) {
      _0x8e22x3[_0xee2b[11]](_0x8e22x1);
    }
  });
  return _0x8e22x3;
}, forEachScheduledEvent:function(_0x8e22x6, _0x8e22x3) {
  this[_0xee2b[25]](function(_0x8e22x2) {
    var _0x8e22x5 = _0x8e22x2[_0xee2b[712]](), _0x8e22x4 = _0x8e22x2[_0xee2b[713]]();
    if (_0x8e22x5 && _0x8e22x4) {
      return _0x8e22x6[_0xee2b[293]](_0x8e22x3 || this, _0x8e22x2, _0x8e22x5, _0x8e22x4);
    }
  }, this);
}, getTotalTimeSpan:function() {
  var _0x8e22x3 = Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[1418]], _0x8e22x6 = Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[1419]], _0x8e22x4 = Sch[_0xee2b[49]][_0xee2b[703]];
  this[_0xee2b[25]](function(_0x8e22x5) {
    if (_0x8e22x5[_0xee2b[712]]()) {
      _0x8e22x3 = _0x8e22x4[_0xee2b[203]](_0x8e22x5[_0xee2b[712]](), _0x8e22x3);
    }
    if (_0x8e22x5[_0xee2b[713]]()) {
      _0x8e22x6 = _0x8e22x4[_0xee2b[715]](_0x8e22x5[_0xee2b[713]](), _0x8e22x6);
    }
  });
  _0x8e22x3 = _0x8e22x3 < Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[1418]] ? _0x8e22x3 : null;
  _0x8e22x6 = _0x8e22x6 > Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[1419]] ? _0x8e22x6 : null;
  this[_0xee2b[1420]] = {start:_0x8e22x3 || null, end:_0x8e22x6 || _0x8e22x3 || null};
  return this[_0xee2b[1420]];
}, filterEventsForResource:function(_0x8e22x5, _0x8e22x4, _0x8e22x6) {
  var _0x8e22x3 = _0x8e22x5[_0xee2b[1421]](this);
  return Ext[_0xee2b[26]][_0xee2b[173]](_0x8e22x3, _0x8e22x4, _0x8e22x6 || this);
}, append:function(_0x8e22x3) {
  throw _0xee2b[1422];
}, getResourcesForEvent:function(_0x8e22x5) {
  var _0x8e22x4 = this, _0x8e22x2 = _0x8e22x4[_0xee2b[1051]](), _0x8e22x6 = _0x8e22x4[_0xee2b[1007]](), _0x8e22x3;
  if (_0x8e22x2) {
    _0x8e22x3 = _0x8e22x2[_0xee2b[1093]](_0x8e22x5);
  } else {
    if (_0x8e22x6) {
      _0x8e22x5 = _0x8e22x5 instanceof Sch[_0xee2b[327]][_0xee2b[1423]] && _0x8e22x5 || _0x8e22x4[_0xee2b[1012]](_0x8e22x5);
      _0x8e22x3 = _0x8e22x5 && _0x8e22x6[_0xee2b[1012]](_0x8e22x5[_0xee2b[1008]]());
      _0x8e22x3 = _0x8e22x3 && [_0x8e22x3] || [];
    } else {
      _0x8e22x3 = [];
    }
  }
  return _0x8e22x3;
}, getEventsForResource:function(_0x8e22x4) {
  var _0x8e22x6 = this, _0x8e22x5 = _0x8e22x6[_0xee2b[1051]](), _0x8e22x3;
  if (_0x8e22x5) {
    _0x8e22x3 = _0x8e22x5[_0xee2b[699]](_0x8e22x4);
  } else {
    if (_0x8e22x6[_0xee2b[1070]]) {
      _0x8e22x3 = _0x8e22x6[_0xee2b[1070]][_0xee2b[55]](_0x8e22x4);
    } else {
      _0x8e22x3 = [];
    }
  }
  return _0x8e22x3;
}, getAssignmentsForEvent:function(_0x8e22x6) {
  var _0x8e22x3 = this, _0x8e22x4 = _0x8e22x3[_0xee2b[1051]]();
  return _0x8e22x4 && _0x8e22x4[_0xee2b[1081]](_0x8e22x6) || [];
}, getAssignmentsForResource:function(_0x8e22x6) {
  var _0x8e22x3 = this, _0x8e22x4 = _0x8e22x3[_0xee2b[1051]]();
  return _0x8e22x4 && _0x8e22x4[_0xee2b[1082]](_0x8e22x6) || [];
}, assignEventToResource:function(_0x8e22x6, _0x8e22x4) {
  var _0x8e22x3 = this, _0x8e22x5 = _0x8e22x3[_0xee2b[1051]]();
  if (_0x8e22x5) {
    _0x8e22x5[_0xee2b[1424]](_0x8e22x6, _0x8e22x4);
  } else {
    if (Ext[_0xee2b[307]](_0x8e22x4)) {
      _0x8e22x4 = _0x8e22x4[0];
    }
    _0x8e22x6 = _0x8e22x6 instanceof Sch[_0xee2b[327]][_0xee2b[1423]] && _0x8e22x6 || _0x8e22x3[_0xee2b[1012]](_0x8e22x6);
    _0x8e22x4 = _0x8e22x4 instanceof Sch[_0xee2b[327]][_0xee2b[606]] ? _0x8e22x4[_0xee2b[32]]() : _0x8e22x4;
    _0x8e22x6 && _0x8e22x6[_0xee2b[1090]](_0x8e22x4);
  }
}, unassignEventFromResource:function(_0x8e22x6, _0x8e22x4) {
  var _0x8e22x3 = this, _0x8e22x5 = _0x8e22x3[_0xee2b[1051]]();
  if (_0x8e22x5) {
    _0x8e22x5[_0xee2b[1425]](_0x8e22x6, _0x8e22x4);
  } else {
    _0x8e22x6 = _0x8e22x6 instanceof Sch[_0xee2b[327]][_0xee2b[1423]] && _0x8e22x6 || _0x8e22x3[_0xee2b[1012]](_0x8e22x6);
    _0x8e22x4 = _0x8e22x4 instanceof Sch[_0xee2b[327]][_0xee2b[606]] ? _0x8e22x4[_0xee2b[32]]() : _0x8e22x4;
    if (_0x8e22x6 && (typeof _0x8e22x4 == _0xee2b[317] || _0x8e22x6[_0xee2b[1008]]() == _0x8e22x4)) {
      _0x8e22x6[_0xee2b[1090]](null);
    }
  }
}, reassignEventFromResourceToResource:function(_0x8e22x1, _0x8e22x6, _0x8e22x4) {
  var _0x8e22x2 = this, _0x8e22x9 = _0x8e22x2[_0xee2b[1051]]();
  var _0x8e22x5 = _0x8e22x4 instanceof Sch[_0xee2b[327]][_0xee2b[606]] ? _0x8e22x4[_0xee2b[32]]() : _0x8e22x4;
  var _0x8e22x3 = _0x8e22x6 instanceof Sch[_0xee2b[327]][_0xee2b[606]] ? _0x8e22x6[_0xee2b[32]]() : _0x8e22x6;
  if (_0x8e22x9) {
    var _0x8e22x7 = _0x8e22x9[_0xee2b[1092]](_0x8e22x1, _0x8e22x6);
    if (_0x8e22x7) {
      _0x8e22x7[_0xee2b[1090]](_0x8e22x5);
    } else {
      _0x8e22x9[_0xee2b[1424]](_0x8e22x1, _0x8e22x4);
    }
  } else {
    _0x8e22x1 = _0x8e22x1 instanceof Sch[_0xee2b[327]][_0xee2b[1423]] && _0x8e22x1 || _0x8e22x2[_0xee2b[1012]](_0x8e22x1);
    if (_0x8e22x1[_0xee2b[1008]]() == _0x8e22x3) {
      _0x8e22x1[_0xee2b[1090]](_0x8e22x5);
    }
  }
}, isEventAssignedToResource:function(_0x8e22x4, _0x8e22x5) {
  var _0x8e22x6 = this, _0x8e22x2 = _0x8e22x6[_0xee2b[1051]](), _0x8e22x3;
  if (_0x8e22x2) {
    _0x8e22x3 = _0x8e22x2[_0xee2b[1088]](_0x8e22x4, _0x8e22x5);
  } else {
    _0x8e22x4 = _0x8e22x4 instanceof Sch[_0xee2b[327]][_0xee2b[1423]] && _0x8e22x4 || _0x8e22x6[_0xee2b[1012]](_0x8e22x4);
    _0x8e22x5 = _0x8e22x5 instanceof Sch[_0xee2b[327]][_0xee2b[606]] ? _0x8e22x5[_0xee2b[32]]() : _0x8e22x5;
    _0x8e22x3 = _0x8e22x4 && _0x8e22x4[_0xee2b[1008]]() == _0x8e22x5 || false;
  }
  return _0x8e22x3;
}, removeAssignmentsForEvent:function(_0x8e22x6) {
  var _0x8e22x3 = this, _0x8e22x4 = _0x8e22x3[_0xee2b[1051]]();
  if (_0x8e22x4) {
    _0x8e22x4[_0xee2b[1091]](_0x8e22x6);
  } else {
    _0x8e22x6 = _0x8e22x6 instanceof Sch[_0xee2b[327]][_0xee2b[1423]] && _0x8e22x6 || _0x8e22x3[_0xee2b[1012]](_0x8e22x6);
    _0x8e22x6 && _0x8e22x6[_0xee2b[1090]](null);
  }
}, removeAssignmentsForResource:function(_0x8e22x4) {
  var _0x8e22x6 = this, _0x8e22x5 = _0x8e22x6[_0xee2b[1051]](), _0x8e22x3 = _0x8e22x6[_0xee2b[1007]]();
  if (_0x8e22x5) {
    _0x8e22x5[_0xee2b[1426]](_0x8e22x4);
  } else {
    if (_0x8e22x3) {
      _0x8e22x4 = _0x8e22x4 instanceof Sch[_0xee2b[327]][_0xee2b[606]] && _0x8e22x4 || _0x8e22x3[_0xee2b[1012]](_0x8e22x4);
      _0x8e22x4 && Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x6[_0xee2b[1070]][_0xee2b[55]](_0x8e22x4), function(_0x8e22x2) {
        _0x8e22x2[_0xee2b[1090]](null);
      });
    } else {
      _0x8e22x4 = _0x8e22x4 instanceof Sch[_0xee2b[327]][_0xee2b[606]] ? _0x8e22x4[_0xee2b[32]]() : _0x8e22x4;
      Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x6[_0xee2b[1005]](), function(_0x8e22x2) {
        _0x8e22x2[_0xee2b[1008]]() == _0x8e22x4 && _0x8e22x2[_0xee2b[1090]](null);
      });
    }
  }
}, isEventPersistable:function(_0x8e22x2) {
  var _0x8e22x5 = this, _0x8e22x9 = _0x8e22x5[_0xee2b[1051]](), _0x8e22x1, _0x8e22x4, _0x8e22x6, _0x8e22x3 = true;
  if (!_0x8e22x9) {
    _0x8e22x1 = _0x8e22x2[_0xee2b[1427]]();
    for (_0x8e22x4 = 0, _0x8e22x6 = _0x8e22x1[_0xee2b[4]]; _0x8e22x3 && _0x8e22x4 < _0x8e22x6; ++_0x8e22x4) {
      _0x8e22x3 = _0x8e22x1[_0x8e22x4][_0xee2b[30]] !== true;
    }
  }
  return _0x8e22x3;
}});
Ext[_0xee2b[6]](_0xee2b[1428], {extend:_0xee2b[1019], idProperty:_0xee2b[1032], isRecurrenceModel:true, customizableFields:[{name:_0xee2b[560], defaultValue:_0xee2b[1429]}, {name:_0xee2b[1430], type:_0xee2b[1103], defaultValue:1}, {name:_0xee2b[1200], type:_0xee2b[1097]}, {name:_0xee2b[1431], type:_0xee2b[1103], allowNull:true}, {name:_0xee2b[1432], convert:function(_0x8e22x6, _0x8e22x3) {
  if (_0x8e22x6) {
    if (Ext[_0xee2b[363]](_0x8e22x6)) {
      _0x8e22x6 = _0x8e22x6[_0xee2b[496]](_0xee2b[72]);
    }
  } else {
    _0x8e22x6 = null;
  }
  return _0x8e22x6;
}, isEqual:function(_0x8e22x6, _0x8e22x3) {
  return String(_0x8e22x6) === String(_0x8e22x3);
}}, {name:_0xee2b[1433], convert:function(_0x8e22x6, _0x8e22x3) {
  if (_0x8e22x6) {
    if (Ext[_0xee2b[363]](_0x8e22x6)) {
      _0x8e22x6 = Ext[_0xee2b[26]][_0xee2b[41]](_0x8e22x6[_0xee2b[496]](_0xee2b[72]), function(_0x8e22x4) {
        return parseInt(_0x8e22x4, 10);
      });
    }
  } else {
    _0x8e22x6 = null;
  }
  return _0x8e22x6;
}, isEqual:function(_0x8e22x6, _0x8e22x3) {
  return String(_0x8e22x6) === String(_0x8e22x3);
}}, {name:_0xee2b[1434], convert:function(_0x8e22x6, _0x8e22x3) {
  if (_0x8e22x6) {
    if (Ext[_0xee2b[363]](_0x8e22x6)) {
      _0x8e22x6 = Ext[_0xee2b[26]][_0xee2b[41]](_0x8e22x6[_0xee2b[496]](_0xee2b[72]), function(_0x8e22x4) {
        return parseInt(_0x8e22x4, 10);
      });
    }
  } else {
    _0x8e22x6 = null;
  }
  return _0x8e22x6;
}, isEqual:function(_0x8e22x6, _0x8e22x3) {
  return String(_0x8e22x6) === String(_0x8e22x3);
}}, {name:_0xee2b[1435], convert:function(_0x8e22x6, _0x8e22x3) {
  if (_0x8e22x6) {
    if (Ext[_0xee2b[363]](_0x8e22x6)) {
      _0x8e22x6 = Ext[_0xee2b[26]][_0xee2b[41]](_0x8e22x6[_0xee2b[496]](_0xee2b[72]), function(_0x8e22x4) {
        return parseInt(_0x8e22x4, 10);
      });
    }
  } else {
    _0x8e22x6 = null;
  }
  return _0x8e22x6;
}, isEqual:function(_0x8e22x6, _0x8e22x3) {
  return String(_0x8e22x6) === String(_0x8e22x3);
}}], frequencyField:_0xee2b[560], intervalField:_0xee2b[1430], endDateField:_0xee2b[1200], countField:_0xee2b[1431], daysField:_0xee2b[1432], monthDaysField:_0xee2b[1433], monthsField:_0xee2b[1434], positionsField:_0xee2b[1435], inheritableStatics:{DAILY:_0xee2b[1429], WEEKLY:_0xee2b[1436], MONTHLY:_0xee2b[1437], YEARLY:_0xee2b[1438]}, dateFormat:_0xee2b[1439], event:null, rule:null, suspendedEventNotifying:0, constructor:function(_0x8e22x3) {
  _0x8e22x3 = _0x8e22x3 || {};
  var _0x8e22x4, _0x8e22x6;
  if (_0x8e22x3[_0xee2b[1440]]) {
    _0x8e22x6 = _0x8e22x3[_0xee2b[1440]];
    delete _0x8e22x3[_0xee2b[1440]];
  }
  if (_0x8e22x3[_0xee2b[1441]]) {
    _0x8e22x4 = _0x8e22x3[_0xee2b[1441]];
    delete _0x8e22x3[_0xee2b[1441]];
  }
  this[_0xee2b[9]](arguments);
  this[_0xee2b[1442]]();
  if (_0x8e22x4) {
    this[_0xee2b[1443]](_0x8e22x4);
  }
  this[_0xee2b[1444]]();
  this[_0xee2b[1440]] = _0x8e22x6;
}, sanitize:function() {
  var _0x8e22x2 = this, _0x8e22x9 = _0x8e22x2[_0xee2b[1445]](), _0x8e22x5 = _0x8e22x2[_0xee2b[1052]](), _0x8e22x4 = _0x8e22x5 && _0x8e22x5[_0xee2b[712]]();
  _0x8e22x2[_0xee2b[1446]] = true;
  switch(_0x8e22x9) {
    case _0xee2b[1429]:
      _0x8e22x2[_0xee2b[1447]](null);
      _0x8e22x2[_0xee2b[1448]](null);
      _0x8e22x2[_0xee2b[1449]](null);
      _0x8e22x2[_0xee2b[1450]](null);
      break;
    case _0xee2b[1436]:
      _0x8e22x2[_0xee2b[1447]](null);
      _0x8e22x2[_0xee2b[1449]](null);
      _0x8e22x2[_0xee2b[1450]](null);
      var _0x8e22x7 = _0x8e22x2[_0xee2b[1451]](), _0x8e22x6 = Sch[_0xee2b[22]][_0xee2b[49]][_0xee2b[1454]][_0xee2b[1453]][_0xee2b[1452]];
      if (_0x8e22x4 && _0x8e22x7 && _0x8e22x7[_0xee2b[4]] == 1 && _0x8e22x7[0] == _0x8e22x6(_0x8e22x4[_0xee2b[484]]())) {
        _0x8e22x2[_0xee2b[1448]](null);
      }
      break;
    case _0xee2b[1437]:
      if (_0x8e22x2[_0xee2b[1455]]() && _0x8e22x2[_0xee2b[1455]]()[_0xee2b[4]]) {
        _0x8e22x2[_0xee2b[1447]](null);
        _0x8e22x2[_0xee2b[1448]](null);
      }
      _0x8e22x2[_0xee2b[1450]](null);
      var _0x8e22x1 = _0x8e22x2[_0xee2b[1455]]();
      if (_0x8e22x4 && _0x8e22x1 && _0x8e22x1[_0xee2b[4]] == 1 && _0x8e22x1[0] == _0x8e22x4[_0xee2b[479]]()) {
        _0x8e22x2[_0xee2b[1449]](null);
      }
      break;
    case _0xee2b[1438]:
      _0x8e22x2[_0xee2b[1449]](null);
      var _0x8e22x3 = _0x8e22x2[_0xee2b[1456]]();
      if (_0x8e22x4 && _0x8e22x3 && _0x8e22x3[_0xee2b[4]] == 1 && _0x8e22x3[0] == _0x8e22x4[_0xee2b[480]]() + 1) {
        _0x8e22x2[_0xee2b[1450]](null);
      }
      break;
  }
  _0x8e22x2[_0xee2b[1446]] = false;
}, copy:function() {
  var _0x8e22x3 = this[_0xee2b[9]](arguments);
  _0x8e22x3[_0xee2b[879]] = this[_0xee2b[879]];
  _0x8e22x3[_0xee2b[1440]] = this[_0xee2b[1440]];
  return _0x8e22x3;
}, set:function(_0x8e22x4, _0x8e22x6) {
  this[_0xee2b[9]](arguments);
  if (!this[_0xee2b[1446]]) {
    this[_0xee2b[1457]]();
  }
  var _0x8e22x3 = this[_0xee2b[1052]]();
  if (_0x8e22x3 && !this[_0xee2b[1458]]) {
    _0x8e22x3[_0xee2b[1459]]();
  }
}, suspendEventNotifying:function() {
  this[_0xee2b[1458]]++;
}, resumeEventNotifying:function() {
  if (this[_0xee2b[1458]]) {
    this[_0xee2b[1458]]--;
  }
}, getEvent:function() {
  return this[_0xee2b[1440]];
}, setEvent:function(_0x8e22x3) {
  return this[_0xee2b[1440]] = _0x8e22x3;
}, getRule:function() {
  var _0x8e22x6 = this, _0x8e22x3 = [];
  if (_0x8e22x6[_0xee2b[1445]]()) {
    _0x8e22x3[_0xee2b[11]](_0xee2b[1460] + _0x8e22x6[_0xee2b[1445]]());
    if (_0x8e22x6[_0xee2b[1461]]() > 1) {
      _0x8e22x3[_0xee2b[11]](_0xee2b[1462] + _0x8e22x6[_0xee2b[1461]]());
    }
    if (_0x8e22x6[_0xee2b[1451]]() && _0x8e22x6[_0xee2b[1451]]()[_0xee2b[4]]) {
      _0x8e22x3[_0xee2b[11]](_0xee2b[1463] + _0x8e22x6[_0xee2b[1451]]()[_0xee2b[73]](_0xee2b[72]));
    }
    if (_0x8e22x6[_0xee2b[1455]]() && _0x8e22x6[_0xee2b[1455]]()[_0xee2b[4]]) {
      _0x8e22x3[_0xee2b[11]](_0xee2b[1464] + _0x8e22x6[_0xee2b[1455]]()[_0xee2b[73]](_0xee2b[72]));
    }
    if (_0x8e22x6[_0xee2b[1456]]() && _0x8e22x6[_0xee2b[1456]]()[_0xee2b[4]]) {
      _0x8e22x3[_0xee2b[11]](_0xee2b[1465] + _0x8e22x6[_0xee2b[1456]]()[_0xee2b[73]](_0xee2b[72]));
    }
    if (_0x8e22x6[_0xee2b[1466]]()) {
      _0x8e22x3[_0xee2b[11]](_0xee2b[1467] + _0x8e22x6[_0xee2b[1466]]());
    }
    if (_0x8e22x6[_0xee2b[713]]()) {
      _0x8e22x3[_0xee2b[11]](_0xee2b[1468] + Ext[_0xee2b[703]][_0xee2b[880]](_0x8e22x6[_0xee2b[713]](), _0x8e22x6[_0xee2b[879]]));
    }
    if (_0x8e22x6[_0xee2b[1469]]() && _0x8e22x6[_0xee2b[1469]]()[_0xee2b[4]]) {
      _0x8e22x3[_0xee2b[11]](_0xee2b[1470] + _0x8e22x6[_0xee2b[1469]]()[_0xee2b[73]](_0xee2b[72]));
    }
  }
  return _0x8e22x3[_0xee2b[73]](_0xee2b[1471]);
}, setRule:function(_0x8e22x9) {
  var _0x8e22x5 = this;
  if (_0x8e22x9) {
    _0x8e22x5[_0xee2b[46]]();
    var _0x8e22x1 = _0x8e22x9[_0xee2b[496]](_0xee2b[1471]);
    for (var _0x8e22x4 = 0, _0x8e22x3 = _0x8e22x1[_0xee2b[4]]; _0x8e22x4 < _0x8e22x3; _0x8e22x4++) {
      var _0x8e22x6 = _0x8e22x1[_0x8e22x4][_0xee2b[496]](_0xee2b[1472]), _0x8e22x2 = _0x8e22x6[1];
      switch(_0x8e22x6[0]) {
        case _0xee2b[1474]:
          _0x8e22x5[_0xee2b[1473]](_0x8e22x2);
          break;
        case _0xee2b[1476]:
          _0x8e22x5[_0xee2b[1475]](_0x8e22x2);
          break;
        case _0xee2b[1478]:
          _0x8e22x5[_0xee2b[1477]](_0x8e22x2);
          break;
        case _0xee2b[1479]:
          _0x8e22x5[_0xee2b[1202]](Ext[_0xee2b[703]][_0xee2b[1253]](_0x8e22x2, _0x8e22x5[_0xee2b[879]]));
          break;
        case _0xee2b[1480]:
          _0x8e22x5[_0xee2b[1448]](_0x8e22x2);
          break;
        case _0xee2b[1481]:
          _0x8e22x5[_0xee2b[1449]](_0x8e22x2);
          break;
        case _0xee2b[1482]:
          _0x8e22x5[_0xee2b[1450]](_0x8e22x2);
          break;
        case _0xee2b[1483]:
          _0x8e22x5[_0xee2b[1447]](_0x8e22x2);
          break;
      }
    }
    _0x8e22x5[_0xee2b[51]]();
  }
}});
Ext[_0xee2b[6]](_0xee2b[1484], {singleton:true, mixins:[_0xee2b[108]], delayedCallTimeout:100, delayedCalls:null, constructor:function(_0x8e22x3) {
  this[_0xee2b[295]][_0xee2b[294]][_0xee2b[217]][_0xee2b[293]](this, _0x8e22x3);
  Ext[_0xee2b[8]](this, _0x8e22x3);
}, cancel:function() {
  var _0x8e22x4 = this, _0x8e22x5 = _0x8e22x4[_0xee2b[1485]];
  if (_0x8e22x5) {
    var _0x8e22x6 = arguments[_0xee2b[4]] ? arguments : Ext[_0xee2b[1486]][_0xee2b[347]](_0x8e22x5);
    for (var _0x8e22x3 = _0x8e22x6[_0xee2b[4]] - 1; _0x8e22x3 >= 0; _0x8e22x3--) {
      var _0x8e22x2 = _0x8e22x6[_0x8e22x3];
      if (_0x8e22x5[_0x8e22x2] && _0x8e22x5[_0x8e22x2][_0xee2b[1487]]) {
        clearTimeout(_0x8e22x5[_0x8e22x2][_0xee2b[1487]]);
        _0x8e22x5[_0x8e22x2][_0xee2b[1487]] = null;
      }
    }
  }
}, execute:function(_0x8e22x5) {
  var _0x8e22x4 = _0x8e22x5[_0xee2b[689]], _0x8e22x3;
  this[_0xee2b[180]](_0xee2b[1488] + _0x8e22x5[_0xee2b[388]] + _0xee2b[1489], this, _0x8e22x5);
  _0x8e22x5[_0xee2b[1490]] && _0x8e22x5[_0xee2b[1490]][_0xee2b[293]](_0x8e22x4, _0x8e22x5);
  var _0x8e22x6 = _0x8e22x5[_0xee2b[1491]];
  while (_0x8e22x3 = _0x8e22x5[_0xee2b[1492]][_0xee2b[209]]()) {
    _0x8e22x6[_0xee2b[8]](_0x8e22x4, _0x8e22x3);
  }
  _0x8e22x5[_0xee2b[1493]] && _0x8e22x5[_0xee2b[1493]][_0xee2b[293]](_0x8e22x4, _0x8e22x5);
  this[_0xee2b[180]](_0xee2b[1488] + _0x8e22x5[_0xee2b[388]] + _0xee2b[1494], this, _0x8e22x5);
}, schedule:function(_0x8e22x6) {
  _0x8e22x6 = _0x8e22x6 || {};
  var _0x8e22x4 = this;
  _0x8e22x4[_0xee2b[1485]] = _0x8e22x4[_0xee2b[1485]] || {};
  var _0x8e22x2 = _0x8e22x6[_0xee2b[388]] || _0x8e22x4[_0xee2b[1497]][_0xee2b[1496]][_0xee2b[1495]];
  var _0x8e22x3 = _0x8e22x6[_0xee2b[1498]] || [];
  if (!_0x8e22x4[_0xee2b[1485]][_0x8e22x2]) {
    _0x8e22x4[_0xee2b[1485]][_0x8e22x2] = Ext[_0xee2b[8]]({scope:this}, {id:_0x8e22x2, entries:[]}, _0x8e22x6);
    delete _0x8e22x4[_0xee2b[1485]][_0x8e22x2][_0xee2b[1498]];
  }
  var _0x8e22x5 = _0x8e22x4[_0xee2b[1485]][_0x8e22x2];
  _0x8e22x4[_0xee2b[1499]](_0x8e22x2);
  _0x8e22x5[_0xee2b[1492]][_0xee2b[11]](_0x8e22x3);
  _0x8e22x5[_0xee2b[1487]] = setTimeout(function() {
    _0x8e22x4[_0xee2b[1500]](_0x8e22x5);
    delete _0x8e22x4[_0xee2b[1485]][_0x8e22x2];
  }, _0x8e22x6[_0xee2b[112]] || _0x8e22x4[_0xee2b[1501]]);
  return _0x8e22x5;
}});
Ext[_0xee2b[6]](_0xee2b[1502], {frequency:_0xee2b[1503], MAX_OCCURRENCES_COUNT:1000000, getNthDayInPeriod:function(_0x8e22x3, _0x8e22x2, _0x8e22x7, _0x8e22x1) {
  var _0x8e22x8, _0x8e22x6, _0x8e22xa, _0x8e22x9;
  if (_0x8e22x1) {
    var _0x8e22x4 = 86400000, _0x8e22x5 = 604800000;
    if (_0x8e22x1 > 0) {
      _0x8e22x6 = 1;
      _0x8e22x9 = _0x8e22x3;
    } else {
      _0x8e22x6 = -1;
      _0x8e22x9 = _0x8e22x2;
    }
    _0x8e22xa = _0x8e22x7 - _0x8e22x9[_0xee2b[484]]();
    if (_0x8e22x6 * _0x8e22xa < 0) {
      _0x8e22x1 += _0x8e22x6;
    }
    _0x8e22x8 = new Date(_0x8e22x9[_0xee2b[1162]]() + (_0x8e22x1 - _0x8e22x6) * _0x8e22x5 + _0x8e22xa * _0x8e22x4);
    if (_0x8e22x8 < _0x8e22x3 || _0x8e22x8 > _0x8e22x2) {
      _0x8e22x8 = null;
    }
  }
  return _0x8e22x8;
}, buildDate:function(_0x8e22x6, _0x8e22x5, _0x8e22x3) {
  var _0x8e22x4 = new Date(_0x8e22x6, _0x8e22x5, _0x8e22x3);
  if (_0x8e22x4[_0xee2b[1136]]() == _0x8e22x6 && _0x8e22x4[_0xee2b[480]]() == _0x8e22x5 && _0x8e22x4[_0xee2b[479]]() == _0x8e22x3) {
    return _0x8e22x4;
  }
}, isValidPosition:function(_0x8e22x3) {
  return Boolean(_0x8e22x3);
}, forEachDateAtPositions:function(_0x8e22x3, _0x8e22x2, _0x8e22x7, _0x8e22x8) {
  var _0x8e22x1 = _0x8e22x3[_0xee2b[4]], _0x8e22x4 = {};
  for (var _0x8e22x5 = 0; _0x8e22x5 < _0x8e22x2[_0xee2b[4]]; _0x8e22x5++) {
    var _0x8e22x9 = _0x8e22x2[_0x8e22x5];
    if (this[_0xee2b[1504]](_0x8e22x9)) {
      var _0x8e22x6 = _0x8e22x9 > 0 ? _0x8e22x3[_0x8e22x9 - 1] : _0x8e22x3[_0x8e22x1 + _0x8e22x9];
      if (_0x8e22x6 && !_0x8e22x4[_0x8e22x6[_0xee2b[1162]]()]) {
        _0x8e22x4[_0x8e22x6[_0xee2b[1162]]()] = true;
        if (_0x8e22x7[_0xee2b[293]](_0x8e22x8, _0x8e22x6) === false) {
          return false;
        }
      }
    }
  }
}});
Ext[_0xee2b[6]](_0xee2b[1505], {extend:_0xee2b[1502], requires:[_0xee2b[1140]], singleton:true, frequency:_0xee2b[1429], forEachDate:function(_0x8e22xb) {
  var _0x8e22x11 = this, _0x8e22x7 = _0x8e22xb[_0xee2b[1454]], _0x8e22xd = _0x8e22x7[_0xee2b[1052]](), _0x8e22x6 = _0x8e22xd[_0xee2b[712]](), _0x8e22x4 = _0x8e22xb[_0xee2b[1138]] || _0x8e22x6, _0x8e22x5 = _0x8e22x7[_0xee2b[713]](), _0x8e22x10 = _0x8e22xb[_0xee2b[1139]] || _0x8e22x5, _0x8e22x9 = _0x8e22xb[_0xee2b[1491]], _0x8e22x3 = _0x8e22xb[_0xee2b[689]] || _0x8e22x11, _0x8e22x8 = Sch[_0xee2b[49]][_0xee2b[703]], _0x8e22xe = _0x8e22x7[_0xee2b[1461]](), _0x8e22x1 = _0x8e22x7[_0xee2b[1466]](), _0x8e22xa = 
  0;
  if (_0x8e22x5 && _0x8e22x10 && _0x8e22x10 > _0x8e22x5) {
    _0x8e22x10 = _0x8e22x5;
  }
  if (_0x8e22x6 > _0x8e22x4) {
    _0x8e22x4 = _0x8e22x6;
  }
  var _0x8e22xc = _0x8e22x4 - _0x8e22x6, _0x8e22x19 = _0x8e22xe * 86400000, _0x8e22x2 = Math[_0xee2b[424]](_0x8e22xc / _0x8e22x19);
  if (!_0x8e22x10 && !_0x8e22x1) {
    _0x8e22x1 = _0x8e22x11[_0xee2b[1506]];
  }
  var _0x8e22xf = _0x8e22x8[_0xee2b[255]](_0x8e22x6, _0x8e22x8.DAY, _0x8e22x2);
  while (!_0x8e22x10 || _0x8e22xf <= _0x8e22x10) {
    _0x8e22xa++;
    if (_0x8e22xf >= _0x8e22x4) {
      if (_0x8e22x10 && _0x8e22xf > _0x8e22x10 || _0x8e22x9[_0xee2b[293]](_0x8e22x3, _0x8e22xf, _0x8e22xa) === false || _0x8e22x1 && _0x8e22xa >= _0x8e22x1) {
        break;
      }
    }
    _0x8e22xf = _0x8e22x8[_0xee2b[255]](_0x8e22xf, _0x8e22x8.DAY, _0x8e22xe);
  }
}});
Ext[_0xee2b[6]](_0xee2b[1507], {singleton:true, dayParseRegExp:/^([+-]?[0-9])?(SU|MO|TU|WE|TH|FR|SA)$/, decodeDay:function(_0x8e22x6) {
  var _0x8e22x4, _0x8e22x3;
  if (_0x8e22x4 = this[_0xee2b[1508]][_0xee2b[676]](_0x8e22x6)) {
    _0x8e22x3 = [];
    switch(_0x8e22x4[2]) {
      case _0xee2b[1509]:
        _0x8e22x3[_0xee2b[11]](0);
        break;
      case _0xee2b[1510]:
        _0x8e22x3[_0xee2b[11]](1);
        break;
      case _0xee2b[1511]:
        _0x8e22x3[_0xee2b[11]](2);
        break;
      case _0xee2b[1512]:
        _0x8e22x3[_0xee2b[11]](3);
        break;
      case _0xee2b[1513]:
        _0x8e22x3[_0xee2b[11]](4);
        break;
      case _0xee2b[1514]:
        _0x8e22x3[_0xee2b[11]](5);
        break;
      case _0xee2b[1515]:
        _0x8e22x3[_0xee2b[11]](6);
        break;
    }
    if (_0x8e22x3) {
      if (_0x8e22x4[1]) {
        _0x8e22x4[1] = parseInt(_0x8e22x4[1], 10);
      }
      _0x8e22x3[_0xee2b[11]](_0x8e22x4[1]);
    }
  }
  return _0x8e22x3;
}, encodeDay:function(_0x8e22x4) {
  var _0x8e22x6;
  if (Ext[_0xee2b[307]](_0x8e22x4)) {
    _0x8e22x4 = _0x8e22x4[0];
    _0x8e22x6 = _0x8e22x4[1];
  }
  var _0x8e22x3 = _0x8e22x6 ? _0x8e22x6.toString() : _0xee2b[27];
  switch(_0x8e22x4) {
    case 0:
      _0x8e22x3 += _0xee2b[1509];
      break;
    case 1:
      _0x8e22x3 += _0xee2b[1510];
      break;
    case 2:
      _0x8e22x3 += _0xee2b[1511];
      break;
    case 3:
      _0x8e22x3 += _0xee2b[1512];
      break;
    case 4:
      _0x8e22x3 += _0xee2b[1513];
      break;
    case 5:
      _0x8e22x3 += _0xee2b[1514];
      break;
    case 6:
      _0x8e22x3 += _0xee2b[1515];
      break;
  }
  return _0x8e22x3;
}, decode:function(_0x8e22x6) {
  var _0x8e22x3 = [], _0x8e22x5;
  if (_0x8e22x6) {
    for (var _0x8e22x4 = 0; _0x8e22x4 < _0x8e22x6[_0xee2b[4]]; _0x8e22x4++) {
      if (_0x8e22x5 = this[_0xee2b[1516]](_0x8e22x6[_0x8e22x4])) {
        _0x8e22x3[_0xee2b[11]](_0x8e22x5);
      }
    }
  }
  return _0x8e22x3;
}, encode:function(_0x8e22x5) {
  var _0x8e22x3 = [], _0x8e22x6;
  if (_0x8e22x5) {
    for (var _0x8e22x4 = 0; _0x8e22x4 < _0x8e22x5[_0xee2b[4]]; _0x8e22x4++) {
      if (_0x8e22x6 = this[_0xee2b[1452]](_0x8e22x5[_0x8e22x4])) {
        _0x8e22x3[_0xee2b[11]](_0x8e22x6);
      }
    }
  }
  return _0x8e22x3;
}});
Ext[_0xee2b[6]](_0xee2b[1517], {extend:_0xee2b[1502], requires:[_0xee2b[1140], _0xee2b[1507]], singleton:true, frequency:_0xee2b[1436], forEachDate:function(_0x8e22x19) {
  var _0x8e22x18 = this, _0x8e22x10 = Sch[_0xee2b[49]][_0xee2b[703]], _0x8e22x9 = _0x8e22x19[_0xee2b[1491]], _0x8e22x3 = _0x8e22x19[_0xee2b[689]] || _0x8e22x18, _0x8e22x7 = _0x8e22x19[_0xee2b[1454]], _0x8e22xe = _0x8e22x19[_0xee2b[1440]] || _0x8e22x7 && _0x8e22x7[_0xee2b[1052]](), _0x8e22x6 = _0x8e22x19[_0xee2b[1518]] || _0x8e22xe[_0xee2b[712]](), _0x8e22x4 = _0x8e22x19[_0xee2b[1138]] || _0x8e22x6, _0x8e22x5 = _0x8e22x7 && _0x8e22x7[_0xee2b[713]](), _0x8e22xc = _0x8e22x19[_0xee2b[1139]] || _0x8e22x5, 
  _0x8e22xb = _0x8e22x19[_0xee2b[1519]] || _0x8e22x7[_0xee2b[1461]](), _0x8e22x1 = Sch[_0xee2b[22]][_0xee2b[49]][_0xee2b[1454]][_0xee2b[1453]][_0xee2b[425]](_0x8e22x19[_0xee2b[525]] || _0x8e22x7 && _0x8e22x7[_0xee2b[1451]]()), _0x8e22x2 = _0x8e22x19[_0xee2b[1520]] || _0x8e22x7 && _0x8e22x7[_0xee2b[1466]](), _0x8e22x8 = 0, _0x8e22xd, _0x8e22x11;
  if (_0x8e22x5 && _0x8e22xc && _0x8e22xc > _0x8e22x5) {
    _0x8e22xc = _0x8e22x5;
  }
  if (_0x8e22x1 && _0x8e22x1[_0xee2b[4]]) {
    _0x8e22x1[_0xee2b[1120]](function(_0x8e22x15, _0x8e22xa) {
      return _0x8e22x15[0] - _0x8e22xa[0];
    });
  } else {
    _0x8e22x1 = [[_0x8e22x6[_0xee2b[484]]()]];
  }
  if (_0x8e22x6 > _0x8e22x4) {
    _0x8e22x4 = _0x8e22x6;
  }
  if (_0x8e22x2) {
    _0x8e22xd = _0x8e22x10[_0xee2b[1283]](_0x8e22x6, _0x8e22x10.WEEK, 0, 0);
  } else {
    _0x8e22xd = _0x8e22x10[_0xee2b[1283]](_0x8e22x4, _0x8e22x10.WEEK, 0, 0);
  }
  if (!_0x8e22xc && !_0x8e22x2) {
    _0x8e22x2 = _0x8e22x18[_0xee2b[1506]];
  }
  while (!_0x8e22xc || _0x8e22xd <= _0x8e22xc) {
    for (var _0x8e22xf = 0; _0x8e22xf < _0x8e22x1[_0xee2b[4]]; _0x8e22xf++) {
      _0x8e22x11 = _0x8e22x10[_0xee2b[1521]](_0x8e22x10[_0xee2b[255]](_0x8e22xd, _0x8e22x10.DAY, _0x8e22x1[_0x8e22xf][0]), _0x8e22x6);
      if (_0x8e22x11 >= _0x8e22x6) {
        _0x8e22x8++;
        if (_0x8e22x11 >= _0x8e22x4) {
          if (_0x8e22xc && _0x8e22x11 > _0x8e22xc || _0x8e22x9[_0xee2b[293]](_0x8e22x3, _0x8e22x11, _0x8e22x8) === false || _0x8e22x2 && _0x8e22x8 >= _0x8e22x2) {
            return;
          }
        }
      }
    }
    _0x8e22xd = _0x8e22x10[_0xee2b[1283]](_0x8e22xd, _0x8e22x10.WEEK, _0x8e22xb, 0);
  }
}});
Ext[_0xee2b[6]](_0xee2b[1522], {extend:_0xee2b[1502], requires:[_0xee2b[1140], _0xee2b[1507]], singleton:true, frequency:_0xee2b[1437], getNthDayOfMonth:function(_0x8e22x4, _0x8e22x5) {
  var _0x8e22x3 = null, _0x8e22x6 = Ext[_0xee2b[703]][_0xee2b[1523]](_0x8e22x4);
  if (_0x8e22x5 && Math[_0xee2b[1524]](_0x8e22x5) <= _0x8e22x6) {
    _0x8e22x3 = new Date(_0x8e22x4[_0xee2b[1136]](), _0x8e22x4[_0xee2b[480]](), _0x8e22x5 < 0 ? _0x8e22x6 + _0x8e22x5 + 1 : _0x8e22x5);
  }
  return _0x8e22x3;
}, isValidPosition:function(_0x8e22x3) {
  return _0x8e22x3 && Math[_0xee2b[1524]](_0x8e22x3) > 0 && Math[_0xee2b[1524]](_0x8e22x3) <= 31;
}, forEachDate:function(_0x8e22x1a) {
  var _0x8e22x1b = this, _0x8e22x19 = Sch[_0xee2b[49]][_0xee2b[703]], _0x8e22xf = _0x8e22x1a[_0xee2b[1491]], _0x8e22x6 = _0x8e22x1a[_0xee2b[689]] || _0x8e22x1b, _0x8e22xc = _0x8e22x1a[_0xee2b[1454]], _0x8e22x16 = _0x8e22x1a[_0xee2b[1440]] || _0x8e22xc[_0xee2b[1052]](), _0x8e22x4 = _0x8e22x1a[_0xee2b[1518]] || _0x8e22x16[_0xee2b[712]](), _0x8e22x5 = _0x8e22x1a[_0xee2b[1138]] || _0x8e22x4, _0x8e22x2 = _0x8e22xc && _0x8e22xc[_0xee2b[713]](), _0x8e22x12 = _0x8e22x1a[_0xee2b[1139]] || _0x8e22x2, _0x8e22x13 = 
  _0x8e22x1a[_0xee2b[1519]] || _0x8e22xc[_0xee2b[1461]](), _0x8e22x23 = _0x8e22x1a[_0xee2b[525]] || _0x8e22xc && _0x8e22xc[_0xee2b[1451]](), _0x8e22x10 = Sch[_0xee2b[22]][_0xee2b[49]][_0xee2b[1454]][_0xee2b[1453]][_0xee2b[425]](_0x8e22x23), _0x8e22x15 = _0x8e22x1a[_0xee2b[1525]] || _0x8e22xc && _0x8e22xc[_0xee2b[1455]](), _0x8e22xd = _0x8e22x1a[_0xee2b[1520]] || _0x8e22xc && _0x8e22xc[_0xee2b[1466]](), _0x8e22xe = _0x8e22x1a[_0xee2b[1526]] || _0x8e22xc && _0x8e22xc[_0xee2b[1469]](), _0x8e22x18 = 
  _0x8e22xe && _0x8e22xe[_0xee2b[4]], _0x8e22xb = 0, _0x8e22x11 = {}, _0x8e22x9, _0x8e22x8, _0x8e22x3, _0x8e22x7, _0x8e22x17, _0x8e22x14;
  if (_0x8e22x2 && _0x8e22x12 && _0x8e22x12 > _0x8e22x2) {
    _0x8e22x12 = _0x8e22x2;
  }
  if (_0x8e22x4 > _0x8e22x5) {
    _0x8e22x5 = _0x8e22x4;
  }
  if (_0x8e22xd) {
    _0x8e22x8 = new Date(_0x8e22x19[_0xee2b[1283]](_0x8e22x4, _0x8e22x19.MONTH, 0));
  } else {
    _0x8e22x8 = new Date(_0x8e22x19[_0xee2b[1283]](_0x8e22x5, _0x8e22x19.MONTH, 0));
  }
  _0x8e22x3 = new Date(_0x8e22x19[_0xee2b[1283]](_0x8e22x8, _0x8e22x19.MONTH, 1) - 1);
  if (!(_0x8e22x15 && _0x8e22x15[_0xee2b[4]]) && !(_0x8e22x10 && _0x8e22x10[_0xee2b[4]])) {
    _0x8e22x15 = [_0x8e22x4[_0xee2b[479]]()];
  }
  if (_0x8e22x10 && _0x8e22x10[_0xee2b[4]]) {
    Ext[_0xee2b[25]](_0x8e22x10, function(_0x8e22xa) {
      if (_0x8e22xa[1]) {
        _0x8e22x9 = _0x8e22x9 || {};
        _0x8e22x9[_0x8e22xa[0]] = _0x8e22xa[1];
      }
    });
  }
  top: while ((!_0x8e22x12 || _0x8e22x12 >= _0x8e22x8) && (!_0x8e22xd || _0x8e22xb < _0x8e22xd)) {
    _0x8e22x7 = [];
    if (_0x8e22x10 && _0x8e22x10[_0xee2b[4]]) {
      Ext[_0xee2b[25]](_0x8e22x10, function(_0x8e22xa) {
        var _0x8e22x1d = _0x8e22xa[0], _0x8e22x20 = 1, _0x8e22x1c = 53;
        if (_0x8e22xa[1]) {
          _0x8e22x20 = _0x8e22x1c = _0x8e22xa[1];
        }
        for (_0x8e22x14 = _0x8e22x20; _0x8e22x14 <= _0x8e22x1c; _0x8e22x14++) {
          if (_0x8e22x17 = _0x8e22x1b[_0xee2b[1527]](_0x8e22x8, _0x8e22x3, _0x8e22x1d, _0x8e22x14)) {
            _0x8e22x17 = _0x8e22x19[_0xee2b[1521]](_0x8e22x17, _0x8e22x4);
            if (!_0x8e22x11[_0x8e22x17[_0xee2b[1162]]()]) {
              _0x8e22x11[_0x8e22x17[_0xee2b[1162]]()] = true;
              _0x8e22x7[_0xee2b[11]](_0x8e22x17);
            }
          }
        }
      });
      _0x8e22x7[_0xee2b[1120]](function(_0x8e22x1d, _0x8e22xa) {
        return _0x8e22x1d - _0x8e22xa;
      });
      if (!_0x8e22x18) {
        for (_0x8e22x14 = 0; _0x8e22x14 < _0x8e22x7[_0xee2b[4]]; _0x8e22x14++) {
          _0x8e22x17 = _0x8e22x7[_0x8e22x14];
          if (_0x8e22x17 >= _0x8e22x4) {
            _0x8e22xb++;
            if (_0x8e22x17 >= _0x8e22x5) {
              if (_0x8e22x12 && _0x8e22x17 > _0x8e22x12 || _0x8e22xf[_0xee2b[293]](_0x8e22x6, _0x8e22x17, _0x8e22xb) === false || _0x8e22xd && _0x8e22xb >= _0x8e22xd) {
                return false;
              }
            }
          }
        }
      }
    } else {
      var _0x8e22x1 = [];
      for (_0x8e22x14 = 0; _0x8e22x14 < _0x8e22x15[_0xee2b[4]]; _0x8e22x14++) {
        if ((_0x8e22x17 = _0x8e22x1b[_0xee2b[1528]](_0x8e22x8, _0x8e22x15[_0x8e22x14])) && !_0x8e22x11[_0x8e22x17[_0xee2b[1162]]()]) {
          _0x8e22x11[_0x8e22x17[_0xee2b[1162]]()] = true;
          _0x8e22x1[_0xee2b[11]](_0x8e22x17);
        }
      }
      _0x8e22x1[_0xee2b[1120]](function(_0x8e22x1d, _0x8e22xa) {
        return _0x8e22x1d - _0x8e22xa;
      });
      for (_0x8e22x14 = 0; _0x8e22x14 < _0x8e22x1[_0xee2b[4]]; _0x8e22x14++) {
        _0x8e22x17 = _0x8e22x19[_0xee2b[1521]](_0x8e22x1[_0x8e22x14], _0x8e22x4);
        if (_0x8e22x18) {
          _0x8e22x7[_0xee2b[11]](_0x8e22x17);
        } else {
          if (_0x8e22x17 >= _0x8e22x4) {
            _0x8e22xb++;
            if (_0x8e22x17 >= _0x8e22x5) {
              if (_0x8e22x12 && _0x8e22x17 > _0x8e22x12 || _0x8e22xf[_0xee2b[293]](_0x8e22x6, _0x8e22x17, _0x8e22xb) === false || _0x8e22xd && _0x8e22xb >= _0x8e22xd) {
                break top;
              }
            }
          }
        }
      }
    }
    if (_0x8e22x18 && _0x8e22x7[_0xee2b[4]]) {
      _0x8e22x1b[_0xee2b[1529]](_0x8e22x7, _0x8e22xe, function(_0x8e22xa) {
        if (_0x8e22xa >= _0x8e22x4) {
          _0x8e22xb++;
          if (_0x8e22xa >= _0x8e22x5 && (!_0x8e22x12 || _0x8e22xa <= _0x8e22x12)) {
            if (_0x8e22xf[_0xee2b[293]](_0x8e22x6, _0x8e22xa, _0x8e22xb) === false || _0x8e22xd && _0x8e22xb >= _0x8e22xd) {
              return false;
            }
          }
        }
      });
    }
    _0x8e22x8 = _0x8e22x19[_0xee2b[1283]](_0x8e22x8, _0x8e22x19.MONTH, _0x8e22x13);
    _0x8e22x3 = new Date(_0x8e22x19[_0xee2b[1283]](_0x8e22x8, _0x8e22x19.MONTH, 1) - 1);
  }
}});
Ext[_0xee2b[6]](_0xee2b[1530], {extend:_0xee2b[1502], requires:[_0xee2b[1140], _0xee2b[1507]], singleton:true, frequency:_0xee2b[1438], forEachDate:function(_0x8e22x23) {
  var _0x8e22x1a = this, _0x8e22x19 = Sch[_0xee2b[49]][_0xee2b[703]], _0x8e22xf = _0x8e22x23[_0xee2b[1491]], _0x8e22x6 = _0x8e22x23[_0xee2b[689]] || _0x8e22x1a, _0x8e22xc = _0x8e22x23[_0xee2b[1454]], _0x8e22x15 = _0x8e22x23[_0xee2b[1440]] || _0x8e22xc[_0xee2b[1052]](), _0x8e22x4 = _0x8e22x23[_0xee2b[1518]] || _0x8e22x15[_0xee2b[712]](), _0x8e22x5 = _0x8e22x23[_0xee2b[1138]] || _0x8e22x4, _0x8e22x2 = _0x8e22xc && _0x8e22xc[_0xee2b[713]](), _0x8e22x14 = _0x8e22x23[_0xee2b[1139]] || _0x8e22x2, _0x8e22x12 = 
  _0x8e22x23[_0xee2b[1519]] || _0x8e22xc[_0xee2b[1461]](), _0x8e22x17 = _0x8e22x23[_0xee2b[525]] || _0x8e22xc && _0x8e22xc[_0xee2b[1451]](), _0x8e22x8 = Sch[_0xee2b[22]][_0xee2b[49]][_0xee2b[1454]][_0xee2b[1453]][_0xee2b[425]](_0x8e22x17), _0x8e22x10 = _0x8e22x23[_0xee2b[520]] || _0x8e22xc && _0x8e22xc[_0xee2b[1456]](), _0x8e22x7 = _0x8e22x23[_0xee2b[1520]] || _0x8e22xc && _0x8e22xc[_0xee2b[1466]](), _0x8e22xd = _0x8e22x23[_0xee2b[1526]] || _0x8e22xc && _0x8e22xc[_0xee2b[1469]](), _0x8e22x18 = _0x8e22xd && 
  _0x8e22xd[_0xee2b[4]], _0x8e22xb = 0, _0x8e22x11 = {}, _0x8e22x1, _0x8e22x3, _0x8e22xe, _0x8e22x9, _0x8e22x13, _0x8e22x16;
  if (_0x8e22x2 && _0x8e22x14 && _0x8e22x14 > _0x8e22x2) {
    _0x8e22x14 = _0x8e22x2;
  }
  if (_0x8e22x4 > _0x8e22x5) {
    _0x8e22x5 = _0x8e22x4;
  }
  if (_0x8e22x7) {
    _0x8e22x3 = new Date(_0x8e22x19[_0xee2b[1283]](_0x8e22x4, _0x8e22x19.YEAR, 0));
  } else {
    _0x8e22x3 = new Date(_0x8e22x19[_0xee2b[1283]](_0x8e22x5, _0x8e22x19.YEAR, 0));
  }
  _0x8e22xe = new Date(_0x8e22x19[_0xee2b[1283]](_0x8e22x3, _0x8e22x19.YEAR, 1) - 1);
  _0x8e22x10 && _0x8e22x10[_0xee2b[1120]](function(_0x8e22x1b, _0x8e22xa) {
    return _0x8e22x1b - _0x8e22xa;
  });
  if (!(_0x8e22x10 && _0x8e22x10[_0xee2b[4]]) && !(_0x8e22x8 && _0x8e22x8[_0xee2b[4]])) {
    _0x8e22x10 = [_0x8e22x4[_0xee2b[480]]() + 1];
  }
  if (_0x8e22x8 && _0x8e22x8[_0xee2b[4]]) {
    Ext[_0xee2b[25]](_0x8e22x8, function(_0x8e22xa) {
      if (_0x8e22xa[1]) {
        _0x8e22x1 = _0x8e22x1 || {};
        _0x8e22x1[_0x8e22xa[0]] = _0x8e22xa[1];
      }
    });
  }
  top: while ((!_0x8e22x14 || _0x8e22x14 >= _0x8e22x3) && (!_0x8e22x7 || _0x8e22xb < _0x8e22x7)) {
    _0x8e22x9 = [];
    if (_0x8e22x8 && _0x8e22x8[_0xee2b[4]]) {
      Ext[_0xee2b[25]](_0x8e22x8, function(_0x8e22xa) {
        var _0x8e22x1b = _0x8e22xa[0], _0x8e22x1c = 1, _0x8e22x1d = 53;
        if (_0x8e22xa[1]) {
          _0x8e22x1c = _0x8e22x1d = _0x8e22xa[1];
        }
        for (_0x8e22x16 = _0x8e22x1c; _0x8e22x16 <= _0x8e22x1d; _0x8e22x16++) {
          if (_0x8e22x13 = _0x8e22x1a[_0xee2b[1527]](_0x8e22x3, _0x8e22xe, _0x8e22x1b, _0x8e22x16)) {
            _0x8e22x13 = _0x8e22x19[_0xee2b[1521]](_0x8e22x13, _0x8e22x4);
            if (!_0x8e22x11[_0x8e22x13[_0xee2b[1162]]()]) {
              _0x8e22x11[_0x8e22x13[_0xee2b[1162]]()] = true;
              _0x8e22x9[_0xee2b[11]](_0x8e22x13);
            }
          }
        }
      });
      _0x8e22x9[_0xee2b[1120]](function(_0x8e22x1b, _0x8e22xa) {
        return _0x8e22x1b - _0x8e22xa;
      });
      if (!_0x8e22x18) {
        for (_0x8e22x16 = 0; _0x8e22x16 < _0x8e22x9[_0xee2b[4]]; _0x8e22x16++) {
          _0x8e22x13 = _0x8e22x9[_0x8e22x16];
          if (_0x8e22x13 >= _0x8e22x4) {
            _0x8e22xb++;
            if (_0x8e22x13 >= _0x8e22x5) {
              if (_0x8e22x14 && _0x8e22x13 > _0x8e22x14 || _0x8e22xf[_0xee2b[293]](_0x8e22x6, _0x8e22x13, _0x8e22xb) === false || _0x8e22x7 && _0x8e22xb >= _0x8e22x7) {
                return false;
              }
            }
          }
        }
      }
    } else {
      for (_0x8e22x16 = 0; _0x8e22x16 < _0x8e22x10[_0xee2b[4]]; _0x8e22x16++) {
        if (_0x8e22x13 = _0x8e22x1a[_0xee2b[1531]](_0x8e22x3[_0xee2b[1136]](), _0x8e22x10[_0x8e22x16] - 1, _0x8e22x4[_0xee2b[479]]())) {
          _0x8e22x13 = _0x8e22x19[_0xee2b[1521]](_0x8e22x13, _0x8e22x4);
          if (!_0x8e22x11[_0x8e22x13[_0xee2b[1162]]()]) {
            _0x8e22x11[_0x8e22x13[_0xee2b[1162]]()] = true;
            if (_0x8e22x18) {
              _0x8e22x9[_0xee2b[11]](_0x8e22x13);
            } else {
              if (_0x8e22x13 >= _0x8e22x4) {
                _0x8e22xb++;
                if (_0x8e22x13 >= _0x8e22x5) {
                  if (_0x8e22x14 && _0x8e22x13 > _0x8e22x14 || _0x8e22xf[_0xee2b[293]](_0x8e22x6, _0x8e22x13, _0x8e22xb) === false || _0x8e22x7 && _0x8e22xb >= _0x8e22x7) {
                    break top;
                  }
                }
              }
            }
          }
        }
      }
    }
    if (_0x8e22x18 && _0x8e22x9[_0xee2b[4]]) {
      _0x8e22x1a[_0xee2b[1529]](_0x8e22x9, _0x8e22xd, function(_0x8e22xa) {
        if (_0x8e22xa >= _0x8e22x4) {
          _0x8e22xb++;
          if (_0x8e22xa >= _0x8e22x5 && (!_0x8e22x14 || _0x8e22xa <= _0x8e22x14)) {
            if (_0x8e22xf[_0xee2b[293]](_0x8e22x6, _0x8e22xa, _0x8e22xb) === false || _0x8e22x7 && _0x8e22xb >= _0x8e22x7) {
              return false;
            }
          }
        }
      });
    }
    _0x8e22x3 = _0x8e22x19[_0xee2b[1283]](_0x8e22x3, _0x8e22x19.YEAR, _0x8e22x12);
    _0x8e22xe = new Date(_0x8e22x19[_0xee2b[1283]](_0x8e22x3, _0x8e22x19.YEAR, 1) - 1);
  }
}});
Ext[_0xee2b[6]](_0xee2b[1532], {extend:_0xee2b[17], requires:[_0xee2b[1428], _0xee2b[1484], _0xee2b[1505], _0xee2b[1517], _0xee2b[1522], _0xee2b[1530]], isRecurringEventStore:true, delayedCallTimeout:100, setupRecurringEvents:function() {
  this[_0xee2b[1533]] = this[_0xee2b[1533]] || [];
  this[_0xee2b[1534]](Sch[_0xee2b[22]][_0xee2b[49]][_0xee2b[1454]].DailyIterator, Sch[_0xee2b[22]][_0xee2b[49]][_0xee2b[1454]].WeeklyIterator, Sch[_0xee2b[22]][_0xee2b[49]][_0xee2b[1454]].MonthlyIterator, Sch[_0xee2b[22]][_0xee2b[49]][_0xee2b[1454]].YearlyIterator);
  this[_0xee2b[846]](Sch[_0xee2b[22]][_0xee2b[49]].DelayedCalls, [_0xee2b[1535], _0xee2b[1536], _0xee2b[1537], _0xee2b[1538]]);
  this[_0xee2b[252]](Sch[_0xee2b[22]][_0xee2b[49]].DelayedCalls, {'delayed-regenerate-occurrences-end':this[_0xee2b[1539]], 'delayed-generate-occurrences-end':this[_0xee2b[1540]], scope:this});
  this[_0xee2b[149]](_0xee2b[218], this[_0xee2b[1541]], this);
}, onEventStoreDestroy:function() {
  Sch[_0xee2b[22]][_0xee2b[49]][_0xee2b[1544]][_0xee2b[1499]](_0xee2b[1542], _0xee2b[1543]);
}, addRecurrenceIterators:function() {
  for (var _0x8e22x3 = 0; _0x8e22x3 < arguments[_0xee2b[4]]; _0x8e22x3++) {
    this[_0xee2b[1533]][arguments[_0x8e22x3][_0xee2b[1545]]] = arguments[_0x8e22x3];
  }
}, getRecurrenceIteratorForEvent:function(_0x8e22x3) {
  return this[_0xee2b[1533]][_0x8e22x3[_0xee2b[1546]]()[_0xee2b[1445]]()];
}, buildOccurrencesForEvent:function(_0x8e22x3, _0x8e22x4, _0x8e22x7, _0x8e22x6) {
  var _0x8e22x2 = [];
  if (_0x8e22x3[_0xee2b[1547]]() && _0x8e22x3[_0xee2b[712]]()) {
    var _0x8e22xa = this, _0x8e22x8 = _0x8e22x3[_0xee2b[1546]](), _0x8e22x9 = _0x8e22xa[_0xee2b[1548]](_0x8e22x3);
    Ext[_0xee2b[133]] && Ext[_0xee2b[133]][_0xee2b[1373]](_0x8e22x9, _0xee2b[1549] + _0x8e22x8[_0xee2b[1445]]() + _0xee2b[1550]);
    var _0x8e22x1 = _0x8e22x3[_0xee2b[713]]() - _0x8e22x3[_0xee2b[712]]();
    var _0x8e22x5 = _0x8e22x3[_0xee2b[1551]]() ? Ext[_0xee2b[26]][_0xee2b[1552]](_0x8e22x3[_0xee2b[1551]](), function(_0x8e22xd) {
      return _0x8e22xd - 0;
    }) : {};
    _0x8e22x9[_0xee2b[1555]]({recurrence:_0x8e22x8, startDate:_0x8e22x4, endDate:_0x8e22x7, fn:function(_0x8e22xd) {
      if (!_0x8e22x5[_0x8e22xd - 0] && (!_0x8e22x6 || !_0x8e22x3[_0xee2b[1553]](_0x8e22xd))) {
        _0x8e22x2[_0xee2b[11]](_0x8e22x3[_0xee2b[1554]](_0x8e22xd, _0x8e22x1));
      }
    }});
  }
  return _0x8e22x2;
}, mergeDelayedCallEntries:function(_0x8e22xf) {
  var _0x8e22x1 = _0x8e22xf[_0xee2b[1492]], _0x8e22x4 = {}, _0x8e22x6, _0x8e22x9, _0x8e22xc, _0x8e22x3, _0x8e22x7;
  for (var _0x8e22x2 = 0; _0x8e22x2 < _0x8e22x1[_0xee2b[4]]; _0x8e22x2++) {
    _0x8e22x7 = _0x8e22x1[_0x8e22x2];
    _0x8e22xc = _0x8e22x7[0];
    _0x8e22x6 = _0x8e22x7[1];
    _0x8e22x9 = _0x8e22x7[2];
    for (var _0x8e22x5 = 0; _0x8e22x5 < _0x8e22xc[_0xee2b[4]]; _0x8e22x5++) {
      _0x8e22x3 = _0x8e22xc[_0x8e22x5];
      var _0x8e22xd = _0x8e22x4[_0x8e22x3[_0xee2b[32]]()];
      if (_0x8e22xd) {
        if (_0x8e22xd[1] > _0x8e22x6) {
          _0x8e22xd[1] = _0x8e22x6;
        }
        if (_0x8e22xd[2] < _0x8e22x9) {
          _0x8e22xd[2] = _0x8e22x9;
        }
      } else {
        _0x8e22x4[_0x8e22x3[_0xee2b[32]]()] = [[_0x8e22x3]][_0xee2b[318]](_0x8e22x7[_0xee2b[191]](1));
      }
    }
  }
  _0x8e22x1 = Ext[_0xee2b[154]][_0xee2b[1556]](_0x8e22x4);
  var _0x8e22xe = {};
  for (_0x8e22x2 = 0; _0x8e22x2 < _0x8e22x1[_0xee2b[4]]; _0x8e22x2++) {
    _0x8e22x7 = _0x8e22x1[_0x8e22x2];
    _0x8e22x3 = _0x8e22x7[0];
    _0x8e22x6 = _0x8e22x7[1];
    _0x8e22x9 = _0x8e22x7[2];
    var _0x8e22x10 = (_0x8e22x6 ? _0x8e22x6[_0xee2b[1162]]() : _0xee2b[27]) + _0xee2b[1131] + (_0x8e22x9 ? _0x8e22x9[_0xee2b[1162]]() : _0xee2b[27]);
    if (_0x8e22xe[_0x8e22x10]) {
      _0x8e22xe[_0x8e22x10][0] = _0x8e22xe[_0x8e22x10][0][_0xee2b[318]](_0x8e22x3);
    } else {
      _0x8e22xe[_0x8e22x10] = _0x8e22x7;
    }
  }
  _0x8e22xf[_0xee2b[1492]] = Ext[_0xee2b[154]][_0xee2b[1556]](_0x8e22xe);
}, regenerateOccurrencesForEventsBuffered:function(_0x8e22x6, _0x8e22x3, _0x8e22x2) {
  var _0x8e22x5 = this;
  if (!Ext[_0xee2b[1557]](_0x8e22x6)) {
    _0x8e22x6 = [_0x8e22x6];
  }
  _0x8e22x6 = Ext[_0xee2b[26]][_0xee2b[173]](_0x8e22x6, function(_0x8e22x1) {
    return _0x8e22x1[_0xee2b[1547]]();
  });
  if (_0x8e22x6[_0xee2b[4]]) {
    var _0x8e22x4 = Sch[_0xee2b[22]][_0xee2b[49]][_0xee2b[1544]][_0xee2b[1497]]({id:_0xee2b[1543], timeout:_0x8e22x5[_0xee2b[1501]], beforeFn:_0x8e22x5[_0xee2b[1558]], fn:function(_0x8e22x9, _0x8e22x1, _0x8e22xa) {
      var _0x8e22x7 = _0x8e22x4[_0xee2b[1559]] = _0x8e22x4[_0xee2b[1559]] || [];
      _0x8e22x7[_0xee2b[11]][_0xee2b[8]](_0x8e22x7, _0x8e22x5[_0xee2b[1560]](_0x8e22x9));
      _0x8e22x5[_0xee2b[1561]](_0x8e22x9, _0x8e22x1, _0x8e22xa, false);
    }, args:[_0x8e22x6, _0x8e22x3, _0x8e22x2], afterFn:function(_0x8e22x1) {
      _0x8e22x1[_0xee2b[1559]][_0xee2b[4]] && _0x8e22x5[_0xee2b[63]](_0x8e22x1[_0xee2b[1559]]);
    }, scope:_0x8e22x5});
  }
}, generateOccurrencesForEventsBuffered:function(_0x8e22x4, _0x8e22x6, _0x8e22x2, _0x8e22x3) {
  var _0x8e22x5 = this;
  _0x8e22x3 = _0x8e22x3 !== false;
  if (!Ext[_0xee2b[1557]](_0x8e22x4)) {
    _0x8e22x4 = [_0x8e22x4];
  }
  _0x8e22x4 = Ext[_0xee2b[26]][_0xee2b[173]](_0x8e22x4, function(_0x8e22x1) {
    return _0x8e22x1[_0xee2b[1547]]();
  });
  if (_0x8e22x4[_0xee2b[4]]) {
    Sch[_0xee2b[22]][_0xee2b[49]][_0xee2b[1544]][_0xee2b[1497]]({id:_0xee2b[1542], timeout:_0x8e22x5[_0xee2b[1501]], beforeFn:_0x8e22x5[_0xee2b[1558]], fn:_0x8e22x5[_0xee2b[1561]], args:[_0x8e22x4, _0x8e22x6, _0x8e22x2, _0x8e22x3], scope:_0x8e22x5});
  }
}, generateOccurrencesForEvents:function(_0x8e22xe, _0x8e22x4, _0x8e22x9, _0x8e22x7) {
  if (_0x8e22xe) {
    var _0x8e22xd = this, _0x8e22x5 = [], _0x8e22x3 = [];
    _0x8e22x7 = _0x8e22x7 !== false;
    if (!Ext[_0xee2b[1557]](_0x8e22xe)) {
      _0x8e22xe = [_0x8e22xe];
    }
    if (_0x8e22xe[_0xee2b[4]]) {
      _0x8e22xd[_0xee2b[180]](_0xee2b[1562], _0x8e22xd, _0x8e22xe, _0x8e22x4, _0x8e22x9, _0x8e22x7);
      for (var _0x8e22x1 = 0; _0x8e22x1 < _0x8e22xe[_0xee2b[4]]; _0x8e22x1++) {
        var _0x8e22x6 = _0x8e22xe[_0x8e22x1], _0x8e22x2, _0x8e22x10, _0x8e22x8;
        if (_0x8e22x5 = _0x8e22xd[_0xee2b[1563]](_0x8e22x6, _0x8e22x4, _0x8e22x9, _0x8e22x7)) {
          _0x8e22x8 = _0x8e22x6[_0xee2b[712]]();
          if (_0x8e22x4 <= _0x8e22x8) {
            if (_0x8e22x10 = _0x8e22x5[_0xee2b[209]]()) {
              _0x8e22x2 = _0x8e22x10[_0xee2b[712]]();
              if (_0x8e22x2 - _0x8e22x8) {
                _0x8e22x6[_0xee2b[1208]](_0x8e22x2, _0x8e22x10[_0xee2b[713]]());
                _0x8e22x6[_0xee2b[1546]]()[_0xee2b[1457]]();
              }
            }
          }
          _0x8e22x3[_0xee2b[11]][_0xee2b[8]](_0x8e22x3, _0x8e22x5);
        }
      }
      if (_0x8e22x3[_0xee2b[4]]) {
        _0x8e22xd[_0xee2b[255]](_0x8e22x3);
      }
      _0x8e22xd[_0xee2b[180]](_0xee2b[1564], _0x8e22xd, _0x8e22xe, _0x8e22x3, _0x8e22x4, _0x8e22x9, _0x8e22x7);
    }
  }
}, generateOccurrencesForAll:function(_0x8e22x6, _0x8e22x2, _0x8e22x3) {
  var _0x8e22x5 = this, _0x8e22x4;
  if ((_0x8e22x4 = _0x8e22x5[_0xee2b[1565]]()) && _0x8e22x4[_0xee2b[4]]) {
    _0x8e22x5[_0xee2b[180]](_0xee2b[1566], _0x8e22x5, _0x8e22x4, _0x8e22x6, _0x8e22x2, _0x8e22x3);
    _0x8e22x5[_0xee2b[1561]](_0x8e22x4, _0x8e22x6, _0x8e22x2, _0x8e22x3);
    _0x8e22x5[_0xee2b[180]](_0xee2b[1567], _0x8e22x5, _0x8e22x4, _0x8e22x6, _0x8e22x2, _0x8e22x3);
  }
}, getRecurringEvents:function() {
  var _0x8e22x3 = this;
  return _0x8e22x3[_0xee2b[1569]](function(_0x8e22x6) {
    return _0x8e22x6[_0xee2b[1568]] && _0x8e22x6[_0xee2b[1547]]();
  })[_0xee2b[1005]]();
}, getOccurrencesForEvents:function(_0x8e22x4) {
  var _0x8e22x3 = [];
  if (!Ext[_0xee2b[1557]](_0x8e22x4)) {
    _0x8e22x4 = [_0x8e22x4];
  }
  if (_0x8e22x4[_0xee2b[4]]) {
    for (var _0x8e22x6 = 0; _0x8e22x6 < _0x8e22x4[_0xee2b[4]]; _0x8e22x6++) {
      var _0x8e22x5 = _0x8e22x4[_0x8e22x6][_0xee2b[32]]();
      _0x8e22x3[_0xee2b[11]][_0xee2b[8]](_0x8e22x3, this[_0xee2b[1569]](function(_0x8e22x2) {
        return _0x8e22x2[_0xee2b[1568]] && _0x8e22x2[_0xee2b[1570]]() == _0x8e22x5;
      })[_0xee2b[1005]]());
    }
  }
  return _0x8e22x3;
}, getOccurrencesForAll:function() {
  return this[_0xee2b[1569]](function(_0x8e22x3) {
    return _0x8e22x3[_0xee2b[1568]] && _0x8e22x3[_0xee2b[1571]]();
  })[_0xee2b[1005]]();
}, removeOccurrencesForEvents:function(_0x8e22x3) {
  return this[_0xee2b[63]](this[_0xee2b[1560]](_0x8e22x3));
}, removeOccurrencesForAll:function() {
  return this[_0xee2b[63]](this[_0xee2b[1572]]());
}, onDelayedRegenerateOccurrencesEnd:function() {
  this[_0xee2b[180]](_0xee2b[1573], this);
}, onDelayedGenerateOccurrencesEnd:function() {
  this[_0xee2b[180]](_0xee2b[1573], this);
}});
Ext[_0xee2b[6]](_0xee2b[1574], {extend:_0xee2b[17], requires:[_0xee2b[1428]], isRecurrableEvent:true, recurringEventIdField:_0xee2b[1575], recurrenceRuleField:_0xee2b[1576], exceptionDatesField:_0xee2b[1577], customizableFields:[{name:_0xee2b[1575]}, {name:_0xee2b[1576], allowNull:true, convert:function(_0x8e22x6, _0x8e22x3) {
  if (Ext[_0xee2b[1353]](_0x8e22x6)) {
    _0x8e22x6 = null;
  }
  return _0x8e22x6;
}}, {name:_0xee2b[1577], dateFormat:_0xee2b[1098], convert:function(_0x8e22x5, _0x8e22x6) {
  if (_0x8e22x5) {
    var _0x8e22x3 = this[_0xee2b[879]], _0x8e22x4 = this[_0xee2b[1578]];
    _0x8e22x5 = Ext[_0xee2b[363]](_0x8e22x5) ? _0x8e22x5[_0xee2b[496]](_0xee2b[72]) : _0x8e22x5;
    _0x8e22x5 = Ext[_0xee2b[26]][_0xee2b[41]](_0x8e22x5, function(_0x8e22x2) {
      if (!Ext[_0xee2b[1579]](_0x8e22x2)) {
        _0x8e22x2 = Ext[_0xee2b[703]][_0xee2b[1253]](_0x8e22x2, _0x8e22x3, _0x8e22x4);
      }
      return _0x8e22x2;
    });
  }
  return _0x8e22x5;
}}], recurrenceModel:_0xee2b[1428], setRecurrence:function(_0x8e22x7, _0x8e22x6, _0x8e22x2) {
  var _0x8e22x1 = this, _0x8e22x5, _0x8e22x3, _0x8e22x9;
  if (_0x8e22x1[_0xee2b[1571]]()) {
    var _0x8e22x4 = _0x8e22x1[_0xee2b[1580]]();
    _0x8e22x5 = _0x8e22x4 && _0x8e22x4[_0xee2b[1546]]();
    _0x8e22x1[_0xee2b[1581]](null);
  }
  if (_0x8e22x7) {
    _0x8e22x5 && _0x8e22x5[_0xee2b[1202]](new Date(_0x8e22x1[_0xee2b[712]]() - 1));
    if (_0x8e22x7[_0xee2b[1582]]) {
      _0x8e22x3 = _0x8e22x7;
    } else {
      if (Ext[_0xee2b[135]](_0x8e22x7)) {
        _0x8e22x3 = new this[_0xee2b[1583]](_0x8e22x7);
      } else {
        _0x8e22x3 = new this[_0xee2b[1583]]();
        _0x8e22x3[_0xee2b[1473]](_0x8e22x7);
        _0x8e22x6 && _0x8e22x3[_0xee2b[1475]](_0x8e22x6);
        if (_0x8e22x2) {
          if (_0x8e22x2 instanceof Date) {
            _0x8e22x3[_0xee2b[1202]](_0x8e22x2);
          } else {
            _0x8e22x3[_0xee2b[1477]](_0x8e22x2);
          }
        }
      }
    }
    _0x8e22x3[_0xee2b[1584]](_0x8e22x1);
    _0x8e22x9 = _0x8e22x3[_0xee2b[1585]]();
  }
  _0x8e22x1[_0xee2b[1454]] = _0x8e22x3;
  _0x8e22x1[_0xee2b[50]](_0x8e22x1[_0xee2b[1586]], _0x8e22x9);
}, getRecurrence:function() {
  var _0x8e22x6 = this, _0x8e22x3 = _0x8e22x6[_0xee2b[1587]]();
  if (!_0x8e22x6[_0xee2b[1454]] && _0x8e22x3) {
    _0x8e22x6[_0xee2b[1454]] = new _0x8e22x6[_0xee2b[1583]]({rule:_0x8e22x3, event:_0x8e22x6});
  }
  return _0x8e22x6[_0xee2b[1454]];
}, isRecurring:function() {
  return this[_0xee2b[1546]]() && !this[_0xee2b[1571]]();
}, isOccurrence:function() {
  return Boolean(this[_0xee2b[1570]]());
}, getRecurringEvent:function() {
  var _0x8e22x6 = this[_0xee2b[1570]](), _0x8e22x3 = this[_0xee2b[696]]();
  return _0x8e22x6 && _0x8e22x3 && _0x8e22x3[_0xee2b[1012]](_0x8e22x6);
}, getOccurrenceByStartDate:function(_0x8e22x6) {
  var _0x8e22x3, _0x8e22x5;
  if (_0x8e22x6) {
    _0x8e22x5 = this[_0xee2b[1588]]();
    for (var _0x8e22x4 = 0; _0x8e22x4 < _0x8e22x5[_0xee2b[4]]; _0x8e22x4++) {
      if (_0x8e22x5[_0x8e22x4][_0xee2b[712]]() - _0x8e22x6 === 0) {
        _0x8e22x3 = _0x8e22x5[_0x8e22x4];
        break;
      }
    }
  }
  return _0x8e22x3;
}, getOccurrences:function() {
  var _0x8e22x3 = this[_0xee2b[696]]();
  return _0x8e22x3 && _0x8e22x3[_0xee2b[1560]](this);
}, removeOccurrences:function() {
  var _0x8e22x3 = this[_0xee2b[696]]();
  return _0x8e22x3 && _0x8e22x3[_0xee2b[1589]](this);
}, onRecurrenceChanged:function() {
  var _0x8e22x3 = this[_0xee2b[1546]]();
  this[_0xee2b[1590]](_0x8e22x3 && _0x8e22x3[_0xee2b[1585]]() || null);
}, buildOccurrence:function(_0x8e22x3, _0x8e22x6) {
  _0x8e22x6 = _0x8e22x6 || this[_0xee2b[713]]() - this[_0xee2b[712]]();
  var _0x8e22x4 = this[_0xee2b[1054]](null);
  _0x8e22x4[_0xee2b[46]]();
  _0x8e22x4[_0xee2b[1208]](_0x8e22x3, new Date(_0x8e22x3[_0xee2b[1162]]() + _0x8e22x6));
  _0x8e22x4[_0xee2b[1581]](this[_0xee2b[32]]());
  _0x8e22x4[_0xee2b[51]]();
  return _0x8e22x4;
}, setRecurrenceRule:function(_0x8e22x4) {
  var _0x8e22x6 = this, _0x8e22x3;
  if (_0x8e22x4 != _0x8e22x6[_0xee2b[1587]]()) {
    if (_0x8e22x4) {
      _0x8e22x3 = new _0x8e22x6[_0xee2b[1583]]({rule:_0x8e22x4, event:_0x8e22x6});
    }
    _0x8e22x6[_0xee2b[1454]] = _0x8e22x3;
    _0x8e22x6[_0xee2b[50]](_0x8e22x6[_0xee2b[1586]], _0x8e22x4);
  }
}, addExceptionDate:function(_0x8e22x3) {
  var _0x8e22x6 = this, _0x8e22x4 = _0x8e22x6[_0xee2b[1551]]() || [];
  if (_0x8e22x3) {
    _0x8e22x6[_0xee2b[1591]](_0x8e22x4[_0xee2b[318]](_0x8e22x3));
  }
}, beforeStartDateChange:function() {
  this[_0xee2b[1592]] = this[_0xee2b[712]]();
}, afterStartDateChange:function() {
  if (this[_0xee2b[1592]] - this[_0xee2b[712]]() && this[_0xee2b[1551]]()) {
    this[_0xee2b[1591]]();
  }
}, mixinConfig:{before:{setStartDate:_0xee2b[1593], setStartEndDate:_0xee2b[1593]}, after:{setStartDate:_0xee2b[1594], setStartEndDate:_0xee2b[1594]}, extended:function(_0x8e22x4, _0x8e22x3, _0x8e22x6) {
  var _0x8e22x5 = _0x8e22x6[_0xee2b[1583]];
  if (typeof _0x8e22x5 == _0xee2b[308]) {
    Ext[_0xee2b[972]](_0x8e22x5, function() {
      _0x8e22x6[_0xee2b[1583]] = Ext[_0xee2b[22]][_0xee2b[1597]][_0xee2b[1596]][_0xee2b[1595]](_0x8e22x5);
      Ext[_0xee2b[507]](_0x8e22x3, {recurrenceModel:Ext[_0xee2b[22]][_0xee2b[1597]][_0xee2b[1596]][_0xee2b[1595]](_0x8e22x5)});
    });
  }
}}, onClassMixedIn:function(_0x8e22x3) {
  var _0x8e22x6 = _0x8e22x3[_0xee2b[139]][_0xee2b[1583]] || this[_0xee2b[139]][_0xee2b[1583]];
  if (typeof _0x8e22x6 == _0xee2b[308]) {
    Ext[_0xee2b[972]](_0x8e22x6, function() {
      Ext[_0xee2b[507]](_0x8e22x3, {recurrenceModel:Ext[_0xee2b[22]][_0xee2b[1597]][_0xee2b[1596]][_0xee2b[1595]](_0x8e22x6)});
    });
  }
  Ext[_0xee2b[507]](_0x8e22x3, {isPersistable:function() {
    var _0x8e22x4 = this;
    return _0x8e22x4[_0xee2b[9]](arguments) && !_0x8e22x4[_0xee2b[1571]]();
  }, set:function(_0x8e22x5, _0x8e22x4) {
    if (typeof _0x8e22x5 == _0xee2b[308] ? _0x8e22x5 == this[_0xee2b[1586]] : this[_0xee2b[1586]] in _0x8e22x5) {
      this[_0xee2b[1454]] = null;
    }
    return this[_0xee2b[9]](arguments);
  }, customizableFields:(_0x8e22x3[_0xee2b[139]][_0xee2b[1029]] || [])[_0xee2b[318]](this[_0xee2b[139]][_0xee2b[1029]])});
}});
Ext[_0xee2b[6]](_0xee2b[1598], {extend:_0xee2b[1198], uses:[_0xee2b[1140]], idProperty:_0xee2b[1032], mixins:[_0xee2b[1574]], isEventModel:true, customizableFields:[{name:_0xee2b[1599]}, {name:_0xee2b[1047]}, {name:_0xee2b[1600], type:_0xee2b[1108], persist:false, defaultValue:true}, {name:_0xee2b[1601], persist:false, defaultValue:true}, {name:_0xee2b[1602], defaultValue:false}], resourceIdField:_0xee2b[1047], draggableField:_0xee2b[1600], resizableField:_0xee2b[1601], allDayField:_0xee2b[1602], 
iconClsField:_0xee2b[1599], getInternalId:function() {
  return this[_0xee2b[1049]];
}, isHighlighted:false, getEventStore:function() {
  var _0x8e22x6 = this, _0x8e22x3 = _0x8e22x6[_0xee2b[1050]] && _0x8e22x6[_0xee2b[1050]][0];
  if (_0x8e22x3 && !_0x8e22x3[_0xee2b[1603]]) {
    Ext[_0xee2b[26]][_0xee2b[1120]](_0x8e22x6[_0xee2b[1050]], function(_0x8e22x5, _0x8e22x4) {
      return (_0x8e22x5[_0xee2b[1603]] || false) > (_0x8e22x4[_0xee2b[1603]] || false) && -1 || 1;
    });
    _0x8e22x3 = _0x8e22x6[_0xee2b[1050]][0];
    _0x8e22x3 = _0x8e22x3[_0xee2b[1603]] ? _0x8e22x3 : null;
  }
  return _0x8e22x3;
}, getResourceStore:function() {
  var _0x8e22x3 = this[_0xee2b[696]]();
  return _0x8e22x3 && _0x8e22x3[_0xee2b[1007]]();
}, getAssignmentStore:function() {
  var _0x8e22x3 = this[_0xee2b[696]]();
  return _0x8e22x3 && _0x8e22x3[_0xee2b[1051]]();
}, getResources:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  _0x8e22x3 = _0x8e22x3 || _0x8e22x6[_0xee2b[696]]();
  return _0x8e22x3 && _0x8e22x3[_0xee2b[1093]](_0x8e22x6) || [];
}, forEachResource:function(_0x8e22x5, _0x8e22x4) {
  var _0x8e22x3 = this[_0xee2b[1427]]();
  for (var _0x8e22x6 = 0; _0x8e22x6 < _0x8e22x3[_0xee2b[4]]; _0x8e22x6++) {
    if (_0x8e22x5[_0xee2b[293]](_0x8e22x4 || this, _0x8e22x3[_0x8e22x6]) === false) {
      return;
    }
  }
}, getResource:function(_0x8e22x2) {
  var _0x8e22x5 = this, _0x8e22x3 = null, _0x8e22x6 = _0x8e22x5[_0xee2b[696]](), _0x8e22x4 = _0x8e22x6 && _0x8e22x6[_0xee2b[1007]]();
  _0x8e22x2 = _0x8e22x2 == null ? _0x8e22x5[_0xee2b[1008]]() : _0x8e22x2;
  if (_0x8e22x6 && (_0x8e22x2 === null || _0x8e22x2 === undefined)) {
    _0x8e22x3 = _0x8e22x6[_0xee2b[1093]](_0x8e22x5);
    if (_0x8e22x3[_0xee2b[4]] == 1) {
      _0x8e22x3 = _0x8e22x3[0];
    } else {
      if (_0x8e22x3[_0xee2b[4]] > 1) {
        Ext[_0xee2b[1182]][_0xee2b[3]](_0xee2b[1604]);
      } else {
        _0x8e22x3 = null;
      }
    }
  } else {
    if (_0x8e22x4) {
      _0x8e22x3 = _0x8e22x4[_0xee2b[1012]](_0x8e22x2);
    }
  }
  return _0x8e22x3;
}, setResource:function(_0x8e22x4) {
  var _0x8e22x6 = this, _0x8e22x3 = _0x8e22x6[_0xee2b[696]]();
  _0x8e22x3 && _0x8e22x3[_0xee2b[1091]](_0x8e22x6);
  _0x8e22x6[_0xee2b[1605]](_0x8e22x4);
}, assign:function(_0x8e22x4) {
  var _0x8e22x6 = this, _0x8e22x3 = _0x8e22x6[_0xee2b[696]]();
  if (_0x8e22x4 && _0x8e22x4[_0xee2b[1606]]) {
    _0x8e22x4 = _0x8e22x4[_0xee2b[32]]();
  }
  if (_0x8e22x3) {
    _0x8e22x3[_0xee2b[1424]](_0x8e22x6, _0x8e22x4);
  } else {
    _0x8e22x6[_0xee2b[1090]](_0x8e22x4);
  }
}, unassign:function(_0x8e22x4) {
  var _0x8e22x6 = this, _0x8e22x3 = _0x8e22x6[_0xee2b[696]]();
  if (_0x8e22x4 && _0x8e22x4[_0xee2b[1606]]) {
    _0x8e22x4 = _0x8e22x4[_0xee2b[32]]();
  }
  if (_0x8e22x3) {
    _0x8e22x3[_0xee2b[1425]](_0x8e22x6, _0x8e22x4);
  } else {
    if (_0x8e22x6[_0xee2b[1008]]() == _0x8e22x4) {
      _0x8e22x6[_0xee2b[1090]](null);
    }
  }
}, reassign:function(_0x8e22x3, _0x8e22x6) {
  var _0x8e22x5 = this, _0x8e22x4 = _0x8e22x5[_0xee2b[696]]();
  if (_0x8e22x3 && _0x8e22x3[_0xee2b[1606]]) {
    _0x8e22x3 = _0x8e22x3[_0xee2b[32]]();
  }
  if (_0x8e22x6 && _0x8e22x6[_0xee2b[1606]]) {
    _0x8e22x6 = _0x8e22x6[_0xee2b[32]]();
  }
  if (_0x8e22x4) {
    _0x8e22x4[_0xee2b[1607]](_0x8e22x5, _0x8e22x3, _0x8e22x6);
  } else {
    _0x8e22x5[_0xee2b[1090]](_0x8e22x6);
  }
}, isAssignedTo:function(_0x8e22x5) {
  var _0x8e22x4 = this, _0x8e22x6 = _0x8e22x4[_0xee2b[696]](), _0x8e22x3 = false;
  if (_0x8e22x5 && _0x8e22x5[_0xee2b[1606]]) {
    _0x8e22x5 = _0x8e22x5[_0xee2b[32]]();
  }
  if (_0x8e22x6) {
    _0x8e22x3 = _0x8e22x6[_0xee2b[1088]](_0x8e22x4, _0x8e22x5);
  } else {
    _0x8e22x3 = _0x8e22x4[_0xee2b[1008]]() == _0x8e22x5;
  }
  return _0x8e22x3;
}, getAssignments:function() {
  var _0x8e22x6 = this, _0x8e22x3 = _0x8e22x6[_0xee2b[696]]();
  return _0x8e22x3 && _0x8e22x3[_0xee2b[1081]](_0x8e22x6);
}, isDraggable:function() {
  return this[_0xee2b[1608]]();
}, isResizable:function() {
  return this[_0xee2b[1609]]();
}, isPersistable:function() {
  var _0x8e22x6 = this, _0x8e22x3 = _0x8e22x6[_0xee2b[696]]();
  return _0x8e22x3 && _0x8e22x3[_0xee2b[1610]](_0x8e22x6);
}, getStartDate:function() {
  var _0x8e22x3 = this[_0xee2b[22]][this[_0xee2b[1201]]];
  if (this[_0xee2b[1611]]()) {
    _0x8e22x3 = this[_0xee2b[1613]]()[_0xee2b[1612]](_0x8e22x3);
  }
  return _0x8e22x3;
}, getEndDate:function() {
  var _0x8e22x3 = this[_0xee2b[22]][this[_0xee2b[1203]]];
  if (this[_0xee2b[1611]]()) {
    _0x8e22x3 = this[_0xee2b[1613]]()[_0xee2b[1614]](_0x8e22x3);
  }
  return _0x8e22x3;
}, inheritableStatics:{getAllDayStartDate:function(_0x8e22x3) {
  if (_0x8e22x3 instanceof Sch[_0xee2b[327]][_0xee2b[1423]]) {
    _0x8e22x3 = _0x8e22x3[_0xee2b[55]](_0x8e22x3[_0xee2b[1201]]);
  }
  if (_0x8e22x3) {
    _0x8e22x3 = Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[1101]](_0x8e22x3, true);
  }
  return _0x8e22x3;
}, getAllDayEndDate:function(_0x8e22x3) {
  if (_0x8e22x3 instanceof Sch[_0xee2b[327]][_0xee2b[1423]]) {
    _0x8e22x3 = _0x8e22x3[_0xee2b[55]](_0x8e22x3[_0xee2b[1203]]);
  }
  if (_0x8e22x3 && (_0x8e22x3[_0xee2b[1127]]() > 0 || _0x8e22x3[_0xee2b[1130]]() > 0 || _0x8e22x3[_0xee2b[1157]]() > 0 || _0x8e22x3[_0xee2b[1159]]() > 0)) {
    _0x8e22x3 = Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[1283]](_0x8e22x3, _0xee2b[526], 1);
  }
  return _0x8e22x3;
}, getAllDayDisplayStartDate:function(_0x8e22x3) {
  if (_0x8e22x3 instanceof Sch[_0xee2b[327]][_0xee2b[1423]]) {
    _0x8e22x3 = _0x8e22x3[_0xee2b[55]](_0x8e22x3[_0xee2b[1201]]);
  }
  return Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[1101]](_0x8e22x3, true);
}, getAllDayDisplayEndDate:function(_0x8e22x3, _0x8e22x4) {
  var _0x8e22x6 = _0x8e22x3;
  if (_0x8e22x3 instanceof Sch[_0xee2b[327]][_0xee2b[1423]]) {
    _0x8e22x3 = _0x8e22x6[_0xee2b[55]](_0x8e22x6[_0xee2b[1201]]);
    _0x8e22x4 = _0x8e22x6[_0xee2b[55]](_0x8e22x6[_0xee2b[1203]]);
  }
  _0x8e22x3 = Sch[_0xee2b[327]][_0xee2b[1423]][_0xee2b[1615]](_0x8e22x3);
  if (Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[1101]](_0x8e22x4, true).valueOf() === _0x8e22x4.valueOf()) {
    _0x8e22x4 = Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[255]](_0x8e22x4, Sch[_0xee2b[49]][_0xee2b[703]].DAY, -1);
  } else {
    if (_0x8e22x3.valueOf() !== _0x8e22x4.valueOf()) {
      _0x8e22x4 = Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[1101]](_0x8e22x4, true);
    }
  }
  return _0x8e22x4;
}}});
Ext[_0xee2b[6]](_0xee2b[1616], {extend:_0xee2b[109], alias:_0xee2b[1617], mixins:[_0xee2b[1011], _0xee2b[1016], _0xee2b[1401], _0xee2b[216], _0xee2b[1532]], storeId:_0xee2b[1618], model:_0xee2b[1598], config:{model:_0xee2b[1598]}, constructor:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  _0x8e22x6[_0xee2b[9]]([_0x8e22x3]);
  _0x8e22x6[_0xee2b[1302]] && _0x8e22x6[_0xee2b[1408]](_0x8e22x6[_0xee2b[1302]]);
  _0x8e22x6[_0xee2b[1003]] && _0x8e22x6[_0xee2b[1410]](_0x8e22x6[_0xee2b[1003]]);
  if (_0x8e22x6[_0xee2b[137]]() !== Sch[_0xee2b[327]][_0xee2b[1423]] && !(_0x8e22x6[_0xee2b[137]]()[_0xee2b[139]] instanceof Sch[_0xee2b[327]][_0xee2b[1423]])) {
    throw _0xee2b[1619];
  }
  _0x8e22x6[_0xee2b[1620]]();
}, append:function(_0x8e22x3) {
  this[_0xee2b[255]](_0x8e22x3);
}});
Ext[_0xee2b[6]](_0xee2b[1621], {eventStore:null, getEventStore:function() {
  return this[_0xee2b[1071]];
}, setEventStore:function(_0x8e22x3) {
  var _0x8e22x6 = this, _0x8e22x4;
  if (_0x8e22x6[_0xee2b[1071]] !== _0x8e22x3) {
    _0x8e22x4 = _0x8e22x6[_0xee2b[1071]];
    _0x8e22x6[_0xee2b[1071]] = _0x8e22x3 && Ext[_0xee2b[1072]][_0xee2b[131]](_0x8e22x3) || null;
    _0x8e22x6[_0xee2b[180]](_0xee2b[1074], _0x8e22x6, _0x8e22x3, _0x8e22x4);
  }
}, getScheduledEventsInTimeSpan:function(_0x8e22x2, _0x8e22x3, _0x8e22x4) {
  var _0x8e22x6 = [];
  var _0x8e22x5 = Sch[_0xee2b[49]][_0xee2b[703]];
  _0x8e22x4 = _0x8e22x4 || this[_0xee2b[696]]();
  Ext[_0xee2b[26]][_0xee2b[25]](this[_0xee2b[1005]](), function(_0x8e22x1) {
    Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x4[_0xee2b[699]](_0x8e22x1), function(_0x8e22x9) {
      if (_0x8e22x9[_0xee2b[1622]](_0x8e22x2, _0x8e22x3)) {
        _0x8e22x6[_0xee2b[11]](_0x8e22x9);
      }
    });
  });
  return _0x8e22x6;
}});
Ext[_0xee2b[6]](_0xee2b[1623], {extend:_0xee2b[1019], isResourceModel:true, idProperty:_0xee2b[1032], config:Ext[_0xee2b[723]][_0xee2b[722]] ? {idProperty:_0xee2b[1032]} : null, nameField:_0xee2b[603], customizableFields:[{name:_0xee2b[603], type:_0xee2b[308]}], getInternalId:function() {
  return this[_0xee2b[1049]];
}, getResourceStore:function() {
  return this[_0xee2b[1050]] && this[_0xee2b[1050]][0] || this[_0xee2b[82]] && this[_0xee2b[82]]();
}, getEventStore:function() {
  var _0x8e22x3 = this[_0xee2b[1007]]();
  return _0x8e22x3 && _0x8e22x3[_0xee2b[696]]() || this[_0xee2b[96]] && this[_0xee2b[96]][_0xee2b[696]]();
}, getAssignmentStore:function() {
  var _0x8e22x3 = this[_0xee2b[696]]();
  return _0x8e22x3 && _0x8e22x3[_0xee2b[1051]]();
}, getEvents:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  _0x8e22x3 = _0x8e22x3 || _0x8e22x6[_0xee2b[696]]();
  return _0x8e22x3 && _0x8e22x3[_0xee2b[699]](_0x8e22x6) || [];
}, getAssignments:function() {
  var _0x8e22x6 = this, _0x8e22x3 = _0x8e22x6[_0xee2b[696]]();
  return _0x8e22x3 && _0x8e22x3[_0xee2b[1082]](_0x8e22x6);
}, isPersistable:function() {
  var _0x8e22x3 = this[_0xee2b[96]];
  return !_0x8e22x3 || !_0x8e22x3[_0xee2b[30]] || _0x8e22x3[_0xee2b[232]] && _0x8e22x3[_0xee2b[232]]();
}, isAbove:function(_0x8e22x5) {
  var _0x8e22x1 = this, _0x8e22x7 = _0x8e22x1[_0xee2b[1007]](), _0x8e22xa = false, _0x8e22x2, _0x8e22x4, _0x8e22x6, _0x8e22x3, _0x8e22x9;
  Ext[_0xee2b[133]] && Ext[_0xee2b[133]][_0xee2b[1373]](_0x8e22x7, _0xee2b[1624]);
  if (_0x8e22x1 == _0x8e22x5) {
    _0x8e22xa = false;
  } else {
    if (_0x8e22x7 && _0x8e22x7[_0xee2b[234]]) {
      _0x8e22x2 = _0x8e22x1;
      _0x8e22x4 = [];
      while (_0x8e22x2) {
        _0x8e22x4[_0xee2b[11]](_0x8e22x2);
        _0x8e22x2 = _0x8e22x2[_0xee2b[96]];
      }
      _0x8e22x2 = _0x8e22x5;
      _0x8e22x6 = [];
      while (_0x8e22x2) {
        _0x8e22x6[_0xee2b[11]](_0x8e22x2);
        _0x8e22x2 = _0x8e22x2[_0xee2b[96]];
      }
      _0x8e22x3 = 0;
      while (_0x8e22x3 < _0x8e22x4[_0xee2b[4]] - 1 && _0x8e22x3 < _0x8e22x6[_0xee2b[4]] - 1 && _0x8e22x4[_0x8e22x3] == _0x8e22x6[_0x8e22x3]) {
        ++_0x8e22x3;
      }
      _0x8e22x9 = _0x8e22x4[_0x8e22x3];
      _0x8e22x1 = _0x8e22x4[_0x8e22x3 + 1];
      _0x8e22x5 = _0x8e22x6[_0x8e22x3 + 1];
      _0x8e22xa = _0x8e22x9[_0xee2b[147]](_0x8e22x1) < _0x8e22x9[_0xee2b[147]](_0x8e22x5);
    } else {
      _0x8e22xa = _0x8e22x7[_0xee2b[147]](_0x8e22x1) < _0x8e22x7[_0xee2b[147]](_0x8e22x5);
    }
  }
  return _0x8e22xa;
}});
Ext[_0xee2b[6]](_0xee2b[1625], {extend:_0xee2b[109], model:_0xee2b[1623], config:{model:_0xee2b[1623]}, alias:_0xee2b[1626], mixins:[_0xee2b[1011], _0xee2b[1016], _0xee2b[1621], _0xee2b[216]], storeId:_0xee2b[1627], constructor:function() {
  this[_0xee2b[9]](arguments);
  if (this[_0xee2b[137]]() !== Sch[_0xee2b[327]][_0xee2b[606]] && !(this[_0xee2b[137]]()[_0xee2b[139]] instanceof Sch[_0xee2b[327]][_0xee2b[606]])) {
    throw _0xee2b[1628];
  }
}});
Ext[_0xee2b[6]](_0xee2b[1629], {extend:_0xee2b[957], target:_0xee2b[1630], minVersion:_0xee2b[1631], overrides:{remove:function(_0x8e22x6) {
  if (_0x8e22x6[_0xee2b[988]]) {
    return _0x8e22x6[_0xee2b[63]]();
  } else {
    if (_0x8e22x6 instanceof Array && _0x8e22x6[0][_0xee2b[988]]) {
      for (var _0x8e22x3 = 0; _0x8e22x3 < _0x8e22x6[_0xee2b[4]]; _0x8e22x3++) {
        _0x8e22x6[_0x8e22x3][_0xee2b[63]]();
      }
      return _0x8e22x6;
    } else {
      return this[_0xee2b[9]](arguments);
    }
  }
}}});
Ext[_0xee2b[6]](_0xee2b[1632], {extend:_0xee2b[957], target:_0xee2b[1630], minVersion:_0xee2b[1633], overrides:{registerNode:function(_0x8e22x4, _0x8e22x3) {
  var _0x8e22x6 = this;
  if (!_0x8e22x6[_0xee2b[1014]]) {
    _0x8e22x6[_0xee2b[1014]] = {};
  }
  _0x8e22x6[_0xee2b[1014]][_0x8e22x4[_0xee2b[1049]]] = _0x8e22x4;
  _0x8e22x6[_0xee2b[9]](arguments);
}, unregisterNode:function(_0x8e22x4, _0x8e22x3) {
  var _0x8e22x6 = this;
  if (_0x8e22x6[_0xee2b[1014]]) {
    delete _0x8e22x6[_0xee2b[1014]][_0x8e22x4[_0xee2b[1049]]];
  }
  _0x8e22x6[_0xee2b[9]](arguments);
}, updateRoot:function() {
  this[_0xee2b[1014]] = {};
  this[_0xee2b[9]](arguments);
}}});
Ext[_0xee2b[6]](_0xee2b[1634], {isFilteredFlag:false, isHiddenFlag:false, treeFilter:null, lastTreeFilter:null, lastTreeHiding:null, allowExpandCollapseWhileFiltered:true, keepExpandStateWhileFiltered:false, reApplyFilterOnDataChange:null, reapplyFilterOnDataChange:true, suspendIncrementalFilterRefresh:0, filterGeneration:0, currentFilterGeneration:null, dataChangeListeners:null, monitoringDataChange:false, filterUpdateSuspended:false, onClassMixedIn:function(_0x8e22x3) {
  _0x8e22x3[_0xee2b[507]](Sch[_0xee2b[22]][_0xee2b[1637]][_0xee2b[1636]][_0xee2b[139]][_0xee2b[1635]]() || {});
}, initTreeFiltering:function() {
  if (this[_0xee2b[1638]] != null) {
    this[_0xee2b[1639]] = this[_0xee2b[1638]];
  }
  this[_0xee2b[1640]] = new Ext[_0xee2b[49]].Filter({filterFn:this[_0xee2b[1641]], scope:this});
  this[_0xee2b[1642]] = {nodeappend:this[_0xee2b[1643]], nodeinsert:this[_0xee2b[1643]], scope:this};
  Ext[_0xee2b[8]](this[_0xee2b[1642]], {beforeload:this[_0xee2b[1644]], load:this[_0xee2b[1645]]});
}, onStoreBeforeLoad:function() {
  this[_0xee2b[1646]] = true;
}, onStoreLoad:function() {
  this[_0xee2b[1646]] = false;
  this[_0xee2b[1643]]();
}, startDataChangeMonitoring:function() {
  if (this[_0xee2b[1647]]) {
    return;
  }
  this[_0xee2b[1647]] = true;
  this[_0xee2b[149]](this[_0xee2b[1642]]);
}, stopDataChangeMonitoring:function() {
  if (!this[_0xee2b[1647]]) {
    return;
  }
  this[_0xee2b[1647]] = false;
  this[_0xee2b[152]](this[_0xee2b[1642]]);
}, onNeedToUpdateFilter:function() {
  if (this[_0xee2b[1639]] && !this[_0xee2b[1646]] && !this[_0xee2b[1648]]) {
    this[_0xee2b[1649]]();
  }
}, clearTreeFilter:function() {
  if (!this[_0xee2b[1650]]()) {
    return;
  }
  this[_0xee2b[1651]] = null;
  this[_0xee2b[1652]] = false;
  this[_0xee2b[1653]] = null;
  if (!this[_0xee2b[1650]](true)) {
    this[_0xee2b[1654]]();
  }
  this[_0xee2b[1655]]();
  this[_0xee2b[180]](_0xee2b[1656], this);
}, reapplyFilter:function() {
  if (this[_0xee2b[1657]]) {
    this[_0xee2b[1659]][_0xee2b[8]](this, this[_0xee2b[1658]][_0xee2b[318]](this[_0xee2b[1652]]));
  }
  if (this[_0xee2b[1652]]) {
    this[_0xee2b[1660]](this[_0xee2b[1653]]);
  }
}, reApplyFilter:function() {
  this[_0xee2b[1649]]();
}, refreshNodeStoreContent:function() {
  var _0x8e22x6 = this, _0x8e22x3 = _0x8e22x6[_0xee2b[355]]();
  if (_0x8e22x3[_0xee2b[147]](_0x8e22x6[_0xee2b[1640]]) < 0) {
    _0x8e22x6[_0xee2b[1661]](_0x8e22x6[_0xee2b[1640]]);
  } else {
    this[_0xee2b[355]]()[_0xee2b[180]](_0xee2b[333], this[_0xee2b[355]]());
  }
}, getIndexInTotalDataset:function(_0x8e22x5) {
  var _0x8e22x4 = this[_0xee2b[1662]](), _0x8e22x1 = -1;
  var _0x8e22x9 = this[_0xee2b[1663]];
  if (!_0x8e22x9 && _0x8e22x5 == _0x8e22x4) {
    return -1;
  }
  var _0x8e22x6 = this[_0xee2b[1650]]();
  var _0x8e22x3 = this[_0xee2b[1651]];
  var _0x8e22x2 = function(_0x8e22x8) {
    if (_0x8e22x6 && _0x8e22x8[_0xee2b[1664]] != _0x8e22x3 || _0x8e22x8[_0xee2b[856]]) {
      if (_0x8e22x8 == _0x8e22x5) {
        return false;
      }
    }
    if (_0x8e22x9 || _0x8e22x8 != _0x8e22x4) {
      _0x8e22x1++;
    }
    if (_0x8e22x8 == _0x8e22x5) {
      return false;
    }
    if (!_0x8e22x8[_0xee2b[1665]]() && _0x8e22x8[_0xee2b[1666]]()) {
      var _0x8e22x10 = _0x8e22x8[_0xee2b[925]], _0x8e22xa = _0x8e22x10[_0xee2b[4]];
      for (var _0x8e22x7 = 0; _0x8e22x7 < _0x8e22xa; _0x8e22x7++) {
        if (_0x8e22x2(_0x8e22x10[_0x8e22x7]) === false) {
          return false;
        }
      }
    }
  };
  _0x8e22x2(_0x8e22x4);
  return _0x8e22x1;
}, isTreeFiltered:function(_0x8e22x3) {
  return this[_0xee2b[1652]] || _0x8e22x3 && this[_0xee2b[1657]];
}, markFilteredNodes:function(_0x8e22x8, _0x8e22x4) {
  var _0x8e22xa = this;
  var _0x8e22x2 = this[_0xee2b[1651]];
  var _0x8e22x5 = {};
  var _0x8e22xd = this[_0xee2b[1662]](), _0x8e22xe = this[_0xee2b[1663]];
  var _0x8e22xb = function(_0x8e22x19) {
    var _0x8e22x11 = _0x8e22x19[_0xee2b[96]];
    while (_0x8e22x11 && !_0x8e22x5[_0x8e22x11[_0xee2b[1049]]]) {
      _0x8e22x5[_0x8e22x11[_0xee2b[1049]]] = true;
      _0x8e22x11 = _0x8e22x11[_0xee2b[96]];
    }
  };
  var _0x8e22x3 = _0x8e22x4[_0xee2b[173]];
  var _0x8e22xc = _0x8e22x4[_0xee2b[689]] || this;
  var _0x8e22x10 = _0x8e22x4[_0xee2b[1667]];
  var _0x8e22xf = _0x8e22x4[_0xee2b[1668]] || _0x8e22x10;
  var _0x8e22x9 = _0x8e22x4[_0xee2b[1669]];
  var _0x8e22x1 = _0x8e22x4[_0xee2b[1670]] || _0x8e22x9;
  var _0x8e22x6 = !_0x8e22x4[_0xee2b[1671]];
  if (_0x8e22x1 && _0x8e22xf) {
    throw new Error(_0xee2b[1672]);
  }
  if (_0x8e22xe) {
    _0x8e22x5[_0x8e22xd[_0xee2b[1049]]] = true;
  }
  var _0x8e22x7 = function(_0x8e22x15) {
    if (_0x8e22x15[_0xee2b[856]]) {
      return;
    }
    var _0x8e22x19, _0x8e22x16, _0x8e22x18, _0x8e22x11;
    if (_0x8e22x15[_0xee2b[1665]]()) {
      if (_0x8e22x3[_0xee2b[293]](_0x8e22xc, _0x8e22x15, _0x8e22x5)) {
        _0x8e22x5[_0x8e22x15[_0xee2b[1049]]] = true;
        _0x8e22xb(_0x8e22x15);
      }
    } else {
      if (_0x8e22x1) {
        _0x8e22x19 = _0x8e22x3[_0xee2b[293]](_0x8e22xc, _0x8e22x15);
        _0x8e22x16 = _0x8e22x15[_0xee2b[925]];
        _0x8e22x18 = _0x8e22x16[_0xee2b[4]];
        if (_0x8e22x19) {
          _0x8e22x5[_0x8e22x15[_0xee2b[1049]]] = true;
          _0x8e22xb(_0x8e22x15);
          if (_0x8e22x9) {
            _0x8e22x15[_0xee2b[99]](function(_0x8e22x14) {
              _0x8e22x5[_0x8e22x14[_0xee2b[1049]]] = true;
            });
            return;
          }
        }
        for (_0x8e22x11 = 0; _0x8e22x11 < _0x8e22x18; _0x8e22x11++) {
          if (_0x8e22x19 && _0x8e22x16[_0x8e22x11][_0xee2b[1665]]()) {
            _0x8e22x5[_0x8e22x16[_0x8e22x11][_0xee2b[1049]]] = true;
          } else {
            if (!_0x8e22x16[_0x8e22x11][_0xee2b[1665]]()) {
              _0x8e22x7(_0x8e22x16[_0x8e22x11]);
            }
          }
        }
      } else {
        if (_0x8e22xf) {
          _0x8e22x19 = _0x8e22x3[_0xee2b[293]](_0x8e22xc, _0x8e22x15, _0x8e22x5);
          if (_0x8e22x19) {
            _0x8e22x5[_0x8e22x15[_0xee2b[1049]]] = true;
            _0x8e22xb(_0x8e22x15);
          }
        }
        if (!_0x8e22xf || !_0x8e22x10 || _0x8e22x10 && (_0x8e22x19 || _0x8e22x15 == _0x8e22xd && !_0x8e22xe)) {
          _0x8e22x16 = _0x8e22x15[_0xee2b[925]];
          _0x8e22x18 = _0x8e22x16[_0xee2b[4]];
          for (_0x8e22x11 = 0; _0x8e22x11 < _0x8e22x18; _0x8e22x11++) {
            _0x8e22x7(_0x8e22x16[_0x8e22x11]);
          }
        }
      }
    }
  };
  _0x8e22x7(_0x8e22x8);
  _0x8e22xd[_0xee2b[99]](function(_0x8e22x11) {
    if (_0x8e22x6) {
      _0x8e22x11[_0xee2b[1673]] = false;
    }
    if (_0x8e22x5[_0x8e22x11[_0xee2b[1049]]]) {
      _0x8e22x11[_0xee2b[1664]] = _0x8e22x2;
      if (!_0x8e22xa[_0xee2b[1674]] && !_0x8e22x11[_0xee2b[1665]]()) {
        _0x8e22x11[_0xee2b[103]]();
      }
    }
  });
}, filterTreeBy:function(_0x8e22x4, _0x8e22x6) {
  this[_0xee2b[1651]] = this[_0xee2b[1675]]++;
  var _0x8e22x3;
  if (arguments[_0xee2b[4]] == 1 && Ext[_0xee2b[135]](arguments[0])) {
    _0x8e22x6 = _0x8e22x4[_0xee2b[689]];
    _0x8e22x3 = _0x8e22x4[_0xee2b[173]];
  } else {
    _0x8e22x3 = _0x8e22x4;
    _0x8e22x4 = {filter:_0x8e22x3, scope:_0x8e22x6};
  }
  this[_0xee2b[180]](_0xee2b[1676], this);
  _0x8e22x4 = _0x8e22x4 || {};
  this[_0xee2b[1677]](this[_0xee2b[1662]](), _0x8e22x4);
  _0x8e22x4[_0xee2b[1671]] = true;
  this[_0xee2b[1678]]();
  this[_0xee2b[1652]] = true;
  this[_0xee2b[1653]] = _0x8e22x4;
  this[_0xee2b[180]](_0xee2b[1679], this);
  this[_0xee2b[180]](_0xee2b[1680], this);
  this[_0xee2b[1655]]();
}, isNodeFilteredIn:function(_0x8e22x4) {
  var _0x8e22x6 = this[_0xee2b[1650]]();
  var _0x8e22x3 = this[_0xee2b[1651]];
  return this[_0xee2b[1681]] || _0x8e22x4[_0xee2b[1673]] && _0x8e22x4[_0xee2b[854]]() || !Boolean(_0x8e22x6 && _0x8e22x4[_0xee2b[1664]] != _0x8e22x3 || _0x8e22x4[_0xee2b[856]]);
}, hasNativeFilters:function() {
  var _0x8e22x4 = this, _0x8e22x6 = _0x8e22x4[_0xee2b[355]](), _0x8e22x3 = _0x8e22x6[_0xee2b[1466]]();
  return _0x8e22x3 && _0x8e22x3 > 1 || _0x8e22x6[_0xee2b[147]](_0x8e22x4[_0xee2b[1640]]) < 0;
}, hideNodesBy:function(_0x8e22x6, _0x8e22x3, _0x8e22x5) {
  var _0x8e22x4 = this;
  if (_0x8e22x4[_0xee2b[1086]]() && _0x8e22x4[_0xee2b[1682]]()) {
    throw new Error(_0xee2b[1683]);
  }
  _0x8e22x3 = _0x8e22x3 || _0x8e22x4;
  _0x8e22x4[_0xee2b[1662]]()[_0xee2b[99]](function(_0x8e22x2) {
    _0x8e22x2[_0xee2b[856]] = Boolean(_0x8e22x6[_0xee2b[293]](_0x8e22x3, _0x8e22x2, _0x8e22x4));
  });
  _0x8e22x4[_0xee2b[1678]]();
  _0x8e22x4[_0xee2b[1657]] = true;
  _0x8e22x4[_0xee2b[1658]] = [_0x8e22x6, _0x8e22x3];
  if (!_0x8e22x5) {
    _0x8e22x4[_0xee2b[1655]]();
  }
}, showAllNodes:function(_0x8e22x3) {
  this[_0xee2b[1662]]()[_0xee2b[99]](function(_0x8e22x6) {
    _0x8e22x6[_0xee2b[856]] = false;
  });
  this[_0xee2b[1657]] = false;
  this[_0xee2b[1658]] = null;
  if (!this[_0xee2b[1650]](true)) {
    this[_0xee2b[1654]]();
  }
  if (!_0x8e22x3) {
    this[_0xee2b[1655]]();
  }
}, inheritables:function() {
  return {onNodeExpand:function(_0x8e22x3) {
    if (this[_0xee2b[1650]](true) && _0x8e22x3 == this[_0xee2b[230]]()) {
      this[_0xee2b[9]](arguments);
      this[_0xee2b[1649]]();
    } else {
      return this[_0xee2b[9]](arguments);
    }
  }, onNodeCollapse:function(_0x8e22x9, _0x8e22x6) {
    var _0x8e22x2 = this;
    var _0x8e22x5 = _0x8e22x2[_0xee2b[22]];
    var _0x8e22xa = _0x8e22x5[_0xee2b[1087]];
    var _0x8e22x4 = _0x8e22x2[_0xee2b[1650]]();
    var _0x8e22x1 = _0x8e22x2[_0xee2b[1651]];
    _0x8e22x5[_0xee2b[1087]] = function() {
      var _0x8e22xe, _0x8e22x10, _0x8e22xc;
      var _0x8e22xd = _0x8e22x2[_0xee2b[147]](_0x8e22x9) + 1;
      var _0x8e22xf = false;
      for (var _0x8e22x8 = 0; _0x8e22x8 < _0x8e22x6[_0xee2b[4]]; _0x8e22x8++) {
        if (!(_0x8e22x6[_0x8e22x8][_0xee2b[856]] || _0x8e22x4 && _0x8e22x6[_0x8e22x8][_0xee2b[1664]] != _0x8e22x1) && _0x8e22xa[_0xee2b[293]](this, _0x8e22x6[_0x8e22x8])) {
          _0x8e22xe = _0x8e22x9;
          while (_0x8e22xe[_0xee2b[96]]) {
            _0x8e22x10 = _0x8e22xe;
            do {
              _0x8e22x10 = _0x8e22x10[_0xee2b[98]];
            } while (_0x8e22x10 && (_0x8e22x10[_0xee2b[856]] || _0x8e22x4 && _0x8e22x10[_0xee2b[1664]] != _0x8e22x1));
            if (_0x8e22x10) {
              _0x8e22xf = true;
              _0x8e22xc = _0x8e22x2[_0xee2b[147]](_0x8e22x10);
              break;
            } else {
              _0x8e22xe = _0x8e22xe[_0xee2b[96]];
            }
          }
          if (!_0x8e22xf) {
            _0x8e22xc = _0x8e22x2[_0xee2b[1466]]();
          }
          _0x8e22x2[_0xee2b[1684]](_0x8e22xd, _0x8e22xc - _0x8e22xd);
          break;
        }
      }
      return false;
    };
    this[_0xee2b[9]](arguments);
    if (this[_0xee2b[1650]]()) {
      if (_0x8e22x2[_0xee2b[1685]]()) {
        _0x8e22x6 = Ext[_0xee2b[26]][_0xee2b[173]](_0x8e22x6, _0x8e22x2[_0xee2b[1686]]);
      }
      if (!_0x8e22x6[_0xee2b[4]] && _0x8e22x2[_0xee2b[147]](_0x8e22x9) !== -1) {
        var _0x8e22x7 = _0x8e22x2[_0xee2b[147]](_0x8e22x9) + 1;
        var _0x8e22x3 = _0x8e22x2[_0xee2b[1687]](_0x8e22x9);
        _0x8e22x2[_0xee2b[1684]](_0x8e22x7, _0x8e22x3 - _0x8e22x7);
      }
    }
    _0x8e22x5[_0xee2b[1087]] = _0x8e22xa;
  }, handleNodeExpand:function(_0x8e22x7, _0x8e22x3, _0x8e22x8) {
    var _0x8e22x2 = this;
    var _0x8e22x1 = [];
    var _0x8e22x6 = _0x8e22x2[_0xee2b[1650]]();
    var _0x8e22x9 = _0x8e22x2[_0xee2b[1651]];
    for (var _0x8e22x4 = 0; _0x8e22x4 < _0x8e22x3[_0xee2b[4]]; _0x8e22x4++) {
      var _0x8e22x5 = _0x8e22x3[_0x8e22x4];
      if (!(_0x8e22x6 && _0x8e22x5[_0xee2b[1664]] != _0x8e22x9 || _0x8e22x5[_0xee2b[856]])) {
        _0x8e22x1[_0x8e22x1[_0xee2b[4]]] = _0x8e22x5;
      }
    }
    return this[_0xee2b[9]]([_0x8e22x7, _0x8e22x1, _0x8e22x8]);
  }, onNodeInsert:function(_0x8e22xc, _0x8e22x3, _0x8e22x7) {
    var _0x8e22xd = this, _0x8e22xa, _0x8e22xb, _0x8e22x10, _0x8e22x6, _0x8e22xe, _0x8e22x1, _0x8e22x4 = _0x8e22x3[_0xee2b[1688]] || _0x8e22x3[_0xee2b[22]], _0x8e22x9 = _0x8e22xd[_0xee2b[81]], _0x8e22xf, _0x8e22x2, _0x8e22x5, _0x8e22x8 = this[_0xee2b[1650]]();
    if (_0x8e22xd[_0xee2b[1689]]) {
      _0x8e22x2 = _0x8e22xd[_0xee2b[1689]](_0x8e22x3);
      _0x8e22x3[_0xee2b[50]](_0xee2b[1690], _0x8e22x2);
      if (_0x8e22x2) {
        _0x8e22xc[_0xee2b[50]](_0xee2b[1690], _0x8e22xd[_0xee2b[1689]](_0x8e22xc));
      }
    }
    if (!this[_0xee2b[1639]] && _0x8e22x8) {
      _0x8e22x3[_0xee2b[1673]] = true;
    }
    _0x8e22xd[_0xee2b[1691]](_0x8e22x3, true);
    _0x8e22xd[_0xee2b[380]]();
    if (_0x8e22xd[_0xee2b[854]](_0x8e22x3) || _0x8e22x8 && _0x8e22x3[_0xee2b[1673]]) {
      if (_0x8e22x7 === 0 || !_0x8e22x3[_0xee2b[1692]]) {
        _0x8e22xa = _0x8e22xc;
      } else {
        for (_0x8e22xb = _0x8e22x3[_0xee2b[1692]]; _0x8e22xb && !_0x8e22xb[_0xee2b[1673]] && !_0x8e22xb[_0xee2b[55]](_0xee2b[1690]); _0x8e22xb = _0x8e22xb[_0xee2b[1692]]) {
        }
        if (!_0x8e22xb) {
          _0x8e22xa = _0x8e22xc;
        } else {
          while (_0x8e22xb[_0xee2b[1666]]() && _0x8e22xb[_0xee2b[1693]]) {
            _0x8e22xb = _0x8e22xb[_0xee2b[1693]];
          }
          for (; _0x8e22xb && !_0x8e22xb[_0xee2b[1673]] && !_0x8e22xb[_0xee2b[55]](_0xee2b[1690]); _0x8e22xb = _0x8e22xb[_0xee2b[1692]]) {
          }
          _0x8e22xa = _0x8e22xb;
        }
      }
      _0x8e22xd[_0xee2b[69]](_0x8e22xd[_0xee2b[147]](_0x8e22xa) + 1, _0x8e22x3);
      if (!_0x8e22x3[_0xee2b[1665]]() && _0x8e22x3[_0xee2b[1666]]()) {
        if (_0x8e22x3[_0xee2b[1694]]()) {
          _0x8e22xd[_0xee2b[1695]](_0x8e22x3, _0x8e22x3[_0xee2b[925]]);
        } else {
          if (!_0x8e22xd[_0xee2b[1696]]) {
            _0x8e22x3[_0xee2b[50]](_0xee2b[102], false);
            _0x8e22x3[_0xee2b[103]]();
          }
        }
      }
    }
    Ext[_0xee2b[26]][_0xee2b[63]](_0x8e22x9, _0x8e22x3);
    _0x8e22xd[_0xee2b[1697]] = _0x8e22xd[_0xee2b[1697]] || _0x8e22x3[_0xee2b[30]] || _0x8e22x3[_0xee2b[92]];
    if (!_0x8e22x3[_0xee2b[1665]]() && !_0x8e22x3[_0xee2b[1694]]() && !_0x8e22xd[_0xee2b[1698]]) {
      _0x8e22x10 = _0x8e22xd[_0xee2b[1700]]()[_0xee2b[1699]]();
      _0x8e22x6 = _0x8e22x3[_0xee2b[1700]]();
      _0x8e22xe = _0x8e22x6 ? _0x8e22x6[_0xee2b[1699]]() : null;
      _0x8e22x1 = _0x8e22xe && _0x8e22xe[_0xee2b[1702]][_0xee2b[1701]] ? _0x8e22xe : _0x8e22x10;
      _0x8e22xf = _0x8e22x1[_0xee2b[230]](_0x8e22x4);
      if (_0x8e22xf) {
        _0x8e22x5 = _0x8e22x3[_0xee2b[1703]];
        _0x8e22xd[_0xee2b[1705]](_0x8e22x3, _0x8e22x1[_0xee2b[1704]](_0x8e22xf, _0x8e22x5 ? {model:_0x8e22x5} : undefined));
      }
    }
    _0x8e22xd[_0xee2b[381]]();
  }, isFiltered:function() {
    return this[_0xee2b[9]](arguments) || this[_0xee2b[1650]]();
  }, afterEdit:function(_0x8e22x4, _0x8e22x6) {
    var _0x8e22x3 = this;
    _0x8e22x3[_0xee2b[355]]();
    if (_0x8e22x3[_0xee2b[1685]]() && _0x8e22x3[_0xee2b[1639]]) {
      _0x8e22x3[_0xee2b[1706]](_0x8e22x4);
    }
    Ext[_0xee2b[22]][_0xee2b[1708]][_0xee2b[139]][_0xee2b[1707]][_0xee2b[8]](_0x8e22x3, [_0x8e22x4, _0x8e22x6]);
  }};
}});
Ext[_0xee2b[6]](_0xee2b[1709], {extend:_0xee2b[1630], requires:[_0xee2b[1629], _0xee2b[1632]], mixins:[_0xee2b[1011], _0xee2b[1016], _0xee2b[1621], _0xee2b[1634], _0xee2b[216]], alias:_0xee2b[1710], model:_0xee2b[1623], storeId:_0xee2b[1627], constructor:function() {
  this[_0xee2b[9]](arguments);
  this[_0xee2b[1711]]();
  if (this[_0xee2b[137]]() !== Sch[_0xee2b[327]][_0xee2b[606]] && !(this[_0xee2b[137]]()[_0xee2b[139]] instanceof Sch[_0xee2b[327]][_0xee2b[606]])) {
    throw _0xee2b[1712];
  }
}, setRootNode:function() {
  this[_0xee2b[1713]] = true;
  var _0x8e22x3 = this[_0xee2b[9]](arguments);
  this[_0xee2b[1713]] = false;
  return _0x8e22x3;
}});
Ext[_0xee2b[6]](_0xee2b[1714], {extend:_0xee2b[1198], isTimeAxisTickModel:true, startDateField:_0xee2b[179], endDateField:_0xee2b[771]});
Ext[_0xee2b[6]](_0xee2b[1715], {extend:_0xee2b[1716], requires:[_0xee2b[1140], _0xee2b[1714]], model:_0xee2b[1714], continuous:true, originalContinuous:null, autoAdjust:true, unit:null, increment:null, resolutionUnit:null, resolutionIncrement:null, weekStartDay:null, mainUnit:null, shiftUnit:null, shiftIncrement:1, defaultSpan:1, isConfigured:false, adjustedStart:null, adjustedEnd:null, visibleTickStart:null, visibleTickEnd:null, presetName:null, mode:_0xee2b[1717], startTime:0, endTime:24, constructor:function(_0x8e22x3) {
  var _0x8e22x4 = this;
  _0x8e22x3 = _0x8e22x3 || {};
  if (_0x8e22x4[_0xee2b[1718]]) {
    _0x8e22x4[_0xee2b[1718]](_0x8e22x4[_0xee2b[327]]);
  }
  _0x8e22x4[_0xee2b[1720]](_0x8e22x3[_0xee2b[1719]] || _0x8e22x4[_0xee2b[1719]]);
  _0x8e22x4[_0xee2b[1721]] = _0x8e22x4[_0xee2b[1722]];
  _0x8e22x4[_0xee2b[9]](arguments);
  _0x8e22x4[_0xee2b[149]](Ext[_0xee2b[723]][_0xee2b[722]] ? _0xee2b[770] : _0xee2b[416], function() {
    _0x8e22x4[_0xee2b[180]](_0xee2b[1723], _0x8e22x4, false);
  });
  _0x8e22x4[_0xee2b[149]](_0xee2b[1724], function(_0x8e22x5, _0x8e22x2) {
    _0x8e22x5[_0xee2b[180]](_0xee2b[1723], _0x8e22x5, _0x8e22x2);
  });
  if (_0x8e22x3[_0xee2b[1725]]) {
    var _0x8e22x6 = Sch[_0xee2b[1728]][_0xee2b[1727]][_0xee2b[1726]](_0x8e22x3[_0xee2b[1725]]);
    _0x8e22x6 && _0x8e22x4[_0xee2b[1729]](_0x8e22x6);
  }
  if (_0x8e22x3[_0xee2b[179]] || _0x8e22x4[_0xee2b[179]]) {
    _0x8e22x4[_0xee2b[1723]](_0x8e22x3);
  }
}, reconfigure:function(_0x8e22x5, _0x8e22x3) {
  this[_0xee2b[1730]] = true;
  Ext[_0xee2b[8]](this, _0x8e22x5);
  var _0x8e22xd = this[_0xee2b[1731]](_0x8e22x5[_0xee2b[179]], _0x8e22x5[_0xee2b[771]], true);
  var _0x8e22x8 = this[_0xee2b[1731]](_0x8e22x5[_0xee2b[179]], _0x8e22x5[_0xee2b[771]]);
  var _0x8e22x6 = _0x8e22x8[_0xee2b[179]];
  var _0x8e22x2 = _0x8e22x8[_0xee2b[771]];
  if (this[_0xee2b[180]](_0xee2b[1732], this, _0x8e22x6, _0x8e22x2) !== false) {
    this[_0xee2b[180]](_0xee2b[1733], this);
    var _0x8e22x7 = this[_0xee2b[1734]];
    var _0x8e22xa = this[_0xee2b[1735]] || 1;
    var _0x8e22x9 = this[_0xee2b[1736]](_0x8e22x6, _0x8e22x2, _0x8e22x7, _0x8e22xa);
    this[_0xee2b[254]](true);
    this[_0xee2b[453]]();
    this[_0xee2b[255]](_0x8e22x9);
    if (this[_0xee2b[1466]]() === 0) {
      Ext[_0xee2b[1182]][_0xee2b[3]](_0xee2b[1737]);
    }
    this[_0xee2b[455]]();
    var _0x8e22x4 = Sch[_0xee2b[49]][_0xee2b[703]];
    var _0x8e22x1 = _0x8e22x9[_0xee2b[4]];
    if (this[_0xee2b[1738]]()) {
      this[_0xee2b[1739]] = _0x8e22xd[_0xee2b[179]];
      this[_0xee2b[1740]] = this[_0xee2b[1283]](_0x8e22x1 > 1 ? _0x8e22x9[_0x8e22x1 - 1][_0xee2b[179]] : _0x8e22xd[_0xee2b[179]], _0x8e22x7, _0x8e22xa);
    } else {
      this[_0xee2b[1739]] = this[_0xee2b[697]]();
      this[_0xee2b[1740]] = this[_0xee2b[698]]();
    }
    do {
      this[_0xee2b[1741]] = (this[_0xee2b[697]]() - this[_0xee2b[1739]]) / (_0x8e22x4[_0xee2b[1188]](_0x8e22x7) * _0x8e22xa);
      if (this[_0xee2b[1741]] >= 1) {
        this[_0xee2b[1739]] = _0x8e22x4[_0xee2b[1283]](this[_0xee2b[1739]], _0x8e22x7, _0x8e22xa);
      }
    } while (this[_0xee2b[1741]] >= 1);
    do {
      this[_0xee2b[1742]] = _0x8e22x1 - (this[_0xee2b[1740]] - this[_0xee2b[698]]()) / (_0x8e22x4[_0xee2b[1188]](_0x8e22x7) * _0x8e22xa);
      if (_0x8e22x1 - this[_0xee2b[1742]] >= 1) {
        this[_0xee2b[1740]] = _0x8e22x4[_0xee2b[1283]](this[_0xee2b[1740]], _0x8e22x7, -1);
      }
    } while (_0x8e22x1 - this[_0xee2b[1742]] >= 1);
    this[_0xee2b[180]](_0xee2b[1724], this, _0x8e22x3);
  }
}, isWeek:function() {
  return this[_0xee2b[1719]] !== _0xee2b[1717];
}, setMode:function(_0x8e22x3) {
  this[_0xee2b[1719]] = _0x8e22x3;
  if (this[_0xee2b[872]]()) {
    this[_0xee2b[1743]] = function(_0x8e22x6) {
      if (this[_0xee2b[1119]] > 0 || this[_0xee2b[1121]] < 24) {
        return _0x8e22x6[_0xee2b[1127]]() >= this[_0xee2b[1119]] && _0x8e22x6[_0xee2b[1127]]() < this[_0xee2b[1121]];
      } else {
        return true;
      }
    };
  } else {
    this[_0xee2b[1743]] = function() {
      return true;
    };
  }
}, setTimeSpan:function(_0x8e22x4, _0x8e22x3) {
  var _0x8e22x6 = this[_0xee2b[1731]](_0x8e22x4, _0x8e22x3);
  _0x8e22x4 = _0x8e22x6[_0xee2b[179]];
  _0x8e22x3 = _0x8e22x6[_0xee2b[771]];
  if (this[_0xee2b[697]]() - _0x8e22x4 !== 0 || this[_0xee2b[698]]() - _0x8e22x3 !== 0) {
    this[_0xee2b[1723]]({start:_0x8e22x4, end:_0x8e22x3});
  }
}, filterBy:function(_0x8e22x6, _0x8e22x3) {
  this[_0xee2b[1722]] = false;
  _0x8e22x3 = _0x8e22x3 || this;
  this[_0xee2b[1744]](true);
  this[_0xee2b[453]](true);
  this[_0xee2b[173]]([{filterFn:function(_0x8e22x5, _0x8e22x4) {
    return _0x8e22x6[_0xee2b[293]](_0x8e22x3, _0x8e22x5[_0xee2b[22]], _0x8e22x4);
  }}]);
  if (this[_0xee2b[1466]]() === 0) {
    this[_0xee2b[1744]]();
    this[_0xee2b[455]]();
    Ext[_0xee2b[1182]][_0xee2b[3]](_0xee2b[1745]);
  }
  this[_0xee2b[455]]();
}, isContinuous:function() {
  var _0x8e22x3 = this[_0xee2b[1722]] && !this[_0xee2b[1086]]();
  if (this[_0xee2b[872]]()) {
    _0x8e22x3 = _0x8e22x3 && this[_0xee2b[1119]] === 0 && this[_0xee2b[1121]] === 24;
  }
  return _0x8e22x3;
}, clearFilter:function() {
  this[_0xee2b[1722]] = this[_0xee2b[1721]];
  this[_0xee2b[9]](arguments);
}, generateTicks:function(_0x8e22x3, _0x8e22x5, _0x8e22x9, _0x8e22xa) {
  var _0x8e22x7 = [], _0x8e22x1, _0x8e22x6 = Sch[_0xee2b[49]][_0xee2b[703]], _0x8e22x2 = 0;
  _0x8e22x9 = _0x8e22x9 || this[_0xee2b[1734]];
  _0x8e22xa = _0x8e22xa || this[_0xee2b[1735]];
  var _0x8e22x8 = this[_0xee2b[1731]](_0x8e22x3, _0x8e22x5);
  _0x8e22x3 = _0x8e22x8[_0xee2b[179]];
  _0x8e22x5 = _0x8e22x8[_0xee2b[771]];
  while (_0x8e22x3 < _0x8e22x5) {
    _0x8e22x1 = this[_0xee2b[1283]](_0x8e22x3, _0x8e22x9, _0x8e22xa);
    if (!this[_0xee2b[1746]] && _0x8e22x1 > _0x8e22x5) {
      _0x8e22x1 = _0x8e22x5;
    }
    if (_0x8e22x9 === _0x8e22x6[_0xee2b[710]] && _0x8e22xa > 1 && _0x8e22x7[_0xee2b[4]] > 0 && _0x8e22x2 === 0) {
      var _0x8e22x4 = _0x8e22x7[_0x8e22x7[_0xee2b[4]] - 1];
      _0x8e22x2 = (_0x8e22x4[_0xee2b[179]][_0xee2b[1127]]() + _0x8e22xa) % 24 - _0x8e22x4[_0xee2b[771]][_0xee2b[1127]]();
      if (_0x8e22x2 !== 0) {
        _0x8e22x1 = _0x8e22x6[_0xee2b[255]](_0x8e22x1, _0x8e22x6.HOUR, _0x8e22x2);
      }
    }
    this[_0xee2b[1743]](_0x8e22x3) && _0x8e22x7[_0xee2b[11]]({start:_0x8e22x3, end:_0x8e22x1});
    _0x8e22x3 = _0x8e22x1;
  }
  return _0x8e22x7;
}, getVisibleTickTimeSpan:function() {
  return this[_0xee2b[1738]]() ? this[_0xee2b[1742]] - this[_0xee2b[1741]] : this[_0xee2b[1466]]();
}, getAdjustedDates:function(_0x8e22x6, _0x8e22x2, _0x8e22x5) {
  var _0x8e22x4 = Sch[_0xee2b[49]][_0xee2b[703]];
  _0x8e22x6 = _0x8e22x6 || this[_0xee2b[697]]();
  _0x8e22x2 = _0x8e22x2 || _0x8e22x4[_0xee2b[255]](_0x8e22x6, this[_0xee2b[1747]], this[_0xee2b[1748]]);
  if (this[_0xee2b[872]]()) {
    if (this[_0xee2b[1749]] === _0x8e22x4[_0xee2b[1145]]) {
      var _0x8e22x9 = _0x8e22x4[_0xee2b[255]](_0x8e22x6, _0x8e22x4.WEEK, 1);
      var _0x8e22x1 = _0x8e22x4[_0xee2b[255]](_0x8e22x2, _0x8e22x4.WEEK, -1);
      if (!_0x8e22x2) {
        _0x8e22x2 = this[_0xee2b[1283]](_0x8e22x6, this[_0xee2b[1749]], 1);
        _0x8e22x2 = this[_0xee2b[1750]](_0x8e22x2, false, this[_0xee2b[1749]]);
        _0x8e22x2 = this[_0xee2b[1750]](_0x8e22x2, false, this[_0xee2b[1747]]);
      }
      if (_0x8e22x9[_0xee2b[480]]() !== _0x8e22x6[_0xee2b[480]]() && _0x8e22x1[_0xee2b[480]]() !== _0x8e22x2[_0xee2b[480]]()) {
        return {start:_0x8e22x6, end:_0x8e22x2};
      }
    }
    var _0x8e22xa, _0x8e22x3, _0x8e22x7;
    _0x8e22xa = this[_0xee2b[1751]](_0x8e22x6, false, this[_0xee2b[1749]], 1);
    _0x8e22xa = this[_0xee2b[1751]](_0x8e22xa, false, this[_0xee2b[1747]], 1);
    if (this[_0xee2b[1746]]) {
      _0x8e22x7 = this[_0xee2b[1283]](_0x8e22x6, this[_0xee2b[1749]], 1);
      _0x8e22x3 = this[_0xee2b[1750]](_0x8e22x7, false, this[_0xee2b[1749]]);
      _0x8e22x3 = this[_0xee2b[1750]](_0x8e22x3, false, this[_0xee2b[1747]]);
    } else {
      _0x8e22x3 = this[_0xee2b[1750]](_0x8e22x2, false, this[_0xee2b[1749]]);
      _0x8e22x3 = this[_0xee2b[1750]](_0x8e22x3, false, this[_0xee2b[1747]]);
    }
    return {start:_0x8e22xa, end:_0x8e22x3};
  } else {
    return this[_0xee2b[1746]] || _0x8e22x5 ? {start:this[_0xee2b[1751]](_0x8e22x6, false, this[_0xee2b[1746]] ? this[_0xee2b[1747]] : this[_0xee2b[1734]], 1), end:this[_0xee2b[1750]](_0x8e22x2, false, this[_0xee2b[1746]] ? this[_0xee2b[1747]] : this[_0xee2b[1734]], 1)} : {start:_0x8e22x6, end:_0x8e22x2};
  }
}, getTickFromDate:function(_0x8e22x5) {
  var _0x8e22x8 = this[_0xee2b[22]][_0xee2b[266]];
  var _0x8e22x7 = _0x8e22x8[_0xee2b[4]] - 1;
  if (_0x8e22x5.valueOf() < _0x8e22x8[0][_0xee2b[22]][_0xee2b[179]].valueOf() || _0x8e22x5.valueOf() > _0x8e22x8[_0x8e22x7][_0xee2b[22]][_0xee2b[771]].valueOf()) {
    return -1;
  }
  var _0x8e22x1, _0x8e22x9, _0x8e22x6;
  if (this[_0xee2b[1738]]()) {
    if (_0x8e22x5 - _0x8e22x8[0][_0xee2b[22]][_0xee2b[179]] === 0) {
      return this[_0xee2b[1741]];
    }
    if (_0x8e22x5 - _0x8e22x8[_0x8e22x7][_0xee2b[22]][_0xee2b[771]] === 0) {
      return this[_0xee2b[1742]];
    }
    var _0x8e22xd = this[_0xee2b[1739]];
    var _0x8e22x3 = this[_0xee2b[1740]];
    var _0x8e22x4 = Math[_0xee2b[424]](_0x8e22x8[_0xee2b[4]] * (_0x8e22x5 - _0x8e22xd) / (_0x8e22x3 - _0x8e22xd));
    if (_0x8e22x4 > _0x8e22x7) {
      _0x8e22x4 = _0x8e22x7;
    }
    _0x8e22x9 = _0x8e22x4 === 0 ? _0x8e22xd : _0x8e22x8[_0x8e22x4][_0xee2b[22]][_0xee2b[179]];
    _0x8e22x6 = _0x8e22x4 == _0x8e22x7 ? _0x8e22x3 : _0x8e22x8[_0x8e22x4][_0xee2b[22]][_0xee2b[771]];
    _0x8e22x1 = _0x8e22x4 + (_0x8e22x5 - _0x8e22x9) / (_0x8e22x6 - _0x8e22x9);
    if (_0x8e22x1 < this[_0xee2b[1741]] || _0x8e22x1 > this[_0xee2b[1742]]) {
      return -1;
    }
    return _0x8e22x1;
  } else {
    for (var _0x8e22x2 = 0; _0x8e22x2 <= _0x8e22x7; _0x8e22x2++) {
      _0x8e22x6 = _0x8e22x8[_0x8e22x2][_0xee2b[22]][_0xee2b[771]];
      if (_0x8e22x5 <= _0x8e22x6) {
        _0x8e22x9 = _0x8e22x8[_0x8e22x2][_0xee2b[22]][_0xee2b[179]];
        _0x8e22x1 = _0x8e22x2 + (_0x8e22x5 > _0x8e22x9 ? (_0x8e22x5 - _0x8e22x9) / (_0x8e22x6 - _0x8e22x9) : 0);
        return _0x8e22x1;
      }
    }
  }
  return -1;
}, getDateFromTick:function(_0x8e22x2, _0x8e22xa) {
  if (_0x8e22x2 === this[_0xee2b[1742]]) {
    return this[_0xee2b[698]]();
  }
  var _0x8e22x6 = Math[_0xee2b[424]](_0x8e22x2), _0x8e22x9 = _0x8e22x2 - _0x8e22x6, _0x8e22x7 = this[_0xee2b[1752]](_0x8e22x6);
  if (!_0x8e22x7) {
    return null;
  }
  var _0x8e22x1 = _0x8e22x7[_0xee2b[22]];
  var _0x8e22x3 = _0x8e22x6 === 0 ? this[_0xee2b[1739]] : _0x8e22x1[_0xee2b[179]];
  var _0x8e22x5 = _0x8e22x6 == this[_0xee2b[1466]]() - 1 && this[_0xee2b[1738]]() ? this[_0xee2b[1740]] : _0x8e22x1[_0xee2b[771]];
  var _0x8e22x4 = Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[255]](_0x8e22x3, Sch[_0xee2b[49]][_0xee2b[703]].MILLI, _0x8e22x9 * (_0x8e22x5 - _0x8e22x3));
  if (_0x8e22xa) {
    _0x8e22x4 = this[_0x8e22xa + _0xee2b[703]](_0x8e22x4);
  }
  return _0x8e22x4;
}, getTicks:function() {
  var _0x8e22x3 = [];
  this[_0xee2b[25]](function(_0x8e22x6) {
    _0x8e22x3[_0xee2b[11]](_0x8e22x6[_0xee2b[22]]);
  });
  return _0x8e22x3;
}, getStart:function() {
  var _0x8e22x3 = this[_0xee2b[572]]();
  if (_0x8e22x3) {
    return _0x8e22x3[_0xee2b[22]][_0xee2b[179]];
  }
  return null;
}, getEnd:function() {
  var _0x8e22x3 = this[_0xee2b[576]]();
  if (_0x8e22x3) {
    return _0x8e22x3[_0xee2b[22]][_0xee2b[771]];
  }
  return null;
}, floorDate:function(_0x8e22x2, _0x8e22x9, _0x8e22x7, _0x8e22x3) {
  _0x8e22x9 = _0x8e22x9 !== false;
  var _0x8e22x4 = Ext[_0xee2b[703]][_0xee2b[1161]](_0x8e22x2), _0x8e22x5 = _0x8e22x9 ? this[_0xee2b[697]]() : null, _0x8e22x10 = _0x8e22x3 || this[_0xee2b[1753]], _0x8e22xd;
  if (_0x8e22x7) {
    _0x8e22xd = _0x8e22x7;
  } else {
    _0x8e22xd = _0x8e22x9 ? this[_0xee2b[1754]] : this[_0xee2b[1747]];
  }
  var _0x8e22x6 = Sch[_0xee2b[49]][_0xee2b[703]];
  var _0x8e22x1 = function(_0x8e22xc, _0x8e22xf) {
    return Math[_0xee2b[424]](_0x8e22xc / _0x8e22xf) * _0x8e22xf;
  };
  switch(_0x8e22xd) {
    case _0x8e22x6[_0xee2b[1143]]:
      if (_0x8e22x9) {
        _0x8e22x4 = _0x8e22x6[_0xee2b[255]](_0x8e22x5, _0x8e22x6.MILLI, _0x8e22x1(_0x8e22x6[_0xee2b[1173]](_0x8e22x5, _0x8e22x4), _0x8e22x10));
      }
      break;
    case _0x8e22x6[_0xee2b[1144]]:
      if (_0x8e22x9) {
        _0x8e22x4 = _0x8e22x6[_0xee2b[255]](_0x8e22x5, _0x8e22x6.MILLI, _0x8e22x1(_0x8e22x6[_0xee2b[1172]](_0x8e22x5, _0x8e22x4), _0x8e22x10) * 1000);
      } else {
        _0x8e22x4[_0xee2b[1160]](0);
        _0x8e22x4[_0xee2b[1158]](_0x8e22x1(_0x8e22x4[_0xee2b[1157]](), _0x8e22x10));
      }
      break;
    case _0x8e22x6[_0xee2b[711]]:
      if (_0x8e22x9) {
        _0x8e22x4 = _0x8e22x6[_0xee2b[255]](_0x8e22x5, _0x8e22x6.SECOND, _0x8e22x1(_0x8e22x6[_0xee2b[702]](_0x8e22x5, _0x8e22x4), _0x8e22x10) * 60);
      } else {
        _0x8e22x4[_0xee2b[1156]](_0x8e22x1(_0x8e22x4[_0xee2b[1130]](), _0x8e22x10));
        _0x8e22x4[_0xee2b[1158]](0);
        _0x8e22x4[_0xee2b[1160]](0);
      }
      break;
    case _0x8e22x6[_0xee2b[710]]:
      if (_0x8e22x9) {
        _0x8e22x4 = _0x8e22x6[_0xee2b[255]](_0x8e22x5, _0x8e22x6.MINUTE, _0x8e22x1(_0x8e22x6[_0xee2b[1171]](this[_0xee2b[697]](), _0x8e22x4), _0x8e22x10) * 60);
      } else {
        _0x8e22x4[_0xee2b[1156]](0);
        _0x8e22x4[_0xee2b[1158]](0);
        _0x8e22x4[_0xee2b[1160]](0);
        _0x8e22x4[_0xee2b[1155]](_0x8e22x1(_0x8e22x4[_0xee2b[1127]](), _0x8e22x10));
      }
      break;
    case _0x8e22x6[_0xee2b[708]]:
      if (_0x8e22x9) {
        _0x8e22x4 = _0x8e22x6[_0xee2b[255]](_0x8e22x5, _0x8e22x6.DAY, _0x8e22x1(_0x8e22x6[_0xee2b[1170]](_0x8e22x5, _0x8e22x4), _0x8e22x10));
      } else {
        Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[1101]](_0x8e22x4);
        _0x8e22x4[_0xee2b[1163]](_0x8e22x1(_0x8e22x4[_0xee2b[479]]() - 1, _0x8e22x10) + 1);
      }
      break;
    case _0x8e22x6[_0xee2b[1148]]:
      var _0x8e22x8 = _0x8e22x4[_0xee2b[484]]() || 7;
      var _0x8e22xa = this[_0xee2b[1755]] || 7;
      Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[1101]](_0x8e22x4);
      _0x8e22x4 = _0x8e22x6[_0xee2b[255]](_0x8e22x4, _0x8e22x6.DAY, _0x8e22x8 >= _0x8e22xa ? _0x8e22xa - _0x8e22x8 : -(7 - _0x8e22xa + _0x8e22x8));
      if (_0x8e22x4[_0xee2b[484]]() !== _0x8e22xa && _0x8e22x4[_0xee2b[1127]]() === 23) {
        _0x8e22x4 = _0x8e22x6[_0xee2b[255]](_0x8e22x4, _0x8e22x6.HOUR, 1);
      }
      break;
    case _0x8e22x6[_0xee2b[1145]]:
      if (_0x8e22x9) {
        _0x8e22x4 = _0x8e22x6[_0xee2b[255]](_0x8e22x5, _0x8e22x6.MONTH, _0x8e22x1(_0x8e22x6[_0xee2b[1169]](_0x8e22x5, _0x8e22x4), _0x8e22x10));
      } else {
        Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[1101]](_0x8e22x4);
        _0x8e22x4[_0xee2b[1163]](1);
        _0x8e22x4[_0xee2b[1166]](_0x8e22x1(_0x8e22x4[_0xee2b[480]](), _0x8e22x10));
      }
      break;
    case _0x8e22x6[_0xee2b[1149]]:
      Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[1101]](_0x8e22x4);
      _0x8e22x4[_0xee2b[1163]](1);
      _0x8e22x4 = _0x8e22x6[_0xee2b[255]](_0x8e22x4, _0x8e22x6.MONTH, -(_0x8e22x4[_0xee2b[480]]() % 3));
      break;
    case _0x8e22x6[_0xee2b[1146]]:
      if (_0x8e22x9) {
        _0x8e22x4 = _0x8e22x6[_0xee2b[255]](_0x8e22x5, _0x8e22x6.YEAR, _0x8e22x1(_0x8e22x6[_0xee2b[1168]](_0x8e22x5, _0x8e22x4), _0x8e22x10));
      } else {
        var _0x8e22xe = _0x8e22x1(_0x8e22x2[_0xee2b[1136]]() - 1, _0x8e22x10) + 1;
        _0x8e22x4 = new Date(0, 0, 1);
        _0x8e22x4[_0xee2b[1167]](_0x8e22xe);
      }
      break;
  }
  return _0x8e22x4;
}, roundDate:function(_0x8e22x14, _0x8e22x6) {
  var _0x8e22xc = Ext[_0xee2b[703]][_0xee2b[1161]](_0x8e22x14), _0x8e22x12 = this[_0xee2b[1753]];
  _0x8e22x6 = _0x8e22x6 || this[_0xee2b[697]]();
  var _0x8e22x5 = _0x8e22x6[_0xee2b[1174]]() - _0x8e22xc[_0xee2b[1174]]();
  switch(this[_0xee2b[1754]]) {
    case Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[1143]]:
      var _0x8e22x9 = Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[1173]](_0x8e22x6, _0x8e22xc);
      var _0x8e22x11 = _0x8e22x5 * 60 * 1000;
      var _0x8e22x1 = Math[_0xee2b[704]]((_0x8e22x9 + _0x8e22x11) / _0x8e22x12) * _0x8e22x12;
      _0x8e22xc = Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[255]](_0x8e22x6, Sch[_0xee2b[49]][_0xee2b[703]].MILLI, _0x8e22x1 - _0x8e22x11);
      break;
    case Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[1144]]:
      var _0x8e22x10 = Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[1172]](_0x8e22x6, _0x8e22xc);
      var _0x8e22xd = _0x8e22x5 * 60;
      var _0x8e22x16 = Math[_0xee2b[704]]((_0x8e22x10 + _0x8e22xd) / _0x8e22x12) * _0x8e22x12;
      _0x8e22xc = Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[255]](_0x8e22x6, Sch[_0xee2b[49]][_0xee2b[703]].MILLI, (_0x8e22x16 - _0x8e22xd) * 1000);
      break;
    case Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[711]]:
      var _0x8e22x18 = Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[702]](_0x8e22x6, _0x8e22xc);
      var _0x8e22x3 = Math[_0xee2b[704]]((_0x8e22x18 + _0x8e22x5) / _0x8e22x12) * _0x8e22x12;
      _0x8e22xc = Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[255]](_0x8e22x6, Sch[_0xee2b[49]][_0xee2b[703]].SECOND, (_0x8e22x3 - _0x8e22x5) * 60);
      break;
    case Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[710]]:
      var _0x8e22xb = Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[1171]](_0x8e22x6, _0x8e22xc);
      var _0x8e22x2 = _0x8e22x5 / 60;
      var _0x8e22xe = Math[_0xee2b[704]]((_0x8e22xb + _0x8e22x2) / _0x8e22x12) * _0x8e22x12;
      _0x8e22xc = Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[255]](_0x8e22x6, Sch[_0xee2b[49]][_0xee2b[703]].MINUTE, (_0x8e22xe - _0x8e22x2) * 60);
      break;
    case Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[708]]:
      var _0x8e22x4 = Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[1170]](_0x8e22x6, _0x8e22xc), _0x8e22x7 = Math[_0xee2b[704]](_0x8e22x4 / _0x8e22x12) * _0x8e22x12;
      _0x8e22xc = Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[255]](_0x8e22x6, Sch[_0xee2b[49]][_0xee2b[703]].DAY, _0x8e22x7);
      break;
    case Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[1148]]:
      Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[1101]](_0x8e22xc);
      var _0x8e22x19 = _0x8e22xc[_0xee2b[484]]() - this[_0xee2b[1755]], _0x8e22x13;
      if (_0x8e22x19 < 0) {
        _0x8e22x19 = 7 + _0x8e22x19;
      }
      if (Math[_0xee2b[704]](_0x8e22x19 / 7) === 1) {
        _0x8e22x13 = 7 - _0x8e22x19;
      } else {
        _0x8e22x13 = -_0x8e22x19;
      }
      _0x8e22xc = Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[255]](_0x8e22xc, Sch[_0xee2b[49]][_0xee2b[703]].DAY, _0x8e22x13);
      break;
    case Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[1145]]:
      var _0x8e22x15 = Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[1169]](_0x8e22x6, _0x8e22xc) + _0x8e22xc[_0xee2b[479]]() / Ext[_0xee2b[703]][_0xee2b[1523]](_0x8e22xc), _0x8e22x8 = Math[_0xee2b[704]](_0x8e22x15 / _0x8e22x12) * _0x8e22x12;
      _0x8e22xc = Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[255]](_0x8e22x6, Sch[_0xee2b[49]][_0xee2b[703]].MONTH, _0x8e22x8);
      break;
    case Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[1149]]:
      Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[1101]](_0x8e22xc);
      _0x8e22xc[_0xee2b[1163]](1);
      _0x8e22xc = Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[255]](_0x8e22xc, Sch[_0xee2b[49]][_0xee2b[703]].MONTH, 3 - _0x8e22xc[_0xee2b[480]]() % 3);
      break;
    case Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[1146]]:
      var _0x8e22xf = Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[1168]](_0x8e22x6, _0x8e22xc), _0x8e22xa = Math[_0xee2b[704]](_0x8e22xf / _0x8e22x12) * _0x8e22x12;
      _0x8e22xc = Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[255]](_0x8e22x6, Sch[_0xee2b[49]][_0xee2b[703]].YEAR, _0x8e22xa);
      break;
  }
  return _0x8e22xc;
}, ceilDate:function(_0x8e22x4, _0x8e22x6, _0x8e22x1, _0x8e22x3) {
  var _0x8e22x2 = Ext[_0xee2b[703]][_0xee2b[1161]](_0x8e22x4);
  _0x8e22x6 = _0x8e22x6 !== false;
  _0x8e22x3 = _0x8e22x3 || (_0x8e22x6 ? this[_0xee2b[1753]] : 1);
  var _0x8e22x9 = false, _0x8e22x5;
  if (_0x8e22x1) {
    _0x8e22x5 = _0x8e22x1;
  } else {
    _0x8e22x5 = _0x8e22x6 ? this[_0xee2b[1754]] : this[_0xee2b[1747]];
  }
  switch(_0x8e22x5) {
    case Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[710]]:
      if (_0x8e22x2[_0xee2b[1130]]() > 0 || _0x8e22x2[_0xee2b[1157]]() > 0 || _0x8e22x2[_0xee2b[1159]]() > 0) {
        _0x8e22x9 = true;
      }
      break;
    case Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[708]]:
      if (_0x8e22x2[_0xee2b[1127]]() > 0 || _0x8e22x2[_0xee2b[1130]]() > 0 || _0x8e22x2[_0xee2b[1157]]() > 0 || _0x8e22x2[_0xee2b[1159]]() > 0) {
        _0x8e22x9 = true;
      }
      break;
    case Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[1148]]:
      Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[1101]](_0x8e22x2);
      if (_0x8e22x2[_0xee2b[484]]() !== this[_0xee2b[1755]] || _0x8e22x4[_0xee2b[1162]]() - _0x8e22x2[_0xee2b[1162]]() > 0) {
        _0x8e22x9 = true;
      }
      break;
    case Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[1145]]:
      Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[1101]](_0x8e22x2);
      if (_0x8e22x2[_0xee2b[479]]() !== 1 || _0x8e22x4[_0xee2b[1162]]() - _0x8e22x2[_0xee2b[1162]]() > 0) {
        _0x8e22x9 = true;
      }
      break;
    case Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[1149]]:
      Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[1101]](_0x8e22x2);
      if (_0x8e22x2[_0xee2b[480]]() % 3 !== 0 || _0x8e22x2[_0xee2b[479]]() !== 1 || _0x8e22x4[_0xee2b[1162]]() - _0x8e22x2[_0xee2b[1162]]() > 0) {
        _0x8e22x9 = true;
      }
      break;
    case Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[1146]]:
      Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[1101]](_0x8e22x2);
      if (_0x8e22x2[_0xee2b[480]]() !== 0 || _0x8e22x2[_0xee2b[479]]() !== 1 || _0x8e22x4[_0xee2b[1162]]() - _0x8e22x2[_0xee2b[1162]]() > 0) {
        _0x8e22x9 = true;
      }
      break;
    default:
      break;
  }
  if (_0x8e22x9) {
    return this[_0xee2b[1283]](_0x8e22x2, _0x8e22x5, _0x8e22x3);
  } else {
    return _0x8e22x2;
  }
}, getNext:function(_0x8e22x6, _0x8e22x4, _0x8e22x3) {
  return Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[1283]](_0x8e22x6, _0x8e22x4, _0x8e22x3, this[_0xee2b[1755]]);
}, getResolution:function() {
  return {unit:this[_0xee2b[1754]], increment:this[_0xee2b[1753]]};
}, setResolution:function(_0x8e22x6, _0x8e22x3) {
  this[_0xee2b[1754]] = _0x8e22x6;
  this[_0xee2b[1753]] = _0x8e22x3 || 1;
}, shift:function(_0x8e22x3, _0x8e22x6) {
  this[_0xee2b[1756]](Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[255]](this[_0xee2b[697]](), _0x8e22x6, _0x8e22x3), Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[255]](this[_0xee2b[698]](), _0x8e22x6, _0x8e22x3));
}, shiftTo:function(_0x8e22x3) {
  var _0x8e22x6 = this[_0xee2b[698]]() - this[_0xee2b[697]](), _0x8e22x4 = new Date(_0x8e22x3[_0xee2b[1162]]() + _0x8e22x6);
  this[_0xee2b[1756]](_0x8e22x3, _0x8e22x4);
}, shiftNext:function(_0x8e22x3) {
  _0x8e22x3 = _0x8e22x3 || this[_0xee2b[1757]]();
  var _0x8e22x6 = this[_0xee2b[1758]]();
  this[_0xee2b[1756]](Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[255]](this[_0xee2b[697]](), _0x8e22x6, _0x8e22x3), Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[255]](this[_0xee2b[698]](), _0x8e22x6, _0x8e22x3));
}, shiftPrevious:function(_0x8e22x3) {
  _0x8e22x3 = -(_0x8e22x3 || this[_0xee2b[1757]]());
  var _0x8e22x6 = this[_0xee2b[1758]]();
  this[_0xee2b[1756]](Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[255]](this[_0xee2b[697]](), _0x8e22x6, _0x8e22x3), Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[255]](this[_0xee2b[698]](), _0x8e22x6, _0x8e22x3));
}, getShiftUnit:function() {
  return this[_0xee2b[1749]] || this[_0xee2b[1747]];
}, getShiftIncrement:function() {
  return this[_0xee2b[1759]] || 1;
}, getUnit:function() {
  return this[_0xee2b[1734]];
}, getIncrement:function() {
  return this[_0xee2b[1735]];
}, getRowTicks:function() {
  if (this[_0xee2b[872]]()) {
    var _0x8e22x4 = this[_0xee2b[697]]();
    var _0x8e22x3 = Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[255]](_0x8e22x4, this[_0xee2b[875]][_0xee2b[753]][_0xee2b[1760]], 1);
    var _0x8e22x6 = this[_0xee2b[1761]](function(_0x8e22x5) {
      return _0x8e22x5[_0xee2b[712]]()[_0xee2b[1162]]() >= _0x8e22x3[_0xee2b[1162]]();
    });
    if (_0x8e22x6 === -1) {
      return this[_0xee2b[1005]]();
    }
    return this[_0xee2b[1005]](0, _0x8e22x6 - 1);
  }
}, dateInAxis:function(_0x8e22x4, _0x8e22x8) {
  var _0x8e22xd = false;
  var _0x8e22x1 = this[_0xee2b[697]]();
  var _0x8e22x9 = this[_0xee2b[698]]();
  if (this[_0xee2b[1738]]()) {
    _0x8e22xd = _0x8e22x8 ? Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[1762]](_0x8e22x4, _0x8e22x1, _0x8e22x9) : Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[1175]](_0x8e22x4, _0x8e22x1, _0x8e22x9);
  } else {
    var _0x8e22x6 = this[_0xee2b[1466]](), _0x8e22x7, _0x8e22x3;
    for (var _0x8e22x5 = 0; _0x8e22x5 < _0x8e22x6; _0x8e22x5++) {
      var _0x8e22x2 = this[_0xee2b[1752]](_0x8e22x5);
      _0x8e22x7 = _0x8e22x2[_0xee2b[22]][_0xee2b[179]];
      _0x8e22x3 = _0x8e22x2[_0xee2b[22]][_0xee2b[771]];
      if (_0x8e22x8 && _0x8e22x4 <= _0x8e22x3 || !_0x8e22x8 && _0x8e22x4 < _0x8e22x3) {
        return _0x8e22x4 >= _0x8e22x7;
      }
    }
  }
  return _0x8e22xd;
}, timeSpanInAxis:function(_0x8e22x7, _0x8e22x4) {
  var _0x8e22x3 = this[_0xee2b[697]]();
  var _0x8e22x9 = this[_0xee2b[698]]();
  var _0x8e22x2 = _0x8e22x4 - _0x8e22x7;
  if (_0x8e22x2 === 0) {
    return this[_0xee2b[1763]](_0x8e22x7, true);
  }
  if (this[_0xee2b[1738]]()) {
    return Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[714]](_0x8e22x7, _0x8e22x4, _0x8e22x3, _0x8e22x9);
  } else {
    var _0x8e22x5 = _0x8e22x7 < _0x8e22x3 && _0x8e22x4 > _0x8e22x9;
    if (_0x8e22x5) {
      return true;
    }
    var _0x8e22x6 = this[_0xee2b[1764]](_0x8e22x7);
    var _0x8e22x1 = this[_0xee2b[1764]](_0x8e22x4);
    return _0x8e22x6 !== _0x8e22x1 && (_0x8e22x7 < _0x8e22x9 && _0x8e22x4 > _0x8e22x3);
  }
}, isRangeInAxis:function(_0x8e22x6) {
  var _0x8e22x4 = _0x8e22x6[_0xee2b[712]](), _0x8e22x3 = _0x8e22x6[_0xee2b[713]]();
  if (!_0x8e22x4 || !_0x8e22x3) {
    return false;
  }
  return this[_0xee2b[1765]](_0x8e22x4, _0x8e22x3);
}, forEachAuxInterval:function(_0x8e22x7, _0x8e22x6, _0x8e22x3, _0x8e22x1) {
  _0x8e22x1 = _0x8e22x1 || this;
  var _0x8e22x4 = this[_0xee2b[698]](), _0x8e22x9 = this[_0xee2b[697]](), _0x8e22x2 = 0, _0x8e22x5;
  if (_0x8e22x9 > _0x8e22x4) {
    throw new Error(_0xee2b[1766]);
  }
  while (_0x8e22x9 < _0x8e22x4) {
    _0x8e22x5 = Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[203]](this[_0xee2b[1283]](_0x8e22x9, _0x8e22x7, _0x8e22x6 || 1), _0x8e22x4);
    _0x8e22x3[_0xee2b[293]](_0x8e22x1, _0x8e22x9, _0x8e22x5, _0x8e22x2);
    _0x8e22x9 = _0x8e22x5;
    _0x8e22x2++;
  }
}, consumeViewPreset:function(_0x8e22x3) {
  Ext[_0xee2b[8]](this, {unit:_0x8e22x3[_0xee2b[877]]()[_0xee2b[1734]], increment:_0x8e22x3[_0xee2b[877]]()[_0xee2b[1735]] || 1, resolutionUnit:_0x8e22x3[_0xee2b[1767]][_0xee2b[1734]], resolutionIncrement:_0x8e22x3[_0xee2b[1767]][_0xee2b[1735]], mainUnit:_0x8e22x3[_0xee2b[1768]]()[_0xee2b[1734]], shiftUnit:_0x8e22x3[_0xee2b[1749]], shiftIncrement:_0x8e22x3[_0xee2b[1759]] || 1, defaultSpan:_0x8e22x3[_0xee2b[1748]] || 1, presetName:_0x8e22x3[_0xee2b[683]], headerConfig:_0x8e22x3[_0xee2b[875]]});
}});
Ext[_0xee2b[6]](_0xee2b[1060], {extend:_0xee2b[985], requires:[_0xee2b[996]], assignmentStore:null, assignmentStoreDetacher:null, eventStoreDetacher:null, resourceStoreDetacher:null, constructor:function(_0x8e22x8) {
  var _0x8e22xd = this, _0x8e22x1 = _0x8e22x8[_0xee2b[696]](), _0x8e22xc = _0x8e22x1 && _0x8e22x1[_0xee2b[1007]]();
  _0x8e22xd[_0xee2b[9]]();
  function _0x8e22xe(_0x8e22x18, _0x8e22x19) {
    var _0x8e22x15 = _0x8e22xd[_0xee2b[1003]][_0xee2b[696]](), _0x8e22x16 = _0x8e22x15 && _0x8e22x15[_0xee2b[1007]]();
    Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x19, function(_0x8e22x12) {
      var _0x8e22x14 = _0x8e22x16 && _0x8e22x16[_0xee2b[1012]](_0x8e22x12[_0xee2b[1008]]());
      if (_0x8e22x14) {
        _0x8e22xd[_0xee2b[255]](_0x8e22x12[_0xee2b[997]](), _0x8e22x14);
      } else {
        _0x8e22xd[_0xee2b[231]](_0x8e22x12[_0xee2b[997]]());
      }
    });
  }
  function _0x8e22x6(_0x8e22x18, _0x8e22x19) {
    var _0x8e22x15 = _0x8e22xd[_0xee2b[1003]][_0xee2b[696]](), _0x8e22x16 = _0x8e22x15 && _0x8e22x15[_0xee2b[1007]]();
    Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x19, function(_0x8e22x12) {
      var _0x8e22x14 = _0x8e22x16[_0xee2b[1012]](_0x8e22x12[_0xee2b[1008]]());
      if (_0x8e22x14) {
        _0x8e22xd[_0xee2b[63]](_0x8e22x12[_0xee2b[997]](), _0x8e22x14);
      } else {
        _0x8e22xd[_0xee2b[231]](_0x8e22x12[_0xee2b[997]]());
      }
    });
  }
  function _0x8e22x11(_0x8e22x1b, _0x8e22x18, _0x8e22x13) {
    var _0x8e22x17 = _0x8e22x18[_0xee2b[1009]], _0x8e22x1d = _0x8e22x18[_0xee2b[52]] && _0x8e22x17 in _0x8e22x18[_0xee2b[52]], _0x8e22x16 = _0x8e22x1d && _0x8e22x18[_0xee2b[52]][_0x8e22x17], _0x8e22x23 = _0x8e22x18[_0xee2b[998]], _0x8e22x19 = _0x8e22x18[_0xee2b[52]] && _0x8e22x23 in _0x8e22x18[_0xee2b[52]], _0x8e22x15 = _0x8e22x19 && _0x8e22x18[_0xee2b[52]][_0x8e22x23], _0x8e22x12 = _0x8e22xd[_0xee2b[1003]][_0xee2b[696]](), _0x8e22x1a = _0x8e22x12 && _0x8e22x12[_0xee2b[1007]](), _0x8e22x14;
    if (_0x8e22x1d || _0x8e22x19) {
      _0x8e22x16 = _0x8e22x1d ? _0x8e22x16 : _0x8e22x18[_0xee2b[1008]]();
      _0x8e22x15 = _0x8e22x19 ? _0x8e22x15 : _0x8e22x18[_0xee2b[997]]();
      _0x8e22x14 = _0x8e22x1a[_0xee2b[1012]](_0x8e22x16);
      if (_0x8e22x14) {
        _0x8e22xd[_0xee2b[63]](_0x8e22x15, _0x8e22x14);
      } else {
        _0x8e22xd[_0xee2b[231]](_0x8e22x15);
      }
      _0x8e22x14 = _0x8e22x1a[_0xee2b[1012]](_0x8e22x18[_0xee2b[1008]]());
      if (_0x8e22x14) {
        _0x8e22xd[_0xee2b[255]](_0x8e22x18[_0xee2b[997]](), _0x8e22x14);
      } else {
        _0x8e22xd[_0xee2b[231]](_0x8e22x18[_0xee2b[997]]());
      }
    }
  }
  function _0x8e22xf(_0x8e22x19) {
    _0x8e22xd[_0xee2b[231]]();
  }
  function _0x8e22x4(_0x8e22x19, _0x8e22x18) {
    _0x8e22xd[_0xee2b[231]]();
    _0x8e22x3(_0x8e22x18);
    _0x8e22x5(_0x8e22x18 && _0x8e22x18[_0xee2b[1007]]());
  }
  function _0x8e22x10(_0x8e22x18, _0x8e22x15, _0x8e22x16, _0x8e22x19) {
    _0x8e22xd[_0xee2b[999]](_0x8e22x16, _0x8e22x19);
  }
  function _0x8e22x9(_0x8e22x18, _0x8e22x19) {
    Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x19, function(_0x8e22x15) {
      _0x8e22xd[_0xee2b[231]](_0x8e22x15);
    });
  }
  function _0x8e22xa() {
    _0x8e22xd[_0xee2b[231]]();
  }
  function _0x8e22xb(_0x8e22x19, _0x8e22x18) {
    _0x8e22xd[_0xee2b[231]]();
    _0x8e22x5(_0x8e22x18);
  }
  function _0x8e22x7(_0x8e22x19, _0x8e22x18) {
    Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x18, function(_0x8e22x15) {
      _0x8e22xd[_0xee2b[1769]](_0x8e22x15);
    });
  }
  function _0x8e22x2() {
    _0x8e22xd[_0xee2b[231]]();
  }
  function _0x8e22x3(_0x8e22x19) {
    Ext[_0xee2b[218]](_0x8e22xd[_0xee2b[1000]]);
    _0x8e22xd[_0xee2b[1000]] = _0x8e22x19 && _0x8e22x19[_0xee2b[149]]({idchanged:_0x8e22x10, remove:_0x8e22x9, clear:_0x8e22xa, cacheresethint:_0x8e22xa, rootchange:_0x8e22xa, resourcestorechange:_0x8e22xb, priority:100, destroyable:true});
  }
  function _0x8e22x5(_0x8e22x19) {
    Ext[_0xee2b[1770]](_0x8e22xd[_0xee2b[1010]]);
    _0x8e22xd[_0xee2b[1010]] = _0x8e22x19 && _0x8e22x19[_0xee2b[149]]({remove:_0x8e22x7, clear:_0x8e22x2, cacheresethint:_0x8e22x2, rootchange:_0x8e22x2, priority:100, destroyable:true});
  }
  _0x8e22xd[_0xee2b[1001]] = _0x8e22x8[_0xee2b[149]]({add:_0x8e22xe, remove:_0x8e22x6, update:_0x8e22x11, clear:_0x8e22xf, cacheresethint:_0x8e22xf, priority:100, destroyable:true});
  _0x8e22xd[_0xee2b[1003]] = _0x8e22x8;
}, destroy:function() {
  var _0x8e22x3 = this;
  Ext[_0xee2b[1004]](_0x8e22x3, _0xee2b[1001], _0xee2b[1000], _0xee2b[1010]);
  _0x8e22x3[_0xee2b[1003]] = null;
}, get:function(_0x8e22x3, _0x8e22x6) {
  var _0x8e22x4 = this;
  _0x8e22x6 = _0x8e22x6 || function() {
    return _0x8e22x4[_0xee2b[1003]][_0xee2b[1084]](_0x8e22x3, function _0x8e22x2(_0x8e22x1) {
      return _0x8e22x1[_0xee2b[1053]]();
    }, function _0x8e22x5(_0x8e22x1) {
      return !!_0x8e22x1;
    });
  };
  return _0x8e22x4[_0xee2b[9]]([_0x8e22x3, _0x8e22x6]);
}});
Ext[_0xee2b[6]](_0xee2b[1061], {extend:_0xee2b[985], requires:[_0xee2b[996]], assignmentStore:null, assignmentStoreDetacher:null, eventStoreDetacher:null, resourceStoreDetacher:null, constructor:function(_0x8e22x8) {
  var _0x8e22x10 = this, _0x8e22x1 = _0x8e22x8[_0xee2b[696]](), _0x8e22xc = _0x8e22x1 && _0x8e22x1[_0xee2b[1007]]();
  _0x8e22x10[_0xee2b[9]]();
  function _0x8e22xe(_0x8e22x18, _0x8e22x19) {
    var _0x8e22x15 = _0x8e22x10[_0xee2b[1003]][_0xee2b[696]]();
    Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x19, function(_0x8e22x14) {
      var _0x8e22x16 = _0x8e22x15 && _0x8e22x15[_0xee2b[1012]](_0x8e22x14[_0xee2b[997]]());
      if (_0x8e22x16) {
        _0x8e22x10[_0xee2b[255]](_0x8e22x14[_0xee2b[1008]](), _0x8e22x16);
      } else {
        _0x8e22x10[_0xee2b[231]](_0x8e22x14[_0xee2b[1008]]());
      }
    });
  }
  function _0x8e22x6(_0x8e22x18, _0x8e22x19) {
    var _0x8e22x15 = _0x8e22x10[_0xee2b[1003]][_0xee2b[696]]();
    Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x19, function(_0x8e22x14) {
      var _0x8e22x16 = _0x8e22x15 && _0x8e22x15[_0xee2b[1012]](_0x8e22x14[_0xee2b[997]]());
      if (_0x8e22x16) {
        _0x8e22x10[_0xee2b[63]](_0x8e22x14[_0xee2b[1008]](), _0x8e22x16);
      } else {
        _0x8e22x10[_0xee2b[231]](_0x8e22x14[_0xee2b[1008]]());
      }
    });
  }
  function _0x8e22x11(_0x8e22x1a, _0x8e22x15, _0x8e22x13) {
    var _0x8e22x17 = _0x8e22x15[_0xee2b[1009]], _0x8e22x1b = _0x8e22x15[_0xee2b[52]] && _0x8e22x17 in _0x8e22x15[_0xee2b[52]], _0x8e22x14 = _0x8e22x1b && _0x8e22x15[_0xee2b[52]][_0x8e22x17], _0x8e22x23 = _0x8e22x15[_0xee2b[998]], _0x8e22x19 = _0x8e22x15[_0xee2b[52]] && _0x8e22x23 in _0x8e22x15[_0xee2b[52]], _0x8e22x16 = _0x8e22x19 && _0x8e22x15[_0xee2b[52]][_0x8e22x23], _0x8e22x12 = _0x8e22x10[_0xee2b[1003]][_0xee2b[696]](), _0x8e22x18;
    if (_0x8e22x1b || _0x8e22x19) {
      _0x8e22x14 = _0x8e22x1b ? _0x8e22x14 : _0x8e22x15[_0xee2b[1008]]();
      _0x8e22x16 = _0x8e22x19 ? _0x8e22x16 : _0x8e22x15[_0xee2b[997]]();
      _0x8e22x18 = _0x8e22x12 && _0x8e22x12[_0xee2b[1012]](_0x8e22x16);
      if (_0x8e22x18) {
        _0x8e22x10[_0xee2b[63]](_0x8e22x14, _0x8e22x18);
      } else {
        _0x8e22x10[_0xee2b[231]](_0x8e22x14);
      }
      _0x8e22x18 = _0x8e22x12 && _0x8e22x12[_0xee2b[1012]](_0x8e22x15[_0xee2b[997]]());
      if (_0x8e22x18) {
        _0x8e22x10[_0xee2b[255]](_0x8e22x15[_0xee2b[1008]](), _0x8e22x18);
      } else {
        _0x8e22x10[_0xee2b[231]](_0x8e22x15[_0xee2b[1008]]());
      }
    }
  }
  function _0x8e22xf(_0x8e22x19) {
    _0x8e22x10[_0xee2b[231]]();
  }
  function _0x8e22x4(_0x8e22x19, _0x8e22x18) {
    _0x8e22x10[_0xee2b[231]]();
    _0x8e22x3(_0x8e22x18);
    _0x8e22x5(_0x8e22x18 && _0x8e22x18[_0xee2b[1007]]());
  }
  function _0x8e22x9(_0x8e22x18, _0x8e22x19) {
    Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x19, function(_0x8e22x15) {
      _0x8e22x10[_0xee2b[1769]](_0x8e22x15);
    });
  }
  function _0x8e22xa() {
    _0x8e22x10[_0xee2b[231]]();
  }
  function _0x8e22xb(_0x8e22x19, _0x8e22x18) {
    _0x8e22x10[_0xee2b[231]]();
    _0x8e22x5(_0x8e22x18);
  }
  function _0x8e22xd(_0x8e22x18, _0x8e22x15, _0x8e22x16, _0x8e22x19) {
    _0x8e22x10[_0xee2b[999]](_0x8e22x16, _0x8e22x19);
  }
  function _0x8e22x7(_0x8e22x19, _0x8e22x18) {
    Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x18, function(_0x8e22x15) {
      _0x8e22x10[_0xee2b[231]](_0x8e22x15);
    });
  }
  function _0x8e22x2() {
    _0x8e22x10[_0xee2b[231]]();
  }
  function _0x8e22x3(_0x8e22x19) {
    Ext[_0xee2b[218]](_0x8e22x10[_0xee2b[1000]]);
    _0x8e22x10[_0xee2b[1000]] = _0x8e22x19 && _0x8e22x19[_0xee2b[149]]({remove:_0x8e22x9, cacheresethint:_0x8e22xa, clear:_0x8e22xa, rootchange:_0x8e22xa, resourcestorechange:_0x8e22xb, priority:100, destroyable:true});
  }
  function _0x8e22x5(_0x8e22x19) {
    Ext[_0xee2b[218]](_0x8e22x10[_0xee2b[1010]]);
    _0x8e22x10[_0xee2b[1010]] = _0x8e22x19 && _0x8e22x19[_0xee2b[149]]({idchanged:_0x8e22xd, remove:_0x8e22x7, cacheresethint:_0x8e22x2, clear:_0x8e22x2, rootchange:_0x8e22x2, priority:100, destroyable:true});
  }
  _0x8e22x10[_0xee2b[1001]] = _0x8e22x8[_0xee2b[149]]({add:_0x8e22xe, remove:_0x8e22x6, update:_0x8e22x11, cacheresethint:_0x8e22xf, clear:_0x8e22xf, eventstorechange:_0x8e22x4, priority:100, destroyable:true});
  _0x8e22x3(_0x8e22x1);
  _0x8e22x5(_0x8e22xc);
  _0x8e22x10[_0xee2b[1003]] = _0x8e22x8;
}, destroy:function() {
  var _0x8e22x3 = this;
  Ext[_0xee2b[1004]](_0x8e22x3, _0xee2b[1001], _0xee2b[1000], _0xee2b[1010]);
  _0x8e22x3[_0xee2b[1003]] = null;
}, get:function(_0x8e22x3, _0x8e22x6) {
  var _0x8e22x4 = this;
  _0x8e22x6 = _0x8e22x6 || function() {
    return _0x8e22x4[_0xee2b[1003]][_0xee2b[1085]](_0x8e22x3, function _0x8e22x2(_0x8e22x1) {
      return _0x8e22x1[_0xee2b[1052]]();
    }, function _0x8e22x5(_0x8e22x1) {
      return !!_0x8e22x1;
    });
  };
  return _0x8e22x4[_0xee2b[9]]([_0x8e22x3, _0x8e22x6]);
}});
Ext[_0xee2b[6]](_0xee2b[1771], {requires:[_0xee2b[1507]], mixins:[_0xee2b[665]], singleton:true, allDaysValue:_0xee2b[1772], workingDaysValue:_0xee2b[1773], nonWorkingDaysValue:_0xee2b[1774], getLegend:function(_0x8e22x8, _0x8e22xf) {
  var _0x8e22x18 = this, _0x8e22x4 = Sch[_0xee2b[22]][_0xee2b[49]][_0xee2b[1454]][_0xee2b[1453]], _0x8e22x19 = Ext[_0xee2b[1041]][_0xee2b[880]], _0x8e22xe = _0x8e22x8[_0xee2b[1052]](), _0x8e22x6 = _0x8e22xf || _0x8e22xe[_0xee2b[712]](), _0x8e22xb = _0x8e22x8[_0xee2b[1461]](), _0x8e22x5 = _0x8e22x8[_0xee2b[1451]](), _0x8e22x10 = _0x8e22x8[_0xee2b[1455]](), _0x8e22x7 = _0x8e22x8[_0xee2b[1456]](), _0x8e22x9 = _0x8e22x8[_0xee2b[1469]](), _0x8e22xd = _0xee2b[27], _0x8e22x2 = _0xee2b[27], _0x8e22xa;
  switch(_0x8e22x8[_0xee2b[1445]]()) {
    case _0xee2b[1429]:
      _0x8e22xd = _0x8e22xb == 1 ? _0x8e22x18.L(_0xee2b[578]) : _0x8e22x19(_0x8e22x18.L(_0xee2b[582]), _0x8e22xb);
      break;
    case _0xee2b[1436]:
      if (_0x8e22x5 && _0x8e22x5[_0xee2b[4]]) {
        _0x8e22x2 = _0x8e22x18[_0xee2b[1775]](_0x8e22x5);
      } else {
        if (_0x8e22x6) {
          _0x8e22x2 = Ext[_0xee2b[703]][_0xee2b[1776]][_0x8e22x6[_0xee2b[484]]()];
        }
      }
      _0x8e22xd = _0x8e22x19(_0x8e22xb == 1 ? _0x8e22x18.L(_0xee2b[579]) : _0x8e22x18.L(_0xee2b[583]), _0x8e22xb, _0x8e22x2);
      break;
    case _0xee2b[1437]:
      if (_0x8e22x5 && _0x8e22x5[_0xee2b[4]] && _0x8e22x9 && _0x8e22x9[_0xee2b[4]]) {
        _0x8e22x2 = _0x8e22x18[_0xee2b[1775]](_0x8e22x5, _0x8e22x9);
      } else {
        if (_0x8e22x10 && _0x8e22x10[_0xee2b[4]]) {
          _0x8e22x10[_0xee2b[1120]](function(_0x8e22x16, _0x8e22x15) {
            return _0x8e22x16 - _0x8e22x15;
          });
          _0x8e22x2 = _0x8e22x18[_0xee2b[1777]](_0x8e22x10);
        } else {
          if (_0x8e22x6) {
            _0x8e22x2 = _0x8e22x6[_0xee2b[479]]();
          }
        }
      }
      _0x8e22xd = _0x8e22x19(_0x8e22xb == 1 ? _0x8e22x18.L(_0xee2b[580]) : _0x8e22x18.L(_0xee2b[584]), _0x8e22xb, _0x8e22x2);
      break;
    case _0xee2b[1438]:
      var _0x8e22x11 = _0x8e22x5 && _0x8e22x5[_0xee2b[4]] && _0x8e22x9 && _0x8e22x9[_0xee2b[4]], _0x8e22xc = _0x8e22x7 && _0x8e22x7[_0xee2b[4]], _0x8e22x1, _0x8e22x3;
      _0x8e22x3 = _0x8e22x11 ? _0x8e22x18[_0xee2b[1775]](_0x8e22x5, _0x8e22x9) : _0x8e22x6[_0xee2b[479]]();
      if (_0x8e22xc) {
        _0x8e22x7[_0xee2b[1120]](function(_0x8e22x16, _0x8e22x15) {
          return _0x8e22x16 - _0x8e22x15;
        });
        if (_0x8e22x7[_0xee2b[4]] > 2) {
          _0x8e22xa = function(_0x8e22x15) {
            return Ext[_0xee2b[703]][_0xee2b[1778]](_0x8e22x15 - 1);
          };
        } else {
          _0x8e22xa = function(_0x8e22x15) {
            return Ext[_0xee2b[703]][_0xee2b[1779]][_0x8e22x15 - 1];
          };
        }
        _0x8e22x1 = _0x8e22x18[_0xee2b[1777]](_0x8e22x7, _0x8e22xa);
      } else {
        _0x8e22x1 = Ext[_0xee2b[703]][_0xee2b[1779]][_0x8e22x6[_0xee2b[480]]()];
      }
      _0x8e22xd = _0x8e22x19(_0x8e22xb == 1 ? _0x8e22x18.L(_0xee2b[581]) : _0x8e22x18.L(_0xee2b[585]), _0x8e22xb, _0x8e22x3, _0x8e22x1);
      break;
  }
  return _0x8e22xd;
}, getDaysLegend:function(_0x8e22x7, _0x8e22x3) {
  var _0x8e22x2 = this, _0x8e22x6 = Sch[_0xee2b[22]][_0xee2b[49]][_0xee2b[1454]][_0xee2b[1453]], _0x8e22x1 = _0xee2b[27], _0x8e22x9 = _0xee2b[27], _0x8e22x5;
  if (_0x8e22x3 && _0x8e22x3[_0xee2b[4]]) {
    _0x8e22x1 = _0x8e22x2[_0xee2b[1777]](_0x8e22x3, function(_0x8e22xa) {
      return _0x8e22x2.L(_0xee2b[1780] + _0x8e22xa);
    });
  }
  if (_0x8e22x7[_0xee2b[4]]) {
    _0x8e22x7[_0xee2b[1120]](function(_0x8e22x8, _0x8e22xa) {
      return _0x8e22x6[_0xee2b[1516]](_0x8e22x8)[0] - _0x8e22x6[_0xee2b[1516]](_0x8e22xa)[0];
    });
    var _0x8e22x4 = _0x8e22x7[_0xee2b[73]](_0xee2b[72]);
    switch(_0x8e22x4) {
      case _0x8e22x2[_0xee2b[1781]]:
        _0x8e22x9 = _0x8e22x2.L(_0xee2b[524]);
        break;
      case _0x8e22x2[_0xee2b[1782]]:
        _0x8e22x9 = _0x8e22x2.L(_0xee2b[570]);
        break;
      case _0x8e22x2[_0xee2b[1783]]:
        _0x8e22x9 = _0x8e22x2.L(_0xee2b[571]);
        break;
      default:
        if (_0x8e22x7[_0xee2b[4]] > 2) {
          _0x8e22x5 = function(_0x8e22xa) {
            return Ext[_0xee2b[703]][_0xee2b[1784]](_0x8e22x6[_0xee2b[1516]](_0x8e22xa)[0]);
          };
        } else {
          _0x8e22x5 = function(_0x8e22xa) {
            return Ext[_0xee2b[703]][_0xee2b[1776]][_0x8e22x6[_0xee2b[1516]](_0x8e22xa)[0]];
          };
        }
        _0x8e22x9 = _0x8e22x2[_0xee2b[1777]](_0x8e22x7, _0x8e22x5);
    }
  }
  return Ext[_0xee2b[1041]][_0xee2b[880]](_0x8e22x2.L(_0xee2b[1785]), _0x8e22x1, _0x8e22x9);
}, arrayToText:function(_0x8e22x7, _0x8e22x5, _0x8e22x1, _0x8e22x2) {
  _0x8e22x1 = _0x8e22x1 || this.L(_0xee2b[287]);
  _0x8e22x2 = _0x8e22x2 || this.L(_0xee2b[577]);
  var _0x8e22x3 = _0xee2b[27], _0x8e22x9 = _0xee2b[27];
  for (var _0x8e22x4 = 0, _0x8e22x6 = _0x8e22x7[_0xee2b[4]]; _0x8e22x4 < _0x8e22x6;) {
    _0x8e22x3 += _0x8e22x9 + (_0x8e22x5 ? _0x8e22x5(_0x8e22x7[_0x8e22x4]) : _0x8e22x7[_0x8e22x4]);
    _0x8e22x4++;
    _0x8e22x9 = _0x8e22x4 == _0x8e22x6 - 1 ? _0x8e22x2 : _0x8e22x1;
  }
  return _0x8e22x3;
}});
Ext[_0xee2b[6]](_0xee2b[1786], {nbrOfBandsByResource:null, bandIndexToPxConvertFn:null, bandIndexToPxConvertScope:null, constructor:function(_0x8e22x3) {
  Ext[_0xee2b[8]](this, _0x8e22x3);
  this[_0xee2b[1787]] = {};
}, clearCache:function(_0x8e22x3) {
  if (_0x8e22x3) {
    delete this[_0xee2b[1787]][_0x8e22x3[_0xee2b[1049]]];
  } else {
    this[_0xee2b[1787]] = {};
  }
}, getNumberOfBands:function(_0x8e22x4, _0x8e22x6) {
  var _0x8e22x3 = this[_0xee2b[1787]];
  if (_0x8e22x3[_0xee2b[53]](_0x8e22x4[_0xee2b[1049]])) {
    return _0x8e22x3[_0x8e22x4[_0xee2b[1049]]];
  }
  var _0x8e22x2 = Ext[_0xee2b[1]](_0x8e22x6) ? _0x8e22x6() : _0x8e22x6;
  var _0x8e22x5 = Ext[_0xee2b[26]][_0xee2b[41]](_0x8e22x2, function(_0x8e22x1) {
    return {start:_0x8e22x1[_0xee2b[712]](), end:_0x8e22x1[_0xee2b[713]](), event:_0x8e22x1};
  });
  return this[_0xee2b[1788]](_0x8e22x5, _0x8e22x4);
}, applyLayout:function(_0x8e22x3, _0x8e22x4) {
  var _0x8e22x5 = _0x8e22x3[_0xee2b[191]]();
  var _0x8e22x6 = this;
  _0x8e22x5[_0xee2b[1120]](function(_0x8e22x1, _0x8e22x2) {
    return _0x8e22x6[_0xee2b[1789]](_0x8e22x1[_0xee2b[1440]], _0x8e22x2[_0xee2b[1440]]);
  });
  return this[_0xee2b[1787]][_0x8e22x4[_0xee2b[1049]]] = this[_0xee2b[1790]](_0x8e22x5);
}, sortEvents:function(_0x8e22x1, _0x8e22x5) {
  var _0x8e22x9 = _0x8e22x1[_0xee2b[712]]();
  var _0x8e22x2 = _0x8e22x5[_0xee2b[712]]();
  var _0x8e22x4 = _0x8e22x9 - _0x8e22x2 === 0;
  if (_0x8e22x4) {
    return _0x8e22x1[_0xee2b[713]]() > _0x8e22x5[_0xee2b[713]]() ? -1 : 1;
  } else {
    return _0x8e22x9 < _0x8e22x2 ? -1 : 1;
  }
}, layoutEventsInBands:function(_0x8e22x6) {
  var _0x8e22x3 = 0;
  do {
    var _0x8e22x4 = _0x8e22x6[0];
    while (_0x8e22x4) {
      _0x8e22x4[_0xee2b[686]] = this[_0xee2b[1792]][_0xee2b[293]](this[_0xee2b[1791]] || this, _0x8e22x3, _0x8e22x4[_0xee2b[1440]]);
      Ext[_0xee2b[26]][_0xee2b[63]](_0x8e22x6, _0x8e22x4);
      _0x8e22x4 = this[_0xee2b[1793]](_0x8e22x4, _0x8e22x6);
    }
    _0x8e22x3++;
  } while (_0x8e22x6[_0xee2b[4]] > 0);
  return _0x8e22x3;
}, findClosestSuccessor:function(_0x8e22x3, _0x8e22x8) {
  var _0x8e22x1 = Infinity, _0x8e22x6, _0x8e22x9 = _0x8e22x3[_0xee2b[771]], _0x8e22x7, _0x8e22x4 = _0x8e22x3[_0xee2b[771]] - _0x8e22x3[_0xee2b[179]] === 0;
  for (var _0x8e22x2 = 0, _0x8e22x5 = _0x8e22x8[_0xee2b[4]]; _0x8e22x2 < _0x8e22x5; _0x8e22x2++) {
    _0x8e22x7 = _0x8e22x8[_0x8e22x2][_0xee2b[179]] - _0x8e22x9;
    if (_0x8e22x7 >= 0 && _0x8e22x7 < _0x8e22x1 && (_0x8e22x7 > 0 || _0x8e22x8[_0x8e22x2][_0xee2b[771]] - _0x8e22x8[_0x8e22x2][_0xee2b[179]] > 0 || !_0x8e22x4)) {
      _0x8e22x6 = _0x8e22x8[_0x8e22x2];
      _0x8e22x1 = _0x8e22x7;
    }
  }
  return _0x8e22x6;
}});
Ext[_0xee2b[6]](_0xee2b[1794], {extend:_0xee2b[1786], timeAxisViewModel:null, layoutEventsInBands:function(_0x8e22x4) {
  var _0x8e22x7 = this[_0xee2b[810]];
  var _0x8e22x1 = _0x8e22x7[_0xee2b[1795]];
  var _0x8e22x3 = 0;
  do {
    var _0x8e22x2 = _0x8e22x4[0];
    while (_0x8e22x2) {
      _0x8e22x2[_0xee2b[686]] = this[_0xee2b[1792]][_0xee2b[293]](this[_0xee2b[1791]] || this, _0x8e22x3, _0x8e22x2[_0xee2b[1440]]);
      var _0x8e22x6 = Math[_0xee2b[424]](_0x8e22x1[_0xee2b[1764]](_0x8e22x2[_0xee2b[179]]));
      var _0x8e22x9 = this[_0xee2b[810]][_0xee2b[1796]](_0x8e22x1[_0xee2b[1752]](_0x8e22x6)[_0xee2b[712]]());
      var _0x8e22x5 = this[_0xee2b[810]][_0xee2b[755]]();
      _0x8e22x2[_0xee2b[1354]] = _0x8e22x9;
      _0x8e22x2[_0xee2b[773]] = _0x8e22x5;
      Ext[_0xee2b[26]][_0xee2b[63]](_0x8e22x4, _0x8e22x2);
      _0x8e22x2 = this[_0xee2b[1793]](_0x8e22x2, _0x8e22x4);
    }
    _0x8e22x3++;
  } while (_0x8e22x4[_0xee2b[4]] > 0);
  return _0x8e22x3;
}, findClosestSuccessor:function(_0x8e22x2, _0x8e22x5) {
  var _0x8e22x1 = this[_0xee2b[810]][_0xee2b[1795]];
  var _0x8e22x9 = Math[_0xee2b[424]](_0x8e22x1[_0xee2b[1764]](_0x8e22x2[_0xee2b[179]]));
  var _0x8e22x4 = _0x8e22x1[_0xee2b[1752]](_0x8e22x9);
  for (var _0x8e22x6 = 0, _0x8e22x3 = _0x8e22x5[_0xee2b[4]]; _0x8e22x6 < _0x8e22x3; _0x8e22x6++) {
    if (_0x8e22x5[_0x8e22x6][_0xee2b[179]] >= _0x8e22x4[_0xee2b[713]]()) {
      return _0x8e22x5[_0x8e22x6];
    }
  }
}});
Ext[_0xee2b[6]](_0xee2b[1797], {requires:[_0xee2b[1140]], view:null, constructor:function(_0x8e22x3) {
  Ext[_0xee2b[8]](this, _0x8e22x3);
}, applyLayout:function(_0x8e22xf, _0x8e22x5) {
  if (_0x8e22xf[_0xee2b[4]] === 0) {
    return;
  }
  var _0x8e22x1 = this;
  _0x8e22xf[_0xee2b[1120]](function(_0x8e22x8, _0x8e22xa) {
    return _0x8e22x1[_0xee2b[1789]](_0x8e22x8[_0xee2b[1440]], _0x8e22xa[_0xee2b[1440]]);
  });
  var _0x8e22xd, _0x8e22x9, _0x8e22x6;
  for (var _0x8e22x4 = 0, _0x8e22x3 = _0x8e22xf[_0xee2b[4]]; _0x8e22x4 < _0x8e22x3; _0x8e22x4++) {
    _0x8e22x9 = _0x8e22xf[_0x8e22x4];
    _0x8e22xd = this[_0xee2b[1798]](_0x8e22xf, _0x8e22x9);
    var _0x8e22x7 = this[_0xee2b[1799]](_0x8e22xf, _0x8e22x4);
    if (_0x8e22x7[_0xee2b[4]] > 1) {
      _0x8e22x9[_0xee2b[1354]] = _0x8e22xd[_0xee2b[179]];
      _0x8e22x9[_0xee2b[773]] = _0x8e22xd[_0xee2b[771]] - _0x8e22xd[_0xee2b[179]];
      _0x8e22x6 = 1;
      while (_0x8e22x6 < _0x8e22x7[_0xee2b[4]] - 1 && _0x8e22x7[_0x8e22x6 + 1][_0xee2b[179]] - _0x8e22x9[_0xee2b[179]] === 0) {
        _0x8e22x6++;
      }
      var _0x8e22xe = this[_0xee2b[1798]](_0x8e22xf, _0x8e22x7[_0x8e22x6]);
      if (_0x8e22xe && _0x8e22xe[_0xee2b[179]] < 0.8) {
        _0x8e22x7 = _0x8e22x7[_0xee2b[191]](0, _0x8e22x6);
      }
    }
    var _0x8e22x2 = _0x8e22x7[_0xee2b[4]], _0x8e22xc = (_0x8e22xd[_0xee2b[771]] - _0x8e22xd[_0xee2b[179]]) / _0x8e22x2;
    for (_0x8e22x6 = 0; _0x8e22x6 < _0x8e22x2; _0x8e22x6++) {
      _0x8e22x7[_0x8e22x6][_0xee2b[773]] = _0x8e22xc;
      _0x8e22x7[_0x8e22x6][_0xee2b[1354]] = _0x8e22xd[_0xee2b[179]] + _0x8e22x6 * _0x8e22xc;
    }
    _0x8e22x4 += _0x8e22x2 - 1;
  }
  for (_0x8e22x4 = 0, _0x8e22x3 = _0x8e22xf[_0xee2b[4]]; _0x8e22x4 < _0x8e22x3; _0x8e22x4++) {
    _0x8e22xf[_0x8e22x4][_0xee2b[773]] = _0x8e22xf[_0x8e22x4][_0xee2b[773]] * _0x8e22x5;
    _0x8e22xf[_0x8e22x4][_0xee2b[1354]] = this[_0xee2b[829]][_0xee2b[1800]] + _0x8e22xf[_0x8e22x4][_0xee2b[1354]] * _0x8e22x5;
  }
}, findStartSlot:function(_0x8e22x4, _0x8e22x5) {
  var _0x8e22x3 = this[_0xee2b[1801]](_0x8e22x4, _0x8e22x5), _0x8e22x6;
  if (_0x8e22x3[_0xee2b[4]] === 0) {
    return {start:0, end:1};
  }
  for (_0x8e22x6 = 0; _0x8e22x6 < _0x8e22x3[_0xee2b[4]]; _0x8e22x6++) {
    if (_0x8e22x6 === 0 && _0x8e22x3[0][_0xee2b[1354]] > 0) {
      return {start:0, end:_0x8e22x3[0][_0xee2b[1354]]};
    } else {
      if (_0x8e22x3[_0x8e22x6][_0xee2b[1354]] + _0x8e22x3[_0x8e22x6][_0xee2b[773]] < (_0x8e22x6 < _0x8e22x3[_0xee2b[4]] - 1 ? _0x8e22x3[_0x8e22x6 + 1][_0xee2b[1354]] : 1)) {
        return {start:_0x8e22x3[_0x8e22x6][_0xee2b[1354]] + _0x8e22x3[_0x8e22x6][_0xee2b[773]], end:_0x8e22x6 < _0x8e22x3[_0xee2b[4]] - 1 ? _0x8e22x3[_0x8e22x6 + 1][_0xee2b[1354]] : 1};
      }
    }
  }
  return false;
}, getPriorOverlappingEvents:function(_0x8e22x2, _0x8e22x1) {
  var _0x8e22x9 = Sch[_0xee2b[49]][_0xee2b[703]], _0x8e22x7 = _0x8e22x1[_0xee2b[179]], _0x8e22x6 = _0x8e22x1[_0xee2b[771]], _0x8e22x4 = [];
  for (var _0x8e22x5 = 0, _0x8e22x3 = Ext[_0xee2b[26]][_0xee2b[147]](_0x8e22x2, _0x8e22x1); _0x8e22x5 < _0x8e22x3; _0x8e22x5++) {
    if (_0x8e22x9[_0xee2b[714]](_0x8e22x7, _0x8e22x6, _0x8e22x2[_0x8e22x5][_0xee2b[179]], _0x8e22x2[_0x8e22x5][_0xee2b[771]])) {
      _0x8e22x4[_0xee2b[11]](_0x8e22x2[_0x8e22x5]);
    }
  }
  _0x8e22x4[_0xee2b[1120]](this[_0xee2b[1802]]);
  return _0x8e22x4;
}, sortOverlappers:function(_0x8e22x6, _0x8e22x3) {
  return _0x8e22x6[_0xee2b[1354]] < _0x8e22x3[_0xee2b[1354]] ? -1 : 1;
}, getCluster:function(_0x8e22x2, _0x8e22x9) {
  if (_0x8e22x9 >= _0x8e22x2[_0xee2b[4]] - 1) {
    return [_0x8e22x2[_0x8e22x9]];
  }
  var _0x8e22x4 = [_0x8e22x2[_0x8e22x9]], _0x8e22x7 = _0x8e22x2[_0x8e22x9][_0xee2b[179]], _0x8e22x6 = _0x8e22x2[_0x8e22x9][_0xee2b[771]], _0x8e22x3 = _0x8e22x2[_0xee2b[4]], _0x8e22x1 = Sch[_0xee2b[49]][_0xee2b[703]], _0x8e22x5 = _0x8e22x9 + 1;
  while (_0x8e22x5 < _0x8e22x3 && _0x8e22x1[_0xee2b[714]](_0x8e22x7, _0x8e22x6, _0x8e22x2[_0x8e22x5][_0xee2b[179]], _0x8e22x2[_0x8e22x5][_0xee2b[771]])) {
    _0x8e22x4[_0xee2b[11]](_0x8e22x2[_0x8e22x5]);
    _0x8e22x7 = _0x8e22x1[_0xee2b[715]](_0x8e22x7, _0x8e22x2[_0x8e22x5][_0xee2b[179]]);
    _0x8e22x6 = _0x8e22x1[_0xee2b[203]](_0x8e22x2[_0x8e22x5][_0xee2b[771]], _0x8e22x6);
    _0x8e22x5++;
  }
  return _0x8e22x4;
}, sortEvents:function(_0x8e22x1, _0x8e22x5) {
  var _0x8e22x9 = _0x8e22x1[_0xee2b[712]](), _0x8e22xa = _0x8e22x1[_0xee2b[713]]();
  var _0x8e22x2 = _0x8e22x5[_0xee2b[712]](), _0x8e22x7 = _0x8e22x5[_0xee2b[713]]();
  var _0x8e22x4 = _0x8e22x9 - _0x8e22x2 === 0;
  if (_0x8e22x4) {
    return _0x8e22xa > _0x8e22x7 ? -1 : 1;
  } else {
    return _0x8e22x9 < _0x8e22x2 ? -1 : 1;
  }
}});
Ext[_0xee2b[6]](_0xee2b[1803], {extend:_0xee2b[782], mixins:{observable:_0xee2b[108]}, lockableScope:_0xee2b[686], schedulerView:null, timeAxis:null, expandToFitView:false, disabled:false, cls:null, clsField:_0xee2b[1109], template:null, store:null, renderElementsBuffered:false, renderDelay:0, refreshSizeOnItemUpdate:true, _renderTimer:null, showHeaderElements:false, headerTemplate:null, innerHeaderTpl:null, headerContainerCls:_0xee2b[1804], headerContainerEl:null, renderingDoneEvent:null, constructor:function(_0x8e22x3) {
  this[_0xee2b[1805]] = this[_0xee2b[1805]] || _0xee2b[1806] + Ext[_0xee2b[388]]();
  Ext[_0xee2b[8]](this, _0x8e22x3);
  this[_0xee2b[295]][_0xee2b[294]][_0xee2b[217]][_0xee2b[293]](this);
  this[_0xee2b[9]](arguments);
}, init:function(_0x8e22x3) {
  if (Ext[_0xee2b[723]][_0xee2b[722]] && !_0x8e22x3[_0xee2b[1807]]()) {
    _0x8e22x3[_0xee2b[149]](_0xee2b[1808], function() {
      this[_0xee2b[1809]](_0x8e22x3);
    }, this);
    return;
  }
  if (typeof this[_0xee2b[1810]] === _0xee2b[308]) {
    this[_0xee2b[1810]] = new Ext.XTemplate(this[_0xee2b[1810]]);
  }
  var _0x8e22x6 = this[_0xee2b[1810]];
  if (!this[_0xee2b[1811]]) {
    this[_0xee2b[1811]] = new Ext.XTemplate(_0xee2b[1812], _0xee2b[1813] + (_0x8e22x6 ? _0xee2b[1814] : _0xee2b[27]) + _0xee2b[1815], _0xee2b[1816], {renderInner:function(_0x8e22x4) {
      return _0x8e22x6[_0xee2b[8]](_0x8e22x4);
    }});
  }
  this[_0xee2b[1817]] = _0x8e22x3[_0xee2b[808]]();
  this[_0xee2b[1818]] = _0x8e22x3;
  this[_0xee2b[1795]] = _0x8e22x3[_0xee2b[695]]();
  this[_0xee2b[64]] = Ext[_0xee2b[132]][_0xee2b[131]](this[_0xee2b[64]]);
  if (!this[_0xee2b[64]]) {
    Ext[_0xee2b[1182]][_0xee2b[3]](_0xee2b[1819]);
  }
  if (this[_0xee2b[1820]]) {
    this[_0xee2b[1818]][_0xee2b[149]]({horizontaltimeaxiscolumnrender:this[_0xee2b[1821]], scope:this});
  }
  if (!this[_0xee2b[1817]][_0xee2b[787]]()) {
    this[_0xee2b[1817]][_0xee2b[149]]({viewready:this[_0xee2b[1822]], scope:this});
  } else {
    this[_0xee2b[1822]]();
  }
}, setDisabled:function(_0x8e22x3) {
  if (_0x8e22x3) {
    this[_0xee2b[1823]]();
  }
  this[_0xee2b[144]] = _0x8e22x3;
}, removeElements:function() {
  this[_0xee2b[1824]]();
  if (this[_0xee2b[1820]]) {
    this[_0xee2b[1825]]();
  }
}, getBodyElements:function() {
  var _0x8e22x3 = this[_0xee2b[1826]]();
  if (_0x8e22x3) {
    return _0x8e22x3[_0xee2b[760]](_0xee2b[495] + this[_0xee2b[1805]]);
  }
  return null;
}, getHeaderContainerEl:function() {
  var _0x8e22x5 = this[_0xee2b[1827]], _0x8e22x4 = Ext[_0xee2b[238]], _0x8e22x6;
  if (!_0x8e22x5 || !_0x8e22x5[_0xee2b[758]]) {
    if (this[_0xee2b[1817]][_0xee2b[1828]]()) {
      var _0x8e22x3 = this[_0xee2b[1818]][_0xee2b[1829]]();
      if (_0x8e22x3[_0xee2b[827]]) {
        _0x8e22x6 = _0x8e22x3[_0xee2b[827]][_0xee2b[726]];
      } else {
        return null;
      }
    } else {
      _0x8e22x6 = this[_0xee2b[1818]][_0xee2b[1830]][_0xee2b[290]]()[_0xee2b[265]];
    }
    if (_0x8e22x6) {
      _0x8e22x5 = _0x8e22x6[_0xee2b[861]](_0xee2b[495] + this[_0xee2b[1831]]);
      if (!_0x8e22x5) {
        _0x8e22x5 = _0x8e22x6[_0xee2b[83]]({cls:this[_0xee2b[1831]]});
      }
      this[_0xee2b[1827]] = _0x8e22x5;
    }
  }
  return _0x8e22x5;
}, getHeaderElements:function() {
  var _0x8e22x3 = this[_0xee2b[1832]]();
  if (_0x8e22x3) {
    return _0x8e22x3[_0xee2b[760]](_0xee2b[495] + this[_0xee2b[1805]]);
  }
  return null;
}, removeBodyElements:function() {
  var _0x8e22x3 = this[_0xee2b[1833]]();
  if (_0x8e22x3) {
    _0x8e22x3[_0xee2b[25]](function(_0x8e22x6) {
      _0x8e22x6[_0xee2b[218]]();
    });
  }
}, removeHeaderElements:function() {
  var _0x8e22x3 = this[_0xee2b[1834]]();
  if (_0x8e22x3) {
    _0x8e22x3[_0xee2b[25]](function(_0x8e22x6) {
      _0x8e22x6[_0xee2b[218]]();
    });
  }
}, getElementId:function(_0x8e22x3) {
  return this[_0xee2b[1805]] + _0xee2b[1131] + _0x8e22x3[_0xee2b[1049]];
}, getHeaderElementId:function(_0x8e22x3) {
  return this[_0xee2b[1805]] + _0xee2b[1835] + _0x8e22x3[_0xee2b[1049]];
}, getTemplateData:function(_0x8e22x3) {
  return this[_0xee2b[1836]] ? this[_0xee2b[1836]](_0x8e22x3) : _0x8e22x3[_0xee2b[22]];
}, getElementCls:function(_0x8e22x3, _0x8e22x4) {
  var _0x8e22x6 = _0x8e22x3[_0xee2b[1227]] || this[_0xee2b[1227]];
  if (!_0x8e22x4) {
    _0x8e22x4 = this[_0xee2b[1837]](_0x8e22x3);
  }
  return this[_0xee2b[489]] + _0xee2b[60] + this[_0xee2b[1805]] + _0xee2b[60] + (_0x8e22x4[_0x8e22x6] || _0xee2b[27]);
}, getHeaderElementCls:function(_0x8e22x3, _0x8e22x4) {
  var _0x8e22x6 = _0x8e22x3[_0xee2b[1227]] || this[_0xee2b[1227]];
  if (!_0x8e22x4) {
    _0x8e22x4 = this[_0xee2b[1837]](_0x8e22x3);
  }
  return _0xee2b[1838] + this[_0xee2b[1805]] + _0xee2b[60] + (_0x8e22x4[_0x8e22x6] || _0xee2b[27]);
}, getContainerEl:function() {
  return this[_0xee2b[1817]][_0xee2b[1839]]();
}, onViewReady:function(_0x8e22x6) {
  var _0x8e22x3 = this[_0xee2b[1817]];
  this[_0xee2b[1840]] = {load:this[_0xee2b[1841]], datachanged:this[_0xee2b[1841]], clear:this[_0xee2b[1841]], update:this[_0xee2b[1842]], scope:this};
  this[_0xee2b[64]][_0xee2b[149]](this[_0xee2b[1840]]);
  this[_0xee2b[1818]][_0xee2b[149]]({beforemodechange:this[_0xee2b[1843]], modechange:this[_0xee2b[1844]], scope:this});
  this[_0xee2b[1845]] = {refresh:this[_0xee2b[1841]], scope:this};
  this[_0xee2b[1846]] = {afterlayout:this[_0xee2b[1841]], scope:this};
  if (_0x8e22x3[_0xee2b[1847]]()) {
    _0x8e22x3[_0xee2b[1848]][_0xee2b[149]](this[_0xee2b[1846]]);
  } else {
    _0x8e22x3[_0xee2b[149]](this[_0xee2b[1845]]);
    this[_0xee2b[1841]]();
  }
}, onTimelinePanelBeforeModeChange:function() {
  var _0x8e22x3 = this[_0xee2b[1817]];
  if (_0x8e22x3[_0xee2b[1847]]()) {
    _0x8e22x3[_0xee2b[1848]][_0xee2b[152]](this[_0xee2b[1846]]);
  } else {
    this[_0xee2b[1817]][_0xee2b[152]](this[_0xee2b[1845]]);
  }
}, onTimelinePanelModeChange:function() {
  var _0x8e22x3 = this[_0xee2b[1817]];
  if (_0x8e22x3[_0xee2b[1847]]()) {
    _0x8e22x3[_0xee2b[1848]][_0xee2b[149]](this[_0xee2b[1846]]);
  } else {
    _0x8e22x3[_0xee2b[149]](this[_0xee2b[1845]]);
  }
  this[_0xee2b[1849]]();
}, forceNewRenderingTimeout:function() {
  this[_0xee2b[1850]] = false;
  clearTimeout(this._renderTimer);
  this[_0xee2b[1841]]();
}, renderElements:function() {
  if (this[_0xee2b[1850]] || this[_0xee2b[144]]) {
    return;
  }
  this[_0xee2b[1850]] = true;
  clearTimeout(this._renderTimer);
  this[_0xee2b[1851]] = Ext[_0xee2b[283]][_0xee2b[1854]](this[_0xee2b[1852]], this[_0xee2b[1853]], this);
}, setElementX:function(_0x8e22x6, _0x8e22x3) {
  if (this[_0xee2b[1818]][_0xee2b[1855]]) {
    _0x8e22x6[_0xee2b[1856]](_0x8e22x3);
  } else {
    _0x8e22x6[_0xee2b[1857]](_0x8e22x3);
  }
}, getHeaderElementPosition:function(_0x8e22x6) {
  var _0x8e22x3 = this[_0xee2b[1817]][_0xee2b[1858]]();
  return Math[_0xee2b[704]](_0x8e22x3[_0xee2b[1796]](_0x8e22x6));
}, renderBodyElementsInternal:function(_0x8e22x6) {
  var _0x8e22x5 = this[_0xee2b[1795]][_0xee2b[697]](), _0x8e22x3 = this[_0xee2b[1795]][_0xee2b[698]](), _0x8e22x4 = this[_0xee2b[1859]](_0x8e22x5, _0x8e22x3, _0x8e22x6);
  if (_0x8e22x4) {
    this[_0xee2b[1860]][_0xee2b[384]](this[_0xee2b[1826]](), _0x8e22x4);
  }
}, getHeaderElementData:function(_0x8e22x3, _0x8e22x6) {
  throw _0xee2b[29];
}, renderHeaderElements:function(_0x8e22x3) {
  var _0x8e22x4 = this[_0xee2b[1832]]();
  if (_0x8e22x4) {
    var _0x8e22x6 = this[_0xee2b[1861]](_0x8e22x3);
    this[_0xee2b[1811]][_0xee2b[384]](_0x8e22x4, _0x8e22x6);
  }
}, renderElementsInternal:function() {
  this[_0xee2b[1850]] = false;
  var _0x8e22x3 = this[_0xee2b[1817]];
  if (this[_0xee2b[144]] || _0x8e22x3[_0xee2b[1862]] || !this[_0xee2b[1826]]() || _0x8e22x3[_0xee2b[64]][_0xee2b[1466]]() === 0) {
    return;
  }
  if (_0x8e22x3[_0xee2b[1847]]()) {
    var _0x8e22x6 = _0x8e22x3[_0xee2b[1864]]()[_0xee2b[1863]]();
    if (_0x8e22x6[0] && !_0x8e22x6[0][_0xee2b[262]]) {
      return;
    }
  }
  this[_0xee2b[1823]]();
  this[_0xee2b[1865]]();
  if (this[_0xee2b[1820]]) {
    this[_0xee2b[1827]] = null;
    this[_0xee2b[1821]]();
  }
  if (this[_0xee2b[1866]]) {
    this[_0xee2b[180]](this[_0xee2b[1866]], this);
  }
}, getElementData:function(_0x8e22x5, _0x8e22x4, _0x8e22x3, _0x8e22x6) {
  throw _0xee2b[29];
}, updateBodyElement:function(_0x8e22x6) {
  var _0x8e22x4 = Ext[_0xee2b[55]](this[_0xee2b[1867]](_0x8e22x6));
  if (_0x8e22x4) {
    var _0x8e22x2 = this[_0xee2b[1795]][_0xee2b[697]](), _0x8e22x3 = this[_0xee2b[1795]][_0xee2b[698]](), _0x8e22x5 = this[_0xee2b[1859]](_0x8e22x2, _0x8e22x3, [_0x8e22x6])[0];
    if (_0x8e22x5) {
      _0x8e22x4[_0xee2b[758]][_0xee2b[1868]] = _0x8e22x5[_0xee2b[1869]];
      _0x8e22x4[_0xee2b[1870]](_0x8e22x5[_0xee2b[686]]);
      this[_0xee2b[1871]](_0x8e22x4, _0x8e22x5[_0xee2b[1354]]);
      _0x8e22x4[_0xee2b[1872]](_0x8e22x5[_0xee2b[773]], _0x8e22x5[_0xee2b[747]]);
    } else {
      Ext[_0xee2b[218]](_0x8e22x4);
    }
  } else {
    this[_0xee2b[1865]]([_0x8e22x6]);
  }
}, updateHeaderElement:function(_0x8e22x3) {
  var _0x8e22x6 = Ext[_0xee2b[55]](this[_0xee2b[1873]](_0x8e22x3));
  if (_0x8e22x6) {
    var _0x8e22x4 = this[_0xee2b[1861]]([_0x8e22x3])[0];
    if (_0x8e22x4) {
      _0x8e22x6[_0xee2b[758]][_0xee2b[1868]] = _0x8e22x4[_0xee2b[489]];
      if (this[_0xee2b[1817]][_0xee2b[1828]]()) {
        this[_0xee2b[1871]](_0x8e22x6, _0x8e22x4[_0xee2b[1780]]);
        _0x8e22x6[_0xee2b[839]](_0x8e22x4[_0xee2b[1874]]);
      } else {
        _0x8e22x6[_0xee2b[1870]](_0x8e22x4[_0xee2b[1780]]);
        _0x8e22x6[_0xee2b[863]](_0x8e22x4[_0xee2b[1874]]);
      }
    } else {
      Ext[_0xee2b[218]](_0x8e22x6);
    }
  } else {
    this[_0xee2b[1821]]([_0x8e22x3]);
  }
}, destroy:function() {
  clearTimeout(this._renderTimer);
  this[_0xee2b[64]][_0xee2b[152]](this[_0xee2b[1840]]);
  if (this[_0xee2b[64]][_0xee2b[1875]]) {
    this[_0xee2b[64]][_0xee2b[218]]();
  }
}, refreshSingle:function(_0x8e22x6, _0x8e22x3) {
  _0x8e22x3 = _0x8e22x3 instanceof Array ? _0x8e22x3 : [_0x8e22x3];
  Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x3, function(_0x8e22x4) {
    this[_0xee2b[1876]](_0x8e22x4);
    if (this[_0xee2b[1820]]) {
      this[_0xee2b[1877]](_0x8e22x4);
    }
  }, this);
}});
Ext[_0xee2b[6]](_0xee2b[1878], {extend:_0xee2b[1803], alias:_0xee2b[1879], cls:_0xee2b[1880], showTip:true, innerTpl:null, prepareTemplateData:null, side:null, init:function(_0x8e22x3) {
  if (typeof this[_0xee2b[1881]] === _0xee2b[308]) {
    this[_0xee2b[1881]] = new Ext.XTemplate(this[_0xee2b[1881]]);
  }
  this[_0xee2b[1882]] = _0x8e22x3[_0xee2b[1855]] ? _0xee2b[867] : _0xee2b[1354];
  var _0x8e22x6 = this[_0xee2b[1881]];
  if (!this[_0xee2b[1860]]) {
    this[_0xee2b[1860]] = new Ext.XTemplate(_0xee2b[1812], _0xee2b[1883] + (this[_0xee2b[1884]] ? _0xee2b[1885] : _0xee2b[27]) + _0xee2b[1886] + this[_0xee2b[1882]] + _0xee2b[1887] + (_0x8e22x6 ? _0xee2b[1814] : _0xee2b[27]) + _0xee2b[1815], _0xee2b[1816], {getTipText:function(_0x8e22x4) {
      return _0x8e22x3[_0xee2b[808]]()[_0xee2b[1888]](_0x8e22x4.Date) + _0xee2b[60] + (_0x8e22x4[_0xee2b[1889]] || _0xee2b[27]);
    }, renderInner:function(_0x8e22x4) {
      return _0x8e22x6[_0xee2b[8]](_0x8e22x4);
    }});
  }
  this[_0xee2b[9]](arguments);
}, getElementData:function(_0x8e22x1, _0x8e22x5, _0x8e22x19) {
  var _0x8e22xe = this[_0xee2b[64]], _0x8e22x4 = this[_0xee2b[1817]], _0x8e22x8 = _0x8e22x4[_0xee2b[1828]](), _0x8e22x7 = _0x8e22x4[_0xee2b[1847]](), _0x8e22xd = _0x8e22x19 || _0x8e22xe[_0xee2b[1005]](), _0x8e22x16 = [], _0x8e22xf, _0x8e22xc, _0x8e22x3, _0x8e22x15, _0x8e22x2;
  for (var _0x8e22x11 = 0, _0x8e22xb = _0x8e22xd[_0xee2b[4]]; _0x8e22x11 < _0x8e22xb; _0x8e22x11++) {
    _0x8e22x3 = _0x8e22xd[_0x8e22x11];
    _0x8e22x15 = _0x8e22x3[_0xee2b[55]](_0xee2b[703]);
    if (_0x8e22x15 && _0x8e22x4[_0xee2b[1795]][_0xee2b[1763]](_0x8e22x15)) {
      _0x8e22x2 = Ext[_0xee2b[8]]({}, this[_0xee2b[1837]](_0x8e22x3));
      _0x8e22x2[_0xee2b[388]] = this[_0xee2b[1867]](_0x8e22x3);
      _0x8e22x2[_0xee2b[1869]] = this[_0xee2b[1890]](_0x8e22x3, _0x8e22x2);
      if (_0x8e22x7) {
        var _0x8e22x6 = _0x8e22x4[_0xee2b[1892]](_0x8e22x1, null, this[_0xee2b[1891]]);
        _0x8e22x6 = _0x8e22x4[_0xee2b[1892]](_0x8e22x15, _0x8e22x15);
        _0x8e22x2[_0xee2b[1354]] = _0x8e22x6[_0xee2b[1893]];
        _0x8e22x2[_0xee2b[686]] = _0x8e22x6[_0xee2b[1894]];
        _0x8e22x2[_0xee2b[773]] = _0x8e22x6[_0xee2b[867]] - _0x8e22x6[_0xee2b[1354]];
      } else {
        var _0x8e22x9 = _0x8e22x4[_0xee2b[1895]](_0x8e22x15);
        if (_0x8e22x8) {
          _0x8e22x2[_0xee2b[1354]] = _0x8e22x9;
        } else {
          _0x8e22x2[_0xee2b[686]] = _0x8e22x9;
        }
      }
      _0x8e22x16[_0xee2b[11]](_0x8e22x2);
    }
  }
  return _0x8e22x16;
}, getHeaderElementData:function(_0x8e22x4) {
  var _0x8e22x3 = this[_0xee2b[1795]][_0xee2b[697]](), _0x8e22xd = this[_0xee2b[1795]][_0xee2b[698]](), _0x8e22xe = this[_0xee2b[1817]][_0xee2b[1828]](), _0x8e22x9 = [], _0x8e22x7, _0x8e22x6, _0x8e22x8, _0x8e22x2;
  _0x8e22x4 = _0x8e22x4 || this[_0xee2b[64]][_0xee2b[1005]]();
  for (var _0x8e22x1 = 0, _0x8e22x5 = _0x8e22x4[_0xee2b[4]]; _0x8e22x1 < _0x8e22x5; _0x8e22x1++) {
    _0x8e22x7 = _0x8e22x4[_0x8e22x1];
    _0x8e22x6 = _0x8e22x7[_0xee2b[55]](_0xee2b[703]);
    if (_0x8e22x6 && Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[1175]](_0x8e22x6, _0x8e22x3, _0x8e22xd)) {
      _0x8e22x8 = this[_0xee2b[1896]](_0x8e22x6);
      _0x8e22x2 = this[_0xee2b[1837]](_0x8e22x7);
      _0x8e22x2 = Ext[_0xee2b[8]]({side:_0x8e22xe ? this[_0xee2b[1882]] : _0xee2b[686], cls:this[_0xee2b[1897]](_0x8e22x7, _0x8e22x2), position:_0x8e22x8}, _0x8e22x2);
      _0x8e22x2[_0xee2b[388]] = this[_0xee2b[1873]](_0x8e22x7);
      _0x8e22x9[_0xee2b[11]](_0x8e22x2);
    }
  }
  return _0x8e22x9;
}});
Ext[_0xee2b[6]](_0xee2b[1898], {extend:_0xee2b[1878], requires:[_0xee2b[1716]], showTip:false, cls:_0xee2b[1899], timeAxisViewModel:null, renderingDoneEvent:_0xee2b[1900], useLowestHeader:null, init:function(_0x8e22x3) {
  this[_0xee2b[1795]] = _0x8e22x3[_0xee2b[695]]();
  this[_0xee2b[810]] = _0x8e22x3[_0xee2b[810]];
  this[_0xee2b[1818]] = _0x8e22x3;
  this[_0xee2b[64]] = new Ext[_0xee2b[22]].JsonStore({fields:[_0xee2b[703]]});
  this[_0xee2b[9]](arguments);
  _0x8e22x3[_0xee2b[149]]({destroy:this[_0xee2b[1901]], scope:this});
  this[_0xee2b[810]][_0xee2b[149]](_0xee2b[724], this[_0xee2b[1902]], this);
  this[_0xee2b[1902]]();
}, onHostDestroy:function() {
  this[_0xee2b[810]][_0xee2b[152]](_0xee2b[724], this[_0xee2b[1902]], this);
}, populate:function() {
  this[_0xee2b[64]][_0xee2b[1903]](this[_0xee2b[349]]());
}, getData:function() {
  var _0x8e22x1 = [];
  var _0x8e22x9 = this[_0xee2b[810]];
  var _0x8e22x5 = this[_0xee2b[1904]] ? _0x8e22x9[_0xee2b[1905]]() : _0x8e22x9[_0xee2b[1906]];
  var _0x8e22x2 = !!(_0x8e22x9[_0xee2b[875]] && _0x8e22x9[_0xee2b[875]][_0x8e22x5][_0xee2b[1907]]);
  if (_0x8e22x2) {
    var _0x8e22x6 = _0x8e22x9[_0xee2b[749]]()[_0x8e22x5];
    for (var _0x8e22x4 = 1, _0x8e22x3 = _0x8e22x6[_0xee2b[4]]; _0x8e22x4 < _0x8e22x3; _0x8e22x4++) {
      _0x8e22x1[_0xee2b[11]]({Date:_0x8e22x6[_0x8e22x4][_0xee2b[179]]});
    }
  } else {
    _0x8e22x9[_0xee2b[1909]](_0x8e22x5, function(_0x8e22xd, _0x8e22x7, _0x8e22x8) {
      if (_0x8e22x8 > 0) {
        _0x8e22x1[_0xee2b[11]]({Date:_0x8e22xd, Cls:_0x8e22x9[_0xee2b[873]](_0x8e22xd) ? _0xee2b[1908] : _0xee2b[27]});
      }
    });
  }
  return _0x8e22x1;
}});
Ext[_0xee2b[6]](_0xee2b[1910], {singleton:true, vthresh:25, hthresh:25, increment:100, frequency:500, animate:true, animDuration:200, activeCmp:null, activeEl:null, scrollElRegion:null, scrollProcess:{}, pt:null, direction:_0xee2b[1911], constructor:function() {
  this[_0xee2b[1912]] = Ext[_0xee2b[283]][_0xee2b[282]](this[_0xee2b[1912]], this);
}, triggerRefresh:function() {
  if (this[_0xee2b[1913]]) {
    this[_0xee2b[1914]]();
    this[_0xee2b[1915]]();
    this[_0xee2b[799]]();
  }
}, doScroll:function() {
  var _0x8e22x9 = this[_0xee2b[1916]], _0x8e22x7 = _0x8e22x9[_0xee2b[1917]], _0x8e22x1 = _0x8e22x7[_0xee2b[1855]] && !_0x8e22x7[_0xee2b[694]](_0xee2b[1918]), _0x8e22x6 = _0x8e22x9[_0xee2b[1919]][0], _0x8e22xa = this[_0xee2b[1735]], _0x8e22x4 = this[_0xee2b[1921]][_0xee2b[1920]](), _0x8e22x3 = this[_0xee2b[1921]][_0xee2b[1922]]();
  if (_0x8e22x6 === _0xee2b[1923]) {
    _0x8e22xa = Math[_0xee2b[203]](_0x8e22xa, _0x8e22x1 ? _0x8e22x4 : this[_0xee2b[1924]][_0xee2b[1893]] - _0x8e22x4);
  } else {
    if (_0x8e22x6 === _0xee2b[526]) {
      _0x8e22xa = Math[_0xee2b[203]](_0x8e22xa, this[_0xee2b[1924]][_0xee2b[1894]] - _0x8e22x3);
    }
  }
  _0x8e22xa = Math[_0xee2b[715]](_0x8e22xa, 0);
  var _0x8e22x2 = 0, _0x8e22x5 = 0;
  if (_0x8e22x6 === _0xee2b[1923]) {
    _0x8e22x2 = _0x8e22xa;
  }
  if (_0x8e22x6 === _0xee2b[1925]) {
    _0x8e22x2 = -_0x8e22xa;
  }
  if (_0x8e22x6 === _0xee2b[1926]) {
    _0x8e22x5 = -_0x8e22xa;
  }
  if (_0x8e22x6 === _0xee2b[526]) {
    _0x8e22x5 = _0x8e22xa;
  }
  if (_0x8e22x1) {
    _0x8e22x2 = -_0x8e22x2;
  }
  if (_0x8e22x2) {
    _0x8e22x7[_0xee2b[1929]](_0x8e22x2, {duration:this[_0xee2b[1927]], callback:this[_0xee2b[1928]], scope:this});
  } else {
    if (_0x8e22x5) {
      _0x8e22x7[_0xee2b[1930]](_0x8e22x5, {duration:this[_0xee2b[1927]], callback:this[_0xee2b[1928]], scope:this});
    }
  }
}, clearScrollInterval:function() {
  var _0x8e22x3 = this[_0xee2b[1916]];
  if (_0x8e22x3[_0xee2b[388]]) {
    clearTimeout(_0x8e22x3[_0xee2b[388]]);
  }
  _0x8e22x3[_0xee2b[388]] = 0;
  _0x8e22x3[_0xee2b[1917]] = null;
  _0x8e22x3[_0xee2b[1919]] = _0xee2b[27];
}, isScrollAllowed:function(_0x8e22x3) {
  switch(this[_0xee2b[1934]]) {
    case _0xee2b[1911]:
      return true;
    case _0xee2b[1931]:
      return _0x8e22x3 === _0xee2b[867] || _0x8e22x3 === _0xee2b[1354];
    case _0xee2b[1932]:
      return _0x8e22x3 === _0xee2b[694] || _0x8e22x3 === _0xee2b[861];
    default:
      throw new Error(_0xee2b[1933] + this[_0xee2b[1934]]);
  }
}, startScrollInterval:function(_0x8e22x6, _0x8e22x3) {
  if (!this[_0xee2b[1935]](_0x8e22x3)) {
    return;
  }
  this[_0xee2b[1915]]();
  this[_0xee2b[1916]][_0xee2b[1917]] = _0x8e22x6;
  this[_0xee2b[1916]][_0xee2b[1919]] = _0x8e22x3;
  this[_0xee2b[1916]][_0xee2b[388]] = setTimeout(this[_0xee2b[1912]], this[_0xee2b[1545]]);
}, onMouseMove:function(_0x8e22xa) {
  var _0x8e22xb = _0x8e22xa ? {x:_0x8e22xa[_0xee2b[809]](), y:_0x8e22xa[_0xee2b[1936]](), right:_0x8e22xa[_0xee2b[809]](), bottom:_0x8e22xa[_0xee2b[1936]]()} : this[_0xee2b[1937]], _0x8e22xc = _0x8e22xb[_0xee2b[1893]], _0x8e22xe = _0x8e22xb[_0xee2b[1894]], _0x8e22x8 = this[_0xee2b[1916]], _0x8e22xf = this[_0xee2b[1921]], _0x8e22x5 = _0x8e22xf[_0xee2b[1920]](), _0x8e22x4 = _0x8e22xf[_0xee2b[1922]](), _0x8e22x3, _0x8e22x7 = _0x8e22xf[_0xee2b[1855]] && !_0x8e22xf[_0xee2b[694]](_0xee2b[1918]), _0x8e22x6 = 
  this[_0xee2b[1913]], _0x8e22x10 = this[_0xee2b[1938]], _0x8e22x9 = _0x8e22x6[_0xee2b[758]], _0x8e22xd = this, _0x8e22x1 = _0x8e22xf[_0xee2b[694]](_0xee2b[805])[_0xee2b[1941]]()[_0xee2b[1940]]()[_0xee2b[1939]]() || _0x8e22x6[_0xee2b[1939]]();
  this[_0xee2b[1937]] = _0x8e22xb;
  if (_0x8e22x10 && _0x8e22x10[_0xee2b[1087]](_0x8e22xb) && _0x8e22x1) {
    if (_0x8e22x10[_0xee2b[754]] - _0x8e22xe <= _0x8e22xd[_0xee2b[1942]] && _0x8e22x4 < this[_0xee2b[1924]][_0xee2b[1894]]) {
      if (_0x8e22x8[_0xee2b[1917]] != _0x8e22xf) {
        this[_0xee2b[1943]](_0x8e22xf, _0xee2b[861]);
      }
      return;
    } else {
      if (_0x8e22x10[_0xee2b[867]] - _0x8e22xc <= _0x8e22xd[_0xee2b[1944]] && (_0x8e22x7 ? _0x8e22x5 > 0 : _0x8e22x5 < this[_0xee2b[1924]][_0xee2b[1893]])) {
        if (_0x8e22x8[_0xee2b[1917]] != _0x8e22xf) {
          this[_0xee2b[1943]](_0x8e22xf, _0xee2b[867]);
        }
        return;
      } else {
        if (_0x8e22xe - _0x8e22x10[_0xee2b[686]] <= _0x8e22xd[_0xee2b[1942]] && _0x8e22x4 > 0) {
          if (_0x8e22x8[_0xee2b[1917]] != _0x8e22xf) {
            this[_0xee2b[1943]](_0x8e22xf, _0xee2b[694]);
          }
          return;
        } else {
          if (_0x8e22xc - _0x8e22x10[_0xee2b[1354]] <= _0x8e22xd[_0xee2b[1944]] && (_0x8e22x7 ? _0x8e22x5 < this[_0xee2b[1924]][_0xee2b[1893]] : _0x8e22x5 > 0)) {
            if (_0x8e22x8[_0xee2b[1917]] != _0x8e22xf) {
              this[_0xee2b[1943]](_0x8e22xf, _0xee2b[1354]);
            }
            return;
          }
        }
      }
    }
  }
  this[_0xee2b[1915]]();
}, refreshElRegion:function() {
  var _0x8e22x3 = this[_0xee2b[1913]][_0xee2b[1945]]();
  this[_0xee2b[1938]] = this[_0xee2b[1921]][_0xee2b[1946]]();
}, activate:function(_0x8e22x6, _0x8e22x4) {
  var _0x8e22x3 = Ext[_0xee2b[857]]();
  this[_0xee2b[1934]] = _0x8e22x4 || _0xee2b[1911];
  this[_0xee2b[1921]] = _0x8e22x6;
  this[_0xee2b[1913]] = _0x8e22x6[_0xee2b[787]]();
  this[_0xee2b[1924]] = _0x8e22x6[_0xee2b[1947]]();
  this[_0xee2b[1914]]();
  this[_0xee2b[1913]][_0xee2b[149]](_0xee2b[798], this[_0xee2b[799]], this);
}, deactivate:function() {
  if (this[_0xee2b[1913]]) {
    this[_0xee2b[1915]]();
    this[_0xee2b[1913]][_0xee2b[152]](_0xee2b[798], this[_0xee2b[799]], this);
    this[_0xee2b[1913]] = this[_0xee2b[1921]] = this[_0xee2b[1938]] = null;
    this[_0xee2b[1934]] = _0xee2b[1911];
  }
}});
Ext[_0xee2b[6]](_0xee2b[1948], {extend:_0xee2b[1949], requires:[_0xee2b[1950]], xStep:1, yStep:1, initEl:function(_0x8e22x3) {
  var _0x8e22x6 = this, _0x8e22x5, _0x8e22x4;
  _0x8e22x6[_0xee2b[9]](arguments);
  if (Ext[_0xee2b[1952]][_0xee2b[1951]]) {
    if (!Ext[_0xee2b[1953]] || !window[_0xee2b[1954]]) {
      _0x8e22x6[_0xee2b[325]](_0x8e22x6[_0xee2b[1955]], _0x8e22x6[_0xee2b[1956]]);
      _0x8e22x6[_0xee2b[1956]][_0xee2b[784]][_0xee2b[1957]] = true;
      _0x8e22x6[_0xee2b[252]](_0x8e22x6[_0xee2b[1955]], _0x8e22x6[_0xee2b[1956]]);
    }
  }
}, constructor:function() {
  this[_0xee2b[9]](arguments);
  this[_0xee2b[149]](_0xee2b[1958], this[_0xee2b[1959]]);
}, bindListenersOnDragStart:function() {
  var _0x8e22x3 = this[_0xee2b[265]];
  _0x8e22x3[_0xee2b[149]](this[_0xee2b[1960]]());
  this[_0xee2b[149]](_0xee2b[1961], this[_0xee2b[1962]], this, {single:true});
}, unbindListenersOnDragEnd:function() {
  this[_0xee2b[265]] && this[_0xee2b[265]][_0xee2b[152]](this[_0xee2b[1960]]());
}, getListeners:function() {
  return {scroll:this[_0xee2b[799]], pinchstart:this[_0xee2b[802]], scope:this};
}, destroy:function() {
  clearTimeout(this[_0xee2b[1963]]);
  this[_0xee2b[9]](arguments);
}, setXStep:function(_0x8e22x3) {
  this[_0xee2b[1964]] = _0x8e22x3;
}, startScroll:null, setYStep:function(_0x8e22x3) {
  this[_0xee2b[1965]] = _0x8e22x3;
}, getCurrentScroll:function() {
  return this[_0xee2b[265]][_0xee2b[1966]]();
}, getRegion:function() {
  var _0x8e22x8 = this[_0xee2b[1967]], _0x8e22x1 = this[_0xee2b[1968]]();
  if (Ext[_0xee2b[960]] && this[_0xee2b[1855]]) {
    _0x8e22x1[_0xee2b[1354]] = this[_0xee2b[265]][_0xee2b[758]][_0xee2b[1969]] - this[_0xee2b[265]][_0xee2b[793]]() - _0x8e22x1[_0xee2b[1354]];
  }
  var _0x8e22x10 = this[_0xee2b[1970]](), _0x8e22x4 = _0x8e22x10[0], _0x8e22x6 = _0x8e22x10[1], _0x8e22x7 = _0x8e22x1[_0xee2b[1354]] - this[_0xee2b[1971]][_0xee2b[1354]], _0x8e22xe = _0x8e22x1[_0xee2b[686]] - this[_0xee2b[1971]][_0xee2b[686]], _0x8e22xa = _0x8e22x8[0] - _0x8e22x7, _0x8e22x9 = _0x8e22x8[1] - _0x8e22xe, _0x8e22x2 = Math[_0xee2b[203]](_0x8e22xa, _0x8e22x4), _0x8e22x5 = Math[_0xee2b[203]](_0x8e22x9, _0x8e22x6), _0x8e22x3 = Math[_0xee2b[1524]](_0x8e22xa - _0x8e22x4), _0x8e22xd = Math[_0xee2b[1524]](_0x8e22x9 - 
  _0x8e22x6);
  return new Ext[_0xee2b[49]].Region(_0x8e22x5, _0x8e22x2 + _0x8e22x3, _0x8e22x5 + _0x8e22xd, _0x8e22x2);
}, onMouseDown:function(_0x8e22x4, _0x8e22x6) {
  var _0x8e22x3 = _0x8e22x4[_0xee2b[1440]][_0xee2b[1972]] || [];
  if (_0x8e22x3[_0xee2b[4]] > 1 || !(_0x8e22x4[_0xee2b[249]] === _0xee2b[784] && _0x8e22x4[_0xee2b[1973]] === _0xee2b[1974])) {
    return;
  }
  _0x8e22x4[_0xee2b[1975]] = Ext[_0xee2b[688]];
  this[_0xee2b[1967]] = _0x8e22x4[_0xee2b[1970]]();
  this[_0xee2b[9]]([_0x8e22x4, _0x8e22x6]);
  this[_0xee2b[1976]] = this[_0xee2b[1967]];
  this[_0xee2b[1971]] = this[_0xee2b[1968]]();
  if (Ext[_0xee2b[960]] && this[_0xee2b[1855]]) {
    this[_0xee2b[1971]][_0xee2b[1354]] = this[_0xee2b[265]][_0xee2b[758]][_0xee2b[1969]] - this[_0xee2b[265]][_0xee2b[793]]() - this[_0xee2b[1971]][_0xee2b[1354]];
  }
}, onMouseMove:function(_0x8e22x9, _0x8e22x1) {
  _0x8e22x9[_0xee2b[1977]]();
  var _0x8e22x5 = _0x8e22x9[_0xee2b[249]] === _0xee2b[1978] ? this[_0xee2b[1976]] : _0x8e22x9[_0xee2b[1970]](), _0x8e22x6 = this[_0xee2b[1967]];
  if (!this[_0xee2b[1979]]) {
    if (Math[_0xee2b[715]](Math[_0xee2b[1524]](_0x8e22x6[0] - _0x8e22x5[0]), Math[_0xee2b[1524]](_0x8e22x6[1] - _0x8e22x5[1])) > this[_0xee2b[1980]]) {
      this[_0xee2b[1981]](_0x8e22x9);
    } else {
      return;
    }
  }
  var _0x8e22x3 = _0x8e22x5[0], _0x8e22x7 = _0x8e22x5[1];
  if (this[_0xee2b[1964]] > 1) {
    _0x8e22x3 -= this[_0xee2b[1967]][0];
    _0x8e22x3 = Math[_0xee2b[704]](_0x8e22x3 / this[_0xee2b[1964]]) * this[_0xee2b[1964]];
    _0x8e22x3 += this[_0xee2b[1967]][0];
  }
  if (this[_0xee2b[1965]] > 1) {
    _0x8e22x7 -= this[_0xee2b[1967]][1];
    _0x8e22x7 = Math[_0xee2b[704]](_0x8e22x7 / this[_0xee2b[1965]]) * this[_0xee2b[1965]];
    _0x8e22x7 += this[_0xee2b[1967]][1];
  }
  var _0x8e22x4 = this[_0xee2b[1964]] > 1 || this[_0xee2b[1965]] > 1;
  if (!_0x8e22x4 || _0x8e22x3 !== _0x8e22x5[0] || _0x8e22x7 !== _0x8e22x5[1]) {
    this[_0xee2b[1976]] = [_0x8e22x3, _0x8e22x7];
    if (this[_0xee2b[180]](_0xee2b[798], this, _0x8e22x9) === false) {
      this[_0xee2b[802]](_0x8e22x9);
    } else {
      this[_0xee2b[1982]](_0x8e22x9);
      this[_0xee2b[180]](_0xee2b[1983], this, _0x8e22x9);
    }
  }
}});
Ext[_0xee2b[6]](_0xee2b[1984], {extend:_0xee2b[717], minuteHeight:8, minuteTop:2, hourHeight:8, hourTop:2, handLeft:10, mode:_0xee2b[527], setMode:function(_0x8e22x3) {
  this[_0xee2b[1719]] = _0x8e22x3;
}, getRotateStyle:function(_0x8e22x3) {
  return _0xee2b[1985][_0xee2b[675]](/D/g, _0x8e22x3);
}, constructor:function() {
  var _0x8e22x3 = this;
  _0x8e22x3[_0xee2b[9]]([_0xee2b[1986] + this[_0xee2b[1987]] + _0xee2b[1988] + this[_0xee2b[1989]] + _0xee2b[1990] + this[_0xee2b[1991]] + _0xee2b[1988] + this[_0xee2b[1992]] + _0xee2b[1993], {getMinuteStyle:_0x8e22x3[_0xee2b[1994]], getHourStyle:_0x8e22x3[_0xee2b[1994]]}]);
}});
Ext[_0xee2b[6]](_0xee2b[1995], {extend:_0xee2b[1996], requires:[_0xee2b[717], _0xee2b[1984]], autoHide:false, anchor:_0xee2b[1997], padding:_0xee2b[1998], showDelay:0, hideDelay:0, quickShowInterval:0, dismissDelay:0, trackMouse:false, anchorOffset:5, shadow:false, frame:false, schedulerView:null, message:null, startDate:null, endDate:null, template:null, valid:true, mode:null, offsetAdjust:[18, 5], clockTpl:null, constructor:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  _0x8e22x6[_0xee2b[1999]] = new Sch[_0xee2b[2000]].ClockTemplate();
  _0x8e22x6[_0xee2b[1138]] = _0x8e22x6[_0xee2b[1139]] = new Date();
  if (!_0x8e22x6[_0xee2b[1860]]) {
    _0x8e22x6[_0xee2b[1860]] = new Ext.XTemplate([_0xee2b[2001] + Ext[_0xee2b[238]] + _0xee2b[2002], {renderClock:function(_0x8e22x5, _0x8e22x2, _0x8e22x4) {
      return _0x8e22x6[_0xee2b[1999]][_0xee2b[8]]({date:_0x8e22x5, text:_0x8e22x2, cls:_0x8e22x4});
    }}]);
  }
  _0x8e22x6[_0xee2b[9]](arguments);
}, update:function(_0x8e22x3, _0x8e22x9, _0x8e22x2, _0x8e22x5, _0x8e22x1) {
  if (this[_0xee2b[1138]] - _0x8e22x3 !== 0 || this[_0xee2b[1139]] - _0x8e22x9 !== 0 || this[_0xee2b[2003]] !== _0x8e22x2 || this[_0xee2b[940]] !== _0x8e22x5 || this[_0xee2b[2004]] != _0x8e22x1) {
    this[_0xee2b[1138]] = _0x8e22x3;
    this[_0xee2b[1139]] = _0x8e22x9;
    this[_0xee2b[2003]] = _0x8e22x2;
    this[_0xee2b[940]] = _0x8e22x5;
    this[_0xee2b[2004]] = _0x8e22x1;
    var _0x8e22x4 = this[_0xee2b[1817]][_0xee2b[1888]](_0x8e22x3), _0x8e22x6 = this[_0xee2b[1817]][_0xee2b[2005]](_0x8e22x9, _0x8e22x3);
    if (_0x8e22x1) {
      this[_0xee2b[1719]] = _0xee2b[2006];
      this[_0xee2b[1999]][_0xee2b[1720]](_0xee2b[2007]);
    } else {
      this[_0xee2b[1719]] = _0xee2b[524];
      this[_0xee2b[1999]][_0xee2b[1720]](_0xee2b[527]);
    }
    if (this[_0xee2b[1719]] === _0xee2b[2006] && _0x8e22x9[_0xee2b[1127]]() === 0 && _0x8e22x9[_0xee2b[1130]]() === 0 && !(_0x8e22x9[_0xee2b[481]]() === _0x8e22x3[_0xee2b[481]]() && _0x8e22x9[_0xee2b[480]]() === _0x8e22x3[_0xee2b[480]]() && _0x8e22x9[_0xee2b[479]]() === _0x8e22x3[_0xee2b[479]]())) {
      _0x8e22x9 = Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[255]](_0x8e22x9, Sch[_0xee2b[49]][_0xee2b[703]].DAY, -1);
    }
    this[_0xee2b[9]]([this[_0xee2b[1860]][_0xee2b[8]]({valid:_0x8e22x2, startDate:_0x8e22x3, endDate:_0x8e22x9, startText:_0x8e22x4, endText:_0x8e22x6, message:_0x8e22x5, allDay:_0x8e22x1})]);
  }
  if (this[_0xee2b[262]] && this[_0xee2b[854]]()) {
    if (Ext[_0xee2b[2009]]()[_0xee2b[966]](_0xee2b[2008])) {
      this[_0xee2b[2010]]();
    } else {
      this[_0xee2b[2011]]();
    }
  }
}, showForElement:function(_0x8e22x6, _0x8e22x3) {
  if (Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[1154]](this[_0xee2b[1817]][_0xee2b[2012]]()[_0xee2b[1734]], Sch[_0xee2b[49]][_0xee2b[703]].DAY) >= 0) {
    this[_0xee2b[1719]] = _0xee2b[2006];
    this[_0xee2b[264]](_0xee2b[2013]);
    this[_0xee2b[267]](_0xee2b[2014]);
  } else {
    this[_0xee2b[1719]] = _0xee2b[2015];
    this[_0xee2b[267]](_0xee2b[2013]);
    this[_0xee2b[264]](_0xee2b[2014]);
  }
  _0x8e22x3 = arguments[_0xee2b[4]] > 1 ? _0x8e22x3 : this[_0xee2b[2016]][0];
  this[_0xee2b[2017]] = [_0x8e22x3 - this[_0xee2b[2016]][0], -this[_0xee2b[2016]][1]];
  this[_0xee2b[2018]](_0x8e22x6);
  this[_0xee2b[2019]]();
  this[_0xee2b[2011]]();
}, realign:function() {
  this[_0xee2b[2021]](this[_0xee2b[969]], _0xee2b[2020], this[_0xee2b[2017]]);
}, afterRender:function() {
  this[_0xee2b[9]](arguments);
  this[_0xee2b[265]][_0xee2b[149]](_0xee2b[2022], this[_0xee2b[2011]], this);
}});
Ext[_0xee2b[6]](_0xee2b[2023], {extend:_0xee2b[1996], alias:_0xee2b[2024], requires:[_0xee2b[1984]], trackMouse:true, bodyCls:_0xee2b[2025], messageTpl:_0xee2b[2026], autoHide:false, dismissDelay:1000, showDelay:0, schedulerView:null, clockTpl:null, lastTime:null, lastResource:null, initComponent:function() {
  var _0x8e22x6 = this;
  var _0x8e22x3 = _0x8e22x6[_0xee2b[1817]];
  _0x8e22x6[_0xee2b[1999]] = new Sch[_0xee2b[2000]].ClockTemplate();
  _0x8e22x6[_0xee2b[2027]] = new Ext.XTemplate(_0x8e22x6[_0xee2b[2027]]);
  _0x8e22x6[_0xee2b[9]](arguments);
  _0x8e22x6[_0xee2b[149]](_0xee2b[2028], _0x8e22x6[_0xee2b[2029]], _0x8e22x6);
  _0x8e22x3[_0xee2b[252]](_0x8e22x3[_0xee2b[265]], {mouseleave:function() {
    _0x8e22x6[_0xee2b[256]]();
  }, mousemove:_0x8e22x6[_0xee2b[2030]], scope:_0x8e22x6});
  _0x8e22x3[_0xee2b[252]](_0x8e22x3[_0xee2b[265]], {click:_0x8e22x6[_0xee2b[2031]], scope:_0x8e22x6, delay:1});
}, onBodyMouseDown:function() {
  this[_0xee2b[256]]();
}, handleMouseMove:function(_0x8e22x1) {
  var _0x8e22x4 = this, _0x8e22x3 = _0x8e22x4[_0xee2b[1817]];
  if (_0x8e22x4[_0xee2b[144]]) {
    return;
  }
  if (_0x8e22x1[_0xee2b[2033]](_0xee2b[495] + _0x8e22x3[_0xee2b[2032]], 5) && !_0x8e22x1[_0xee2b[2033]](_0x8e22x3[_0xee2b[2034]]) && _0x8e22x1[_0xee2b[1973]] === _0xee2b[1974]) {
    var _0x8e22x5 = _0x8e22x3[_0xee2b[2035]](_0x8e22x1, _0xee2b[424]);
    if (_0x8e22x5) {
      var _0x8e22x6 = _0x8e22x3[_0xee2b[2036]](_0x8e22x1[_0xee2b[2033]]());
      if (!_0x8e22x4[_0xee2b[2037]] || _0x8e22x5 - _0x8e22x4[_0xee2b[2037]] !== 0 || _0x8e22x6 !== _0x8e22x4[_0xee2b[2038]]) {
        _0x8e22x4[_0xee2b[2038]] = _0x8e22x6;
        if (_0x8e22x4[_0xee2b[856]]) {
          _0x8e22x4[_0xee2b[2039]]();
          _0x8e22x4[_0xee2b[2019]]();
        }
        _0x8e22x4[_0xee2b[2040]](_0x8e22x5, _0x8e22x1);
      }
    } else {
      _0x8e22x4[_0xee2b[256]]();
      _0x8e22x4[_0xee2b[2037]] = _0x8e22x4[_0xee2b[2038]] = null;
    }
  } else {
    _0x8e22x4[_0xee2b[256]]();
    _0x8e22x4[_0xee2b[2037]] = _0x8e22x4[_0xee2b[2038]] = null;
  }
}, setClockMode:function() {
  var _0x8e22x6 = this, _0x8e22x4 = Sch[_0xee2b[49]][_0xee2b[703]], _0x8e22x3 = _0x8e22x6[_0xee2b[1817]][_0xee2b[2012]]();
  if (_0x8e22x4[_0xee2b[1154]](_0x8e22x3[_0xee2b[1734]], _0x8e22x4.DAY) >= 0) {
    _0x8e22x6[_0xee2b[1999]][_0xee2b[1720]](_0xee2b[524]);
  } else {
    _0x8e22x6[_0xee2b[1999]][_0xee2b[1720]](_0xee2b[527]);
  }
}, getText:function() {
}, updateHoverTip:function(_0x8e22x4, _0x8e22x5) {
  if (_0x8e22x4) {
    var _0x8e22x6 = this[_0xee2b[1999]][_0xee2b[8]]({date:_0x8e22x4, text:this[_0xee2b[1817]][_0xee2b[1888]](_0x8e22x4)});
    var _0x8e22x3 = this[_0xee2b[2027]][_0xee2b[8]]({message:this[_0xee2b[2041]](_0x8e22x4, _0x8e22x5)});
    this[_0xee2b[724]](_0x8e22x6 + _0x8e22x3);
    this[_0xee2b[2037]] = _0x8e22x4;
  }
}, hide:function() {
  this[_0xee2b[9]](arguments);
  this[_0xee2b[2037]] = this[_0xee2b[2038]] = null;
}, tipOnBeforeShow:function(_0x8e22x3) {
  return !this[_0xee2b[144]];
}});
Ext[_0xee2b[6]](_0xee2b[2042], {requires:[_0xee2b[717], _0xee2b[2043], _0xee2b[1140], _0xee2b[1910], _0xee2b[1948], _0xee2b[1995], _0xee2b[2023]], disabled:false, showHoverTip:true, showDragTip:true, dragTip:null, dragTolerance:2, hoverTip:null, validatorFn:Ext[_0xee2b[688]], validatorFnScope:null, trackerConfig:null, schedulerView:null, template:_0xee2b[2044], constructor:function(_0x8e22x3) {
  Ext[_0xee2b[8]](this, _0x8e22x3 || {});
  this[_0xee2b[2037]] = new Date();
  if (!(this[_0xee2b[1860]] instanceof Ext[_0xee2b[728]])) {
    this[_0xee2b[1860]] = new Ext.Template(this[_0xee2b[1860]]);
  }
  this[_0xee2b[1817]][_0xee2b[149]](_0xee2b[218], this[_0xee2b[2045]], this);
  if (Ext[_0xee2b[1952]][_0xee2b[1951]]) {
    this[_0xee2b[1817]][_0xee2b[149]](_0xee2b[2046], this[_0xee2b[2047]], this);
  } else {
    this[_0xee2b[1817]][_0xee2b[265]][_0xee2b[149]](_0xee2b[798], this[_0xee2b[2047]], this, {single:true});
  }
  this[_0xee2b[9]]([_0x8e22x3]);
}, setDisabled:function(_0x8e22x3) {
  this[_0xee2b[144]] = _0x8e22x3;
  if (this[_0xee2b[2048]] && this[_0xee2b[2048]][_0xee2b[253]]) {
    this[_0xee2b[2048]][_0xee2b[253]](_0x8e22x3);
  }
  if (this[_0xee2b[2049]] && this[_0xee2b[2049]][_0xee2b[253]]) {
    this[_0xee2b[2049]][_0xee2b[253]](_0x8e22x3);
  }
}, getProxy:function() {
  if (!this[_0xee2b[379]]) {
    this[_0xee2b[379]] = this[_0xee2b[1860]][_0xee2b[384]](this[_0xee2b[1817]][_0xee2b[787]](), {}, true);
    this[_0xee2b[379]][_0xee2b[256]] = function() {
      this[_0xee2b[2051]]({left:0, right:0, top:_0xee2b[2050]});
    };
  }
  return this[_0xee2b[379]];
}, onBeforeDragStart:function(_0x8e22x1, _0x8e22x7) {
  var _0x8e22x4 = this[_0xee2b[1817]], _0x8e22x6 = _0x8e22x7[_0xee2b[2033]](_0xee2b[495] + _0x8e22x4[_0xee2b[2052]], 5);
  if (_0x8e22x6 && this[_0xee2b[2053]](_0x8e22x7) && (!_0x8e22x7[_0xee2b[1440]][_0xee2b[1972]] || _0x8e22x7[_0xee2b[1440]][_0xee2b[1972]][_0xee2b[4]] === 1)) {
    var _0x8e22x3 = _0x8e22x4[_0xee2b[2036]](_0x8e22x6), _0x8e22x5 = _0x8e22x4[_0xee2b[1847]]() ? null : _0x8e22x3, _0x8e22x9 = _0x8e22x4[_0xee2b[2035]](_0x8e22x7);
    if (!this[_0xee2b[144]] && _0x8e22x6 && _0x8e22x4[_0xee2b[180]](_0xee2b[2054], _0x8e22x4, _0x8e22x5, _0x8e22x9, _0x8e22x7) !== false) {
      this[_0xee2b[2055]] = _0x8e22x5;
      this[_0xee2b[2056]] = _0x8e22x9;
      this[_0xee2b[2057]] = _0x8e22x4[_0xee2b[2058]](_0x8e22x3, this[_0xee2b[2056]]);
      this[_0xee2b[2059]] = _0x8e22x4[_0xee2b[2060]](_0x8e22x3, this[_0xee2b[2056]]);
      return true;
    }
  }
  return false;
}, isCreateAllowed:function(_0x8e22x3) {
  return !_0x8e22x3[_0xee2b[2033]](this[_0xee2b[1817]][_0xee2b[2034]]);
}, disableHoverTip:function() {
  this[_0xee2b[2048]] && this[_0xee2b[2048]][_0xee2b[2061]] && this[_0xee2b[2048]][_0xee2b[2061]]();
}, onDragStart:function() {
  var _0x8e22x5 = this, _0x8e22x6 = _0x8e22x5[_0xee2b[1817]], _0x8e22x3 = _0x8e22x5[_0xee2b[2062]][_0xee2b[1945]](), _0x8e22x4 = _0x8e22x5[_0xee2b[1700]]();
  this[_0xee2b[2063]] = true;
  if (this[_0xee2b[2048]]) {
    this[_0xee2b[2048]][_0xee2b[149]](_0xee2b[2064], this[_0xee2b[2065]], this);
    this[_0xee2b[2048]][_0xee2b[2061]]();
  }
  _0x8e22x5[_0xee2b[179]] = _0x8e22x5[_0xee2b[2056]];
  _0x8e22x5[_0xee2b[771]] = _0x8e22x5[_0xee2b[179]];
  _0x8e22x5[_0xee2b[2066]] = _0x8e22x6[_0xee2b[1966]]();
  if (_0x8e22x6[_0xee2b[1828]]()) {
    _0x8e22x5[_0xee2b[2067]] = {top:_0x8e22x5[_0xee2b[2057]][_0xee2b[686]], bottom:_0x8e22x5[_0xee2b[2057]][_0xee2b[754]]};
  } else {
    _0x8e22x5[_0xee2b[2067]] = {left:_0x8e22x5[_0xee2b[2057]][_0xee2b[1354]], right:_0x8e22x5[_0xee2b[2057]][_0xee2b[867]]};
  }
  Ext[_0xee2b[8]](_0x8e22x3, _0x8e22x5[_0xee2b[2067]]);
  if (_0x8e22x6[_0xee2b[1855]]) {
    _0x8e22x4[_0xee2b[2051]]({right:_0xee2b[1039]});
  }
  _0x8e22x4[_0xee2b[2068]](_0x8e22x3);
  _0x8e22x4[_0xee2b[2019]]();
  _0x8e22x6[_0xee2b[180]](_0xee2b[2069], _0x8e22x6, _0x8e22x4);
  if (_0x8e22x5[_0xee2b[2070]]) {
    _0x8e22x5[_0xee2b[2049]][_0xee2b[2064]]();
    _0x8e22x5[_0xee2b[2049]][_0xee2b[724]](_0x8e22x5[_0xee2b[179]], _0x8e22x5[_0xee2b[771]], true);
    _0x8e22x5[_0xee2b[2049]][_0xee2b[2071]](_0x8e22x4);
    _0x8e22x5[_0xee2b[2049]][_0xee2b[2051]](_0xee2b[2072], _0xee2b[1690]);
  }
  Sch[_0xee2b[49]][_0xee2b[2074]][_0xee2b[2073]](_0x8e22x6, _0x8e22x6[_0xee2b[1828]]() ? _0xee2b[1931] : _0xee2b[1932]);
}, onDrag:function() {
  var _0x8e22x9 = this, _0x8e22x5 = _0x8e22x9[_0xee2b[1817]], _0x8e22x4 = _0x8e22x9[_0xee2b[2062]][_0xee2b[1945]](), _0x8e22x7 = _0x8e22x5[_0xee2b[2075]](_0x8e22x4, _0xee2b[704]), _0x8e22x1 = _0xee2b[27];
  if (!_0x8e22x7) {
    return;
  }
  _0x8e22x9[_0xee2b[179]] = _0x8e22x7[_0xee2b[179]] || _0x8e22x9[_0xee2b[179]];
  _0x8e22x9[_0xee2b[771]] = _0x8e22x7[_0xee2b[771]] || _0x8e22x9[_0xee2b[771]];
  var _0x8e22x6 = _0x8e22x9[_0xee2b[2059]];
  if (_0x8e22x6) {
    _0x8e22x9[_0xee2b[771]] = Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[2076]](_0x8e22x9[_0xee2b[771]], _0x8e22x6[_0xee2b[179]], _0x8e22x6[_0xee2b[771]]);
    _0x8e22x9[_0xee2b[179]] = Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[2076]](_0x8e22x9[_0xee2b[179]], _0x8e22x6[_0xee2b[179]], _0x8e22x6[_0xee2b[771]]);
  }
  _0x8e22x9[_0xee2b[2003]] = this[_0xee2b[2078]][_0xee2b[293]](_0x8e22x9[_0xee2b[2077]] || _0x8e22x9, _0x8e22x9[_0xee2b[2055]], _0x8e22x9[_0xee2b[179]], _0x8e22x9[_0xee2b[771]]);
  if (_0x8e22x9[_0xee2b[2003]] && typeof _0x8e22x9[_0xee2b[2003]] !== _0xee2b[1108]) {
    _0x8e22x1 = _0x8e22x9[_0xee2b[2003]][_0xee2b[940]];
    _0x8e22x9[_0xee2b[2003]] = _0x8e22x9[_0xee2b[2003]][_0xee2b[2003]];
  }
  _0x8e22x9[_0xee2b[2003]] = _0x8e22x9[_0xee2b[2003]] !== false;
  if (_0x8e22x9[_0xee2b[2070]]) {
    _0x8e22x9[_0xee2b[2049]][_0xee2b[724]](_0x8e22x9[_0xee2b[179]], _0x8e22x9[_0xee2b[771]], _0x8e22x9[_0xee2b[2003]], _0x8e22x1);
  }
  Ext[_0xee2b[8]](_0x8e22x4, _0x8e22x9[_0xee2b[2067]]);
  var _0x8e22x3 = _0x8e22x5[_0xee2b[1966]]();
  var _0x8e22x2 = this[_0xee2b[1700]]();
  _0x8e22x2[_0xee2b[2068]](_0x8e22x4);
  if (_0x8e22x5[_0xee2b[1828]]()) {
    _0x8e22x2[_0xee2b[2079]](_0x8e22x9[_0xee2b[2057]][_0xee2b[686]] + _0x8e22x9[_0xee2b[2066]][_0xee2b[686]] - _0x8e22x3[_0xee2b[686]]);
  }
}, eventSwallower:function(_0x8e22x3) {
  _0x8e22x3[_0xee2b[1975]]();
  _0x8e22x3[_0xee2b[1977]]();
}, onDragEnd:function(_0x8e22x7, _0x8e22xa) {
  var _0x8e22x9 = this, _0x8e22x5 = _0x8e22x9[_0xee2b[1817]], _0x8e22x1 = true, _0x8e22x3 = _0x8e22xa[_0xee2b[2033]](), _0x8e22x4 = Ext[_0xee2b[55]](_0x8e22x3);
  _0x8e22x4[_0xee2b[149]](_0xee2b[248], this[_0xee2b[2080]]);
  _0x8e22x9[_0xee2b[2081]] = setTimeout(function() {
    _0x8e22x4[_0xee2b[152]](_0xee2b[248], _0x8e22x9[_0xee2b[2080]]);
  }, 100);
  _0x8e22x9[_0xee2b[2063]] = false;
  if (_0x8e22x9[_0xee2b[2070]]) {
    _0x8e22x9[_0xee2b[2049]][_0xee2b[2061]]();
  }
  if (!_0x8e22x9[_0xee2b[179]] || !_0x8e22x9[_0xee2b[771]] || _0x8e22x9[_0xee2b[771]] - _0x8e22x9[_0xee2b[179]] <= 0) {
    _0x8e22x9[_0xee2b[2003]] = false;
  }
  var _0x8e22x6 = {start:_0x8e22x9[_0xee2b[179]], end:_0x8e22x9[_0xee2b[771]], resourceRecord:_0x8e22x9[_0xee2b[2055]], e:_0x8e22xa, valid:_0x8e22x9[_0xee2b[2003]], finalize:function(_0x8e22x2) {
    _0x8e22x9[_0xee2b[2082]](_0x8e22x2, _0x8e22x6);
  }};
  if (_0x8e22x9[_0xee2b[2003]]) {
    _0x8e22x1 = _0x8e22x5[_0xee2b[180]](_0xee2b[2083], _0x8e22x5, _0x8e22x6, _0x8e22xa, this[_0xee2b[1700]]()) !== false;
  }
  if (_0x8e22x1) {
    _0x8e22x9[_0xee2b[2082]](_0x8e22x9[_0xee2b[2003]], _0x8e22x6);
  }
  Sch[_0xee2b[49]][_0xee2b[2074]][_0xee2b[2084]]();
}, createEvent:function(_0x8e22x4) {
  var _0x8e22x1 = this[_0xee2b[1817]], _0x8e22x6 = _0x8e22x1[_0xee2b[696]](), _0x8e22x2 = Ext[_0xee2b[831]](_0x8e22x6[_0xee2b[137]]()), _0x8e22x3, _0x8e22x5;
  if (_0x8e22x2[_0xee2b[2085]]) {
    _0x8e22x2[_0xee2b[2086]] = _0x8e22x6;
    _0x8e22x5 = _0x8e22x4[_0xee2b[2055]];
    _0x8e22x3 = _0x8e22x5 && _0x8e22x5[_0xee2b[1296]] && _0x8e22x5[_0xee2b[1296]](true);
    if (_0x8e22x3) {
      _0x8e22x2[_0xee2b[2087]](_0x8e22x3);
    }
  }
  _0x8e22x2[_0xee2b[1208]](_0x8e22x4[_0xee2b[179]], _0x8e22x4[_0xee2b[771]]);
  if (_0x8e22x3) {
    _0x8e22x2[_0xee2b[2087]](null);
  }
  return _0x8e22x2;
}, finalize:function(_0x8e22x3, _0x8e22x6) {
  var _0x8e22x4 = this[_0xee2b[1817]];
  if (_0x8e22x3) {
    _0x8e22x4[_0xee2b[180]](_0xee2b[2088], _0x8e22x4, this[_0xee2b[2089]](_0x8e22x6), _0x8e22x6[_0xee2b[2055]], _0x8e22x6[_0xee2b[2090]], this[_0xee2b[1700]]());
  }
  this[_0xee2b[379]][_0xee2b[256]]();
  this[_0xee2b[1817]][_0xee2b[180]](_0xee2b[2091], _0x8e22x4, this[_0xee2b[1700]]());
  if (this[_0xee2b[2048]]) {
    this[_0xee2b[2048]][_0xee2b[152]](_0xee2b[2064], this[_0xee2b[2065]], this);
    this[_0xee2b[2048]][_0xee2b[2064]]();
  }
}, dragging:false, initDragTracker:function() {
  var _0x8e22x5 = this, _0x8e22x6 = Ext[_0xee2b[1952]][_0xee2b[1951]], _0x8e22x3 = _0x8e22x5[_0xee2b[1817]];
  var _0x8e22x4 = Ext[_0xee2b[8]]({el:_0x8e22x3[_0xee2b[265]], rtl:_0x8e22x3[_0xee2b[1855]], tolerance:_0x8e22x5[_0xee2b[2092]], listeners:{mousedown:_0x8e22x5[_0xee2b[2093]], beforedragstart:_0x8e22x5[_0xee2b[2094]], dragstart:_0x8e22x5[_0xee2b[2095]], drag:_0x8e22x5[_0xee2b[1982]], dragend:_0x8e22x5[_0xee2b[2096]], scope:_0x8e22x5}}, this[_0xee2b[2097]]);
  this[_0xee2b[2098]]();
  if (_0x8e22x6 && !Ext[_0xee2b[2100]][_0xee2b[2099]]) {
    this[_0xee2b[2070]] = false;
    this[_0xee2b[2101]] = false;
    this[_0xee2b[2049]] = null;
    this[_0xee2b[2048]] = null;
  } else {
    this[_0xee2b[2102]]();
  }
  _0x8e22x5[_0xee2b[2062]] = new Sch[_0xee2b[49]].DragTracker(_0x8e22x4);
}, bindRightClickPreventer:function() {
  this[_0xee2b[1817]][_0xee2b[265]][_0xee2b[149]](_0xee2b[744], this[_0xee2b[2103]], this, {priority:999});
}, stopDragCreateOnRightClick:function(_0x8e22x3) {
  if (_0x8e22x3[_0xee2b[2104]] !== 0 && this[_0xee2b[2063]]) {
    this[_0xee2b[2062]][_0xee2b[802]](_0x8e22x3);
  }
}, setupTooltips:function() {
  var _0x8e22x4 = this, _0x8e22x3 = _0x8e22x4[_0xee2b[1817]];
  if (this[_0xee2b[2070]]) {
    var _0x8e22x6 = this[_0xee2b[2049]];
    if (_0x8e22x6 instanceof Ext[_0xee2b[2106]][_0xee2b[2105]]) {
      _0x8e22x6[_0xee2b[1817]] = _0x8e22x3;
      _0x8e22x6[_0xee2b[149]](_0xee2b[2028], function() {
        return _0x8e22x4[_0xee2b[2063]];
      });
    } else {
      this[_0xee2b[2049]] = new Sch[_0xee2b[2000]].Tooltip(Ext[_0xee2b[8]]({cls:_0xee2b[2107], schedulerView:_0x8e22x3, constrainTo:_0x8e22x3[_0xee2b[694]](_0xee2b[840])[_0xee2b[265]], listeners:{beforeshow:function() {
        return _0x8e22x4[_0xee2b[2063]];
      }}}, _0x8e22x6));
    }
  }
  if (_0x8e22x4[_0xee2b[2101]]) {
    var _0x8e22x5 = _0x8e22x4[_0xee2b[2048]];
    if (_0x8e22x5 instanceof Ext[_0xee2b[2106]][_0xee2b[2105]]) {
      _0x8e22x5[_0xee2b[1817]] = _0x8e22x3;
    } else {
      _0x8e22x4[_0xee2b[2048]] = Ext[_0xee2b[2109]][_0xee2b[831]](Ext[_0xee2b[330]]({renderTo:Ext[_0xee2b[797]](), target:_0x8e22x3[_0xee2b[265]], schedulerView:_0x8e22x3}, _0x8e22x5), _0xee2b[2108]);
    }
  }
}, verifyLeftButtonPressed:function(_0x8e22x3, _0x8e22x6) {
  return _0x8e22x6[_0xee2b[2104]] === 0;
}, onSchedulerDestroy:function() {
  if (this[_0xee2b[2048]] && this[_0xee2b[2048]][_0xee2b[218]]) {
    this[_0xee2b[2048]][_0xee2b[218]]();
  }
  if (this[_0xee2b[2049]] && this[_0xee2b[2049]][_0xee2b[218]]) {
    this[_0xee2b[2049]][_0xee2b[218]]();
  }
  if (this[_0xee2b[2062]]) {
    this[_0xee2b[2062]][_0xee2b[218]]();
  }
  if (this[_0xee2b[379]]) {
    Ext[_0xee2b[218]](this[_0xee2b[379]]);
    this[_0xee2b[379]] = null;
  }
  clearTimeout(this[_0xee2b[2081]]);
}});
Ext[_0xee2b[6]](_0xee2b[2110], {extend:_0xee2b[2111], requires:[_0xee2b[2112], _0xee2b[1995]], uses:[_0xee2b[1598], _0xee2b[1046], _0xee2b[1140], _0xee2b[2113]], animRepair:false, repairHighlight:false, repairHighlightColor:_0xee2b[2114], containerScroll:false, getConstrainRegion:null, showTooltip:true, tip:null, deltaSetXY:null, schedulerView:null, _onValidDropTimer:null, lastXY:null, showExactDropPosition:false, enableCopy:false, enableCopyKey:_0xee2b[2115], validatorFn:function(_0x8e22x6, _0x8e22x3, 
_0x8e22x4, _0x8e22x1, _0x8e22x5) {
  return true;
}, validatorFnScope:null, copyKeyPressed:false, keyListener:null, viewScrollListener:null, gridScrollListener:null, dragDropProxyCls:_0xee2b[2116], invalidCssClasses:[_0xee2b[2117], _0xee2b[2118]], constructor:function(_0x8e22x4, _0x8e22x3) {
  var _0x8e22x6 = this[_0xee2b[379]] = this[_0xee2b[379]] || new Ext[_0xee2b[2121]].StatusProxy({shadow:false, dropAllowed:this[_0xee2b[2119]], dropNotAllowed:this[_0xee2b[2120]], ensureAttachedToBody:Ext[_0xee2b[688]]});
  this[_0xee2b[9]](arguments);
  this[_0xee2b[2122]] = true;
  this[_0xee2b[1978]] = false;
  this[_0xee2b[2123]] = false;
  var _0x8e22x2 = this[_0xee2b[1817]];
  Ext[_0xee2b[26]][_0xee2b[25]](this[_0xee2b[2124]], this[_0xee2b[2125]], this);
  if (_0x8e22x2[_0xee2b[2126]]) {
    this[_0xee2b[2127]] = false;
  }
  this[_0xee2b[265]][_0xee2b[83]](_0x8e22x6[_0xee2b[265]]);
  this[_0xee2b[2098]]();
  this[_0xee2b[265]][_0xee2b[2128]] = Ext[_0xee2b[688]];
  _0x8e22x6[_0xee2b[264]](_0xee2b[2129]);
  _0x8e22x2[_0xee2b[149]]({eventdragstart:function() {
    Sch[_0xee2b[49]][_0xee2b[2074]][_0xee2b[2073]](_0x8e22x2, _0x8e22x2[_0xee2b[2130]] && _0x8e22x2[_0xee2b[2131]]());
  }, aftereventdrop:function() {
    Sch[_0xee2b[49]][_0xee2b[2074]][_0xee2b[2084]]();
  }, scope:this});
  if (this[_0xee2b[2127]]) {
    var _0x8e22x5 = this[_0xee2b[2106]];
    if (_0x8e22x5 instanceof Ext[_0xee2b[2106]][_0xee2b[2105]]) {
      _0x8e22x5[_0xee2b[1817]] = _0x8e22x2;
    } else {
      this[_0xee2b[2106]] = new Sch[_0xee2b[2000]].Tooltip(Ext[_0xee2b[8]]({schedulerView:_0x8e22x2, constrainTo:_0x8e22x2[_0xee2b[694]](_0xee2b[840])[_0xee2b[265]], alignOnScroll:false, cls:_0xee2b[2132]}, _0x8e22x5));
    }
  }
}, bindRightClickPreventer:function() {
  this[_0xee2b[1817]][_0xee2b[265]][_0xee2b[149]](_0xee2b[784], this[_0xee2b[2133]], this, {priority:999});
}, destroy:function() {
  this[_0xee2b[2106]] && this[_0xee2b[2106]][_0xee2b[218]]();
  this[_0xee2b[2134]]();
  clearTimeout(this._onValidDropTimer);
  this[_0xee2b[9]](arguments);
}, preventRightClick:function(_0x8e22x3) {
  if (this[_0xee2b[2063]] && _0x8e22x3[_0xee2b[2104]] !== 0) {
    return false;
  }
}, autoOffset:function() {
  this[_0xee2b[2135]](0, 0);
}, setupConstraints:function(_0x8e22xd, _0x8e22x5, _0x8e22x9, _0x8e22x2, _0x8e22xa, _0x8e22x1, _0x8e22x4) {
  this[_0xee2b[2136]]();
  var _0x8e22x3 = _0x8e22xa && !this[_0xee2b[2137]] && _0x8e22x1 > 1 ? _0x8e22x1 : 0;
  var _0x8e22x7 = !_0x8e22xa && !this[_0xee2b[2137]] && _0x8e22x1 > 1 ? _0x8e22x1 : 0;
  this[_0xee2b[2138]]();
  this[_0xee2b[2139]] = _0x8e22xd[_0xee2b[1354]] + _0x8e22x9;
  this[_0xee2b[2140]] = _0x8e22xd[_0xee2b[686]] + _0x8e22x2;
  var _0x8e22x6 = _0x8e22x5[_0xee2b[867]] - _0x8e22x5[_0xee2b[1354]];
  var _0x8e22x8 = _0x8e22x5[_0xee2b[754]] - _0x8e22x5[_0xee2b[686]];
  if (_0x8e22xa) {
    if (_0x8e22x4) {
      this[_0xee2b[2141]](_0x8e22xd[_0xee2b[1354]] + _0x8e22x9, _0x8e22xd[_0xee2b[867]] - _0x8e22x6 + _0x8e22x9, _0x8e22x3);
    } else {
      this[_0xee2b[2141]](_0x8e22xd[_0xee2b[1354]], _0x8e22xd[_0xee2b[867]], _0x8e22x3);
    }
    this[_0xee2b[2142]](_0x8e22xd[_0xee2b[686]] + _0x8e22x2, _0x8e22xd[_0xee2b[754]] - _0x8e22x8 + _0x8e22x2, _0x8e22x7);
  } else {
    this[_0xee2b[2141]](_0x8e22xd[_0xee2b[1354]] + _0x8e22x9, _0x8e22xd[_0xee2b[867]] - _0x8e22x6 + _0x8e22x9, _0x8e22x3);
    if (_0x8e22x4) {
      this[_0xee2b[2142]](_0x8e22xd[_0xee2b[686]] + _0x8e22x2, _0x8e22xd[_0xee2b[754]] - _0x8e22x8 + _0x8e22x2, _0x8e22x7);
    } else {
      this[_0xee2b[2142]](_0x8e22xd[_0xee2b[686]], _0x8e22xd[_0xee2b[754]], _0x8e22x7);
    }
  }
}, setXConstraint:function(_0x8e22x4, _0x8e22x6, _0x8e22x3) {
  this[_0xee2b[2143]] = _0x8e22x4;
  this[_0xee2b[2144]] = _0x8e22x6;
  this[_0xee2b[2145]] = _0x8e22x4;
  this[_0xee2b[2146]] = _0x8e22x6;
  if (_0x8e22x3) {
    this[_0xee2b[2147]](this[_0xee2b[2139]], _0x8e22x3);
  }
  this[_0xee2b[2148]] = true;
}, setYConstraint:function(_0x8e22x3, _0x8e22x4, _0x8e22x6) {
  this[_0xee2b[2149]] = _0x8e22x3;
  this[_0xee2b[2150]] = _0x8e22x4;
  this[_0xee2b[2151]] = _0x8e22x3;
  this[_0xee2b[2152]] = _0x8e22x4;
  if (_0x8e22x6) {
    this[_0xee2b[2153]](this[_0xee2b[2140]], _0x8e22x6);
  }
  this[_0xee2b[2154]] = true;
}, onDragEnter:Ext[_0xee2b[688]], onDragOut:Ext[_0xee2b[688]], setVisibilityForSourceEvents:function(_0x8e22x3) {
  Ext[_0xee2b[26]][_0xee2b[25]](this[_0xee2b[2156]][_0xee2b[2155]](), function(_0x8e22x6) {
    _0x8e22x6 && Ext[_0xee2b[761]](_0x8e22x6)[_0x8e22x3 ? _0xee2b[2019] : _0xee2b[256]]();
  });
}, onDragOver:function(_0x8e22x7) {
  if (_0x8e22x7 && _0x8e22x7[_0xee2b[1440]][_0xee2b[1972]] && _0x8e22x7[_0xee2b[1440]][_0xee2b[1972]][_0xee2b[4]] > 1) {
    Ext[_0xee2b[2121]][_0xee2b[2158]][_0xee2b[2157]](_0x8e22x7);
    return;
  }
  var _0x8e22xe = _0x8e22x7 ? _0x8e22x7[_0xee2b[1970]]() : this[_0xee2b[1976]];
  if (!_0x8e22xe) {
    return;
  }
  var _0x8e22x10 = this[_0xee2b[2156]];
  if (!_0x8e22x10[_0xee2b[2159]]) {
    this[_0xee2b[2160]](false);
    _0x8e22x10[_0xee2b[2159]] = true;
    if (this[_0xee2b[2161]]) {
      this[_0xee2b[2164]](_0x8e22x7[this[_0xee2b[2162]][_0xee2b[819]]() + _0xee2b[2163]]);
    }
  }
  var _0x8e22x4 = _0x8e22x10[_0xee2b[1138]];
  var _0x8e22x1 = _0x8e22x10[_0xee2b[2165]];
  var _0x8e22xa = this[_0xee2b[1817]];
  this[_0xee2b[2166]](_0x8e22x7);
  if (this[_0xee2b[2137]]) {
    var _0x8e22x8 = _0x8e22xa[_0xee2b[1828]]();
    var _0x8e22x6 = _0x8e22xa[_0xee2b[2167]](_0x8e22xe) - _0x8e22x10[_0xee2b[2168]];
    var _0x8e22xd = new Date(_0x8e22x10[_0xee2b[2169]] - 0 + _0x8e22x6);
    var _0x8e22x9 = _0x8e22xa[_0xee2b[810]][_0xee2b[772]](_0x8e22xd, _0x8e22x10[_0xee2b[1138]]);
    if (_0x8e22x10[_0xee2b[1138]] > _0x8e22xa[_0xee2b[1795]][_0xee2b[697]]()) {
      var _0x8e22x5 = this[_0xee2b[379]][_0xee2b[265]];
      if (_0x8e22x9) {
        if (_0x8e22xa[_0xee2b[1828]]()) {
          _0x8e22x5[_0xee2b[2171]](_0x8e22xe[0] + (_0x8e22xa[_0xee2b[2170]]() ? -_0x8e22x9 : _0x8e22x9));
        } else {
          _0x8e22x5[_0xee2b[2079]](_0x8e22xe[1] + _0x8e22x9);
        }
      }
    }
  }
  if (_0x8e22x10[_0xee2b[1138]] - _0x8e22x4 !== 0 || _0x8e22x1 !== _0x8e22x10[_0xee2b[2165]]) {
    _0x8e22xa[_0xee2b[180]](_0xee2b[2172], _0x8e22xa, _0x8e22x10[_0xee2b[2173]], _0x8e22x10[_0xee2b[1138]], _0x8e22x10[_0xee2b[2165]], _0x8e22x10);
  }
  if (this[_0xee2b[2127]]) {
    var _0x8e22x3 = _0x8e22x10[_0xee2b[2174]]();
    if (_0x8e22x3[_0xee2b[1611]] && _0x8e22x3[_0xee2b[1611]]() && !_0x8e22x10[_0xee2b[2175]]) {
      this[_0xee2b[2106]][_0xee2b[724]](_0x8e22x10[_0xee2b[2176]], Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[255]](_0x8e22x10[_0xee2b[2176]], Sch[_0xee2b[49]][_0xee2b[703]].HOUR, 1), _0x8e22x10[_0xee2b[2003]], _0x8e22x10[_0xee2b[940]], _0x8e22x10[_0xee2b[2175]]);
    } else {
      if (_0x8e22x10[_0xee2b[2175]]) {
        this[_0xee2b[2106]][_0xee2b[724]](Sch[_0xee2b[327]][_0xee2b[1423]][_0xee2b[1615]](_0x8e22x10[_0xee2b[1138]]), Sch[_0xee2b[327]][_0xee2b[1423]][_0xee2b[2177]](_0x8e22x10[_0xee2b[1138]], _0x8e22x10[_0xee2b[1139]]), _0x8e22x10[_0xee2b[2003]], _0x8e22x10[_0xee2b[940]], _0x8e22x10[_0xee2b[2175]]);
      } else {
        this[_0xee2b[2106]][_0xee2b[724]](_0x8e22x10[_0xee2b[1138]], _0x8e22x10[_0xee2b[1139]], _0x8e22x10[_0xee2b[2003]], _0x8e22x10[_0xee2b[940]], _0x8e22x10[_0xee2b[2175]]);
      }
    }
  }
  if (_0x8e22x7) {
    this[_0xee2b[1976]] = [_0x8e22x7[_0xee2b[790]][_0xee2b[788]] + document[_0xee2b[2179]][_0xee2b[2178]], _0x8e22x7[_0xee2b[1936]]()];
  }
}, getDragData:function(_0x8e22x11) {
  var _0x8e22x7 = this[_0xee2b[1817]], _0x8e22x15 = _0x8e22x11[_0xee2b[2033]](_0x8e22x7[_0xee2b[2034]]);
  this[_0xee2b[2180]] = false;
  if (!_0x8e22x15 || _0x8e22x11[_0xee2b[1440]][_0xee2b[1972]] && _0x8e22x11[_0xee2b[1440]][_0xee2b[1972]][_0xee2b[4]] > 1) {
    return;
  }
  var _0x8e22x8 = _0x8e22x7[_0xee2b[2181]](_0x8e22x15), _0x8e22xe = _0x8e22x7[_0xee2b[2036]](_0x8e22x15), _0x8e22x1 = _0x8e22x7[_0xee2b[2182]](_0x8e22x15), _0x8e22xc = _0x8e22x8 && _0x8e22x8[_0xee2b[2183]]() && !_0x8e22x7[_0xee2b[2184]]();
  if (!_0x8e22xc) {
    return null;
  }
  var _0x8e22x9 = _0x8e22x11[_0xee2b[1970]](), _0x8e22x18 = Ext[_0xee2b[761]](_0x8e22x15)[_0xee2b[1970]](), _0x8e22xa = [_0x8e22x9[0] - _0x8e22x18[0], _0x8e22x9[1] - _0x8e22x18[1]], _0x8e22x10 = Ext[_0xee2b[761]](_0x8e22x15)[_0xee2b[1945]]();
  this[_0xee2b[1976]] = null;
  var _0x8e22xd = _0x8e22x7[_0xee2b[1828]]();
  _0x8e22x7[_0xee2b[2130]] && !_0x8e22xe && Ext[_0xee2b[1182]][_0xee2b[3]](_0xee2b[2185] + _0x8e22x8[_0xee2b[32]]());
  var _0x8e22x19 = _0x8e22x7[_0xee2b[2060]](_0x8e22x7[_0xee2b[2130]] ? _0x8e22xe : null, _0x8e22x8);
  var _0x8e22xb;
  if (_0x8e22x7[_0xee2b[1847]]()) {
    _0x8e22xb = this[_0xee2b[265]][_0xee2b[1945]]();
    if (_0x8e22x8[_0xee2b[1611]]()) {
      _0x8e22xb = _0x8e22xb[_0xee2b[2186]](-10000, 10000, 10000, -10000);
    }
  } else {
    _0x8e22xb = this[_0xee2b[2187]] ? this[_0xee2b[2187]]() : _0x8e22x7[_0xee2b[2058]](_0x8e22x7[_0xee2b[2130]] ? _0x8e22xe : null, _0x8e22x8);
  }
  this[_0xee2b[2189]](_0x8e22xb, _0x8e22x10, _0x8e22xa[0], _0x8e22xa[1], _0x8e22xd, _0x8e22x8[_0xee2b[1611]] && _0x8e22x8[_0xee2b[1611]]() ? 1 : _0x8e22x7[_0xee2b[2188]](), Boolean(_0x8e22x19));
  var _0x8e22x3 = _0x8e22x8[_0xee2b[55]](_0x8e22x8[_0xee2b[1201]]), _0x8e22xf = _0x8e22x8[_0xee2b[55]](_0x8e22x8[_0xee2b[1203]]), _0x8e22x6 = _0x8e22x7[_0xee2b[1795]], _0x8e22x5 = this[_0xee2b[2190]](_0x8e22x1 || _0x8e22x8) || [], _0x8e22x16 = _0x8e22x7[_0xee2b[2191]](_0x8e22x8, _0x8e22x7[_0xee2b[1847]]() ? null : _0x8e22xe, null, true);
  Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x5, function(_0x8e22x2) {
    if (_0x8e22x2 && _0x8e22x2[_0xee2b[2192]]) {
      _0x8e22x16 = _0x8e22x16[_0xee2b[318]](_0x8e22x7[_0xee2b[2191]](_0x8e22x2[_0xee2b[1052]](), _0x8e22x2[_0xee2b[1053]](), null, true));
    } else {
      _0x8e22x16 = _0x8e22x16[_0xee2b[318]](_0x8e22x7[_0xee2b[2191]](_0x8e22x2, null, null, true));
    }
  });
  _0x8e22x16 = Ext[_0xee2b[26]][_0xee2b[1376]](_0x8e22x16);
  var _0x8e22x4 = {offsets:_0x8e22xa, repairXY:_0x8e22x18, triggerEvent:_0x8e22x11, prevScroll:_0x8e22x7[_0xee2b[1966]](), dateConstraints:_0x8e22x19, eventBarEls:_0x8e22x16, getEventBarElements:function() {
    return _0x8e22x4[_0xee2b[2193]] = Ext[_0xee2b[26]][_0xee2b[41]](_0x8e22x4[_0xee2b[2193]], function(_0x8e22x2) {
      return _0x8e22x2 && document[_0xee2b[2194]](_0x8e22x2[_0xee2b[388]]);
    });
  }, draggedRecords:[_0x8e22x1 || _0x8e22x8][_0xee2b[318]](_0x8e22x5), getEventRecord:function() {
    var _0x8e22x2 = this[_0xee2b[2173]][0];
    if (_0x8e22x2 instanceof Sch[_0xee2b[327]][_0xee2b[1414]]) {
      _0x8e22x2 = _0x8e22x2[_0xee2b[1052]]();
    }
    return _0x8e22x2;
  }, resourceRecord:_0x8e22xe, sourceDate:_0x8e22x7[_0xee2b[2167]](_0x8e22x9), origStart:_0x8e22x3, origEnd:_0x8e22xf, startDate:_0x8e22x3, endDate:_0x8e22xf, timeDiff:0, startsOutsideView:_0x8e22x3 < _0x8e22x6[_0xee2b[697]](), endsOutsideView:_0x8e22xf > _0x8e22x6[_0xee2b[698]](), duration:_0x8e22xf - _0x8e22x3};
  this[_0xee2b[2195]] = this[_0xee2b[2161]] && _0x8e22x11[this[_0xee2b[2162]][_0xee2b[819]]() + _0xee2b[2163]];
  _0x8e22x4[_0xee2b[2196]] = this[_0xee2b[2197]](_0x8e22x15, _0x8e22x4);
  return _0x8e22x4;
}, onStartDrag:function() {
  var _0x8e22x6 = this[_0xee2b[1817]], _0x8e22x3 = this[_0xee2b[2156]];
  Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x3[_0xee2b[2155]](), function(_0x8e22x4) {
    Ext[_0xee2b[761]](_0x8e22x4)[_0xee2b[267]](_0xee2b[2198]);
  });
  _0x8e22x6[_0xee2b[180]](_0xee2b[2199], _0x8e22x6, _0x8e22x3[_0xee2b[2173]]);
  this[_0xee2b[2200]] = _0x8e22x6[_0xee2b[1941]]()[_0xee2b[149]]({scroll:this[_0xee2b[2201]], destroyable:true, scope:this});
  this[_0xee2b[2202]] = _0x8e22x6[_0xee2b[694]](_0xee2b[2203])[_0xee2b[1941]]()[_0xee2b[149]]({scroll:this[_0xee2b[2201]], destroyable:true, scope:this});
}, alignElWithMouse:function(_0x8e22x6, _0x8e22x2, _0x8e22x5) {
  this[_0xee2b[9]](arguments);
  if (Ext[_0xee2b[960]] && this[_0xee2b[1817]][_0xee2b[1855]] && this[_0xee2b[1817]][_0xee2b[694]](_0xee2b[1918])) {
    this[_0xee2b[2204]] = null;
    this[_0xee2b[9]](arguments);
  }
  var _0x8e22x4 = this[_0xee2b[2205]](_0x8e22x2, _0x8e22x5), _0x8e22x3 = _0x8e22x6[_0xee2b[758]] ? _0x8e22x6 : Ext[_0xee2b[761]](_0x8e22x6, _0xee2b[2206]);
  this[_0xee2b[2207]](_0x8e22x3, _0x8e22x4[_0xee2b[1893]] + this[_0xee2b[2204]][0], _0x8e22x4[_0xee2b[1894]] + this[_0xee2b[2204]][1]);
}, onViewScroll:function(_0x8e22x3) {
  this[_0xee2b[2160]](false);
  this[_0xee2b[2208]]();
}, isCopyKeyPressed:function() {
  return this[_0xee2b[2161]] && this[_0xee2b[2195]];
}, onShiftKeyStateChange:function(_0x8e22x6) {
  var _0x8e22x3 = this[_0xee2b[2156]];
  if (_0x8e22x6) {
    _0x8e22x3[_0xee2b[2210]][_0xee2b[264]](_0xee2b[2209]);
  } else {
    _0x8e22x3[_0xee2b[2210]][_0xee2b[267]](_0xee2b[2209]);
  }
  this[_0xee2b[2160]](_0x8e22x6);
  this[_0xee2b[2195]] = _0x8e22x6;
}, onKey:function(_0x8e22x3) {
  if (this[_0xee2b[2161]] && _0x8e22x3[_0xee2b[2211]]() === _0x8e22x3[this[_0xee2b[2162]]]) {
    this[_0xee2b[2164]](_0x8e22x3[_0xee2b[249]] === _0xee2b[2212]);
  }
  if (_0x8e22x3[_0xee2b[2211]]() === _0x8e22x3[_0xee2b[2213]]) {
    this[_0xee2b[2214]](_0x8e22x3);
  }
}, abortDrag:function(_0x8e22x3) {
  this[_0xee2b[2156]][_0xee2b[2215]] = [_0x8e22x3[_0xee2b[2033]](), _0x8e22x3, this[_0xee2b[388]]];
  this[_0xee2b[2082]](false);
  Ext[_0xee2b[2121]][_0xee2b[2158]][_0xee2b[2216]](_0x8e22x3);
  Ext[_0xee2b[2121]][_0xee2b[2158]][_0xee2b[2217]](_0x8e22x3);
}, startDrag:function() {
  var _0x8e22x4 = this[_0xee2b[1817]], _0x8e22x6 = this[_0xee2b[2156]];
  if (_0x8e22x4[_0xee2b[180]](_0xee2b[2218], _0x8e22x4, _0x8e22x6[_0xee2b[2173]][0], _0x8e22x6[_0xee2b[2219]]) === false) {
    this[_0xee2b[2214]](_0x8e22x6[_0xee2b[2219]]);
    return;
  }
  var _0x8e22x3 = this[_0xee2b[9]](arguments);
  this[_0xee2b[2180]] = true;
  this[_0xee2b[2220]] = Ext[_0xee2b[2222]]()[_0xee2b[149]]({keydown:this[_0xee2b[2221]], keyup:this[_0xee2b[2221]], useCapture:true, destroyable:true, scope:this});
  _0x8e22x6[_0xee2b[2223]] = this[_0xee2b[379]][_0xee2b[265]][_0xee2b[861]](_0xee2b[495] + this[_0xee2b[2224]]);
  _0x8e22x6[_0xee2b[2210]] = this[_0xee2b[379]][_0xee2b[265]][_0xee2b[760]](_0xee2b[2225]);
  _0x8e22x6[_0xee2b[2223]][_0xee2b[267]](_0xee2b[2198]);
  if (this[_0xee2b[2127]]) {
    this[_0xee2b[2106]][_0xee2b[2051]](_0xee2b[2072]);
    this[_0xee2b[2106]][_0xee2b[724]](_0x8e22x6[_0xee2b[2169]], _0x8e22x6[_0xee2b[2226]], true);
    this[_0xee2b[2106]][_0xee2b[2071]](_0x8e22x6[_0xee2b[2223]], _0x8e22x6[_0xee2b[2227]][0]);
  }
  if (this[_0xee2b[2195]]) {
    _0x8e22x6[_0xee2b[2210]][_0xee2b[264]](_0xee2b[2209]);
    _0x8e22x6[_0xee2b[2159]] = true;
  }
  return _0x8e22x3;
}, endDrag:function() {
  this[_0xee2b[2134]]();
  this[_0xee2b[9]](arguments);
}, cleanupListeners:function() {
  if (this[_0xee2b[2200]]) {
    this[_0xee2b[2200]][_0xee2b[218]]();
    this[_0xee2b[2200]] = null;
  }
  if (this[_0xee2b[2202]]) {
    this[_0xee2b[2202]][_0xee2b[218]]();
    this[_0xee2b[2202]] = null;
  }
  if (this[_0xee2b[2220]]) {
    this[_0xee2b[2220]][_0xee2b[218]]();
    this[_0xee2b[2220]] = null;
  }
}, onMouseUp:function() {
  if (!this[_0xee2b[2063]]) {
    this[_0xee2b[2228]]();
  }
}, afterDragFinalized:function() {
  this[_0xee2b[379]][_0xee2b[265]][_0xee2b[758]][_0xee2b[763]][_0xee2b[686]] = this[_0xee2b[379]][_0xee2b[265]][_0xee2b[758]][_0xee2b[763]][_0xee2b[1354]] = 0;
}, updateRecords:function(_0x8e22x5) {
  var _0x8e22x10 = this, _0x8e22xe = _0x8e22x10[_0xee2b[1817]], _0x8e22x1 = _0x8e22xe[_0xee2b[696]](), _0x8e22xb = _0x8e22xe[_0xee2b[1007]](), _0x8e22x8 = _0x8e22x1[_0xee2b[1051]](), _0x8e22x9 = _0x8e22x5[_0xee2b[2165]], _0x8e22xa = _0x8e22x5[_0xee2b[2173]][0], _0x8e22x4 = _0x8e22x5[_0xee2b[2173]][_0xee2b[191]](1), _0x8e22xd = _0x8e22x5[_0xee2b[2055]], _0x8e22xc = _0x8e22x10[_0xee2b[2229]](), _0x8e22x2 = _0x8e22x5[_0xee2b[1138]], _0x8e22x6 = _0x8e22x5[_0xee2b[2230]], _0x8e22xf = _0x8e22x5[_0xee2b[2176]], 
  _0x8e22x3 = _0x8e22x5[_0xee2b[2231]], _0x8e22x11 = _0x8e22xe[_0xee2b[1847]](), _0x8e22x7;
  if (_0x8e22x8 && _0x8e22x1 instanceof Sch[_0xee2b[22]][_0xee2b[2232]]) {
    _0x8e22x10[_0xee2b[2233]](_0x8e22x2, _0x8e22x6, _0x8e22xa, _0x8e22x4, _0x8e22xd, _0x8e22x9, _0x8e22x1, _0x8e22xb, _0x8e22x8, _0x8e22xc, _0x8e22x11, _0x8e22x3, _0x8e22xf);
  } else {
    if (_0x8e22x8) {
      _0x8e22x7 = _0x8e22x10[_0xee2b[2234]](_0x8e22x2, _0x8e22x6, _0x8e22xa[_0xee2b[1052]](), Ext[_0xee2b[26]][_0xee2b[41]](_0x8e22x4, function(_0x8e22x18) {
        return _0x8e22x18[_0xee2b[1052]]();
      }), _0x8e22xd, _0x8e22x9, _0x8e22x1, _0x8e22xb, _0x8e22xc, _0x8e22x11, _0x8e22x3, _0x8e22xf);
    } else {
      _0x8e22x7 = _0x8e22x10[_0xee2b[2234]](_0x8e22x2, _0x8e22x6, _0x8e22xa, _0x8e22x4, _0x8e22xd, _0x8e22x9, _0x8e22x1, _0x8e22xb, _0x8e22xc, _0x8e22x11, _0x8e22x3, _0x8e22xf);
    }
  }
  if (_0x8e22xc) {
    _0x8e22x5[_0xee2b[2235]] = _0x8e22x7;
  }
  _0x8e22xe[_0xee2b[180]](_0xee2b[2236], _0x8e22xe, _0x8e22x5[_0xee2b[2235]] || _0x8e22x5[_0xee2b[2173]], _0x8e22xc);
}, updateRecordsSingleAssignmentMode:function(_0x8e22x5, _0x8e22x4, _0x8e22xb, _0x8e22x10, _0x8e22x2, _0x8e22xe, _0x8e22x1, _0x8e22xf, _0x8e22x6, _0x8e22xc, _0x8e22x3, _0x8e22xa) {
  var _0x8e22xd = this, _0x8e22x11 = [], _0x8e22x8 = _0x8e22xb[_0xee2b[1611]] && _0x8e22xb[_0xee2b[1611]](), _0x8e22x7 = Sch[_0xee2b[49]][_0xee2b[703]], _0x8e22x9;
  if (_0x8e22x6) {
    _0x8e22xb = _0x8e22xb[_0xee2b[2237]](null);
    _0x8e22x11[_0xee2b[11]](_0x8e22xb);
  }
  _0x8e22xb[_0xee2b[46]]();
  if (_0x8e22x2 && _0x8e22x2[_0xee2b[1606]] && _0x8e22xe && _0x8e22xe[_0xee2b[1606]] && _0x8e22xe !== _0x8e22x2) {
    if (_0x8e22x6) {
      _0x8e22xb[_0xee2b[1605]](_0x8e22xe);
    } else {
      _0x8e22xb[_0xee2b[2238]](_0x8e22x2, _0x8e22xe);
    }
  }
  _0x8e22xb[_0xee2b[2239]] && _0x8e22xb[_0xee2b[2239]](_0x8e22xd[_0xee2b[2156]][_0xee2b[2175]]);
  if (_0x8e22xb[_0xee2b[1611]] && _0x8e22xb[_0xee2b[1611]]()) {
    _0x8e22x9 = _0x8e22x7[_0xee2b[1521]](_0x8e22x7[_0xee2b[1101]](_0x8e22x5, true), _0x8e22xd[_0xee2b[2156]][_0xee2b[2169]]);
    _0x8e22xb[_0xee2b[1208]](_0x8e22x9, _0x8e22x7[_0xee2b[255]](_0x8e22x9, _0x8e22x7.MILLI, _0x8e22xd[_0xee2b[2156]][_0xee2b[2240]]), _0x8e22x1[_0xee2b[2241]]);
  } else {
    if (_0x8e22x8) {
      _0x8e22xb[_0xee2b[1208]](_0x8e22xa, _0x8e22x7[_0xee2b[255]](_0x8e22xa, _0x8e22x7.HOUR, 1), _0x8e22x1[_0xee2b[2241]]);
    } else {
      _0x8e22xb[_0xee2b[1204]](_0x8e22x5, true, _0x8e22x1[_0xee2b[2241]]);
    }
  }
  _0x8e22xb[_0xee2b[51]]();
  Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x10, function(_0x8e22x15) {
    var _0x8e22x18 = _0x8e22xc ? null : _0x8e22x15[_0xee2b[1427]]();
    if (_0x8e22x6) {
      _0x8e22x15 = _0x8e22x15[_0xee2b[2237]](null);
      _0x8e22x11[_0xee2b[11]](_0x8e22x15);
    }
    _0x8e22x15[_0xee2b[46]]();
    _0x8e22x15[_0xee2b[1204]](_0x8e22xd[_0xee2b[2242]](_0x8e22x15[_0xee2b[712]](), _0x8e22x4), true, _0x8e22x1[_0xee2b[2241]]);
    if (!_0x8e22xc) {
      var _0x8e22x19 = _0x8e22xf[_0xee2b[147]](_0x8e22x2) - _0x8e22xf[_0xee2b[147]](_0x8e22xe);
      _0x8e22x19 !== 0 && _0x8e22x18[_0xee2b[4]] && Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x18, function(_0x8e22x12) {
        var _0x8e22x14 = _0x8e22xf[_0xee2b[147]](_0x8e22x12) - _0x8e22x19, _0x8e22x16;
        if (_0x8e22x14 < 0) {
          _0x8e22x14 = 0;
        } else {
          if (_0x8e22x14 >= _0x8e22xf[_0xee2b[1466]]()) {
            _0x8e22x14 = _0x8e22xf[_0xee2b[1466]]() - 1;
          }
        }
        _0x8e22x16 = _0x8e22xf[_0xee2b[1752]](_0x8e22x14);
        _0x8e22x15[_0xee2b[2238]](_0x8e22x12, _0x8e22x16);
      });
    }
    _0x8e22x15[_0xee2b[51]]();
  });
  if (_0x8e22x11[_0xee2b[4]]) {
    _0x8e22x1[_0xee2b[384]](_0x8e22x11);
  }
  return _0x8e22x11;
}, updateRecordsMultipleAssignmentMode:function(_0x8e22x5, _0x8e22x4, _0x8e22xa, _0x8e22xc, _0x8e22x2, _0x8e22xd, _0x8e22x1, _0x8e22xe, _0x8e22x7, _0x8e22x6, _0x8e22xf, _0x8e22x3, _0x8e22x9) {
  var _0x8e22x8 = this;
  var _0x8e22x10 = {};
  Ext[_0xee2b[26]][_0xee2b[25]]([][_0xee2b[318]](_0x8e22xa, _0x8e22xc), function(_0x8e22x11) {
    var _0x8e22xb = _0x8e22x11[_0xee2b[1052]]();
    if (_0x8e22x10[_0x8e22xb[_0xee2b[32]]()]) {
      return;
    }
    _0x8e22x10[_0x8e22xb[_0xee2b[32]]()] = true;
    _0x8e22xb[_0xee2b[1204]](_0x8e22x8[_0xee2b[2242]](_0x8e22xb[_0xee2b[712]](), _0x8e22x4), true, _0x8e22x1[_0xee2b[2241]]);
    if (!_0x8e22xf && _0x8e22x2 !== _0x8e22xd) {
      if (_0x8e22x6) {
        _0x8e22xb[_0xee2b[1605]](_0x8e22xd);
      } else {
        if (!_0x8e22xb[_0xee2b[2243]](_0x8e22xd)) {
          _0x8e22xb[_0xee2b[2238]](_0x8e22x11[_0xee2b[1053]](), _0x8e22xd);
        } else {
          _0x8e22xb[_0xee2b[2244]](_0x8e22x11[_0xee2b[1053]]());
        }
      }
    }
  });
}, isValidDrop:function(_0x8e22x3, _0x8e22x6, _0x8e22x4) {
  if (_0x8e22x3 !== _0x8e22x6) {
    if (_0x8e22x4[_0xee2b[2192]]) {
      return !_0x8e22x4[_0xee2b[1052]]()[_0xee2b[2243]](_0x8e22x6);
    } else {
      return !_0x8e22x4[_0xee2b[2243]](_0x8e22x6);
    }
  }
  return true;
}, resolveResource:function(_0x8e22x2) {
  var _0x8e22x4 = this[_0xee2b[379]][_0xee2b[265]][_0xee2b[758]];
  var _0x8e22x1 = Ext[_0xee2b[797]]()[_0xee2b[1966]]();
  var _0x8e22x3 = this[_0xee2b[1817]];
  _0x8e22x4[_0xee2b[763]][_0xee2b[762]] = _0xee2b[764];
  var _0x8e22x5 = document[_0xee2b[2245]](_0x8e22x2[0] - _0x8e22x1[_0xee2b[1354]], _0x8e22x2[1] - _0x8e22x1[_0xee2b[686]]);
  _0x8e22x4[_0xee2b[763]][_0xee2b[762]] = _0xee2b[2246];
  if (!_0x8e22x5) {
    return null;
  }
  if (Ext[_0xee2b[761]](_0x8e22x5)[_0xee2b[694]](_0xee2b[495] + Ext[_0xee2b[238]] + _0xee2b[2247], 4, true)) {
    return null;
  }
  if (_0x8e22x5[_0xee2b[1868]][_0xee2b[2249]](Ext[_0xee2b[238]] + _0xee2b[2248])) {
    return this[_0xee2b[2036]]([_0x8e22x2[0], _0x8e22x2[1] + 3]);
  }
  if (!_0x8e22x5[_0xee2b[1868]][_0xee2b[2249]](_0x8e22x3[_0xee2b[2052]])) {
    var _0x8e22x6 = Ext[_0xee2b[761]](_0x8e22x5)[_0xee2b[694]](_0xee2b[495] + _0x8e22x3[_0xee2b[2052]]);
    if (_0x8e22x6) {
      _0x8e22x5 = _0x8e22x6[_0xee2b[758]];
    } else {
      return null;
    }
  }
  return _0x8e22x3[_0xee2b[2036]](_0x8e22x5);
}, adjustStartDate:function(_0x8e22x3, _0x8e22x5, _0x8e22x4) {
  var _0x8e22x6 = _0x8e22x4 || this[_0xee2b[1817]];
  return _0x8e22x6[_0xee2b[1795]][_0xee2b[2251]](new Date(_0x8e22x3 - 0 + _0x8e22x5), _0x8e22x6[_0xee2b[2250]] ? _0x8e22x3 : false);
}, resolveSchedulerView:function(_0x8e22x6) {
  var _0x8e22x3 = _0x8e22x6[_0xee2b[2033]](_0xee2b[2252]);
  return _0x8e22x3 && Ext[_0xee2b[800]](_0x8e22x3[_0xee2b[388]]) || this[_0xee2b[1817]];
}, updateDragContext:function(_0x8e22x7) {
  var _0x8e22x8 = this[_0xee2b[2156]], _0x8e22x10 = _0x8e22x7 ? _0x8e22x7[_0xee2b[1970]]() : this[_0xee2b[1976]], _0x8e22x3, _0x8e22x6;
  if (_0x8e22x7) {
    if (_0x8e22x7[_0xee2b[790]][_0xee2b[1972]] && _0x8e22x7[_0xee2b[790]][_0xee2b[1972]][_0xee2b[4]] > 0) {
      _0x8e22x3 = _0x8e22x7[_0xee2b[790]][_0xee2b[1972]][0][_0xee2b[788]];
    } else {
      _0x8e22x3 = _0x8e22x7[_0xee2b[790]][_0xee2b[788]] != null ? _0x8e22x7[_0xee2b[790]][_0xee2b[788]] : _0x8e22x7[_0xee2b[788]];
    }
    _0x8e22x6 = [_0x8e22x3 + document[_0xee2b[2179]][_0xee2b[2178]], _0x8e22x7[_0xee2b[1936]]()];
  } else {
    _0x8e22x6 = this[_0xee2b[1976]];
  }
  if (!_0x8e22x8[_0xee2b[2223]]) {
    return;
  }
  var _0x8e22xa = _0x8e22x7 && this[_0xee2b[1817]][_0xee2b[1847]]() && this[_0xee2b[2253]](_0x8e22x7) || this[_0xee2b[1817]], _0x8e22x5 = _0x8e22x8[_0xee2b[2223]][_0xee2b[1945]](), _0x8e22x9 = _0x8e22xa[_0xee2b[2167]](_0x8e22x10);
  _0x8e22x8[_0xee2b[2254]] = _0x8e22x9;
  _0x8e22x8[_0xee2b[2176]] = this[_0xee2b[2242]](_0x8e22xa[_0xee2b[2167]]([_0x8e22x10[0] - _0x8e22x8[_0xee2b[2227]][0], _0x8e22x10[1]]), 0, _0x8e22xa);
  _0x8e22x8[_0xee2b[2231]] = this[_0xee2b[2242]](_0x8e22xa[_0xee2b[2167]]([_0x8e22x10[0], _0x8e22x10[1] - _0x8e22x8[_0xee2b[2227]][1]]), 0, _0x8e22xa);
  _0x8e22x8[_0xee2b[2175]] = Boolean(_0x8e22xa[_0xee2b[2004]]);
  if (_0x8e22xa[_0xee2b[1795]][_0xee2b[1738]]()) {
    if (_0x8e22xa[_0xee2b[1828]]() && this[_0xee2b[2145]] < _0x8e22x10[0] && _0x8e22x10[0] < this[_0xee2b[2146]] || !_0x8e22xa[_0xee2b[1828]]() && this[_0xee2b[2151]] < _0x8e22x10[1] && _0x8e22x10[1] < this[_0xee2b[2152]]) {
      _0x8e22x8[_0xee2b[2230]] = _0x8e22x9 - _0x8e22x8[_0xee2b[2168]];
      _0x8e22x8[_0xee2b[1138]] = this[_0xee2b[2242]](_0x8e22x8[_0xee2b[2169]], _0x8e22x8[_0xee2b[2230]]);
      _0x8e22x8[_0xee2b[1139]] = new Date(_0x8e22x8[_0xee2b[1138]] - 0 + _0x8e22x8[_0xee2b[2240]]);
    }
  } else {
    var _0x8e22x1;
    if (_0x8e22xa[_0xee2b[1847]]()) {
      var _0x8e22x4 = {bottom:_0x8e22x5[_0xee2b[754]], top:_0x8e22x5[_0xee2b[686]]};
      _0x8e22x4[_0xee2b[1354]] = _0x8e22x4[_0xee2b[867]] = _0x8e22x5[_0xee2b[1354]] + _0x8e22x8[_0xee2b[2227]][0];
      _0x8e22x1 = this[_0xee2b[2255]](_0x8e22xa, _0x8e22x4);
    } else {
      _0x8e22x1 = this[_0xee2b[2255]](_0x8e22xa, _0x8e22x5);
    }
    _0x8e22x8[_0xee2b[1138]] = _0x8e22x1[_0xee2b[1138]];
    _0x8e22x8[_0xee2b[1139]] = _0x8e22x1[_0xee2b[1139]];
    _0x8e22x8[_0xee2b[2230]] = _0x8e22x8[_0xee2b[1138]] - _0x8e22x8[_0xee2b[2169]];
  }
  _0x8e22x8[_0xee2b[2165]] = _0x8e22xa[_0xee2b[2130]] ? _0x8e22x8[_0xee2b[2055]] : this[_0xee2b[2036]](_0x8e22x6);
  if (_0x8e22x8[_0xee2b[2165]]) {
    var _0x8e22xd = !_0x8e22x7 || this[_0xee2b[2078]][_0xee2b[293]](this[_0xee2b[2077]] || this, _0x8e22x8[_0xee2b[2173]], _0x8e22x8[_0xee2b[2165]], _0x8e22x8[_0xee2b[1138]], _0x8e22x8[_0xee2b[2240]], _0x8e22x7);
    if (!_0x8e22xd || typeof _0x8e22xd === _0xee2b[1108]) {
      _0x8e22x8[_0xee2b[2003]] = _0x8e22xd !== false;
      _0x8e22x8[_0xee2b[940]] = _0xee2b[27];
    } else {
      _0x8e22x8[_0xee2b[2003]] = _0x8e22xd[_0xee2b[2003]] !== false;
      _0x8e22x8[_0xee2b[940]] = _0x8e22xd[_0xee2b[940]];
    }
  } else {
    _0x8e22x8[_0xee2b[2003]] = false;
  }
}, getRelatedRecords:function(_0x8e22x4) {
  var _0x8e22x6 = this[_0xee2b[1817]], _0x8e22x5 = _0x8e22x6[_0xee2b[2256]](), _0x8e22x3 = _0x8e22x5[_0xee2b[2257]]();
  return Ext[_0xee2b[26]][_0xee2b[173]](_0x8e22x3, function(_0x8e22x2) {
    return _0x8e22x4 !== _0x8e22x2;
  });
}, getDragElement:function(_0x8e22x8, _0x8e22x1) {
  var _0x8e22x4 = _0x8e22x1[_0xee2b[2155]]();
  var _0x8e22x3;
  var _0x8e22x6;
  var _0x8e22x9 = _0x8e22x1[_0xee2b[2227]][0];
  var _0x8e22x2 = _0x8e22x1[_0xee2b[2227]][1];
  var _0x8e22x5 = _0x8e22x8[_0xee2b[758]] || _0x8e22x8;
  var _0x8e22x7 = this[_0xee2b[1817]][_0xee2b[1855]] ? _0xee2b[867] : _0xee2b[1354];
  if (_0x8e22x4[_0xee2b[4]] > 1) {
    var _0x8e22xa = Ext[_0xee2b[2262]][_0xee2b[2261]][_0xee2b[2260]]({tag:_0xee2b[2258], cls:_0xee2b[2259], style:{overflow:_0xee2b[1690]}});
    Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x4, function(_0x8e22x10) {
      _0x8e22x3 = _0x8e22x10[_0xee2b[2263]](true);
      _0x8e22x3[_0xee2b[388]] = Ext[_0xee2b[388]]();
      if (_0x8e22x10 === _0x8e22x5) {
        _0x8e22x3[_0xee2b[1868]] += _0xee2b[60] + this[_0xee2b[2224]];
      }
      _0x8e22xa[_0xee2b[83]](_0x8e22x3);
      var _0x8e22xd = Ext[_0xee2b[761]](_0x8e22x10)[_0xee2b[2264]](_0x8e22x5);
      _0x8e22x3[_0xee2b[763]][_0x8e22x7] = _0x8e22xd[0] - _0x8e22x9 + _0xee2b[804];
      _0x8e22x3[_0xee2b[763]][_0xee2b[686]] = _0x8e22xd[1] - _0x8e22x2 + _0xee2b[804];
    }, this);
    _0x8e22x6 = _0x8e22xa;
  } else {
    _0x8e22x3 = _0x8e22x5[_0xee2b[2263]](true);
    _0x8e22x3[_0xee2b[388]] = Ext[_0xee2b[388]]();
    _0x8e22x3[_0xee2b[763]][_0x8e22x7] = -_0x8e22x9 + _0xee2b[804];
    _0x8e22x3[_0xee2b[763]][_0xee2b[686]] = -_0x8e22x2 + _0xee2b[804];
    _0x8e22x3[_0xee2b[1868]] += _0xee2b[60] + this[_0xee2b[2224]];
    _0x8e22x6 = _0x8e22x3;
  }
  if (!_0x8e22x5[_0xee2b[763]][_0xee2b[747]]) {
    Ext[_0xee2b[761]](_0x8e22x6)[_0xee2b[863]](Ext[_0xee2b[761]](_0x8e22x5)[_0xee2b[859]]());
  }
  return _0x8e22x6;
}, onDragDrop:function(_0x8e22x1, _0x8e22x6) {
  var _0x8e22x7 = this;
  _0x8e22x7[_0xee2b[2166]](_0x8e22x1);
  var _0x8e22xe = _0x8e22x7[_0xee2b[1817]], _0x8e22x9 = _0x8e22x7[_0xee2b[2265]] || Ext[_0xee2b[2121]][_0xee2b[2267]][_0xee2b[2266]](_0x8e22x6), _0x8e22x5 = _0x8e22x7[_0xee2b[2156]], _0x8e22x4 = _0x8e22x5[_0xee2b[1138]] && _0x8e22x5[_0xee2b[1139]], _0x8e22xa = true;
  if (_0x8e22x7[_0xee2b[2106]]) {
    _0x8e22x7[_0xee2b[2106]][_0xee2b[256]]();
  }
  var _0x8e22xd = _0x8e22x5[_0xee2b[1138]] - _0x8e22x5[_0xee2b[2169]] !== 0 || _0x8e22x5[_0xee2b[2165]] !== _0x8e22x5[_0xee2b[2055]];
  var _0x8e22x3 = (_0x8e22xd || _0x8e22x7[_0xee2b[2229]]()) && _0x8e22x5[_0xee2b[2003]] && _0x8e22x4 && _0x8e22x7[_0xee2b[2268]](_0x8e22x5[_0xee2b[2055]], _0x8e22x5[_0xee2b[2165]], _0x8e22x5[_0xee2b[2173]][0]);
  Ext[_0xee2b[8]](_0x8e22x5, {ddCallbackArgs:[_0x8e22x9, _0x8e22x1, _0x8e22x6], start:_0x8e22x5[_0xee2b[1138]], end:_0x8e22x5[_0xee2b[1139]], finalize:function() {
    _0x8e22x7[_0xee2b[2082]][_0xee2b[8]](_0x8e22x7, arguments);
  }});
  _0x8e22x7[_0xee2b[379]][_0xee2b[265]][_0xee2b[264]](_0xee2b[2269]);
  var _0x8e22x10 = function() {
    _0x8e22x7[_0xee2b[2082]](true);
  };
  var _0x8e22x8 = function() {
    _0x8e22x7[_0xee2b[2082]](false);
  };
  if (_0x8e22x3) {
    if (_0x8e22xe[_0xee2b[180]](_0xee2b[2270], _0x8e22x7[_0xee2b[1817]], _0x8e22x5, _0x8e22x1, _0x8e22x10, _0x8e22x8) !== false) {
      _0x8e22x10();
    }
  } else {
    _0x8e22x8();
  }
}, finalize:function(_0x8e22x4) {
  var _0x8e22x1 = this, _0x8e22x6 = _0x8e22x1[_0xee2b[1817]], _0x8e22x5 = _0x8e22x6[_0xee2b[696]]();
  _0x8e22x1[_0xee2b[379]][_0xee2b[265]][_0xee2b[267]](_0xee2b[2269]);
  if (_0x8e22x4) {
    var _0x8e22x3, _0x8e22x2 = function() {
      _0x8e22x3 = true;
    };
    _0x8e22x5[_0xee2b[149]](_0xee2b[724], _0x8e22x2, null, {single:true});
    _0x8e22x1[_0xee2b[2271]](_0x8e22x1[_0xee2b[2156]]);
    _0x8e22x5[_0xee2b[152]](_0xee2b[724], _0x8e22x2, null, {single:true});
    if (!_0x8e22x3) {
      _0x8e22x1[_0xee2b[2272]][_0xee2b[8]](_0x8e22x1, _0x8e22x1[_0xee2b[2156]][_0xee2b[2215]]);
    } else {
      _0x8e22x1[_0xee2b[2273]][_0xee2b[8]](_0x8e22x1, _0x8e22x1[_0xee2b[2156]][_0xee2b[2215]]);
      _0x8e22x6[_0xee2b[180]](_0xee2b[2274], _0x8e22x6, _0x8e22x1[_0xee2b[2156]][_0xee2b[2235]] || _0x8e22x1[_0xee2b[2156]][_0xee2b[2173]]);
    }
    _0x8e22x1[_0xee2b[2228]]();
  } else {
    _0x8e22x1[_0xee2b[2272]][_0xee2b[8]](_0x8e22x1, _0x8e22x1[_0xee2b[2156]][_0xee2b[2215]]);
  }
}, onInvalidDrop:function(_0x8e22x4, _0x8e22x6, _0x8e22x1) {
  if (!_0x8e22x6) {
    _0x8e22x6 = _0x8e22x4;
    _0x8e22x4 = _0x8e22x6[_0xee2b[2033]]() || document[_0xee2b[2179]];
  }
  if (this[_0xee2b[2106]]) {
    this[_0xee2b[2106]][_0xee2b[256]]();
  }
  this[_0xee2b[2160]](true);
  var _0x8e22x5 = this[_0xee2b[1817]], _0x8e22x3 = this[_0xee2b[9]]([_0x8e22x4, _0x8e22x6, _0x8e22x1]);
  if (this[_0xee2b[2180]]) {
    _0x8e22x5[_0xee2b[180]](_0xee2b[2274], _0x8e22x5, this[_0xee2b[2156]][_0xee2b[2235]] || this[_0xee2b[2156]][_0xee2b[2173]]);
  }
  this[_0xee2b[2228]]();
  return _0x8e22x3;
}, resolveStartEndDates:function(_0x8e22x1, _0x8e22x7) {
  var _0x8e22x3 = this[_0xee2b[2156]], _0x8e22x5, _0x8e22x9 = _0x8e22x3[_0xee2b[2169]], _0x8e22x6 = _0x8e22x3[_0xee2b[2226]], _0x8e22x2 = Sch[_0xee2b[49]][_0xee2b[703]];
  if (!_0x8e22x3[_0xee2b[2275]]) {
    _0x8e22x5 = _0x8e22x1[_0xee2b[2075]](_0x8e22x7, _0xee2b[704]);
    if (_0x8e22x5[_0xee2b[179]]) {
      if (!_0x8e22x1[_0xee2b[1795]][_0xee2b[1763]](_0x8e22x5[_0xee2b[179]], false)) {
        var _0x8e22x4 = _0x8e22x1[_0xee2b[1795]][_0xee2b[1764]](_0x8e22x5[_0xee2b[179]]);
        if (_0x8e22x4) {
          _0x8e22x5[_0xee2b[179]] = _0x8e22x1[_0xee2b[1795]][_0xee2b[2276]](_0x8e22x4);
        }
      }
      _0x8e22x9 = _0x8e22x5[_0xee2b[179]] || _0x8e22x3[_0xee2b[1138]];
      _0x8e22x6 = _0x8e22x2[_0xee2b[255]](_0x8e22x9, _0x8e22x2.MILLI, _0x8e22x3[_0xee2b[2240]]);
    }
  } else {
    if (!_0x8e22x3[_0xee2b[2277]]) {
      _0x8e22x5 = _0x8e22x1[_0xee2b[2075]](_0x8e22x7, _0xee2b[704]);
      if (_0x8e22x5) {
        _0x8e22x6 = _0x8e22x5[_0xee2b[771]] || _0x8e22x3[_0xee2b[1139]];
        _0x8e22x9 = _0x8e22x2[_0xee2b[255]](_0x8e22x6, _0x8e22x2.MILLI, -_0x8e22x3[_0xee2b[2240]]);
      }
    }
  }
  return {startDate:_0x8e22x9, endDate:_0x8e22x6};
}});
Ext[_0xee2b[6]](_0xee2b[2278], {requires:[_0xee2b[717], _0xee2b[2110]], validatorFn:function(_0x8e22x6, _0x8e22x3, _0x8e22x4, _0x8e22x1, _0x8e22x5) {
  return true;
}, validatorFnScope:null, dragConfig:null, constructor:function(_0x8e22x6, _0x8e22x3) {
  Ext[_0xee2b[8]](this, _0x8e22x3);
  this[_0xee2b[1817]] = _0x8e22x6;
  _0x8e22x6[_0xee2b[2279]] = new Sch[_0xee2b[822]].SchedulerDragZone(_0x8e22x3[_0xee2b[2280]], Ext[_0xee2b[8]]({ddGroup:_0x8e22x6[_0xee2b[388]], schedulerView:_0x8e22x6, validatorFn:this[_0xee2b[2078]], validatorFnScope:this[_0xee2b[2077]]}, this[_0xee2b[2281]]));
  this[_0xee2b[1817]][_0xee2b[149]](_0xee2b[218], this[_0xee2b[2282]], this);
  this[_0xee2b[9]]([_0x8e22x3]);
}, cleanUp:function() {
  var _0x8e22x3 = this[_0xee2b[1817]];
  if (_0x8e22x3[_0xee2b[2279]]) {
    _0x8e22x3[_0xee2b[2279]][_0xee2b[218]]();
  }
}});
Ext[_0xee2b[6]](_0xee2b[2283], {extend:_0xee2b[957], maxVersion:_0xee2b[2284], target:_0xee2b[2285], overrides:{injectGroupingMenu:function() {
  var _0x8e22x3 = this, _0x8e22x6 = _0x8e22x3[_0xee2b[829]][_0xee2b[1848]];
  _0x8e22x6[_0xee2b[2286]] = Ext[_0xee2b[283]][_0xee2b[2287]](_0x8e22x6[_0xee2b[2286]], _0x8e22x3[_0xee2b[2286]]);
  _0x8e22x6[_0xee2b[2288]] = _0x8e22x3[_0xee2b[2288]]();
}, showMenuBy:function(_0x8e22x7, _0x8e22xa, _0x8e22x4) {
  var _0x8e22x2 = this, _0x8e22x3 = _0x8e22x2[_0xee2b[2289]](), _0x8e22x1 = _0x8e22x3[_0xee2b[861]](_0xee2b[2290]), _0x8e22x5 = _0x8e22x4[_0xee2b[2291]] === false || !_0x8e22x4[_0xee2b[2292]] || _0x8e22x2[_0xee2b[829]][_0xee2b[1848]][_0xee2b[2293]]()[_0xee2b[4]] < 2 ? _0xee2b[2061] : _0xee2b[2064], _0x8e22x6 = _0x8e22x3[_0xee2b[861]](_0xee2b[2294]), _0x8e22x9 = _0x8e22x2[_0xee2b[840]][_0xee2b[341]]()[_0xee2b[2295]]();
  _0x8e22x1[_0x8e22x5]();
  if (_0x8e22x6) {
    _0x8e22x6[_0xee2b[2296]](_0x8e22x9, true);
    _0x8e22x6[_0x8e22x9 ? _0xee2b[2064] : _0xee2b[2061]]();
  }
}}});
Ext[_0xee2b[6]](_0xee2b[2297], {extend:_0xee2b[2285], requires:[_0xee2b[2283]], alias:_0xee2b[2298], headerRenderer:Ext[_0xee2b[688]], eventStoreDetacher:null, assignmentStoreDetacher:null, resourceStoreDetacher:null, schedulerGroupHeaderTpl:_0xee2b[2299], headerCellTpl:_0xee2b[2300], renderCells:function(_0x8e22x5) {
  var _0x8e22x6 = this[_0xee2b[829]][_0xee2b[1858]]();
  var _0x8e22x4 = _0x8e22x6[_0xee2b[870]][_0x8e22x6[_0xee2b[1906]]];
  var _0x8e22x3 = Ext[_0xee2b[26]][_0xee2b[41]](_0x8e22x4, function(_0x8e22x2) {
    var _0x8e22x9 = {};
    var _0x8e22x1 = this[_0xee2b[2301]](_0x8e22x2[_0xee2b[179]], _0x8e22x2[_0xee2b[771]], _0x8e22x5[_0xee2b[375]], _0x8e22x9);
    _0x8e22x9[_0xee2b[2302]] = _0x8e22x1 === null || _0x8e22x1 === undefined ? _0xee2b[2303] : _0x8e22x1;
    _0x8e22x9[_0xee2b[773]] = _0x8e22x6[_0xee2b[772]](_0x8e22x2[_0xee2b[179]], _0x8e22x2[_0xee2b[771]]);
    return _0x8e22x9;
  }, this);
  return this[_0xee2b[2304]][_0xee2b[8]](_0x8e22x3);
}, disable:function() {
  this[_0xee2b[331]]();
  this[_0xee2b[9]](arguments);
}, enable:function() {
  this[_0xee2b[316]]();
  this[_0xee2b[9]](arguments);
}, init:function() {
  var _0x8e22x3 = this[_0xee2b[829]];
  var _0x8e22x6 = this;
  this[_0xee2b[9]](arguments);
  if (typeof this[_0xee2b[2304]] === _0xee2b[308]) {
    this[_0xee2b[2304]] = new Ext.XTemplate(this[_0xee2b[2304]]);
  }
  if (_0x8e22x3[_0xee2b[1007]]) {
    this[_0xee2b[316]]();
    this[_0xee2b[2305]] = new Ext.XTemplate(this[_0xee2b[2306]], {renderCells:Ext[_0xee2b[283]][_0xee2b[282]](_0x8e22x6[_0xee2b[2307]], _0x8e22x6)});
    _0x8e22x3[_0xee2b[149]]({resourcestorechange:this[_0xee2b[316]], eventstorechange:this[_0xee2b[316]], assignmentstorechange:this[_0xee2b[316]], scope:this});
  }
  Ext[_0xee2b[8]](_0x8e22x3, {getRowNode:function(_0x8e22x4) {
    return this[_0xee2b[2309]](this[_0xee2b[2308]](_0x8e22x4), true);
  }});
  _0x8e22x3[_0xee2b[2310]] = this;
}, bindStoreListeners:function() {
  var _0x8e22x3 = this[_0xee2b[829]];
  if (!_0x8e22x3[_0xee2b[2311]]) {
    var _0x8e22x6 = _0x8e22x3[_0xee2b[696]]();
    var _0x8e22x4 = this[_0xee2b[2312]]();
    this[_0xee2b[331]]();
    if (_0x8e22x6) {
      this[_0xee2b[1000]] = _0x8e22x3[_0xee2b[252]](_0x8e22x6, _0x8e22x4[_0xee2b[1071]]);
    }
    if (_0x8e22x6 && _0x8e22x6[_0xee2b[1051]]()) {
      this[_0xee2b[1001]] = _0x8e22x3[_0xee2b[252]](_0x8e22x6[_0xee2b[1051]](), _0x8e22x4[_0xee2b[1003]]);
    }
    if (_0x8e22x3[_0xee2b[1007]]()) {
      this[_0xee2b[1010]] = _0x8e22x3[_0xee2b[252]](_0x8e22x3[_0xee2b[1007]](), _0x8e22x4[_0xee2b[1302]]);
    }
  }
}, unbindStoreListeners:function() {
  if (!this[_0xee2b[829]][_0xee2b[2311]]) {
    Ext[_0xee2b[1004]](this, _0xee2b[1000], _0xee2b[1010], _0xee2b[1001]);
  }
}, getStoreListeners:function() {
  var _0x8e22x3 = this[_0xee2b[829]], _0x8e22x6 = {resourceStore:{add:this[_0xee2b[2313]], destroyable:true, scope:this}};
  if (_0x8e22x3[_0xee2b[696]]) {
    _0x8e22x6[_0xee2b[1071]] = {add:this[_0xee2b[2314]], remove:this[_0xee2b[2314]], update:this[_0xee2b[2315]], destroyable:true, scope:this};
    if (_0x8e22x3[_0xee2b[696]]()[_0xee2b[1051]]()) {
      _0x8e22x6[_0xee2b[1003]] = {add:this[_0xee2b[2316]], update:this[_0xee2b[2317]], remove:this[_0xee2b[2316]], destroyable:true, scope:this};
    }
  }
  return _0x8e22x6;
}, refreshGrouping:function(_0x8e22x6) {
  if (!this[_0xee2b[829]][_0xee2b[341]]()[_0xee2b[2295]]()) {
    return;
  }
  var _0x8e22x4 = this;
  var _0x8e22x3 = {};
  Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x6, function(_0x8e22x1) {
    if (_0x8e22x1) {
      var _0x8e22x5 = _0x8e22x4[_0xee2b[2318]](_0x8e22x1);
      if (_0x8e22x5) {
        var _0x8e22x9 = _0x8e22x5[_0xee2b[572]]();
        var _0x8e22x2 = _0x8e22x9[_0xee2b[32]]();
        if (!_0x8e22x3[_0x8e22x2]) {
          _0x8e22x3[_0x8e22x2] = _0x8e22x9;
          _0x8e22x4[_0xee2b[2319]](_0x8e22x9, true);
        }
      }
    }
  });
}, onAssignmentAddOrRemove:function(_0x8e22x6, _0x8e22x3) {
  if (!this[_0xee2b[829]][_0xee2b[341]]()[_0xee2b[2295]]()) {
    return;
  }
  var _0x8e22x4 = this[_0xee2b[829]][_0xee2b[1007]]();
  this[_0xee2b[2320]](Ext[_0xee2b[26]][_0xee2b[41]](_0x8e22x3, function(_0x8e22x5) {
    return _0x8e22x5[_0xee2b[1053]](_0x8e22x4);
  }));
}, onAssignmentUpdate:function(_0x8e22x3, _0x8e22x5) {
  if (!this[_0xee2b[829]][_0xee2b[341]]()[_0xee2b[2295]]()) {
    return;
  }
  var _0x8e22x6 = this[_0xee2b[829]][_0xee2b[1007]]();
  var _0x8e22x4 = [_0x8e22x5[_0xee2b[1053]](_0x8e22x6)];
  if (_0x8e22x5[_0xee2b[52]] && _0x8e22x5[_0xee2b[52]][_0x8e22x5[_0xee2b[1009]]]) {
    _0x8e22x4[_0xee2b[11]](_0x8e22x6[_0xee2b[395]](_0x8e22x5[_0xee2b[52]][_0x8e22x5[_0xee2b[1009]]]));
  }
  this[_0xee2b[2320]](_0x8e22x4);
}, onEventUpdate:function(_0x8e22x1, _0x8e22x5) {
  if (!this[_0xee2b[829]][_0xee2b[341]]()[_0xee2b[2295]]()) {
    return;
  }
  var _0x8e22x9 = this;
  var _0x8e22x7 = _0x8e22x1[_0xee2b[1051]]();
  if (_0x8e22x7) {
    _0x8e22x9[_0xee2b[2320]](_0x8e22x5[_0xee2b[1427]]());
  } else {
    var _0x8e22x4 = _0x8e22x1[_0xee2b[1007]]()[_0xee2b[2321]]();
    var _0x8e22x3 = _0x8e22x5[_0xee2b[52]] && _0x8e22x5[_0xee2b[1009]] in _0x8e22x5[_0xee2b[52]];
    var _0x8e22x2 = _0x8e22x5[_0xee2b[1053]]();
    if (_0x8e22x3) {
      var _0x8e22x6 = _0x8e22x1[_0xee2b[1007]]()[_0xee2b[395]](_0x8e22x5[_0xee2b[52]][_0x8e22x5[_0xee2b[1009]]]);
      if (_0x8e22x6 && (!_0x8e22x2 || _0x8e22x6[_0xee2b[55]](_0x8e22x4) !== _0x8e22x2[_0xee2b[55]](_0x8e22x4))) {
        _0x8e22x9[_0xee2b[2319]](_0x8e22x6);
      }
    }
    if (_0x8e22x2) {
      _0x8e22x9[_0xee2b[2319]](_0x8e22x2);
    }
  }
}, onEventAddOrRemove:function(_0x8e22x4, _0x8e22x6) {
  if (!this[_0xee2b[829]][_0xee2b[341]]()[_0xee2b[2295]]() || _0x8e22x4[_0xee2b[2322]]) {
    return;
  }
  var _0x8e22x1 = this;
  var _0x8e22x3 = _0x8e22x1[_0xee2b[829]];
  var _0x8e22x5 = _0x8e22x3[_0xee2b[696]]();
  var _0x8e22x2 = Ext[_0xee2b[26]][_0xee2b[41]](_0x8e22x6, function(_0x8e22x9) {
    return _0x8e22x5[_0xee2b[1093]](_0x8e22x9);
  });
  _0x8e22x2 = [][_0xee2b[318]][_0xee2b[8]]([], _0x8e22x2);
  this[_0xee2b[2320]](Ext[_0xee2b[26]][_0xee2b[1376]](_0x8e22x2));
}, onResourceAdd:function(_0x8e22x6, _0x8e22x3) {
  if (!this[_0xee2b[829]][_0xee2b[341]]()[_0xee2b[2295]]()) {
    return;
  }
  this[_0xee2b[2320]](_0x8e22x3);
}, refreshGroupHeader:function(_0x8e22x5, _0x8e22x4) {
  var _0x8e22x6 = this, _0x8e22x3 = _0x8e22x6[_0xee2b[829]];
  if (_0x8e22x6[_0xee2b[144]] || !_0x8e22x6[_0xee2b[829]][_0xee2b[1007]]()[_0xee2b[2295]]()) {
    return;
  }
  _0x8e22x3[_0xee2b[2323]](_0x8e22x4 ? _0x8e22x5 : _0x8e22x6[_0xee2b[2318]](_0x8e22x5)[_0xee2b[572]]());
}});
Ext[_0xee2b[6]](_0xee2b[2324], {extend:_0xee2b[2325], alias:_0xee2b[2326], mixins:[_0xee2b[665]], dialogCls:_0xee2b[2327], show:function(_0x8e22x3) {
  var _0x8e22x4 = this;
  if (!_0x8e22x3 || !_0x8e22x3[_0xee2b[2328]] || !_0x8e22x3[_0xee2b[2329]]) {
    throw new Error(_0xee2b[2330]);
  }
  _0x8e22x3[_0xee2b[489]] = _0x8e22x4[_0xee2b[2331]] + (_0x8e22x3[_0xee2b[489]] ? _0xee2b[60] + _0x8e22x3[_0xee2b[489]] : _0xee2b[27]);
  var _0x8e22x6 = _0x8e22x3[_0xee2b[2329]][_0xee2b[1547]]();
  _0x8e22x3 = Ext[_0xee2b[8]]({title:_0x8e22x4.L(_0x8e22x3[_0xee2b[2328]] + _0xee2b[2332]), msg:_0x8e22x4.L(_0x8e22x3[_0xee2b[2328]] + (_0x8e22x6 ? _0xee2b[2333] : _0xee2b[2334])), icon:Ext[_0xee2b[2336]][_0xee2b[2335]], scope:_0x8e22x4, fn:_0x8e22x4[_0xee2b[2337]], buttonText:_0x8e22x3[_0xee2b[2338]] || _0x8e22x4[_0xee2b[2339]](_0x8e22x3)}, _0x8e22x3);
  return _0x8e22x4[_0xee2b[9]]([_0x8e22x3]);
}, getButtonText:function(_0x8e22x6) {
  var _0x8e22x5 = this, _0x8e22x4 = _0x8e22x6[_0xee2b[2329]][_0xee2b[1547]]();
  var _0x8e22x3 = {yes:_0x8e22x5.L(_0x8e22x6[_0xee2b[2328]] + (_0x8e22x4 ? _0xee2b[2340] : _0xee2b[2341])), no:_0x8e22x5.L(_0x8e22x6[_0xee2b[2328]] + _0xee2b[2342]), cancel:_0x8e22x5.L(_0xee2b[557])};
  if (_0x8e22x4) {
    _0x8e22x3[_0xee2b[2343]] = _0x8e22x5.L(_0xee2b[556]);
    delete _0x8e22x3[_0xee2b[2344]];
  }
  return _0x8e22x3;
}, getButtonHandler:function(_0x8e22x6, _0x8e22x5, _0x8e22x3) {
  var _0x8e22x4;
  switch(_0x8e22x6) {
    case _0xee2b[2343]:
      _0x8e22x4 = _0x8e22x3[_0xee2b[2345]] || this[_0xee2b[2345]];
      break;
    case _0xee2b[2344]:
      _0x8e22x4 = _0x8e22x3[_0xee2b[2346]] || this[_0xee2b[2346]];
      break;
    case _0xee2b[1499]:
      _0x8e22x4 = _0x8e22x3[_0xee2b[2347]] || this[_0xee2b[2347]];
      break;
  }
  return _0x8e22x4;
}, dispatchHandler:function(_0x8e22x4, _0x8e22x9, _0x8e22x6) {
  _0x8e22x6 = _0x8e22x6 || {};
  var _0x8e22x1 = this, _0x8e22x2 = _0x8e22x1[_0xee2b[2348]](_0x8e22x4, _0x8e22x9, _0x8e22x6), _0x8e22x5 = _0x8e22x6[_0xee2b[2349]] || _0x8e22x1, _0x8e22x3 = _0x8e22x6[_0xee2b[2350]] || Ext[_0xee2b[688]];
  _0x8e22x2[_0xee2b[293]](_0x8e22x5, _0x8e22x6[_0xee2b[2329]], _0x8e22x6[_0xee2b[2351]], _0x8e22x6[_0xee2b[2328]], _0x8e22x3, _0x8e22x6[_0xee2b[2352]] || _0x8e22x1);
}, multipleHandler:function(_0x8e22x6, _0x8e22x5, _0x8e22x9, _0x8e22x4, _0x8e22x1) {
  var _0x8e22x2 = _0x8e22x6[_0xee2b[1580]](), _0x8e22x3 = new Date(_0x8e22x6[_0xee2b[712]]() - 1);
  _0x8e22x4[_0xee2b[293]](_0x8e22x1);
  _0x8e22x6[_0xee2b[1581]](null);
  _0x8e22x2 && _0x8e22x2[_0xee2b[1546]]()[_0xee2b[1202]](_0x8e22x3);
}, singleHandler:function(_0x8e22x3, _0x8e22x4, _0x8e22x9, _0x8e22x6, _0x8e22x1) {
  var _0x8e22x2 = _0x8e22x3[_0xee2b[1580]](), _0x8e22x5 = _0x8e22x3[_0xee2b[712]]();
  _0x8e22x6[_0xee2b[293]](_0x8e22x1);
  _0x8e22x3[_0xee2b[46]]();
  _0x8e22x3[_0xee2b[1581]](null);
  _0x8e22x3[_0xee2b[2353]](null);
  _0x8e22x3[_0xee2b[51]]();
  _0x8e22x2[_0xee2b[2354]](_0x8e22x5);
}, cancelHandler:Ext[_0xee2b[688]]});
Ext[_0xee2b[6]](_0xee2b[2355], {extend:_0xee2b[2324], singleton:true});
Ext[_0xee2b[6]](_0xee2b[2356], {alias:_0xee2b[2357], requires:[_0xee2b[2355]], mixins:[_0xee2b[108]], panelCls:_0xee2b[2358], eventStoreDetacher:null, timeAxisDetacher:null, panelDetacher:null, viewDetacher:null, panel:null, eventStore:null, timeAxis:null, trackingSuspended:0, constructor:function(_0x8e22x3) {
  _0x8e22x3 = _0x8e22x3 || {};
  this[_0xee2b[295]][_0xee2b[294]][_0xee2b[217]][_0xee2b[293]](this);
  if (_0x8e22x3[_0xee2b[1818]]) {
    this[_0xee2b[1809]](_0x8e22x3[_0xee2b[1818]]);
  }
}, init:function(_0x8e22x3) {
  this[_0xee2b[2359]](_0x8e22x3);
}, setPanel:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  _0x8e22x6[_0xee2b[1818]] = _0x8e22x3;
  _0x8e22x6[_0xee2b[2360]](_0x8e22x3);
  _0x8e22x6[_0xee2b[1407]](_0x8e22x3 && _0x8e22x3[_0xee2b[696]]());
}, startTracking:function() {
  var _0x8e22x6 = this, _0x8e22x3 = _0x8e22x6[_0xee2b[1818]];
  if (_0x8e22x3) {
    _0x8e22x6[_0xee2b[2361]](_0x8e22x6[_0xee2b[290]](_0x8e22x3));
    _0x8e22x6[_0xee2b[2362]](_0x8e22x3[_0xee2b[695]] && _0x8e22x3[_0xee2b[695]]());
    _0x8e22x6[_0xee2b[2363]]();
    _0x8e22x3[_0xee2b[264]](_0x8e22x6[_0xee2b[2364]]);
  } else {
    _0x8e22x6[_0xee2b[2365]]();
  }
}, stopTracking:function() {
  var _0x8e22x6 = this, _0x8e22x3 = _0x8e22x6[_0xee2b[1818]];
  _0x8e22x6[_0xee2b[2361]]();
  _0x8e22x6[_0xee2b[2362]]();
  _0x8e22x3 && _0x8e22x3[_0xee2b[267]](_0x8e22x6[_0xee2b[2364]]);
}, getPanel:function() {
  return this[_0xee2b[1818]];
}, getView:function(_0x8e22x3) {
  _0x8e22x3 = _0x8e22x3 || this[_0xee2b[1818]];
  return _0x8e22x3 && _0x8e22x3[_0xee2b[808]]();
}, setView:function(_0x8e22x3) {
  if (_0x8e22x3) {
    if (_0x8e22x3[_0xee2b[2366]]) {
      this[_0xee2b[2367]](_0x8e22x3);
    } else {
      this[_0xee2b[252]](_0x8e22x3, {viewready:this[_0xee2b[1822]], single:true, scope:this});
    }
  } else {
    this[_0xee2b[2367]]();
  }
}, bindPanel:function(_0x8e22x3) {
  this[_0xee2b[2368]] && this[_0xee2b[2368]][_0xee2b[218]]();
  if (_0x8e22x3) {
    this[_0xee2b[252]](_0x8e22x3, {eventstorechange:this[_0xee2b[2369]], destroy:this[_0xee2b[2370]], scope:this});
  }
}, onPanelDestroy:function() {
  this[_0xee2b[2359]]();
}, onViewReady:function(_0x8e22x3) {
  this[_0xee2b[2367]](_0x8e22x3);
}, bindView:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  _0x8e22x6[_0xee2b[2371]] && _0x8e22x6[_0xee2b[2371]][_0xee2b[218]]();
  if (_0x8e22x3) {
    _0x8e22x6[_0xee2b[2371]] = _0x8e22x6[_0xee2b[252]](_0x8e22x3, {beforeeventdropfinalize:_0x8e22x6[_0xee2b[2372]], beforeeventresizefinalize:_0x8e22x6[_0xee2b[2373]], destroyable:true, scope:_0x8e22x6, priority:-100});
  }
}, setEventStore:function(_0x8e22x6) {
  var _0x8e22x4 = this, _0x8e22x3 = _0x8e22x6 && _0x8e22x6[_0xee2b[2374]];
  _0x8e22x6 = _0x8e22x3 ? _0x8e22x6 : null;
  _0x8e22x4[_0xee2b[1071]] = _0x8e22x6;
  _0x8e22x4[_0xee2b[2375]](_0x8e22x6);
  _0x8e22x4[_0x8e22x3 ? _0xee2b[2376] : _0xee2b[2365]]();
}, getEventStore:function() {
  return this[_0xee2b[1071]];
}, bindEventStore:function(_0x8e22x3) {
  this[_0xee2b[1000]] && this[_0xee2b[1000]][_0xee2b[218]]();
  if (_0x8e22x3) {
    this[_0xee2b[1000]] = this[_0xee2b[252]](_0x8e22x3, {load:this[_0xee2b[2377]], add:this[_0xee2b[2378]], update:this[_0xee2b[2315]], remove:this[_0xee2b[1077]], 'generate-occurrences-start':this[_0xee2b[2379]], 'generate-occurrences-end':this[_0xee2b[2380]], 'delayed-regenerate-occurrences-start':this[_0xee2b[2381]], 'delayed-regenerate-occurrences-end':this[_0xee2b[1539]], scope:this, destroyable:true});
  }
}, setTimeAxis:function(_0x8e22x3) {
  this[_0xee2b[1795]] = _0x8e22x3;
  this[_0xee2b[2382]](_0x8e22x3);
}, getTimeAxis:function() {
  return this[_0xee2b[1795]];
}, getStartDate:function() {
  return this[_0xee2b[695]]() && this[_0xee2b[695]]()[_0xee2b[697]]();
}, getEndDate:function() {
  return this[_0xee2b[695]]() && this[_0xee2b[695]]()[_0xee2b[698]]();
}, bindTimeAxis:function(_0x8e22x3) {
  this[_0xee2b[2383]] && this[_0xee2b[2383]][_0xee2b[218]]();
  if (_0x8e22x3) {
    this[_0xee2b[2383]] = this[_0xee2b[252]](_0x8e22x3, {reconfigure:this[_0xee2b[2384]], scope:this, destroyable:true});
  }
}, onDelayedRegenerateOccurrencesStart:function() {
  var _0x8e22x3 = this[_0xee2b[290]]();
  if (_0x8e22x3 && _0x8e22x3[_0xee2b[2131]]() == _0xee2b[1931]) {
    this[_0xee2b[2385]] = _0x8e22x3[_0xee2b[1931]][_0xee2b[2386]];
    _0x8e22x3[_0xee2b[1931]][_0xee2b[2386]] = false;
  }
}, onDelayedRegenerateOccurrencesEnd:function() {
  var _0x8e22x3 = this[_0xee2b[290]]();
  if (_0x8e22x3 && _0x8e22x3[_0xee2b[2131]]() == _0xee2b[1931]) {
    _0x8e22x3[_0xee2b[1931]][_0xee2b[2386]] = this[_0xee2b[2385]];
  }
}, onGenerateOccurrencesStart:function(_0x8e22x4, _0x8e22x6, _0x8e22x3, _0x8e22x5) {
  this[_0xee2b[2387]]();
}, onGenerateOccurrencesEnd:function(_0x8e22x4, _0x8e22x6, _0x8e22x2, _0x8e22x3, _0x8e22x5) {
  this[_0xee2b[2388]]();
}, refreshOccurrences:function() {
  var _0x8e22x6 = this[_0xee2b[696]](), _0x8e22x3 = this[_0xee2b[712]](), _0x8e22x4 = this[_0xee2b[713]]();
  if (_0x8e22x6 && _0x8e22x3 && _0x8e22x4) {
    _0x8e22x6[_0xee2b[2389]](_0x8e22x6[_0xee2b[1565]](), _0x8e22x3, _0x8e22x4);
  }
}, onPanelEventStoreChange:function(_0x8e22x3, _0x8e22x6) {
  this[_0xee2b[1407]](_0x8e22x6);
}, onTimeAxisReconfigure:function() {
  if (!this[_0xee2b[2390]]()) {
    this[_0xee2b[2363]]();
  }
}, onEventsLoaded:function(_0x8e22x6, _0x8e22x3, _0x8e22x4) {
  if (_0x8e22x4 && !this[_0xee2b[2390]]()) {
    _0x8e22x3 = Ext[_0xee2b[26]][_0xee2b[173]](_0x8e22x3, function(_0x8e22x5) {
      return _0x8e22x5[_0xee2b[1547]]();
    });
    if (_0x8e22x3[_0xee2b[4]]) {
      _0x8e22x6[_0xee2b[2389]](_0x8e22x3, this[_0xee2b[712]](), this[_0xee2b[713]]());
    }
  }
}, onEventAdd:function(_0x8e22x6, _0x8e22x3) {
  if (!this[_0xee2b[2390]]()) {
    _0x8e22x3 = Ext[_0xee2b[26]][_0xee2b[173]](_0x8e22x3, function(_0x8e22x4) {
      return _0x8e22x4[_0xee2b[1547]]();
    });
    if (_0x8e22x3[_0xee2b[4]]) {
      _0x8e22x6[_0xee2b[2389]](_0x8e22x3, this[_0xee2b[712]](), this[_0xee2b[713]]());
    }
  }
}, onEventUpdate:function(_0x8e22x5, _0x8e22x9, _0x8e22x4, _0x8e22x1) {
  if (_0x8e22x4 == _0xee2b[171] && !this[_0xee2b[2390]]() && this[_0xee2b[2391]](_0x8e22x9, _0x8e22x1)) {
    var _0x8e22x6 = this[_0xee2b[712]](), _0x8e22x7 = this[_0xee2b[713]](), _0x8e22x2 = _0x8e22x9[_0xee2b[712]](), _0x8e22x3 = _0x8e22x9[_0xee2b[1546]]();
    if (!_0x8e22x3) {
      _0x8e22x5[_0xee2b[1589]](_0x8e22x9);
    } else {
      if (_0x8e22x6 && _0x8e22x7 && _0x8e22x2 && (!_0x8e22x3[_0xee2b[713]]() || _0x8e22x3[_0xee2b[713]]() >= _0x8e22x6 && _0x8e22x2 <= _0x8e22x7)) {
        _0x8e22x5[_0xee2b[2392]](_0x8e22x9, _0x8e22x6, _0x8e22x7);
      }
    }
  }
}, onEventRemove:function(_0x8e22x6, _0x8e22x3) {
  if (!this[_0xee2b[2390]]()) {
    _0x8e22x3 = Ext[_0xee2b[26]][_0xee2b[173]](_0x8e22x3, function(_0x8e22x4) {
      return _0x8e22x4[_0xee2b[1547]]();
    });
    if (_0x8e22x3[_0xee2b[4]]) {
      _0x8e22x6[_0xee2b[1589]](_0x8e22x3);
    }
  }
}, isRecurrenceRelatedFieldChange:function(_0x8e22x6, _0x8e22x3) {
  return _0x8e22x6[_0xee2b[1547]]() || Ext[_0xee2b[26]][_0xee2b[1087]](_0x8e22x3, _0x8e22x6[_0xee2b[1586]]);
}, isTrackingSuspended:function() {
  return this[_0xee2b[2393]];
}, suspendTracking:function() {
  this[_0xee2b[2393]]++;
}, resumeTracking:function() {
  this[_0xee2b[2393]]--;
}, onBeforeEventDropFinalize:function(_0x8e22x9, _0x8e22x6, _0x8e22x1, _0x8e22x3, _0x8e22x4) {
  var _0x8e22x5 = _0x8e22x6[_0xee2b[2173]][0];
  if (_0x8e22x5[_0xee2b[1568]] && (_0x8e22x5[_0xee2b[1547]]() || _0x8e22x5[_0xee2b[1571]]())) {
    Sch[_0xee2b[2395]][_0xee2b[2394]][_0xee2b[2019]]({actionType:_0xee2b[724], eventRecord:_0x8e22x5, changerFn:_0x8e22x3, cancelHandler:_0x8e22x4});
    return false;
  }
}, onBeforeEventResizeFinalize:function(_0x8e22x3, _0x8e22x4, _0x8e22x9, _0x8e22x6, _0x8e22x5) {
  var _0x8e22x1 = _0x8e22x4[_0xee2b[2329]];
  if (_0x8e22x1[_0xee2b[1568]] && (_0x8e22x1[_0xee2b[1547]]() || _0x8e22x1[_0xee2b[1571]]())) {
    Sch[_0xee2b[2395]][_0xee2b[2394]][_0xee2b[2019]]({actionType:_0xee2b[724], eventRecord:_0x8e22x1, changerFn:_0x8e22x6, cancelHandler:_0x8e22x5});
    return false;
  }
}});
Ext[_0xee2b[6]](_0xee2b[2396], {extend:_0xee2b[108], requires:[_0xee2b[2397], _0xee2b[1995], _0xee2b[1910]], showTooltip:true, showExactResizePosition:false, validatorFn:Ext[_0xee2b[688]], validatorFnScope:null, schedulerView:null, origEl:null, handlePos:null, eventRec:null, mouseDownEvent:null, tip:null, tipInstance:null, startScroll:null, constructor:function(_0x8e22x3) {
  Ext[_0xee2b[8]](this, _0x8e22x3);
  var _0x8e22x6 = this[_0xee2b[1817]];
  _0x8e22x6[_0xee2b[149]]({destroy:this[_0xee2b[2282]], scope:this});
  _0x8e22x6[_0xee2b[265]][_0xee2b[149]]({mousedown:this[_0xee2b[785]], mouseup:this[_0xee2b[802]], scope:this, delegate:_0xee2b[2398]});
  this[_0xee2b[2098]]();
  this[_0xee2b[9]](arguments);
}, bindRightClickPreventer:function() {
  this[_0xee2b[1817]][_0xee2b[265]][_0xee2b[149]](_0xee2b[744], this[_0xee2b[2133]], this, {priority:999});
}, preventRightClick:function(_0x8e22x3) {
  if (_0x8e22x3[_0xee2b[2104]] !== 0 && this[_0xee2b[2399]]) {
    _0x8e22x3[_0xee2b[2217]]();
    return false;
  }
}, onMouseDown:function(_0x8e22x1, _0x8e22x3) {
  var _0x8e22x6 = this[_0xee2b[1817]];
  var _0x8e22x5 = this[_0xee2b[2400]] = _0x8e22x6[_0xee2b[2181]](_0x8e22x3);
  var _0x8e22x4 = _0x8e22x5[_0xee2b[2401]]();
  if (_0x8e22x1[_0xee2b[2104]] !== 0 || (_0x8e22x4 === false || typeof _0x8e22x4 === _0xee2b[308] && !_0x8e22x3[_0xee2b[1868]][_0xee2b[2249]](_0x8e22x4))) {
    return;
  }
  this[_0xee2b[2400]] = _0x8e22x5;
  this[_0xee2b[2402]] = this[_0xee2b[2403]](_0x8e22x3);
  this[_0xee2b[2404]] = Ext[_0xee2b[55]](_0x8e22x1[_0xee2b[2033]](_0xee2b[2225]));
  this[_0xee2b[2405]] = _0x8e22x1;
  _0x8e22x6[_0xee2b[265]][_0xee2b[149]]({mousemove:this[_0xee2b[799]], scope:this, single:true});
}, onMouseUp:function(_0x8e22x4, _0x8e22x3) {
  var _0x8e22x6 = this[_0xee2b[1817]];
  _0x8e22x6[_0xee2b[265]][_0xee2b[152]]({mousemove:this[_0xee2b[799]], scope:this, single:true});
  this[_0xee2b[2405]] = null;
}, getTipInstance:function() {
  if (this[_0xee2b[2406]]) {
    return this[_0xee2b[2406]];
  }
  var _0x8e22x3 = this[_0xee2b[1817]];
  var _0x8e22x6 = this[_0xee2b[2106]];
  if (_0x8e22x6 instanceof Ext[_0xee2b[2106]][_0xee2b[2105]]) {
    _0x8e22x6[_0xee2b[1817]] = _0x8e22x3;
  } else {
    _0x8e22x6 = new Sch[_0xee2b[2000]].Tooltip(Ext[_0xee2b[8]]({rtl:this[_0xee2b[1855]], schedulerView:_0x8e22x3, constrainTo:_0x8e22x3[_0xee2b[694]](_0xee2b[840])[_0xee2b[265]], cls:_0xee2b[2407]}, _0x8e22x6));
  }
  return this[_0xee2b[2406]] = _0x8e22x6;
}, onMouseMove:function(_0x8e22x7, _0x8e22x3) {
  var _0x8e22x6 = this[_0xee2b[1817]], _0x8e22x9 = this[_0xee2b[2400]], _0x8e22x5 = this[_0xee2b[2402]];
  if (!_0x8e22x9 || _0x8e22x6[_0xee2b[180]](_0xee2b[2408], _0x8e22x6, _0x8e22x9, _0x8e22x7) === false) {
    return;
  }
  delete this[_0xee2b[2400]];
  _0x8e22x7[_0xee2b[2217]]();
  this[_0xee2b[2404]][_0xee2b[264]](_0xee2b[2409]);
  this[_0xee2b[2399]] = this[_0xee2b[2410]](this[_0xee2b[2404]], _0x8e22x9, _0x8e22x5);
  var _0x8e22x4 = this[_0xee2b[2399]][_0xee2b[2411]];
  _0x8e22x4[_0xee2b[785]](this[_0xee2b[2405]], this[_0xee2b[2399]][_0x8e22x5][_0xee2b[758]]);
  _0x8e22x4[_0xee2b[799]](_0x8e22x7, this[_0xee2b[2399]][_0x8e22x5][_0xee2b[758]]);
  if (this[_0xee2b[2127]]) {
    var _0x8e22x1 = this[_0xee2b[2412]]();
    _0x8e22x1[_0xee2b[724]](_0x8e22x9[_0xee2b[712]](), _0x8e22x9[_0xee2b[713]](), true);
    _0x8e22x1[_0xee2b[2071]](this[_0xee2b[2404]], _0x8e22x7[_0xee2b[809]]() - this[_0xee2b[2404]][_0xee2b[809]]());
  }
  _0x8e22x6[_0xee2b[180]](_0xee2b[2413], _0x8e22x6, _0x8e22x9);
  _0x8e22x6[_0xee2b[1941]]()[_0xee2b[149]](_0xee2b[1978], this[_0xee2b[2201]], this);
}, getHandlePosition:function(_0x8e22x6) {
  var _0x8e22x3 = _0x8e22x6[_0xee2b[1868]][_0xee2b[2249]](_0xee2b[179]);
  if (this[_0xee2b[1817]][_0xee2b[1828]]()) {
    if (this[_0xee2b[1817]][_0xee2b[1855]]) {
      return _0x8e22x3 ? _0xee2b[2414] : _0xee2b[2415];
    }
    return _0x8e22x3 ? _0xee2b[2415] : _0xee2b[2414];
  } else {
    return _0x8e22x3 ? _0xee2b[2416] : _0xee2b[2417];
  }
}, createResizer:function(_0x8e22x5, _0x8e22x7, _0x8e22x4) {
  var _0x8e22xc = this[_0xee2b[1817]], _0x8e22x9 = this, _0x8e22x1 = _0x8e22xc[_0xee2b[2036]](_0x8e22x5), _0x8e22xd = _0x8e22xc[_0xee2b[2188]](), _0x8e22xf = _0x8e22xc[_0xee2b[2058]](_0x8e22x1, _0x8e22x7), _0x8e22x6 = _0x8e22xc[_0xee2b[2060]](_0x8e22x1, _0x8e22x7), _0x8e22xe = _0x8e22x5[_0xee2b[859]](), _0x8e22x3 = _0x8e22xc[_0xee2b[1855]] && _0x8e22x4[0] === _0xee2b[2090] || !_0x8e22xc[_0xee2b[1855]] && _0x8e22x4[0] === _0xee2b[523] || _0x8e22x4[0] === _0xee2b[2418], _0x8e22xa = !_0x8e22xc[_0xee2b[1828]](), 
  _0x8e22x2 = {otherEdgeX:_0x8e22x3 ? _0x8e22x5[_0xee2b[2419]]() : _0x8e22x5[_0xee2b[806]](), otherEdgeY:_0x8e22x3 ? _0x8e22x5[_0xee2b[2420]]() : _0x8e22x5[_0xee2b[2421]](), target:_0x8e22x5, isStart:_0x8e22x3, dateConstraints:_0x8e22x6, resourceRecord:_0x8e22x1, eventRecord:_0x8e22x7, handles:_0x8e22x4[0], minHeight:_0x8e22xe, constrainTo:_0x8e22xf, listeners:{resizedrag:this[_0xee2b[2422]], resize:this[_0xee2b[2423]], scope:this}};
  if (_0x8e22xa) {
    if (_0x8e22xd > 0) {
      var _0x8e22x8 = _0x8e22x5[_0xee2b[793]]();
      Ext[_0xee2b[8]](_0x8e22x2, {minHeight:_0x8e22xd, minWidth:_0x8e22x8, maxWidth:_0x8e22x8, heightIncrement:_0x8e22xd});
    }
  } else {
    if (_0x8e22xd > 0) {
      Ext[_0xee2b[8]](_0x8e22x2, {minWidth:_0x8e22xd, maxHeight:_0x8e22xe, widthIncrement:_0x8e22xd});
    }
  }
  var _0x8e22x10 = new Ext[_0xee2b[2399]].Resizer(_0x8e22x2);
  if (_0x8e22x10[_0xee2b[2411]]) {
    _0x8e22x10[_0xee2b[2411]][_0xee2b[1980]] = -1;
  }
  _0x8e22x5[_0xee2b[2051]](_0xee2b[2424], parseInt(_0x8e22x5[_0xee2b[2425]](_0xee2b[2424]), 10) + 1);
  Sch[_0xee2b[49]][_0xee2b[2074]][_0xee2b[2073]](_0x8e22xc, _0x8e22xc[_0xee2b[1828]]() ? _0xee2b[1931] : _0xee2b[1932]);
  this[_0xee2b[1971]] = _0x8e22xc[_0xee2b[1966]]();
  return _0x8e22x10;
}, getStartEndDates:function() {
  var _0x8e22x2 = this[_0xee2b[2399]], _0x8e22x5 = _0x8e22x2[_0xee2b[265]], _0x8e22x9 = this[_0xee2b[1817]], _0x8e22x4 = _0x8e22x2[_0xee2b[2426]], _0x8e22x7, _0x8e22x6, _0x8e22x3, _0x8e22x1;
  if (_0x8e22x4) {
    if (_0x8e22x9[_0xee2b[1828]]()) {
      _0x8e22x3 = _0x8e22x9[_0xee2b[1855]] && _0x8e22x9[_0xee2b[2170]]() ? _0x8e22x5[_0xee2b[2419]]() : _0x8e22x5[_0xee2b[806]]() + 1;
      _0x8e22x1 = [_0x8e22x3, 0];
    } else {
      _0x8e22x1 = [(_0x8e22x5[_0xee2b[2419]]() + _0x8e22x5[_0xee2b[806]]()) / 2, _0x8e22x5[_0xee2b[2421]]()];
    }
    _0x8e22x6 = _0x8e22x2[_0xee2b[2329]][_0xee2b[713]]();
    if (_0x8e22x9[_0xee2b[2250]]) {
      _0x8e22x7 = _0x8e22x9[_0xee2b[2167]](_0x8e22x1);
      _0x8e22x7 = _0x8e22x9[_0xee2b[1795]][_0xee2b[2251]](_0x8e22x7, _0x8e22x2[_0xee2b[2329]][_0xee2b[712]]());
    } else {
      _0x8e22x7 = _0x8e22x9[_0xee2b[2167]](_0x8e22x1, _0xee2b[704]);
    }
  } else {
    if (_0x8e22x9[_0xee2b[1828]]()) {
      _0x8e22x3 = _0x8e22x9[_0xee2b[1855]] && _0x8e22x9[_0xee2b[2170]]() ? _0x8e22x5[_0xee2b[806]]() : _0x8e22x5[_0xee2b[2419]]();
      _0x8e22x1 = [_0x8e22x3, 0];
    } else {
      _0x8e22x1 = [(_0x8e22x5[_0xee2b[2419]]() + _0x8e22x5[_0xee2b[806]]()) / 2, _0x8e22x5[_0xee2b[2420]]()];
    }
    _0x8e22x7 = _0x8e22x2[_0xee2b[2329]][_0xee2b[712]]();
    if (_0x8e22x9[_0xee2b[2250]]) {
      _0x8e22x6 = _0x8e22x9[_0xee2b[2167]](_0x8e22x1);
      _0x8e22x6 = _0x8e22x9[_0xee2b[1795]][_0xee2b[2251]](_0x8e22x6, _0x8e22x2[_0xee2b[2329]][_0xee2b[713]]());
    } else {
      _0x8e22x6 = _0x8e22x9[_0xee2b[2167]](_0x8e22x1, _0xee2b[704]);
    }
  }
  _0x8e22x7 = _0x8e22x7 || _0x8e22x2[_0xee2b[179]];
  _0x8e22x6 = _0x8e22x6 || _0x8e22x2[_0xee2b[771]];
  if (_0x8e22x2[_0xee2b[2059]]) {
    _0x8e22x7 = Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[2076]](_0x8e22x7, _0x8e22x2[_0xee2b[2059]][_0xee2b[179]], _0x8e22x2[_0xee2b[2059]][_0xee2b[771]]);
    _0x8e22x6 = Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[2076]](_0x8e22x6, _0x8e22x2[_0xee2b[2059]][_0xee2b[179]], _0x8e22x2[_0xee2b[2059]][_0xee2b[771]]);
  }
  return {start:_0x8e22x7, end:_0x8e22x6};
}, partialResize:function(_0x8e22xf, _0x8e22x11, _0x8e22xc, _0x8e22x15) {
  var _0x8e22x10 = this[_0xee2b[1817]], _0x8e22x1 = _0x8e22x15 ? _0x8e22x15[_0xee2b[1970]]() : this[_0xee2b[2399]][_0xee2b[2411]][_0xee2b[1976]], _0x8e22xe = this[_0xee2b[2427]](_0x8e22x1), _0x8e22x5 = _0x8e22xe[_0xee2b[179]], _0x8e22x4 = _0x8e22xe[_0xee2b[771]], _0x8e22x6 = _0x8e22xf[_0xee2b[2329]], _0x8e22xa = _0x8e22x10[_0xee2b[1828]]();
  if (this[_0xee2b[2127]]) {
    var _0x8e22xb = this[_0xee2b[2078]][_0xee2b[293]](this[_0xee2b[2077]] || this, _0x8e22xf[_0xee2b[2055]], _0x8e22x6, _0x8e22x5, _0x8e22x4);
    var _0x8e22xd = _0xee2b[27];
    if (_0x8e22xb && typeof _0x8e22xb !== _0xee2b[1108]) {
      _0x8e22xd = _0x8e22xb[_0xee2b[940]];
      _0x8e22xb = _0x8e22xb[_0xee2b[2003]];
    }
    this[_0xee2b[2412]]()[_0xee2b[724]](_0x8e22x5, _0x8e22x4, _0x8e22xb !== false, _0x8e22xd);
  }
  if (this[_0xee2b[2428]]) {
    var _0x8e22x16 = _0x8e22xf[_0xee2b[969]][_0xee2b[265]], _0x8e22x7, _0x8e22x8, _0x8e22x9;
    if (_0x8e22xf[_0xee2b[2426]]) {
      if (_0x8e22x10[_0xee2b[1847]]()) {
        var _0x8e22x3 = _0x8e22x10[_0xee2b[2430]][_0xee2b[2429]](_0x8e22x6)[0];
        _0x8e22x7 = _0x8e22x10[_0xee2b[810]][_0xee2b[772]](_0x8e22x5, _0x8e22x3[_0xee2b[771]]);
      } else {
        _0x8e22x7 = _0x8e22x10[_0xee2b[810]][_0xee2b[772]](_0x8e22x5, _0x8e22x6[_0xee2b[713]]());
      }
      if (_0x8e22xa) {
        _0x8e22x8 = _0x8e22x10[_0xee2b[807]](_0x8e22xf[_0xee2b[2431]] - Math[_0xee2b[203]](_0x8e22x11, _0x8e22xf[_0xee2b[2432]])) || _0x8e22x5;
        _0x8e22x9 = _0x8e22x10[_0xee2b[810]][_0xee2b[772]](_0x8e22x8, _0x8e22x5);
        if (_0x8e22x16[_0xee2b[793]]() !== _0x8e22x7) {
          _0x8e22x16[_0xee2b[839]](_0x8e22x7);
          _0x8e22x16[_0xee2b[2171]](_0x8e22x16[_0xee2b[809]]() + _0x8e22x9);
        }
      } else {
        _0x8e22x8 = _0x8e22x10[_0xee2b[807]](_0x8e22xf[_0xee2b[2433]] - Math[_0xee2b[203]](_0x8e22xc, _0x8e22xf[_0xee2b[2434]])) || _0x8e22x5;
        _0x8e22x9 = _0x8e22x10[_0xee2b[810]][_0xee2b[772]](_0x8e22x8, _0x8e22x5);
        if (_0x8e22x16[_0xee2b[859]]() !== _0x8e22x7) {
          _0x8e22x16[_0xee2b[863]](_0x8e22x7);
          _0x8e22x16[_0xee2b[2079]](_0x8e22x16[_0xee2b[1936]]() + _0x8e22x9);
        }
      }
    } else {
      _0x8e22x7 = _0x8e22x10[_0xee2b[810]][_0xee2b[772]](_0x8e22x6[_0xee2b[712]](), _0x8e22x4);
      if (_0x8e22xa) {
        _0x8e22x16[_0xee2b[839]](_0x8e22x7);
      } else {
        _0x8e22x16[_0xee2b[863]](_0x8e22x7);
      }
    }
  } else {
    if (!_0x8e22x5 || !_0x8e22x4 || _0x8e22xf[_0xee2b[179]] - _0x8e22x5 === 0 && _0x8e22xf[_0xee2b[771]] - _0x8e22x4 === 0) {
      return;
    }
  }
  _0x8e22xf[_0xee2b[771]] = _0x8e22x4;
  _0x8e22xf[_0xee2b[179]] = _0x8e22x5;
  _0x8e22x10[_0xee2b[180]](_0xee2b[2435], _0x8e22x10, _0x8e22x6, _0x8e22x5, _0x8e22x4, _0x8e22xf[_0xee2b[265]]);
}, onViewScroll:function(_0x8e22x6, _0x8e22x3, _0x8e22x5, _0x8e22x4) {
  if (_0x8e22x4 !== 0) {
    this[_0xee2b[2399]][_0xee2b[2411]][_0xee2b[1982]]({});
    this[_0xee2b[2422]](this[_0xee2b[2399]], 0, 0);
  }
}, afterResize:function(_0x8e22x3, _0x8e22xf, _0x8e22x9, _0x8e22x8) {
  var _0x8e22x10 = this, _0x8e22xd = _0x8e22x3[_0xee2b[2055]], _0x8e22xe = _0x8e22x3[_0xee2b[2329]], _0x8e22x5 = _0x8e22xe[_0xee2b[712]](), _0x8e22x15 = _0x8e22xe[_0xee2b[713]](), _0x8e22x6 = _0x8e22x3[_0xee2b[179]] || _0x8e22x5, _0x8e22x4 = _0x8e22x3[_0xee2b[771]] || _0x8e22x15, _0x8e22x16 = _0x8e22x10[_0xee2b[1817]], _0x8e22xa = _0x8e22x6 - _0x8e22x5 || _0x8e22x4 - _0x8e22x15, _0x8e22x11 = _0x8e22x10[_0xee2b[2078]][_0xee2b[293]](_0x8e22x10[_0xee2b[2077]] || _0x8e22x10, _0x8e22xd, _0x8e22xe, _0x8e22x6, 
  _0x8e22x4, _0x8e22x8);
  Sch[_0xee2b[49]][_0xee2b[2074]][_0xee2b[2084]]();
  _0x8e22x16[_0xee2b[1941]]()[_0xee2b[152]](_0xee2b[1978], this[_0xee2b[2201]], this);
  if (this[_0xee2b[2127]]) {
    this[_0xee2b[2412]]()[_0xee2b[256]]();
  }
  if (Ext[_0xee2b[135]](_0x8e22x11)) {
    _0x8e22x11 = _0x8e22x11[_0xee2b[2003]];
  }
  _0x8e22x11 = _0x8e22x11 !== false && _0x8e22x6 && _0x8e22x4 && _0x8e22x4 - _0x8e22x6 > 0;
  var _0x8e22x1 = {resourceRecord:_0x8e22x3[_0xee2b[2055]], eventRecord:_0x8e22xe, start:_0x8e22x6, end:_0x8e22x4, valid:_0x8e22x11, modified:_0x8e22xa, finalize:function(_0x8e22x2) {
    _0x8e22x10[_0xee2b[2082]](_0x8e22x2, _0x8e22x1);
  }};
  var _0x8e22xb = function() {
    _0x8e22x10[_0xee2b[2082]](true, _0x8e22x1);
  };
  var _0x8e22xc = function() {
    _0x8e22x10[_0xee2b[2082]](false, _0x8e22x1);
  };
  if (_0x8e22x11 && _0x8e22xa) {
    if (_0x8e22x16[_0xee2b[180]](_0xee2b[2436], _0x8e22x16, _0x8e22x1, _0x8e22x8, _0x8e22xb, _0x8e22xc) !== false) {
      _0x8e22xb();
    }
  } else {
    _0x8e22xc();
  }
}, finalize:function(_0x8e22x3, _0x8e22x5) {
  var _0x8e22x2 = this[_0xee2b[1817]];
  var _0x8e22x4 = false;
  var _0x8e22x6 = function() {
    _0x8e22x4 = true;
  };
  _0x8e22x2[_0xee2b[696]]()[_0xee2b[149]](_0xee2b[724], _0x8e22x6);
  this[_0xee2b[2399]][_0xee2b[969]][_0xee2b[218]]();
  if (_0x8e22x3) {
    if (this[_0xee2b[2399]][_0xee2b[2426]]) {
      _0x8e22x5[_0xee2b[2329]][_0xee2b[1204]](_0x8e22x5[_0xee2b[179]], false, _0x8e22x2[_0xee2b[696]]()[_0xee2b[2241]]);
    } else {
      _0x8e22x5[_0xee2b[2329]][_0xee2b[1202]](_0x8e22x5[_0xee2b[771]], false, _0x8e22x2[_0xee2b[696]]()[_0xee2b[2241]]);
    }
    if (!_0x8e22x4) {
      _0x8e22x2[_0xee2b[2437]](_0x8e22x5[_0xee2b[2055]]);
    }
  } else {
    _0x8e22x2[_0xee2b[2437]](_0x8e22x5[_0xee2b[2055]]);
  }
  this[_0xee2b[2399]][_0xee2b[218]]();
  delete this[_0xee2b[2399]];
  _0x8e22x2[_0xee2b[696]]()[_0xee2b[152]](_0xee2b[724], _0x8e22x6);
  _0x8e22x2[_0xee2b[180]](_0xee2b[2438], _0x8e22x2, _0x8e22x5[_0xee2b[2329]]);
  _0x8e22x2[_0xee2b[180]](_0xee2b[2439], _0x8e22x2, _0x8e22x5[_0xee2b[2329]]);
}, cleanUp:function() {
  if (this[_0xee2b[2406]]) {
    this[_0xee2b[2406]][_0xee2b[218]]();
  }
  this[_0xee2b[2405]] = null;
}});
Ext[_0xee2b[6]](_0xee2b[2440], {extend:_0xee2b[2441], alias:_0xee2b[2442], hidden:true, enableKeyEvents:true, divider:_0xee2b[1131], dateFormat:_0xee2b[2443], getErrors:function(_0x8e22x4) {
  var _0x8e22x6 = this, _0x8e22x3 = _0x8e22x6[_0xee2b[9]](arguments);
  if (_0x8e22x4 == null || _0x8e22x4 === _0xee2b[27]) {
    return _0x8e22x3;
  }
  var _0x8e22x5 = this[_0xee2b[1206]](_0x8e22x4);
  if (!_0x8e22x5[0]) {
    _0x8e22x3[_0xee2b[11]](_0xee2b[2444]);
  }
  if (!_0x8e22x5[1]) {
    _0x8e22x3[_0xee2b[11]](_0xee2b[2445]);
  }
  if (_0x8e22x5[1] - _0x8e22x5[0] < 0) {
    _0x8e22x3[_0xee2b[11]](_0xee2b[2446]);
  }
  return _0x8e22x3;
}, getDates:function(_0x8e22x2) {
  var _0x8e22x5 = this;
  var _0x8e22x6 = _0x8e22x2[_0xee2b[496]](_0x8e22x5[_0xee2b[2447]]);
  var _0x8e22x1, _0x8e22x3;
  if (Ext[_0xee2b[307]](_0x8e22x5[_0xee2b[879]])) {
    for (var _0x8e22x4 = 0; _0x8e22x4 < _0x8e22x5[_0xee2b[879]][_0xee2b[4]]; _0x8e22x4++) {
      _0x8e22x1 = _0x8e22x1 || Ext[_0xee2b[703]][_0xee2b[1253]](_0x8e22x6[0], _0x8e22x5[_0xee2b[879]][_0x8e22x4]);
      _0x8e22x3 = _0x8e22x3 || Ext[_0xee2b[703]][_0xee2b[1253]](_0x8e22x6[1], _0x8e22x5[_0xee2b[879]][_0x8e22x4]);
    }
  } else {
    _0x8e22x1 = Ext[_0xee2b[703]][_0xee2b[1253]](_0x8e22x6[0], _0x8e22x5[_0xee2b[879]]);
    _0x8e22x3 = Ext[_0xee2b[703]][_0xee2b[1253]](_0x8e22x6[1], _0x8e22x5[_0xee2b[879]]);
  }
  if (!_0x8e22x1 || !_0x8e22x3) {
    return [];
  }
  if (_0x8e22x5[_0xee2b[933]]) {
    _0x8e22x1 = Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[2449]](_0x8e22x5[_0xee2b[933]][_0xee2b[712]](), _0x8e22x1, _0x8e22x5[_0xee2b[2448]]);
    _0x8e22x3 = Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[2449]](_0x8e22x5[_0xee2b[933]][_0xee2b[713]](), _0x8e22x3, _0x8e22x5[_0xee2b[2448]]);
  } else {
    _0x8e22x1 = Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[2449]](_0x8e22x5[_0xee2b[1138]], _0x8e22x1, _0x8e22x5[_0xee2b[2448]]);
    _0x8e22x3 = Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[2449]](_0x8e22x5[_0xee2b[1138]], _0x8e22x3, _0x8e22x5[_0xee2b[2448]]);
  }
  return [_0x8e22x1, _0x8e22x3];
}});
Ext[_0xee2b[6]](_0xee2b[2450], {extend:_0xee2b[2451], alias:_0xee2b[2452], mixins:[_0xee2b[2453]], segmentedButtonFieldCls:_0xee2b[2454], layout:_0xee2b[2455], allowMultiple:true, defaults:{enableToggle:true, border:0}, allowBlank:true, initComponent:function() {
  var _0x8e22x3 = this;
  _0x8e22x3[_0xee2b[2456]]();
  _0x8e22x3[_0xee2b[2457]]();
  _0x8e22x3[_0xee2b[264]](_0x8e22x3[_0xee2b[2458]]);
  _0x8e22x3[_0xee2b[9]]();
  _0x8e22x3[_0xee2b[149]](_0xee2b[2459], _0x8e22x3[_0xee2b[2460]], _0x8e22x3);
}, initDefaultName:function() {
  this[_0xee2b[683]] = this[_0xee2b[683]] || this[_0xee2b[32]]();
}, onFieldChange:function(_0x8e22x4, _0x8e22x6, _0x8e22x3) {
  if (!this[_0xee2b[2461]] && Ext[_0xee2b[1353]](_0x8e22x6)) {
    this[_0xee2b[2462]](_0x8e22x3);
  }
}});
Ext[_0xee2b[6]](_0xee2b[2463], {extend:_0xee2b[2464], alias:_0xee2b[2465], beginLayout:function(_0x8e22x1) {
  var _0x8e22x5 = this, _0x8e22x3 = _0x8e22x5[_0xee2b[2466]], _0x8e22x2 = _0x8e22x3[_0xee2b[2467]], _0x8e22x4 = _0x8e22x3[_0xee2b[2468]], _0x8e22x9 = _0x8e22x4 && _0x8e22x4[_0xee2b[840]][_0xee2b[854]]() && !_0x8e22x4[_0xee2b[840]][_0xee2b[2469]], _0x8e22x6 = _0x8e22x1[_0xee2b[2470]];
  _0x8e22x1[_0xee2b[2471]] = _0x8e22x9 && (_0x8e22x2[_0xee2b[2472]] || _0x8e22x2[_0xee2b[2473]]);
  if (!_0x8e22x5[_0xee2b[2474]]) {
    _0x8e22x5[_0xee2b[2474]] = _0x8e22x5[_0xee2b[388]] + _0xee2b[2475];
    _0x8e22x5[_0xee2b[2476]] = _0x8e22x5[_0xee2b[388]] + _0xee2b[2477];
  }
  if (_0x8e22x5[_0xee2b[2466]][_0xee2b[2478]]) {
    _0x8e22x5[_0xee2b[2466]][_0xee2b[2478]][_0xee2b[2479]](_0x8e22x1);
  }
  _0x8e22x5[_0xee2b[673]][_0xee2b[673]][_0xee2b[2480]][_0xee2b[8]](this, [_0x8e22x1]);
  if (_0x8e22x9 && _0x8e22x4[_0xee2b[2482]][_0xee2b[2481]]()) {
    if (!_0x8e22x1[_0xee2b[2483]]) {
      (_0x8e22x1[_0xee2b[2483]] = _0x8e22x6[_0xee2b[800]](_0x8e22x4))[_0xee2b[2483]] = _0x8e22x1;
    }
    if (_0x8e22x1[_0xee2b[2471]]) {
      _0x8e22x1[_0xee2b[2484]] = _0x8e22x5[_0xee2b[2466]][_0xee2b[2485]]();
    }
  }
  (_0x8e22x1[_0xee2b[2487]] = _0x8e22x6[_0xee2b[800]](_0x8e22x5[_0xee2b[1848]]))[_0xee2b[2486]] = _0x8e22x1;
}});
Ext[_0xee2b[6]](_0xee2b[2488], {extend:_0xee2b[1803], alias:_0xee2b[2489], requires:[_0xee2b[1198]], innerTpl:null, cls:_0xee2b[2490], side:null, init:function(_0x8e22x3) {
  if (typeof this[_0xee2b[1881]] === _0xee2b[308]) {
    this[_0xee2b[1881]] = new Ext.XTemplate(this[_0xee2b[1881]]);
  }
  this[_0xee2b[1882]] = _0x8e22x3[_0xee2b[1855]] ? _0xee2b[867] : _0xee2b[1354];
  var _0x8e22x6 = this[_0xee2b[1881]];
  if (!this[_0xee2b[1860]]) {
    this[_0xee2b[1860]] = new Ext.XTemplate(_0xee2b[2491] + this[_0xee2b[1882]] + _0xee2b[2492] + (_0x8e22x6 ? _0xee2b[1814] : _0xee2b[27]) + _0xee2b[2493], {renderInner:function(_0x8e22x4) {
      return _0x8e22x6[_0xee2b[8]](_0x8e22x4);
    }});
  }
  if (typeof this[_0xee2b[1810]] === _0xee2b[308]) {
    this[_0xee2b[1810]] = new Ext.XTemplate(this[_0xee2b[1810]]);
  }
  this[_0xee2b[9]](arguments);
}, getElementData:function(_0x8e22x7, _0x8e22x5, _0x8e22x11, _0x8e22x1) {
  var _0x8e22x9 = this[_0xee2b[1817]], _0x8e22x18 = [];
  var _0x8e22x4 = _0x8e22x9[_0xee2b[1892]](_0x8e22x7, _0x8e22x5, this[_0xee2b[1891]]);
  var _0x8e22x6, _0x8e22xd, _0x8e22x3, _0x8e22x8, _0x8e22xe, _0x8e22x2;
  _0x8e22x11 = _0x8e22x11 || this[_0xee2b[64]][_0xee2b[1005]]();
  for (var _0x8e22xb = 0, _0x8e22xc = _0x8e22x11[_0xee2b[4]]; _0x8e22xb < _0x8e22xc; _0x8e22xb++) {
    _0x8e22x6 = _0x8e22x11[_0x8e22xb];
    _0x8e22xd = _0x8e22x6[_0xee2b[712]]();
    _0x8e22x3 = _0x8e22x6[_0xee2b[713]]();
    _0x8e22x2 = this[_0xee2b[1837]](_0x8e22x6);
    if (_0x8e22xd && _0x8e22x3 && Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[714]](_0x8e22xd, _0x8e22x3, _0x8e22x7, _0x8e22x5)) {
      _0x8e22x8 = Ext[_0xee2b[8]]({}, _0x8e22x2);
      _0x8e22x8[_0xee2b[388]] = this[_0xee2b[1867]](_0x8e22x6);
      _0x8e22x8[_0xee2b[1869]] = this[_0xee2b[1890]](_0x8e22x6, _0x8e22x2);
      if (_0x8e22x9[_0xee2b[1847]]()) {
        var _0x8e22x19 = _0x8e22x9[_0xee2b[1892]](_0x8e22xd, _0x8e22x3);
        _0x8e22x8[_0xee2b[1354]] = _0x8e22x19[_0xee2b[1354]];
        _0x8e22x8[_0xee2b[686]] = _0x8e22x19[_0xee2b[686]];
        _0x8e22x8[_0xee2b[747]] = _0x8e22x19[_0xee2b[754]] - _0x8e22x19[_0xee2b[686]];
        _0x8e22x8[_0xee2b[773]] = _0x8e22x19[_0xee2b[867]] - _0x8e22x19[_0xee2b[1354]];
      } else {
        var _0x8e22x15 = _0x8e22x9[_0xee2b[1895]](Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[715]](_0x8e22xd, _0x8e22x7));
        var _0x8e22xf = _0x8e22x9[_0xee2b[1895]](Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[203]](_0x8e22x3, _0x8e22x5));
        if (_0x8e22x9[_0xee2b[1828]]()) {
          _0x8e22x8[_0xee2b[1354]] = _0x8e22x15;
          _0x8e22x8[_0xee2b[686]] = _0x8e22x4[_0xee2b[686]];
          _0x8e22x8[_0xee2b[773]] = _0x8e22x1 ? 0 : _0x8e22xf - _0x8e22x15;
          _0x8e22x8[_0xee2b[763]] = _0x8e22x1 ? _0xee2b[2494] + (_0x8e22xf - _0x8e22x15) + _0xee2b[804] : _0xee2b[27];
        } else {
          _0x8e22x8[_0xee2b[1354]] = _0x8e22x4[_0xee2b[1354]];
          _0x8e22x8[_0xee2b[686]] = _0x8e22x15;
          _0x8e22x8[_0xee2b[747]] = _0x8e22x1 ? 0 : _0x8e22xf - _0x8e22x15;
          _0x8e22x8[_0xee2b[763]] = _0x8e22x1 ? _0xee2b[2495] + (_0x8e22xf - _0x8e22x15) + _0xee2b[804] : _0xee2b[27];
        }
      }
      _0x8e22x18[_0xee2b[11]](_0x8e22x8);
    }
  }
  return _0x8e22x18;
}, getHeaderElementId:function(_0x8e22x6, _0x8e22x3) {
  return this[_0xee2b[9]]([_0x8e22x6]) + (_0x8e22x3 ? _0xee2b[1489] : _0xee2b[1494]);
}, getHeaderElementCls:function(_0x8e22x6, _0x8e22x5, _0x8e22x3) {
  var _0x8e22x4 = _0x8e22x6[_0xee2b[1227]] || this[_0xee2b[1227]];
  if (!_0x8e22x5) {
    _0x8e22x5 = this[_0xee2b[1837]](_0x8e22x6);
  }
  return _0xee2b[2496] + (_0x8e22x3 ? _0xee2b[2497] : _0xee2b[2498]) + this[_0xee2b[1805]] + _0xee2b[60] + (_0x8e22x5[_0x8e22x4] || _0xee2b[27]);
}, getZoneHeaderElementData:function(_0x8e22x6, _0x8e22x7, _0x8e22x1, _0x8e22x3) {
  var _0x8e22x4 = _0x8e22x3 ? _0x8e22x1[_0xee2b[712]]() : _0x8e22x1[_0xee2b[713]](), _0x8e22x2 = null, _0x8e22x9, _0x8e22xa, _0x8e22x5;
  if (_0x8e22x4 && Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[1175]](_0x8e22x4, _0x8e22x6, _0x8e22x7)) {
    _0x8e22x9 = this[_0xee2b[1896]](_0x8e22x4);
    _0x8e22xa = this[_0xee2b[1817]][_0xee2b[1828]]();
    _0x8e22x5 = this[_0xee2b[1837]](_0x8e22x1);
    _0x8e22x2 = Ext[_0xee2b[8]]({id:this[_0xee2b[1873]](_0x8e22x1, _0x8e22x3), cls:this[_0xee2b[1897]](_0x8e22x1, _0x8e22x5, _0x8e22x3), isStart:_0x8e22x3, side:_0x8e22xa ? this[_0xee2b[1882]] : _0xee2b[686], position:_0x8e22x9}, _0x8e22x5);
  }
  return _0x8e22x2;
}, getHeaderElementData:function(_0x8e22x6) {
  var _0x8e22x3 = this[_0xee2b[1795]][_0xee2b[697]](), _0x8e22x7 = this[_0xee2b[1795]][_0xee2b[698]](), _0x8e22x2 = [], _0x8e22x9, _0x8e22x5, _0x8e22x8;
  _0x8e22x6 = _0x8e22x6 || this[_0xee2b[64]][_0xee2b[1005]]();
  for (var _0x8e22x1 = 0, _0x8e22x4 = _0x8e22x6[_0xee2b[4]]; _0x8e22x1 < _0x8e22x4; _0x8e22x1++) {
    _0x8e22x9 = _0x8e22x6[_0x8e22x1];
    _0x8e22x5 = this[_0xee2b[2499]](_0x8e22x3, _0x8e22x7, _0x8e22x9, true);
    if (_0x8e22x5) {
      _0x8e22x2[_0xee2b[11]](_0x8e22x5);
    }
    _0x8e22x8 = this[_0xee2b[2499]](_0x8e22x3, _0x8e22x7, _0x8e22x9, false);
    if (_0x8e22x8) {
      _0x8e22x2[_0xee2b[11]](_0x8e22x8);
    }
  }
  return _0x8e22x2;
}, updateZoneHeaderElement:function(_0x8e22x3, _0x8e22x6) {
  _0x8e22x3[_0xee2b[758]][_0xee2b[1868]] = _0x8e22x6[_0xee2b[489]];
  if (this[_0xee2b[1817]][_0xee2b[1828]]()) {
    this[_0xee2b[1871]](_0x8e22x3, _0x8e22x6[_0xee2b[1780]]);
  } else {
    _0x8e22x3[_0xee2b[1870]](_0x8e22x6[_0xee2b[1780]]);
  }
}, updateHeaderElement:function(_0x8e22x4) {
  var _0x8e22x3 = this[_0xee2b[1795]][_0xee2b[697]](), _0x8e22x9 = this[_0xee2b[1795]][_0xee2b[698]](), _0x8e22x1 = Ext[_0xee2b[55]](this[_0xee2b[1873]](_0x8e22x4, true)), _0x8e22x2 = Ext[_0xee2b[55]](this[_0xee2b[1873]](_0x8e22x4, false)), _0x8e22x5 = this[_0xee2b[2499]](_0x8e22x3, _0x8e22x9, _0x8e22x4, true), _0x8e22x6 = this[_0xee2b[2499]](_0x8e22x3, _0x8e22x9, _0x8e22x4, false);
  if (!(_0x8e22x1 && _0x8e22x6) || !(_0x8e22x2 && _0x8e22x6)) {
    Ext[_0xee2b[218]](_0x8e22x1, _0x8e22x2);
    this[_0xee2b[1821]]([_0x8e22x4]);
  } else {
    if (_0x8e22x1) {
      if (!_0x8e22x5) {
        Ext[_0xee2b[218]](_0x8e22x1);
      } else {
        this[_0xee2b[2500]](_0x8e22x1, _0x8e22x5);
      }
    }
    if (_0x8e22x2) {
      if (!_0x8e22x6) {
        Ext[_0xee2b[218]](_0x8e22x2);
      } else {
        this[_0xee2b[2500]](_0x8e22x2, _0x8e22x6);
      }
    }
  }
}});
Ext[_0xee2b[6]](_0xee2b[2501], {extend:_0xee2b[2488], requires:[_0xee2b[717], _0xee2b[1140]], innerTpl:null, store:null, init:function(_0x8e22x3) {
  this[_0xee2b[64]] = Ext[_0xee2b[132]][_0xee2b[131]](this[_0xee2b[64]]);
  this[_0xee2b[1805]] = this[_0xee2b[1805]] || _0xee2b[1806] + Ext[_0xee2b[388]]();
  this[_0xee2b[2502]] = _0x8e22x3;
  _0x8e22x3[_0xee2b[2503]](this[_0xee2b[878]], this);
  if (typeof this[_0xee2b[1881]] === _0xee2b[308]) {
    this[_0xee2b[1881]] = new Ext.XTemplate(this[_0xee2b[1881]]);
  }
  var _0x8e22x6 = this[_0xee2b[1881]];
  if (!this[_0xee2b[1860]]) {
    this[_0xee2b[1860]] = new Ext.XTemplate(_0xee2b[2504] + this[_0xee2b[1805]] + _0xee2b[2505] + this[_0xee2b[489]] + _0xee2b[60] + this[_0xee2b[1805]] + _0xee2b[2506] + (_0x8e22x3[_0xee2b[1855]] ? _0xee2b[867] : _0xee2b[1354]) + _0xee2b[2507] + (_0x8e22x6 ? _0xee2b[1814] : _0xee2b[2508] + this[_0xee2b[64]][_0xee2b[137]]()[_0xee2b[139]][_0xee2b[1228]] + _0xee2b[2509]) + _0xee2b[2493], {renderInner:function(_0x8e22x4) {
      return _0x8e22x6[_0xee2b[8]](_0x8e22x4);
    }});
  }
  this[_0xee2b[1840]] = {refresh:this[_0xee2b[2510]], clear:this[_0xee2b[2510]], add:this[_0xee2b[2511]], remove:this[_0xee2b[2512]], update:this[_0xee2b[2513]], scope:this};
  this[_0xee2b[64]][_0xee2b[149]](this[_0xee2b[1840]]);
}, destroy:function() {
  this[_0xee2b[64]][_0xee2b[152]](this[_0xee2b[1840]]);
  this[_0xee2b[9]](arguments);
}, getViewRecordByZone:function(_0x8e22x3) {
  throw _0xee2b[29];
}, getZoneContainerEl:function(_0x8e22x4) {
  var _0x8e22x6 = this[_0xee2b[2502]][_0xee2b[808]](), _0x8e22x3 = this[_0xee2b[2514]](_0x8e22x4), _0x8e22x5 = _0x8e22x3 && _0x8e22x6[_0xee2b[2515]](_0x8e22x3);
  return _0x8e22x5 && _0x8e22x5[_0xee2b[2517]](_0xee2b[495] + Ext[_0xee2b[238]] + _0xee2b[2516]);
}, onZoneRemove:function(_0x8e22x6, _0x8e22x3) {
  Ext[_0xee2b[26]][_0xee2b[130]](_0x8e22x3, function(_0x8e22x4) {
    var _0x8e22x5 = document[_0xee2b[2194]](this[_0xee2b[1867]](_0x8e22x4));
    _0x8e22x5 && _0x8e22x5[_0xee2b[791]][_0xee2b[78]](_0x8e22x5);
  }, this);
}, onZoneAdd:function(_0x8e22x6, _0x8e22x3) {
  Ext[_0xee2b[26]][_0xee2b[130]](_0x8e22x3, function(_0x8e22x5) {
    var _0x8e22x4 = this[_0xee2b[2518]](_0x8e22x5);
    _0x8e22x4 && this[_0xee2b[2519]](_0x8e22x5, _0x8e22x4);
  }, this);
}, fullRefresh:function() {
  var _0x8e22x6 = this, _0x8e22x3 = this[_0xee2b[2502]][_0xee2b[808]]();
  if (_0x8e22x3[_0xee2b[265]]) {
    _0x8e22x3[_0xee2b[265]][_0xee2b[760]](_0xee2b[495] + this[_0xee2b[1805]])[_0xee2b[63]]();
    Ext[_0xee2b[26]][_0xee2b[130]](_0x8e22x3[_0xee2b[2520]](), function(_0x8e22x4) {
      _0x8e22x6[_0xee2b[2521]](_0x8e22x3[_0xee2b[37]](_0x8e22x4), true);
    });
  }
}, renderer:function(_0x8e22x5, _0x8e22x4, _0x8e22x6, _0x8e22x2) {
  var _0x8e22x3 = _0xee2b[27];
  if (_0x8e22x6 && (this[_0xee2b[2502]][_0xee2b[1828]]() || _0x8e22x2 === 0)) {
    _0x8e22x3 = this[_0xee2b[2521]](_0x8e22x6);
  }
  return _0x8e22x3;
}, getRecordZones:function(_0x8e22x3) {
  throw _0xee2b[29];
}, getTemplateData:function(_0x8e22x3) {
  var _0x8e22x6 = this[_0xee2b[2502]], _0x8e22x5 = _0x8e22x6[_0xee2b[808]]()[_0x8e22x6[_0xee2b[2131]]()][_0xee2b[2522]](_0x8e22x3), _0x8e22x2, _0x8e22x4;
  if (_0x8e22x6[_0xee2b[1828]]()) {
    _0x8e22x2 = _0x8e22x6[_0xee2b[1855]] ? _0x8e22x5[_0xee2b[867]] : _0x8e22x5[_0xee2b[1354]];
    _0x8e22x4 = _0x8e22x5[_0xee2b[773]];
  } else {
    _0x8e22x2 = _0x8e22x5[_0xee2b[686]];
    _0x8e22x4 = _0x8e22x5[_0xee2b[747]];
  }
  return Ext[_0xee2b[8]]({id:_0x8e22x3[_0xee2b[1049]], start:_0x8e22x2, width:_0x8e22x4, Cls:_0x8e22x3[_0xee2b[1284]]()}, _0x8e22x3[_0xee2b[22]]);
}, renderRecordZones:function(_0x8e22x9, _0x8e22x8) {
  var _0x8e22x2 = this[_0xee2b[2502]], _0x8e22x1 = _0x8e22x2[_0xee2b[1795]][_0xee2b[697]](), _0x8e22x10 = _0x8e22x2[_0xee2b[1795]][_0xee2b[698]](), _0x8e22x5 = [], _0x8e22x3 = this[_0xee2b[2523]](_0x8e22x9), _0x8e22xf = _0xee2b[27], _0x8e22xe, _0x8e22x6, _0x8e22xd;
  for (var _0x8e22x4 = 0, _0x8e22x7 = _0x8e22x3[_0xee2b[4]]; _0x8e22x4 < _0x8e22x7; _0x8e22x4++) {
    _0x8e22xd = _0x8e22x3[_0x8e22x4];
    _0x8e22xe = _0x8e22xd[_0xee2b[712]]();
    _0x8e22x6 = _0x8e22xd[_0xee2b[713]]();
    if (_0x8e22xe && _0x8e22x6 && Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[714]](_0x8e22xe, _0x8e22x6, _0x8e22x1, _0x8e22x10)) {
      _0x8e22x5[_0xee2b[11]](this[_0xee2b[1837]](_0x8e22xd));
    }
  }
  if (_0x8e22x8) {
    if (_0x8e22xd) {
      if (Ext[_0xee2b[2524]](_0x8e22x8)) {
        _0x8e22x8 = this[_0xee2b[2518]](_0x8e22xd);
      }
      this[_0xee2b[1860]][_0xee2b[384]](_0x8e22x8, _0x8e22x5);
    }
  } else {
    _0x8e22xf = this[_0xee2b[1860]][_0xee2b[8]](_0x8e22x5);
  }
  return _0x8e22xf;
}, appendZoneElement:function(_0x8e22x3) {
  var _0x8e22x4 = this[_0xee2b[2502]], _0x8e22x9 = _0x8e22x4[_0xee2b[1795]][_0xee2b[697]](), _0x8e22x6 = _0x8e22x4[_0xee2b[1795]][_0xee2b[698]](), _0x8e22x2 = this[_0xee2b[2518]](_0x8e22x3), _0x8e22x5 = _0x8e22x3[_0xee2b[712]](), _0x8e22x1 = _0x8e22x3[_0xee2b[713]]();
  if (_0x8e22x2 && _0x8e22x5 && _0x8e22x1 && Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[714]](_0x8e22x5, _0x8e22x1, _0x8e22x9, _0x8e22x6)) {
    this[_0xee2b[1860]][_0xee2b[384]](_0x8e22x2, this[_0xee2b[1837]](_0x8e22x3));
  }
}, onZoneUpdate:function(_0x8e22xa, _0x8e22x7) {
  var _0x8e22x4 = document[_0xee2b[2194]](this[_0xee2b[1867]](_0x8e22x7));
  if (_0x8e22x4) {
    var _0x8e22x2 = this[_0xee2b[2502]], _0x8e22x1 = _0x8e22x2[_0xee2b[1795]][_0xee2b[697]](), _0x8e22x8 = _0x8e22x2[_0xee2b[1795]][_0xee2b[698]]();
    var _0x8e22x6 = Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[715]](_0x8e22x1, _0x8e22x7[_0xee2b[712]]()), _0x8e22x5 = Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[203]](_0x8e22x8, _0x8e22x7[_0xee2b[713]]()), _0x8e22xd = _0x8e22x7[_0xee2b[1284]]();
    var _0x8e22x9 = _0x8e22x2[_0xee2b[808]]()[_0xee2b[1895]](_0x8e22x6);
    var _0x8e22x3 = _0x8e22x2[_0xee2b[808]]()[_0xee2b[1895]](_0x8e22x5) - _0x8e22x9;
    _0x8e22x4[_0xee2b[1868]] = this[_0xee2b[489]] + _0xee2b[60] + this[_0xee2b[1805]] + _0xee2b[60] + (_0x8e22xd || _0xee2b[27]);
    _0x8e22x4[_0xee2b[763]][_0xee2b[1354]] = _0x8e22x9 + _0xee2b[804];
    _0x8e22x4[_0xee2b[763]][_0xee2b[686]] = _0x8e22x9 + _0xee2b[804];
    _0x8e22x4[_0xee2b[763]][_0xee2b[747]] = _0x8e22x3 + _0xee2b[804];
    _0x8e22x4[_0xee2b[763]][_0xee2b[773]] = _0x8e22x3 + _0xee2b[804];
  }
}});
Ext[_0xee2b[6]](_0xee2b[2525], {extend:_0xee2b[2501], alias:_0xee2b[2526], cls:_0xee2b[2527], init:function(_0x8e22x3) {
  this[_0xee2b[9]](arguments);
  this[_0xee2b[64]][_0xee2b[1408]](_0x8e22x3[_0xee2b[1007]]());
  _0x8e22x3[_0xee2b[149]](_0xee2b[1409], this[_0xee2b[2528]], this);
}, onResourceStoreChange:function(_0x8e22x3, _0x8e22x6) {
  this[_0xee2b[64]][_0xee2b[1408]](_0x8e22x6);
}, getRecordZones:function(_0x8e22x3) {
  return _0x8e22x3[_0xee2b[1421]](this[_0xee2b[64]]);
}, getViewRecordByZone:function(_0x8e22x3) {
  return _0x8e22x3[_0xee2b[1053]]();
}, getZoneContainerEl:function(_0x8e22x4) {
  var _0x8e22x3;
  if (this[_0xee2b[2502]][_0xee2b[1828]]()) {
    _0x8e22x3 = this[_0xee2b[9]](arguments);
  } else {
    var _0x8e22x6 = this[_0xee2b[2502]][_0xee2b[808]](), _0x8e22x2 = _0x8e22x4[_0xee2b[1053]]();
    if (_0x8e22x6[_0xee2b[265]] && _0x8e22x2) {
      var _0x8e22x5 = _0x8e22x6[_0xee2b[1302]][_0xee2b[147]](_0x8e22x2);
      _0x8e22x3 = _0x8e22x6[_0xee2b[2515]](0)[_0xee2b[2517]](_0xee2b[495] + Ext[_0xee2b[238]] + _0xee2b[2529] + (_0x8e22x5 + 1) + _0xee2b[2530] + Ext[_0xee2b[238]] + _0xee2b[2516]);
    }
  }
  return _0x8e22x3;
}, fullRefresh:function() {
  var _0x8e22x6 = this, _0x8e22x3 = this[_0xee2b[2502]][_0xee2b[808]]();
  if (_0x8e22x6[_0xee2b[2502]][_0xee2b[1828]]()) {
    this[_0xee2b[9]](arguments);
  } else {
    if (_0x8e22x3[_0xee2b[265]]) {
      _0x8e22x3[_0xee2b[265]][_0xee2b[760]](_0xee2b[495] + this[_0xee2b[1805]])[_0xee2b[63]]();
      _0x8e22x3[_0xee2b[1302]][_0xee2b[25]](function(_0x8e22x4) {
        _0x8e22x6[_0xee2b[2521]](_0x8e22x4, true);
      });
    }
  }
}});
Ext[_0xee2b[6]](_0xee2b[2531], {requires:[_0xee2b[1598], _0xee2b[1623], _0xee2b[1616], _0xee2b[1625], _0xee2b[1140], _0xee2b[2525]], eventBarIconClsField:_0xee2b[27], enableEventDragDrop:true, resourceColumnClass:_0xee2b[485], resourceColumnWidth:null, allowOverlap:true, startParamName:_0xee2b[1138], endParamName:_0xee2b[1139], passStartEndParameters:false, eventRenderer:null, eventRendererScope:null, eventStore:null, resourceStore:null, onEventCreated:function(_0x8e22x3, _0x8e22x6) {
}, resourceZones:null, resourceZonesConfig:null, initStores:function() {
  var _0x8e22x3 = this[_0xee2b[1302]] || this[_0xee2b[64]];
  if (this[_0xee2b[312]]) {
    if (!Sch[_0xee2b[464]][_0xee2b[2532]]) {
      throw new Error(_0xee2b[2533]);
    }
    if (!(this[_0xee2b[312]] instanceof Sch[_0xee2b[464]][_0xee2b[2532]])) {
      this[_0xee2b[312]] = Ext[_0xee2b[831]](this[_0xee2b[312]][_0xee2b[2534]] || _0xee2b[1301], Ext[_0xee2b[1161]](this[_0xee2b[312]]));
    }
  }
  if (!_0x8e22x3) {
    if (this[_0xee2b[312]]) {
      _0x8e22x3 = this[_0xee2b[1302]] = this[_0xee2b[312]][_0xee2b[1007]]();
    }
    if (!_0x8e22x3) {
      if (this[_0xee2b[2535]]) {
        _0x8e22x3 = new Sch[_0xee2b[22]].ResourceTreeStore({proxy:_0xee2b[313]});
      } else {
        _0x8e22x3 = new Sch[_0xee2b[22]].ResourceStore();
      }
    }
  }
  if (!this[_0xee2b[1303]]) {
    if (this[_0xee2b[312]]) {
      this[_0xee2b[1303]] = this[_0xee2b[312]][_0xee2b[1306]]();
    }
  }
  if (!this[_0xee2b[1071]]) {
    if (this[_0xee2b[312]]) {
      this[_0xee2b[1071]] = this[_0xee2b[312]][_0xee2b[696]]();
    }
    this[_0xee2b[1071]] = this[_0xee2b[1071]] || new Sch[_0xee2b[22]].EventStore();
  }
  this[_0xee2b[64]] = Ext[_0xee2b[132]][_0xee2b[131]](_0x8e22x3);
  this[_0xee2b[1302]] = this[_0xee2b[64]];
  this[_0xee2b[1407]](this[_0xee2b[1071]]);
  if (!this[_0xee2b[1071]] || !this[_0xee2b[1071]][_0xee2b[1603]]) {
    Ext[_0xee2b[1182]][_0xee2b[3]](_0xee2b[2536]);
  }
  this[_0xee2b[1302]][_0xee2b[1071]] = this[_0xee2b[696]]();
}, _initializeSchedulerPanel:function() {
  this[_0xee2b[2537]]();
  if (this[_0xee2b[2538]] && typeof this[_0xee2b[2538]] === _0xee2b[308]) {
    this[_0xee2b[2538]] = new Ext.XTemplate(this[_0xee2b[2538]]);
  }
  this[_0xee2b[149]](_0xee2b[218], function() {
    this[_0xee2b[1408]](null);
    this[_0xee2b[1407]](null);
  });
}, getResourceStore:function() {
  return this[_0xee2b[1302]];
}, setResourceStore:function(_0x8e22x6) {
  var _0x8e22x5 = this[_0xee2b[1007]]();
  this[_0xee2b[1302]] = _0x8e22x6 = _0x8e22x6 && Ext[_0xee2b[132]][_0xee2b[131]](_0x8e22x6);
  var _0x8e22x4 = this[_0xee2b[696]]();
  if (_0x8e22x4 && _0x8e22x6) {
    _0x8e22x4[_0xee2b[1408]](_0x8e22x6);
  }
  var _0x8e22x3 = this[_0xee2b[808]]();
  _0x8e22x3 && _0x8e22x3[_0xee2b[1408]](_0x8e22x6);
  if (_0x8e22x6) {
    this[_0xee2b[180]](_0xee2b[1409], this, _0x8e22x6, _0x8e22x5);
    if (this[_0xee2b[2539]]()) {
      this[_0xee2b[2540]]();
      this[_0xee2b[325]](_0x8e22x5, this[_0xee2b[2541]]);
      this[_0xee2b[252]](_0x8e22x6, this[_0xee2b[2541]]);
    }
    if (this[_0xee2b[1847]]()) {
      this[_0xee2b[325]](_0x8e22x5, this[_0xee2b[2542]]);
      this[_0xee2b[252]](_0x8e22x6, this[_0xee2b[2542]]);
    }
    if (_0x8e22x5 === this[_0xee2b[64]]) {
      this[_0xee2b[1723]](_0x8e22x6);
    } else {
      this[_0xee2b[2543]](false);
    }
    if (this[_0xee2b[2544]]) {
      this[_0xee2b[2544]][_0xee2b[2543]](false);
    }
  }
}, getEventStore:function() {
  return this[_0xee2b[1071]];
}, setEventStore:function(_0x8e22x3) {
  var _0x8e22x2 = this[_0xee2b[696]]();
  _0x8e22x3 = _0x8e22x3 && Ext[_0xee2b[132]][_0xee2b[131]](_0x8e22x3);
  if (this[_0xee2b[696]]()) {
    this[_0xee2b[325]](this[_0xee2b[696]](), _0xee2b[439], this[_0xee2b[2545]], this);
  }
  var _0x8e22x5 = this[_0xee2b[1007]]();
  var _0x8e22x1 = this[_0xee2b[1051]]();
  var _0x8e22x4 = this[_0xee2b[1306]]();
  this[_0xee2b[1071]] = _0x8e22x3;
  if (_0x8e22x5 && _0x8e22x3) {
    _0x8e22x5[_0xee2b[1407]](_0x8e22x3);
  }
  if (_0x8e22x1 && _0x8e22x3 && !_0x8e22x3[_0xee2b[1051]]()) {
    _0x8e22x3[_0xee2b[1410]](_0x8e22x1);
  }
  if (_0x8e22x4 && _0x8e22x3 && !_0x8e22x3[_0xee2b[1306]]()) {
    _0x8e22x3[_0xee2b[1412]](_0x8e22x4);
  }
  var _0x8e22x6 = this[_0xee2b[808]]();
  _0x8e22x6 && _0x8e22x6[_0xee2b[1407]](_0x8e22x3);
  if (this[_0xee2b[2544]]) {
    this[_0xee2b[2544]][_0xee2b[1407]](_0x8e22x3);
  }
  if (_0x8e22x3) {
    this[_0xee2b[180]](_0xee2b[1074], this, _0x8e22x3, _0x8e22x2);
    if (this[_0xee2b[2546]]) {
      this[_0xee2b[252]](_0x8e22x3, _0xee2b[439], this[_0xee2b[2545]], this);
    }
    this[_0xee2b[2543]](false);
  }
}, applyStartEndParameters:function(_0x8e22x4, _0x8e22x3) {
  var _0x8e22x6 = _0x8e22x4[_0xee2b[1700]]();
  _0x8e22x6[_0xee2b[2548]](this[_0xee2b[2547]], this[_0xee2b[697]]());
  _0x8e22x6[_0xee2b[2548]](this[_0xee2b[2549]], this[_0xee2b[698]]());
}, getAssignmentStore:function() {
  var _0x8e22x6 = this, _0x8e22x3 = _0x8e22x6[_0xee2b[696]]();
  return _0x8e22x3 && _0x8e22x3[_0xee2b[304]] && _0x8e22x3[_0xee2b[1051]]() || _0x8e22x6[_0xee2b[1003]];
}, setAssignmentStore:function(_0x8e22x3) {
  var _0x8e22x6 = this[_0xee2b[1051]]();
  this[_0xee2b[696]]()[_0xee2b[1410]](_0x8e22x3);
  if (_0x8e22x3) {
    this[_0xee2b[180]](_0xee2b[1411], this, _0x8e22x3, _0x8e22x6);
    this[_0xee2b[2543]](false);
  }
}, getDependencyStore:function() {
  var _0x8e22x6 = this, _0x8e22x3 = _0x8e22x6[_0xee2b[696]]();
  return _0x8e22x3 && _0x8e22x3[_0xee2b[304]] && _0x8e22x3[_0xee2b[1306]]() || _0x8e22x6[_0xee2b[1303]];
}, setDependencyStore:function(_0x8e22x3) {
  var _0x8e22x6 = this[_0xee2b[1306]]();
  this[_0xee2b[696]]()[_0xee2b[1412]](_0x8e22x3);
  if (_0x8e22x3) {
    this[_0xee2b[180]](_0xee2b[1413], this, _0x8e22x3, _0x8e22x6);
    this[_0xee2b[2543]](false);
  }
}, createResourceColumns:function(_0x8e22x3) {
  return Ext[_0xee2b[26]][_0xee2b[41]](this[_0xee2b[1302]][_0xee2b[1005]](), function(_0x8e22x6) {
    return {xclass:this[_0xee2b[2550]], renderer:this[_0xee2b[2551]], scope:this, width:_0x8e22x3 || 100, text:_0x8e22x6[_0xee2b[497]](), model:_0x8e22x6};
  }, this);
}, registerEventEditor:function(_0x8e22x3) {
  this[_0xee2b[808]]()[_0xee2b[2552]](_0x8e22x3);
}});
Ext[_0xee2b[6]](_0xee2b[2553], {extend:_0xee2b[717], eventPrefix:null, resizeHandles:null, resizeTpl:_0xee2b[2554], terminalSides:null, terminalTpl:_0xee2b[2555], constructor:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  Ext[_0xee2b[8]](_0x8e22x6, _0x8e22x3);
  _0x8e22x6[_0xee2b[9]]([this[_0xee2b[2556]]()]);
}, getOuterMarkup:function() {
  var _0x8e22x3 = this;
  var _0x8e22x6 = Ext[_0xee2b[26]][_0xee2b[41]](_0x8e22x3[_0xee2b[2557]] || [], function(_0x8e22x4) {
    return _0x8e22x3[_0xee2b[2558]][_0xee2b[675]](/SIDE/, _0x8e22x4);
  })[_0xee2b[73]](_0xee2b[27]);
  return [_0xee2b[1812], _0xee2b[2559], _0x8e22x3[_0xee2b[2560]], _0xee2b[2561], Ext[_0xee2b[238]], _0xee2b[2562], _0x8e22x3[_0xee2b[2563]] === _0xee2b[179] || _0x8e22x3[_0xee2b[2563]] === _0xee2b[1911] ? _0x8e22x3[_0xee2b[2564]][_0xee2b[675]](/DIR/, _0xee2b[179]) : _0xee2b[27], _0xee2b[2565], _0xee2b[2566], this[_0xee2b[2567]](), _0xee2b[1815], _0x8e22x3[_0xee2b[2563]] === _0xee2b[771] || _0x8e22x3[_0xee2b[2563]] === _0xee2b[1911] ? _0x8e22x3[_0xee2b[2564]][_0xee2b[675]](/DIR/, _0xee2b[771]) : _0xee2b[27], 
  _0x8e22x6, _0xee2b[1815], _0xee2b[1816]][_0xee2b[73]](_0xee2b[27]);
}, getInnerMarkup:function() {
  return _0xee2b[2568];
}});
Ext[_0xee2b[6]](_0xee2b[2569], {requires:[_0xee2b[1950], _0xee2b[2570], _0xee2b[34], _0xee2b[1140]], view:null, constructor:function(_0x8e22x3) {
  Ext[_0xee2b[8]](this, _0x8e22x3);
}, getElementsFromEventRecord:function(_0x8e22x6, _0x8e22x2, _0x8e22x5, _0x8e22x4) {
  var _0x8e22x3 = this[_0xee2b[829]], _0x8e22x1;
  _0x8e22x4 = _0x8e22x4 || false;
  if (_0x8e22x2) {
    _0x8e22x1 = _0xee2b[2571] + _0x8e22x3[_0xee2b[2560]] + _0x8e22x6[_0xee2b[1049]] + _0xee2b[1131] + _0x8e22x2[_0xee2b[1049]] + _0xee2b[2572];
  } else {
    _0x8e22x1 = _0xee2b[2571] + _0x8e22x3[_0xee2b[2560]] + _0x8e22x6[_0xee2b[1049]] + _0xee2b[2572];
  }
  return _0x8e22x3[_0xee2b[787]]()[_0xee2b[2573]](_0x8e22x1, _0x8e22x4);
}, translateToScheduleCoordinate:function(_0x8e22x6) {
  var _0x8e22x3 = this[_0xee2b[829]];
  return _0x8e22x6 - _0x8e22x3[_0xee2b[2574]]() + _0x8e22x3[_0xee2b[1922]]();
}, translateToPageCoordinate:function(_0x8e22x4) {
  var _0x8e22x6 = this[_0xee2b[829]];
  var _0x8e22x3 = _0x8e22x6[_0xee2b[1922]]();
  return _0x8e22x4 + _0x8e22x6[_0xee2b[2574]]() - _0x8e22x3;
}, getDateFromXY:function(_0x8e22x4, _0x8e22x6, _0x8e22x3) {
  var _0x8e22x5 = _0x8e22x4[1];
  if (!_0x8e22x3) {
    _0x8e22x5 = this[_0xee2b[2575]](_0x8e22x5);
  }
  return this[_0xee2b[829]][_0xee2b[810]][_0xee2b[2576]](_0x8e22x5, _0x8e22x6);
}, getEventRenderData:function(_0x8e22x3, _0x8e22x6) {
  var _0x8e22x7 = Math, _0x8e22x9 = _0x8e22x3[_0xee2b[712]](), _0x8e22x1 = _0x8e22x3[_0xee2b[713]](), _0x8e22xa = this[_0xee2b[829]], _0x8e22x2 = _0x8e22xa[_0xee2b[1795]][_0xee2b[697]](), _0x8e22x8 = _0x8e22xa[_0xee2b[1795]][_0xee2b[698]](), _0x8e22x5 = _0x8e22x7[_0xee2b[424]](_0x8e22xa[_0xee2b[1895]](Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[715]](_0x8e22x9, _0x8e22x2))), _0x8e22xd = _0x8e22x7[_0xee2b[424]](_0x8e22xa[_0xee2b[1895]](Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[203]](_0x8e22x1, _0x8e22x8))), 
  _0x8e22x4 = {event:_0x8e22x3};
  _0x8e22x4[_0xee2b[686]] = _0x8e22x7[_0xee2b[715]](0, _0x8e22x7[_0xee2b[203]](_0x8e22x5, _0x8e22xd) - _0x8e22xa[_0xee2b[2577]]);
  _0x8e22x4[_0xee2b[747]] = _0x8e22x7[_0xee2b[715]](1, _0x8e22x7[_0xee2b[1524]](_0x8e22x5 - _0x8e22xd));
  _0x8e22x4[_0xee2b[179]] = _0x8e22x9;
  _0x8e22x4[_0xee2b[771]] = _0x8e22x1;
  _0x8e22x4[_0xee2b[2275]] = _0x8e22x9 < _0x8e22x2;
  _0x8e22x4[_0xee2b[2277]] = _0x8e22x1 > _0x8e22x8;
  return _0x8e22x4;
}, getScheduleRegion:function(_0x8e22x5, _0x8e22x1) {
  var _0x8e22x7 = this[_0xee2b[829]], _0x8e22x9 = _0x8e22x5 ? Ext[_0xee2b[761]](_0x8e22x7[_0xee2b[2578]](_0x8e22x7[_0xee2b[2520]]()[0], _0x8e22x7[_0xee2b[1007]]()[_0xee2b[147]](_0x8e22x5)))[_0xee2b[1945]]() : _0x8e22x7[_0xee2b[2579]](), _0x8e22x2 = _0x8e22x7[_0xee2b[1795]][_0xee2b[697]](), _0x8e22xd = _0x8e22x7[_0xee2b[1795]][_0xee2b[698]](), _0x8e22x3 = _0x8e22x7[_0xee2b[2060]](_0x8e22x5, _0x8e22x1) || {start:_0x8e22x2, end:_0x8e22xd}, _0x8e22x4 = this[_0xee2b[2580]](_0x8e22x7[_0xee2b[1895]](Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[715]](_0x8e22x2, 
  _0x8e22x3[_0xee2b[179]]))), _0x8e22x8 = this[_0xee2b[2580]](_0x8e22x7[_0xee2b[1895]](Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[203]](_0x8e22xd, _0x8e22x3[_0xee2b[771]]))), _0x8e22x6 = _0x8e22x9[_0xee2b[1354]] + _0x8e22x7[_0xee2b[1800]], _0x8e22xa = (_0x8e22x5 ? _0x8e22x9[_0xee2b[1354]] + this[_0xee2b[2581]](_0x8e22x5) : _0x8e22x9[_0xee2b[867]]) - _0x8e22x7[_0xee2b[1800]];
  return new Ext[_0xee2b[49]].Region(Math[_0xee2b[203]](_0x8e22x4, _0x8e22x8), _0x8e22xa, Math[_0xee2b[715]](_0x8e22x4, _0x8e22x8), _0x8e22x6);
}, getResourceColumnWidth:function(_0x8e22x3) {
  return this[_0xee2b[829]][_0xee2b[810]][_0xee2b[2582]];
}, getResourceColumnLayoutAvailableWidth:function(_0x8e22x6) {
  var _0x8e22x3 = this;
  return _0x8e22x3[_0xee2b[2581]](_0x8e22x6) - 2 * _0x8e22x3[_0xee2b[829]][_0xee2b[1800]] - _0x8e22x3[_0xee2b[829]][_0xee2b[2583]];
}, getResourceRegion:function(_0x8e22x7, _0x8e22x6, _0x8e22x9) {
  var _0x8e22x8 = this[_0xee2b[829]], _0x8e22x2 = _0x8e22x8[_0xee2b[1007]]()[_0xee2b[147]](_0x8e22x7) * this[_0xee2b[2581]](_0x8e22x7), _0x8e22xa = _0x8e22x8[_0xee2b[1795]][_0xee2b[697]](), _0x8e22xe = _0x8e22x8[_0xee2b[1795]][_0xee2b[698]](), _0x8e22x3 = _0x8e22x6 ? Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[715]](_0x8e22xa, _0x8e22x6) : _0x8e22xa, _0x8e22x5 = _0x8e22x9 ? Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[203]](_0x8e22xe, _0x8e22x9) : _0x8e22xe, _0x8e22x1 = Math[_0xee2b[715]](0, _0x8e22x8[_0xee2b[1895]](_0x8e22x3) - 
  _0x8e22x8[_0xee2b[2584]]), _0x8e22x10 = _0x8e22x8[_0xee2b[1895]](_0x8e22x5) - _0x8e22x8[_0xee2b[2584]], _0x8e22x4 = _0x8e22x2 + _0x8e22x8[_0xee2b[2583]], _0x8e22xd = _0x8e22x2 + this[_0xee2b[2581]](_0x8e22x7) - _0x8e22x8[_0xee2b[2583]];
  return new Ext[_0xee2b[49]].Region(Math[_0xee2b[203]](_0x8e22x1, _0x8e22x10), _0x8e22xd, Math[_0xee2b[715]](_0x8e22x1, _0x8e22x10), _0x8e22x4);
}, columnRenderer:function(_0x8e22x1, _0x8e22x19, _0x8e22xe, _0x8e22xc, _0x8e22x11) {
  var _0x8e22xb = this[_0xee2b[829]];
  var _0x8e22x2 = _0xee2b[27];
  if (_0x8e22xc === 0) {
    var _0x8e22x3 = Sch[_0xee2b[49]][_0xee2b[703]], _0x8e22xd = _0x8e22xb[_0xee2b[1795]], _0x8e22xf, _0x8e22x4, _0x8e22x8, _0x8e22x9;
    _0x8e22xf = [];
    _0x8e22x4 = _0x8e22xb[_0xee2b[696]]()[_0xee2b[699]](_0x8e22xe);
    for (_0x8e22x8 = 0, _0x8e22x9 = _0x8e22x4[_0xee2b[4]]; _0x8e22x8 < _0x8e22x9; _0x8e22x8++) {
      var _0x8e22x6 = _0x8e22x4[_0x8e22x8], _0x8e22x5 = _0x8e22x6[_0xee2b[712]](), _0x8e22x7 = _0x8e22x6[_0xee2b[713]]();
      if (_0x8e22x5 && _0x8e22x7 && _0x8e22xd[_0xee2b[1765]](_0x8e22x5, _0x8e22x7)) {
        _0x8e22xf[_0xee2b[11]](_0x8e22xb[_0xee2b[2585]](_0x8e22x6, _0x8e22xe, _0x8e22x11));
      }
    }
    _0x8e22xb[_0xee2b[2587]][_0xee2b[1932]][_0xee2b[1788]](_0x8e22xf, this[_0xee2b[2586]](_0x8e22xe));
    _0x8e22x2 = _0xee2b[2588] + _0x8e22xb[_0xee2b[2589]][_0xee2b[8]](_0x8e22xf);
  }
  if (_0x8e22x11 % 2 === 1) {
    _0x8e22x19[_0xee2b[477]] = (_0x8e22x19[_0xee2b[477]] || _0xee2b[27]) + _0xee2b[60] + _0x8e22xb[_0xee2b[2590]];
    _0x8e22x19[_0xee2b[2591]] = (_0x8e22x19[_0xee2b[2591]] || _0xee2b[27]) + _0xee2b[60] + _0x8e22xb[_0xee2b[2590]];
  }
  return _0x8e22x2;
}, resolveResource:function(_0x8e22x1) {
  var _0x8e22x2 = this, _0x8e22x6 = _0x8e22x2[_0xee2b[829]], _0x8e22x5, _0x8e22x4 = -1, _0x8e22x3;
  _0x8e22x5 = Ext[_0xee2b[761]](_0x8e22x1)[_0xee2b[2592]](_0x8e22x6[_0xee2b[2034]]) && _0x8e22x1 || Ext[_0xee2b[761]](_0x8e22x1)[_0xee2b[694]](_0x8e22x6[_0xee2b[2034]], null, true);
  if (_0x8e22x5) {
    _0x8e22x3 = _0x8e22x6[_0xee2b[2593]](_0x8e22x5[_0xee2b[388]]);
  } else {
    _0x8e22x1 = Ext[_0xee2b[761]](_0x8e22x1)[_0xee2b[2592]](_0x8e22x6[_0xee2b[2594]]) ? _0x8e22x1 : Ext[_0xee2b[761]](_0x8e22x1)[_0xee2b[694]](_0x8e22x6[_0xee2b[2594]], null, true);
    if (_0x8e22x1) {
      _0x8e22x4 = Ext[_0xee2b[26]][_0xee2b[147]](Array[_0xee2b[139]][_0xee2b[191]][_0xee2b[293]](_0x8e22x1[_0xee2b[96]][_0xee2b[375]]), _0x8e22x1);
    }
    _0x8e22x3 = _0x8e22x4 >= 0 && _0x8e22x6[_0xee2b[1007]]()[_0xee2b[1752]](_0x8e22x4) || null;
  }
  return _0x8e22x3;
}, onEventUpdate:function(_0x8e22x10, _0x8e22x3) {
  var _0x8e22xa = this;
  var _0x8e22x9 = _0x8e22x3[_0xee2b[52]] || {};
  var _0x8e22x8 = _0x8e22xa[_0xee2b[829]];
  var _0x8e22x1 = _0x8e22x8[_0xee2b[1795]];
  var _0x8e22x6 = _0x8e22x3[_0xee2b[712]]();
  var _0x8e22x7 = _0x8e22x3[_0xee2b[713]]();
  var _0x8e22x4 = _0x8e22x9[_0xee2b[1199]] || _0x8e22x6;
  var _0x8e22x2 = _0x8e22x9[_0xee2b[1200]] || _0x8e22x7;
  var _0x8e22xd = _0x8e22x4 && _0x8e22x2 && _0x8e22x1[_0xee2b[1765]](_0x8e22x4, _0x8e22x2);
  var _0x8e22x5;
  if (_0x8e22x3[_0xee2b[1009]] in _0x8e22x9 && _0x8e22xd) {
    _0x8e22x5 = _0x8e22x10[_0xee2b[1007]]()[_0xee2b[395]](_0x8e22x9[_0x8e22x3[_0xee2b[1009]]]);
    _0x8e22x5 && _0x8e22xa[_0xee2b[2595]](_0x8e22x5);
  }
  if (_0x8e22x6 && _0x8e22x7 && _0x8e22x1[_0xee2b[1765]](_0x8e22x6, _0x8e22x7) || _0x8e22xd) {
    _0x8e22xa[_0xee2b[2596]](_0x8e22x3);
    Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x3[_0xee2b[1427]](), function(_0x8e22xe) {
      _0x8e22xa[_0xee2b[2595]](_0x8e22xe);
      _0x8e22x8[_0xee2b[2256]]()[_0xee2b[2597]](_0x8e22x3) && _0x8e22x8[_0xee2b[2598]](_0x8e22x3, true);
    });
  }
}, onEventAdd:function(_0x8e22x4, _0x8e22x1) {
  var _0x8e22x2 = this, _0x8e22x6 = _0x8e22x2[_0xee2b[829]], _0x8e22x5, _0x8e22x3, _0x8e22x9;
  if (_0x8e22x1[_0xee2b[4]] === 1) {
    _0x8e22x5 = _0x8e22x1[0];
    _0x8e22x3 = _0x8e22x5[_0xee2b[712]]();
    _0x8e22x9 = _0x8e22x5[_0xee2b[713]]();
    if (_0x8e22x3 && _0x8e22x9 && _0x8e22x6[_0xee2b[1795]][_0xee2b[1765]](_0x8e22x3, _0x8e22x9)) {
      _0x8e22x2[_0xee2b[2596]](_0x8e22x5);
      Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x4[_0xee2b[1093]](_0x8e22x5), function(_0x8e22x7) {
        _0x8e22x2[_0xee2b[2595]](_0x8e22x7);
      });
    }
  } else {
    _0x8e22x6[_0xee2b[2599]]();
  }
}, onEventRemove:function(_0x8e22xd, _0x8e22x8) {
  var _0x8e22x9 = this, _0x8e22x7 = _0x8e22x9[_0xee2b[829]], _0x8e22x3, _0x8e22x4, _0x8e22x2, _0x8e22x5, _0x8e22x1, _0x8e22x6;
  for (_0x8e22x6 = false, _0x8e22x5 = 0, _0x8e22x1 = _0x8e22x8[_0xee2b[4]]; !_0x8e22x6 && _0x8e22x5 < _0x8e22x1; _0x8e22x5++) {
    _0x8e22x3 = _0x8e22x8[_0x8e22x5];
    _0x8e22x4 = _0x8e22x3[_0xee2b[712]]();
    _0x8e22x2 = _0x8e22x3[_0xee2b[713]]();
    _0x8e22x6 = _0x8e22x4 && _0x8e22x2 && _0x8e22x7[_0xee2b[1795]][_0xee2b[1765]](_0x8e22x4, _0x8e22x2);
    _0x8e22x6 && Ext[_0xee2b[2600]](function() {
      _0x8e22x7[_0xee2b[2599]]();
    });
  }
}, getScheduledEventsForResource:function(_0x8e22x6) {
  var _0x8e22x3 = this[_0xee2b[829]];
  return _0x8e22x3[_0xee2b[696]]()[_0xee2b[2602]](_0x8e22x6, function(_0x8e22x4) {
    return _0x8e22x3[_0xee2b[1795]][_0xee2b[2601]](_0x8e22x4) && _0x8e22x4[_0xee2b[1205]]();
  });
}, relayoutRenderedEvents:function(_0x8e22x5) {
  var _0x8e22x4 = [], _0x8e22x3 = this[_0xee2b[829]], _0x8e22x6 = this[_0xee2b[2603]](_0x8e22x5);
  Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x6, function(_0x8e22x1) {
    var _0x8e22x2 = _0x8e22x3[_0xee2b[2191]](_0x8e22x1, _0x8e22x5);
    _0x8e22x2[_0xee2b[4]] && _0x8e22x4[_0xee2b[11]]({start:_0x8e22x1[_0xee2b[712]](), end:_0x8e22x1[_0xee2b[713]](), event:_0x8e22x1, node:_0x8e22x2[0]});
  });
  _0x8e22x3[_0xee2b[2587]][_0xee2b[1932]][_0xee2b[1788]](_0x8e22x4, this[_0xee2b[2586]](_0x8e22x5));
  Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x4, function(_0x8e22x2) {
    _0x8e22x2[_0xee2b[2604]][_0xee2b[2051]]({left:_0x8e22x2[_0xee2b[1354]] + _0xee2b[804], width:_0x8e22x2[_0xee2b[773]] + _0xee2b[804]});
    _0x8e22x3[_0xee2b[180]](_0xee2b[2605], _0x8e22x3, _0x8e22x2[_0xee2b[1440]], _0x8e22x2[_0xee2b[2604]]);
  });
}, renderSingle:function(_0x8e22x4) {
  var _0x8e22x6 = this[_0xee2b[829]], _0x8e22x3 = _0x8e22x4[_0xee2b[712]](), _0x8e22x5 = _0x8e22x4[_0xee2b[713]]();
  Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x6[_0xee2b[2191]](_0x8e22x4), function(_0x8e22x2) {
    _0x8e22x2[_0xee2b[218]]();
  });
  if (_0x8e22x3 && _0x8e22x5 && _0x8e22x6[_0xee2b[1795]][_0xee2b[1765]](_0x8e22x3, _0x8e22x5)) {
    Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x4[_0xee2b[1427]](), function(_0x8e22x7) {
      var _0x8e22x9 = _0x8e22x6[_0xee2b[1007]]()[_0xee2b[147]](_0x8e22x7), _0x8e22x2 = Ext[_0xee2b[761]](_0x8e22x6[_0xee2b[2578]](0, _0x8e22x9)), _0x8e22x1;
      if (_0x8e22x2) {
        _0x8e22x1 = _0x8e22x6[_0xee2b[2585]](_0x8e22x4, _0x8e22x7, _0x8e22x9);
        _0x8e22x1 && _0x8e22x6[_0xee2b[2589]][_0xee2b[384]](_0x8e22x2[_0xee2b[572]](), [_0x8e22x1]);
      }
    });
  }
}, getTimeSpanRegion:function(_0x8e22x6, _0x8e22x9) {
  var _0x8e22x5 = this[_0xee2b[829]], _0x8e22x3 = _0x8e22x5[_0xee2b[1895]](_0x8e22x6), _0x8e22x1 = _0x8e22x9 ? _0x8e22x5[_0xee2b[1895]](_0x8e22x9) : _0x8e22x3, _0x8e22x4 = _0x8e22x5[_0xee2b[2579]](), _0x8e22x2 = _0x8e22x4 ? _0x8e22x4[_0xee2b[867]] - _0x8e22x4[_0xee2b[1354]] : _0x8e22x5[_0xee2b[787]]()[_0xee2b[758]][_0xee2b[2606]];
  return new Ext[_0xee2b[49]].Region(Math[_0xee2b[203]](_0x8e22x3, _0x8e22x1), _0x8e22x2, Math[_0xee2b[715]](_0x8e22x3, _0x8e22x1), 0);
}, getStartEndDatesFromRegion:function(_0x8e22x4, _0x8e22x6) {
  var _0x8e22x3 = this[_0xee2b[829]][_0xee2b[807]](_0x8e22x4[_0xee2b[686]], _0x8e22x6), _0x8e22x5 = this[_0xee2b[829]][_0xee2b[807]](_0x8e22x4[_0xee2b[754]], _0x8e22x6);
  if (_0x8e22x3 && _0x8e22x5) {
    return {start:_0x8e22x3, end:_0x8e22x5};
  } else {
    return null;
  }
}, setColumnWidth:function(_0x8e22x4, _0x8e22x6) {
  var _0x8e22x3 = this[_0xee2b[829]];
  _0x8e22x3[_0xee2b[2582]] = _0x8e22x4;
  _0x8e22x3[_0xee2b[1858]]()[_0xee2b[2607]](_0x8e22x4, _0x8e22x6);
}, getVisibleDateRange:function() {
  var _0x8e22x2 = this[_0xee2b[829]];
  if (!_0x8e22x2[_0xee2b[262]]) {
    return null;
  }
  var _0x8e22x4 = _0x8e22x2[_0xee2b[1966]](), _0x8e22x6 = _0x8e22x2[_0xee2b[2608]](), _0x8e22x5 = _0x8e22x2[_0xee2b[2579]](), _0x8e22x1 = _0x8e22x2[_0xee2b[1795]][_0xee2b[698]]();
  if (_0x8e22x5[_0xee2b[754]] - _0x8e22x5[_0xee2b[686]] < _0x8e22x6) {
    var _0x8e22x3 = _0x8e22x2[_0xee2b[1795]][_0xee2b[697]]();
    return {startDate:_0x8e22x3, endDate:_0x8e22x1};
  }
  return {startDate:_0x8e22x2[_0xee2b[807]](_0x8e22x4[_0xee2b[686]], null, true), endDate:_0x8e22x2[_0xee2b[807]](_0x8e22x4[_0xee2b[686]] + _0x8e22x6, null, true) || _0x8e22x1};
}, getItemBox:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  return Ext[_0xee2b[26]][_0xee2b[41]](_0x8e22x3[_0xee2b[1427]](), function(_0x8e22x4) {
    return _0x8e22x6[_0xee2b[2609]](_0x8e22x3, _0x8e22x4);
  });
}, getResourceEventBox:function(_0x8e22x1, _0x8e22x9) {
  var _0x8e22xa = Sch[_0xee2b[49]][_0xee2b[703]], _0x8e22x18 = this, _0x8e22xd = null, _0x8e22xe = _0x8e22x18[_0xee2b[829]], _0x8e22x8 = _0x8e22xe[_0xee2b[1795]][_0xee2b[697]](), _0x8e22x7 = _0x8e22xe[_0xee2b[1795]][_0xee2b[698]](), _0x8e22x11 = _0x8e22x1[_0xee2b[712]](), _0x8e22x10 = _0x8e22x1[_0xee2b[713]](), _0x8e22xc, _0x8e22xf, _0x8e22x19, _0x8e22x5, _0x8e22xb, _0x8e22x6, _0x8e22x3, _0x8e22x4;
  if (_0x8e22x11 && _0x8e22x10 && _0x8e22xa[_0xee2b[714]](_0x8e22x11, _0x8e22x10, _0x8e22x8, _0x8e22x7)) {
    if (_0x8e22xe[_0xee2b[2610]]) {
      _0x8e22xc = _0x8e22xe[_0xee2b[2587]][_0xee2b[1932]];
      var _0x8e22x2 = _0x8e22xe[_0xee2b[696]]()[_0xee2b[2602]](_0x8e22x9, _0x8e22xe[_0xee2b[1795]][_0xee2b[2601]], _0x8e22xe[_0xee2b[1795]]);
      _0x8e22xf = Ext[_0xee2b[26]][_0xee2b[41]](_0x8e22x2, _0x8e22x18[_0xee2b[2522]], _0x8e22x18);
      _0x8e22xc[_0xee2b[1788]](_0x8e22xf, _0x8e22x18[_0xee2b[2586]](_0x8e22x9));
      _0x8e22x19 = Ext[_0xee2b[26]][_0xee2b[1761]](_0x8e22xf, function(_0x8e22x15) {
        return _0x8e22x15[_0xee2b[1440]] == _0x8e22x1;
      });
      if (_0x8e22x19) {
        _0x8e22x5 = _0x8e22xe[_0xee2b[1007]]()[_0xee2b[147]](_0x8e22x9) * _0x8e22x18[_0xee2b[2581]](_0x8e22x9);
        _0x8e22xd = {rendered:true, start:_0x8e22x19[_0xee2b[1354]] + _0x8e22x5, end:_0x8e22x19[_0xee2b[1354]] + _0x8e22x19[_0xee2b[773]] + _0x8e22x5, top:_0x8e22x19[_0xee2b[686]], bottom:_0x8e22x19[_0xee2b[686]] + _0x8e22x19[_0xee2b[747]]};
      }
    } else {
      _0x8e22xb = _0x8e22xe[_0xee2b[2191]](_0x8e22x1, _0x8e22x1 !== _0x8e22x9 && _0x8e22x9);
      if (_0x8e22xb[_0xee2b[4]]) {
        _0x8e22x6 = _0x8e22xb[0];
        _0x8e22x3 = _0x8e22x6[_0xee2b[2264]](_0x8e22xe[_0xee2b[787]]());
        _0x8e22x4 = _0x8e22x6[_0xee2b[2611]]();
        _0x8e22xd = {rendered:true, start:_0x8e22x3[0], end:_0x8e22x3[0] + _0x8e22x4[_0xee2b[773]], top:_0x8e22x3[1], bottom:_0x8e22x3[1] + _0x8e22x4[_0xee2b[747]]};
      }
    }
    if (_0x8e22xd) {
      _0x8e22xd = _0x8e22x18[_0xee2b[2612]](_0x8e22x1, _0x8e22xd);
    }
  }
  return _0x8e22xd;
}, adjustItemBox:function(_0x8e22x3, _0x8e22x6) {
  return _0x8e22x6;
}, getConnectorStartSide:function(_0x8e22x3) {
  return _0xee2b[686];
}, getConnectorEndSide:function(_0x8e22x3) {
  return _0xee2b[754];
}});
Ext[_0xee2b[6]](_0xee2b[2613], {requires:[_0xee2b[2553], _0xee2b[1786], _0xee2b[2569], _0xee2b[1797]], _cmpCls:_0xee2b[2614], scheduledEventName:_0xee2b[1440], eventTemplateClass:_0xee2b[2553], eventTpl:null, barMargin:0, constrainDragToResource:false, allowOverlap:null, readOnly:null, altColCls:_0xee2b[2615], highlightedEventCls:_0xee2b[2616], highlightDirtyEvents:false, dynamicRowHeight:true, managedEventSizing:true, eventAnimations:true, horizontalLayoutCls:_0xee2b[1786], horizontalEventSorterFn:null, 
verticalLayoutCls:_0xee2b[1797], verticalEventSorterFn:null, eventCls:_0xee2b[2617], verticalViewClass:_0xee2b[2569], eventStore:null, resourceStore:null, eventLayout:null, terminalSides:null, _initializeSchedulerView:function() {
  var _0x8e22x3 = Ext[_0xee2b[502]][_0xee2b[55]](this[_0xee2b[2618]]);
  var _0x8e22x6 = Ext[_0xee2b[502]][_0xee2b[55]](this[_0xee2b[2619]]);
  this[_0xee2b[2034]] = _0xee2b[495] + this[_0xee2b[2620]];
  this[_0xee2b[2587]] = {};
  this[_0xee2b[2589]] = this[_0xee2b[2589]] || Ext[_0xee2b[831]](this[_0xee2b[2621]], {eventPrefix:this[_0xee2b[2560]], terminalSides:this[_0xee2b[2557]], resizeHandles:this[_0xee2b[2622]]});
  if (_0x8e22x3) {
    this[_0xee2b[2587]][_0xee2b[1931]] = new _0x8e22x3(Ext[_0xee2b[8]]({timeAxisViewModel:this[_0xee2b[810]]}, {bandIndexToPxConvertFn:this[_0xee2b[1931]][_0xee2b[2623]], bandIndexToPxConvertScope:this[_0xee2b[1931]]}, this[_0xee2b[2624]] ? {sortEvents:this[_0xee2b[2624]]} : {}));
  }
  if (_0x8e22x6) {
    this[_0xee2b[2587]][_0xee2b[1932]] = new _0x8e22x6(Ext[_0xee2b[8]]({view:this}, this[_0xee2b[2625]] ? {sortEvents:this[_0xee2b[2625]]} : {}));
  }
  this[_0xee2b[64]] = this[_0xee2b[64]] || this[_0xee2b[1302]];
  this[_0xee2b[1302]] = this[_0xee2b[1302]] || this[_0xee2b[64]];
}, generateTplData:function(_0x8e22x2, _0x8e22x5, _0x8e22x4) {
  var _0x8e22x9 = this[this[_0xee2b[1719]]][_0xee2b[2522]](_0x8e22x2, _0x8e22x5, _0x8e22x4), _0x8e22x7 = _0x8e22x2[_0xee2b[712]](), _0x8e22x6 = _0x8e22x2[_0xee2b[713]](), _0x8e22x3 = _0x8e22x2[_0xee2b[1284]]() || _0xee2b[27];
  _0x8e22x3 += _0xee2b[2626] + _0x8e22x2[_0xee2b[1609]]();
  if (_0x8e22x2[_0xee2b[92]]) {
    _0x8e22x3 += _0xee2b[2627];
  }
  if (_0x8e22x9[_0xee2b[2277]]) {
    _0x8e22x3 += _0xee2b[2628];
  }
  if (_0x8e22x9[_0xee2b[2275]]) {
    _0x8e22x3 += _0xee2b[2629];
  }
  if (_0x8e22x2[_0xee2b[2183]]() === false) {
    _0x8e22x3 += _0xee2b[2630];
  }
  if (_0x8e22x6 - _0x8e22x7 === 0) {
    _0x8e22x3 += _0xee2b[2631];
  }
  if (_0x8e22x2[_0xee2b[92]]) {
    _0x8e22x3 += _0xee2b[2627];
  }
  if (this[_0xee2b[2256]]()[_0xee2b[2597]](_0x8e22x2)) {
    _0x8e22x3 += _0xee2b[60] + this[_0xee2b[2632]] + _0xee2b[60];
  }
  if (_0x8e22x2[_0xee2b[1568]]) {
    if (_0x8e22x2[_0xee2b[1547]]()) {
      _0x8e22x3 += _0xee2b[2633];
    }
    if (_0x8e22x2[_0xee2b[1571]]()) {
      _0x8e22x3 += _0xee2b[2634];
    }
  }
  if (_0x8e22x2[_0xee2b[2635]] || (this[_0xee2b[2636]] ? _0x8e22x2[_0xee2b[92]] : false)) {
    _0x8e22x3 += _0xee2b[60] + this[_0xee2b[2637]] + _0xee2b[60];
  }
  if (this[_0xee2b[1847]]()) {
    _0x8e22x9[_0xee2b[388]] = _0x8e22x2[_0xee2b[1049]] + _0xee2b[2638] + _0x8e22x4 + _0xee2b[2639];
  } else {
    _0x8e22x9[_0xee2b[388]] = _0x8e22x2[_0xee2b[1049]] + _0xee2b[1131] + _0x8e22x5[_0xee2b[1049]] + _0xee2b[2639];
  }
  _0x8e22x9[_0xee2b[2640]] = _0x8e22x3;
  _0x8e22x9[_0xee2b[179]] = _0x8e22x7;
  _0x8e22x9[_0xee2b[771]] = _0x8e22x6;
  _0x8e22x9[_0xee2b[2641]] = _0x8e22x2[_0xee2b[22]][this[_0xee2b[2642]]] || _0x8e22x2[_0xee2b[2643]] && _0x8e22x2[_0xee2b[2643]]() || _0xee2b[27];
  _0x8e22x9[_0xee2b[1440]] = _0x8e22x2;
  if (this[_0xee2b[2644]]) {
    var _0x8e22x1 = this[_0xee2b[2644]][_0xee2b[293]](this[_0xee2b[2645]] || this, _0x8e22x2, _0x8e22x5, _0x8e22x9, _0x8e22x4);
    if (this[_0xee2b[2538]]) {
      _0x8e22x9[_0xee2b[2179]] = this[_0xee2b[2538]][_0xee2b[8]](_0x8e22x1);
    } else {
      _0x8e22x9[_0xee2b[2179]] = _0x8e22x1;
    }
  } else {
    if (this[_0xee2b[2538]]) {
      _0x8e22x9[_0xee2b[2179]] = this[_0xee2b[2538]][_0xee2b[8]](_0x8e22x2[_0xee2b[22]]);
    } else {
      if (this[_0xee2b[2646]]) {
        _0x8e22x9[_0xee2b[2179]] = Ext[_0xee2b[2647]](_0x8e22x2[_0xee2b[22]][this[_0xee2b[2646]]]) || _0xee2b[27];
      }
    }
  }
  return _0x8e22x9;
}, resolveResource:function(_0x8e22x6) {
  var _0x8e22x3 = this;
  return _0x8e22x3[_0x8e22x3[_0xee2b[1719]]][_0xee2b[2036]](_0x8e22x6);
}, getResourceRegion:function(_0x8e22x6, _0x8e22x3, _0x8e22x4) {
  return this[this[_0xee2b[1719]]][_0xee2b[2648]](_0x8e22x6, _0x8e22x3, _0x8e22x4);
}, resolveEventRecord:function(_0x8e22x3) {
  _0x8e22x3 = _0x8e22x3[_0xee2b[758]] ? _0x8e22x3[_0xee2b[758]] : _0x8e22x3;
  if (!Ext[_0xee2b[761]](_0x8e22x3)[_0xee2b[2592]](this[_0xee2b[2034]])) {
    _0x8e22x3 = Ext[_0xee2b[761]](_0x8e22x3)[_0xee2b[694]](this[_0xee2b[2034]]);
  }
  return _0x8e22x3 && this[_0xee2b[2649]](_0x8e22x3);
}, resolveEventRecordFromResourceRow:function(_0x8e22x3) {
  var _0x8e22x4 = this, _0x8e22x2 = _0x8e22x4[_0xee2b[2256]](), _0x8e22x5, _0x8e22x6;
  _0x8e22x3 = _0x8e22x3[_0xee2b[758]] ? _0x8e22x3[_0xee2b[758]] : _0x8e22x3;
  _0x8e22x5 = _0x8e22x4[_0xee2b[37]](_0x8e22x3);
  return _0x8e22x2[_0xee2b[2650]](_0x8e22x5);
}, resolveAssignmentRecord:function(_0x8e22x3) {
  var _0x8e22x4 = this, _0x8e22x2 = _0x8e22x4[_0xee2b[696]]()[_0xee2b[1051]](), _0x8e22x1 = null, _0x8e22x6, _0x8e22x5;
  if (_0x8e22x2) {
    _0x8e22x6 = _0x8e22x4[_0xee2b[2649]](_0x8e22x3);
    _0x8e22x5 = _0x8e22x4[_0xee2b[2651]](_0x8e22x3);
    if (_0x8e22x6 && _0x8e22x5) {
      _0x8e22x1 = _0x8e22x2[_0xee2b[1092]](_0x8e22x6, _0x8e22x5);
    }
  }
  return _0x8e22x1;
}, getEventRecordFromDomId:function(_0x8e22x3) {
  _0x8e22x3 = this[_0xee2b[2652]](_0x8e22x3);
  return this[_0xee2b[696]]()[_0xee2b[1013]](_0x8e22x3);
}, getEventRecordFromDomElement:function(_0x8e22x3) {
  return this[_0xee2b[2653]](_0x8e22x3[_0xee2b[388]]);
}, getResourceRecordFromDomId:function(_0x8e22x3) {
  _0x8e22x3 = this[_0xee2b[2654]](_0x8e22x3);
  return this[_0xee2b[1007]]()[_0xee2b[1015]](_0x8e22x3);
}, getResourceRecordFromDomElement:function(_0x8e22x3) {
  return this[_0xee2b[2593]](_0x8e22x3[_0xee2b[388]]);
}, isDateRangeAvailable:function(_0x8e22x5, _0x8e22x3, _0x8e22x6, _0x8e22x4) {
  return this[_0xee2b[696]]()[_0xee2b[2655]](_0x8e22x5, _0x8e22x3, _0x8e22x6, _0x8e22x4);
}, getEventsInView:function() {
  var _0x8e22x6 = this[_0xee2b[1795]][_0xee2b[697]](), _0x8e22x3 = this[_0xee2b[1795]][_0xee2b[698]]();
  return this[_0xee2b[696]]()[_0xee2b[2656]](_0x8e22x6, _0x8e22x3);
}, getEventNodes:function() {
  return this[_0xee2b[787]]()[_0xee2b[760]](this[_0xee2b[2034]]);
}, triggerHighlightEvents:function(_0x8e22x6, _0x8e22x3) {
  var _0x8e22x4 = this;
  var _0x8e22x5 = [];
  Ext[_0xee2b[26]][_0xee2b[25]]([][_0xee2b[318]](_0x8e22x6), function(_0x8e22x1) {
    _0x8e22x5[_0xee2b[11]][_0xee2b[8]](_0x8e22x5, _0x8e22x4[_0xee2b[2191]](_0x8e22x1, null, null, true));
  });
  var _0x8e22x2 = _0x8e22x3 !== false ? _0xee2b[264] : _0xee2b[267];
  Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x6, function(_0x8e22x1) {
    _0x8e22x1[_0xee2b[2635]] = _0x8e22x3;
  });
  Ext[_0xee2b[26]][_0xee2b[25]]([][_0xee2b[318]](_0x8e22x5), function(_0x8e22x1) {
    Ext[_0xee2b[761]](_0x8e22x1)[_0x8e22x2](_0x8e22x4[_0xee2b[2637]]);
  });
}, highlightEvents:function(_0x8e22x3) {
  this[_0xee2b[2657]](_0x8e22x3, true);
}, unhighlightEvents:function(_0x8e22x3) {
  this[_0xee2b[2657]](_0x8e22x3, false);
}, highlightEventsBy:function(_0x8e22x4, _0x8e22x6) {
  var _0x8e22x3 = this[_0xee2b[2658]]();
  this[_0xee2b[2660]](_0x8e22x3[_0xee2b[2659]](_0x8e22x4, _0x8e22x6)[_0xee2b[1005]]());
}, clearHighlightedEvents:function() {
  Ext[_0xee2b[26]][_0xee2b[25]](this[_0xee2b[696]]()[_0xee2b[1005]](), function(_0x8e22x3) {
    _0x8e22x3[_0xee2b[2635]] = false;
  });
  this[_0xee2b[787]]()[_0xee2b[760]](_0xee2b[495] + this[_0xee2b[2637]])[_0xee2b[267]](this[_0xee2b[2637]]);
}, onEventCreated:function(_0x8e22x3, _0x8e22x6) {
}, getEventStore:function() {
  return this[_0xee2b[1071]];
}, registerEventEditor:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  _0x8e22x6[_0xee2b[2661]] = _0x8e22x3;
  _0x8e22x6[_0xee2b[252]](_0x8e22x3[_0xee2b[2662]] || _0x8e22x3, {beforeeventadd:function() {
    var _0x8e22x4 = Ext[_0xee2b[26]][_0xee2b[2663]](arguments);
    Ext[_0xee2b[26]][_0xee2b[319]](_0x8e22x4, 0, 1, _0x8e22x6);
    return _0x8e22x6[_0xee2b[219]][_0xee2b[293]](_0x8e22x6, _0xee2b[2664], _0x8e22x4);
  }});
}, getEventEditor:function() {
  return this[_0xee2b[2661]];
}, onEventUpdate:function(_0x8e22x6, _0x8e22x4, _0x8e22x3) {
  this[this[_0xee2b[1719]]][_0xee2b[2315]](_0x8e22x6, _0x8e22x4, _0x8e22x3);
}, onEventAdd:function(_0x8e22x3, _0x8e22x6) {
  if (!Ext[_0xee2b[307]](_0x8e22x6)) {
    _0x8e22x6 = [_0x8e22x6];
  }
  this[this[_0xee2b[1719]]][_0xee2b[2378]](_0x8e22x3, _0x8e22x6);
}, onAssignmentAdd:function(_0x8e22x6, _0x8e22x3) {
  var _0x8e22x4 = this;
  Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x3, function(_0x8e22x2) {
    var _0x8e22x5 = _0x8e22x2[_0xee2b[1053]]();
    _0x8e22x5 && _0x8e22x4[_0xee2b[2437]](_0x8e22x5);
  });
}, onAssignmentUpdate:function(_0x8e22x5, _0x8e22x9) {
  var _0x8e22x1 = this, _0x8e22x3 = _0x8e22x9[_0xee2b[52]] && _0x8e22x9[_0xee2b[52]][_0x8e22x9[_0xee2b[1009]]], _0x8e22x2 = _0x8e22x9[_0xee2b[1008]](), _0x8e22x6, _0x8e22x4;
  if (_0x8e22x3) {
    _0x8e22x6 = _0x8e22x1[_0xee2b[1007]]()[_0xee2b[1012]](_0x8e22x3);
    _0x8e22x1[_0xee2b[2437]](_0x8e22x6);
  }
  if (_0x8e22x2) {
    _0x8e22x4 = _0x8e22x1[_0xee2b[1007]]()[_0xee2b[1012]](_0x8e22x2);
    _0x8e22x1[_0xee2b[2437]](_0x8e22x4);
  }
}, onAssignmentRemove:function(_0x8e22x6, _0x8e22x3) {
  var _0x8e22x4 = this;
  Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x3, function(_0x8e22x2) {
    var _0x8e22x1 = _0x8e22x2[_0xee2b[1008]]();
    var _0x8e22x5 = _0x8e22x1 && _0x8e22x4[_0xee2b[1007]]()[_0xee2b[1012]](_0x8e22x1);
    _0x8e22x5 && _0x8e22x4[_0xee2b[2437]](_0x8e22x5);
  });
}, onEventRemove:function(_0x8e22x3, _0x8e22x6) {
  this[this[_0xee2b[1719]]][_0xee2b[1077]](_0x8e22x3, _0x8e22x6);
}, setEventStore:function(_0x8e22x5, _0x8e22x6) {
  var _0x8e22x1 = this;
  var _0x8e22x7 = _0x8e22x1[_0xee2b[696]]();
  var _0x8e22x3 = {scope:_0x8e22x1, refresh:_0x8e22x1[_0xee2b[2665]], addrecords:_0x8e22x1[_0xee2b[2378]], updaterecord:_0x8e22x1[_0xee2b[2315]], removerecords:_0x8e22x1[_0xee2b[1077]], update:_0x8e22x1[_0xee2b[2315]], nodeinsert:_0x8e22x1[_0xee2b[2378]], nodeappend:_0x8e22x1[_0xee2b[2378]]};
  if (!(_0x8e22x5 && _0x8e22x5[_0xee2b[234]])) {
    _0x8e22x3[_0xee2b[63]] = _0x8e22x1[_0xee2b[1077]];
    _0x8e22x3[_0xee2b[255]] = _0x8e22x1[_0xee2b[2378]];
  }
  var _0x8e22x4 = {scope:_0x8e22x1, refresh:_0x8e22x1[_0xee2b[2665]], load:_0x8e22x1[_0xee2b[2665]], update:_0x8e22x1[_0xee2b[2317]], add:_0x8e22x1[_0xee2b[2666]], remove:_0x8e22x1[_0xee2b[2667]]};
  if (!Ext[_0xee2b[723]][_0xee2b[722]]) {
    _0x8e22x3[_0xee2b[231]] = _0x8e22x1[_0xee2b[2665]];
  }
  if (!_0x8e22x6 && _0x8e22x1[_0xee2b[1071]]) {
    if (_0x8e22x5) {
      _0x8e22x1[_0xee2b[1071]][_0xee2b[1408]](null);
    }
    if (_0x8e22x5 !== _0x8e22x1[_0xee2b[1071]] && _0x8e22x1[_0xee2b[1071]][_0xee2b[1875]]) {
      _0x8e22x1[_0xee2b[1071]][_0xee2b[218]]();
    } else {
      if (_0x8e22x1[_0xee2b[325]]) {
        _0x8e22x1[_0xee2b[325]](_0x8e22x1[_0xee2b[1071]], _0x8e22x3);
        var _0x8e22x2 = _0x8e22x1[_0xee2b[1071]][_0xee2b[1051]]();
        if (_0x8e22x2) {
          _0x8e22x1[_0xee2b[325]](_0x8e22x2, _0x8e22x4);
        }
      } else {
        _0x8e22x1[_0xee2b[1071]][_0xee2b[152]](_0x8e22x3);
      }
    }
    if (!_0x8e22x5) {
      _0x8e22x1[_0xee2b[1071]] = null;
    }
  }
  if (_0x8e22x5) {
    _0x8e22x5 = Ext[_0xee2b[22]][_0xee2b[132]][_0xee2b[131]](_0x8e22x5);
    if (_0x8e22x1[_0xee2b[252]]) {
      _0x8e22x1[_0xee2b[252]](_0x8e22x5, _0x8e22x3);
    } else {
      _0x8e22x5[_0xee2b[149]](_0x8e22x3);
    }
    _0x8e22x1[_0xee2b[1071]] = _0x8e22x5;
    _0x8e22x5[_0xee2b[1408]](_0x8e22x1[_0xee2b[1007]]());
    var _0x8e22x9 = _0x8e22x5[_0xee2b[1051]]();
    if (_0x8e22x9) {
      _0x8e22x1[_0xee2b[252]](_0x8e22x9, _0x8e22x4);
    }
  }
  if (_0x8e22x5 && !_0x8e22x6) {
    this[_0xee2b[1858]]()[_0xee2b[1407]](_0x8e22x5);
    this[_0xee2b[2256]]()[_0xee2b[145]](_0x8e22x5);
    this[_0xee2b[180]](_0xee2b[1074], this, _0x8e22x5, _0x8e22x7);
    _0x8e22x1[_0xee2b[2668]]();
  }
}, onEventDataRefresh:function() {
  this[_0xee2b[2669]]();
}, onEventBarSelect:function(_0x8e22x3) {
  var _0x8e22x4 = this, _0x8e22x6, _0x8e22x5;
  if (_0x8e22x3 && _0x8e22x3[_0xee2b[2192]]) {
    _0x8e22x6 = _0x8e22x3[_0xee2b[1052]]();
    _0x8e22x5 = _0x8e22x3[_0xee2b[1053]]();
  } else {
    _0x8e22x6 = _0x8e22x3;
    _0x8e22x5 = null;
  }
  Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x4[_0xee2b[2191]](_0x8e22x6, _0x8e22x5, null, true), function(_0x8e22x2) {
    Ext[_0xee2b[761]](_0x8e22x2)[_0xee2b[264]](_0x8e22x4[_0xee2b[2632]]);
  });
}, onEventBarDeselect:function(_0x8e22x3) {
  var _0x8e22x4 = this, _0x8e22x6, _0x8e22x5;
  if (_0x8e22x3 && _0x8e22x3[_0xee2b[2192]]) {
    _0x8e22x6 = _0x8e22x3[_0xee2b[1052]]();
    _0x8e22x5 = _0x8e22x3[_0xee2b[1053]]();
  } else {
    _0x8e22x6 = _0x8e22x3;
    _0x8e22x5 = null;
  }
  _0x8e22x6 && Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x4[_0xee2b[2191]](_0x8e22x6, _0x8e22x5, null, true), function(_0x8e22x2) {
    Ext[_0xee2b[761]](_0x8e22x2)[_0xee2b[267]](_0x8e22x4[_0xee2b[2632]]);
  });
}, refresh:function() {
  throw _0xee2b[29];
}, repaintEventsForResource:function(_0x8e22x3) {
  throw _0xee2b[29];
}, repaintAllEvents:function() {
  this[_0xee2b[2669]]();
}, scrollEventIntoView:function(_0x8e22x1, _0x8e22x6, _0x8e22x3, _0x8e22x9, _0x8e22x4) {
  var _0x8e22x5 = this, _0x8e22x2 = _0x8e22x1[_0xee2b[1427]]();
  if (_0x8e22x2[_0xee2b[4]] > 1) {
    Ext[_0xee2b[1182]][_0xee2b[3]](_0xee2b[2670]);
  }
  _0x8e22x2[_0xee2b[4]] && _0x8e22x5[_0xee2b[2671]](_0x8e22x2[0], _0x8e22x1, null, _0x8e22x6, _0x8e22x3, _0x8e22x9, _0x8e22x4);
}, getResourceStore:function() {
  return this[_0xee2b[1302]];
}, setResourceStore:function(_0x8e22x3) {
  var _0x8e22x6 = this[_0xee2b[1302]];
  this[_0xee2b[1302]] = _0x8e22x3;
  if (_0x8e22x3) {
    this[_0xee2b[180]](_0xee2b[1409], this, _0x8e22x3, _0x8e22x6);
  }
}, rowHasDynamicRowHeight:function(_0x8e22x3) {
  return this[_0xee2b[2672]];
}});
Ext[_0xee2b[6]](_0xee2b[2673], {requires:[_0xee2b[1140]], name:null, rowHeight:24, timeColumnWidth:50, timeRowHeight:null, timeAxisColumnWidth:null, displayDateFormat:_0xee2b[651], shiftUnit:_0xee2b[710], shiftIncrement:1, defaultSpan:12, timeResolution:null, headerConfig:null, columnLinesFor:_0xee2b[753], headers:null, mainHeader:0, ptype:_0xee2b[27], constructor:function(_0x8e22x3) {
  Ext[_0xee2b[8]](this, _0x8e22x3);
  this[_0xee2b[2674]]();
}, normalizeUnits:function() {
  var _0x8e22x3 = this[_0xee2b[875]];
  var _0x8e22x5 = Sch[_0xee2b[49]][_0xee2b[703]];
  for (var _0x8e22x2 in _0x8e22x3) {
    if (_0x8e22x3[_0xee2b[53]](_0x8e22x2)) {
      if (_0x8e22x5[_0x8e22x3[_0x8e22x2][_0xee2b[1734]]]) {
        _0x8e22x3[_0x8e22x2][_0xee2b[1734]] = _0x8e22x5[_0x8e22x3[_0x8e22x2][_0xee2b[1734]][_0xee2b[2675]]()];
      }
      if (_0x8e22x5[_0x8e22x3[_0x8e22x2][_0xee2b[1760]]]) {
        _0x8e22x3[_0x8e22x2][_0xee2b[1760]] = _0x8e22x5[_0x8e22x3[_0x8e22x2][_0xee2b[1760]][_0xee2b[2675]]()];
      }
    }
  }
  var _0x8e22x6 = this[_0xee2b[1767]];
  if (_0x8e22x6 && _0x8e22x5[_0x8e22x6[_0xee2b[1734]]]) {
    _0x8e22x6[_0xee2b[1734]] = _0x8e22x5[_0x8e22x6[_0xee2b[1734]][_0xee2b[2675]]()];
  }
  var _0x8e22x4 = this[_0xee2b[1749]];
  if (_0x8e22x4 && _0x8e22x5[_0x8e22x4]) {
    this[_0xee2b[1749]] = _0x8e22x5[_0x8e22x4[_0xee2b[2675]]()];
  }
}, getHeaders:function() {
  if (this[_0xee2b[2676]]) {
    return this[_0xee2b[2676]];
  }
  var _0x8e22x3 = this[_0xee2b[875]];
  this[_0xee2b[2677]] = _0x8e22x3[_0xee2b[686]] ? 1 : 0;
  return this[_0xee2b[2676]] = [][_0xee2b[318]](_0x8e22x3[_0xee2b[686]] || [], _0x8e22x3[_0xee2b[753]] || [], _0x8e22x3[_0xee2b[754]] || []);
}, getMainHeader:function() {
  return this[_0xee2b[862]]()[this[_0xee2b[2677]]];
}, getBottomHeader:function() {
  var _0x8e22x3 = this[_0xee2b[862]]();
  return _0x8e22x3[_0x8e22x3[_0xee2b[4]] - 1];
}, clone:function() {
  var _0x8e22x3 = {};
  var _0x8e22x6 = this;
  Ext[_0xee2b[26]][_0xee2b[25]]([_0xee2b[2678], _0xee2b[2679], _0xee2b[2680], _0xee2b[2681], _0xee2b[2682], _0xee2b[1749], _0xee2b[1759], _0xee2b[1748], _0xee2b[1767], _0xee2b[875]], function(_0x8e22x4) {
    _0x8e22x3[_0x8e22x4] = _0x8e22x6[_0x8e22x4];
  });
  return new this[_0xee2b[45]](Ext[_0xee2b[1161]](_0x8e22x3));
}, isValid:function() {
  var _0x8e22x5 = Sch[_0xee2b[49]][_0xee2b[703]], _0x8e22x6 = true, _0x8e22x4 = Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[1147]], _0x8e22x3 = {};
  for (var _0x8e22x2 in this[_0xee2b[875]]) {
    if (this[_0xee2b[875]][_0xee2b[53]](_0x8e22x2)) {
      _0x8e22x3[_0x8e22x2] = true;
      _0x8e22x6 = _0x8e22x6 && Ext[_0xee2b[26]][_0xee2b[147]](_0x8e22x4, this[_0xee2b[875]][_0x8e22x2][_0xee2b[1734]]) >= 0;
    }
  }
  if (!(this[_0xee2b[1906]] in _0x8e22x3)) {
    this[_0xee2b[1906]] = _0xee2b[753];
  }
  if (this[_0xee2b[1767]]) {
    _0x8e22x6 = _0x8e22x6 && Ext[_0xee2b[26]][_0xee2b[147]](_0x8e22x4, this[_0xee2b[1767]][_0xee2b[1734]]) >= 0;
  }
  if (this[_0xee2b[1749]]) {
    _0x8e22x6 = _0x8e22x6 && Ext[_0xee2b[26]][_0xee2b[147]](_0x8e22x4, this[_0xee2b[1749]]) >= 0;
  }
  return _0x8e22x6;
}});
Ext[_0xee2b[6]](_0xee2b[2683], {extend:_0xee2b[2684], requires:[_0xee2b[1140], _0xee2b[2673]], mixins:[_0xee2b[665]], singleton:true, defaultPresets:{secondAndMinute:{timeColumnWidth:30, rowHeight:24, resourceColumnWidth:100, displayDateFormat:_0xee2b[2685], shiftIncrement:10, shiftUnit:_0xee2b[711], defaultSpan:24, timeResolution:{unit:_0xee2b[1144], increment:5}, headerConfig:{middle:{unit:_0xee2b[1144], increment:10, align:_0xee2b[472], dateFormat:_0xee2b[534]}, top:{unit:_0xee2b[711], align:_0xee2b[472], 
dateFormat:_0xee2b[654]}}}, minuteAndHour:{timeColumnWidth:100, rowHeight:24, resourceColumnWidth:100, displayDateFormat:_0xee2b[651], shiftIncrement:1, shiftUnit:_0xee2b[710], defaultSpan:24, timeResolution:{unit:_0xee2b[711], increment:30}, headerConfig:{middle:{unit:_0xee2b[711], increment:_0xee2b[2686], align:_0xee2b[472], dateFormat:_0xee2b[2687]}, top:{unit:_0xee2b[710], align:_0xee2b[472], dateFormat:_0xee2b[2688]}}}, hourAndDay:{timeColumnWidth:60, rowHeight:24, resourceColumnWidth:100, displayDateFormat:_0xee2b[651], 
shiftIncrement:1, shiftUnit:_0xee2b[708], defaultSpan:24, timeResolution:{unit:_0xee2b[711], increment:30}, headerConfig:{middle:{unit:_0xee2b[710], align:_0xee2b[472], dateFormat:_0xee2b[651]}, top:{unit:_0xee2b[708], align:_0xee2b[472], dateFormat:_0xee2b[652]}}}, dayAndWeek:{timeColumnWidth:100, rowHeight:24, resourceColumnWidth:100, displayDateFormat:_0xee2b[2689], shiftUnit:_0xee2b[708], shiftIncrement:1, defaultSpan:5, timeResolution:{unit:_0xee2b[710], increment:1}, headerConfig:{middle:{unit:_0xee2b[708], 
align:_0xee2b[472], dateFormat:_0xee2b[656]}, top:{unit:_0xee2b[1148], align:_0xee2b[472], renderer:function(_0x8e22x4, _0x8e22x6, _0x8e22x3) {
  return Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[709]](_0xee2b[1148]) + _0xee2b[495] + Ext[_0xee2b[703]][_0xee2b[880]](_0x8e22x4, _0xee2b[2690]);
}}}}, weekAndDay:{timeColumnWidth:100, rowHeight:24, resourceColumnWidth:100, displayDateFormat:_0xee2b[2691], shiftUnit:_0xee2b[1148], shiftIncrement:1, defaultSpan:1, timeResolution:{unit:_0xee2b[708], increment:1}, headerConfig:{bottom:{unit:_0xee2b[708], align:_0xee2b[472], increment:1, dateFormat:_0xee2b[2692]}, middle:{unit:_0xee2b[1148], dateFormat:_0xee2b[656]}}}, weekAndMonth:{timeColumnWidth:100, rowHeight:24, resourceColumnWidth:100, displayDateFormat:_0xee2b[2691], shiftUnit:_0xee2b[1148], 
shiftIncrement:5, defaultSpan:6, timeResolution:{unit:_0xee2b[708], increment:1}, headerConfig:{middle:{unit:_0xee2b[1148], align:_0xee2b[472], renderer:function(_0x8e22x4, _0x8e22x6, _0x8e22x3) {
  return Ext[_0xee2b[703]][_0xee2b[880]](_0x8e22x4, _0xee2b[658]);
}}, top:{unit:_0xee2b[1145], align:_0xee2b[472], dateFormat:_0xee2b[663]}}}, monthAndYear:{timeColumnWidth:110, rowHeight:24, resourceColumnWidth:100, displayDateFormat:_0xee2b[2691], shiftIncrement:3, shiftUnit:_0xee2b[1145], defaultSpan:12, timeResolution:{unit:_0xee2b[708], increment:1}, headerConfig:{middle:{unit:_0xee2b[1145], align:_0xee2b[472], dateFormat:_0xee2b[663]}, top:{unit:_0xee2b[1146], align:_0xee2b[472], dateFormat:_0xee2b[664]}}}, year:{timeColumnWidth:100, rowHeight:24, resourceColumnWidth:100, 
displayDateFormat:_0xee2b[2691], shiftUnit:_0xee2b[1146], shiftIncrement:1, defaultSpan:1, timeResolution:{unit:_0xee2b[1145], increment:1}, headerConfig:{middle:{unit:_0xee2b[1149], align:_0xee2b[472], renderer:function(_0x8e22x4, _0x8e22x6, _0x8e22x3) {
  return Ext[_0xee2b[1041]][_0xee2b[880]](Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[709]](_0xee2b[1149])[_0xee2b[2675]]() + _0xee2b[2693], Math[_0xee2b[424]](_0x8e22x4[_0xee2b[480]]() / 3) + 1);
}}, top:{unit:_0xee2b[1146], align:_0xee2b[472], dateFormat:_0xee2b[664]}}}, manyYears:{timeColumnWidth:50, rowHeight:24, resourceColumnWidth:100, displayDateFormat:_0xee2b[2691], shiftUnit:_0xee2b[1146], shiftIncrement:1, defaultSpan:1, timeResolution:{unit:_0xee2b[1146], increment:1}, headerConfig:{middle:{unit:_0xee2b[1146], align:_0xee2b[472], dateFormat:_0xee2b[664], increment:5}, bottom:{unit:_0xee2b[1146], align:_0xee2b[472], dateFormat:_0xee2b[1894], increment:1}}}, weekAndDayLetter:{timeColumnWidth:20, 
rowHeight:24, resourceColumnWidth:100, displayDateFormat:_0xee2b[2691], shiftUnit:_0xee2b[1148], shiftIncrement:1, defaultSpan:10, timeResolution:{unit:_0xee2b[708], increment:1}, headerConfig:{bottom:{unit:_0xee2b[708], align:_0xee2b[472], renderer:function(_0x8e22x3) {
  return Ext[_0xee2b[703]][_0xee2b[1776]][_0x8e22x3[_0xee2b[484]]()][_0xee2b[2694]](0, 1);
}, verticalColumnWidth:25}, middle:{unit:_0xee2b[1148], dateFormat:_0xee2b[661], verticalColumnWidth:115}}}, weekDateAndMonth:{timeColumnWidth:30, rowHeight:24, resourceColumnWidth:100, displayDateFormat:_0xee2b[2691], shiftUnit:_0xee2b[1148], shiftIncrement:1, defaultSpan:10, timeResolution:{unit:_0xee2b[708], increment:1}, headerConfig:{middle:{unit:_0xee2b[1148], align:_0xee2b[472], dateFormat:_0xee2b[526]}, top:{unit:_0xee2b[1145], dateFormat:_0xee2b[662]}}}, minute:{timeRowHeight:40, displayDateFormat:_0xee2b[651], 
shiftIncrement:1, shiftUnit:_0xee2b[1148], defaultSpan:60, timeResolution:{unit:_0xee2b[711], increment:15}, columnLinesFor:_0xee2b[754], headerConfig:{bottom:{unit:_0xee2b[711], increment:15, align:_0xee2b[472], renderer:function(_0x8e22x3) {
  return Ext[_0xee2b[1041]][_0xee2b[880]](_0xee2b[2695], _0x8e22x3[_0xee2b[1130]]() ? _0xee2b[27] : Ext[_0xee2b[703]][_0xee2b[880]](_0x8e22x3, _0xee2b[2443]), Ext[_0xee2b[703]][_0xee2b[880]](_0x8e22x3, _0xee2b[2687]), _0x8e22x3[_0xee2b[1130]]() ? _0xee2b[2696] : _0xee2b[27]);
}}, middle:{unit:_0xee2b[708], align:_0xee2b[472], dateFormat:_0xee2b[2697], splitUnit:_0xee2b[708]}}}, day:{timeRowHeight:40, displayDateFormat:_0xee2b[651], shiftIncrement:1, shiftUnit:_0xee2b[708], defaultSpan:1, timeResolution:{unit:_0xee2b[711], increment:30}, columnLinesFor:_0xee2b[754], headerConfig:{bottom:{unit:_0xee2b[710], align:_0xee2b[472], renderer:function(_0x8e22x3) {
  return Ext[_0xee2b[1041]][_0xee2b[880]](_0xee2b[2698], Ext[_0xee2b[703]][_0xee2b[880]](_0x8e22x3, _0xee2b[2443]), Ext[_0xee2b[703]][_0xee2b[880]](_0x8e22x3, _0xee2b[2687]));
}}, middle:{unit:_0xee2b[708], align:_0xee2b[472], dateFormat:_0xee2b[652], splitUnit:_0xee2b[708]}}}, week:{timeRowHeight:40, displayDateFormat:_0xee2b[651], shiftIncrement:1, shiftUnit:_0xee2b[1148], defaultSpan:24, timeResolution:{unit:_0xee2b[711], increment:30}, columnLinesFor:_0xee2b[754], headerConfig:{bottom:{unit:_0xee2b[710], align:_0xee2b[472], dateFormat:_0xee2b[1123], renderer:function(_0x8e22x3) {
  return Ext[_0xee2b[1041]][_0xee2b[880]](_0xee2b[2698], Ext[_0xee2b[703]][_0xee2b[880]](_0x8e22x3, _0xee2b[2443]), Ext[_0xee2b[703]][_0xee2b[880]](_0x8e22x3, _0xee2b[2687]));
}}, middle:{unit:_0xee2b[1148], align:_0xee2b[472], dateFormat:_0xee2b[2697], splitUnit:_0xee2b[708]}}}}, constructor:function() {
  this[_0xee2b[9]](arguments);
  this[_0xee2b[2699]]();
}, onLocalized:function() {
  var _0x8e22x3 = this;
  this[_0xee2b[2703]](function(_0x8e22x4, _0x8e22x5) {
    if (_0x8e22x3[_0xee2b[504]][_0x8e22x4]) {
      var _0x8e22x6 = _0x8e22x3.L(_0x8e22x4);
      _0x8e22x6[_0xee2b[2682]] && (_0x8e22x5[_0xee2b[2682]] = _0x8e22x6[_0xee2b[2682]]);
      _0x8e22x6[_0xee2b[2700]] && (_0x8e22x5[_0xee2b[875]][_0xee2b[753]][_0xee2b[879]] = _0x8e22x6[_0xee2b[2700]]);
      _0x8e22x6[_0xee2b[2701]] && (_0x8e22x5[_0xee2b[875]][_0xee2b[686]][_0xee2b[879]] = _0x8e22x6[_0xee2b[2701]]);
      _0x8e22x6[_0xee2b[2702]] && (_0x8e22x5[_0xee2b[875]][_0xee2b[754]][_0xee2b[879]] = _0x8e22x6[_0xee2b[2702]]);
    }
  });
}, registerPreset:function(_0x8e22x6, _0x8e22x3) {
  _0x8e22x3[_0xee2b[683]] = _0x8e22x6;
  var _0x8e22x4 = new Sch[_0xee2b[1728]].ViewPreset(_0x8e22x3);
  if (_0x8e22x4[_0xee2b[348]]()) {
    if (this[_0xee2b[2704]](_0x8e22x6)) {
      this[_0xee2b[2705]](_0x8e22x6);
    }
    this[_0xee2b[255]](_0x8e22x6, _0x8e22x4);
  } else {
    throw _0xee2b[2706];
  }
}, getPreset:function(_0x8e22x3) {
  return this[_0xee2b[55]](_0x8e22x3);
}, deletePreset:function(_0x8e22x3) {
  this[_0xee2b[2705]](_0x8e22x3);
}, registerDefaults:function() {
  var _0x8e22x6 = this, _0x8e22x3 = this[_0xee2b[2707]];
  for (var _0x8e22x4 in _0x8e22x3) {
    _0x8e22x6[_0xee2b[2708]](_0x8e22x4, _0x8e22x3[_0x8e22x4]);
  }
}});
Ext[_0xee2b[6]](_0xee2b[2709], {extend:_0xee2b[108], requires:[_0xee2b[1141], _0xee2b[1140], _0xee2b[2683]], timeAxis:null, availableWidth:0, tickWidth:100, snapToIncrement:false, forceFit:false, headerConfig:null, headers:null, mainHeader:0, calendar:null, timeAxisColumnWidth:null, resourceColumnWidth:null, weekViewColumnWidth:null, calendarColumnDates:null, headersDatesCache:null, timeColumnWidth:null, rowHeightHorizontal:null, rowHeightVertical:null, mode:_0xee2b[1931], suppressFit:false, refCount:0, 
columnConfig:{}, viewPreset:null, columnLinesFor:_0xee2b[753], eventStore:null, originalTickWidth:null, constructor:function(_0x8e22x3) {
  var _0x8e22x4 = this;
  Ext[_0xee2b[8]](this, _0x8e22x3);
  _0x8e22x4[_0xee2b[2710]] = {};
  if (this[_0xee2b[1725]]) {
    if (this[_0xee2b[1725]] instanceof Sch[_0xee2b[1728]][_0xee2b[2711]]) {
      this[_0xee2b[1729]](this[_0xee2b[1725]]);
    } else {
      var _0x8e22x6 = Sch[_0xee2b[1728]][_0xee2b[1727]][_0xee2b[1726]](this[_0xee2b[1725]]);
      _0x8e22x6 && this[_0xee2b[1729]](_0x8e22x6);
    }
  }
  _0x8e22x4[_0xee2b[1795]][_0xee2b[149]](_0xee2b[1723], _0x8e22x4[_0xee2b[2384]], _0x8e22x4);
  this[_0xee2b[9]](arguments);
}, isHorizontal:function() {
  return this[_0xee2b[1719]] === _0xee2b[1931];
}, isVertical:function() {
  return this[_0xee2b[1719]] === _0xee2b[1932];
}, isWeek:function() {
  return this[_0xee2b[1719]] === _0xee2b[2430];
}, destroy:function() {
  this[_0xee2b[1795]][_0xee2b[152]](_0xee2b[1723], this[_0xee2b[2384]], this);
}, onTimeAxisReconfigure:function(_0x8e22x3, _0x8e22x6) {
  if (!_0x8e22x6) {
    this[_0xee2b[724]]();
  }
}, reconfigure:function(_0x8e22x3) {
  this[_0xee2b[2676]] = null;
  Ext[_0xee2b[8]](this, _0x8e22x3);
  var _0x8e22x6;
  if (this[_0xee2b[1828]]()) {
    _0x8e22x6 = this[_0xee2b[2679]];
  } else {
    _0x8e22x6 = this[_0xee2b[2712]];
  }
  this[_0xee2b[811]](_0x8e22x6);
  this[_0xee2b[180]](_0xee2b[1723], this);
}, getColumnConfig:function() {
  return this[_0xee2b[870]];
}, update:function(_0x8e22x5, _0x8e22x6) {
  var _0x8e22x2 = this[_0xee2b[1795]], _0x8e22x4 = this[_0xee2b[875]];
  this[_0xee2b[2713]] = Math[_0xee2b[715]](_0x8e22x5 || this[_0xee2b[2713]], 0);
  if (!Ext[_0xee2b[789]](this[_0xee2b[2713]])) {
    throw new Error(_0xee2b[2714]);
  }
  if (this[_0xee2b[2715]] && this[_0xee2b[2713]] <= 0) {
    return;
  }
  this[_0xee2b[870]] = {};
  for (var _0x8e22x1 in _0x8e22x4) {
    if (_0x8e22x4[_0x8e22x1][_0xee2b[1907]]) {
      this[_0xee2b[870]][_0x8e22x1] = _0x8e22x4[_0x8e22x1][_0xee2b[1907]][_0xee2b[293]](this, _0x8e22x2[_0xee2b[697]](), _0x8e22x2[_0xee2b[698]]());
    } else {
      this[_0xee2b[870]][_0x8e22x1] = this[_0xee2b[2716]](_0x8e22x1, _0x8e22x4[_0x8e22x1]);
    }
  }
  var _0x8e22x3 = this[_0xee2b[2718]](this[_0xee2b[2717]]);
  if (!Ext[_0xee2b[789]](_0x8e22x3) || _0x8e22x3 <= 0) {
    throw new Error(_0xee2b[2719]);
  }
  this[_0xee2b[2720]](_0x8e22x3);
  if (!_0x8e22x6) {
    this[_0xee2b[180]](_0xee2b[724], this);
  }
}, updateCalendarColumnDates:function(_0x8e22x6) {
  this[_0xee2b[2721]] = [];
  for (var _0x8e22x3 = 0; _0x8e22x3 < _0x8e22x6[_0xee2b[4]]; _0x8e22x3++) {
    var _0x8e22x4 = _0x8e22x6[_0x8e22x3];
    this[_0xee2b[2721]][_0xee2b[11]]([_0x8e22x4[_0xee2b[179]], _0x8e22x4[_0xee2b[771]]]);
  }
}, getCalendarColumnDates:function() {
  return this[_0xee2b[2721]];
}, createHeaderRow:function(_0x8e22x6, _0x8e22x9) {
  var _0x8e22xa = [], _0x8e22x2 = this, _0x8e22x4 = _0x8e22x9[_0xee2b[2722]], _0x8e22x1 = Ext[_0xee2b[703]][_0xee2b[1101]](new Date()), _0x8e22x3 = this[_0xee2b[2006]];
  if (_0x8e22x3) {
    var _0x8e22x5 = _0x8e22x3[_0xee2b[327]][_0xee2b[162]](_0x8e22x3[_0xee2b[327]][_0xee2b[139]][_0xee2b[1227]]), _0x8e22x7 = _0x8e22x5[_0xee2b[2724]]()[_0xee2b[2723]]();
  }
  _0x8e22x2[_0xee2b[2710]][_0x8e22x6] = {};
  _0x8e22x2[_0xee2b[1909]](_0x8e22x6, function(_0x8e22xc, _0x8e22xd, _0x8e22x10) {
    var _0x8e22xf = {align:_0x8e22x4, start:_0x8e22xc, end:_0x8e22xd, headerCls:_0xee2b[27]};
    _0x8e22x2[_0xee2b[2710]][_0x8e22x6][_0x8e22xc[_0xee2b[1162]]()] = 1;
    if (_0x8e22x9[_0xee2b[878]]) {
      _0x8e22xf[_0xee2b[2725]] = _0x8e22x9[_0xee2b[878]][_0xee2b[293]](_0x8e22x9[_0xee2b[689]] || _0x8e22x2, _0x8e22xc, _0x8e22xd, _0x8e22xf, _0x8e22x10, _0x8e22x2[_0xee2b[1071]]);
    } else {
      _0x8e22xf[_0xee2b[2725]] = Ext[_0xee2b[703]][_0xee2b[880]](_0x8e22xc, _0x8e22x9[_0xee2b[879]]);
    }
    if (_0x8e22x9[_0xee2b[1734]] === Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[708]] && (!_0x8e22x9[_0xee2b[1735]] || _0x8e22x9[_0xee2b[1735]] === 1)) {
      _0x8e22xf[_0xee2b[848]] += _0xee2b[2726] + _0x8e22xc[_0xee2b[484]]();
      if (_0x8e22x3) {
        if (!_0x8e22x3[_0xee2b[2727]](_0x8e22xc)) {
          _0x8e22xf[_0xee2b[848]] += _0xee2b[2728];
        }
        var _0x8e22x8 = _0x8e22x3[_0xee2b[1275]](_0x8e22xc), _0x8e22xe = _0x8e22x8[_0xee2b[1284]]()[_0xee2b[2723]]();
        if (_0x8e22xe != _0x8e22x7) {
          _0x8e22xf[_0xee2b[848]] += _0xee2b[60] + _0x8e22xe;
        }
      }
      if (Ext[_0xee2b[703]][_0xee2b[1101]](_0x8e22xc, true) - _0x8e22x1 === 0) {
        _0x8e22xf[_0xee2b[848]] += _0xee2b[2729];
      }
    }
    _0x8e22xa[_0xee2b[11]](_0x8e22xf);
  });
  return _0x8e22xa;
}, getDistanceBetweenDates:function(_0x8e22x6, _0x8e22x3) {
  return Math[_0xee2b[704]](this[_0xee2b[1796]](_0x8e22x3, true) - this[_0xee2b[1796]](_0x8e22x6));
}, getPositionFromDate:function(_0x8e22x2, _0x8e22x5) {
  var _0x8e22xa = -1;
  if (this[_0xee2b[872]]()) {
    var _0x8e22x3 = this[_0xee2b[2712]];
    var _0x8e22x4 = this[_0xee2b[862]]();
    var _0x8e22x6 = this[_0xee2b[1795]][_0xee2b[697]]();
    var _0x8e22x9 = Sch[_0xee2b[49]][_0xee2b[703]];
    var _0x8e22x7 = _0x8e22x9[_0xee2b[1521]](Ext[_0xee2b[703]][_0xee2b[1161]](_0x8e22x6), _0x8e22x2);
    _0x8e22xa = _0x8e22x9[_0xee2b[2730]](_0x8e22x6, _0x8e22x7, _0x8e22x4[1][_0xee2b[1734]], true) / (_0x8e22x4[1][_0xee2b[1735]] || 1) * _0x8e22x3;
    if (_0x8e22xa === 0 && _0x8e22x5) {
      _0x8e22xa = this[_0xee2b[2731]] * _0x8e22x3;
    }
  } else {
    var _0x8e22x1 = this[_0xee2b[1795]][_0xee2b[1764]](_0x8e22x2);
    if (_0x8e22x1 >= 0) {
      _0x8e22xa = this[_0xee2b[755]]() * (_0x8e22x1 - this[_0xee2b[1795]][_0xee2b[1741]]);
    }
  }
  return Math[_0xee2b[704]](_0x8e22xa);
}, getDateFromPosition:function(_0x8e22x9, _0x8e22xd) {
  if (this[_0xee2b[872]]()) {
    var _0x8e22x6 = this[_0xee2b[2732]]();
    if (!_0x8e22x6) {
      return null;
    }
    var _0x8e22x7 = Math[_0xee2b[203]](Math[_0xee2b[424]](Math[_0xee2b[715]](_0x8e22x9[0], 0) / this[_0xee2b[2733]]), _0x8e22x6[_0xee2b[4]] - 1), _0x8e22xa = _0x8e22x6[_0x8e22x7][0], _0x8e22x2 = this[_0xee2b[1795]][_0xee2b[572]](), _0x8e22x4 = (_0x8e22x2[_0xee2b[55]](_0xee2b[771]) - _0x8e22x2[_0xee2b[55]](_0xee2b[179])) / this[_0xee2b[2712]], _0x8e22x1 = Sch[_0xee2b[49]][_0xee2b[703]], _0x8e22x8 = _0x8e22x1[_0xee2b[255]](_0x8e22xa, _0x8e22x1.MILLI, Math[_0xee2b[704]](_0x8e22x9[1] * _0x8e22x4));
    if (_0x8e22xd) {
      _0x8e22x8 = this[_0xee2b[1795]][_0x8e22xd + _0xee2b[703]](_0x8e22x8);
    }
    return _0x8e22x8;
  } else {
    var _0x8e22x5 = _0x8e22x9 / this[_0xee2b[755]]() + this[_0xee2b[1795]][_0xee2b[1741]], _0x8e22x3 = this[_0xee2b[1795]][_0xee2b[1466]]();
    if (_0x8e22x5 < 0 || _0x8e22x5 > _0x8e22x3) {
      return null;
    }
    return this[_0xee2b[1795]][_0xee2b[2276]](_0x8e22x5, _0x8e22xd);
  }
}, getSingleUnitInPixels:function(_0x8e22x3) {
  return Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[2735]](this[_0xee2b[1795]][_0xee2b[2734]](), _0x8e22x3) * this[_0xee2b[755]]() / this[_0xee2b[1795]][_0xee2b[1735]];
}, getSnapPixelAmount:function() {
  if (this[_0xee2b[2736]]) {
    var _0x8e22x3 = this[_0xee2b[1795]][_0xee2b[2737]]();
    return (_0x8e22x3[_0xee2b[1735]] || 1) * this[_0xee2b[2738]](_0x8e22x3[_0xee2b[1734]]);
  } else {
    return 1;
  }
}, getTickWidth:function() {
  return this[_0xee2b[2739]];
}, setTickWidth:function(_0x8e22x6, _0x8e22x3) {
  this[_0xee2b[2717]] = _0x8e22x6;
  this[_0xee2b[2720]](_0x8e22x6);
  this[_0xee2b[724]](null, _0x8e22x3);
}, updateTickWidth:function(_0x8e22x3) {
  this[_0xee2b[2739]] = _0x8e22x3;
  this[this[_0xee2b[1828]]() ? _0xee2b[2679] : _0xee2b[2712]] = _0x8e22x3;
}, getTotalWidth:function() {
  return Math[_0xee2b[704]](this[_0xee2b[755]]() * this[_0xee2b[1795]][_0xee2b[2740]]());
}, calculateTickWidth:function(_0x8e22x2) {
  var _0x8e22xd = this[_0xee2b[2715]];
  var _0x8e22x7 = this[_0xee2b[1795]];
  var _0x8e22x4 = 0, _0x8e22x9 = _0x8e22x7[_0xee2b[2734]](), _0x8e22x8 = Number[_0xee2b[1418]], _0x8e22x5 = Sch[_0xee2b[49]][_0xee2b[703]];
  if (this[_0xee2b[2736]]) {
    var _0x8e22x1 = _0x8e22x7[_0xee2b[2737]]();
    _0x8e22x8 = _0x8e22x5[_0xee2b[2735]](_0x8e22x9, _0x8e22x1[_0xee2b[1734]]) * _0x8e22x1[_0xee2b[1735]];
  } else {
    var _0x8e22xa = _0x8e22x5[_0xee2b[2741]](_0x8e22x9);
    _0x8e22x8 = Math[_0xee2b[203]](_0x8e22x8, _0x8e22x5[_0xee2b[2735]](_0x8e22x9, _0x8e22xa));
  }
  if (!this[_0xee2b[2742]]) {
    var _0x8e22x10 = this[_0xee2b[872]]() ? _0x8e22x7[_0xee2b[1121]] - _0x8e22x7[_0xee2b[1119]] : _0x8e22x7[_0xee2b[2740]](), _0x8e22x6 = Math[_0x8e22xd ? _0xee2b[424] : _0xee2b[704]](this[_0xee2b[838]]() / _0x8e22x10);
    _0x8e22x4 = _0x8e22xd || _0x8e22x2 < _0x8e22x6 ? _0x8e22x6 : _0x8e22x2;
    if (_0x8e22x8 > 0 && (!_0x8e22xd || _0x8e22x8 < 1)) {
      var _0x8e22x3 = Ext[_0xee2b[723]][_0xee2b[722]] && _0x8e22xd ? _0xee2b[1194] : _0x8e22xd ? _0xee2b[424] : _0xee2b[704];
      _0x8e22x4 = Math[_0xee2b[704]](Math[_0xee2b[715]](1, Math[_0x8e22x3](_0x8e22x8 * _0x8e22x4)) / _0x8e22x8);
    }
  } else {
    _0x8e22x4 = _0x8e22x2;
  }
  return _0x8e22x4;
}, getAvailableWidth:function() {
  return this[_0xee2b[2713]];
}, setAvailableWidth:function(_0x8e22x6) {
  var _0x8e22x3 = this[_0xee2b[2713]];
  this[_0xee2b[2713]] = Math[_0xee2b[715]](0, _0x8e22x6);
  var _0x8e22x4 = this[_0xee2b[2718]](this[_0xee2b[2717]]);
  var _0x8e22x5 = _0x8e22x4 > 0 && (_0x8e22x3 !== _0x8e22x6 && this[_0xee2b[2715]] || _0x8e22x4 !== this[_0xee2b[755]]());
  if (_0x8e22x5) {
    this[_0xee2b[724]]();
  }
}, fitToAvailableWidth:function(_0x8e22x3) {
  var _0x8e22x6 = Math[_0xee2b[424]](this[_0xee2b[2713]] / this[_0xee2b[1795]][_0xee2b[2740]]());
  this[_0xee2b[811]](_0x8e22x6, _0x8e22x3);
}, setForceFit:function(_0x8e22x3) {
  if (_0x8e22x3 !== this[_0xee2b[2715]]) {
    this[_0xee2b[2715]] = _0x8e22x3;
    this[_0xee2b[724]]();
  }
}, setSnapToIncrement:function(_0x8e22x3) {
  if (_0x8e22x3 !== this[_0xee2b[2736]]) {
    this[_0xee2b[2736]] = _0x8e22x3;
    this[_0xee2b[724]]();
  }
}, getViewRowHeight:function() {
  var _0x8e22x3 = this[_0xee2b[1828]]() ? this[_0xee2b[2743]] : this[_0xee2b[2712]];
  if (!_0x8e22x3) {
    throw new Error(_0xee2b[2744]);
  }
  return _0x8e22x3;
}, setViewRowHeight:function(_0x8e22x4, _0x8e22x3) {
  var _0x8e22x6 = _0xee2b[2678] + Ext[_0xee2b[1041]][_0xee2b[1040]](this[_0xee2b[1719]]);
  if (this[_0x8e22x6] != _0x8e22x4) {
    this[_0x8e22x6] = _0x8e22x4;
    if (this[_0xee2b[1828]]()) {
      if (!_0x8e22x3) {
        this[_0xee2b[180]](_0xee2b[724], this);
      }
    } else {
      this[_0xee2b[811]](_0x8e22x4, _0x8e22x3);
    }
  }
}, setViewColumnWidth:function(_0x8e22x6, _0x8e22x3) {
  if (this[_0xee2b[1828]]()) {
    this[_0xee2b[811]](_0x8e22x6, _0x8e22x3);
  } else {
    if (this[_0xee2b[2539]]()) {
      this[_0xee2b[2582]] = _0x8e22x6;
    } else {
      if (this[_0xee2b[872]]()) {
        this[_0xee2b[2733]] = _0x8e22x6;
      }
    }
  }
  if (!_0x8e22x3) {
    this[_0xee2b[180]](_0xee2b[2745], this, _0x8e22x6);
  }
}, getHeaders:function() {
  if (this[_0xee2b[2676]]) {
    return this[_0xee2b[2676]];
  }
  var _0x8e22x3 = this[_0xee2b[875]];
  this[_0xee2b[2677]] = _0x8e22x3[_0xee2b[686]] ? 1 : 0;
  return this[_0xee2b[2676]] = [][_0xee2b[318]](_0x8e22x3[_0xee2b[686]] || [], _0x8e22x3[_0xee2b[753]] || [], _0x8e22x3[_0xee2b[754]] || []);
}, getMainHeader:function() {
  return this[_0xee2b[862]]()[this[_0xee2b[2677]]];
}, getBottomHeader:function() {
  var _0x8e22x3 = this[_0xee2b[862]]();
  return _0x8e22x3[_0x8e22x3[_0xee2b[4]] - 1];
}, getLowestHeader:function() {
  return _0xee2b[754] in this[_0xee2b[875]] ? _0xee2b[754] : _0xee2b[753];
}, getMajorHeaderName:function() {
  var _0x8e22x3 = this[_0xee2b[875]];
  if (_0x8e22x3[_0xee2b[754]]) {
    return _0xee2b[753];
  }
  if (_0x8e22x3[_0xee2b[686]]) {
    return _0xee2b[686];
  }
  return null;
}, isMajorTick:function(_0x8e22x3) {
  var _0x8e22x6 = this[_0xee2b[874]]();
  return _0x8e22x6 && this[_0xee2b[2710]][_0x8e22x6] && this[_0xee2b[2710]][_0x8e22x6][_0x8e22x3[_0xee2b[1162]]()] || false;
}, forEachInterval:function(_0x8e22x6, _0x8e22x3, _0x8e22x5) {
  _0x8e22x5 = _0x8e22x5 || this;
  var _0x8e22x4 = this[_0xee2b[875]];
  if (!_0x8e22x4) {
    return;
  }
  if (_0x8e22x6 === _0xee2b[686] || _0x8e22x6 === _0xee2b[753] && _0x8e22x4[_0xee2b[754]]) {
    var _0x8e22x2 = _0x8e22x4[_0x8e22x6];
    this[_0xee2b[1795]][_0xee2b[2746]](_0x8e22x2[_0xee2b[1734]], _0x8e22x2[_0xee2b[1735]], _0x8e22x3, _0x8e22x5);
  } else {
    this[_0xee2b[1795]][_0xee2b[25]](function(_0x8e22x9, _0x8e22x1) {
      return _0x8e22x3[_0xee2b[293]](_0x8e22x5, _0x8e22x9[_0xee2b[22]][_0xee2b[179]], _0x8e22x9[_0xee2b[22]][_0xee2b[771]], _0x8e22x1);
    });
  }
}, forEachMainInterval:function(_0x8e22x3, _0x8e22x6) {
  this[_0xee2b[1909]](_0xee2b[753], _0x8e22x3, _0x8e22x6);
}, consumeViewPreset:function(_0x8e22x3) {
  this[_0xee2b[2676]] = null;
  Ext[_0xee2b[8]](this, {headerConfig:_0x8e22x3[_0xee2b[875]], columnLinesFor:_0x8e22x3[_0xee2b[1906]] || _0xee2b[753], rowHeightHorizontal:_0x8e22x3[_0xee2b[2678]], tickWidth:this[_0xee2b[1828]]() ? _0x8e22x3[_0xee2b[2679]] : _0x8e22x3[_0xee2b[2680]] || _0x8e22x3[_0xee2b[2679]] || 60, timeColumnWidth:_0x8e22x3[_0xee2b[2679]], rowHeightVertical:_0x8e22x3[_0xee2b[2680]] || _0x8e22x3[_0xee2b[2679]] || 60, timeAxisColumnWidth:_0x8e22x3[_0xee2b[2681]], resourceColumnWidth:_0x8e22x3[_0xee2b[2582]] || 
  100});
  this[_0xee2b[2717]] = this[_0xee2b[755]]();
}, setEventStore:function(_0x8e22x3) {
  this[_0xee2b[1071]] = _0x8e22x3;
}, setCalendar:function(_0x8e22x3) {
  if (_0x8e22x3 !== this[_0xee2b[2006]]) {
    this[_0xee2b[2006]] = _0x8e22x3;
    if (_0x8e22x3) {
      this[_0xee2b[724]]();
    }
  }
}});
Ext[_0xee2b[6]](_0xee2b[2747], {zoomOnMouseWheel:true, preventScrollZoom:false, zoomLevels:[{width:40, increment:1, resolution:1, preset:_0xee2b[2748], resolutionUnit:_0xee2b[1146]}, {width:80, increment:1, resolution:1, preset:_0xee2b[2748], resolutionUnit:_0xee2b[1146]}, {width:30, increment:1, resolution:1, preset:_0xee2b[513], resolutionUnit:_0xee2b[1145]}, {width:50, increment:1, resolution:1, preset:_0xee2b[513], resolutionUnit:_0xee2b[1145]}, {width:100, increment:1, resolution:1, preset:_0xee2b[513], 
resolutionUnit:_0xee2b[1145]}, {width:200, increment:1, resolution:1, preset:_0xee2b[513], resolutionUnit:_0xee2b[1145]}, {width:100, increment:1, resolution:7, preset:_0xee2b[2749], resolutionUnit:_0xee2b[708]}, {width:30, increment:1, resolution:1, preset:_0xee2b[2750], resolutionUnit:_0xee2b[708]}, {width:35, increment:1, resolution:1, preset:_0xee2b[2751], resolutionUnit:_0xee2b[708]}, {width:50, increment:1, resolution:1, preset:_0xee2b[2751], resolutionUnit:_0xee2b[708]}, {width:20, increment:1, 
resolution:1, preset:_0xee2b[2752]}, {width:50, increment:1, resolution:1, preset:_0xee2b[2753], resolutionUnit:_0xee2b[710]}, {width:100, increment:1, resolution:1, preset:_0xee2b[2753], resolutionUnit:_0xee2b[710]}, {width:50, increment:6, resolution:30, preset:_0xee2b[2754], resolutionUnit:_0xee2b[711]}, {width:100, increment:6, resolution:30, preset:_0xee2b[2754], resolutionUnit:_0xee2b[711]}, {width:60, increment:2, resolution:30, preset:_0xee2b[2754], resolutionUnit:_0xee2b[711]}, {width:60, 
increment:1, resolution:30, preset:_0xee2b[2754], resolutionUnit:_0xee2b[711]}, {width:30, increment:15, resolution:5, preset:_0xee2b[2755]}, {width:60, increment:15, resolution:5, preset:_0xee2b[2755]}, {width:130, increment:15, resolution:5, preset:_0xee2b[2755]}, {width:60, increment:5, resolution:5, preset:_0xee2b[2755]}, {width:100, increment:5, resolution:5, preset:_0xee2b[2755]}, {width:50, increment:2, resolution:1, preset:_0xee2b[2755]}, {width:30, increment:10, resolution:5, preset:_0xee2b[2756]}, 
{width:60, increment:10, resolution:5, preset:_0xee2b[2756]}, {width:130, increment:5, resolution:5, preset:_0xee2b[2756]}], minZoomLevel:null, maxZoomLevel:null, visibleZoomFactor:5, zoomKeepsOriginalTimespan:false, initializeZooming:function() {
  this[_0xee2b[2757]] = this[_0xee2b[2757]][_0xee2b[191]]();
  this[_0xee2b[2759]](this[_0xee2b[2758]] || 0);
  this[_0xee2b[2761]](this[_0xee2b[2760]] !== null ? this[_0xee2b[2760]] : this[_0xee2b[2757]][_0xee2b[4]] - 1);
  this[_0xee2b[149]](_0xee2b[1808], this[_0xee2b[2762]], this);
}, getZoomLevelUnit:function(_0x8e22x3) {
  return Sch[_0xee2b[1728]][_0xee2b[1727]][_0xee2b[1726]](_0x8e22x3[_0xee2b[1728]])[_0xee2b[877]]()[_0xee2b[1734]];
}, getMilliSecondsPerPixelForZoomLevel:function(_0x8e22x4, _0x8e22x3) {
  var _0x8e22x6 = Sch[_0xee2b[49]][_0xee2b[703]];
  return Math[_0xee2b[704]]((_0x8e22x6[_0xee2b[255]](new Date(1, 0, 1), this[_0xee2b[2763]](_0x8e22x4), _0x8e22x4[_0xee2b[1735]]) - new Date(1, 0, 1)) / (_0x8e22x3 ? _0x8e22x4[_0xee2b[773]] : _0x8e22x4[_0xee2b[2764]] || _0x8e22x4[_0xee2b[773]]));
}, presetToZoomLevel:function(_0x8e22x6) {
  var _0x8e22x3 = Sch[_0xee2b[1728]][_0xee2b[1727]][_0xee2b[1726]](_0x8e22x6);
  return {preset:_0x8e22x6, increment:_0x8e22x3[_0xee2b[877]]()[_0xee2b[1735]] || 1, resolution:_0x8e22x3[_0xee2b[1767]][_0xee2b[1735]], resolutionUnit:_0x8e22x3[_0xee2b[1767]][_0xee2b[1734]], width:_0x8e22x3[_0xee2b[2679]]};
}, calculateCurrentZoomLevel:function() {
  var _0x8e22x9 = this[_0xee2b[2765]](this[_0xee2b[1725]]), _0x8e22x5 = Number[_0xee2b[1418]], _0x8e22x6 = this[_0xee2b[810]], _0x8e22x1 = _0x8e22x6[_0xee2b[2679]];
  _0x8e22x9[_0xee2b[773]] = _0x8e22x1;
  _0x8e22x9[_0xee2b[1735]] = _0x8e22x6[_0xee2b[877]]()[_0xee2b[1735]] || 1;
  for (var _0x8e22x4 = 0, _0x8e22x3 = this[_0xee2b[2757]][_0xee2b[4]]; _0x8e22x4 < _0x8e22x3; _0x8e22x4++) {
    var _0x8e22x2 = this[_0xee2b[2757]][_0x8e22x4];
    if (_0x8e22x2[_0xee2b[1728]] !== _0x8e22x9[_0xee2b[1728]]) {
      continue;
    }
    var _0x8e22x7 = Math[_0xee2b[1524]](_0x8e22x2[_0xee2b[773]] - _0x8e22x1);
    if (_0x8e22x7 < _0x8e22x5) {
      _0x8e22x5 = _0x8e22x7;
      _0x8e22x9[_0xee2b[2764]] = _0x8e22x2[_0xee2b[2764]];
      _0x8e22x9[_0xee2b[773]] = _0x8e22x2[_0xee2b[773]];
    }
  }
  return _0x8e22x9;
}, getCurrentZoomLevelIndex:function() {
  var _0x8e22x1 = this[_0xee2b[2766]]();
  var _0x8e22x6 = this[_0xee2b[2767]](_0x8e22x1);
  var _0x8e22x2 = this[_0xee2b[2757]];
  for (var _0x8e22x4 = 0; _0x8e22x4 < _0x8e22x2[_0xee2b[4]]; _0x8e22x4++) {
    var _0x8e22x5 = this[_0xee2b[2767]](_0x8e22x2[_0x8e22x4]);
    if (_0x8e22x5 == _0x8e22x6) {
      return _0x8e22x4;
    }
    if (_0x8e22x4 === 0 && _0x8e22x6 > _0x8e22x5) {
      return -0.5;
    }
    if (_0x8e22x4 == _0x8e22x2[_0xee2b[4]] - 1 && _0x8e22x6 < _0x8e22x5) {
      return _0x8e22x2[_0xee2b[4]] - 1 + 0.5;
    }
    var _0x8e22x3 = this[_0xee2b[2767]](_0x8e22x2[_0x8e22x4 + 1]);
    if (_0x8e22x5 > _0x8e22x6 && _0x8e22x6 > _0x8e22x3) {
      return _0x8e22x4 + 0.5;
    }
  }
  throw new Error(_0xee2b[2768]);
}, setMaxZoomLevel:function(_0x8e22x3) {
  if (_0x8e22x3 < 0 || _0x8e22x3 >= this[_0xee2b[2757]][_0xee2b[4]]) {
    throw new Error(_0xee2b[2769]);
  }
  this[_0xee2b[2760]] = _0x8e22x3;
}, setMinZoomLevel:function(_0x8e22x3) {
  if (_0x8e22x3 < 0 || _0x8e22x3 >= this[_0xee2b[2757]][_0xee2b[4]]) {
    throw new Error(_0xee2b[2769]);
  }
  this[_0xee2b[2758]] = _0x8e22x3;
}, zoomToLevel:function(_0x8e22x3, _0x8e22xd, _0x8e22xf) {
  _0x8e22x3 = Ext[_0xee2b[2770]][_0xee2b[2076]](_0x8e22x3, this[_0xee2b[2758]], this[_0xee2b[2760]]);
  _0x8e22xf = _0x8e22xf || {};
  var _0x8e22x6 = this[_0xee2b[2766]]();
  var _0x8e22xc = this[_0xee2b[2767]](_0x8e22x6);
  var _0x8e22x8 = this[_0xee2b[2757]][_0x8e22x3];
  var _0x8e22x4 = this[_0xee2b[2767]](_0x8e22x8);
  if (this[_0xee2b[2131]]() !== _0xee2b[1931] || _0x8e22xc == _0x8e22x4 && !_0x8e22xd) {
    return null;
  }
  var _0x8e22x9 = this;
  _0x8e22x9[_0xee2b[180]](_0xee2b[2771], _0x8e22x9, _0x8e22x3);
  var _0x8e22x7 = this[_0xee2b[808]]();
  if (!this[_0xee2b[262]]) {
    this[_0xee2b[149]](_0xee2b[833], Ext[_0xee2b[283]][_0xee2b[282]](this[_0xee2b[2772]], this, [_0x8e22x3, _0x8e22xd, _0x8e22xf]), null, {single:true});
    return;
  }
  var _0x8e22xe = _0x8e22x7[_0xee2b[2773]]();
  var _0x8e22xa = this[_0xee2b[2539]]();
  var _0x8e22x5 = _0x8e22xf[_0xee2b[2774]] || (_0x8e22xd ? new Date((_0x8e22xd[_0xee2b[179]][_0xee2b[1162]]() + _0x8e22xd[_0xee2b[771]][_0xee2b[1162]]()) / 2) : this[_0xee2b[2775]]());
  var _0x8e22x1 = _0x8e22xa ? _0x8e22x7[_0xee2b[2608]]() : _0x8e22xe[_0xee2b[793]]();
  var _0x8e22x10 = Sch[_0xee2b[1728]][_0xee2b[1727]][_0xee2b[1726]](_0x8e22x8[_0xee2b[1728]])[_0xee2b[1161]]();
  _0x8e22x10[_0xee2b[683]] = _0x8e22x8[_0xee2b[1728]];
  var _0x8e22x2 = _0x8e22x10[_0xee2b[877]]();
  _0x8e22xd = this[_0xee2b[2776]](_0x8e22x5, _0x8e22x1, _0x8e22x8, _0x8e22xd);
  _0x8e22x10[_0x8e22xa ? _0xee2b[2680] : _0xee2b[2679]] = _0x8e22xf[_0xee2b[2777]] || _0x8e22x8[_0xee2b[773]];
  _0x8e22x2[_0xee2b[1735]] = _0x8e22x8[_0xee2b[1735]];
  this[_0xee2b[2778]] = true;
  _0x8e22x10[_0xee2b[1735]] = _0x8e22x8[_0xee2b[1735]];
  _0x8e22x10[_0xee2b[1767]][_0xee2b[1734]] = Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[1176]](_0x8e22x8[_0xee2b[1754]] || _0x8e22x10[_0xee2b[1767]][_0xee2b[1734]] || _0x8e22x2[_0xee2b[1734]]);
  _0x8e22x10[_0xee2b[1767]][_0xee2b[1735]] = _0x8e22x8[_0xee2b[2779]];
  this[_0xee2b[2780]](_0x8e22x10, _0x8e22xd[_0xee2b[179]] || this[_0xee2b[697]](), _0x8e22xd[_0xee2b[771]] || this[_0xee2b[698]](), false, {centerDate:_0x8e22x5});
  _0x8e22x8[_0xee2b[2764]] = this[_0xee2b[810]][_0xee2b[755]]();
  _0x8e22x9[_0xee2b[2778]] = false;
  _0x8e22x9[_0xee2b[180]](_0xee2b[2781], _0x8e22x9, _0x8e22x3);
  return _0x8e22x3;
}, setZoomLevel:function() {
  this[_0xee2b[2772]][_0xee2b[8]](this, arguments);
}, zoomToSpan:function(_0x8e22x11, _0x8e22x15) {
  var _0x8e22xf = this[_0xee2b[808]]();
  _0x8e22x15 = _0x8e22x15 || {};
  if (_0x8e22x15[_0xee2b[2782]] || _0x8e22x15[_0xee2b[2783]]) {
    _0x8e22x15[_0xee2b[2784]] = 0;
    _0x8e22x15[_0xee2b[2785]] = 0;
  }
  Ext[_0xee2b[330]](_0x8e22x15, {leftMargin:0, rightMargin:0});
  if (!this[_0xee2b[262]]) {
    this[_0xee2b[149]](_0xee2b[833], Ext[_0xee2b[283]][_0xee2b[282]](this[_0xee2b[2786]], this, [_0x8e22x11, _0x8e22x15]), null, {single:true});
    return;
  }
  if (_0x8e22x11[_0xee2b[179]] && _0x8e22x11[_0xee2b[771]]) {
    var _0x8e22x9 = _0x8e22x11[_0xee2b[179]], _0x8e22x5 = _0x8e22x11[_0xee2b[771]], _0x8e22x2 = _0x8e22x15[_0xee2b[2784]] >= 0 && _0x8e22x15[_0xee2b[2785]] >= 0;
    if (_0x8e22x2) {
      _0x8e22x9 = Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[255]](_0x8e22x9, this[_0xee2b[1795]][_0xee2b[1747]], -_0x8e22x15[_0xee2b[2784]]);
      _0x8e22x5 = Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[255]](_0x8e22x5, this[_0xee2b[1795]][_0xee2b[1747]], _0x8e22x15[_0xee2b[2785]]);
    }
    if (_0x8e22x9 <= _0x8e22x5) {
      var _0x8e22x3 = _0x8e22xf[_0xee2b[1858]]()[_0xee2b[838]]();
      var _0x8e22xe = Math[_0xee2b[424]](this[_0xee2b[2787]]());
      if (_0x8e22xe == -1) {
        _0x8e22xe = 0;
      }
      var _0x8e22x16 = this[_0xee2b[2757]];
      var _0x8e22x6 = _0x8e22x5 - _0x8e22x9 || 1, _0x8e22x8 = this[_0xee2b[2767]](_0x8e22x16[_0x8e22xe], true), _0x8e22x10 = _0x8e22x6 / _0x8e22x8 + _0x8e22x15[_0xee2b[2782]] + _0x8e22x15[_0xee2b[2783]] > _0x8e22x3 ? -1 : 1, _0x8e22x1 = _0x8e22xe + _0x8e22x10;
      var _0x8e22xb, _0x8e22x7 = null;
      while (_0x8e22x1 >= 0 && _0x8e22x1 <= _0x8e22x16[_0xee2b[4]] - 1) {
        _0x8e22xb = _0x8e22x16[_0x8e22x1];
        _0x8e22x8 = this[_0xee2b[2767]](_0x8e22xb, true);
        var _0x8e22x19 = _0x8e22x6 / _0x8e22x8 + _0x8e22x15[_0xee2b[2782]] + _0x8e22x15[_0xee2b[2783]];
        if (_0x8e22x10 == -1) {
          if (_0x8e22x19 <= _0x8e22x3) {
            _0x8e22x7 = _0x8e22x1;
            break;
          }
        } else {
          if (_0x8e22x19 <= _0x8e22x3) {
            if (_0x8e22xe !== _0x8e22x1 - _0x8e22x10) {
              _0x8e22x7 = _0x8e22x1;
            }
          } else {
            break;
          }
        }
        _0x8e22x1 += _0x8e22x10;
      }
      _0x8e22x7 = _0x8e22x7 !== null ? _0x8e22x7 : _0x8e22x1 - _0x8e22x10;
      _0x8e22xb = _0x8e22x16[_0x8e22x7];
      var _0x8e22x4 = Sch[_0xee2b[1728]][_0xee2b[1727]][_0xee2b[1726]](_0x8e22xb[_0xee2b[1728]])[_0xee2b[877]]()[_0xee2b[1734]];
      if (_0x8e22x15[_0xee2b[2782]] || _0x8e22x15[_0xee2b[2783]]) {
        _0x8e22x9 = new Date(_0x8e22x9[_0xee2b[1162]]() - _0x8e22x8 * _0x8e22x15[_0xee2b[2782]]);
        _0x8e22x5 = new Date(_0x8e22x5[_0xee2b[1162]]() + _0x8e22x8 * _0x8e22x15[_0xee2b[2783]]);
      }
      var _0x8e22x18 = Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[2730]](_0x8e22x9, _0x8e22x5, _0x8e22x4, true) / _0x8e22xb[_0xee2b[1735]];
      if (_0x8e22x18 === 0) {
        return;
      }
      var _0x8e22xa = Math[_0xee2b[424]](_0x8e22x3 / _0x8e22x18);
      var _0x8e22xd = new Date((_0x8e22x9[_0xee2b[1162]]() + _0x8e22x5[_0xee2b[1162]]()) / 2);
      var _0x8e22xc;
      if (_0x8e22x2) {
        _0x8e22xc = {start:_0x8e22x9, end:_0x8e22x5};
      } else {
        _0x8e22xc = this[_0xee2b[2776]](_0x8e22xd, _0x8e22x3, _0x8e22xb);
      }
      return this[_0xee2b[2772]](_0x8e22x7, _0x8e22xc, {customWidth:_0x8e22xa, centerDate:_0x8e22xd});
    }
  }
  return null;
}, zoomIn:function(_0x8e22x3) {
  _0x8e22x3 = _0x8e22x3 || 1;
  var _0x8e22x6 = this[_0xee2b[2787]]();
  if (_0x8e22x6 >= this[_0xee2b[2757]][_0xee2b[4]] - 1) {
    return null;
  }
  return this[_0xee2b[2772]](Math[_0xee2b[424]](_0x8e22x6) + _0x8e22x3);
}, zoomOut:function(_0x8e22x3) {
  _0x8e22x3 = _0x8e22x3 || 1;
  var _0x8e22x6 = this[_0xee2b[2787]]();
  if (_0x8e22x6 <= 0) {
    return null;
  }
  return this[_0xee2b[2772]](Math[_0xee2b[1194]](_0x8e22x6) - _0x8e22x3);
}, zoomInFull:function() {
  return this[_0xee2b[2772]](this[_0xee2b[2760]]);
}, zoomOutFull:function() {
  return this[_0xee2b[2772]](this[_0xee2b[2758]]);
}, calculateOptimalDateRange:function(_0x8e22x4, _0x8e22x7, _0x8e22x2, _0x8e22x8) {
  if (_0x8e22x8) {
    return _0x8e22x8;
  }
  var _0x8e22x9 = this[_0xee2b[1795]];
  if (this[_0xee2b[2788]]) {
    return {start:_0x8e22x9[_0xee2b[697]](), end:_0x8e22x9[_0xee2b[698]]()};
  }
  var _0x8e22x6 = Sch[_0xee2b[49]][_0xee2b[703]];
  var _0x8e22xa = this[_0xee2b[2763]](_0x8e22x2);
  var _0x8e22x5 = Math[_0xee2b[1194]](_0x8e22x7 / _0x8e22x2[_0xee2b[773]] * _0x8e22x2[_0xee2b[1735]] * this[_0xee2b[2789]] / 2);
  var _0x8e22x3 = _0x8e22x6[_0xee2b[255]](_0x8e22x4, _0x8e22xa, -_0x8e22x5);
  var _0x8e22x1 = _0x8e22x6[_0xee2b[255]](_0x8e22x4, _0x8e22xa, _0x8e22x5);
  return {start:_0x8e22x9[_0xee2b[1751]](_0x8e22x3, false, _0x8e22xa, _0x8e22x2[_0xee2b[1735]]), end:_0x8e22x9[_0xee2b[1750]](_0x8e22x1, false, _0x8e22xa, _0x8e22x2[_0xee2b[1735]])};
}, onTimelineReady:function() {
  if (this[_0xee2b[2790]]) {
    this[_0xee2b[808]]()[_0xee2b[787]]()[_0xee2b[149]](_0xee2b[2791], this[_0xee2b[2792]], this, {capture:true});
    this[_0xee2b[149]](_0xee2b[218], function() {
      clearTimeout(this[_0xee2b[2793]]);
    });
  }
}, onWheel:function(_0x8e22x6) {
  var _0x8e22x3 = this;
  if (_0x8e22x6[_0xee2b[2794]]) {
    _0x8e22x6[_0xee2b[1977]]();
    if (!_0x8e22x3[_0xee2b[2795]]) {
      if (_0x8e22x6[_0xee2b[790]][_0xee2b[2796]] > 0) {
        _0x8e22x3[_0xee2b[2797]]();
      } else {
        if (_0x8e22x6[_0xee2b[790]][_0xee2b[2796]] < 0) {
          _0x8e22x3[_0xee2b[2798]]();
        }
      }
      _0x8e22x3[_0xee2b[2795]] = true;
      _0x8e22x3[_0xee2b[2793]] = setTimeout(function() {
        _0x8e22x3[_0xee2b[2795]] = false;
      }, 30);
    }
  }
}});
Ext[_0xee2b[6]](_0xee2b[2799], {requires:[_0xee2b[1715], _0xee2b[2709], _0xee2b[1898], _0xee2b[2683]], mixins:[_0xee2b[2747]], snapToIncrement:false, readOnly:false, forceFit:false, eventResizeHandles:_0xee2b[1911], timeAxis:null, autoAdjustTimeAxis:true, timeAxisViewModel:null, crudManager:null, viewPreset:_0xee2b[2753], trackHeaderOver:true, startDate:null, endDate:null, startTime:0, endTime:24, columnLines:true, getDateConstraints:Ext[_0xee2b[688]], snapRelativeToEventStartDate:false, trackMouseOver:false, 
readRowHeightFromPreset:true, eventBorderWidth:1, cachedCenterDate:null, cellBorderWidth:1, cellTopBorderWidth:0, cellBottomBorderWidth:0, renderers:null, getMode:function() {
  return this[_0xee2b[1719]];
}, isHorizontal:function() {
  return this[_0xee2b[2131]]() === _0xee2b[1931];
}, isVertical:function() {
  return this[_0xee2b[2131]]() === _0xee2b[1932];
}, isWeekView:function() {
  return this[_0xee2b[2131]]() === _0xee2b[2430];
}, _initializeTimelinePanel:function() {
  if (this[_0xee2b[1719]]) {
    if (this[_0xee2b[1719]] === _0xee2b[2006]) {
      this[_0xee2b[1719]] = _0xee2b[2430];
    }
  } else {
    this[_0xee2b[1719]] = _0xee2b[1931];
  }
  this[_0xee2b[2800]](this[_0xee2b[1725]]);
  if (this[_0xee2b[1847]]()) {
    if (!this[_0xee2b[1725]][_0xee2b[875]][_0xee2b[753]][_0xee2b[1760]]) {
      this[_0xee2b[2801]] = [this[_0xee2b[1725]]];
      this[_0xee2b[1725]] = this[_0xee2b[2802]] || _0xee2b[521];
    }
  }
  this[_0xee2b[2803]]();
  this[_0xee2b[149]](_0xee2b[2804], this[_0xee2b[2805]], this);
  this[_0xee2b[149]](_0xee2b[1808], this[_0xee2b[2806]], this);
  this[_0xee2b[2807]] = [];
  if (this[_0xee2b[2808]]) {
    this[_0xee2b[2808]] = !this[_0xee2b[2678]];
  }
  if (!(this[_0xee2b[1795]] instanceof Sch[_0xee2b[22]][_0xee2b[2809]])) {
    this[_0xee2b[1795]] = Ext[_0xee2b[831]](Ext[_0xee2b[330]](this[_0xee2b[1795]] || {}, {xclass:_0xee2b[1715], autoAdjust:this[_0xee2b[2810]], mode:this[_0xee2b[1847]]() ? _0xee2b[521] : _0xee2b[1717]}));
  }
  if (!(this[_0xee2b[810]] instanceof Sch[_0xee2b[829]][_0xee2b[327]][_0xee2b[2809]])) {
    this[_0xee2b[810]] = Ext[_0xee2b[831]](Ext[_0xee2b[330]](this[_0xee2b[810]] || {}, {xclass:_0xee2b[2709], mode:this[_0xee2b[1719]], snapToIncrement:this[_0xee2b[2736]], forceFit:this[_0xee2b[2715]], timeAxis:this[_0xee2b[1795]], eventStore:this[_0xee2b[696]](), viewPreset:this[_0xee2b[1725]]}));
  }
  if (this[_0xee2b[2678]]) {
    this[_0xee2b[2811]](this[_0xee2b[2678]], true);
    this[_0xee2b[2678]] = null;
  }
  this[_0xee2b[810]][_0xee2b[149]](_0xee2b[724], this[_0xee2b[2812]], this);
  this[_0xee2b[810]][_0xee2b[2813]]++;
  this[_0xee2b[149]](_0xee2b[218], this[_0xee2b[2814]], this);
  var _0x8e22x3;
  if (this[_0xee2b[1828]]()) {
    _0x8e22x3 = [_0xee2b[2815]];
  } else {
    if (this[_0xee2b[2539]]()) {
      _0x8e22x3 = [_0xee2b[2816], _0xee2b[2817]];
    } else {
      if (this[_0xee2b[1847]]()) {
        _0x8e22x3 = [_0xee2b[2816], _0xee2b[2818]];
      }
    }
  }
  this[_0xee2b[264]]([][_0xee2b[318]][_0xee2b[8]]([_0xee2b[2819]], _0x8e22x3));
}, applyViewPreset:function(_0x8e22x6) {
  var _0x8e22x5;
  if (Ext[_0xee2b[363]](_0x8e22x6)) {
    _0x8e22x5 = Sch[_0xee2b[1728]][_0xee2b[1727]][_0xee2b[1726]](_0x8e22x6);
    if (!_0x8e22x5) {
      throw _0xee2b[2820];
    }
  } else {
    if (Ext[_0xee2b[135]](_0x8e22x6)) {
      var _0x8e22x4 = _0x8e22x6[_0xee2b[683]] && Sch[_0xee2b[1728]][_0xee2b[1727]][_0xee2b[1726]](_0x8e22x6[_0xee2b[683]]);
      if (_0x8e22x4) {
        _0x8e22x5 = new Sch[_0xee2b[1728]].ViewPreset(Ext[_0xee2b[330]](_0x8e22x6, _0x8e22x4));
      } else {
        var _0x8e22x3 = _0x8e22x6[_0xee2b[683]] || _0xee2b[1728] + Sch[_0xee2b[1728]][_0xee2b[1727]][_0xee2b[1466]]();
        Sch[_0xee2b[1728]][_0xee2b[1727]][_0xee2b[2708]](_0x8e22x3, _0x8e22x6);
        _0x8e22x5 = Sch[_0xee2b[1728]][_0xee2b[1727]][_0xee2b[1726]](_0x8e22x3);
      }
    }
  }
  this[_0xee2b[1725]] = _0x8e22x5;
}, onTimeAxisViewModelUpdate:function() {
  var _0x8e22x3 = this[_0xee2b[808]]();
  if (_0x8e22x3 && _0x8e22x3[_0xee2b[2366]]) {
    _0x8e22x3[_0xee2b[2669]]();
  }
  this[_0xee2b[180]](_0xee2b[2804], this);
}, onPanelDestroyed:function() {
  var _0x8e22x3 = this[_0xee2b[810]];
  _0x8e22x3[_0xee2b[152]](_0xee2b[724], this[_0xee2b[2812]], this);
  _0x8e22x3[_0xee2b[2813]]--;
  if (_0x8e22x3[_0xee2b[2813]] <= 0) {
    _0x8e22x3[_0xee2b[218]]();
  }
}, getSchedulingView:function() {
  throw _0xee2b[29];
}, setReadOnly:function(_0x8e22x6) {
  var _0x8e22x3 = this;
  _0x8e22x3[_0xee2b[808]]()[_0xee2b[2821]](_0x8e22x6);
  if (_0x8e22x3[_0xee2b[2544]]) {
    _0x8e22x3[_0xee2b[2544]][_0xee2b[2821]](_0x8e22x6);
  }
}, isReadOnly:function() {
  return this[_0xee2b[808]]()[_0xee2b[2184]]();
}, setupClearCenterDateCache:function() {
  this[_0xee2b[252]](this[_0xee2b[808]]()[_0xee2b[1941]](), _0xee2b[1978], this[_0xee2b[2805]], this);
}, getViewportCenterDateCached:function() {
  if (this[_0xee2b[2822]]) {
    return this[_0xee2b[2822]];
  }
  return this[_0xee2b[2822]] = this[_0xee2b[2823]]();
}, clearCenterDateCache:function(_0x8e22x4, _0x8e22x2, _0x8e22x5) {
  var _0x8e22x1 = this[_0xee2b[1828]](), _0x8e22x3 = this[_0xee2b[2824]];
  var _0x8e22x6 = _0x8e22x3 && (_0x8e22x1 ? _0x8e22x2 === _0x8e22x3[_0xee2b[1354]] : _0x8e22x5 == _0x8e22x3[_0xee2b[686]]);
  if (!_0x8e22x6) {
    this[_0xee2b[2822]] = null;
    this[_0xee2b[2824]] = null;
  }
}, switchViewPreset:function() {
  this[_0xee2b[2780]][_0xee2b[8]](this, arguments);
}, setViewPreset:function(_0x8e22xf, _0x8e22x3, _0x8e22x5, _0x8e22x1, _0x8e22xc) {
  _0x8e22xc = _0x8e22xc || {};
  var _0x8e22x6 = _0x8e22xc[_0xee2b[2774]], _0x8e22x2 = this[_0xee2b[1795]], _0x8e22xa = this[_0xee2b[808]]();
  if (typeof _0x8e22xf === _0xee2b[308]) {
    _0x8e22xf = Sch[_0xee2b[1728]][_0xee2b[1727]][_0xee2b[1726]](_0x8e22xf);
  }
  if (!_0x8e22xf) {
    throw new Error(_0xee2b[2825]);
  }
  if (this[_0xee2b[180]](_0xee2b[2826], this, _0x8e22xf, _0x8e22x3, _0x8e22x5) !== false) {
    this[_0xee2b[1725]] = _0x8e22xf[_0xee2b[683]];
    var _0x8e22x10 = this[_0xee2b[1828]](), _0x8e22xd = this[_0xee2b[2539]]();
    _0x8e22xa[_0xee2b[2827]](_0x8e22xf[_0xee2b[2682]]);
    if (!(_0x8e22x1 && _0x8e22x2[_0xee2b[1730]])) {
      var _0x8e22x4 = {weekStartDay:this[_0xee2b[1755]] !== undefined ? this[_0xee2b[1755]] : this[_0xee2b[2828]] ? this.L(_0xee2b[1755]) : 1, startTime:this[_0xee2b[1119]], endTime:this[_0xee2b[1121]]};
      if (_0x8e22x1 || !this[_0xee2b[262]]) {
        if (_0x8e22x2[_0xee2b[1466]]() === 0 || _0x8e22x3) {
          _0x8e22x4[_0xee2b[179]] = _0x8e22x3 || new Date();
          _0x8e22x4[_0xee2b[771]] = _0x8e22x5;
        }
      } else {
        if (_0x8e22x3) {
          _0x8e22x4[_0xee2b[179]] = _0x8e22x3;
          _0x8e22x4[_0xee2b[771]] = _0x8e22x5;
          if (!_0x8e22x6 && _0x8e22x5) {
            if (this[_0xee2b[2829]] && _0x8e22xa[_0xee2b[2830]] && _0x8e22xa[_0xee2b[2831]]) {
              _0x8e22x6 = _0x8e22xa[_0xee2b[2830]];
            } else {
              _0x8e22x6 = new Date((_0x8e22x3[_0xee2b[1162]]() + _0x8e22x5[_0xee2b[1162]]()) / 2);
            }
          }
        } else {
          _0x8e22x4[_0xee2b[179]] = _0x8e22x2[_0xee2b[697]]();
          _0x8e22x4[_0xee2b[771]] = _0x8e22x5 || _0x8e22x2[_0xee2b[698]]();
          if (!_0x8e22x6) {
            if (this[_0xee2b[2829]] && _0x8e22xa[_0xee2b[2830]] && _0x8e22xa[_0xee2b[2831]]) {
              _0x8e22x6 = _0x8e22xa[_0xee2b[2830]];
            } else {
              _0x8e22x6 = this[_0xee2b[2775]]();
            }
          }
        }
      }
      _0x8e22x2[_0xee2b[1729]](_0x8e22xf);
      _0x8e22x2[_0xee2b[1723]](_0x8e22x4, true);
      this[_0xee2b[810]][_0xee2b[1723]]({viewPreset:this[_0xee2b[1725]], headerConfig:_0x8e22xf[_0xee2b[875]], columnLinesFor:_0x8e22xf[_0xee2b[1906]] || _0xee2b[753], rowHeightHorizontal:this[_0xee2b[2808]] ? _0x8e22xf[_0xee2b[2678]] : this[_0xee2b[810]][_0xee2b[2832]](), tickWidth:_0x8e22x10 ? _0x8e22xf[_0xee2b[2679]] : _0x8e22xf[_0xee2b[2680]] || _0x8e22xf[_0xee2b[2679]] || 60, timeColumnWidth:_0x8e22xf[_0xee2b[2679]], rowHeightVertical:_0x8e22xf[_0xee2b[2680]] || _0x8e22xf[_0xee2b[2679]] || 60, 
      timeAxisColumnWidth:_0x8e22xf[_0xee2b[2681]], resourceColumnWidth:this[_0xee2b[2582]] || _0x8e22xf[_0xee2b[2582]] || 100});
    }
    if (_0x8e22xd) {
      _0x8e22xa[_0xee2b[2833]](this[_0xee2b[2582]] || _0x8e22xf[_0xee2b[2582]] || 100, true);
    }
    var _0x8e22xe = _0x8e22xa[_0xee2b[2773]]();
    if (!_0x8e22xc[_0xee2b[2834]] && _0x8e22xe && this[_0xee2b[290]]()[_0xee2b[265]]) {
      if (_0x8e22x6) {
        this[_0xee2b[2822]] = _0x8e22x6;
        var _0x8e22x8 = null, _0x8e22x7 = null;
        if (_0x8e22xd) {
          _0x8e22x7 = Math[_0xee2b[715]](Math[_0xee2b[424]](_0x8e22xa[_0xee2b[1895]](_0x8e22x6, true) - _0x8e22xa[_0xee2b[2608]]() / 2), 0);
          this[_0xee2b[2824]] = {top:_0x8e22x7};
          _0x8e22xa[_0xee2b[2835]](_0x8e22x7);
        } else {
          _0x8e22x8 = Math[_0xee2b[715]](Math[_0xee2b[424]](_0x8e22xa[_0xee2b[1895]](_0x8e22x6, true) - _0x8e22xe[_0xee2b[793]]() / 2), 0);
          this[_0xee2b[2824]] = {left:_0x8e22x8};
          if (Ext[_0xee2b[2009]]()[_0xee2b[966]](_0xee2b[2836])) {
            var _0x8e22x9 = _0x8e22xa[_0xee2b[694]](_0xee2b[805])[_0xee2b[2837]];
            _0x8e22x9 && _0x8e22x9[_0xee2b[289]](_0x8e22x8);
          }
          _0x8e22xa[_0xee2b[1848]][_0xee2b[289]](_0x8e22x8);
          _0x8e22xa[_0xee2b[289]](_0x8e22x8);
        }
      } else {
        if (_0x8e22x10) {
          _0x8e22xa[_0xee2b[2838]](0);
        } else {
          _0x8e22xa[_0xee2b[2835]](0);
        }
      }
    }
  }
}, getViewPreset:function() {
  return this[_0xee2b[1725]];
}, getStart:function() {
  return this[_0xee2b[712]]();
}, getStartDate:function() {
  return this[_0xee2b[1795]][_0xee2b[697]]();
}, getEnd:function() {
  return this[_0xee2b[713]]();
}, getEndDate:function() {
  return this[_0xee2b[1795]][_0xee2b[698]]();
}, setTimeColumnWidth:function(_0x8e22x6, _0x8e22x3) {
  this[_0xee2b[810]][_0xee2b[811]](_0x8e22x6, _0x8e22x3);
}, getTimeColumnWidth:function() {
  return this[_0xee2b[810]][_0xee2b[755]]();
}, getRowHeight:function() {
  return this[_0xee2b[810]][_0xee2b[2832]]();
}, shiftNext:function(_0x8e22x3) {
  this[_0xee2b[2839]] && this[_0xee2b[2839]]();
  this[_0xee2b[1795]][_0xee2b[2840]](_0x8e22x3);
  this[_0xee2b[2839]] && this[_0xee2b[2841]](true);
}, shiftPrevious:function(_0x8e22x3) {
  this[_0xee2b[2839]] && this[_0xee2b[2839]]();
  this[_0xee2b[1795]][_0xee2b[2842]](_0x8e22x3);
  this[_0xee2b[2839]] && this[_0xee2b[2841]](true);
}, goToNow:function() {
  this[_0xee2b[1756]](new Date());
}, setTimeSpan:function(_0x8e22x6, _0x8e22x3) {
  if (this[_0xee2b[1795]]) {
    this[_0xee2b[1795]][_0xee2b[1756]](_0x8e22x6, _0x8e22x3);
  }
}, setStart:function(_0x8e22x3) {
  this[_0xee2b[1204]](_0x8e22x3);
}, setEnd:function(_0x8e22x3) {
  this[_0xee2b[1202]](_0x8e22x3);
}, setStartDate:function(_0x8e22x3) {
  this[_0xee2b[1756]](_0x8e22x3);
}, setEndDate:function(_0x8e22x3) {
  this[_0xee2b[1756]](null, _0x8e22x3);
}, getTimeAxis:function() {
  return this[_0xee2b[1795]];
}, scrollToDate:function(_0x8e22x4, _0x8e22x6, _0x8e22x5) {
  var _0x8e22x3 = this[_0xee2b[808]]();
  var _0x8e22x2 = _0x8e22x3[_0xee2b[1895]](_0x8e22x4, true);
  this[_0xee2b[2843]](_0x8e22x2, _0x8e22x4, _0x8e22x6, false, _0x8e22x5);
}, scrollToDateCentered:function(_0x8e22x4, _0x8e22x6) {
  var _0x8e22x3 = this[_0xee2b[808]]();
  var _0x8e22x2 = 0;
  if (_0x8e22x3[_0xee2b[1828]]()) {
    _0x8e22x2 = _0x8e22x3[_0xee2b[2611]]()[_0xee2b[773]] / 2;
  } else {
    _0x8e22x2 = _0x8e22x3[_0xee2b[2611]]()[_0xee2b[747]] / 2;
  }
  var _0x8e22x5 = Math[_0xee2b[704]](_0x8e22x3[_0xee2b[1895]](_0x8e22x4, true) - _0x8e22x2);
  this[_0xee2b[2843]](_0x8e22x5, _0x8e22x4, _0x8e22x6, true);
}, scrollToCoordinate:function(_0x8e22x8, _0x8e22x4, _0x8e22x6, _0x8e22x1, _0x8e22x9) {
  var _0x8e22xa = this[_0xee2b[808]]();
  var _0x8e22x7 = this;
  _0x8e22x9 = _0x8e22x9 || 0;
  if (_0x8e22x8 < 0 && !_0x8e22xa[_0xee2b[1847]]()) {
    if (this[_0xee2b[2829]]) {
      _0x8e22xa[_0xee2b[2844]](_0x8e22x4, _0x8e22x1);
    } else {
      var _0x8e22x5 = (this[_0xee2b[1795]][_0xee2b[698]]() - this[_0xee2b[1795]][_0xee2b[697]]()) / 2;
      var _0x8e22x3 = new Date(_0x8e22x4[_0xee2b[1162]]() - _0x8e22x5);
      var _0x8e22x2 = new Date(_0x8e22x4[_0xee2b[1162]]() + _0x8e22x5);
      if (_0x8e22x3 - this[_0xee2b[697]]() !== 0 && _0x8e22x2 - this[_0xee2b[698]]() !== 0) {
        this[_0xee2b[1756]](_0x8e22x3, _0x8e22x2);
        if (_0x8e22x1) {
          _0x8e22x7[_0xee2b[2845]](_0x8e22x4, _0x8e22x6);
        } else {
          _0x8e22x7[_0xee2b[812]](_0x8e22x4, _0x8e22x6, _0x8e22x9);
        }
      }
    }
    return;
  }
  if (this[_0xee2b[1828]]()) {
    _0x8e22xa[_0xee2b[2838]](_0x8e22x8 - _0x8e22x9, _0x8e22x6);
  } else {
    _0x8e22xa[_0xee2b[2835]](_0x8e22x8 - _0x8e22x9, _0x8e22x6);
  }
}, getViewportCenterDate:function() {
  return this[_0xee2b[808]]()[_0xee2b[2823]]();
}, addCls:function() {
  throw _0xee2b[29];
}, removeCls:function() {
  throw _0xee2b[29];
}, registerRenderer:function(_0x8e22x6, _0x8e22x3) {
  this[_0xee2b[2807]][_0xee2b[11]]({fn:_0x8e22x6, scope:_0x8e22x3});
}, deregisterRenderer:function(_0x8e22x6, _0x8e22x3) {
  Ext[_0xee2b[25]](this[_0xee2b[2807]], function(_0x8e22x4, _0x8e22x5) {
    if (_0x8e22x6 === _0x8e22x4) {
      Ext[_0xee2b[26]][_0xee2b[1684]](this[_0xee2b[2807]], _0x8e22x5);
      return false;
    }
  });
}, getCrudManager:function() {
  return this[_0xee2b[312]];
}, setCrudManager:function(_0x8e22x3) {
  this[_0xee2b[312]] = _0x8e22x3;
}});
Ext[_0xee2b[6]](_0xee2b[2846], {requires:[_0xee2b[1950], _0xee2b[2570], _0xee2b[34], _0xee2b[1140]], fadeOutRemoval:true, view:null, constructor:function(_0x8e22x3) {
  Ext[_0xee2b[8]](this, _0x8e22x3);
}, getElementsFromEventRecord:function(_0x8e22x6, _0x8e22x2, _0x8e22x5, _0x8e22x4) {
  var _0x8e22x3 = this[_0xee2b[829]], _0x8e22x1;
  _0x8e22x4 = _0x8e22x4 || false;
  if (_0x8e22x2) {
    _0x8e22x1 = _0xee2b[2571] + _0x8e22x3[_0xee2b[2560]] + _0x8e22x6[_0xee2b[1049]] + _0xee2b[1131] + _0x8e22x2[_0xee2b[1049]] + _0xee2b[2572];
  } else {
    _0x8e22x1 = _0xee2b[2571] + _0x8e22x3[_0xee2b[2560]] + _0x8e22x6[_0xee2b[1049]] + _0xee2b[2572];
  }
  return _0x8e22x3[_0xee2b[787]]()[_0xee2b[2573]](_0x8e22x1, _0x8e22x4);
}, translateToScheduleCoordinate:function(_0x8e22x3) {
  var _0x8e22x6 = this[_0xee2b[829]];
  var _0x8e22x4;
  if (_0x8e22x6[_0xee2b[2170]]()) {
    _0x8e22x4 = _0x8e22x6[_0xee2b[787]]()[_0xee2b[2419]]() - _0x8e22x3;
  } else {
    _0x8e22x4 = _0x8e22x3 - _0x8e22x6[_0xee2b[787]]()[_0xee2b[809]]();
  }
  return _0x8e22x4 + _0x8e22x6[_0xee2b[1966]]()[_0xee2b[1354]];
}, translateToPageCoordinate:function(_0x8e22x3) {
  var _0x8e22x6 = this[_0xee2b[829]];
  return _0x8e22x3 + _0x8e22x6[_0xee2b[787]]()[_0xee2b[809]]() - _0x8e22x6[_0xee2b[1966]]()[_0xee2b[1354]];
}, getDateFromXY:function(_0x8e22x4, _0x8e22x6, _0x8e22x3) {
  var _0x8e22x5 = _0x8e22x4[0];
  if (!_0x8e22x3) {
    _0x8e22x5 = this[_0xee2b[2575]](_0x8e22x5);
  }
  return this[_0xee2b[829]][_0xee2b[810]][_0xee2b[2576]](_0x8e22x5, _0x8e22x6);
}, getEventRenderData:function(_0x8e22x3) {
  var _0x8e22x1 = _0x8e22x3[_0xee2b[712]](), _0x8e22x2 = _0x8e22x3[_0xee2b[713]]() || _0x8e22x1, _0x8e22x7 = this[_0xee2b[829]], _0x8e22x4 = _0x8e22x7[_0xee2b[1795]][_0xee2b[697]](), _0x8e22xa = _0x8e22x7[_0xee2b[1795]][_0xee2b[698]](), _0x8e22x9 = Math, _0x8e22x5 = _0x8e22x7[_0xee2b[1895]](Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[715]](_0x8e22x1, _0x8e22x4)), _0x8e22x8 = _0x8e22x7[_0xee2b[1895]](Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[203]](_0x8e22x2, _0x8e22xa)), _0x8e22x6 = {event:_0x8e22x3};
  if (this[_0xee2b[829]][_0xee2b[1855]]) {
    _0x8e22x6[_0xee2b[867]] = _0x8e22x9[_0xee2b[203]](_0x8e22x5, _0x8e22x8);
  } else {
    _0x8e22x6[_0xee2b[1354]] = _0x8e22x9[_0xee2b[203]](_0x8e22x5, _0x8e22x8);
  }
  _0x8e22x6[_0xee2b[773]] = _0x8e22x9[_0xee2b[715]](1, _0x8e22x9[_0xee2b[1524]](_0x8e22x8 - _0x8e22x5)) - _0x8e22x7[_0xee2b[2577]];
  if (_0x8e22x7[_0xee2b[2610]]) {
    _0x8e22x6[_0xee2b[686]] = _0x8e22x9[_0xee2b[715]](0, _0x8e22x7[_0xee2b[1800]] - _0x8e22x7[_0xee2b[2577]] + _0x8e22x7[_0xee2b[2584]]);
    _0x8e22x6[_0xee2b[747]] = _0x8e22x7[_0xee2b[810]][_0xee2b[2743]] - 2 * _0x8e22x7[_0xee2b[1800]] - _0x8e22x7[_0xee2b[2577]];
  }
  _0x8e22x6[_0xee2b[179]] = _0x8e22x1;
  _0x8e22x6[_0xee2b[771]] = _0x8e22x2;
  _0x8e22x6[_0xee2b[2275]] = _0x8e22x1 < _0x8e22x4;
  _0x8e22x6[_0xee2b[2277]] = _0x8e22x2 > _0x8e22xa;
  return _0x8e22x6;
}, getScheduleRegion:function(_0x8e22x2, _0x8e22x9) {
  var _0x8e22x8 = this[_0xee2b[829]], _0x8e22xa;
  if (_0x8e22x2) {
    var _0x8e22x4 = _0x8e22x9 && _0x8e22x8[_0xee2b[2191]](_0x8e22x9, _0x8e22x2)[0];
    _0x8e22xa = Ext[_0xee2b[761]](_0x8e22x8[_0xee2b[2847]](_0x8e22x2))[_0xee2b[1945]]();
    if (_0x8e22x4) {
      var _0x8e22x10 = _0x8e22x4[_0xee2b[1945]]();
      _0x8e22xa[_0xee2b[686]] = _0x8e22x10[_0xee2b[686]];
      _0x8e22xa[_0xee2b[754]] = _0x8e22x10[_0xee2b[754]];
    } else {
      _0x8e22xa[_0xee2b[686]] = _0x8e22xa[_0xee2b[686]] + _0x8e22x8[_0xee2b[1800]];
      _0x8e22xa[_0xee2b[754]] = _0x8e22xa[_0xee2b[754]] - _0x8e22x8[_0xee2b[1800]] - _0x8e22x8[_0xee2b[2577]];
    }
  } else {
    _0x8e22xa = _0x8e22x8[_0xee2b[2579]]();
    _0x8e22xa[_0xee2b[686]] = _0x8e22xa[_0xee2b[686]] + _0x8e22x8[_0xee2b[1800]];
    _0x8e22xa[_0xee2b[754]] = _0x8e22xa[_0xee2b[754]] - _0x8e22x8[_0xee2b[1800]] - _0x8e22x8[_0xee2b[2577]];
  }
  var _0x8e22x1 = _0x8e22x8[_0xee2b[1795]][_0xee2b[697]](), _0x8e22xe = _0x8e22x8[_0xee2b[1795]][_0xee2b[698]](), _0x8e22x6 = _0x8e22x8[_0xee2b[2060]](_0x8e22x2, _0x8e22x9) || {start:_0x8e22x1, end:_0x8e22xe}, _0x8e22x5 = this[_0xee2b[2580]](_0x8e22x8[_0xee2b[1895]](Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[715]](_0x8e22x1, _0x8e22x6[_0xee2b[179]]))), _0x8e22xd = this[_0xee2b[2580]](_0x8e22x8[_0xee2b[1895]](Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[203]](_0x8e22xe, _0x8e22x6[_0xee2b[771]]))), _0x8e22x7 = 
  _0x8e22xa[_0xee2b[686]], _0x8e22x3 = _0x8e22xa[_0xee2b[754]];
  return new Ext[_0xee2b[49]].Region(_0x8e22x7, Math[_0xee2b[715]](_0x8e22x5, _0x8e22xd), _0x8e22x3, Math[_0xee2b[203]](_0x8e22x5, _0x8e22xd));
}, getResourceRegion:function(_0x8e22x8, _0x8e22x2, _0x8e22xa) {
  var _0x8e22xe = this[_0xee2b[829]], _0x8e22x5 = _0x8e22xe[_0xee2b[2847]](_0x8e22x8), _0x8e22x1 = Ext[_0xee2b[761]](_0x8e22x5)[_0xee2b[2264]](_0x8e22xe[_0xee2b[787]]()), _0x8e22xd = _0x8e22xe[_0xee2b[1795]][_0xee2b[697]](), _0x8e22xc = _0x8e22xe[_0xee2b[1795]][_0xee2b[698]](), _0x8e22x4 = _0x8e22x2 ? Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[715]](_0x8e22xd, _0x8e22x2) : _0x8e22xd, _0x8e22x9 = _0x8e22xa ? Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[203]](_0x8e22xc, _0x8e22xa) : _0x8e22xc, _0x8e22x7 = _0x8e22xe[_0xee2b[1895]](_0x8e22x4), 
  _0x8e22xf = _0x8e22xe[_0xee2b[1895]](_0x8e22x9), _0x8e22x10 = _0x8e22x1[1] + _0x8e22xe[_0xee2b[2584]], _0x8e22x3 = _0x8e22x1[1] + Ext[_0xee2b[761]](_0x8e22x5)[_0xee2b[859]]() - _0x8e22xe[_0xee2b[2848]];
  if (!Ext[_0xee2b[723]][_0xee2b[722]]) {
    var _0x8e22x6 = _0x8e22xe[_0xee2b[1966]]();
    _0x8e22x10 += _0x8e22x6[_0xee2b[686]];
    _0x8e22x3 += _0x8e22x6[_0xee2b[686]];
  }
  return new Ext[_0xee2b[49]].Region(_0x8e22x10, Math[_0xee2b[715]](_0x8e22x7, _0x8e22xf), _0x8e22x3, Math[_0xee2b[203]](_0x8e22x7, _0x8e22xf));
}, getScheduledEventsForResource:function(_0x8e22x6) {
  var _0x8e22x3 = this[_0xee2b[829]];
  return _0x8e22x3[_0xee2b[696]]()[_0xee2b[2602]](_0x8e22x6, function(_0x8e22x4) {
    return _0x8e22x3[_0xee2b[1795]][_0xee2b[2601]](_0x8e22x4) && _0x8e22x4[_0xee2b[1205]]();
  });
}, columnRenderer:function(_0x8e22x6, _0x8e22x8, _0x8e22x2, _0x8e22x1, _0x8e22xa) {
  var _0x8e22x7 = this[_0xee2b[829]], _0x8e22x3 = this[_0xee2b[2603]](_0x8e22x2);
  if (_0x8e22x3[_0xee2b[4]] === 0) {
    return;
  }
  var _0x8e22x9 = Ext[_0xee2b[26]][_0xee2b[41]](_0x8e22x3, function(_0x8e22xd) {
    return _0x8e22x7[_0xee2b[2585]](_0x8e22xd, _0x8e22x2, _0x8e22x1);
  });
  if (_0x8e22x7[_0xee2b[2849]](_0x8e22x2)) {
    var _0x8e22x5 = _0x8e22x7[_0xee2b[2587]][_0xee2b[1931]];
    var _0x8e22x4 = _0x8e22x5[_0xee2b[1788]](_0x8e22x9, _0x8e22x2, this[_0xee2b[2623]], this);
    _0x8e22x8[_0xee2b[2678]] = _0x8e22x4 * _0x8e22x7[_0xee2b[810]][_0xee2b[2743]] - (_0x8e22x4 - 1) * _0x8e22x7[_0xee2b[1800]];
  }
  return _0x8e22x7[_0xee2b[2589]][_0xee2b[8]](_0x8e22x9);
}, layoutEventVertically:function(_0x8e22x5, _0x8e22x6) {
  var _0x8e22x3 = this[_0xee2b[829]];
  var _0x8e22x4 = _0x8e22x5 === 0 ? _0x8e22x3[_0xee2b[1800]] : _0x8e22x5 * _0x8e22x3[_0xee2b[810]][_0xee2b[2743]] - (_0x8e22x5 - 1) * _0x8e22x3[_0xee2b[1800]];
  _0x8e22x4 += _0x8e22x3[_0xee2b[2584]];
  return _0x8e22x4;
}, resolveResource:function(_0x8e22x2) {
  var _0x8e22x5 = this, _0x8e22x6 = _0x8e22x5[_0xee2b[829]], _0x8e22x4, _0x8e22x3;
  _0x8e22x4 = Ext[_0xee2b[761]](_0x8e22x2)[_0xee2b[2592]](_0x8e22x6[_0xee2b[2034]]) && _0x8e22x2 || Ext[_0xee2b[761]](_0x8e22x2)[_0xee2b[694]](_0x8e22x6[_0xee2b[2034]], null, true);
  if (_0x8e22x4) {
    _0x8e22x3 = _0x8e22x6[_0xee2b[2593]](_0x8e22x4[_0xee2b[388]]);
  } else {
    _0x8e22x2 = _0x8e22x6[_0xee2b[2850]](_0x8e22x2);
    _0x8e22x3 = _0x8e22x2 && _0x8e22x6[_0xee2b[2851]](_0x8e22x2) || null;
  }
  return _0x8e22x3;
}, getTimeSpanRegion:function(_0x8e22x6, _0x8e22x7, _0x8e22x9) {
  var _0x8e22x5 = this[_0xee2b[829]], _0x8e22x4 = _0x8e22x5[_0xee2b[1895]](_0x8e22x6), _0x8e22x2 = _0x8e22x7 ? _0x8e22x5[_0xee2b[1895]](_0x8e22x7) : _0x8e22x4, _0x8e22x3, _0x8e22x1;
  _0x8e22x1 = _0x8e22x5[_0xee2b[2579]]();
  if (_0x8e22x9) {
    _0x8e22x3 = Math[_0xee2b[715]](_0x8e22x1 ? _0x8e22x1[_0xee2b[754]] - _0x8e22x1[_0xee2b[686]] : 0, _0x8e22x5[_0xee2b[787]]()[_0xee2b[758]][_0xee2b[2852]]);
  } else {
    _0x8e22x3 = _0x8e22x1 ? _0x8e22x1[_0xee2b[754]] - _0x8e22x1[_0xee2b[686]] : 0;
  }
  return new Ext[_0xee2b[49]].Region(0, Math[_0xee2b[715]](_0x8e22x4, _0x8e22x2), _0x8e22x3, Math[_0xee2b[203]](_0x8e22x4, _0x8e22x2));
}, getStartEndDatesFromRegion:function(_0x8e22x5, _0x8e22x4) {
  var _0x8e22x3 = this[_0xee2b[829]], _0x8e22x6 = _0x8e22x3[_0xee2b[807]](_0x8e22x5[_0xee2b[1354]], _0x8e22x4), _0x8e22x2 = _0x8e22x3[_0xee2b[807]](_0x8e22x5[_0xee2b[867]], _0x8e22x4);
  return {start:_0x8e22x6, end:_0x8e22x2};
}, onEventAdd:function(_0x8e22x11, _0x8e22xb) {
  var _0x8e22xc = this[_0xee2b[829]], _0x8e22x7 = {}, _0x8e22x3, _0x8e22x6, _0x8e22xf, _0x8e22x4, _0x8e22x2, _0x8e22xe, _0x8e22x5, _0x8e22x9, _0x8e22x1;
  for (_0x8e22xe = 0, _0x8e22x5 = _0x8e22xb[_0xee2b[4]]; _0x8e22xe < _0x8e22x5; _0x8e22xe++) {
    _0x8e22x3 = _0x8e22xb[_0x8e22xe];
    _0x8e22x6 = _0x8e22x3[_0xee2b[712]]();
    _0x8e22xf = _0x8e22x3[_0xee2b[713]]();
    if (_0x8e22x6 && _0x8e22xf && _0x8e22xc[_0xee2b[1795]][_0xee2b[1765]](_0x8e22x6, _0x8e22xf)) {
      _0x8e22x4 = _0x8e22xb[_0x8e22xe][_0xee2b[1427]](_0x8e22xc[_0xee2b[696]]());
      for (_0x8e22x9 = 0, _0x8e22x1 = _0x8e22x4[_0xee2b[4]]; _0x8e22x9 < _0x8e22x1; _0x8e22x9++) {
        _0x8e22x2 = _0x8e22x4[_0x8e22x9];
        _0x8e22x7[_0x8e22x2[_0xee2b[32]]()] = _0x8e22x2;
      }
    }
  }
  Ext[_0xee2b[154]][_0xee2b[25]](_0x8e22x7, function(_0x8e22x8, _0x8e22xa) {
    _0x8e22xc[_0xee2b[2437]](_0x8e22xa);
  });
}, repaintEventsForResources:function(_0x8e22x4) {
  var _0x8e22x6 = this, _0x8e22x3 = _0x8e22x6[_0xee2b[829]];
  Ext[_0xee2b[26]][_0xee2b[130]](_0x8e22x4, function(_0x8e22x5) {
    if (_0x8e22x3 && !_0x8e22x3[_0xee2b[1862]]) {
      _0x8e22x3[_0xee2b[64]][_0xee2b[147]](_0x8e22x5) >= 0 && _0x8e22x3[_0xee2b[2437]](_0x8e22x5);
    }
  });
}, onEventRemove:function(_0x8e22x5, _0x8e22x6) {
  if (_0x8e22x5[_0xee2b[2322]]) {
    return;
  }
  var _0x8e22x1 = this, _0x8e22x3 = _0x8e22x1[_0xee2b[829]], _0x8e22x2 = _0x8e22x3[_0xee2b[696]](), _0x8e22x9, _0x8e22x4;
  _0x8e22x9 = Ext[_0xee2b[26]][_0xee2b[1376]](Ext[_0xee2b[26]][_0xee2b[48]](_0x8e22x6, function(_0x8e22x7, _0x8e22xa) {
    return _0x8e22x7[_0xee2b[318]](_0x8e22x2[_0xee2b[1093]](_0x8e22xa));
  }, []));
  _0x8e22x4 = Ext[_0xee2b[26]][_0xee2b[48]](_0x8e22x6, function(_0x8e22x7, _0x8e22xa) {
    return _0x8e22x7[_0xee2b[318]](_0x8e22x3[_0xee2b[2191]](_0x8e22xa, null, null, true));
  }, []);
  _0x8e22x4 = new Ext.CompositeElementLite(_0x8e22x4);
  if (_0x8e22x1[_0xee2b[2386]]) {
    _0x8e22x4[_0xee2b[2854]]({callback:function() {
      _0x8e22x1[_0xee2b[2853]](_0x8e22x9);
    }});
  } else {
    _0x8e22x4[_0xee2b[256]]();
    _0x8e22x1[_0xee2b[2853]](_0x8e22x9);
  }
}, onEventUpdate:function(_0x8e22x5, _0x8e22x2) {
  var _0x8e22x7 = _0x8e22x2[_0xee2b[52]] || {};
  var _0x8e22x8 = this[_0xee2b[829]];
  var _0x8e22x9 = _0x8e22x8[_0xee2b[1795]];
  var _0x8e22x3 = _0x8e22x2[_0xee2b[712]]();
  var _0x8e22xa = _0x8e22x2[_0xee2b[713]]();
  var _0x8e22x6 = _0x8e22x7[_0xee2b[1199]] || _0x8e22x3;
  var _0x8e22x1 = _0x8e22x7[_0xee2b[1200]] || _0x8e22xa;
  var _0x8e22xd = _0x8e22x6 && _0x8e22x1 && _0x8e22x9[_0xee2b[1765]](_0x8e22x6, _0x8e22x1);
  var _0x8e22x4;
  if (_0x8e22x2[_0xee2b[1009]] in _0x8e22x7 && _0x8e22xd) {
    _0x8e22x4 = _0x8e22x5[_0xee2b[1007]]()[_0xee2b[395]](_0x8e22x7[_0x8e22x2[_0xee2b[1009]]]);
    _0x8e22x4 && _0x8e22x8[_0xee2b[2437]](_0x8e22x4, true);
  }
  if (_0x8e22x3 && _0x8e22xa && _0x8e22x9[_0xee2b[1765]](_0x8e22x3, _0x8e22xa) || _0x8e22xd) {
    Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x2[_0xee2b[1427]](), function(_0x8e22x10) {
      _0x8e22x8[_0xee2b[2437]](_0x8e22x10, true);
    });
  }
}, setColumnWidth:function(_0x8e22x4, _0x8e22x6) {
  var _0x8e22x3 = this[_0xee2b[829]];
  _0x8e22x3[_0xee2b[1858]]()[_0xee2b[2607]](_0x8e22x4, _0x8e22x6);
}, getVisibleDateRange:function() {
  var _0x8e22x2 = this[_0xee2b[829]];
  if (!_0x8e22x2[_0xee2b[787]]()) {
    return null;
  }
  var _0x8e22x5 = _0x8e22x2[_0xee2b[2579]](), _0x8e22x4 = _0x8e22x2[_0xee2b[1795]][_0xee2b[697]](), _0x8e22x9 = _0x8e22x2[_0xee2b[1795]][_0xee2b[698]](), _0x8e22x1 = _0x8e22x2[_0xee2b[793]]();
  if (_0x8e22x5[_0xee2b[867]] - _0x8e22x5[_0xee2b[1354]] < _0x8e22x1) {
    return {startDate:_0x8e22x4, endDate:_0x8e22x9};
  }
  var _0x8e22x6 = _0x8e22x2[_0xee2b[1966]]();
  var _0x8e22x3 = {startDate:_0x8e22x2[_0xee2b[807]](_0x8e22x6[_0xee2b[1354]], null, true), endDate:_0x8e22x2[_0xee2b[807]](_0x8e22x6[_0xee2b[1354]] + _0x8e22x1, null, true) || _0x8e22x9};
  if (!_0x8e22x3[_0xee2b[1139]]) {
    _0x8e22x3[_0xee2b[1139]] = _0x8e22x9;
  }
  return _0x8e22x3;
}, getItemBox:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  return Ext[_0xee2b[26]][_0xee2b[41]](_0x8e22x3[_0xee2b[1427]](), function(_0x8e22x4) {
    return _0x8e22x6[_0xee2b[2609]](_0x8e22x3, _0x8e22x4);
  });
}, isRowVisible:function(_0x8e22x6) {
  var _0x8e22x4 = Ext[_0xee2b[1]](_0x8e22x6[_0xee2b[854]]) && !_0x8e22x6[_0xee2b[854]]();
  if (!_0x8e22x4 && this[_0xee2b[829]][_0xee2b[2310]] && !this[_0xee2b[829]][_0xee2b[2310]][_0xee2b[144]]) {
    var _0x8e22x3 = this[_0xee2b[829]][_0xee2b[1302]][_0xee2b[2855]]();
    if (_0x8e22x3) {
      var _0x8e22x5 = _0x8e22x3[_0xee2b[410]](_0x8e22x6[_0xee2b[55]](this[_0xee2b[829]][_0xee2b[1302]][_0xee2b[2856]]));
      _0x8e22x4 = _0x8e22x5 && !this[_0xee2b[829]][_0xee2b[2468]][_0xee2b[2310]][_0xee2b[1666]](_0x8e22x5);
    }
  }
  return !_0x8e22x4;
}, isElementRenderedAndDisplayed:function(_0x8e22x3) {
  if (_0x8e22x3 && _0x8e22x3[_0xee2b[1606]]) {
    _0x8e22x3 = this[_0xee2b[829]][_0xee2b[2847]](_0x8e22x3);
  }
  return !!(_0x8e22x3 && Ext[_0xee2b[761]](_0x8e22x3)[_0xee2b[859]]());
}, getResultEventBox:function(_0x8e22x6, _0x8e22x3) {
  return {rendered:true, start:_0x8e22x6[_0xee2b[53]](_0xee2b[1354]) ? _0x8e22x6[_0xee2b[1354]] : _0x8e22x6[_0xee2b[867]], end:(_0x8e22x6[_0xee2b[53]](_0xee2b[1354]) ? _0x8e22x6[_0xee2b[1354]] : _0x8e22x6[_0xee2b[867]]) + _0x8e22x6[_0xee2b[773]], top:_0x8e22x3 + _0x8e22x6[_0xee2b[686]], bottom:_0x8e22x3 + _0x8e22x6[_0xee2b[686]] + _0x8e22x6[_0xee2b[747]]};
}, getResourceEventBox:function(_0x8e22xa, _0x8e22x8) {
  var _0x8e22xe = Sch[_0xee2b[49]][_0xee2b[703]], _0x8e22x1b = this, _0x8e22xb = null, _0x8e22x18 = _0x8e22x1b[_0xee2b[829]], _0x8e22xf = _0x8e22x18[_0xee2b[1795]][_0xee2b[697]](), _0x8e22x10 = _0x8e22x18[_0xee2b[1795]][_0xee2b[698]](), _0x8e22x17 = _0x8e22xa[_0xee2b[712]](), _0x8e22x11 = _0x8e22xa[_0xee2b[713]](), _0x8e22x14, _0x8e22x15, _0x8e22x1a, _0x8e22x23, _0x8e22xc, _0x8e22x2, _0x8e22x1, _0x8e22x19, _0x8e22x12, _0x8e22x6, _0x8e22x3, _0x8e22x4, _0x8e22x13, _0x8e22x16, _0x8e22x5, _0x8e22x9, 
  _0x8e22xd;
  if (_0x8e22x17 && _0x8e22x11 && _0x8e22xe[_0xee2b[714]](_0x8e22x17, _0x8e22x11, _0x8e22xf, _0x8e22x10) && _0x8e22x1b[_0xee2b[2857]](_0x8e22x8)) {
    _0x8e22x23 = _0x8e22x18[_0xee2b[2847]](_0x8e22x8);
    if (_0x8e22x23 && _0x8e22x1b[_0xee2b[2858]](_0x8e22x23)) {
      if (_0x8e22x18[_0xee2b[2610]]) {
        _0x8e22x14 = _0x8e22x18[_0xee2b[2587]][_0xee2b[1931]];
        var _0x8e22x7 = _0x8e22x18[_0xee2b[696]]()[_0xee2b[2602]](_0x8e22x8, _0x8e22x18[_0xee2b[1795]][_0xee2b[2601]], _0x8e22x18[_0xee2b[1795]]);
        _0x8e22x15 = Ext[_0xee2b[26]][_0xee2b[41]](_0x8e22x7, _0x8e22x1b[_0xee2b[2522]], _0x8e22x1b);
        _0x8e22x14[_0xee2b[1788]](_0x8e22x15, _0x8e22x8);
        _0x8e22x1a = Ext[_0xee2b[26]][_0xee2b[1761]](_0x8e22x15, function(_0x8e22x1d) {
          return _0x8e22x1d[_0xee2b[1440]] == _0x8e22xa;
        });
        if (_0x8e22x1a) {
          _0x8e22x2 = Ext[_0xee2b[761]](_0x8e22x23)[_0xee2b[2264]](_0x8e22x18[_0xee2b[2859]]())[1];
          _0x8e22xb = this[_0xee2b[2860]](_0x8e22x1a, _0x8e22x2);
        }
      } else {
        _0x8e22x12 = _0x8e22x18[_0xee2b[2191]](_0x8e22xa, _0x8e22xa !== _0x8e22x8 && _0x8e22x8);
        if (_0x8e22x12[_0xee2b[4]]) {
          _0x8e22x6 = _0x8e22x12[0];
          _0x8e22x3 = _0x8e22x6[_0xee2b[2264]](_0x8e22x18[_0xee2b[787]]());
          _0x8e22x4 = _0x8e22x6[_0xee2b[2611]]();
          _0x8e22xb = {rendered:true, start:_0x8e22x3[0], end:_0x8e22x3[0] + _0x8e22x4[_0xee2b[773]], top:_0x8e22x3[1], bottom:_0x8e22x3[1] + _0x8e22x4[_0xee2b[747]]};
        }
      }
    } else {
      _0x8e22xb = {rendered:false, start:_0x8e22x18[_0xee2b[1895]](_0x8e22xe[_0xee2b[715]](_0x8e22x17, _0x8e22xf)), end:_0x8e22x18[_0xee2b[1895]](_0x8e22xe[_0xee2b[203]](_0x8e22x11, _0x8e22x10))};
      _0x8e22x13 = _0x8e22x18[_0xee2b[2862]][_0xee2b[2861]];
      _0x8e22x16 = _0x8e22x18[_0xee2b[37]](_0x8e22x13);
      _0x8e22x5 = _0x8e22x18[_0xee2b[2862]][_0xee2b[2863]];
      _0x8e22x9 = _0x8e22x18[_0xee2b[37]](_0x8e22x5);
      _0x8e22x1 = _0x8e22x18[_0xee2b[2864]]();
      if (_0x8e22x8[_0xee2b[2865]](_0x8e22x16)) {
        _0x8e22xb[_0xee2b[686]] = -_0x8e22x1;
        _0x8e22xb[_0xee2b[754]] = _0x8e22xb[_0xee2b[686]] + _0x8e22x1;
        _0x8e22xb[_0xee2b[2866]] = _0xee2b[434];
      } else {
        if (_0x8e22x8 == _0x8e22x9 || _0x8e22x8[_0xee2b[2865]](_0x8e22x9)) {
          _0x8e22xc = _0x8e22x18[_0xee2b[147]](_0x8e22x8);
          _0x8e22xb[_0xee2b[686]] = _0x8e22xc * _0x8e22x1;
          _0x8e22xb[_0xee2b[754]] = _0x8e22xb[_0xee2b[686]] + _0x8e22x1;
        } else {
          _0x8e22xd = _0x8e22x18[_0xee2b[2515]](_0x8e22x5);
          if (_0x8e22x1b[_0xee2b[2858]](_0x8e22xd)) {
            _0x8e22xb[_0xee2b[686]] = Ext[_0xee2b[761]](_0x8e22xd)[_0xee2b[2264]](_0x8e22x18[_0xee2b[2859]]())[1] + Ext[_0xee2b[761]](_0x8e22xd)[_0xee2b[859]]();
          } else {
            _0x8e22xb[_0xee2b[686]] = (_0x8e22x5 + 1) * _0x8e22x1;
          }
          _0x8e22xb[_0xee2b[754]] = _0x8e22xb[_0xee2b[686]] + _0x8e22x1;
          _0x8e22xb[_0xee2b[2866]] = _0xee2b[2867];
        }
      }
    }
    if (_0x8e22xb) {
      _0x8e22xb = _0x8e22x1b[_0xee2b[2612]](_0x8e22xa, _0x8e22xb);
    }
  }
  return _0x8e22xb;
}, adjustItemBox:function(_0x8e22x3, _0x8e22x6) {
  return _0x8e22x6;
}, getConnectorStartSide:function(_0x8e22x3) {
  return _0xee2b[1354];
}, getConnectorEndSide:function(_0x8e22x3) {
  return _0xee2b[867];
}});
Ext[_0xee2b[6]](_0xee2b[2868], {requires:[_0xee2b[1715], _0xee2b[2553], _0xee2b[2846]], uses:[_0xee2b[2869]], selectedEventCls:_0xee2b[2870], showAllDayHeader:false, readOnly:false, horizontalViewClass:_0xee2b[2846], timeCellCls:_0xee2b[473], timeCellSelector:_0xee2b[2871], eventBorderWidth:1, timeAxis:null, timeAxisViewModel:null, eventPrefix:null, rowHeight:null, mode:_0xee2b[1931], horizontal:null, vertical:null, weekview:null, horizontalViewCls:[_0xee2b[2872]], verticalViewCls:[_0xee2b[2873]], 
weekviewViewCls:[_0xee2b[2874], _0xee2b[2873]], panel:null, displayDateFormat:null, el:null, _initializeTimelineView:function() {
  if (this[_0xee2b[2875]]) {
    this[_0xee2b[1931]] = Ext[_0xee2b[831]](this[_0xee2b[2875]], {view:this});
  }
  if (this[_0xee2b[2876]]) {
    this[_0xee2b[1932]] = Ext[_0xee2b[831]](this[_0xee2b[2876]], {view:this});
  }
  if (this[_0xee2b[2877]]) {
    this[_0xee2b[2430]] = Ext[_0xee2b[831]](this[_0xee2b[2877]], {view:this, showAllDayHeader:this[_0xee2b[2878]]});
  }
  this[_0xee2b[2560]] = (this[_0xee2b[2560]] || this[_0xee2b[32]]()) + _0xee2b[1131];
}, getTimeAxisViewModel:function() {
  return this[_0xee2b[810]];
}, getFormattedDate:function(_0x8e22x3) {
  return Ext[_0xee2b[703]][_0xee2b[880]](_0x8e22x3, this[_0xee2b[2879]]());
}, getFormattedEndDate:function(_0x8e22x4, _0x8e22x3) {
  var _0x8e22x6 = this[_0xee2b[2879]]();
  if (_0x8e22x4[_0xee2b[1127]]() === 0 && _0x8e22x4[_0xee2b[1130]]() === 0 && (!_0x8e22x3 || !(_0x8e22x4[_0xee2b[481]]() === _0x8e22x3[_0xee2b[481]]() && _0x8e22x4[_0xee2b[480]]() === _0x8e22x3[_0xee2b[480]]() && _0x8e22x4[_0xee2b[479]]() === _0x8e22x3[_0xee2b[479]]())) && !Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[2882]][_0xee2b[2881]](_0x8e22x6[_0xee2b[675]](Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[2880]], _0xee2b[27]))) {
    _0x8e22x4 = Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[255]](_0x8e22x4, Sch[_0xee2b[49]][_0xee2b[703]].DAY, -1);
  }
  return Ext[_0xee2b[703]][_0xee2b[880]](_0x8e22x4, _0x8e22x6);
}, getDisplayDateFormat:function() {
  return this[_0xee2b[2682]];
}, setDisplayDateFormat:function(_0x8e22x3) {
  this[_0xee2b[2682]] = _0x8e22x3;
}, fitColumns:function(_0x8e22x6) {
  if (this[_0xee2b[1828]]()) {
    this[_0xee2b[1858]]()[_0xee2b[2883]](_0x8e22x6);
  } else {
    var _0x8e22x3 = Math[_0xee2b[424]]((this[_0xee2b[1818]][_0xee2b[793]]() - Ext[_0xee2b[857]]()[_0xee2b[773]] - 1) / this[_0xee2b[1848]][_0xee2b[2884]]());
    this[_0xee2b[2833]](_0x8e22x3, _0x8e22x6);
  }
}, getElementsFromEventRecord:function(_0x8e22x3, _0x8e22x5, _0x8e22x4, _0x8e22x6) {
  return this[this[_0xee2b[1719]]][_0xee2b[2191]](_0x8e22x3, _0x8e22x5, _0x8e22x4, _0x8e22x6);
}, getStartEndDatesFromRegion:function(_0x8e22x6, _0x8e22x3) {
  return this[this[_0xee2b[1719]]][_0xee2b[2075]](_0x8e22x6, _0x8e22x3);
}, getTimeResolution:function() {
  return this[_0xee2b[1795]][_0xee2b[2737]]();
}, setTimeResolution:function(_0x8e22x6, _0x8e22x3) {
  this[_0xee2b[1795]][_0xee2b[2885]](_0x8e22x6, _0x8e22x3);
  if (this[_0xee2b[1858]]()[_0xee2b[2736]]) {
    this[_0xee2b[2669]]();
  }
}, getEventIdFromDomNodeId:function(_0x8e22x3) {
  return _0x8e22x3[_0xee2b[2694]](this[_0xee2b[2560]][_0xee2b[4]])[_0xee2b[496]](_0xee2b[1131])[0];
}, getResourceIdFromDomNodeId:function(_0x8e22x3) {
  return _0x8e22x3[_0xee2b[2694]](this[_0xee2b[2560]][_0xee2b[4]])[_0xee2b[496]](_0xee2b[1131])[1];
}, getDateFromDomEvent:function(_0x8e22x6, _0x8e22x3) {
  return this[_0xee2b[2167]](_0x8e22x6[_0xee2b[1970]](), _0x8e22x3);
}, getSnapPixelAmount:function() {
  return this[_0xee2b[1858]]()[_0xee2b[2188]]();
}, setSnapEnabled:function(_0x8e22x3) {
  this[_0xee2b[1858]]()[_0xee2b[2886]](_0x8e22x3);
}, setReadOnly:function(_0x8e22x3) {
  this[_0xee2b[2887]] = _0x8e22x3;
  this[_0x8e22x3 ? _0xee2b[264] : _0xee2b[267]](this[_0xee2b[2888]] + _0xee2b[2889]);
}, isReadOnly:function() {
  return this[_0xee2b[2887]];
}, setMode:function(_0x8e22x6) {
  var _0x8e22x3 = this;
  _0x8e22x3[_0xee2b[1719]] = _0x8e22x6;
  _0x8e22x3[_0xee2b[810]][_0xee2b[1719]] = _0x8e22x6;
  _0x8e22x3[_0xee2b[267]](_0x8e22x3[_0xee2b[2892]][_0xee2b[318]](_0x8e22x3[_0xee2b[2891]])[_0xee2b[318]](_0x8e22x3[_0xee2b[2890]]));
  _0x8e22x3[_0xee2b[264]](_0x8e22x3[_0x8e22x6 + _0xee2b[2893]]);
}, getMode:function() {
  return this[_0xee2b[1719]];
}, isHorizontal:function() {
  return this[_0xee2b[2131]]() === _0xee2b[1931];
}, isVertical:function() {
  return this[_0xee2b[2131]]() === _0xee2b[1932];
}, isWeekView:function() {
  return this[_0xee2b[2131]]() === _0xee2b[2430];
}, getDateFromXY:function(_0x8e22x4, _0x8e22x6, _0x8e22x3) {
  return this[this[_0xee2b[1719]]][_0xee2b[2167]](_0x8e22x4, _0x8e22x6, _0x8e22x3);
}, getDateFromCoordinate:function(_0x8e22x4, _0x8e22x6, _0x8e22x3) {
  if (!_0x8e22x3) {
    _0x8e22x4 = this[this[_0xee2b[1719]]][_0xee2b[2575]](_0x8e22x4);
  }
  return this[_0xee2b[810]][_0xee2b[2576]](_0x8e22x4, _0x8e22x6);
}, getDateFromX:function(_0x8e22x3, _0x8e22x6) {
  return this[_0xee2b[807]](_0x8e22x3, _0x8e22x6);
}, getDateFromY:function(_0x8e22x6, _0x8e22x3) {
  return this[_0xee2b[807]](_0x8e22x6, _0x8e22x3);
}, getCoordinateFromDate:function(_0x8e22x3, _0x8e22x6) {
  var _0x8e22x4 = this[_0xee2b[810]][_0xee2b[1796]](_0x8e22x3);
  if (_0x8e22x6 === false) {
    _0x8e22x4 = this[this[_0xee2b[1719]]][_0xee2b[2580]](_0x8e22x4);
  }
  return _0x8e22x4;
}, getTimeSpanDistance:function(_0x8e22x3, _0x8e22x6) {
  return this[_0xee2b[810]][_0xee2b[772]](_0x8e22x3, _0x8e22x6);
}, getTimeSpanRegion:function(_0x8e22x3, _0x8e22x6) {
  return this[this[_0xee2b[1719]]][_0xee2b[1892]](_0x8e22x3, _0x8e22x6);
}, getScheduleRegion:function(_0x8e22x6, _0x8e22x3) {
  return this[this[_0xee2b[1719]]][_0xee2b[2058]](_0x8e22x6, _0x8e22x3);
}, getTableRegion:function() {
  throw _0xee2b[29];
}, getRowNode:function(_0x8e22x3) {
  throw _0xee2b[29];
}, getRecordForRowNode:function(_0x8e22x3) {
  throw _0xee2b[29];
}, getVisibleDateRange:function() {
  return this[this[_0xee2b[1719]]][_0xee2b[2894]]();
}, setColumnWidth:function(_0x8e22x6, _0x8e22x3) {
  this[this[_0xee2b[1719]]][_0xee2b[2833]](_0x8e22x6, _0x8e22x3);
}, findRowByChild:function(_0x8e22x3) {
  throw _0xee2b[29];
}, setBarMargin:function(_0x8e22x6, _0x8e22x3) {
  this[_0xee2b[1800]] = _0x8e22x6;
  if (!_0x8e22x3) {
    this[_0xee2b[2669]]();
  }
}, getRowHeight:function() {
  return this[_0xee2b[810]][_0xee2b[2832]]();
}, setRowHeight:function(_0x8e22x3, _0x8e22x6) {
  this[_0xee2b[810]][_0xee2b[2895]](_0x8e22x3, _0x8e22x6);
}, refreshKeepingScroll:function() {
  throw _0xee2b[29];
}, scrollVerticallyTo:function(_0x8e22x6, _0x8e22x3) {
  throw _0xee2b[29];
}, scrollHorizontallyTo:function(_0x8e22x3, _0x8e22x6) {
  throw _0xee2b[29];
}, getVerticalScroll:function() {
  throw _0xee2b[29];
}, getHorizontalScroll:function() {
  throw _0xee2b[29];
}, getEl:Ext[_0xee2b[688]], getScroll:function() {
  throw _0xee2b[29];
}, getOuterEl:function() {
  return this[_0xee2b[787]]();
}, getRowContainerEl:function() {
  return this[_0xee2b[787]]();
}, getScheduleCell:function(_0x8e22x6, _0x8e22x3) {
  return this[_0xee2b[2896]]({row:_0x8e22x6, column:_0x8e22x3});
}, getScrollEventSource:function() {
  return this[_0xee2b[787]]();
}, getViewportHeight:function() {
  return this[_0xee2b[787]]()[_0xee2b[859]]();
}, getViewportWidth:function() {
  return this[_0xee2b[787]]()[_0xee2b[793]]();
}, getViewportCenterDate:function() {
  var _0x8e22x3 = this[_0xee2b[1966]](), _0x8e22x6;
  if (this[_0xee2b[2539]]()) {
    _0x8e22x6 = [0, _0x8e22x3[_0xee2b[686]] + this[_0xee2b[2897]]() / 2];
  } else {
    _0x8e22x6 = [_0x8e22x3[_0xee2b[1354]] + this[_0xee2b[2898]]() / 2, 0];
  }
  return this[_0xee2b[2167]](_0x8e22x6, null, true);
}, getDateConstraints:Ext[_0xee2b[688]], getItemBox:function(_0x8e22x3) {
  return this[this[_0xee2b[1719]]][_0xee2b[2899]](_0x8e22x3);
}, getConnectorStartSide:function(_0x8e22x3) {
  return this[this[_0xee2b[1719]]][_0xee2b[2900]](_0x8e22x3);
}, getConnectorEndSide:function(_0x8e22x3) {
  return this[this[_0xee2b[1719]]][_0xee2b[2901]](_0x8e22x3);
}, getViewStartDate:function() {
  return this[_0xee2b[1795]][_0xee2b[697]]();
}, getViewEndDate:function() {
  return this[_0xee2b[1795]][_0xee2b[698]]();
}});
Ext[_0xee2b[8]](Sch, {VERSION:_0xee2b[215], LICENSE:_0xee2b[2902]});
Ext[_0xee2b[6]](_0xee2b[2903], {prevBlockRefresh:null, initTreeFiltering:function() {
  var _0x8e22x3 = function() {
    var _0x8e22x6 = this[_0xee2b[64]];
    this[_0xee2b[252]](_0x8e22x6, _0xee2b[1676], this[_0xee2b[2904]], this);
    this[_0xee2b[252]](_0x8e22x6, _0xee2b[1679], this[_0xee2b[2905]], this);
    if (!_0x8e22x6[_0xee2b[2906]]) {
      this[_0xee2b[252]](_0x8e22x6, _0xee2b[1656], this[_0xee2b[2907]], this);
      this[_0xee2b[252]](_0x8e22x6, _0xee2b[1680], this[_0xee2b[2908]], this);
    }
  };
  if (this[_0xee2b[262]]) {
    _0x8e22x3[_0xee2b[293]](this);
  } else {
    this[_0xee2b[149]](_0xee2b[690], _0x8e22x3, this, {single:true});
  }
}, onFilterChangeStart:function() {
  this[_0xee2b[2909]] = this[_0xee2b[2910]];
  this[_0xee2b[2910]] = true;
  Ext[_0xee2b[2839]]();
}, onFilterChangeEnd:function() {
  Ext[_0xee2b[2841]](true);
  this[_0xee2b[2910]] = this[_0xee2b[2909]];
}, onFilterCleared:function() {
  delete this[_0xee2b[2911]];
  var _0x8e22x3 = this[_0xee2b[787]]();
  if (_0x8e22x3) {
    _0x8e22x3[_0xee2b[267]](_0xee2b[2912]);
  }
}, onFilterSet:function() {
  this[_0xee2b[2911]] = function() {
  };
  var _0x8e22x3 = this[_0xee2b[787]]();
  if (_0x8e22x3) {
    _0x8e22x3[_0xee2b[264]](_0xee2b[2912]);
  }
}});
Ext[_0xee2b[6]](_0xee2b[2913], {extend:_0xee2b[17], mixinConfig:{after:{onRender:_0xee2b[2914]}}, secondaryCanvasCls:_0xee2b[2915], secondaryCanvasLayerCls:_0xee2b[2916], itemsCanvasEl:null, itemsCanvasCls:_0xee2b[2917], itemsCanvasLayerCls:_0xee2b[2918], getSecondaryCanvasEl:function() {
  var _0x8e22x3 = null;
  if (this[_0xee2b[2919]]()) {
    _0x8e22x3 = this[_0xee2b[2922]](-1, {tag:_0xee2b[2258], role:_0xee2b[2920], cls:this[_0xee2b[2921]]});
  }
  return _0x8e22x3;
}, isItemCanvasAvailable:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  return !!(_0x8e22x6[_0xee2b[262]] && !_0x8e22x6[_0xee2b[458]] && (_0x8e22x6[_0xee2b[2859]]() || _0x8e22x6[_0xee2b[2923]] && (_0x8e22x6[_0xee2b[2923]][_0xee2b[2924]] || !Ext[_0xee2b[2925]](_0x8e22x6[_0xee2b[2923]][_0xee2b[758]]))));
}, isItemCanvasPresent:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  return !!(_0x8e22x6[_0xee2b[262]] && !_0x8e22x6[_0xee2b[458]] && _0x8e22x6[_0xee2b[2923]] && (_0x8e22x3 === undefined || _0x8e22x6[_0xee2b[2923]][_0x8e22x3] && (_0x8e22x6[_0xee2b[2923]][_0xee2b[2924]] || !Ext[_0xee2b[2925]](_0x8e22x6[_0xee2b[2923]][_0x8e22x3][_0xee2b[758]]))));
}, getItemCanvasEl:function(_0x8e22x6, _0x8e22x2) {
  var _0x8e22x4 = this, _0x8e22x3 = _0x8e22x4[_0xee2b[2923]], _0x8e22x5 = _0x8e22x3;
  Ext[_0xee2b[133]] && Ext[_0xee2b[133]][_0xee2b[1373]](_0x8e22x4[_0xee2b[2919]](), _0xee2b[2926]);
  if (!_0x8e22x3 || !_0x8e22x3[_0xee2b[758]] || !_0x8e22x3[_0xee2b[2924]] && Ext[_0xee2b[2925]](_0x8e22x3[_0xee2b[758]])) {
    _0x8e22x5 = _0x8e22x3 = _0x8e22x4[_0xee2b[2923]] = Ext[_0xee2b[761]](_0x8e22x4[_0xee2b[2859]]())[_0xee2b[2928]]({cls:_0x8e22x4[_0xee2b[2927]]});
  }
  if (arguments[_0xee2b[4]] > 0) {
    _0x8e22x6 = _0x8e22x6 || 0;
    _0x8e22x5 = _0x8e22x3[_0x8e22x6] || Ext[_0xee2b[758]][_0xee2b[2932]][_0xee2b[2931]](_0xee2b[2929] + _0x8e22x6 + _0xee2b[2930], _0x8e22x3[_0xee2b[758]]);
    if (!_0x8e22x5 || !_0x8e22x5[_0xee2b[758]] || !_0x8e22x3[_0xee2b[2924]] && Ext[_0xee2b[2925]](_0x8e22x5[_0xee2b[758]])) {
      _0x8e22x5 = _0x8e22x3[_0xee2b[825]]((Ext[_0xee2b[1]](_0x8e22x2) ? _0x8e22x2() : _0x8e22x2) || {tag:_0xee2b[2258]});
      _0x8e22x5[_0xee2b[50]]({'data-sch-secondary-canvas-layer':_0x8e22x6});
      _0x8e22x5[_0xee2b[2051]](_0xee2b[2933], _0x8e22x6);
      _0x8e22x5[_0xee2b[264]](_0x8e22x4[_0xee2b[2934]]);
      _0x8e22x3[_0x8e22x6] = _0x8e22x5;
    }
  }
  return _0x8e22x5;
}, afterOnRender:function() {
  if (this[_0xee2b[2478]]) {
    this[_0xee2b[149]](_0xee2b[1808], this[_0xee2b[2935]], this);
  }
}, onBufferedRendererViewReady:function() {
  var _0x8e22x6 = this, _0x8e22x4 = Ext[_0xee2b[2009]]()[_0xee2b[966]](_0xee2b[2936]) ? this[_0xee2b[840]][_0xee2b[694]](_0xee2b[2937])[_0xee2b[1830]][_0xee2b[2478]] : _0x8e22x6[_0xee2b[2478]], _0x8e22x3 = _0x8e22x4[_0xee2b[2938]];
  _0x8e22x4[_0xee2b[2938]] = function() {
    var _0x8e22x5 = _0x8e22x6[_0xee2b[2922]](), _0x8e22x1 = _0x8e22x6[_0xee2b[2859]](), _0x8e22x2;
    _0x8e22x5[_0xee2b[2924]] = true;
    _0x8e22x5[_0xee2b[758]][_0xee2b[96]] && _0x8e22x5[_0xee2b[758]][_0xee2b[96]][_0xee2b[78]](_0x8e22x5[_0xee2b[758]]);
    _0x8e22x2 = _0x8e22x3[_0xee2b[8]](this, arguments);
    _0x8e22x1[_0xee2b[88]](_0x8e22x5[_0xee2b[758]], _0x8e22x1[_0xee2b[928]]);
    delete _0x8e22x5[_0xee2b[2924]];
    return _0x8e22x2;
  };
}});
Ext[_0xee2b[6]](_0xee2b[2939], {extend:_0xee2b[17], setupPartnerTimelinePanel:function(_0x8e22x6) {
  var _0x8e22x2 = this[_0xee2b[2940]];
  var _0x8e22x3 = _0x8e22x2[_0xee2b[1830]];
  var _0x8e22x5 = this[_0xee2b[1830]];
  _0x8e22x3[_0xee2b[252]](_0x8e22x5, _0xee2b[835], this[_0xee2b[2941]], _0x8e22x3);
  _0x8e22x5[_0xee2b[252]](_0x8e22x3, _0xee2b[835], this[_0xee2b[2941]], _0x8e22x5);
  var _0x8e22x4 = _0x8e22x2[_0xee2b[854]]() ? _0x8e22x2[_0xee2b[1830]][_0xee2b[793]]() : _0x8e22x2[_0xee2b[1830]][_0xee2b[773]];
  if (_0x8e22x3[_0xee2b[2942]]()) {
    this[_0xee2b[252]](_0x8e22x3, _0xee2b[1808], function(_0x8e22x1) {
      _0x8e22x5[_0xee2b[839]](_0x8e22x1[_0xee2b[793]]());
    });
  } else {
    _0x8e22x5[_0xee2b[839]](_0x8e22x4);
  }
  this[_0xee2b[149]](_0xee2b[833], function() {
    if (_0x8e22x3[_0xee2b[2942]]()) {
      _0x8e22x5[_0xee2b[104]]();
    } else {
      _0x8e22x5[_0xee2b[103]]();
      _0x8e22x5[_0xee2b[839]](_0x8e22x4);
    }
  }, this, {single:true});
  _0x8e22x3[_0xee2b[149]]({collapse:this[_0xee2b[2943]], expand:this[_0xee2b[2943]], scope:this});
  _0x8e22x5[_0xee2b[149]]({collapse:this[_0xee2b[2943]], expand:this[_0xee2b[2943]], scope:_0x8e22x2});
  this[_0xee2b[2944]]();
  _0x8e22x2[_0xee2b[252]](this, _0xee2b[2771], this[_0xee2b[2945]], this);
  _0x8e22x2[_0xee2b[252]](this, _0xee2b[2804], this[_0xee2b[2946]], this);
  this[_0xee2b[252]](_0x8e22x2, _0xee2b[2771], this[_0xee2b[2945]], this);
  this[_0xee2b[252]](_0x8e22x2, _0xee2b[2804], this[_0xee2b[2946]], this);
}, onLockedGridResize:function(_0x8e22x6, _0x8e22x3) {
  this[_0xee2b[839]](_0x8e22x3);
}, onPartnerCollapseExpand:function(_0x8e22x3) {
  if (_0x8e22x3[_0xee2b[2942]]()) {
    this[_0xee2b[1830]][_0xee2b[104]]();
  } else {
    this[_0xee2b[1830]][_0xee2b[103]]();
  }
}, setupScrollSync:function() {
  var _0x8e22x7 = this[_0xee2b[2940]][_0xee2b[808]](), _0x8e22x9 = this[_0xee2b[2940]][_0xee2b[2131]]() === _0xee2b[1931] ? _0x8e22x7[_0xee2b[1941]]() : this[_0xee2b[2940]][_0xee2b[1941]](), _0x8e22x2 = this[_0xee2b[808]](), _0x8e22x8 = this[_0xee2b[2131]]() === _0xee2b[1931] ? _0x8e22x2[_0xee2b[1941]]() : this[_0xee2b[1941]](), _0x8e22xa;
  function _0x8e22x4(_0x8e22x10) {
    var _0x8e22xd = _0x8e22x10 === _0x8e22x8 ? _0x8e22x8 : _0x8e22x9, _0x8e22xe = _0x8e22x10 === _0x8e22x8 ? _0x8e22x9 : _0x8e22x8;
    if (!_0x8e22xa) {
      _0x8e22xd[_0xee2b[2948]][_0xee2b[325]](_0x8e22xe, _0xee2b[2947], _0x8e22x4);
      _0x8e22xe[_0xee2b[2948]][_0xee2b[325]](_0x8e22xd, _0xee2b[2947], _0x8e22x4);
      _0x8e22xd[_0xee2b[2948]][_0xee2b[252]](_0x8e22xd, _0xee2b[1978], _0x8e22x3);
      _0x8e22xd[_0xee2b[2948]][_0xee2b[252]](_0x8e22xd, _0xee2b[2949], _0x8e22x1);
    }
  }
  function _0x8e22x3(_0x8e22x10, _0x8e22xd, _0x8e22xb) {
    var _0x8e22xf = _0x8e22x10 === _0x8e22x8 ? _0x8e22x8 : _0x8e22x9, _0x8e22xc = _0x8e22x10 === _0x8e22x8 ? _0x8e22x9 : _0x8e22x8;
    var _0x8e22xe = _0x8e22xc[_0xee2b[2948]][_0xee2b[1848]][_0xee2b[1941]]();
    _0x8e22xa = Ext[_0xee2b[2600]](function() {
      var _0x8e22x19, _0x8e22x11;
      _0x8e22x11 = _0x8e22xc[_0xee2b[2950]]();
      if (_0x8e22x11 && _0x8e22x2[_0xee2b[2131]]() === _0xee2b[1931]) {
        _0x8e22x19 = Math[_0xee2b[1524]](_0x8e22x11[_0xee2b[1893]] - _0x8e22xd);
        if (_0x8e22x19) {
          _0x8e22xe && !_0x8e22xe[_0xee2b[458]] && _0x8e22xe[_0xee2b[289]](_0x8e22xd, null);
          !_0x8e22xc[_0xee2b[458]] && _0x8e22xc[_0xee2b[289]](_0x8e22xd);
          _0x8e22xa = false;
        } else {
          _0x8e22xa = false;
        }
      } else {
        if (_0x8e22x11) {
          _0x8e22x19 = Math[_0xee2b[1524]](_0x8e22x11[_0xee2b[1894]] != _0x8e22xb);
          if (_0x8e22x19) {
            !_0x8e22xc[_0xee2b[458]] && _0x8e22xc[_0xee2b[289]](null, _0x8e22xb);
          }
          _0x8e22xa = false;
        }
      }
    });
  }
  function _0x8e22x1(_0x8e22x10) {
    var _0x8e22xd = _0x8e22x10 === _0x8e22x8 ? _0x8e22x8 : _0x8e22x9, _0x8e22xe = _0x8e22x10 === _0x8e22x8 ? _0x8e22x9 : _0x8e22x8;
    _0x8e22xd[_0xee2b[2948]][_0xee2b[325]](_0x8e22xd, _0xee2b[1978], _0x8e22x3);
    _0x8e22xd[_0xee2b[2948]][_0xee2b[325]](_0x8e22xd, _0xee2b[2949], _0x8e22x1);
    _0x8e22xd[_0xee2b[2948]][_0xee2b[252]](_0x8e22xe, _0xee2b[2947], _0x8e22x4);
    _0x8e22xe[_0xee2b[2948]][_0xee2b[252]](_0x8e22xd, _0xee2b[2947], _0x8e22x4);
  }
  function _0x8e22x6() {
    _0x8e22x9[_0xee2b[2948]][_0xee2b[252]](_0x8e22x8, _0xee2b[2947], _0x8e22x4);
    _0x8e22x8[_0xee2b[2948]][_0xee2b[252]](_0x8e22x9, _0xee2b[2947], _0x8e22x4);
  }
  function _0x8e22x5() {
    _0x8e22x9[_0xee2b[2948]][_0xee2b[325]](_0x8e22x8, _0xee2b[2947], _0x8e22x4);
    _0x8e22x8[_0xee2b[2948]][_0xee2b[325]](_0x8e22x9, _0xee2b[2947], _0x8e22x4);
  }
  this[_0xee2b[2940]][_0xee2b[252]](this, {show:function() {
    _0x8e22x3(_0x8e22x9, _0x8e22x9[_0xee2b[2950]]()[_0xee2b[1893]], _0x8e22x9[_0xee2b[2950]]()[_0xee2b[1894]]);
  }});
  this[_0xee2b[252]](this[_0xee2b[2940]], {show:function() {
    _0x8e22x3(_0x8e22x8, _0x8e22x8[_0xee2b[2950]]()[_0xee2b[1893]], _0x8e22x8[_0xee2b[2950]]()[_0xee2b[1894]]);
  }});
  _0x8e22x6();
}, onViewChange:function(_0x8e22x3) {
  if (_0x8e22x3 === this) {
    this[_0xee2b[2940]][_0xee2b[1725]] = this[_0xee2b[1725]] = this[_0xee2b[810]][_0xee2b[1725]];
  }
}, onBeforeZoomChange:function() {
  var _0x8e22x4 = this[_0xee2b[2940]];
  var _0x8e22x6 = _0x8e22x4[_0xee2b[808]]()[_0xee2b[1941]](), _0x8e22x3 = _0x8e22x6[_0xee2b[2951]];
  _0x8e22x6[_0xee2b[2951]] = Ext[_0xee2b[688]];
  _0x8e22x6[_0xee2b[149]](_0xee2b[2949], function() {
    _0x8e22x6[_0xee2b[2951]] = _0x8e22x3;
  }, null, {single:true});
}});
Ext[_0xee2b[6]](_0xee2b[2952], {extend:_0xee2b[957], target:[_0xee2b[2953]], minVersion:_0xee2b[2954], applyFn:function() {
  Ext[_0xee2b[507]](Ext[_0xee2b[758]].Element, {synchronize:function() {
    var _0x8e22xd = this[_0xee2b[9]](arguments), _0x8e22x7 = this, _0x8e22x5 = _0x8e22x7[_0xee2b[758]], _0x8e22x8 = {}, _0x8e22x9 = _0x8e22x5[_0xee2b[1868]], _0x8e22x6, _0x8e22x3, _0x8e22x2, _0x8e22x1, _0x8e22x4 = _0x8e22x7[_0xee2b[349]](false);
    if (window[_0xee2b[2955]] && _0x8e22x9 instanceof window[_0xee2b[2955]]) {
      _0x8e22x9 = _0x8e22x9[_0xee2b[2956]];
      if (_0x8e22x9 && _0x8e22x9[_0xee2b[4]] > 0) {
        _0x8e22x6 = _0x8e22x9[_0xee2b[496]](/[\s]+/);
        for (_0x8e22x2 = 0, _0x8e22x1 = _0x8e22x6[_0xee2b[4]]; _0x8e22x2 < _0x8e22x1; _0x8e22x2++) {
          _0x8e22x3 = _0x8e22x6[_0x8e22x2];
          _0x8e22x8[_0x8e22x3] = true;
        }
      }
      _0x8e22x4[_0xee2b[2957]] = _0x8e22x6;
      _0x8e22x4[_0xee2b[2958]] = _0x8e22x8;
      _0x8e22x4[_0xee2b[2959]] = true;
    }
    return _0x8e22xd;
  }});
}});
Ext[_0xee2b[6]](_0xee2b[2960], {extend:_0xee2b[957], target:_0xee2b[2961], minVersion:_0xee2b[2962], applyFn:function() {
  Ext[_0xee2b[502]][_0xee2b[55]](this[_0xee2b[969]])[_0xee2b[507]]({focusPosition:function(_0x8e22x6) {
    var _0x8e22x5 = this;
    if (_0x8e22x6 && _0x8e22x6[_0xee2b[933]] && _0x8e22x6[_0xee2b[2963]] && _0x8e22x6[_0xee2b[829]] && _0x8e22x6[_0xee2b[829]][_0xee2b[2964]]) {
      var _0x8e22x3 = _0x8e22x6[_0xee2b[829]][_0xee2b[1941]]();
      if (_0x8e22x3 && _0x8e22x3[_0xee2b[2965]]) {
        var _0x8e22x4 = _0x8e22x3[_0xee2b[2966]];
        _0x8e22x3[_0xee2b[2966]] = Ext[_0xee2b[688]];
        var _0x8e22x2 = this[_0xee2b[9]](arguments);
        _0x8e22x3[_0xee2b[2966]] = _0x8e22x4;
        return _0x8e22x2;
      }
    }
    return this[_0xee2b[9]](arguments);
  }});
}});
Ext[_0xee2b[6]](_0xee2b[2967], {extend:_0xee2b[957], target:_0xee2b[2968], minVersion:_0xee2b[1631], overrides:{handleEvent:function(_0x8e22x1) {
  var _0x8e22x5 = this, _0x8e22x4 = _0x8e22x5[_0xee2b[2969]][_0xee2b[2881]](_0x8e22x1[_0xee2b[249]]), _0x8e22x3 = _0x8e22x5[_0xee2b[2970]]();
  _0x8e22x1[_0xee2b[829]] = _0x8e22x5;
  if (_0x8e22x4) {
    _0x8e22x1[_0xee2b[2971]] = _0x8e22x1[_0xee2b[2033]](_0x8e22x5[_0xee2b[2972]]);
    _0x8e22x1[_0xee2b[933]] = _0x8e22x3[_0xee2b[37]](_0x8e22x1[_0xee2b[2971]]);
  }
  if (!_0x8e22x1[_0xee2b[2971]]) {
    var _0x8e22x6 = _0x8e22x5[_0xee2b[2973]] && _0x8e22x5[_0xee2b[2973]][_0xee2b[2974]] && _0x8e22x5[_0xee2b[2973]][_0xee2b[2974]]();
    if (!(_0x8e22x6 && _0x8e22x6[_0xee2b[787]]()[_0xee2b[1087]](_0x8e22x1[_0xee2b[2033]]()))) {
      _0x8e22x1[_0xee2b[2971]] = _0x8e22x1[_0xee2b[2033]](_0x8e22x5[_0xee2b[2972]]);
    }
  }
  if (_0x8e22x1[_0xee2b[2971]] && !_0x8e22x1[_0xee2b[933]]) {
    _0x8e22x1[_0xee2b[933]] = _0x8e22x5[_0xee2b[37]](_0x8e22x1[_0xee2b[2971]]);
  }
  if (_0x8e22x5[_0xee2b[2975]](_0x8e22x1) !== false) {
    _0x8e22x5[_0xee2b[2976]](_0x8e22x1);
  }
  if (_0x8e22x4 && !Ext[_0xee2b[761]](_0x8e22x1[_0xee2b[969]])[_0xee2b[2977]]()) {
    if (_0x8e22x1[_0xee2b[2211]]() === _0x8e22x1[_0xee2b[2978]] || _0x8e22x1[_0xee2b[2979]](true)) {
      _0x8e22x1[_0xee2b[1977]]();
    }
  }
  _0x8e22x1[_0xee2b[829]] = null;
}}});
Ext[_0xee2b[6]](_0xee2b[2980], {extend:_0xee2b[957], target:_0xee2b[2981], minVersion:_0xee2b[2982], maxVersion:_0xee2b[2983], overrides:{privates:{updateDomScrollPosition:function(_0x8e22x4) {
  var _0x8e22x5 = this, _0x8e22x6 = _0x8e22x5[_0xee2b[1780]], _0x8e22xa = _0x8e22x6[_0xee2b[1893]], _0x8e22x7 = _0x8e22x6[_0xee2b[1894]], _0x8e22x9, _0x8e22x1, _0x8e22x3, _0x8e22x2;
  _0x8e22x5[_0xee2b[2984]](_0x8e22x6);
  _0x8e22x9 = _0x8e22x6[_0xee2b[1893]];
  _0x8e22x1 = _0x8e22x6[_0xee2b[1894]];
  _0x8e22x5[_0xee2b[2985]] = false;
  if (!_0x8e22x4) {
    _0x8e22x3 = _0x8e22x9 - _0x8e22xa;
    _0x8e22x2 = _0x8e22x1 - _0x8e22x7;
    if (!_0x8e22x5[_0xee2b[2986]]) {
      _0x8e22x5[_0xee2b[2986]] = Ext[_0xee2b[2986]] = true;
      _0x8e22x5[_0xee2b[2987]](_0x8e22x9, _0x8e22x1, _0x8e22x3, _0x8e22x2);
    }
    _0x8e22x5[_0xee2b[2988]](_0x8e22x9, _0x8e22x1, _0x8e22x3, _0x8e22x2);
    _0x8e22x5[_0xee2b[2989]](_0x8e22x9, _0x8e22x1, _0x8e22x3, _0x8e22x2);
  }
  return _0x8e22x6;
}}, getPosition:function() {
  var _0x8e22x3 = this;
  if (_0x8e22x3[_0xee2b[2985]]) {
    _0x8e22x3[_0xee2b[2990]](true);
  }
  return _0x8e22x3[_0xee2b[1780]];
}}});
Ext[_0xee2b[6]](_0xee2b[2991], {extend:_0xee2b[957], target:_0xee2b[2992], minVersion:_0xee2b[2982], overrides:{callLayout:function(_0x8e22x6, _0x8e22x3) {
  this[_0xee2b[2993]] = _0x8e22x6;
  if (!_0x8e22x6[_0xee2b[458]]) {
    _0x8e22x6[_0x8e22x3](this[_0xee2b[800]](_0x8e22x6[_0xee2b[2466]]));
  }
}}});
Ext[_0xee2b[6]](_0xee2b[2994], {extend:_0xee2b[957], target:_0xee2b[1996], minVersion:_0xee2b[975], applyFn:function() {
  var _0x8e22x3 = {setTarget:function(_0x8e22x5) {
    var _0x8e22x6 = this;
    if (_0x8e22x6[_0xee2b[969]]) {
      var _0x8e22x4 = Ext[_0xee2b[55]](_0x8e22x6[_0xee2b[969]]);
      if (_0x8e22x4) {
        _0x8e22x6[_0xee2b[325]](_0x8e22x4, {mouseover:_0x8e22x6[_0xee2b[2995]], tap:_0x8e22x6[_0xee2b[2995]], mouseout:_0x8e22x6[_0xee2b[2996]], mousemove:_0x8e22x6[_0xee2b[799]], scope:_0x8e22x6});
      }
    }
    _0x8e22x6[_0xee2b[969]] = Ext[_0xee2b[55]](_0x8e22x5);
    if (_0x8e22x6[_0xee2b[969]]) {
      _0x8e22x6[_0xee2b[252]](_0x8e22x6[_0xee2b[969]], {mouseover:_0x8e22x6[_0xee2b[2995]], tap:_0x8e22x6[_0xee2b[2995]], mouseout:_0x8e22x6[_0xee2b[2996]], mousemove:_0x8e22x6[_0xee2b[799]], scope:_0x8e22x6});
    }
    if (_0x8e22x6[_0xee2b[2997]]) {
      _0x8e22x6[_0xee2b[2998]] = _0x8e22x6[_0xee2b[969]];
    }
  }};
  if (Ext[_0xee2b[2009]]()[_0xee2b[968]](_0xee2b[2962])) {
    _0x8e22x3[_0xee2b[2999]] = function(_0x8e22x6, _0x8e22x5) {
      var _0x8e22x4 = this;
      _0x8e22x4[_0xee2b[9]](arguments);
      if (_0x8e22x4[_0xee2b[2997]]) {
        if (!_0x8e22x4[_0xee2b[3000]][_0xee2b[854]]()) {
          _0x8e22x4[_0xee2b[3000]][_0xee2b[2019]]();
        }
        _0x8e22x4[_0xee2b[3001]]();
      } else {
        _0x8e22x4[_0xee2b[3000]][_0xee2b[256]]();
      }
    };
  }
  Ext[_0xee2b[502]][_0xee2b[55]](this[_0xee2b[969]])[_0xee2b[507]](_0x8e22x3);
}});
Ext[_0xee2b[6]](_0xee2b[3002], {extend:_0xee2b[957], target:_0xee2b[3003], minVersion:_0xee2b[2836], obsoleteTestName:_0xee2b[3004], overrides:{setItemsDraggable:function(_0x8e22x6) {
  var _0x8e22x4 = this, _0x8e22x3;
  _0x8e22x3 = _0x8e22x4[_0xee2b[9]]([_0x8e22x6]);
  if (!_0x8e22x6 && _0x8e22x4[_0xee2b[3005]] && _0x8e22x4[_0xee2b[3005]][_0xee2b[3006]][_0xee2b[4]] === 0) {
    _0x8e22x4[_0xee2b[3005]][_0xee2b[3007]][_0xee2b[96]][_0xee2b[78]](_0x8e22x4[_0xee2b[3005]][_0xee2b[3007]]);
    _0x8e22x4[_0xee2b[3005]] = Ext[_0xee2b[829]][_0xee2b[3008]][_0xee2b[139]][_0xee2b[3005]] = null;
  }
  return _0x8e22x3;
}}});
Ext[_0xee2b[6]](_0xee2b[3009], {extend:_0xee2b[957], requires:[_0xee2b[3010]], target:_0xee2b[3010], minVersion:_0xee2b[3011], overrides:{privates:{onMouseMove:function(_0x8e22x5, _0x8e22x1, _0x8e22x3) {
  var _0x8e22xa = this, _0x8e22x8 = _0x8e22x3[_0xee2b[829]], _0x8e22xd = _0x8e22x5[_0xee2b[2033]](_0x8e22x8[_0xee2b[3012]]), _0x8e22x4 = _0x8e22x3[_0xee2b[829]][_0xee2b[3013]](_0x8e22xd), _0x8e22x7 = _0x8e22xa[_0xee2b[3014]];
  var _0x8e22x9;
  if (_0x8e22x8[_0xee2b[808]]) {
    _0x8e22x9 = _0x8e22x8[_0xee2b[808]]();
  } else {
    if (_0x8e22x8[_0xee2b[2467]][_0xee2b[808]]) {
      _0x8e22x9 = _0x8e22x8[_0xee2b[2467]][_0xee2b[808]]();
    }
  }
  if (_0x8e22x9 && _0x8e22x9[_0xee2b[2888]] && Ext[_0xee2b[761]](_0x8e22x1)[_0xee2b[694]](_0xee2b[495] + _0x8e22x9[_0xee2b[2888]])) {
    return;
  }
  if (_0x8e22xa[_0xee2b[3015]]) {
    if (_0x8e22xd === _0x8e22xa[_0xee2b[3015]]) {
      if (!_0x8e22xa[_0xee2b[3016]]) {
        _0x8e22xa[_0xee2b[3016]] = _0x8e22x8[_0xee2b[37]](_0x8e22xd[_0xee2b[96]]);
      }
      return;
    } else {
      _0x8e22xa[_0xee2b[3015]] = null;
      if (_0x8e22xa[_0xee2b[3016]]) {
        _0x8e22xa[_0xee2b[760]](_0x8e22xa[_0xee2b[3016]]);
        _0x8e22x7[_0xee2b[3017]](_0x8e22xa[_0xee2b[64]][_0xee2b[147]](_0x8e22xa[_0xee2b[3016]]));
      }
    }
  }
  _0x8e22xa[_0xee2b[3018]] = true;
  if (_0x8e22xa[_0xee2b[3019]]) {
    _0x8e22xa[_0xee2b[3019]][_0xee2b[2061]]();
  }
  if (_0x8e22x4) {
    _0x8e22xa[_0xee2b[3020]](_0x8e22x8, _0x8e22xd, _0x8e22x4, _0x8e22x5);
  } else {
    var _0x8e22x6 = _0x8e22x8[_0xee2b[2179]] ? _0x8e22x8[_0xee2b[2179]][_0xee2b[265]] : _0x8e22x8[_0xee2b[2467]][_0xee2b[2179]][_0xee2b[265]];
    if (!_0x8e22x5[_0xee2b[3021]](_0x8e22x6)) {
      _0x8e22xa[_0xee2b[3022]](_0x8e22x5, _0x8e22x8);
    }
  }
}}}});
Ext[_0xee2b[6]](_0xee2b[3023], {extend:_0xee2b[957], requires:[_0xee2b[3024]], target:_0xee2b[3024], minVersion:_0xee2b[2954], maxVersion:_0xee2b[3025], overrides:{disableBufferedRenderingSupport:true, deactivate:function() {
  var _0x8e22x1 = this;
  if (_0x8e22x1[_0xee2b[3026]]) {
    var _0x8e22x4 = _0x8e22x1[_0xee2b[2470]], _0x8e22x2 = _0x8e22x1[_0xee2b[3027]][_0xee2b[266]], _0x8e22x3 = _0x8e22x2[_0xee2b[4]], _0x8e22x5, _0x8e22x6;
    for (_0x8e22x6 = 0; _0x8e22x6 < _0x8e22x3; _0x8e22x6++) {
      _0x8e22x5 = _0x8e22x2[_0x8e22x6];
      if (_0x8e22x4[_0xee2b[829]][_0xee2b[3028]]) {
        if (_0x8e22x5[_0xee2b[3029]]) {
          _0x8e22x1[_0xee2b[3030]]();
        }
        _0x8e22x5[_0xee2b[3031]]();
      }
    }
  } else {
    _0x8e22x1[_0xee2b[9]](arguments);
  }
}}});
Ext[_0xee2b[6]](_0xee2b[3032], {extend:_0xee2b[957], minVersion:_0xee2b[2008], maxVersion:_0xee2b[2982], target:_0xee2b[3033], overrides:{privates:{onDomScroll:function() {
  var _0x8e22x2 = this, _0x8e22x6 = _0x8e22x2[_0xee2b[1780]], _0x8e22x5 = _0x8e22x6[_0xee2b[1893]], _0x8e22x4 = _0x8e22x6[_0xee2b[1894]], _0x8e22x3, _0x8e22x7, _0x8e22x9, _0x8e22x1;
  _0x8e22x6 = _0x8e22x2[_0xee2b[2990]]();
  if (_0x8e22x2[_0xee2b[3034]]) {
    clearTimeout(_0x8e22x2[_0xee2b[3035]][_0xee2b[1487]]);
    return;
  }
  _0x8e22x3 = _0x8e22x6[_0xee2b[1893]];
  _0x8e22x7 = _0x8e22x6[_0xee2b[1894]];
  _0x8e22x9 = _0x8e22x3 - _0x8e22x5;
  _0x8e22x1 = _0x8e22x7 - _0x8e22x4;
  if (!_0x8e22x2[_0xee2b[2986]]) {
    _0x8e22x2[_0xee2b[2986]] = Ext[_0xee2b[2986]] = true;
    _0x8e22x2[_0xee2b[2987]](_0x8e22x3, _0x8e22x7, _0x8e22x9, _0x8e22x1);
  }
  _0x8e22x2[_0xee2b[2988]](_0x8e22x3, _0x8e22x7, _0x8e22x9, _0x8e22x1);
  _0x8e22x2[_0xee2b[2989]](_0x8e22x3, _0x8e22x7, _0x8e22x9, _0x8e22x1);
}, invokePartners:function(_0x8e22x3, _0x8e22xa, _0x8e22x9, _0x8e22x5, _0x8e22x7) {
  var _0x8e22x1 = this, _0x8e22x8 = _0x8e22x1[_0xee2b[3036]], _0x8e22x4, _0x8e22x6, _0x8e22x2;
  if (!_0x8e22x1[_0xee2b[3037]]) {
    _0x8e22x1[_0xee2b[3038]] = true;
    for (_0x8e22x6 in _0x8e22x8) {
      _0x8e22x2 = _0x8e22x8[_0x8e22x6][_0xee2b[3039]];
      _0x8e22x4 = _0x8e22x8[_0x8e22x6][_0xee2b[3040]];
      if (!_0x8e22x4[_0xee2b[3038]]) {
        _0x8e22x4[_0x8e22x3](_0x8e22x1, _0x8e22x2[_0xee2b[1893]] ? _0x8e22xa : null, _0x8e22x2[_0xee2b[1894]] ? _0x8e22x9 : null, _0x8e22x5, _0x8e22x7);
      }
    }
    _0x8e22x1[_0xee2b[3038]] = false;
  }
}}}});
Ext[_0xee2b[6]](_0xee2b[3041], {extend:_0xee2b[1996], alias:_0xee2b[3042], uses:[_0xee2b[3043], _0xee2b[3044], _0xee2b[1950], _0xee2b[3045]], config:{view:null}, componentCls:_0xee2b[3046], anchor:_0xee2b[3047], constraintInsets:_0xee2b[3048], allowOver:true, initComponent:function() {
  var _0x8e22x3 = this;
  _0x8e22x3[_0xee2b[9]](arguments);
  _0x8e22x3[_0xee2b[149]](_0xee2b[2028], _0x8e22x3[_0xee2b[3049]], _0x8e22x3);
}, getAlignRegion:function() {
  var _0x8e22x9 = this, _0x8e22x1 = _0x8e22x9[_0xee2b[3000]], _0x8e22x4 = _0x8e22x9[_0xee2b[3050]](), _0x8e22xa, _0x8e22x7, _0x8e22x5, _0x8e22x6 = _0x8e22x9[_0xee2b[3051]], _0x8e22x2, _0x8e22x3;
  if (!_0x8e22x9[_0xee2b[3052]]) {
    _0x8e22x1[_0xee2b[264]](Ext[_0xee2b[238]] + _0xee2b[3053]);
    _0x8e22x1[_0xee2b[2019]]();
    _0x8e22x9[_0xee2b[3052]] = new Ext[_0xee2b[49]].Offset(_0x8e22x1[_0xee2b[793]](), _0x8e22x1[_0xee2b[859]]());
    _0x8e22x1[_0xee2b[267]](Ext[_0xee2b[238]] + _0xee2b[3053]);
    _0x8e22x1[_0xee2b[256]]();
  }
  if ((_0x8e22x9[_0xee2b[2997]] || _0x8e22x9[_0xee2b[2722]]) && _0x8e22x9[_0xee2b[3054]] && !_0x8e22x9[_0xee2b[3055]]) {
    _0x8e22x5 = _0x8e22x9[_0xee2b[3056]][_0xee2b[1945]]();
    if (!Ext[_0xee2b[2925]](_0x8e22x9[_0xee2b[3056]][_0xee2b[758]]) && _0x8e22x9[_0xee2b[290]]()[_0xee2b[2131]]() === _0xee2b[1931] && _0x8e22x9[_0xee2b[3057]]) {
      _0x8e22x5 = _0x8e22x5[_0xee2b[3059]](new Ext[_0xee2b[49]].Region(_0x8e22x5[_0xee2b[686]], _0x8e22x9[_0xee2b[3057]][_0xee2b[3058]]()[_0xee2b[1893]] + _0x8e22x9[_0xee2b[1945]]()[_0xee2b[773]] / 2, _0x8e22x5[_0xee2b[754]], _0x8e22x9[_0xee2b[3057]][_0xee2b[3058]]()[_0xee2b[1893]] + -_0x8e22x9[_0xee2b[1945]]()[_0xee2b[773]] / 2)) || _0x8e22x5;
    }
  } else {
    _0x8e22x5 = _0x8e22x9[_0xee2b[3057]] ? _0x8e22x9[_0xee2b[3057]][_0xee2b[3058]]()[_0xee2b[2186]](-Math[_0xee2b[1524]](_0x8e22x6[1]), Math[_0xee2b[1524]](_0x8e22x6[0]), Math[_0xee2b[1524]](_0x8e22x6[1]), -Math[_0xee2b[1524]](_0x8e22x6[0])) : new Ext[_0xee2b[49]].Point();
    if (!_0x8e22x9[_0xee2b[2997]]) {
      _0x8e22xa = true;
      if (_0x8e22x6[0] > 0) {
        if (_0x8e22x6[1] > 0) {
          _0x8e22x4 = _0xee2b[3060];
        } else {
          _0x8e22x4 = _0xee2b[3061];
        }
      } else {
        if (_0x8e22x6[1] > 0) {
          _0x8e22x4 = _0xee2b[3062];
        } else {
          _0x8e22x4 = _0xee2b[3063];
        }
      }
    }
  }
  _0x8e22x7 = {align:_0x8e22x9[_0xee2b[3064]](_0x8e22x4), axisLock:_0x8e22x9[_0xee2b[3065]], target:_0x8e22x5, overlap:_0x8e22xa, offset:_0x8e22x9[_0xee2b[3066]]};
  if (_0x8e22x9[_0xee2b[2997]]) {
    _0x8e22x7[_0xee2b[3052]] = _0x8e22x9[_0xee2b[3052]];
  }
  if (_0x8e22x9[_0xee2b[3067]]) {
    _0x8e22x2 = _0x8e22x9[_0xee2b[3068]] || Ext[_0xee2b[797]]();
    if (!_0x8e22x2[_0xee2b[3069]]) {
      _0x8e22x2 = Ext[_0xee2b[49]][_0xee2b[3070]][_0xee2b[1945]](_0x8e22x2);
    }
    if (_0x8e22x9[_0xee2b[3071]]) {
      _0x8e22x3 = _0x8e22x9[_0xee2b[3071]];
      if (!Ext[_0xee2b[135]](_0x8e22x3)) {
        _0x8e22x3 = Ext[_0xee2b[49]][_0xee2b[3073]][_0xee2b[3072]](_0x8e22x3);
      }
      _0x8e22x2 = _0x8e22x2[_0xee2b[1054]]()[_0xee2b[2186]](_0x8e22x3[_0xee2b[686]], _0x8e22x3[_0xee2b[867]], _0x8e22x3[_0xee2b[754]], _0x8e22x3[_0xee2b[1354]]);
    }
    _0x8e22x7[_0xee2b[3074]] = _0x8e22x2;
  }
  return _0x8e22x9[_0xee2b[1945]]()[_0xee2b[2021]](_0x8e22x7);
}, onTipBeforeShow:function(_0x8e22x2) {
  if (!_0x8e22x2[_0xee2b[3075]] || !_0x8e22x2[_0xee2b[3075]][_0xee2b[388]]) {
    return false;
  }
  var _0x8e22x6 = _0x8e22x2[_0xee2b[290]]();
  var _0x8e22x9 = Ext[_0xee2b[2862]](_0xee2b[3076]);
  var _0x8e22x4 = Ext[_0xee2b[26]][_0xee2b[1761]](_0x8e22x9, function(_0x8e22x7) {
    return _0x8e22x6 !== _0x8e22x7 && !_0x8e22x6[_0xee2b[3077]](_0x8e22x7) && Ext[_0xee2b[3079]][_0xee2b[3078]]() === _0x8e22x7;
  });
  if (_0x8e22x4) {
    return false;
  }
  var _0x8e22x3 = _0x8e22x6[_0xee2b[2181]](_0x8e22x2[_0xee2b[3075]]);
  if (!_0x8e22x3 || _0x8e22x6[_0xee2b[180]](_0xee2b[3080], _0x8e22x6, _0x8e22x3) === false) {
    return false;
  }
  var _0x8e22x1 = _0x8e22x6[_0xee2b[3081]](_0x8e22x3, _0x8e22x2[_0xee2b[3075]]), _0x8e22x5;
  if (!_0x8e22x1) {
    return false;
  }
  _0x8e22x5 = _0x8e22x6[_0xee2b[3082]][_0xee2b[8]](_0x8e22x1);
  if (!_0x8e22x5) {
    return false;
  }
  _0x8e22x2[_0xee2b[724]](_0x8e22x5);
}, onTargetOut:function(_0x8e22x3) {
  if (this[_0xee2b[262]] && this[_0xee2b[3083]] && this[_0xee2b[265]][_0xee2b[1087]](_0x8e22x3[_0xee2b[3084]])) {
    return;
  }
  return this[_0xee2b[9]](arguments);
}});
Ext[_0xee2b[6]](_0xee2b[3085], {extend:_0xee2b[2868], requires:[_0xee2b[1996], _0xee2b[2952], _0xee2b[2960], _0xee2b[2967], _0xee2b[2980], _0xee2b[2991], _0xee2b[2994], _0xee2b[3002], _0xee2b[3009], _0xee2b[3023], _0xee2b[3032], _0xee2b[3041]], tip:null, overScheduledEventClass:_0xee2b[2198], ScheduleBarEvents:[_0xee2b[784], _0xee2b[801], _0xee2b[248], _0xee2b[743], _0xee2b[3086], _0xee2b[744]], ResourceRowEvents:[_0xee2b[2212], _0xee2b[3087]], preventOverCls:false, hoveredEventNode:null, _initializeTimelineView:function() {
  this[_0xee2b[9]](arguments);
  this[_0xee2b[149]](_0xee2b[218], this._onDestroy, this);
  this[_0xee2b[149]](_0xee2b[3088], this._onAfterRender, this);
  this[_0xee2b[1720]](this[_0xee2b[1719]]);
  this[_0xee2b[845]](_0xee2b[2745]);
  this[_0xee2b[264]](_0xee2b[3089]);
  if (this[_0xee2b[2887]]) {
    this[_0xee2b[264]](this[_0xee2b[2888]] + _0xee2b[2889]);
  }
  this[_0xee2b[264]](this._cmpCls);
  if (this[_0xee2b[3090]]) {
    this[_0xee2b[264]](_0xee2b[3091]);
  }
}, handleScheduleBarEvent:function(_0x8e22x6, _0x8e22x3) {
  this[_0xee2b[180]](this[_0xee2b[3092]] + _0x8e22x6[_0xee2b[249]], this, this[_0xee2b[2181]](_0x8e22x3), _0x8e22x6);
}, handleResourceRowEvent:function(_0x8e22x3, _0x8e22x6) {
  this[_0xee2b[180]](this[_0xee2b[3092]] + _0x8e22x3[_0xee2b[249]], this, this[_0xee2b[3093]](_0x8e22x6), _0x8e22x3);
}, _onDestroy:function() {
  if (this[_0xee2b[2106]]) {
    this[_0xee2b[2106]][_0xee2b[218]]();
  }
}, _onAfterRender:function() {
  if (this[_0xee2b[3094]]) {
    this[_0xee2b[3095]](true);
  }
  if (this[_0xee2b[3082]]) {
    if (typeof this[_0xee2b[3082]] === _0xee2b[308]) {
      this[_0xee2b[3082]] = new Ext.XTemplate(this[_0xee2b[3082]]);
    }
    this[_0xee2b[265]][_0xee2b[149]](Ext[_0xee2b[1952]][_0xee2b[1951]] ? _0xee2b[3096] : _0xee2b[798], this[_0xee2b[3097]], this, {single:true});
  }
  this[_0xee2b[3098]]();
  var _0x8e22x6 = {delegate:this[_0xee2b[2034]], scope:this};
  var _0x8e22x3 = {delegate:this[_0xee2b[3099]], scope:this};
  Ext[_0xee2b[26]][_0xee2b[25]](this.ScheduleBarEvents, function(_0x8e22x4) {
    _0x8e22x6[_0x8e22x4] = this[_0xee2b[3100]];
  }, this);
  Ext[_0xee2b[26]][_0xee2b[25]](this.ResourceRowEvents, function(_0x8e22x4) {
    _0x8e22x3[_0x8e22x4] = this[_0xee2b[3101]];
  }, this);
  this[_0xee2b[265]][_0xee2b[149]](_0x8e22x6);
  this[_0xee2b[265]][_0xee2b[149]](_0x8e22x3);
}, setMouseOverEnabled:function(_0x8e22x3) {
  this[_0x8e22x3 ? _0xee2b[252] : _0xee2b[325]](this[_0xee2b[265]], {mouseover:this[_0xee2b[3102]], mouseout:this[_0xee2b[3103]], delegate:this[_0xee2b[2034]], scope:this});
  if (!_0x8e22x3) {
    this[_0xee2b[787]]()[_0xee2b[760]](_0xee2b[495] + this[_0xee2b[3094]])[_0xee2b[267]](this[_0xee2b[3094]]);
  }
}, onEventMouseOver:function(_0x8e22x4, _0x8e22x3) {
  if (_0x8e22x3 !== this[_0xee2b[3104]] && !this[_0xee2b[3105]]) {
    this[_0xee2b[3104]] = _0x8e22x3;
    Ext[_0xee2b[761]](_0x8e22x3)[_0xee2b[264]](this[_0xee2b[3094]]);
    var _0x8e22x6 = this[_0xee2b[2181]](_0x8e22x3);
    if (_0x8e22x6) {
      this[_0xee2b[180]](_0xee2b[3106], this, _0x8e22x6, _0x8e22x4);
    }
  }
}, onEventMouseOut:function(_0x8e22x6, _0x8e22x3) {
  if (this[_0xee2b[3104]]) {
    if (!_0x8e22x6[_0xee2b[3021]](this[_0xee2b[3104]], true, true)) {
      Ext[_0xee2b[761]](this[_0xee2b[3104]])[_0xee2b[267]](this[_0xee2b[3094]]);
      this[_0xee2b[180]](_0xee2b[3107], this, this[_0xee2b[2181]](this[_0xee2b[3104]]), _0x8e22x6);
      this[_0xee2b[3104]] = null;
    }
  }
}, highlightItem:function(_0x8e22x6) {
  if (_0x8e22x6) {
    var _0x8e22x3 = this;
    _0x8e22x3[_0xee2b[739]]();
    _0x8e22x3[_0xee2b[3108]] = _0x8e22x6;
    Ext[_0xee2b[761]](_0x8e22x6)[_0xee2b[264]](_0x8e22x3[_0xee2b[3109]]);
  }
}, setupTooltip:function() {
  var _0x8e22x3 = this, _0x8e22x6 = _0x8e22x3[_0xee2b[787]]();
  _0x8e22x3[_0xee2b[2106]] = new Sch[_0xee2b[2000]].EventTip(Ext[_0xee2b[8]]({view:_0x8e22x3, delegate:_0x8e22x3[_0xee2b[2034]], target:_0x8e22x6, showOnTap:true, dismissDelay:0, constrainTo:_0x8e22x3[_0xee2b[840]][_0xee2b[787]](), rtl:_0x8e22x3[_0xee2b[1855]]}, _0x8e22x3[_0xee2b[3110]]));
}, getHorizontalTimeAxisColumn:function() {
  if (!this[_0xee2b[3111]]) {
    this[_0xee2b[3111]] = this[_0xee2b[1848]][_0xee2b[861]](_0xee2b[3112]);
    if (this[_0xee2b[3111]]) {
      this[_0xee2b[3111]][_0xee2b[149]](_0xee2b[218], function() {
        this[_0xee2b[3111]] = null;
      }, this);
    }
  }
  return this[_0xee2b[3111]];
}, getDataForTooltipTpl:function(_0x8e22x3, _0x8e22x6) {
  return Ext[_0xee2b[8]]({_record:_0x8e22x3}, _0x8e22x3[_0xee2b[22]]);
}, refreshKeepingScroll:function() {
  Ext[_0xee2b[2839]]();
  this[_0xee2b[3113]]();
  this[_0xee2b[2668]]();
  Ext[_0xee2b[2841]](true);
  this[_0xee2b[3114]]();
}, setupTimeCellEvents:function() {
  this[_0xee2b[252]](this[_0xee2b[265]], {click:this[_0xee2b[3115]], dblclick:this[_0xee2b[3115]], contextmenu:this[_0xee2b[3115]], longpress:this[_0xee2b[3115]], pinch:this[_0xee2b[3115]], pinchstart:this[_0xee2b[3115]], pinchend:this[_0xee2b[3115]], scope:this});
}, getTableRegion:function() {
  var _0x8e22x3 = this[_0xee2b[265]][_0xee2b[861]](_0xee2b[495] + Ext[_0xee2b[238]] + _0xee2b[3116]);
  return (_0x8e22x3 || this[_0xee2b[265]])[_0xee2b[1945]]();
}, getRowNode:function(_0x8e22x3) {
  return this[_0xee2b[3117]](_0x8e22x3);
}, findRowByChild:function(_0x8e22x3) {
  return this[_0xee2b[3118]](_0x8e22x3);
}, getRecordForRowNode:function(_0x8e22x3) {
  return this[_0xee2b[37]](_0x8e22x3);
}, refreshKeepingResourceScroll:function() {
  var _0x8e22x3 = this[_0xee2b[1966]]();
  this[_0xee2b[2668]]();
  if (this[_0xee2b[1828]]()) {
    this[_0xee2b[2835]](_0x8e22x3[_0xee2b[686]]);
  } else {
    this[_0xee2b[2838]](_0x8e22x3[_0xee2b[1354]]);
  }
}, scrollHorizontallyTo:function(_0x8e22x3, _0x8e22x6) {
  if (this[_0xee2b[262]]) {
    this[_0xee2b[289]](_0x8e22x3, null, _0x8e22x6);
  }
}, scrollVerticallyTo:function(_0x8e22x6, _0x8e22x3) {
  if (this[_0xee2b[262]]) {
    this[_0xee2b[289]](null, _0x8e22x6, _0x8e22x3);
  }
}, getVerticalScroll:function() {
  return this[_0xee2b[3119]]();
}, getHorizontalScroll:function() {
  return this[_0xee2b[1920]]();
}, getScroll:function() {
  var _0x8e22x3 = this;
  return {top:_0x8e22x3[_0xee2b[1922]](), left:_0x8e22x3[_0xee2b[3120]]()};
}, handleScheduleEvent:function() {
}, disableViewScroller:function(_0x8e22x4) {
  var _0x8e22x3 = this[_0xee2b[1941]]();
  if (_0x8e22x3) {
    if (_0x8e22x3[_0xee2b[253]]) {
      _0x8e22x3[_0xee2b[253]](_0x8e22x4);
    } else {
      var _0x8e22x6 = this[_0xee2b[694]](_0xee2b[2203])[_0xee2b[1941]]();
      _0x8e22x3[_0xee2b[3121]]({x:!_0x8e22x4, y:!_0x8e22x4});
      _0x8e22x6[_0xee2b[3121]]({x:!_0x8e22x4, y:!_0x8e22x4});
    }
  }
}, shouldAdjustForRtl:function() {
  return this[_0xee2b[1855]] && !Ext[_0xee2b[3122]][_0xee2b[1855]];
}, getHorizontalPositionSide:function() {
  return this[_0xee2b[1855]] ? _0xee2b[867] : _0xee2b[1354];
}, getViewContainerElementTop:function() {
  var _0x8e22x3 = this[_0xee2b[694]](_0xee2b[805])[_0xee2b[290]]()[_0xee2b[265]];
  return _0x8e22x3[_0xee2b[1936]]();
}, getViewContainerHeight:function() {
  return this[_0xee2b[694]](_0xee2b[805])[_0xee2b[290]]()[_0xee2b[265]][_0xee2b[859]]();
}, getScrollableMaxPosition:function() {
  return {x:this[_0xee2b[1941]]()[_0xee2b[3123]]()[_0xee2b[1893]], y:this[_0xee2b[3124]]()};
}, getVerticalScroller:function() {
  return this[_0xee2b[694]](_0xee2b[805])[_0xee2b[1941]]();
}, getVerticalScrollableMaxHeight:function() {
  return this[_0xee2b[3125]]()[_0xee2b[3123]]()[_0xee2b[1894]];
}, getScrollableContainerRegion:function() {
  var _0x8e22x3 = this[_0xee2b[787]]()[_0xee2b[1945]]();
  _0x8e22x3[_0xee2b[686]] = this[_0xee2b[694]](_0xee2b[3126])[_0xee2b[1941]]()[_0xee2b[1940]]()[_0xee2b[1936]]();
  return new Ext[_0xee2b[49]].Region(_0x8e22x3[_0xee2b[686]], _0x8e22x3[_0xee2b[867]], _0x8e22x3[_0xee2b[686]] + this[_0xee2b[2608]](), _0x8e22x3[_0xee2b[1354]]);
}, scrollHorizontallyBy:function(_0x8e22x3, _0x8e22x6) {
  this[_0xee2b[3127]](_0x8e22x3, null, _0x8e22x6);
}, scrollVerticallyBy:function(_0x8e22x3, _0x8e22x6) {
  var _0x8e22x4 = this[_0xee2b[694]](_0xee2b[3126])[_0xee2b[1941]]();
  _0x8e22x4[_0xee2b[3127]](0, _0x8e22x3, _0x8e22x6);
}, scrollElementIntoView:function(_0x8e22x4, _0x8e22x2, _0x8e22x3, _0x8e22x1, _0x8e22xd, _0x8e22xb, _0x8e22x11) {
  var _0x8e22xa = this, _0x8e22x9 = _0x8e22x4[_0xee2b[758]], _0x8e22xe = _0x8e22xa[_0xee2b[1966]](), _0x8e22xc = _0x8e22xe[_0xee2b[1354]], _0x8e22xf = _0x8e22xe[_0xee2b[686]], _0x8e22x7 = _0x8e22xa[_0xee2b[3128]](_0x8e22x4, _0x8e22xc, _0x8e22xf, _0x8e22xd), _0x8e22x5 = _0x8e22x7[_0xee2b[1893]], _0x8e22x6 = _0x8e22x7[_0xee2b[1894]], _0x8e22x10, _0x8e22x8;
  _0x8e22x10 = _0x8e22x2 !== false ? _0x8e22x5 : _0x8e22xc;
  _0x8e22x8 = _0x8e22x6;
  if (_0x8e22x10 !== _0x8e22xc || _0x8e22x8 !== _0x8e22xf) {
    _0x8e22xa[_0xee2b[149]]({scrollend:{fn:function() {
      _0x8e22x1 && _0x8e22x4[_0xee2b[758]] && _0x8e22x4[_0xee2b[2128]]();
      _0x8e22xb && _0x8e22xb[_0xee2b[293]](_0x8e22x11);
    }, scope:_0x8e22xa, single:true}});
    _0x8e22xa[_0xee2b[289]](_0x8e22x10, _0x8e22x8, _0x8e22x3);
  } else {
    _0x8e22x1 && _0x8e22x4[_0xee2b[758]] && _0x8e22x4[_0xee2b[2128]]();
    _0x8e22xb && _0x8e22xb[_0xee2b[293]](_0x8e22x11);
  }
  return _0x8e22xa;
}, getScrollIntoViewXY:function(_0x8e22x4, _0x8e22xb, _0x8e22xc, _0x8e22x3) {
  _0x8e22x3 = Ext[_0xee2b[1353]](_0x8e22x3) ? 20 : _0x8e22x3;
  var _0x8e22x6 = this[_0xee2b[834]][_0xee2b[787]](), _0x8e22xf = this[_0xee2b[3125]]()[_0xee2b[1940]](), _0x8e22xd = _0x8e22x4[_0xee2b[2264]](_0x8e22x6), _0x8e22x1 = _0x8e22x4[_0xee2b[2264]](_0x8e22xf), _0x8e22x18 = _0x8e22xd[0], _0x8e22x19 = _0x8e22x1[1], _0x8e22xe = _0x8e22x4[_0xee2b[758]][_0xee2b[3129]], _0x8e22x8 = _0x8e22x4[_0xee2b[758]][_0xee2b[3130]], _0x8e22x5 = _0x8e22x18 + _0x8e22xb, _0x8e22x7 = _0x8e22x19 + _0x8e22xc, _0x8e22x16 = _0x8e22x5 + _0x8e22xe, _0x8e22x9 = _0x8e22x7 + _0x8e22x8, 
  _0x8e22x11 = _0x8e22x6[_0xee2b[793]](), _0x8e22xa = _0x8e22xf[_0xee2b[859]](), _0x8e22x15 = _0x8e22xb, _0x8e22x10 = _0x8e22xc, _0x8e22x14 = _0x8e22x15 + _0x8e22x11, _0x8e22x2 = _0x8e22x10 + _0x8e22xa;
  if (_0x8e22x8 > _0x8e22xa || _0x8e22x7 < _0x8e22x10) {
    _0x8e22xc = _0x8e22x7 - _0x8e22x3;
  } else {
    if (_0x8e22x9 > _0x8e22x2) {
      _0x8e22xc = _0x8e22x9 - _0x8e22xa + _0x8e22x3;
    }
  }
  if (_0x8e22xe > _0x8e22x11 || _0x8e22x5 < _0x8e22x15) {
    _0x8e22xb = _0x8e22x5 - _0x8e22x3;
  } else {
    if (_0x8e22x16 > _0x8e22x14) {
      _0x8e22xb = _0x8e22x16 - _0x8e22x11 + _0x8e22x3;
    }
  }
  _0x8e22xb = _0x8e22xb < 0 ? 0 : _0x8e22xb;
  _0x8e22xc = _0x8e22xc < 0 ? 0 : _0x8e22xc;
  return {x:_0x8e22xb, y:_0x8e22xc};
}});
Ext[_0xee2b[6]](_0xee2b[3131], {extend:_0xee2b[3132], mixins:[_0xee2b[3085]], infiniteScroll:false, bufferCoef:5, bufferThreshold:0.2, cachedScrollDate:null, boxIsReady:false, ignoreNextHorizontalScroll:false, constructor:function(_0x8e22x3) {
  this[_0xee2b[9]](arguments);
  if (this[_0xee2b[2829]]) {
    this[_0xee2b[149]](_0xee2b[2046], this[_0xee2b[3133]], this);
  }
  if (this[_0xee2b[810]]) {
    this[_0xee2b[846]](this[_0xee2b[810]], [_0xee2b[2745]]);
  }
}, setupInfiniteScroll:function() {
  var _0x8e22x5 = this[_0xee2b[1818]][_0xee2b[834]];
  this[_0xee2b[2830]] = _0x8e22x5[_0xee2b[1138]] || this[_0xee2b[1795]][_0xee2b[697]]();
  if (Ext[_0xee2b[2009]]()[_0xee2b[968]](_0xee2b[3134]) && Ext[_0xee2b[1952]][_0xee2b[1951]] && Ext[_0xee2b[3136]][_0xee2b[2592]][_0xee2b[3135]]) {
    var _0x8e22x3 = this[_0xee2b[1818]][_0xee2b[1848]][_0xee2b[1941]]();
    var _0x8e22x6 = this[_0xee2b[1941]]();
    _0x8e22x3[_0xee2b[3137]] && Ext[_0xee2b[3139]][_0xee2b[152]](_0xee2b[3138], _0x8e22x3[_0xee2b[3137]], _0x8e22x3);
    _0x8e22x6[_0xee2b[3137]] && Ext[_0xee2b[3139]][_0xee2b[152]](_0xee2b[3138], _0x8e22x6[_0xee2b[3137]], _0x8e22x6);
  }
  var _0x8e22x4 = this;
  _0x8e22x5[_0xee2b[2776]] = function(_0x8e22x1, _0x8e22x2, _0x8e22xa, _0x8e22x9) {
    if (_0x8e22x9) {
      return _0x8e22x9;
    }
    var _0x8e22x7 = Sch[_0xee2b[1728]][_0xee2b[1727]][_0xee2b[1726]](_0x8e22xa[_0xee2b[1728]]);
    return _0x8e22x4[_0xee2b[3140]](_0x8e22x1, _0x8e22x7[_0xee2b[877]]()[_0xee2b[1734]], _0x8e22xa[_0xee2b[1735]], _0x8e22xa[_0xee2b[773]], true);
  };
  this[_0xee2b[3141]]();
}, bindInfiniteScrollListeners:function() {
  this[_0xee2b[1941]]()[_0xee2b[149]](_0xee2b[1978], this[_0xee2b[3142]], this);
  this[_0xee2b[2829]] = true;
}, unbindInfiniteScrollListeners:function() {
  this[_0xee2b[1941]]()[_0xee2b[152]](_0xee2b[1978], this[_0xee2b[3142]], this);
  this[_0xee2b[2829]] = false;
}, onHorizontalScroll:function(_0x8e22x1, _0x8e22x7, _0x8e22x9) {
  if (this[_0xee2b[3143]] || this[_0xee2b[2830]]) {
    this[_0xee2b[3143]] = false;
    return;
  }
  var _0x8e22x2 = Ext[_0xee2b[857]](), _0x8e22x5 = this[_0xee2b[793]](), _0x8e22x6 = _0x8e22x5 * this[_0xee2b[3144]] * this[_0xee2b[3145]], _0x8e22x4 = this[_0xee2b[1941]]()[_0xee2b[3123]]()[_0xee2b[1893]];
  _0x8e22x4 -= _0x8e22x2[_0xee2b[773]];
  if (_0x8e22x4 - _0x8e22x7 < _0x8e22x6 || _0x8e22x7 < _0x8e22x6) {
    this[_0xee2b[2844]](this[_0xee2b[807]](_0x8e22x7, null, true));
    if (Ext[_0xee2b[2009]]()[_0xee2b[966]](_0xee2b[2836])) {
      var _0x8e22x3 = this[_0xee2b[1941]]()[_0xee2b[3146]] || this[_0xee2b[1941]]()[_0xee2b[3147]];
      _0x8e22x3 && _0x8e22x3[_0xee2b[3148]]();
    } else {
      this[_0xee2b[265]][_0xee2b[3148]]();
    }
  }
}, refresh:function() {
  this[_0xee2b[9]](arguments);
  if (this[_0xee2b[2829]] && !this[_0xee2b[3149]] && this[_0xee2b[3150]]) {
    this[_0xee2b[3151]]();
  }
}, onResize:function(_0x8e22x4, _0x8e22x3, _0x8e22x6, _0x8e22x5) {
  this[_0xee2b[3150]] = true;
  this[_0xee2b[9]](arguments);
  if (this[_0xee2b[2829]] && _0x8e22x4 > 0 && _0x8e22x4 !== _0x8e22x6) {
    this[_0xee2b[2844]](this[_0xee2b[2830]] || this[_0xee2b[2894]]()[_0xee2b[1138]], this[_0xee2b[2831]]);
  }
}, restoreScrollToCachedDate:function() {
  if (this[_0xee2b[2830]] && this[_0xee2b[3150]]) {
    this[_0xee2b[3143]] = true;
    this[_0xee2b[812]](this[_0xee2b[2830]]);
    this[_0xee2b[2830]] = null;
  }
}, scrollToDate:function(_0x8e22x3) {
  this[_0xee2b[2830]] = _0x8e22x3;
  if (this[_0xee2b[2831]]) {
    this[_0xee2b[1818]][_0xee2b[834]][_0xee2b[2845]](_0x8e22x3);
  } else {
    this[_0xee2b[1818]][_0xee2b[834]][_0xee2b[812]](_0x8e22x3);
  }
  var _0x8e22x6 = this[_0xee2b[1920]]();
  this[_0xee2b[1818]][_0xee2b[3152]] = _0x8e22x6;
  this[_0xee2b[1848]][_0xee2b[3153]](_0x8e22x6);
  if (Ext[_0xee2b[2009]]()[_0xee2b[966]](_0xee2b[2836])) {
    this[_0xee2b[694]](_0xee2b[805])[_0xee2b[3154]][_0xee2b[1893]] = _0x8e22x6;
  }
}, blockRestoringInfiniteScrollDate:function() {
  this[_0xee2b[3149]] = this[_0xee2b[3150]];
}, resumeRestoringInfiniteScrollDate:function() {
  this[_0xee2b[3149]] = false;
  if (this[_0xee2b[2829]] && this[_0xee2b[2830]]) {
    this[_0xee2b[3151]]();
  }
}, calculateInfiniteScrollingDateRange:function(_0x8e22x4, _0x8e22xa, _0x8e22x8, _0x8e22x7, _0x8e22x9) {
  var _0x8e22x1 = this[_0xee2b[1795]], _0x8e22x2 = this[_0xee2b[793]](), _0x8e22xd;
  _0x8e22x7 = _0x8e22x7 || this[_0xee2b[810]][_0xee2b[755]]();
  _0x8e22x8 = _0x8e22x8 || _0x8e22x1[_0xee2b[1735]] || 1;
  _0x8e22xa = _0x8e22xa || _0x8e22x1[_0xee2b[1734]];
  var _0x8e22x3 = Sch[_0xee2b[49]][_0xee2b[703]];
  var _0x8e22x5 = Math[_0xee2b[1194]](_0x8e22x2 * this[_0xee2b[3145]] / _0x8e22x7);
  if (_0x8e22x9) {
    var _0x8e22x6 = Math[_0xee2b[1194]](_0x8e22x2 * (1 + this[_0xee2b[3145]]) / (2 * _0x8e22x7)) * _0x8e22x8;
    _0x8e22xd = {start:_0x8e22x1[_0xee2b[1751]](_0x8e22x3[_0xee2b[255]](_0x8e22x4, _0x8e22xa, -_0x8e22x6), false, _0x8e22xa, _0x8e22x8), end:_0x8e22x1[_0xee2b[1750]](_0x8e22x3[_0xee2b[255]](_0x8e22x4, _0x8e22xa, _0x8e22x6), false, _0x8e22xa, _0x8e22x8)};
  } else {
    _0x8e22xd = {start:_0x8e22x1[_0xee2b[1751]](_0x8e22x3[_0xee2b[255]](_0x8e22x4, _0x8e22xa, -_0x8e22x5 * _0x8e22x8), false, _0x8e22xa, _0x8e22x8), end:_0x8e22x1[_0xee2b[1750]](_0x8e22x3[_0xee2b[255]](_0x8e22x4, _0x8e22xa, Math[_0xee2b[1194]]((_0x8e22x2 / _0x8e22x7 + _0x8e22x5) * _0x8e22x8)), false, _0x8e22xa, _0x8e22x8)};
  }
  return _0x8e22xd;
}, shiftToDate:function(_0x8e22x4, _0x8e22x3) {
  var _0x8e22x6 = this[_0xee2b[3140]](_0x8e22x4, null, null, null, _0x8e22x3);
  this[_0xee2b[2830]] = _0x8e22x4;
  this[_0xee2b[2831]] = _0x8e22x3;
  this[_0xee2b[1795]][_0xee2b[1756]](_0x8e22x6[_0xee2b[179]], _0x8e22x6[_0xee2b[771]]);
}, clearViewEl:function() {
  var _0x8e22x4 = this, _0x8e22x3 = _0x8e22x4[_0xee2b[1839]](), _0x8e22x6 = _0x8e22x3 && _0x8e22x3[_0xee2b[758]][_0xee2b[2517]](_0xee2b[495] + Ext[_0xee2b[238]] + _0xee2b[3155]);
  _0x8e22x6 && _0x8e22x3[_0xee2b[758]][_0xee2b[78]](_0x8e22x6);
  this[_0xee2b[9]](arguments);
  if (_0x8e22x6) {
    _0x8e22x4[_0xee2b[1839]]()[_0xee2b[758]][_0xee2b[83]](_0x8e22x6);
  }
}, destroy:function() {
  if (this[_0xee2b[2829]] && this[_0xee2b[262]]) {
    this[_0xee2b[3156]]();
  }
  this[_0xee2b[9]](arguments);
}});
Ext[_0xee2b[6]](_0xee2b[3157], {extend:_0xee2b[957], target:_0xee2b[3158], overrides:{getInnerTpl:function(_0x8e22x3) {
  return this[_0xee2b[2647]] ? _0xee2b[2508] + _0x8e22x3 + _0xee2b[3159] : this[_0xee2b[9]](arguments);
}}});
Ext[_0xee2b[6]](_0xee2b[3160], {extend:_0xee2b[957], requires:[_0xee2b[3161]], target:_0xee2b[3162], minVersion:_0xee2b[975], applyFn:function() {
  Ext[_0xee2b[507]](Ext[_0xee2b[2121]].DragDropManager, {handleMouseMove:function(_0x8e22xd) {
    var _0x8e22xa = this, _0x8e22x8 = _0x8e22xa[_0xee2b[3163]], _0x8e22x4 = _0x8e22xd[_0xee2b[1970]](), _0x8e22x9 = _0x8e22x4[0], _0x8e22x5 = _0x8e22x4[1], _0x8e22x7, _0x8e22x1;
    _0x8e22xa[_0xee2b[3164]] = _0x8e22x9 - _0x8e22xa[_0xee2b[3165]];
    _0x8e22xa[_0xee2b[3166]] = _0x8e22x5 - _0x8e22xa[_0xee2b[3167]];
    _0x8e22xa[_0xee2b[3169]][_0xee2b[3168]](_0x8e22x4);
    if (!_0x8e22x8) {
      return true;
    }
    if (!_0x8e22xa[_0xee2b[3170]]) {
      _0x8e22x7 = Math[_0xee2b[1524]](_0x8e22xa[_0xee2b[3164]]);
      _0x8e22x1 = Math[_0xee2b[1524]](_0x8e22xa[_0xee2b[3166]]);
      if (_0x8e22x7 > _0x8e22xa[_0xee2b[3171]] || _0x8e22x1 > _0x8e22xa[_0xee2b[3171]]) {
        _0x8e22xd[_0xee2b[3172]]();
        _0x8e22xa[_0xee2b[3173]](_0x8e22xa[_0xee2b[3165]], _0x8e22xa[_0xee2b[3167]]);
      }
    }
    if (_0x8e22xa[_0xee2b[3170]] && _0x8e22x8[_0xee2b[2063]]) {
      _0x8e22x8[_0xee2b[3174]](_0x8e22xd);
      _0x8e22x8[_0xee2b[1982]](_0x8e22xd);
      if (!_0x8e22x8[_0xee2b[3175]]) {
        _0x8e22xa[_0xee2b[3176]](_0x8e22xd, false);
      }
    }
    _0x8e22xa[_0xee2b[2217]](_0x8e22xd);
    return true;
  }, fireEvents:function(_0x8e22x23, _0x8e22xb) {
    var _0x8e22x1b = this, _0x8e22x11 = Ext[_0xee2b[1952]][_0xee2b[1951]], _0x8e22xd = _0x8e22x1b[_0xee2b[3163]], _0x8e22x13 = _0x8e22x1b[_0xee2b[3169]], _0x8e22x15 = _0x8e22x13[_0xee2b[1893]], _0x8e22x18 = _0x8e22x13[_0xee2b[1894]], _0x8e22x19 = [], _0x8e22x10 = [], _0x8e22xf = [], _0x8e22x5 = [], _0x8e22x1a = [], _0x8e22x17 = [], _0x8e22x4 = _0x8e22x11 ? document[_0xee2b[936]][_0xee2b[2606]] / window[_0xee2b[3177]] : 1, _0x8e22x7, _0x8e22x8, _0x8e22xc, _0x8e22x1, _0x8e22x14, _0x8e22x12, _0x8e22x16, 
    _0x8e22xe;
    if (!_0x8e22xd || _0x8e22xd[_0xee2b[3178]]()) {
      return;
    }
    _0x8e22xe = !(_0x8e22xd[_0xee2b[3179]] < 0 || _0x8e22xd[_0xee2b[2796]] < 0);
    if (_0x8e22x11 || !_0x8e22x1b[_0xee2b[3180]] && (!Ext[_0xee2b[1952]][_0xee2b[3181]] || Ext[_0xee2b[3182]]) && _0x8e22xe) {
      _0x8e22x7 = _0x8e22xd[_0xee2b[3183]]();
      if (_0x8e22xe) {
        _0x8e22x7[_0xee2b[763]][_0xee2b[2072]] = _0xee2b[856];
      }
      var _0x8e22x9 = Ext[_0xee2b[797]]()[_0xee2b[1966]]();
      _0x8e22x23[_0xee2b[969]] = document[_0xee2b[2245]](_0x8e22x23[_0xee2b[788]] - _0x8e22x9[_0xee2b[1354]] / _0x8e22x4, _0x8e22x23[_0xee2b[3184]] - _0x8e22x9[_0xee2b[686]] / _0x8e22x4);
      if (_0x8e22xe) {
        _0x8e22x7[_0xee2b[763]][_0xee2b[2072]] = _0xee2b[1690];
      }
    }
    for (_0x8e22x14 in _0x8e22x1b[_0xee2b[3185]]) {
      _0x8e22x8 = _0x8e22x1b[_0xee2b[3185]][_0x8e22x14];
      delete _0x8e22x1b[_0xee2b[3185]][_0x8e22x14];
      if (!_0x8e22x1b[_0xee2b[3186]](_0x8e22x8) || _0x8e22x8[_0xee2b[458]]) {
        continue;
      }
      if (_0x8e22x1b[_0xee2b[3180]]) {
        if (!this[_0xee2b[3187]](_0x8e22x13, _0x8e22x8, _0x8e22x1b[_0xee2b[1719]])) {
          _0x8e22xf[_0xee2b[11]](_0x8e22x8);
        }
      } else {
        if (!_0x8e22x23[_0xee2b[3021]](_0x8e22x8[_0xee2b[787]]())) {
          _0x8e22xf[_0xee2b[11]](_0x8e22x8);
        }
      }
      _0x8e22x10[_0x8e22x14] = true;
    }
    for (_0x8e22x16 in _0x8e22xd[_0xee2b[3188]]) {
      if (_0xee2b[308] !== typeof _0x8e22x16) {
        continue;
      }
      for (_0x8e22x14 in _0x8e22x1b[_0xee2b[3189]][_0x8e22x16]) {
        _0x8e22x8 = _0x8e22x1b[_0xee2b[3189]][_0x8e22x16][_0x8e22x14];
        if (_0x8e22x1b[_0xee2b[3186]](_0x8e22x8) && (_0x8e22xc = _0x8e22x8[_0xee2b[787]]()) && _0x8e22x8[_0xee2b[2122]] && !_0x8e22x8[_0xee2b[3178]]() && Ext[_0xee2b[761]](_0x8e22xc)[_0xee2b[854]](true) && (_0x8e22x8 !== _0x8e22xd || _0x8e22xd[_0xee2b[2123]] === false)) {
          if (_0x8e22x1b[_0xee2b[3180]]) {
            if ((_0x8e22x8[_0xee2b[2933]] = _0x8e22x1b[_0xee2b[3190]](_0x8e22xc)) !== -1) {
              _0x8e22x1 = true;
            }
            _0x8e22x19[_0xee2b[11]](_0x8e22x8);
          } else {
            if (_0x8e22x23[_0xee2b[3021]](_0x8e22x8[_0xee2b[787]]())) {
              _0x8e22x19[_0xee2b[11]](_0x8e22x8);
              break;
            }
          }
        }
      }
    }
    if (_0x8e22x1) {
      Ext[_0xee2b[26]][_0xee2b[1120]](_0x8e22x19, _0x8e22x1b[_0xee2b[3191]]);
    }
    for (_0x8e22x14 = 0, _0x8e22x12 = _0x8e22x19[_0xee2b[4]]; _0x8e22x14 < _0x8e22x12; _0x8e22x14++) {
      _0x8e22x8 = _0x8e22x19[_0x8e22x14];
      if (_0x8e22x1b[_0xee2b[3187]](_0x8e22x13, _0x8e22x8, _0x8e22x1b[_0xee2b[1719]])) {
        if (_0x8e22xb) {
          _0x8e22x1a[_0xee2b[11]](_0x8e22x8);
        } else {
          if (!_0x8e22x10[_0x8e22x8[_0xee2b[388]]]) {
            _0x8e22x17[_0xee2b[11]](_0x8e22x8);
          } else {
            _0x8e22x5[_0xee2b[11]](_0x8e22x8);
          }
          _0x8e22x1b[_0xee2b[3185]][_0x8e22x8[_0xee2b[388]]] = _0x8e22x8;
        }
        if (!_0x8e22x1b[_0xee2b[3180]]) {
          break;
        }
      }
    }
    if (_0x8e22x1b[_0xee2b[1719]]) {
      if (_0x8e22xf[_0xee2b[4]]) {
        _0x8e22xd[_0xee2b[3192]](_0x8e22x23, _0x8e22xf);
        _0x8e22xd[_0xee2b[3193]](_0x8e22x23, _0x8e22xf);
      }
      if (_0x8e22x17[_0xee2b[4]]) {
        _0x8e22xd[_0xee2b[3194]](_0x8e22x23, _0x8e22x17);
      }
      if (_0x8e22x5[_0xee2b[4]]) {
        _0x8e22xd[_0xee2b[3195]](_0x8e22x23, _0x8e22x5);
        _0x8e22xd[_0xee2b[2208]](_0x8e22x23, _0x8e22x5);
      }
      if (_0x8e22x1a[_0xee2b[4]]) {
        _0x8e22xd[_0xee2b[3196]](_0x8e22x23, _0x8e22x1a);
        _0x8e22xd[_0xee2b[3197]](_0x8e22x23, _0x8e22x1a);
      }
    } else {
      for (_0x8e22x14 = 0, _0x8e22x12 = _0x8e22xf[_0xee2b[4]]; _0x8e22x14 < _0x8e22x12; ++_0x8e22x14) {
        _0x8e22xd[_0xee2b[3192]](_0x8e22x23, _0x8e22xf[_0x8e22x14][_0xee2b[388]]);
        _0x8e22xd[_0xee2b[3193]](_0x8e22x23, _0x8e22xf[_0x8e22x14][_0xee2b[388]]);
      }
      for (_0x8e22x14 = 0, _0x8e22x12 = _0x8e22x17[_0xee2b[4]]; _0x8e22x14 < _0x8e22x12; ++_0x8e22x14) {
        _0x8e22xd[_0xee2b[3194]](_0x8e22x23, _0x8e22x17[_0x8e22x14][_0xee2b[388]], _0x8e22x17[_0x8e22x14]);
      }
      for (_0x8e22x14 = 0, _0x8e22x12 = _0x8e22x5[_0xee2b[4]]; _0x8e22x14 < _0x8e22x12; ++_0x8e22x14) {
        _0x8e22xd[_0xee2b[3195]](_0x8e22x23, _0x8e22x5[_0x8e22x14][_0xee2b[388]]);
        _0x8e22xd[_0xee2b[2208]](_0x8e22x23, _0x8e22x5[_0x8e22x14][_0xee2b[388]]);
      }
      for (_0x8e22x14 = 0, _0x8e22x12 = _0x8e22x1a[_0xee2b[4]]; _0x8e22x14 < _0x8e22x12; ++_0x8e22x14) {
        _0x8e22xd[_0xee2b[3196]](_0x8e22x23, _0x8e22x1a[_0x8e22x14][_0xee2b[388]]);
        _0x8e22xd[_0xee2b[3197]](_0x8e22x23, _0x8e22x1a[_0x8e22x14][_0xee2b[388]]);
      }
    }
    if (_0x8e22xb && !_0x8e22x1a[_0xee2b[4]]) {
      _0x8e22xd[_0xee2b[2272]](_0x8e22x23);
    }
  }});
  Ext[_0xee2b[507]](Ext[_0xee2b[2121]].DragSource, {onDragEnter:function(_0x8e22x5, _0x8e22x1, _0x8e22x4) {
    this[_0xee2b[3198]] = _0x8e22x4;
    return this[_0xee2b[9]]([_0x8e22x5, _0x8e22x1]);
  }, beforeDragEnter:function(_0x8e22x5, _0x8e22x4, _0x8e22x1) {
    if (this[_0xee2b[3198]]) {
      _0x8e22x5 = this[_0xee2b[2265]] = this[_0xee2b[3198]];
      delete this[_0xee2b[3198]];
    }
    return this[_0xee2b[9]]([_0x8e22x5, _0x8e22x4, _0x8e22x1]);
  }});
  var _0x8e22x6 = Ext[_0xee2b[2121]][_0xee2b[2074]];
  var _0x8e22x3 = Ext[_0xee2b[2121]][_0xee2b[2158]];
  _0x8e22x3[_0xee2b[3176]] = Ext[_0xee2b[283]][_0xee2b[3200]](_0x8e22x3[_0xee2b[3176]], _0x8e22x6[_0xee2b[3199]], _0x8e22x6);
  _0x8e22x3[_0xee2b[2216]] = Ext[_0xee2b[283]][_0xee2b[3200]](_0x8e22x3[_0xee2b[2216]], _0x8e22x6[_0xee2b[3201]], _0x8e22x6);
}});
Ext[_0xee2b[6]](_0xee2b[3202], {extend:_0xee2b[957], target:_0xee2b[2961], minVersion:_0xee2b[975], overrides:{setPosition:function(_0x8e22x6, _0x8e22x5, _0x8e22x1, _0x8e22x3, _0x8e22x9) {
  var _0x8e22x2 = this;
  if (Ext[_0xee2b[960]] && _0x8e22x1 && (_0x8e22x1[_0xee2b[2211]]() === _0x8e22x1[_0xee2b[3203]] || _0x8e22x1[_0xee2b[2211]]() === _0x8e22x1[_0xee2b[3204]])) {
    var _0x8e22x4 = _0x8e22x2[_0xee2b[3205]];
    if (_0x8e22x1[_0xee2b[829]][_0xee2b[2311]] && _0x8e22x4 && _0x8e22x1[_0xee2b[829]][_0xee2b[3206]]()[_0xee2b[147]](_0x8e22x4[_0xee2b[2963]]) === -1) {
      _0x8e22x1[_0xee2b[829]] = _0x8e22x1[_0xee2b[829]][_0xee2b[2468]];
    }
  }
  return _0x8e22x2[_0xee2b[9]](arguments);
}, onCellClick:function(_0x8e22x5, _0x8e22x6, _0x8e22x1, _0x8e22x4, _0x8e22x9, _0x8e22x2, _0x8e22x3) {
  this[_0xee2b[9]](arguments);
  if (_0x8e22x3[_0xee2b[1780]][_0xee2b[2963]][_0xee2b[3207]] === false) {
    if (_0x8e22x5[_0xee2b[3208]]) {
      if (Ext[_0xee2b[3209]]) {
        _0x8e22x5[_0xee2b[834]][_0xee2b[265]][_0xee2b[3210]]();
      } else {
        if (!this[_0xee2b[3205]]) {
          _0x8e22x5[_0xee2b[265]][_0xee2b[3210]]();
        }
      }
    }
  }
}}});
Ext[_0xee2b[6]](_0xee2b[3211], {requires:[_0xee2b[1950]], view:null, showAllDayHeader:false, constructor:function(_0x8e22x3) {
  Ext[_0xee2b[8]](this, _0x8e22x3);
}, getElementsFromEventRecord:function(_0x8e22x4, _0x8e22x9, _0x8e22x2, _0x8e22x5) {
  var _0x8e22x1 = this, _0x8e22x6 = _0x8e22x1[_0xee2b[829]], _0x8e22x7, _0x8e22x3;
  _0x8e22x5 = _0x8e22x5 || false;
  if (_0x8e22x2 !== null && _0x8e22x2 !== undefined) {
    _0x8e22x7 = _0xee2b[2571] + _0x8e22x6[_0xee2b[2560]] + _0x8e22x4[_0xee2b[1049]] + _0xee2b[2638] + _0x8e22x2 + _0xee2b[2572];
  } else {
    _0x8e22x7 = _0xee2b[2571] + _0x8e22x6[_0xee2b[2560]] + _0x8e22x4[_0xee2b[1049]] + _0xee2b[3212];
  }
  _0x8e22x3 = _0x8e22x6[_0xee2b[787]]()[_0xee2b[2573]](_0x8e22x7, _0x8e22x5);
  if (_0x8e22x1[_0xee2b[2878]] && _0x8e22x4[_0xee2b[1611]]()) {
    [][_0xee2b[11]][_0xee2b[8]](_0x8e22x3, _0x8e22x1[_0xee2b[829]][_0xee2b[2467]][_0xee2b[2544]][_0xee2b[808]]()[_0xee2b[2191]](_0x8e22x4, _0x8e22x9, _0x8e22x2, _0x8e22x5));
  }
  return _0x8e22x3;
}, getColumnsBy:function(_0x8e22x6, _0x8e22x2) {
  var _0x8e22x5 = this[_0xee2b[829]][_0xee2b[1818]][_0xee2b[1848]][_0xee2b[3213]]();
  var _0x8e22x3 = [];
  for (var _0x8e22x4 = 0; _0x8e22x4 < _0x8e22x5[_0xee2b[4]]; _0x8e22x4++) {
    if (_0x8e22x6[_0xee2b[293]](this, _0x8e22x5[_0x8e22x4])) {
      if (_0x8e22x2 !== true) {
        _0x8e22x3[_0xee2b[11]](_0x8e22x5[_0x8e22x4]);
      } else {
        _0x8e22x3[_0xee2b[11]]({column:_0x8e22x5[_0x8e22x4], index:_0x8e22x4});
      }
    }
  }
  return _0x8e22x3;
}, getColumnsForDateRange:function(_0x8e22x3, _0x8e22x6) {
  return this[_0xee2b[3214]](function(_0x8e22x4) {
    return !(_0x8e22x3[_0xee2b[713]]() <= _0x8e22x4[_0xee2b[179]] || _0x8e22x3[_0xee2b[712]]() >= _0x8e22x4[_0xee2b[771]]);
  }, _0x8e22x6);
}, getColumnEvents:function(_0x8e22x6) {
  var _0x8e22x4 = this, _0x8e22x3 = [];
  this[_0xee2b[829]][_0xee2b[696]]()[_0xee2b[25]](function(_0x8e22x5) {
    if (!(_0x8e22x4[_0xee2b[2878]] && _0x8e22x5[_0xee2b[1611]]()) && !(_0x8e22x5[_0xee2b[713]]() <= _0x8e22x6[_0xee2b[179]] || _0x8e22x5[_0xee2b[712]]() >= _0x8e22x6[_0xee2b[771]])) {
      _0x8e22x3[_0xee2b[11]](_0x8e22x5);
    }
  });
  return _0x8e22x3;
}, getColumnsByResource:function(_0x8e22x6, _0x8e22x3) {
  return this[_0xee2b[3214]](function(_0x8e22x4) {
    return _0x8e22x4[_0xee2b[179]] == _0x8e22x6[_0xee2b[179]];
  }, _0x8e22x3)[0];
}, translateToScheduleCoordinate:function(_0x8e22x6) {
  var _0x8e22x3 = this[_0xee2b[829]];
  if (Ext[_0xee2b[307]](_0x8e22x6)) {
    return [_0x8e22x6[0] - _0x8e22x3[_0xee2b[787]]()[_0xee2b[809]]() + _0x8e22x3[_0xee2b[3120]](), _0x8e22x6[1] - _0x8e22x3[_0xee2b[2574]]() + _0x8e22x3[_0xee2b[1922]]()];
  } else {
    return _0x8e22x6 - _0x8e22x3[_0xee2b[2574]]() + _0x8e22x3[_0xee2b[1922]]();
  }
}, translateToPageCoordinate:function(_0x8e22x4) {
  var _0x8e22x3 = this[_0xee2b[829]];
  var _0x8e22x6 = _0x8e22x3[_0xee2b[787]]();
  if (Ext[_0xee2b[307]](_0x8e22x4)) {
    return [_0x8e22x4[0] + _0x8e22x6[_0xee2b[809]]() - _0x8e22x3[_0xee2b[3120]](), _0x8e22x4[1] + _0x8e22x3[_0xee2b[2574]]() - _0x8e22x3[_0xee2b[1922]]()];
  } else {
    return _0x8e22x4 + _0x8e22x3[_0xee2b[2574]]() - _0x8e22x3[_0xee2b[1922]]();
  }
}, getDateFromXY:function(_0x8e22x4, _0x8e22x6, _0x8e22x3) {
  var _0x8e22x5 = _0x8e22x4;
  if (!_0x8e22x3) {
    _0x8e22x5 = this[_0xee2b[2575]](_0x8e22x5);
  }
  return this[_0xee2b[829]][_0xee2b[810]][_0xee2b[2576]](_0x8e22x5, _0x8e22x6);
}, getEventRenderData:function(_0x8e22x3, _0x8e22x6, _0x8e22x7) {
  var _0x8e22xa = _0x8e22x3[_0xee2b[712]](), _0x8e22x9 = _0x8e22x3[_0xee2b[713]](), _0x8e22xd = this[_0xee2b[829]], _0x8e22x4 = _0x8e22xd[_0xee2b[1818]][_0xee2b[1848]][_0xee2b[3213]](), _0x8e22x1 = _0x8e22x4[_0x8e22x7][_0xee2b[179]], _0x8e22x10 = _0x8e22x4[_0x8e22x7][_0xee2b[771]], _0x8e22x8 = Math;
  var _0x8e22x2 = Math[_0xee2b[424]](_0x8e22xd[_0xee2b[1895]](Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[715]](_0x8e22xa, _0x8e22x1)));
  var _0x8e22xe = Math[_0xee2b[424]](_0x8e22xd[_0xee2b[810]][_0xee2b[1796]](Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[203]](_0x8e22x9, _0x8e22x10), true));
  var _0x8e22x5;
  if (_0x8e22xe === 0) {
    _0x8e22xe = _0x8e22xd[_0xee2b[341]]()[_0xee2b[1466]]() * _0x8e22xd[_0xee2b[2864]]();
  }
  _0x8e22x5 = {top:_0x8e22x8[_0xee2b[715]](0, _0x8e22x8[_0xee2b[203]](_0x8e22x2, _0x8e22xe) - _0x8e22xd[_0xee2b[2577]]), height:_0x8e22x8[_0xee2b[715]](1, _0x8e22x8[_0xee2b[1524]](_0x8e22x2 - _0x8e22xe))};
  _0x8e22x5[_0xee2b[179]] = _0x8e22xa;
  _0x8e22x5[_0xee2b[771]] = _0x8e22x9;
  _0x8e22x5[_0xee2b[2275]] = _0x8e22xa < _0x8e22x1;
  _0x8e22x5[_0xee2b[2277]] = _0x8e22x9 > _0x8e22x10;
  return _0x8e22x5;
}, getScheduleRegion:function(_0x8e22x1, _0x8e22x4) {
  var _0x8e22x6 = this[_0xee2b[829]], _0x8e22x7 = _0x8e22x1 ? this[_0xee2b[3215]](_0x8e22x1)[_0xee2b[1945]]() : _0x8e22x6[_0xee2b[2579]](), _0x8e22x3 = this[_0xee2b[2580]](0), _0x8e22x2 = this[_0xee2b[2580]](_0x8e22x6[_0xee2b[341]]()[_0xee2b[1466]]() * _0x8e22x6[_0xee2b[2864]]()), _0x8e22x9 = _0x8e22x7[_0xee2b[1354]] + _0x8e22x6[_0xee2b[1800]], _0x8e22x5 = _0x8e22x7[_0xee2b[867]] - _0x8e22x6[_0xee2b[1800]];
  return new Ext[_0xee2b[49]].Region(Math[_0xee2b[203]](_0x8e22x3, _0x8e22x2), _0x8e22x5, Math[_0xee2b[715]](_0x8e22x3, _0x8e22x2), _0x8e22x9);
}, getWeekViewColumnWidth:function() {
  return this[_0xee2b[829]][_0xee2b[810]][_0xee2b[2733]];
}, getResourceRegion:function(_0x8e22x7, _0x8e22x6, _0x8e22x9) {
  var _0x8e22x8 = this[_0xee2b[829]], _0x8e22x2 = _0x8e22x8[_0xee2b[1007]]()[_0xee2b[147]](_0x8e22x7) * this[_0xee2b[3216]](), _0x8e22xa = _0x8e22x8[_0xee2b[1795]][_0xee2b[697]](), _0x8e22xe = _0x8e22x8[_0xee2b[1795]][_0xee2b[698]](), _0x8e22x3 = _0x8e22x6 ? Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[715]](_0x8e22xa, _0x8e22x6) : _0x8e22xa, _0x8e22x5 = _0x8e22x9 ? Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[203]](_0x8e22xe, _0x8e22x9) : _0x8e22xe, _0x8e22x1 = Math[_0xee2b[715]](0, _0x8e22x8[_0xee2b[1895]](_0x8e22x3) - 
  _0x8e22x8[_0xee2b[2584]]), _0x8e22x10 = _0x8e22x8[_0xee2b[1895]](_0x8e22x5) - _0x8e22x8[_0xee2b[2584]], _0x8e22x4 = _0x8e22x2 + _0x8e22x8[_0xee2b[2583]], _0x8e22xd = _0x8e22x2 + this[_0xee2b[3216]]() - _0x8e22x8[_0xee2b[2583]];
  return new Ext[_0xee2b[49]].Region(Math[_0xee2b[203]](_0x8e22x1, _0x8e22x10), _0x8e22xd, Math[_0xee2b[715]](_0x8e22x1, _0x8e22x10), _0x8e22x4);
}, columnRenderer:function(_0x8e22x4, _0x8e22xc, _0x8e22x7, _0x8e22x8, _0x8e22xf) {
  var _0x8e22xd = this[_0xee2b[829]];
  var _0x8e22x6 = _0xee2b[27];
  if (_0x8e22x8 === 0) {
    var _0x8e22xe, _0x8e22x9, _0x8e22x1, _0x8e22x5;
    _0x8e22xe = [];
    _0x8e22x9 = this[_0xee2b[3217]](_0x8e22xc[_0xee2b[2963]]);
    for (_0x8e22x1 = 0, _0x8e22x5 = _0x8e22x9[_0xee2b[4]]; _0x8e22x1 < _0x8e22x5; _0x8e22x1++) {
      var _0x8e22x3 = _0x8e22x9[_0x8e22x1], _0x8e22x2 = _0x8e22xd[_0xee2b[2585]](_0x8e22x3, _0x8e22x3[_0xee2b[1427]]()[0], _0x8e22xf);
      _0x8e22x2 && _0x8e22xe[_0xee2b[11]](_0x8e22x2);
    }
    if (_0x8e22xc[_0xee2b[2963]][_0xee2b[262]] && this[_0xee2b[3216]]() !== _0x8e22xc[_0xee2b[2963]][_0xee2b[793]]()) {
      this[_0xee2b[2833]](_0x8e22xc[_0xee2b[2963]][_0xee2b[793]](), true);
    }
    _0x8e22xd[_0xee2b[2587]][_0xee2b[1932]][_0xee2b[1788]](_0x8e22xe, this[_0xee2b[3216]]() - 2 * _0x8e22xd[_0xee2b[1800]] - _0x8e22xd[_0xee2b[2583]]);
    _0x8e22x6 = _0xee2b[2588] + _0x8e22xd[_0xee2b[2589]][_0xee2b[8]](_0x8e22xe);
  }
  if (_0x8e22xf % 2 === 1) {
    _0x8e22xc[_0xee2b[477]] = (_0x8e22xc[_0xee2b[477]] || _0xee2b[27]) + _0xee2b[60] + _0x8e22xd[_0xee2b[2590]];
    _0x8e22xc[_0xee2b[2591]] = (_0x8e22xc[_0xee2b[2591]] || _0xee2b[27]) + _0xee2b[60] + _0x8e22xd[_0xee2b[2590]];
  }
  return _0x8e22x6;
}, resolveResource:function(_0x8e22x5) {
  var _0x8e22x3 = this[_0xee2b[829]];
  _0x8e22x5 = Ext[_0xee2b[761]](_0x8e22x5)[_0xee2b[2592]](_0x8e22x3[_0xee2b[2594]]) ? _0x8e22x5 : Ext[_0xee2b[761]](_0x8e22x5)[_0xee2b[694]](_0x8e22x3[_0xee2b[2594]]);
  if (_0x8e22x5) {
    var _0x8e22x2 = _0x8e22x5[_0xee2b[758]] ? _0x8e22x5[_0xee2b[758]] : _0x8e22x5;
    var _0x8e22x6 = 0;
    _0x8e22x6 = Ext[_0xee2b[26]][_0xee2b[147]](Array[_0xee2b[139]][_0xee2b[191]][_0xee2b[293]](_0x8e22x2[_0xee2b[96]][_0xee2b[375]]), _0x8e22x2);
    if (_0x8e22x6 >= 0) {
      var _0x8e22x4 = _0x8e22x3[_0xee2b[1818]][_0xee2b[1848]][_0xee2b[3213]]()[_0x8e22x6];
      return {start:_0x8e22x4[_0xee2b[179]], end:_0x8e22x4[_0xee2b[771]]};
    }
  }
}, onEventUpdate:function(_0x8e22x6, _0x8e22x4) {
  if (!this[_0xee2b[829]][_0xee2b[262]] || !this[_0xee2b[829]][_0xee2b[1848]][_0xee2b[266]][_0xee2b[55]](0)[_0xee2b[262]]) {
    return;
  }
  this[_0xee2b[2596]](_0x8e22x4);
  var _0x8e22x3 = this[_0xee2b[829]];
  var _0x8e22x5 = _0x8e22x3[_0xee2b[2256]]();
  _0x8e22x5[_0xee2b[3218]](_0x8e22x4, function(_0x8e22x2) {
    _0x8e22x3[_0xee2b[2598]](_0x8e22x2);
  });
}, onEventAdd:function(_0x8e22x6, _0x8e22x4) {
  if (!this[_0xee2b[829]][_0xee2b[262]] || !this[_0xee2b[829]][_0xee2b[1848]][_0xee2b[266]][_0xee2b[55]](0)[_0xee2b[262]]) {
    return;
  }
  var _0x8e22x3 = this[_0xee2b[829]];
  if (_0x8e22x4[_0xee2b[4]] === 1) {
    this[_0xee2b[2596]](_0x8e22x4[0]);
  } else {
    _0x8e22x3[_0xee2b[2599]]();
  }
}, onEventRemove:function(_0x8e22x6, _0x8e22x4) {
  if (!this[_0xee2b[829]][_0xee2b[262]] || !this[_0xee2b[829]][_0xee2b[1848]][_0xee2b[266]][_0xee2b[55]](0)[_0xee2b[262]]) {
    return;
  }
  var _0x8e22x3 = this[_0xee2b[829]];
  if (_0x8e22x4[_0xee2b[4]] === 1) {
    Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x3[_0xee2b[2191]](_0x8e22x4[0], undefined, undefined, true), function(_0x8e22x5) {
      Ext[_0xee2b[761]](_0x8e22x5)[_0xee2b[218]]();
    });
    this[_0xee2b[2595]](_0x8e22x4[0]);
  } else {
    _0x8e22x3[_0xee2b[2599]]();
  }
}, relayoutRenderedEvents:function(_0x8e22x6) {
  var _0x8e22x4 = this, _0x8e22x3 = _0x8e22x4[_0xee2b[3219]](_0x8e22x6, true);
  Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x3, function(_0x8e22x5) {
    _0x8e22x4[_0xee2b[3220]](_0x8e22x5[_0xee2b[2963]], _0x8e22x5[_0xee2b[68]]);
  });
}, renderSingle:function(_0x8e22x2) {
  var _0x8e22x3 = this[_0xee2b[829]];
  Ext[_0xee2b[26]][_0xee2b[25]](this[_0xee2b[2191]](_0x8e22x2, undefined, undefined, true), function(_0x8e22x9) {
    if (_0x8e22x3[_0xee2b[265]][_0xee2b[3221]](_0x8e22x9)) {
      Ext[_0xee2b[761]](_0x8e22x9)[_0xee2b[218]]();
    }
  });
  var _0x8e22x5 = _0x8e22x2[_0xee2b[52]] || {};
  var _0x8e22x6 = Sch[_0xee2b[49]][_0xee2b[703]];
  var _0x8e22x1 = new Sch[_0xee2b[327]].Range({StartDate:_0x8e22x6[_0xee2b[203]](_0x8e22x5[_0xee2b[1199]] || _0x8e22x2[_0xee2b[712]](), _0x8e22x2[_0xee2b[712]]()), EndDate:_0x8e22x6[_0xee2b[715]](_0x8e22x5[_0xee2b[1200]] || _0x8e22x2[_0xee2b[713]](), _0x8e22x2[_0xee2b[713]]())});
  var _0x8e22x4 = this[_0xee2b[3219]](_0x8e22x1);
  Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x4, function(_0x8e22x8) {
    var _0x8e22xa = _0x8e22x8[_0xee2b[3222]]();
    var _0x8e22x7 = this[_0xee2b[3217]](_0x8e22x8);
    var _0x8e22x9 = Ext[_0xee2b[26]][_0xee2b[41]](_0x8e22x7, function(_0x8e22xd) {
      if (_0x8e22xd === _0x8e22x2) {
        return _0x8e22x3[_0xee2b[2585]](_0x8e22x2, _0x8e22x2[_0xee2b[1427]]()[0], _0x8e22xa);
      } else {
        return {start:_0x8e22xd[_0xee2b[712]]() < _0x8e22x8[_0xee2b[179]] ? _0x8e22x8[_0xee2b[179]] : _0x8e22xd[_0xee2b[712]](), end:_0x8e22xd[_0xee2b[713]]() > _0x8e22x8[_0xee2b[771]] ? _0x8e22x8[_0xee2b[771]] : _0x8e22xd[_0xee2b[713]](), event:_0x8e22xd};
      }
    });
    _0x8e22x3[_0xee2b[2587]][_0xee2b[1932]][_0xee2b[1788]](_0x8e22x9, _0x8e22x8[_0xee2b[793]]() - 2 * _0x8e22x3[_0xee2b[1800]] - _0x8e22x3[_0xee2b[2583]]);
    Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x9, function(_0x8e22xe) {
      if (_0x8e22xe[_0xee2b[1440]] === _0x8e22x2) {
        var _0x8e22x10 = _0x8e22x3[_0xee2b[2578]](0, _0x8e22xa);
        if (_0x8e22x10) {
          if (!Ext[_0xee2b[723]][_0xee2b[722]]) {
            _0x8e22x10 = Ext[_0xee2b[761]](_0x8e22x10)[_0xee2b[572]]();
          }
          _0x8e22x3[_0xee2b[2589]][_0xee2b[384]](_0x8e22x10, [_0x8e22xe]);
        }
      } else {
        var _0x8e22xd = _0x8e22x3[_0xee2b[2191]](_0x8e22xe[_0xee2b[1440]], null, _0x8e22xa)[0];
        if (_0x8e22xd) {
          _0x8e22xd[_0xee2b[2051]]({left:_0x8e22xe[_0xee2b[1354]] + _0xee2b[804], width:Math[_0xee2b[715]](_0x8e22xe[_0xee2b[773]], 0) + _0xee2b[804]});
        }
      }
    });
  }, this);
}, repaintEventsForColumn:function(_0x8e22x1, _0x8e22xf) {
  var _0x8e22xc = this;
  var _0x8e22x11 = _0x8e22xc[_0xee2b[3217]](_0x8e22x1);
  var _0x8e22xb = _0x8e22xc[_0xee2b[829]];
  var _0x8e22x8 = [], _0x8e22xd, _0x8e22x9, _0x8e22x3, _0x8e22x5, _0x8e22x4, _0x8e22x7;
  for (_0x8e22xd = 0, _0x8e22x9 = _0x8e22x11[_0xee2b[4]]; _0x8e22xd < _0x8e22x9; _0x8e22xd++) {
    _0x8e22x3 = _0x8e22x11[_0x8e22xd];
    _0x8e22x5 = _0x8e22xb[_0xee2b[2191]](_0x8e22x3, undefined, undefined, true)[0];
    if (!_0x8e22x5) {
      return;
    }
    var _0x8e22xe = _0x8e22x5[_0xee2b[388]][_0xee2b[496]](_0xee2b[1131]);
    _0x8e22xe[_0xee2b[204]]();
    _0x8e22x4 = _0x8e22x3[_0xee2b[712]]();
    _0x8e22x7 = _0x8e22x3[_0xee2b[713]]();
    _0x8e22x8[_0xee2b[11]]({start:_0x8e22x4 < _0x8e22x1[_0xee2b[179]] ? _0x8e22x1[_0xee2b[179]] : _0x8e22x4, end:_0x8e22x7 > _0x8e22x1[_0xee2b[771]] ? _0x8e22x1[_0xee2b[771]] : _0x8e22x7, event:_0x8e22x3, id:_0x8e22xe[_0xee2b[73]](_0xee2b[1131])});
  }
  _0x8e22xb[_0xee2b[2587]][_0xee2b[1932]][_0xee2b[1788]](_0x8e22x8, _0x8e22x1[_0xee2b[793]]() - 2 * _0x8e22xb[_0xee2b[1800]] - _0x8e22xb[_0xee2b[2583]]);
  var _0x8e22x6 = _0x8e22xb[_0xee2b[2515]](0);
  for (_0x8e22xd = 0; _0x8e22xd < _0x8e22x8[_0xee2b[4]]; _0x8e22xd++) {
    _0x8e22x3 = _0x8e22x8[_0x8e22xd];
    var _0x8e22x2 = _0xee2b[3223] + (_0x8e22xf + 1) + _0xee2b[3224] + _0x8e22x3[_0xee2b[388]] + _0xee2b[2572];
    _0x8e22x5 = Ext[_0xee2b[758]][_0xee2b[2932]][_0xee2b[2931]](_0x8e22x2, _0x8e22x6);
    _0x8e22x5 && Ext[_0xee2b[761]](_0x8e22x5)[_0xee2b[2051]]({left:_0x8e22x3[_0xee2b[1354]] + _0xee2b[804], width:Math[_0xee2b[715]](_0x8e22x3[_0xee2b[773]], 0) + _0xee2b[804]});
  }
}, getTimeSpanRegion:function(_0x8e22x3, _0x8e22x5) {
  var _0x8e22x1 = this[_0xee2b[829]], _0x8e22x4 = _0x8e22x1[_0xee2b[1895]](_0x8e22x3), _0x8e22x9 = _0x8e22x5 ? _0x8e22x1[_0xee2b[810]][_0xee2b[1796]](_0x8e22x5, true) : _0x8e22x4;
  var _0x8e22x6 = this[_0xee2b[3214]](function(_0x8e22x8) {
    return _0x8e22x8[_0xee2b[179]] <= _0x8e22x3 && _0x8e22x8[_0xee2b[771]] > _0x8e22x3;
  })[0];
  var _0x8e22x2 = this[_0xee2b[3214]](function(_0x8e22x8) {
    return _0x8e22x8[_0xee2b[179]] < _0x8e22x5 && _0x8e22x8[_0xee2b[771]] >= _0x8e22x5;
  })[0];
  if (!_0x8e22x6 || !_0x8e22x2 || !_0x8e22x6[_0xee2b[262]] || !_0x8e22x2[_0xee2b[262]]) {
    return new Ext[_0xee2b[49]].Region(-1, 0, -1, 0);
  }
  var _0x8e22xa = this[_0xee2b[2575]]([_0x8e22x6[_0xee2b[809]](), 0]);
  var _0x8e22x7 = this[_0xee2b[2575]]([_0x8e22x2 ? _0x8e22x2[_0xee2b[1945]]()[_0xee2b[867]] : _0x8e22x6[_0xee2b[793]]() + _0x8e22xa[0], 0]);
  return new Ext[_0xee2b[49]].Region(Math[_0xee2b[203]](_0x8e22x4, _0x8e22x9), _0x8e22x7[0], Math[_0xee2b[715]](_0x8e22x4, _0x8e22x9), _0x8e22xa[0]);
}, getStartEndDatesFromRegion:function(_0x8e22x4, _0x8e22x6) {
  var _0x8e22x3 = this[_0xee2b[829]][_0xee2b[807]]([_0x8e22x4[_0xee2b[1354]], _0x8e22x4[_0xee2b[686]]], _0x8e22x6), _0x8e22x5 = this[_0xee2b[829]][_0xee2b[807]]([_0x8e22x4[_0xee2b[1354]], _0x8e22x4[_0xee2b[754]]], _0x8e22x6);
  if (_0x8e22x3 && _0x8e22x5) {
    return {start:_0x8e22x3, end:_0x8e22x5};
  } else {
    return null;
  }
}, setColumnWidth:function(_0x8e22x4, _0x8e22x6) {
  var _0x8e22x3 = this[_0xee2b[829]];
  _0x8e22x3[_0xee2b[2733]] = _0x8e22x4;
  _0x8e22x3[_0xee2b[1858]]()[_0xee2b[2607]](_0x8e22x4, _0x8e22x6);
}, getVisibleDateRange:function() {
  var _0x8e22x2 = this[_0xee2b[829]];
  if (!_0x8e22x2[_0xee2b[262]]) {
    return null;
  }
  var _0x8e22x4 = _0x8e22x2[_0xee2b[1966]](), _0x8e22x6 = _0x8e22x2[_0xee2b[2608]](), _0x8e22x5 = _0x8e22x2[_0xee2b[2579]](), _0x8e22x1 = _0x8e22x2[_0xee2b[1795]][_0xee2b[698]]();
  if (_0x8e22x5[_0xee2b[754]] - _0x8e22x5[_0xee2b[686]] < _0x8e22x6) {
    var _0x8e22x3 = _0x8e22x2[_0xee2b[1795]][_0xee2b[697]]();
    return {startDate:_0x8e22x3, endDate:_0x8e22x1};
  }
  return {startDate:_0x8e22x2[_0xee2b[807]](_0x8e22x4[_0xee2b[686]], null, true), endDate:_0x8e22x2[_0xee2b[807]](_0x8e22x4[_0xee2b[686]] + _0x8e22x6, null, true) || _0x8e22x1};
}, getItemBox:function(_0x8e22x3) {
  return null;
}, getConnectorStartSide:function(_0x8e22x3) {
  return _0xee2b[686];
}, getConnectorEndSide:function(_0x8e22x3) {
  return _0xee2b[754];
}});
Ext[_0xee2b[6]](_0xee2b[3225], {extend:_0xee2b[2613], mixins:[_0xee2b[665]], requires:[_0xee2b[3157], _0xee2b[3160], _0xee2b[3202], _0xee2b[2960], _0xee2b[2042], _0xee2b[2278], _0xee2b[2396], _0xee2b[485], _0xee2b[469], _0xee2b[3211], _0xee2b[3226], _0xee2b[717]], eventResizeHandles:_0xee2b[771], dndValidatorFn:Ext[_0xee2b[688]], resizeValidatorFn:Ext[_0xee2b[688]], createValidatorFn:Ext[_0xee2b[688]], weekViewClass:_0xee2b[3211], lockedGridDependsOnSchedule:null, _initializeSchedulerView:function() {
  var _0x8e22x3 = this;
  _0x8e22x3[_0xee2b[9]](arguments);
  if (!_0x8e22x3[_0xee2b[2560]]) {
    throw _0xee2b[3227];
  }
  _0x8e22x3[_0xee2b[149]]({destroy:_0x8e22x3[_0xee2b[3228]], afterrender:_0x8e22x3[_0xee2b[3229]], itemupdate:_0x8e22x3[_0xee2b[3230]], scope:_0x8e22x3});
  _0x8e22x3[_0xee2b[1795]][_0xee2b[149]](_0xee2b[1733], _0x8e22x3[_0xee2b[3231]], _0x8e22x3);
  _0x8e22x3[_0xee2b[149]]({resourcestorechange:_0x8e22x3[_0xee2b[3231]], assignmentstorechange:_0x8e22x3[_0xee2b[3231]], eventstorechange:_0x8e22x3[_0xee2b[3231]], scope:_0x8e22x3});
}, inheritables:function() {
  return {loadingText:this.L(_0xee2b[3232]), overItemCls:_0xee2b[27], trackOver:false, selectedItemCls:_0xee2b[27], setReadOnly:function(_0x8e22x6) {
    var _0x8e22x3 = this;
    if (_0x8e22x3[_0xee2b[3233]]) {
      _0x8e22x3[_0xee2b[3233]][_0xee2b[253]](_0x8e22x6);
    }
    _0x8e22x3[_0xee2b[9]](arguments);
  }, repaintEventsForResource:function(_0x8e22x2, _0x8e22x4) {
    var _0x8e22x5 = this, _0x8e22x1 = _0x8e22x5[_0xee2b[1828]](), _0x8e22x3 = _0x8e22x1 ? _0x8e22x5[_0xee2b[147]](_0x8e22x2) : 0;
    if (_0x8e22x1) {
      _0x8e22x5[_0xee2b[2587]][_0xee2b[1931]][_0xee2b[1226]](_0x8e22x2);
    }
    if (_0x8e22x3 >= 0) {
      Ext[_0xee2b[2839]]();
      if (_0x8e22x1) {
        _0x8e22x5[_0xee2b[2323]](_0x8e22x2);
        if (_0x8e22x5[_0xee2b[3234]]) {
          _0x8e22x5[_0xee2b[2468]][_0xee2b[2323]](_0x8e22x2);
        }
      } else {
        _0x8e22x5[_0xee2b[2323]](_0x8e22x3);
      }
      Ext[_0xee2b[2841]]();
      if (_0x8e22x4) {
        var _0x8e22x9 = _0x8e22x5[_0xee2b[2256]]();
        var _0x8e22x6 = _0x8e22x5[_0xee2b[696]]()[_0xee2b[699]](_0x8e22x2);
        Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x6, function(_0x8e22x7) {
          _0x8e22x9[_0xee2b[3218]](_0x8e22x7, function(_0x8e22xa) {
            _0x8e22x5[_0xee2b[2598]](_0x8e22xa, true);
          });
        });
      }
    }
  }, repaintAllEvents:function() {
    if (this[_0xee2b[1828]]()) {
      this[_0xee2b[2668]]();
    } else {
      this[_0xee2b[2323]](0);
    }
  }, handleScheduleEvent:function(_0x8e22x9) {
    var _0x8e22x3 = _0x8e22x9[_0xee2b[2033]](_0xee2b[495] + this[_0xee2b[2620]], 3), _0x8e22x8 = !_0x8e22x3 && _0x8e22x9[_0xee2b[2033]](_0xee2b[495] + this[_0xee2b[2052]], 3);
    if (_0x8e22x8) {
      var _0x8e22xd = this[_0xee2b[2035]](_0x8e22x9, _0xee2b[424]);
      var _0x8e22xa = this[_0xee2b[2850]](_0x8e22x8);
      var _0x8e22x1 = this[_0xee2b[147]](_0x8e22xa);
      var _0x8e22x6 = null;
      if (!this[_0xee2b[2004]]) {
        if (this[_0xee2b[1828]]()) {
          _0x8e22x6 = this[_0xee2b[2851]](_0x8e22xa);
        } else {
          var _0x8e22x4 = _0x8e22x9[_0xee2b[2033]](this[_0xee2b[2594]], 5);
          if (_0x8e22x4) {
            var _0x8e22x7 = typeof _0x8e22x4[_0xee2b[3235]] == _0xee2b[1135] ? _0x8e22x4[_0xee2b[3235]] : _0x8e22x4[_0xee2b[777]](_0xee2b[3236]);
            var _0x8e22x5 = this[_0xee2b[1848]][_0xee2b[3213]]()[_0x8e22x7];
            _0x8e22x6 = _0x8e22x5 && _0x8e22x5[_0xee2b[327]];
          }
        }
      }
      if (_0x8e22x9[_0xee2b[249]][_0xee2b[147]](_0xee2b[3237]) >= 0) {
        this[_0xee2b[180]](_0xee2b[1497] + _0x8e22x9[_0xee2b[249]], this, _0x8e22x9);
      } else {
        this[_0xee2b[180]](_0xee2b[1497] + _0x8e22x9[_0xee2b[249]], this, _0x8e22xd, _0x8e22x1, _0x8e22x6, _0x8e22x9);
      }
    }
  }, onEventDataRefresh:function() {
    this[_0xee2b[3231]]();
    this[_0xee2b[9]](arguments);
  }, onUnbindStore:function(_0x8e22x3) {
    _0x8e22x3[_0xee2b[152]]({refresh:this[_0xee2b[3231]], clear:this[_0xee2b[3231]], load:this[_0xee2b[3231]], scope:this});
    this[_0xee2b[9]](arguments);
  }, bindStore:function(_0x8e22x3) {
    _0x8e22x3 && _0x8e22x3[_0xee2b[149]]({refresh:this[_0xee2b[3231]], clear:this[_0xee2b[3231]], load:this[_0xee2b[3231]], scope:this});
    this[_0xee2b[9]](arguments);
  }, refreshKeepingScroll:function() {
    if (this[_0xee2b[262]]) {
      this[_0xee2b[2468]][_0xee2b[2668]]();
      this[_0xee2b[9]](arguments);
    }
  }};
}, getEventSelectionModel:function() {
  var _0x8e22x3 = this, _0x8e22x6;
  if (_0x8e22x3[_0xee2b[3238]] && _0x8e22x3[_0xee2b[3238]][_0xee2b[3239]]) {
    return _0x8e22x3[_0xee2b[3238]];
  }
  if (typeof _0x8e22x3[_0xee2b[3238]] === _0xee2b[308]) {
    _0x8e22x3[_0xee2b[3238]] = {type:_0x8e22x3[_0xee2b[3238]]};
  }
  if (_0x8e22x3[_0xee2b[3240]]) {
    _0x8e22x6 = _0xee2b[3241];
  } else {
    if (_0x8e22x3[_0xee2b[3242]]) {
      _0x8e22x6 = _0xee2b[3243];
    } else {
      _0x8e22x6 = _0xee2b[3244];
    }
  }
  _0x8e22x3[_0xee2b[3238]] = Ext[_0xee2b[3251]][_0xee2b[3250]](Ext[_0xee2b[8]]({type:_0x8e22x3[_0xee2b[3245]] || (_0x8e22x3[_0xee2b[696]]()[_0xee2b[1051]]() ? _0xee2b[3246] : _0xee2b[3247]), mode:_0x8e22x6, allowDeselect:_0x8e22x3[_0xee2b[3248]] || _0x8e22x3[_0xee2b[3242]], locked:_0x8e22x3[_0xee2b[3249]]}, _0x8e22x3[_0xee2b[3238]]));
  return _0x8e22x3[_0xee2b[3238]];
}, _afterRender:function() {
  this[_0xee2b[1407]](this[_0xee2b[1071]], true);
  this[_0xee2b[2256]]()[_0xee2b[3252]](this);
  this[_0xee2b[3253]]();
  this[_0xee2b[3254]]();
  var _0x8e22x3 = this[_0xee2b[1848]][_0xee2b[2399]];
  if (_0x8e22x3) {
    _0x8e22x3[_0xee2b[3255]] = Ext[_0xee2b[283]][_0xee2b[3200]](_0x8e22x3[_0xee2b[3255]], this[_0xee2b[3256]], this);
  }
  this[_0xee2b[149]](_0xee2b[3257], function() {
    this[_0xee2b[3104]] = null;
  });
}, _destroy:function() {
  this[_0xee2b[1407]](null);
}, clearRowHeightCache:function() {
  if (this[_0xee2b[1828]]()) {
    this[_0xee2b[2587]][_0xee2b[1931]][_0xee2b[1226]]();
  }
}, configureFunctionality:function() {
  var _0x8e22x4 = this, _0x8e22x6 = _0x8e22x4[_0xee2b[2077]] || _0x8e22x4;
  if (_0x8e22x4[_0xee2b[2622]] !== _0xee2b[764] && Sch[_0xee2b[822]][_0xee2b[3258]]) {
    _0x8e22x4[_0xee2b[3259]] = new Sch[_0xee2b[822]].ResizeZone(Ext[_0xee2b[330]]({schedulerView:_0x8e22x4, validatorFn:function(_0x8e22x1, _0x8e22x2, _0x8e22x5, _0x8e22x9) {
      if (!(_0x8e22x1 instanceof Sch[_0xee2b[327]][_0xee2b[606]])) {
        _0x8e22x1 = null;
      }
      return (_0x8e22x4[_0xee2b[3260]] || _0x8e22x4[_0xee2b[2655]](_0x8e22x5, _0x8e22x9, _0x8e22x2, _0x8e22x1)) && _0x8e22x4[_0xee2b[3261]][_0xee2b[8]](_0x8e22x6, arguments);
    }, validatorFnScope:_0x8e22x4}, _0x8e22x4[_0xee2b[3262]] || {}));
  }
  if (_0x8e22x4[_0xee2b[3263]] !== false && Sch[_0xee2b[822]][_0xee2b[3264]]) {
    var _0x8e22x3 = this[_0xee2b[2467]][_0xee2b[3266]](_0xee2b[3265]);
    _0x8e22x4[_0xee2b[3267]] = new Sch[_0xee2b[822]].DragDrop(_0x8e22x4, {validatorFn:function(_0x8e22x2, _0x8e22x5, _0x8e22x1, _0x8e22x9) {
      if (!(_0x8e22x5 instanceof Sch[_0xee2b[327]][_0xee2b[606]])) {
        _0x8e22x5 = null;
      }
      return (_0x8e22x4[_0xee2b[3260]] || _0x8e22x4[_0xee2b[2655]](_0x8e22x1, Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[255]](_0x8e22x1, Sch[_0xee2b[49]][_0xee2b[703]].MILLI, _0x8e22x9), _0x8e22x2[0], _0x8e22x5)) && _0x8e22x4[_0xee2b[3268]][_0xee2b[8]](_0x8e22x6, arguments);
    }, validatorFnScope:_0x8e22x4, targetEl:_0x8e22x3 ? _0x8e22x4[_0xee2b[787]]() : _0x8e22x4[_0xee2b[2467]][_0xee2b[265]], dragConfig:_0x8e22x4[_0xee2b[2281]] || {}});
  }
  if (_0x8e22x4[_0xee2b[3269]] !== false) {
    _0x8e22x4[_0xee2b[3233]] = Ext[_0xee2b[831]](Ext[_0xee2b[8]]({xclass:_0xee2b[2042]}, {schedulerView:_0x8e22x4, disabled:_0x8e22x4[_0xee2b[2887]], validatorFn:function(_0x8e22x2, _0x8e22x5, _0x8e22x1) {
      if (!(_0x8e22x2 instanceof Sch[_0xee2b[327]][_0xee2b[606]])) {
        _0x8e22x2 = null;
      }
      return (_0x8e22x4[_0xee2b[3260]] || _0x8e22x4[_0xee2b[2655]](_0x8e22x5, _0x8e22x1, null, _0x8e22x2)) && _0x8e22x4[_0xee2b[3270]][_0xee2b[8]](_0x8e22x6, arguments);
    }, validatorFnScope:_0x8e22x4}, _0x8e22x4[_0xee2b[3271]]));
  }
  if (_0x8e22x4[_0xee2b[3272]] !== false) {
    _0x8e22x4[_0xee2b[149]]({scheduledblclick:_0x8e22x4[_0xee2b[3273]], schedulelongpress:_0x8e22x4[_0xee2b[3273]], scope:_0x8e22x4});
  }
}, doCreateEventOnDblClick:function(_0x8e22xd, _0x8e22x3, _0x8e22x8, _0x8e22x6) {
  if (this[_0xee2b[2887]]) {
    return;
  }
  var _0x8e22xa = this, _0x8e22x2 = _0x8e22xd[_0xee2b[2004]] && _0x8e22xd[_0xee2b[2467]][_0xee2b[3274]][_0xee2b[808]](), _0x8e22x7 = _0x8e22x2 ? _0x8e22x2[_0xee2b[3275]]() : _0x8e22xa[_0xee2b[3275]](), _0x8e22x4 = _0x8e22xd[_0xee2b[696]](), _0x8e22x9 = _0x8e22x4[_0xee2b[137]](), _0x8e22x5 = {};
  _0x8e22x5[_0x8e22x9[_0xee2b[139]][_0xee2b[1201]]] = _0x8e22x3;
  _0x8e22x5[_0x8e22x9[_0xee2b[139]][_0xee2b[1203]]] = Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[255]](_0x8e22x3, _0x8e22xd[_0xee2b[1795]][_0xee2b[1734]], 1);
  _0x8e22x5[_0x8e22x9[_0xee2b[139]][_0xee2b[3276]]] = Boolean(_0x8e22xd[_0xee2b[2004]]);
  _0x8e22x5[_0x8e22x9[_0xee2b[139]][_0xee2b[1009]]] = _0x8e22x6 && _0x8e22x6[_0xee2b[32]]() || null;
  var _0x8e22x1 = Ext[_0xee2b[831]](_0x8e22x9, _0x8e22x5);
  _0x8e22xa[_0xee2b[3277]](_0x8e22x1, _0x8e22x6);
  if (_0x8e22x7) {
    _0x8e22x7[_0xee2b[3278]](_0x8e22x1);
  } else {
    _0x8e22x4[_0xee2b[255]](_0x8e22x1);
  }
}, onDragDropStart:function() {
  if (this[_0xee2b[3233]]) {
    this[_0xee2b[3233]][_0xee2b[253]](true);
  }
  if (this[_0xee2b[2106]]) {
    this[_0xee2b[2106]][_0xee2b[256]]();
    this[_0xee2b[2106]][_0xee2b[2061]]();
  }
  if (this[_0xee2b[3094]]) {
    this[_0xee2b[3095]](false);
  }
  this[_0xee2b[3279]](true);
  this[_0xee2b[3104]] = null;
}, onDragDropEnd:function() {
  if (this[_0xee2b[3233]]) {
    this[_0xee2b[3233]][_0xee2b[253]](false);
  }
  if (this[_0xee2b[2106]]) {
    this[_0xee2b[2106]][_0xee2b[2064]]();
  }
  if (this[_0xee2b[3094]]) {
    this[_0xee2b[3095]](true);
  }
  this[_0xee2b[3279]](false);
}, onBeforeDragCreate:function(_0x8e22x6, _0x8e22x4, _0x8e22x3, _0x8e22x5) {
  return !this[_0xee2b[2887]] && !_0x8e22x5[_0xee2b[2794]];
}, onDragCreateStart:function() {
  if (this[_0xee2b[3094]]) {
    this[_0xee2b[3095]](false);
  }
  if (this[_0xee2b[2106]]) {
    this[_0xee2b[2106]][_0xee2b[256]]();
    this[_0xee2b[2106]][_0xee2b[2061]]();
  }
  this[_0xee2b[3279]](true);
}, onDragCreateEnd:function(_0x8e22x6, _0x8e22x3, _0x8e22x4) {
  if (!this[_0xee2b[3275]]()) {
    var _0x8e22x5 = _0x8e22x4 ? [_0x8e22x4] : [];
    if (this[_0xee2b[180]](_0xee2b[2664], this, _0x8e22x3, _0x8e22x5) !== false) {
      this[_0xee2b[696]]()[_0xee2b[384]](_0x8e22x3);
      if (!this[_0xee2b[1847]]()) {
        _0x8e22x3[_0xee2b[1605]](_0x8e22x4);
      }
      this[_0xee2b[3277]](_0x8e22x3, _0x8e22x5);
    }
  }
  if (this[_0xee2b[3094]]) {
    this[_0xee2b[3095]](true);
  }
}, onEventCreated:function(_0x8e22x3, _0x8e22x6) {
}, onAfterDragCreate:function() {
  if (this[_0xee2b[3094]]) {
    this[_0xee2b[3095]](true);
  }
  if (this[_0xee2b[2106]]) {
    this[_0xee2b[2106]][_0xee2b[2064]]();
  }
  this[_0xee2b[3279]](false);
}, onBeforeResize:function() {
  return !this[_0xee2b[2887]];
}, onResizeStart:function() {
  if (this[_0xee2b[2106]]) {
    this[_0xee2b[2106]][_0xee2b[256]]();
    this[_0xee2b[2106]][_0xee2b[2061]]();
  }
  if (this[_0xee2b[3233]]) {
    this[_0xee2b[3233]][_0xee2b[253]](true);
  }
  this[_0xee2b[3279]](true);
}, onResizeEnd:function() {
  if (this[_0xee2b[2106]]) {
    this[_0xee2b[2106]][_0xee2b[2064]]();
  }
  if (this[_0xee2b[3233]]) {
    this[_0xee2b[3233]][_0xee2b[253]](false);
  }
  this[_0xee2b[3279]](false);
}, setupEventListeners:function() {
  this[_0xee2b[149]]({eventdragstart:this[_0xee2b[3280]], aftereventdrop:this[_0xee2b[3281]], beforedragcreate:this[_0xee2b[3282]], dragcreatestart:this[_0xee2b[3283]], dragcreateend:this[_0xee2b[3284]], afterdragcreate:this[_0xee2b[3285]], beforeeventresize:this[_0xee2b[3286]], eventresizestart:this[_0xee2b[3287]], aftereventresize:this[_0xee2b[3288]], scope:this});
}, afterHeaderResized:function() {
  var _0x8e22x6 = this[_0xee2b[1848]][_0xee2b[2399]];
  if (_0x8e22x6 && !this[_0xee2b[1828]]()) {
    if (this[_0xee2b[1818]][_0xee2b[2715]]) {
      this[_0xee2b[2833]](_0x8e22x6[_0xee2b[3289]]);
    } else {
      var _0x8e22x3 = _0x8e22x6[_0xee2b[3290]][_0xee2b[793]]();
      this[_0xee2b[2833]](_0x8e22x3);
    }
  }
}, columnRenderer:function(_0x8e22x2, _0x8e22x4, _0x8e22x3, _0x8e22x5, _0x8e22x6) {
  return this[this[_0xee2b[1719]]][_0xee2b[3291]](_0x8e22x2, _0x8e22x4, _0x8e22x3, _0x8e22x5, _0x8e22x6);
}, onRowUpdated:function(_0x8e22x4) {
  var _0x8e22x6 = this, _0x8e22x3;
  if (_0x8e22x6[_0xee2b[1828]]() && _0x8e22x6[_0xee2b[225]](_0xee2b[2605])) {
    Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x4[_0xee2b[1421]](), function(_0x8e22x5) {
      _0x8e22x3 = _0x8e22x6[_0xee2b[2191]](_0x8e22x5, _0x8e22x4, null, true);
      Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x3, function(_0x8e22x2) {
        _0x8e22x6[_0xee2b[180]](_0xee2b[2605], _0x8e22x6, _0x8e22x5, _0x8e22x2);
      });
    });
  }
}, scrollResourceEventIntoView:function(_0x8e22x9, _0x8e22xa, _0x8e22x10, _0x8e22x5, _0x8e22x3, _0x8e22xb, _0x8e22x11) {
  if (this[_0xee2b[2004]]) {
    return;
  }
  var _0x8e22xf = this, _0x8e22xd = _0x8e22xf[_0xee2b[694]](_0xee2b[805]), _0x8e22xe = _0x8e22xa[_0xee2b[712]](), _0x8e22x7 = _0x8e22xa[_0xee2b[713]](), _0x8e22x4, _0x8e22x6;
  var _0x8e22x2 = function() {
    _0x8e22x6 = _0x8e22xf[_0xee2b[2191]](_0x8e22xa, _0x8e22x9, _0x8e22x10);
    _0x8e22x6 = _0x8e22x6[_0xee2b[4]] && _0x8e22x6[0] || null;
    if (_0x8e22x6) {
      _0x8e22xf[_0xee2b[3292]](_0x8e22x6, true, _0x8e22x3, _0x8e22x5, null, _0x8e22xb, _0x8e22x11);
    }
  };
  var _0x8e22xc = _0x8e22xf[_0xee2b[1795]], _0x8e22x1 = _0x8e22xa[_0xee2b[1611]] && _0x8e22xa[_0xee2b[1611]]() && _0x8e22xd[_0xee2b[2544]] ? _0x8e22xd[_0xee2b[2544]][_0xee2b[808]]()[_0xee2b[1795]] : _0x8e22xc;
  if (!_0x8e22x1[_0xee2b[1763]](_0x8e22xe) || !_0x8e22x1[_0xee2b[1763]](_0x8e22x7, true)) {
    _0x8e22x4 = _0x8e22xc[_0xee2b[698]]() - _0x8e22xc[_0xee2b[697]]();
    _0x8e22xc[_0xee2b[1756]](new Date(_0x8e22xe[_0xee2b[1162]]() - _0x8e22x4 / 2), new Date(_0x8e22x7[_0xee2b[1162]]() + _0x8e22x4 / 2));
    _0x8e22xf[_0xee2b[694]](_0xee2b[1818])[_0xee2b[3293]][_0xee2b[1499]]();
  }
  if (this[_0xee2b[1828]]()) {
    var _0x8e22x8 = _0x8e22xd[_0xee2b[64]][_0xee2b[234]];
    _0x8e22xd[_0xee2b[2966]](_0x8e22x8 ? _0x8e22x9[_0xee2b[3294]]() : _0x8e22x9, {callback:function() {
      _0x8e22x2();
    }});
  } else {
    _0x8e22x2();
  }
}});
Ext[_0xee2b[6]](_0xee2b[3295], {extend:_0xee2b[3131], mixins:[_0xee2b[3225], _0xee2b[2913], _0xee2b[665]], alias:_0xee2b[3296]}, function() {
  this[_0xee2b[507]](Sch[_0xee2b[1637]][_0xee2b[3297]][_0xee2b[139]][_0xee2b[1635]]() || {});
});
Ext[_0xee2b[6]](_0xee2b[3298], {extend:_0xee2b[3299], alias:_0xee2b[3300], requires:[_0xee2b[3301]], deselectOnContainerClick:true, selectedOnMouseDown:null, bindComponent:Ext[_0xee2b[688]], onEditorKey:Ext[_0xee2b[688]], onStoreLoad:Ext[_0xee2b[688]], bindToView:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  _0x8e22x6[_0xee2b[829]] = _0x8e22x3;
  _0x8e22x6[_0xee2b[145]](_0x8e22x6[_0xee2b[3302]](_0x8e22x3));
  _0x8e22x3[_0xee2b[149]]({eventclick:_0x8e22x6[_0xee2b[3303]], eventmousedown:_0x8e22x6[_0xee2b[3304]], itemmousedown:_0x8e22x6[_0xee2b[3305]], refresh:function() {
    _0x8e22x6[_0xee2b[770]]();
  }, destroy:function() {
    _0x8e22x6[_0xee2b[145]](null);
  }, scope:_0x8e22x6});
}, getSelectionStore:function(_0x8e22x3) {
  return _0x8e22x3[_0xee2b[696]]();
}, bindStore:function(_0x8e22x3) {
  if (this[_0xee2b[341]]()) {
    this[_0xee2b[325]](this[_0xee2b[341]](), _0xee2b[302], this[_0xee2b[3306]], this);
  }
  if (_0x8e22x3) {
    this[_0xee2b[252]](_0x8e22x3, _0xee2b[302], this[_0xee2b[3306]], this);
  }
  this[_0xee2b[9]](arguments);
}, onSelectionStoreLoad:function() {
  this[_0xee2b[3307]]();
}, onEventMouseDown:function(_0x8e22x6, _0x8e22x3, _0x8e22x4) {
  this[_0xee2b[3308]] = null;
  if ((!this[_0xee2b[3309]] || _0x8e22x4[_0xee2b[2104]] !== 2) && !this[_0xee2b[2597]](_0x8e22x3)) {
    this[_0xee2b[3308]] = _0x8e22x3;
    this[_0xee2b[3310]](_0x8e22x3, _0x8e22x4);
  }
}, onEventClick:function(_0x8e22x6, _0x8e22x3, _0x8e22x4) {
  if ((!this[_0xee2b[3309]] || _0x8e22x4[_0xee2b[2104]] !== 2) && !this[_0xee2b[3308]]) {
    this[_0xee2b[3310]](_0x8e22x3, _0x8e22x4);
  }
}, onItemMouseDown:function(_0x8e22x1, _0x8e22x2, _0x8e22xa, _0x8e22x7, _0x8e22x9) {
  if (this[_0xee2b[3311]] && !_0x8e22x9[_0xee2b[2033]](this[_0xee2b[829]][_0xee2b[2034]])) {
    this[_0xee2b[3307]]();
  }
}, onSelectChange:function(_0x8e22x5, _0x8e22x6, _0x8e22x8, _0x8e22x3) {
  var _0x8e22x1 = this, _0x8e22x9 = _0x8e22x1[_0xee2b[829]], _0x8e22x7 = _0x8e22x1[_0xee2b[64]], _0x8e22x2 = _0x8e22x6 ? _0xee2b[760] : _0xee2b[3312], _0x8e22x4 = 0;
  if (_0x8e22x9 && (_0x8e22x8 || _0x8e22x1[_0xee2b[180]](_0xee2b[434] + _0x8e22x2, _0x8e22x1, _0x8e22x5)) !== false && _0x8e22x3() !== false) {
    if (_0x8e22x6) {
      _0x8e22x9[_0xee2b[2598]](_0x8e22x5, _0x8e22x8);
    } else {
      _0x8e22x9[_0xee2b[3313]](_0x8e22x5, _0x8e22x8);
    }
    if (!_0x8e22x8) {
      _0x8e22x1[_0xee2b[180]](_0x8e22x2, _0x8e22x1, _0x8e22x5);
    }
  }
}, selectRange:Ext[_0xee2b[688]], selectNode:function(_0x8e22x4, _0x8e22x5, _0x8e22x3) {
  var _0x8e22x6 = this[_0xee2b[829]][_0xee2b[2181]](_0x8e22x4);
  if (_0x8e22x6) {
    this[_0xee2b[760]](_0x8e22x6, _0x8e22x5, _0x8e22x3);
  }
}, deselectNode:function(_0x8e22x4, _0x8e22x5, _0x8e22x3) {
  var _0x8e22x6 = this[_0xee2b[829]][_0xee2b[2181]](_0x8e22x4);
  if (_0x8e22x6) {
    this[_0xee2b[3312]](_0x8e22x6, _0x8e22x3);
  }
}, getFirstSelectedEventForResource:function(_0x8e22x1) {
  var _0x8e22x4 = this[_0xee2b[3314]](), _0x8e22x2 = null, _0x8e22x6, _0x8e22x3, _0x8e22x5;
  for (_0x8e22x6 = 0, _0x8e22x3 = _0x8e22x4[_0xee2b[4]]; !_0x8e22x2 && _0x8e22x6 < _0x8e22x3; ++_0x8e22x6) {
    _0x8e22x5 = _0x8e22x4[_0x8e22x6];
    if (_0x8e22x5[_0xee2b[2243]](_0x8e22x1)) {
      _0x8e22x2 = _0x8e22x5;
    }
  }
  return _0x8e22x2;
}, getDraggableSelections:function() {
  return Ext[_0xee2b[26]][_0xee2b[173]](this[_0xee2b[3314]](), function(_0x8e22x3) {
    return _0x8e22x3[_0xee2b[2183]]();
  });
}, forEachEventRelatedSelection:function(_0x8e22x3, _0x8e22x6) {
  this[_0xee2b[2597]](_0x8e22x3) && _0x8e22x6(_0x8e22x3);
}, refresh:function() {
  var _0x8e22x10 = this, _0x8e22xc = _0x8e22x10[_0xee2b[64]], _0x8e22x9 = [], _0x8e22xd = [], _0x8e22x1 = _0x8e22x10[_0xee2b[3314]](), _0x8e22x7 = _0x8e22x1[_0xee2b[4]], _0x8e22x4 = _0x8e22x10[_0xee2b[3315]](), _0x8e22xe, _0x8e22x8, _0x8e22x3, _0x8e22xf, _0x8e22x6, _0x8e22x2;
  if (!_0x8e22xc || !(_0x8e22x4[_0xee2b[3316]] || _0x8e22x4[_0xee2b[3317]] || _0x8e22x4[_0xee2b[3318]]) || !_0x8e22x4[_0xee2b[1466]]()) {
    return;
  }
  _0x8e22x3 = _0x8e22xc[_0xee2b[349]]();
  if (_0x8e22x3[_0xee2b[3319]]) {
    _0x8e22x8 = _0x8e22x3[_0xee2b[3319]]();
    if (_0x8e22x8) {
      _0x8e22x3 = _0x8e22x8;
    }
  }
  _0x8e22x10[_0xee2b[3320]] = true;
  _0x8e22x4[_0xee2b[380]]();
  _0x8e22x10[_0xee2b[3321]]();
  for (_0x8e22x2 = 0; _0x8e22x2 < _0x8e22x7; _0x8e22x2++) {
    _0x8e22xf = _0x8e22x1[_0x8e22x2];
    _0x8e22x6 = _0x8e22x3[_0xee2b[55]](_0x8e22xf[_0xee2b[32]]());
    if (_0x8e22x6) {
      _0x8e22x9[_0xee2b[11]](_0x8e22x6);
    } else {
      if (!_0x8e22x10[_0xee2b[3322]]) {
        _0x8e22xd[_0xee2b[11]](_0x8e22xf);
      }
    }
    if (_0x8e22x10[_0xee2b[1719]] === _0xee2b[3244] && _0x8e22xd[_0xee2b[4]]) {
      break;
    }
  }
  if (_0x8e22x4[_0xee2b[1466]]() !== _0x8e22x9[_0xee2b[4]] + _0x8e22xd[_0xee2b[4]]) {
    _0x8e22xe = true;
  }
  _0x8e22x10[_0xee2b[3323]]();
  if (_0x8e22x9[_0xee2b[4]]) {
    _0x8e22x10[_0xee2b[3324]](_0x8e22x9, false, true);
  }
  if (_0x8e22xd[_0xee2b[4]]) {
    _0x8e22x4[_0xee2b[255]](_0x8e22xd);
    if (!_0x8e22x10[_0xee2b[3325]]) {
      _0x8e22x10[_0xee2b[3325]] = _0x8e22xd[_0x8e22xd[_0xee2b[4]] - 1];
    }
  }
  _0x8e22x10[_0xee2b[3326]]();
  if (_0x8e22xe) {
    _0x8e22x4[_0xee2b[381]]();
  } else {
    _0x8e22x4[_0xee2b[3327]]--;
  }
  _0x8e22x10[_0xee2b[3320]] = false;
  _0x8e22x10[_0xee2b[3328]](_0x8e22xe);
}});
Ext[_0xee2b[6]](_0xee2b[3329], {extend:_0xee2b[3298], alias:_0xee2b[3330], assignmentStoreDetacher:null, getSelectionStore:function(_0x8e22x3) {
  return _0x8e22x3[_0xee2b[696]]()[_0xee2b[1003]];
}, onBindStore:function(_0x8e22x6) {
  this[_0xee2b[9]](arguments);
  if (_0x8e22x6) {
    var _0x8e22x3 = this;
    _0x8e22x3[_0xee2b[1001]] && _0x8e22x3[_0xee2b[1001]][_0xee2b[218]]();
    _0x8e22x3[_0xee2b[1001]] = _0x8e22x6[_0xee2b[149]]({remove:_0x8e22x3[_0xee2b[3331]], clear:_0x8e22x3[_0xee2b[3332]], refresh:_0x8e22x3[_0xee2b[3333]], scope:_0x8e22x3, destroyable:true});
  }
}, onEventMouseDown:function(_0x8e22x6, _0x8e22x3, _0x8e22x5) {
  this[_0xee2b[3308]] = null;
  var _0x8e22x4 = this[_0xee2b[3334]](_0x8e22x5[_0xee2b[2033]]());
  if (_0x8e22x4 && (!this[_0xee2b[3309]] || _0x8e22x5[_0xee2b[2104]] !== 2) && !this[_0xee2b[2597]](_0x8e22x4)) {
    this[_0xee2b[3308]] = _0x8e22x4;
    this[_0xee2b[3310]](_0x8e22x4, _0x8e22x5);
  }
}, onEventClick:function(_0x8e22x6, _0x8e22x3, _0x8e22x5) {
  var _0x8e22x4 = this[_0xee2b[3334]](_0x8e22x5[_0xee2b[2033]]());
  if (_0x8e22x4 && (!this[_0xee2b[3309]] || _0x8e22x5[_0xee2b[2104]] !== 2) && !this[_0xee2b[3308]]) {
    this[_0xee2b[3310]](_0x8e22x4, _0x8e22x5);
  }
}, resolveAssignmentRecordFromEventNode:function(_0x8e22x4) {
  var _0x8e22x3 = this[_0xee2b[829]], _0x8e22x6 = _0x8e22x3[_0xee2b[2181]](_0x8e22x4), _0x8e22x5 = _0x8e22x3[_0xee2b[2036]](_0x8e22x4);
  if (_0x8e22x6 && _0x8e22x5) {
    var _0x8e22x2 = _0x8e22x3[_0xee2b[696]]()[_0xee2b[1051]]();
    return _0x8e22x2[_0xee2b[1092]](_0x8e22x6, _0x8e22x5);
  }
}, selectNode:function(_0x8e22x4, _0x8e22x5, _0x8e22x3) {
  var _0x8e22x6 = this[_0xee2b[3334]](_0x8e22x4);
  if (_0x8e22x6) {
    this[_0xee2b[760]](_0x8e22x6, _0x8e22x5, _0x8e22x3);
  }
}, deselectNode:function(_0x8e22x4, _0x8e22x5, _0x8e22x3) {
  var _0x8e22x6 = this[_0xee2b[3334]](_0x8e22x4);
  if (_0x8e22x6) {
    this[_0xee2b[3312]](_0x8e22x6, _0x8e22x3);
  }
}, getFirstSelectedEventForResource:function(_0x8e22x1) {
  var _0x8e22x4 = this[_0xee2b[3314]](), _0x8e22x2 = null, _0x8e22x6, _0x8e22x3, _0x8e22x5;
  for (_0x8e22x6 = 0, _0x8e22x3 = _0x8e22x4[_0xee2b[4]]; !_0x8e22x2 && _0x8e22x6 < _0x8e22x3; ++_0x8e22x6) {
    _0x8e22x5 = _0x8e22x4[_0x8e22x6];
    if (_0x8e22x5[_0xee2b[1052]]()[_0xee2b[2243]](_0x8e22x1)) {
      _0x8e22x2 = _0x8e22x5;
      break;
    }
  }
  return _0x8e22x2;
}, getDraggableSelections:function() {
  return Ext[_0xee2b[26]][_0xee2b[173]](this[_0xee2b[3314]](), function(_0x8e22x3) {
    return _0x8e22x3[_0xee2b[1052]]()[_0xee2b[2183]]();
  });
}, forEachEventRelatedSelection:function(_0x8e22x3, _0x8e22x6) {
  Ext[_0xee2b[26]][_0xee2b[25]](this[_0xee2b[3314]](), function(_0x8e22x4) {
    _0x8e22x4[_0xee2b[1052]]() === _0x8e22x3 && _0x8e22x6(_0x8e22x4);
  });
}, onAssignmentStoreRemove:function(_0x8e22x6, _0x8e22x3) {
  this[_0xee2b[3312]](_0x8e22x3, true);
}, onAssignmentStoreClear:function(_0x8e22x3) {
  this[_0xee2b[3323]]();
}, onAssignmentStoreRefresh:function(_0x8e22x3) {
  this[_0xee2b[3323]]();
}, destroy:function() {
  var _0x8e22x3 = this;
  Ext[_0xee2b[1004]](_0x8e22x3, _0xee2b[1001]);
  _0x8e22x3[_0xee2b[9]]();
}});
Ext[_0xee2b[6]](_0xee2b[3335], {extend:_0xee2b[2531], requires:[_0xee2b[3295], _0xee2b[2356], _0xee2b[3298], _0xee2b[3329], _0xee2b[485], _0xee2b[865], _0xee2b[681]], uses:[_0xee2b[3336]], eventSelModelType:null, eventSelModel:null, enableEventDragDrop:true, enableDragCreation:true, createEventOnDblClick:false, dragConfig:null, weekViewColumnClass:_0xee2b[469], componentCls:_0xee2b[3337], lockedGridDependsOnSchedule:true, showAllDayHeader:true, verticalListeners:null, horizontalLockedWidth:null, 
verticalColumns:null, calendarColumns:null, recurringEvents:true, horizontalCls:[_0xee2b[2815]], verticalCls:[_0xee2b[2817], _0xee2b[2816]], weekviewCls:[_0xee2b[2818], _0xee2b[2816]], _oldViewPresetArgs:null, relayedViewEvents:[_0xee2b[3338], _0xee2b[3339], _0xee2b[3340], _0xee2b[3341], _0xee2b[3342], _0xee2b[3343], _0xee2b[3106], _0xee2b[3107], _0xee2b[3344], _0xee2b[3345], _0xee2b[2408], _0xee2b[2413], _0xee2b[2435], _0xee2b[2436], _0xee2b[2438], _0xee2b[2439], _0xee2b[2218], _0xee2b[2199], _0xee2b[2172], 
_0xee2b[2270], _0xee2b[2236], _0xee2b[2274], _0xee2b[2054], _0xee2b[2069], _0xee2b[2083], _0xee2b[2088], _0xee2b[2091], _0xee2b[2664]], inheritables:function() {
  return {variableRowHeight:true, initComponent:function() {
    var _0x8e22x1 = this, _0x8e22x4 = _0x8e22x1[_0xee2b[3346]] = _0x8e22x1[_0xee2b[3346]] || {}, _0x8e22x3 = _0x8e22x1[_0xee2b[3347]] && _0x8e22x1[_0xee2b[3347]]() || {};
    _0x8e22x1._initializeSchedulerPanel();
    _0x8e22x1[_0xee2b[2541]] = {clear:_0x8e22x1[_0xee2b[2540]], datachanged:_0x8e22x1[_0xee2b[2540]], update:_0x8e22x1[_0xee2b[2540]], load:_0x8e22x1[_0xee2b[2540]], scope:_0x8e22x1};
    _0x8e22x1[_0xee2b[3348]] = {reconfigure:_0x8e22x1[_0xee2b[3349]], priority:1, scope:_0x8e22x1};
    _0x8e22x1[_0xee2b[3350]] = {columnresize:_0x8e22x1[_0xee2b[3351]], scope:_0x8e22x1};
    _0x8e22x1[_0xee2b[2542]] = {load:_0x8e22x1[_0xee2b[3352]], add:_0x8e22x1[_0xee2b[3352]], remove:_0x8e22x1[_0xee2b[3352]], scope:_0x8e22x1};
    _0x8e22x1[_0xee2b[3346]] = _0x8e22x1[_0xee2b[3346]] || {};
    Ext[_0xee2b[8]](_0x8e22x1[_0xee2b[3346]], {eventStore:_0x8e22x1[_0xee2b[1071]], resourceStore:_0x8e22x1[_0xee2b[1302]], dependencyStore:_0x8e22x1[_0xee2b[1303]], eventBarTextField:_0x8e22x1[_0xee2b[2646]] || this[_0xee2b[696]]()[_0xee2b[137]]()[_0xee2b[139]][_0xee2b[1228]]});
    if (_0x8e22x1[_0xee2b[1306]]() && _0x8e22x3[_0xee2b[3353]] !== false) {
      _0x8e22x4[_0xee2b[2557]] = _0x8e22x3[_0xee2b[2557]] || [_0xee2b[1354], _0xee2b[867], _0xee2b[686], _0xee2b[754]];
    }
    Ext[_0xee2b[1054]](_0x8e22x1[_0xee2b[3346]], _0x8e22x1, [_0xee2b[1800], _0xee2b[2538], _0xee2b[2589], _0xee2b[3260], _0xee2b[2281], _0xee2b[2642], _0xee2b[3277], _0xee2b[2130], _0xee2b[2250], _0xee2b[3245], _0xee2b[3238], _0xee2b[3240], _0xee2b[3242], _0xee2b[3248], _0xee2b[3234], _0xee2b[2878]], true);
    _0x8e22x1[_0xee2b[9]](arguments);
    if (_0x8e22x1[_0xee2b[3354]] !== false && (!_0x8e22x1[_0xee2b[3354]] || !_0x8e22x1[_0xee2b[3354]][_0xee2b[3355]])) {
      _0x8e22x1[_0xee2b[3354]] = Ext[_0xee2b[831]](Ext[_0xee2b[8]]({xclass:_0xee2b[2356], panel:_0x8e22x1}, _0x8e22x1[_0xee2b[3354]]));
    }
    if (!_0x8e22x1[_0xee2b[1828]]()) {
      _0x8e22x1[_0xee2b[3356]](true);
    }
    if (_0x8e22x1[_0xee2b[2539]]()) {
      _0x8e22x1[_0xee2b[252]](_0x8e22x1[_0xee2b[1302]], _0x8e22x1[_0xee2b[2541]]);
    } else {
      if (_0x8e22x1[_0xee2b[1847]]() && _0x8e22x1[_0xee2b[2878]]) {
        _0x8e22x1[_0xee2b[3357]]();
      }
    }
    var _0x8e22x2 = _0x8e22x1[_0xee2b[1830]][_0xee2b[290]]();
    var _0x8e22x5 = _0x8e22x1[_0xee2b[808]]();
    _0x8e22x2[_0xee2b[149]](_0xee2b[835], _0x8e22x1[_0xee2b[3358]], _0x8e22x1);
    _0x8e22x1[_0xee2b[2503]](_0x8e22x5[_0xee2b[3291]], _0x8e22x5);
    if (_0x8e22x1[_0xee2b[3359]]) {
      var _0x8e22x6 = Ext[_0xee2b[132]][_0xee2b[131]](_0x8e22x1[_0xee2b[3359]]);
      _0x8e22x1[_0xee2b[3360]] = new Sch[_0xee2b[3362]].ResourceZones(Ext[_0xee2b[8]]({store:_0x8e22x6}, _0x8e22x1[_0xee2b[3361]]));
      _0x8e22x1[_0xee2b[3360]][_0xee2b[1809]](_0x8e22x1);
    }
    _0x8e22x5[_0xee2b[149]](_0xee2b[2745], _0x8e22x1[_0xee2b[3363]], _0x8e22x1);
    _0x8e22x1[_0xee2b[846]](_0x8e22x5, _0x8e22x1[_0xee2b[3364]]);
    if (!_0x8e22x1[_0xee2b[2472]]) {
      _0x8e22x1[_0xee2b[3365]](_0x8e22x2, _0x8e22x5);
    }
    if (_0x8e22x1[_0xee2b[1306]]()) {
      _0x8e22x1[_0xee2b[264]](_0xee2b[3366]);
    }
  }, configureColumns:function(_0x8e22x3) {
    var _0x8e22x6 = this;
    _0x8e22x3 = _0x8e22x3 || [{xtype:_0xee2b[3367]}];
    _0x8e22x6[_0xee2b[9]](arguments);
    _0x8e22x6[_0xee2b[3368]] = _0x8e22x6[_0xee2b[3368]] || [Ext[_0xee2b[8]]({xtype:_0xee2b[3369]}, _0x8e22x6[_0xee2b[3370]] || {})];
    Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x6[_0xee2b[3368]], function(_0x8e22x4) {
      Ext[_0xee2b[8]](_0x8e22x4, {timeAxis:_0x8e22x6[_0xee2b[1795]], timeAxisViewModel:_0x8e22x6[_0xee2b[810]], cellTopBorderWidth:_0x8e22x6[_0xee2b[2584]], cellBottomBorderWidth:_0x8e22x6[_0xee2b[2848]]});
    });
    _0x8e22x6[_0xee2b[3371]] = [Ext[_0xee2b[8]]({xtype:_0xee2b[3369], width:60, timeAxis:_0x8e22x6[_0xee2b[1795]], timeAxisViewModel:_0x8e22x6[_0xee2b[810]], cellTopBorderWidth:_0x8e22x6[_0xee2b[2584]], cellBottomBorderWidth:_0x8e22x6[_0xee2b[2848]]}, _0x8e22x6[_0xee2b[3372]] || _0x8e22x6[_0xee2b[3373]] || {})];
    if (_0x8e22x6[_0xee2b[2539]]()) {
      _0x8e22x6[_0xee2b[3374]] = _0x8e22x6[_0xee2b[3368]][_0xee2b[318]](_0x8e22x6[_0xee2b[3375]](_0x8e22x6[_0xee2b[2582]] || _0x8e22x6[_0xee2b[810]][_0xee2b[2582]]));
      _0x8e22x6[_0xee2b[64]] = _0x8e22x6[_0xee2b[1795]];
      if (_0x8e22x6[_0xee2b[1302]][_0xee2b[2295]]()) {
        _0x8e22x6[_0xee2b[1795]][_0xee2b[3376]](_0x8e22x6[_0xee2b[1302]][_0xee2b[2856]]);
        _0x8e22x6[_0xee2b[3377]]();
      }
    } else {
      if (_0x8e22x6[_0xee2b[1847]]()) {
        _0x8e22x6[_0xee2b[3374]] = [];
        _0x8e22x6[_0xee2b[64]] = null;
        _0x8e22x6[_0xee2b[149]](_0xee2b[690], _0x8e22x6[_0xee2b[3349]], _0x8e22x6);
      }
    }
  }, applyViewSettings:function(_0x8e22x4, _0x8e22x6) {
    this[_0xee2b[9]](arguments);
    var _0x8e22x5 = this[_0xee2b[808]](), _0x8e22x3;
    if (this[_0xee2b[3378]] === _0xee2b[1932]) {
      _0x8e22x3 = _0x8e22x4[_0xee2b[2679]] || 60;
      _0x8e22x5[_0xee2b[2833]](_0x8e22x4[_0xee2b[2582]] || 100, true);
      _0x8e22x5[_0xee2b[2811]](_0x8e22x3, true);
    }
  }, onRender:function() {
    if (!this[_0xee2b[1828]]()) {
      this[_0xee2b[3379]](true);
    }
    this[_0xee2b[9]](arguments);
  }, afterRender:function() {
    var _0x8e22x6 = this;
    var _0x8e22x4 = this[_0xee2b[808]]();
    this[_0xee2b[9]](arguments);
    if (this[_0xee2b[2539]]()) {
      this[_0xee2b[3358]](null, null, this[_0xee2b[1830]][_0xee2b[290]]()[_0xee2b[859]]());
    } else {
      if (this[_0xee2b[1847]]()) {
        this[_0xee2b[252]](this[_0xee2b[1795]], this[_0xee2b[3348]]);
        this[_0xee2b[252]](this[_0xee2b[1302]], this[_0xee2b[2542]]);
        this[_0xee2b[3380]][_0xee2b[149]](this[_0xee2b[3350]]);
      }
    }
    if (this[_0xee2b[2829]]) {
      _0x8e22x4[_0xee2b[149]]({eventdragstart:this[_0xee2b[3381]], aftereventdrop:this[_0xee2b[3382]], eventresizestart:this[_0xee2b[3381]], aftereventresize:this[_0xee2b[3382]], scope:this});
    }
    if (this[_0xee2b[3234]]) {
      _0x8e22x4[_0xee2b[149]](_0xee2b[3257], this[_0xee2b[3383]], this);
    }
    this[_0xee2b[846]](this[_0xee2b[2256]](), [_0xee2b[3384], _0xee2b[3312], _0xee2b[760]], _0xee2b[1440]);
    this[_0xee2b[290]]()[_0xee2b[149]](_0xee2b[770], function() {
      if (!_0x8e22x6[_0xee2b[1828]]()) {
        _0x8e22x6[_0xee2b[3379]]();
      }
    });
    var _0x8e22x3 = {keydown:_0x8e22x6[_0xee2b[3385]], keypress:_0x8e22x6[_0xee2b[3385]], keyup:_0x8e22x6[_0xee2b[3385]], scope:_0x8e22x6};
    if (Ext[_0xee2b[3386]]) {
      _0x8e22x6[_0xee2b[3380]][_0xee2b[265]][_0xee2b[149]](_0x8e22x3);
    } else {
      _0x8e22x4[_0xee2b[265]][_0xee2b[149]](_0x8e22x3);
    }
    _0x8e22x4[_0xee2b[149]]({eventclick:_0x8e22x6[_0xee2b[3387]], scope:_0x8e22x6});
  }, getTimeSpanDefiningStore:function() {
    return this[_0xee2b[1071]];
  }, destroy:function() {
    var _0x8e22x3 = this;
    if (_0x8e22x3[_0xee2b[3388]]) {
      _0x8e22x3[_0xee2b[1306]]() && _0x8e22x3[_0xee2b[1306]]()[_0xee2b[218]]();
      _0x8e22x3[_0xee2b[1051]]() && _0x8e22x3[_0xee2b[1051]]()[_0xee2b[218]]();
      _0x8e22x3[_0xee2b[696]]() && _0x8e22x3[_0xee2b[696]]()[_0xee2b[218]]();
      _0x8e22x3[_0xee2b[1007]]() && _0x8e22x3[_0xee2b[1007]]()[_0xee2b[218]]();
    }
    _0x8e22x3[_0xee2b[3389]]();
    Ext[_0xee2b[1004]](_0x8e22x3, _0xee2b[3360]);
    _0x8e22x3[_0xee2b[9]](arguments);
  }, scrollToDateCentered:function(_0x8e22x2, _0x8e22x5) {
    var _0x8e22x4 = this[_0xee2b[808]]();
    if (_0x8e22x4[_0xee2b[1847]]()) {
      var _0x8e22x1 = _0x8e22x4[_0xee2b[2430]][_0xee2b[3214]](function(_0x8e22x9) {
        return _0x8e22x9[_0xee2b[179]] <= _0x8e22x2 && _0x8e22x9[_0xee2b[771]] > _0x8e22x2;
      })[0];
      if (_0x8e22x1) {
        var _0x8e22x6 = _0x8e22x4[_0xee2b[793]]() / 2;
        var _0x8e22x3 = _0x8e22x4[_0xee2b[2608]]() / 2;
        _0x8e22x4[_0xee2b[2838]](Math[_0xee2b[715]](_0x8e22x1[_0xee2b[3390]]() - _0x8e22x6, 0));
        _0x8e22x4[_0xee2b[2835]](Math[_0xee2b[715]](_0x8e22x4[_0xee2b[1895]](_0x8e22x2, true) - _0x8e22x3, 0));
      }
    } else {
      return this[_0xee2b[9]](arguments);
    }
  }};
}, doSuspendLayouts:function() {
  this[_0xee2b[1795]][_0xee2b[149]]({beginreconfigure:this[_0xee2b[3391]], endreconfigure:this[_0xee2b[3392]], scope:this});
  this[_0xee2b[1830]][_0xee2b[2839]]();
  this[_0xee2b[3380]][_0xee2b[2839]]();
}, doResumeLayouts:function() {
  this[_0xee2b[1795]][_0xee2b[152]]({beginreconfigure:this[_0xee2b[3391]], endreconfigure:this[_0xee2b[3392]], scope:this});
  this[_0xee2b[1830]][_0xee2b[2841]]();
  this[_0xee2b[3380]][_0xee2b[2841]]();
}, onBeginReconfigure:function() {
  this[_0xee2b[3380]][_0xee2b[2841]]();
}, onEndReconfigure:function() {
  this[_0xee2b[3380]][_0xee2b[2839]]();
}, onColWidthChange:function(_0x8e22x6, _0x8e22x3) {
  if (this[_0xee2b[2539]]()) {
    this[_0xee2b[2582]] = _0x8e22x3;
    this[_0xee2b[2540]]();
  } else {
    if (this[_0xee2b[1847]]()) {
      this[_0xee2b[2733]] = _0x8e22x3;
      this[_0xee2b[3349]]();
    }
  }
}, enableRowHeightInjection:function(_0x8e22x6) {
  var _0x8e22x3 = this;
  var _0x8e22x4 = new Ext.XTemplate(_0xee2b[3393], _0xee2b[3394], _0xee2b[3395], _0xee2b[3396], {priority:1, processCellValues:Ext[_0xee2b[283]][_0xee2b[282]](_0x8e22x3[_0xee2b[3397]], _0x8e22x3)});
  _0x8e22x6[_0xee2b[3398]](_0x8e22x4);
  Ext[_0xee2b[26]][_0xee2b[25]](this[_0xee2b[3374]], function(_0x8e22x5) {
    _0x8e22x5[_0xee2b[3399]] = true;
  });
  Ext[_0xee2b[26]][_0xee2b[25]](this[_0xee2b[3400]], function(_0x8e22x5) {
    _0x8e22x5[_0xee2b[3399]] = true;
  });
}, embedRowHeight:function(_0x8e22x3) {
  var _0x8e22x2 = this, _0x8e22x9 = _0x8e22x2[_0xee2b[808]]();
  if (_0x8e22x9[_0xee2b[1828]]()) {
    var _0x8e22x6 = 1;
    if (_0x8e22x9[_0xee2b[2849]](_0x8e22x3[_0xee2b[933]])) {
      var _0x8e22x1 = _0x8e22x3[_0xee2b[933]];
      var _0x8e22x5 = _0x8e22x9[_0xee2b[2587]][_0xee2b[1931]];
      _0x8e22x6 = _0x8e22x5[_0xee2b[3401]](_0x8e22x1, function() {
        return _0x8e22x9[_0xee2b[696]]()[_0xee2b[2602]](_0x8e22x1, _0x8e22x9[_0xee2b[1795]][_0xee2b[2601]], _0x8e22x9[_0xee2b[1795]]);
      });
    }
    var _0x8e22x4 = _0x8e22x6 * _0x8e22x2[_0xee2b[2864]]() - (_0x8e22x6 - 1) * _0x8e22x9[_0xee2b[1800]] + _0x8e22x9[_0xee2b[2584]] + _0x8e22x9[_0xee2b[2848]] - 1;
    _0x8e22x3[_0xee2b[763]] = (_0x8e22x3[_0xee2b[763]] || _0xee2b[27]) + _0xee2b[3402] + _0x8e22x4 + _0xee2b[3403];
  }
}, getEventSelectionModel:function() {
  return this[_0xee2b[808]]()[_0xee2b[2256]]();
}, refreshResourceColumns:function() {
  var _0x8e22x3 = this[_0xee2b[2582]] || this[_0xee2b[810]][_0xee2b[2582]];
  this[_0xee2b[1723]](this[_0xee2b[3368]][_0xee2b[318]](this[_0xee2b[3375]](_0x8e22x3)));
}, onCalendarColumnResize:function(_0x8e22x4, _0x8e22x6, _0x8e22x3) {
  if (_0x8e22x3 !== this[_0xee2b[810]][_0xee2b[2733]]) {
    this[_0xee2b[810]][_0xee2b[2607]](_0x8e22x3, true);
  }
  this[_0xee2b[808]]()[_0xee2b[2430]][_0xee2b[3220]](_0x8e22x6, _0x8e22x4[_0xee2b[3404]][_0xee2b[147]](_0x8e22x6));
}, onCalendarResourceStoreChange:function() {
  this[_0xee2b[808]]()[_0xee2b[2668]]();
}, refreshCalendarColumns:function() {
  var _0x8e22x6 = this[_0xee2b[3405]]();
  var _0x8e22x3 = this[_0xee2b[3406]]();
  this[_0xee2b[1723]](_0x8e22x6, this[_0xee2b[3371]][_0xee2b[318]](_0x8e22x3));
}, setGroupingFeatureDisabled:function(_0x8e22x6) {
  var _0x8e22x4 = this, _0x8e22x3 = _0x8e22x4[_0xee2b[3380]][_0xee2b[829]];
  if (!_0x8e22x3[_0xee2b[2310]] || _0x8e22x3[_0xee2b[2310]][_0xee2b[144]] === _0x8e22x6) {
    return;
  }
  _0x8e22x3[_0xee2b[2310]][_0x8e22x6 ? _0xee2b[2061] : _0xee2b[2064]]();
  _0x8e22x3 = _0x8e22x4[_0xee2b[1830]][_0xee2b[829]];
  _0x8e22x3[_0xee2b[2310]][_0x8e22x6 ? _0xee2b[2061] : _0xee2b[2064]]();
}, refreshGroupingStore:function() {
  var _0x8e22x3 = this[_0xee2b[3380]][_0xee2b[829]][_0xee2b[2310]];
  if (_0x8e22x3) {
    _0x8e22x3[_0xee2b[3408]][_0xee2b[3407]](this[_0xee2b[1795]]);
  }
}, bindGroupingFeatureListener:function() {
  this[_0xee2b[252]](this[_0xee2b[1795]], _0xee2b[1723], this[_0xee2b[3409]], this, {priority:10});
}, unbindGroupingFeatureListener:function() {
  this[_0xee2b[325]](this[_0xee2b[1795]], _0xee2b[1723], this[_0xee2b[3409]]);
}, setMode:function(_0x8e22x8, _0x8e22x4) {
  var _0x8e22xa = this;
  if (!_0x8e22xa[_0xee2b[3380]]) {
    _0x8e22xa[_0xee2b[149]](_0xee2b[3088], function() {
      _0x8e22xa[_0xee2b[1720]](_0x8e22x8, true);
    });
    return;
  }
  var _0x8e22x1 = typeof _0x8e22x8 === _0xee2b[308] ? _0x8e22x8 : _0x8e22x8[_0xee2b[1719]];
  if (!_0x8e22x1) {
    throw new Error(_0xee2b[3410]);
  }
  if (_0x8e22x1 === _0xee2b[2006]) {
    _0x8e22x1 = _0xee2b[2430];
  }
  var _0x8e22x3;
  if (_0x8e22x8[_0xee2b[1725]]) {
    _0x8e22x3 = [_0x8e22x8[_0xee2b[1725]], _0x8e22x8[_0xee2b[1138]] || null, _0x8e22x8[_0xee2b[1139]] || null];
  }
  if (_0x8e22x1 === _0x8e22xa[_0xee2b[1719]] && !_0x8e22x4) {
    _0x8e22x3 && _0x8e22xa[_0xee2b[2780]][_0xee2b[8]](_0x8e22xa, _0x8e22x3);
    return;
  }
  if (_0x8e22xa[_0xee2b[180]](_0xee2b[3411], _0x8e22xa, _0x8e22x8) !== false) {
    _0x8e22xa[_0xee2b[1719]] = _0x8e22x1;
    var _0x8e22x7 = _0x8e22xa[_0xee2b[3380]], _0x8e22x9 = _0x8e22xa[_0xee2b[808]](), _0x8e22x2 = _0x8e22x7[_0xee2b[1848]];
    _0x8e22xa[_0xee2b[3412]]();
    Ext[_0xee2b[2839]]();
    _0x8e22xa[_0xee2b[3389]]();
    _0x8e22xa[_0xee2b[3413]]();
    var _0x8e22xd = _0x8e22xa[_0xee2b[1847]]();
    var _0x8e22x5 = _0x8e22x9[_0xee2b[1847]]();
    if (_0x8e22x5 && !_0x8e22xd || !_0x8e22x5 && _0x8e22xd) {
      _0x8e22x3 = _0x8e22x3 || _0x8e22xa[_0xee2b[2801]] || [_0x8e22xd ? _0xee2b[521] : _0xee2b[2753]];
      _0x8e22xa[_0xee2b[2801]] = [_0x8e22xa[_0xee2b[1725]], _0x8e22xa[_0xee2b[1795]][_0xee2b[697]](), _0x8e22xa[_0xee2b[1795]][_0xee2b[698]]()];
    }
    _0x8e22x9[_0xee2b[1720]](_0x8e22x1);
    _0x8e22x2[_0xee2b[254]](true);
    _0x8e22xa[_0xee2b[3379]]();
    switch(_0x8e22x1) {
      case _0xee2b[1931]:
        _0x8e22xa[_0xee2b[3414]]();
        break;
      case _0xee2b[1932]:
        _0x8e22xa[_0xee2b[3415]]();
        break;
      case _0xee2b[2430]:
        _0x8e22xa[_0xee2b[3416]]();
        break;
    }
    _0x8e22x3 && _0x8e22xa[_0xee2b[2780]][_0xee2b[8]](_0x8e22xa, _0x8e22x3);
    _0x8e22xa[_0xee2b[3417]](false);
    var _0x8e22x6 = _0x8e22xa[_0xee2b[3418]]();
    if (_0x8e22x6) {
      _0x8e22x6[_0xee2b[3419]](_0x8e22x1 === _0xee2b[1931]);
    }
    _0x8e22xa[_0xee2b[2543]](false);
    Ext[_0xee2b[2841]](true);
    _0x8e22xa[_0xee2b[180]](_0xee2b[3420], _0x8e22xa, _0x8e22x8);
  }
}, configureHorizontalMode:function() {
  var _0x8e22x6 = this;
  var _0x8e22x4 = _0x8e22x6[_0xee2b[808]]();
  _0x8e22x6[_0xee2b[1795]][_0xee2b[1720]](_0xee2b[1717]);
  _0x8e22x6[_0xee2b[267]](_0x8e22x6[_0xee2b[3423]])[_0xee2b[267]](_0x8e22x6[_0xee2b[3422]])[_0xee2b[264]](_0x8e22x6[_0xee2b[3421]]);
  _0x8e22x6[_0xee2b[3356]](false);
  _0x8e22x6[_0xee2b[325]](_0x8e22x6[_0xee2b[1302]], _0x8e22x6[_0xee2b[2541]]);
  _0x8e22x6[_0xee2b[325]](_0x8e22x6[_0xee2b[1302]], _0x8e22x6[_0xee2b[2542]]);
  _0x8e22x6[_0xee2b[3380]][_0xee2b[152]](_0x8e22x6[_0xee2b[3350]]);
  _0x8e22x4[_0xee2b[2811]](_0x8e22x6[_0xee2b[2864]](), true);
  _0x8e22x6[_0xee2b[1723]](_0x8e22x6[_0xee2b[1302]], _0x8e22x6[_0xee2b[3400]]);
  if (_0x8e22x6[_0xee2b[3424]] !== null) {
    _0x8e22x6[_0xee2b[1830]][_0xee2b[839]](_0x8e22x6[_0xee2b[3424]]);
  }
  var _0x8e22x3 = _0x8e22x6[_0xee2b[1302]][_0xee2b[2856]];
  if (_0x8e22x3) {
    _0x8e22x6[_0xee2b[64]][_0xee2b[3376]](_0x8e22x3);
  }
  _0x8e22x6[_0xee2b[325]](_0x8e22x6[_0xee2b[1795]], _0x8e22x6[_0xee2b[3348]]);
}, configureVerticalMode:function() {
  var _0x8e22x6 = this;
  var _0x8e22x4 = _0x8e22x6[_0xee2b[808]]();
  _0x8e22x6[_0xee2b[267]](_0x8e22x6[_0xee2b[3421]])[_0xee2b[267]](_0x8e22x6[_0xee2b[3422]])[_0xee2b[264]](_0x8e22x6[_0xee2b[3423]]);
  _0x8e22x6[_0xee2b[3356]](true);
  _0x8e22x6[_0xee2b[3380]][_0xee2b[152]](_0x8e22x6[_0xee2b[3350]]);
  _0x8e22x6[_0xee2b[325]](_0x8e22x6[_0xee2b[1302]], _0x8e22x6[_0xee2b[2542]]);
  var _0x8e22x3 = 0;
  if (_0x8e22x6[_0xee2b[262]]) {
    _0x8e22x6[_0xee2b[3424]] = _0x8e22x6[_0xee2b[1830]][_0xee2b[793]]();
  }
  _0x8e22x6[_0xee2b[252]](_0x8e22x6[_0xee2b[1302]], _0x8e22x6[_0xee2b[2541]]);
  _0x8e22x6[_0xee2b[3377]]();
  _0x8e22x6[_0xee2b[1723]](_0x8e22x6[_0xee2b[1795]], _0x8e22x6[_0xee2b[3368]][_0xee2b[318]](_0x8e22x6[_0xee2b[3375]](_0x8e22x6[_0xee2b[2582]] || _0x8e22x6[_0xee2b[810]][_0xee2b[2582]])));
  Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x6[_0xee2b[1830]][_0xee2b[2573]](_0xee2b[3425]), function(_0x8e22x5) {
    _0x8e22x3 += _0x8e22x5[_0xee2b[262]] ? _0x8e22x5[_0xee2b[793]]() : _0x8e22x5[_0xee2b[773]] || 100;
  });
  _0x8e22x4[_0xee2b[2833]](_0x8e22x6[_0xee2b[810]][_0xee2b[2582]] || 100, true);
  _0x8e22x6[_0xee2b[1830]][_0xee2b[839]](_0x8e22x3);
}, configureWeekViewMode:function() {
  var _0x8e22x3 = this;
  var _0x8e22x6 = _0x8e22x3[_0xee2b[3380]], _0x8e22x4 = _0x8e22x3[_0xee2b[808]]();
  _0x8e22x3[_0xee2b[267]](_0x8e22x3[_0xee2b[3421]])[_0xee2b[267]](_0x8e22x3[_0xee2b[3423]])[_0xee2b[264]](_0x8e22x3[_0xee2b[3422]]);
  _0x8e22x3[_0xee2b[3356]](true);
  _0x8e22x3[_0xee2b[1795]][_0xee2b[1720]](_0xee2b[521]);
  _0x8e22x3[_0xee2b[325]](_0x8e22x3[_0xee2b[1302]], _0x8e22x3[_0xee2b[2541]]);
  _0x8e22x3[_0xee2b[252]](_0x8e22x3[_0xee2b[1302]], _0x8e22x3[_0xee2b[2542]]);
  _0x8e22x3[_0xee2b[3380]][_0xee2b[149]](_0x8e22x3[_0xee2b[3350]]);
  _0x8e22x3[_0xee2b[3377]]();
  _0x8e22x3[_0xee2b[3349]]();
  _0x8e22x4[_0xee2b[2811]](_0x8e22x3[_0xee2b[2864]](), true);
  _0x8e22x4[_0xee2b[2833]](_0x8e22x3[_0xee2b[810]][_0xee2b[2733]] || 100, true);
  _0x8e22x3[_0xee2b[252]](_0x8e22x3[_0xee2b[1795]], _0x8e22x3[_0xee2b[3348]]);
}, addDockedAllDayHeader:function() {
  var _0x8e22x3 = this;
  if (_0x8e22x3[_0xee2b[2878]]) {
    _0x8e22x3[_0xee2b[3426]] = _0x8e22x3[_0xee2b[1830]][_0xee2b[3429]]({xtype:_0xee2b[2948], dock:_0xee2b[686], cls:[_0xee2b[3427], Ext[_0xee2b[238]] + _0xee2b[3428]], height:24, weight:100, html:_0x8e22x3.L(_0xee2b[539])})[0];
    _0x8e22x3[_0xee2b[2544]] = _0x8e22x3[_0xee2b[3380]][_0xee2b[3429]]({xtype:_0xee2b[3430], height:24, weight:100, lockedHeaderPartner:_0x8e22x3[_0xee2b[3426]], eventSelModel:_0x8e22x3[_0xee2b[3238]] && !_0x8e22x3[_0xee2b[3238]][_0xee2b[3239]] ? _0x8e22x3[_0xee2b[3238]] : null, mainScheduler:_0x8e22x3})[0];
  }
}, destroyDockedAllDayHeader:function() {
  var _0x8e22x3 = this;
  if (_0x8e22x3[_0xee2b[3426]]) {
    _0x8e22x3[_0xee2b[3426]][_0xee2b[218]]();
    _0x8e22x3[_0xee2b[2544]][_0xee2b[218]]();
    _0x8e22x3[_0xee2b[3426]] = _0x8e22x3[_0xee2b[2544]] = null;
  }
}, reconfigureBufferedRendering:function(_0x8e22x4) {
  var _0x8e22x2 = this;
  if (_0x8e22x2[_0xee2b[2478]] && _0x8e22x2[_0xee2b[262]]) {
    var _0x8e22x6 = _0x8e22x2[_0xee2b[1830]][_0xee2b[2478]], _0x8e22x5 = _0x8e22x2[_0xee2b[3380]][_0xee2b[2478]], _0x8e22x1;
    if (!_0x8e22x2[_0xee2b[1828]]()) {
      _0x8e22x1 = _0x8e22x2[_0xee2b[1795]][_0xee2b[1466]]();
      _0x8e22x2[_0xee2b[3431]] = _0x8e22x6[_0xee2b[3432]];
    } else {
      if (_0x8e22x2[_0xee2b[3431]]) {
        _0x8e22x1 = _0x8e22x2[_0xee2b[3431]];
        _0x8e22x2[_0xee2b[3431]] = null;
      }
    }
    if (!_0x8e22x4 && _0x8e22x6[_0xee2b[3040]] && _0x8e22x6[_0xee2b[3040]][_0xee2b[3433]]()) {
      var _0x8e22x3 = _0x8e22x2[_0xee2b[1830]][_0xee2b[829]][_0xee2b[859]](), _0x8e22x9 = Math[_0xee2b[1194]](_0x8e22x3 / _0x8e22x6[_0xee2b[2678]]) + _0x8e22x6[_0xee2b[3434]] + _0x8e22x1;
      _0x8e22x6[_0xee2b[3435]](_0x8e22x9, true);
      _0x8e22x5[_0xee2b[3435]](_0x8e22x9, true);
    }
    _0x8e22x6[_0xee2b[3432]] = _0x8e22x5[_0xee2b[3432]] = _0x8e22x1;
  }
}, createCalendarRows:function() {
  var _0x8e22x3 = this, _0x8e22x6 = _0x8e22x3[_0xee2b[1795]][_0xee2b[3436]]();
  _0x8e22x3[_0xee2b[810]][_0xee2b[2731]] = _0x8e22x6[_0xee2b[4]];
  return new Ext[_0xee2b[22]].Store({model:_0xee2b[1714], data:_0x8e22x6});
}, createCalendarColumns:function() {
  var _0x8e22x5 = this, _0x8e22x2 = _0x8e22x5[_0xee2b[1795]], _0x8e22x1 = _0x8e22x2[_0xee2b[875]][_0xee2b[753]], _0x8e22x6 = [], _0x8e22x9;
  var _0x8e22x4 = _0x8e22x5[_0xee2b[1119]] = _0x8e22x2[_0xee2b[1119]];
  var _0x8e22x3 = _0x8e22x5[_0xee2b[1121]] = _0x8e22x2[_0xee2b[1121]];
  _0x8e22x2[_0xee2b[25]](function(_0x8e22xa) {
    var _0x8e22xd = _0x8e22xa[_0xee2b[712]]();
    if (_0x8e22x9 !== _0x8e22xd[_0xee2b[484]]()) {
      _0x8e22x9 = _0x8e22xd[_0xee2b[484]]();
      _0x8e22xd[_0xee2b[1155]](_0x8e22x4);
      var _0x8e22x7 = new Date(_0x8e22xd);
      _0x8e22x7[_0xee2b[1155]](_0x8e22x3);
      var _0x8e22x8 = {xclass:_0x8e22x5[_0xee2b[3437]], renderer:_0x8e22x5[_0xee2b[2551]], scope:_0x8e22x5, start:_0x8e22xd, end:_0x8e22x7};
      if (_0x8e22x1[_0xee2b[878]]) {
        _0x8e22x8[_0xee2b[3438]] = _0x8e22x1[_0xee2b[878]][_0xee2b[293]](_0x8e22x1[_0xee2b[689]] || _0x8e22x5, _0x8e22xd, _0x8e22x7, _0x8e22x8, _0x8e22x6[_0xee2b[4]], _0x8e22x5[_0xee2b[696]]());
      } else {
        _0x8e22x8[_0xee2b[3438]] = Ext[_0xee2b[703]][_0xee2b[880]](_0x8e22xd, _0x8e22x1[_0xee2b[879]]);
      }
      _0x8e22x6[_0xee2b[11]](_0x8e22x8);
    }
  });
  _0x8e22x5[_0xee2b[810]][_0xee2b[3439]](_0x8e22x6);
  return _0x8e22x6;
}, onNormalViewItemUpdate:function(_0x8e22x3) {
  if (this[_0xee2b[3234]]) {
    var _0x8e22x6 = this[_0xee2b[1830]][_0xee2b[290]]();
    _0x8e22x6[_0xee2b[453]]();
    _0x8e22x6[_0xee2b[2323]](_0x8e22x6[_0xee2b[147]](_0x8e22x3));
    if (this[_0xee2b[2472]]) {
      this[_0xee2b[3440]]();
    }
    _0x8e22x6[_0xee2b[455]]();
  }
}, onLockedViewResize:function(_0x8e22x5, _0x8e22x4, _0x8e22x3, _0x8e22x6, _0x8e22x2) {
  if (!this[_0xee2b[1828]]() && _0x8e22x3 !== _0x8e22x2) {
    this[_0xee2b[810]][_0xee2b[724]](_0x8e22x3 - 21);
  }
}, setRowHeight:function(_0x8e22x3, _0x8e22x6) {
  _0x8e22x6 = _0x8e22x6 || !this[_0xee2b[1830]];
  this[_0xee2b[2808]] = false;
  this[_0xee2b[810]][_0xee2b[2895]](_0x8e22x3, _0x8e22x6);
}, handleTimelineKeyEvent:function(_0x8e22x5) {
  var _0x8e22x4 = this, _0x8e22x3 = _0x8e22x4[_0xee2b[808]](), _0x8e22x1 = _0x8e22x3[_0xee2b[2256]](), _0x8e22x6 = _0x8e22x1[_0xee2b[3314]]();
  if (_0x8e22x6[_0xee2b[4]]) {
    _0x8e22x3[_0xee2b[180]](_0x8e22x3[_0xee2b[3092]] + _0x8e22x5[_0xee2b[249]], _0x8e22x3, _0x8e22x6[_0xee2b[204]](), _0x8e22x5);
  }
}, handleTimelineEventClick:function() {
  if (Ext[_0xee2b[3386]]) {
    this[_0xee2b[3380]][_0xee2b[265]][_0xee2b[3210]]();
  } else {
    this[_0xee2b[808]]()[_0xee2b[265]][_0xee2b[3210]]();
  }
}});
Ext[_0xee2b[6]](_0xee2b[3441], {extend:_0xee2b[1878], alias:_0xee2b[3442], mixins:[_0xee2b[665]], requires:[_0xee2b[1716]], updateInterval:60000, showHeaderElements:true, autoUpdate:true, expandToFitView:true, timer:null, init:function(_0x8e22x6) {
  var _0x8e22x3 = this;
  if (Ext[_0xee2b[2009]](_0xee2b[722])) {
    _0x8e22x3[_0xee2b[1820]] = false;
  }
  _0x8e22x3[_0xee2b[64]] = new Ext[_0xee2b[22]].JsonStore({autoDestroy:true, fields:[_0xee2b[703], _0xee2b[1109], _0xee2b[1889]], data:[{Date:new Date(), Cls:_0xee2b[3443], Text:_0x8e22x3.L(_0xee2b[3444])}]});
  if (_0x8e22x3[_0xee2b[3445]]) {
    _0x8e22x3[_0xee2b[1487]] = setInterval(function() {
      _0x8e22x3[_0xee2b[3446]]();
    }, _0x8e22x3[_0xee2b[3447]]);
  }
  _0x8e22x3[_0xee2b[3446]]();
  _0x8e22x3[_0xee2b[9]](arguments);
}, updateDate:function() {
  var _0x8e22x6 = this, _0x8e22x3 = _0x8e22x6[_0xee2b[64]][_0xee2b[572]]();
  _0x8e22x3[_0xee2b[50]](_0xee2b[703], new Date());
}, destroy:function() {
  var _0x8e22x3 = this;
  clearInterval(_0x8e22x3[_0xee2b[1487]]);
  _0x8e22x3[_0xee2b[1487]] = null;
  if (_0x8e22x3[_0xee2b[64]][_0xee2b[1875]]) {
    _0x8e22x3[_0xee2b[64]][_0xee2b[218]]();
  }
  _0x8e22x3[_0xee2b[9]](arguments);
}});
Ext[_0xee2b[6]](_0xee2b[3448], {extend:_0xee2b[957], target:_0xee2b[2981], minVersion:_0xee2b[2836], overrides:{scrollTo:function() {
  if (this[_0xee2b[3449]] && !this[_0xee2b[3449]]()) {
    if (Sch[_0xee2b[1818]][_0xee2b[3450]] && this[_0xee2b[2948]] instanceof Sch[_0xee2b[1818]][_0xee2b[3450]] || Sch[_0xee2b[1818]][_0xee2b[3451]] && this[_0xee2b[2948]] instanceof Sch[_0xee2b[1818]][_0xee2b[3451]]) {
      return;
    }
  }
  return this[_0xee2b[9]](arguments);
}}});
Ext[_0xee2b[6]](_0xee2b[3452], {extend:_0xee2b[2488], alias:_0xee2b[3453], alternateClassName:_0xee2b[3454], requires:[_0xee2b[109], _0xee2b[1198]], expandToFitView:true, calendar:{type:_0xee2b[2006]}, timeAxis:null, init:function(_0x8e22x3) {
  this[_0xee2b[2006]] = this[_0xee2b[2006]] && Ext[_0xee2b[1072]][_0xee2b[131]](this[_0xee2b[2006]]);
  if (!this[_0xee2b[2006]]) {
    Ext[_0xee2b[1182]][_0xee2b[3]](_0xee2b[3455]);
  }
  this[_0xee2b[64]] = new Ext[_0xee2b[22]].Store({model:_0xee2b[1198], autoDestroy:true});
  this[_0xee2b[1795]] = _0x8e22x3[_0xee2b[695]]();
  this[_0xee2b[9]](arguments);
  if (_0x8e22x3[_0xee2b[1847]]()) {
    _0x8e22x3[_0xee2b[3380]][_0xee2b[1848]][_0xee2b[149]](_0xee2b[833], this[_0xee2b[2946]], this);
  } else {
    _0x8e22x3[_0xee2b[149]](_0xee2b[2804], this[_0xee2b[2946]], this);
  }
  this[_0xee2b[3456]](this[_0xee2b[2006]]);
}, bindCalendar:function(_0x8e22x6) {
  var _0x8e22x3 = {datachanged:this[_0xee2b[770]], update:this[_0xee2b[770]], scope:this, delay:1};
  if (this[_0xee2b[2006]]) {
    this[_0xee2b[2006]][_0xee2b[152]](_0x8e22x3);
  }
  if (_0x8e22x6) {
    _0x8e22x6[_0xee2b[149]](_0x8e22x3);
  }
  this[_0xee2b[2006]] = _0x8e22x6;
  this[_0xee2b[770]]();
}, onViewReady:function() {
  this[_0xee2b[9]](arguments);
  if (this[_0xee2b[1817]][_0xee2b[1847]]()) {
    this[_0xee2b[1843]]();
    this[_0xee2b[1846]] = {};
  }
}, onViewChange:function() {
  var _0x8e22x6 = Sch[_0xee2b[49]][_0xee2b[703]];
  var _0x8e22x3 = _0x8e22x6[_0xee2b[3457]](this[_0xee2b[1795]][_0xee2b[1734]], _0x8e22x6.WEEK);
  this[_0xee2b[253]](_0x8e22x3);
  if (!_0x8e22x3) {
    this[_0xee2b[770]]();
  }
}, setDisabled:function(_0x8e22x6) {
  var _0x8e22x3 = this[_0xee2b[144]];
  this[_0xee2b[9]](arguments);
  if (_0x8e22x3 && !_0x8e22x6) {
    this[_0xee2b[770]]();
  }
}, refresh:function() {
  if (this[_0xee2b[64]] && !this[_0xee2b[64]][_0xee2b[458]]) {
    this[_0xee2b[64]][_0xee2b[254]](true);
    if (this[_0xee2b[2006]]) {
      this[_0xee2b[64]][_0xee2b[255]](this[_0xee2b[2006]][_0xee2b[3458]](this[_0xee2b[1795]][_0xee2b[697]](), this[_0xee2b[1795]][_0xee2b[698]](), true));
    }
  }
}, destroy:function() {
  this[_0xee2b[3456]](null);
  this[_0xee2b[9]](arguments);
}});
Ext[_0xee2b[6]](_0xee2b[3459], {extend:_0xee2b[2799], requires:[_0xee2b[814], _0xee2b[2683], _0xee2b[1209], _0xee2b[3441], _0xee2b[2463], _0xee2b[3448], _0xee2b[3452], _0xee2b[3460]], uses:[_0xee2b[3461], _0xee2b[3462], _0xee2b[3463], _0xee2b[3464], _0xee2b[3465], _0xee2b[3466], _0xee2b[3467], _0xee2b[3468], _0xee2b[3469], _0xee2b[3470], _0xee2b[3452]], mixins:[_0xee2b[2747], _0xee2b[2939]], destroyStores:false, bufferCoef:5, bufferThreshold:0.2, infiniteScroll:false, showCrudManagerMask:true, highlightWeekends:false, 
zoomOnTimeAxisDoubleClick:true, switchToDayViewOnWeekDayHeaderDblClick:true, waitingForAutoTimeSpan:false, showTodayLine:false, calendar:null, horizontalTimeAxisColumnCfg:null, columnLinesFeature:null, renderWaitListener:null, enablePinchZoom:true, schedulePinchThreshold:30, pinchStartDistanceX:null, pinchStartDistanceY:null, pinchDistanceX:null, pinchDistanceY:null, horizontalColumns:null, forceDefineTimeSpanByStore:false, workingTimePlugin:null, split:true, refreshSuspensionCount:0, tipCfg:{cls:_0xee2b[3471], 
showDelay:400, hideDelay:0, constrain:true, autoHide:true, anchor:_0xee2b[3047]}, inheritables:function() {
  return {columnLines:true, enableLocking:true, lockable:true, stateEvents:[_0xee2b[2804]], syncRowHeight:false, layout:_0xee2b[3472], initComponent:function() {
    if (this[_0xee2b[2940]]) {
      if (typeof this[_0xee2b[2940]] === _0xee2b[308]) {
        this[_0xee2b[2940]] = Ext[_0xee2b[800]](this[_0xee2b[2940]]);
      }
      this[_0xee2b[810]] = this[_0xee2b[2940]][_0xee2b[810]];
      this[_0xee2b[1795]] = this[_0xee2b[2940]][_0xee2b[695]]();
      this[_0xee2b[1138]] = this[_0xee2b[1795]][_0xee2b[697]]();
      this[_0xee2b[1139]] = this[_0xee2b[1795]][_0xee2b[698]]();
    }
    this._initializeTimelinePanel();
    this[_0xee2b[3473]]();
    this[_0xee2b[2715]] = false;
    this[_0xee2b[3474]](this[_0xee2b[3374]]);
    if (Ext[_0xee2b[2009]]()[_0xee2b[964]](_0xee2b[3475])) {
      this[_0xee2b[3476]] = Ext[_0xee2b[8]](this[_0xee2b[3476]] || {}, {componentLayout:_0xee2b[3477]});
    }
    var _0x8e22x5 = this[_0xee2b[3346]] = this[_0xee2b[3346]] || {};
    var _0x8e22x9 = this[_0xee2b[32]]();
    Ext[_0xee2b[8]](this[_0xee2b[3346]], {id:_0x8e22x9 + _0xee2b[3478], eventPrefix:this[_0xee2b[3346]][_0xee2b[2560]] || (this[_0xee2b[3479]] ? null : _0x8e22x9), timeAxisViewModel:this[_0xee2b[810]], eventBorderWidth:this[_0xee2b[2577]], timeAxis:this[_0xee2b[1795]], readOnly:this[_0xee2b[2887]], mode:this[_0xee2b[1719]], rtl:this[_0xee2b[1855]], cellBorderWidth:this[_0xee2b[2583]], cellTopBorderWidth:this[_0xee2b[2584]], cellBottomBorderWidth:this[_0xee2b[2848]], infiniteScroll:this[_0xee2b[2829]], 
    bufferCoef:this[_0xee2b[3145]], bufferThreshold:this[_0xee2b[3144]]});
    Ext[_0xee2b[1054]](_0x8e22x5, this, [_0xee2b[2645], _0xee2b[2644], _0xee2b[3268], _0xee2b[3261], _0xee2b[3270], _0xee2b[3082], _0xee2b[2077], _0xee2b[2622], _0xee2b[3263], _0xee2b[3269], _0xee2b[3272], _0xee2b[3262], _0xee2b[3271], _0xee2b[3110], _0xee2b[2060]], true);
    this[_0xee2b[9]](arguments);
    this[_0xee2b[1830]][_0xee2b[829]][_0xee2b[264]](_0xee2b[3480]);
    if (this[_0xee2b[1855]]) {
      this[_0xee2b[1830]][_0xee2b[829]][_0xee2b[264]](_0xee2b[3481]);
      this[_0xee2b[264]](_0xee2b[3482]);
    } else {
      this[_0xee2b[264]](_0xee2b[3483]);
    }
    var _0x8e22x3 = this[_0xee2b[3484]] = [][_0xee2b[318]](this[_0xee2b[3484]] || []);
    if (this[_0xee2b[3485]]) {
      var _0x8e22x1 = this[_0xee2b[1296]]();
      _0x8e22x1 = _0x8e22x1 && Ext[_0xee2b[1072]][_0xee2b[131]](_0x8e22x1) || new Sch[_0xee2b[22]].Calendar();
      this[_0xee2b[3486]] = new Sch[_0xee2b[3362]].NonWorkingTime({calendar:_0x8e22x1});
      this[_0xee2b[810]][_0xee2b[2087]](_0x8e22x1);
      _0x8e22x3[_0xee2b[11]](this[_0xee2b[3486]]);
      this[_0xee2b[264]](_0xee2b[3487]);
    }
    if (this[_0xee2b[3488]]) {
      this[_0xee2b[3489]] = new Sch[_0xee2b[3362]].CurrentTimeLine();
      _0x8e22x3[_0xee2b[11]](this[_0xee2b[3489]]);
    }
    this[_0xee2b[3490]](this);
    if (Ext[_0xee2b[1952]][_0xee2b[1951]]) {
      this[_0xee2b[810]][_0xee2b[149]](_0xee2b[724], this[_0xee2b[3491]], this);
    }
    this[_0xee2b[2780]](this[_0xee2b[1725]], this[_0xee2b[1138]] || this[_0xee2b[1795]][_0xee2b[697]](), this[_0xee2b[1139]] || this[_0xee2b[1795]][_0xee2b[698]](), true);
    if (!this[_0xee2b[1138]]) {
      var _0x8e22x2 = this[_0xee2b[312]];
      if (_0x8e22x2 && !_0x8e22x2[_0xee2b[106]]) {
        this[_0xee2b[3492]]();
      } else {
        var _0x8e22x6 = this[_0xee2b[3493]]();
        if (_0x8e22x6[_0xee2b[234]] ? _0x8e22x6[_0xee2b[230]]() && _0x8e22x6[_0xee2b[230]]()[_0xee2b[925]][_0xee2b[4]] : _0x8e22x6[_0xee2b[1466]]()) {
          this[_0xee2b[3494]]();
        } else {
          if (_0x8e22x6[_0xee2b[233]]() || this[_0xee2b[3495]]) {
            this[_0xee2b[3492]]();
          }
        }
      }
    }
    var _0x8e22x4 = this[_0xee2b[3496]];
    if (_0x8e22x4) {
      this[_0xee2b[3497]] = new Sch[_0xee2b[822]].ColumnLines(Ext[_0xee2b[135]](_0x8e22x4) ? _0x8e22x4 : undefined);
      this[_0xee2b[3497]][_0xee2b[1809]](this);
      this[_0xee2b[3496]] = true;
    }
    this[_0xee2b[846]](this[_0xee2b[808]](), [_0xee2b[3080], _0xee2b[3498], _0xee2b[3499], _0xee2b[3500], _0xee2b[3501], _0xee2b[3502], _0xee2b[3503], _0xee2b[3504]]);
    this[_0xee2b[149]](_0xee2b[2781], function() {
      this[_0xee2b[3380]][_0xee2b[3293]][_0xee2b[1499]]();
    });
    if (this[_0xee2b[312]]) {
      if (!this[_0xee2b[312]][_0xee2b[65]] && this[_0xee2b[3505]]) {
        this[_0xee2b[252]](this[_0xee2b[312]], {beforesend:this[_0xee2b[3506]], synccanceled:this[_0xee2b[3507]], loadcanceled:this[_0xee2b[3507]], load:this[_0xee2b[3507]], sync:this[_0xee2b[3507]], requestfail:this[_0xee2b[3507]], scope:this});
        if (this[_0xee2b[312]][_0xee2b[233]]()) {
          this[_0xee2b[3506]](this[_0xee2b[312]], null, _0xee2b[302]);
        }
      }
      this[_0xee2b[252]](this[_0xee2b[312]], {beforeloadapply:this[_0xee2b[3508]], load:this[_0xee2b[3509]], scope:this});
    }
    if (Ext[_0xee2b[962]]) {
      this[_0xee2b[3510]](this);
    }
    this[_0xee2b[3511]]();
  }, refreshHeaderContainerScrollable:function() {
    var _0x8e22x6 = this[_0xee2b[808]]()[_0xee2b[1848]][_0xee2b[1941]]();
    if (!_0x8e22x6) {
      return;
    }
    if (Ext[_0xee2b[2009]]()[_0xee2b[968]](_0xee2b[3134])) {
      var _0x8e22x3 = _0x8e22x6[_0xee2b[3512]];
      _0x8e22x6[_0xee2b[3512]] = true;
      _0x8e22x6[_0xee2b[770]]();
      _0x8e22x6[_0xee2b[3513]]();
      _0x8e22x6[_0xee2b[3512]] = _0x8e22x3;
    } else {
      _0x8e22x6[_0xee2b[770]]();
    }
  }, getState:function() {
    var _0x8e22x3 = this, _0x8e22x6 = _0x8e22x3[_0xee2b[9]](arguments);
    Ext[_0xee2b[8]](_0x8e22x6, {viewPreset:_0x8e22x3[_0xee2b[1725]], startDate:_0x8e22x3[_0xee2b[697]](), endDate:_0x8e22x3[_0xee2b[698]](), zoomMinLevel:_0x8e22x3[_0xee2b[3514]], zoomMaxLevel:_0x8e22x3[_0xee2b[3515]], currentZoomLevel:_0x8e22x3[_0xee2b[3516]]});
    return _0x8e22x6;
  }, applyState:function(_0x8e22x6) {
    var _0x8e22x3 = this;
    _0x8e22x3[_0xee2b[9]](arguments);
    if (_0x8e22x6 && _0x8e22x6[_0xee2b[1725]]) {
      _0x8e22x3[_0xee2b[2780]](_0x8e22x6[_0xee2b[1725]], _0x8e22x6[_0xee2b[1138]], _0x8e22x6[_0xee2b[1139]]);
    }
    if (_0x8e22x6 && _0x8e22x6[_0xee2b[3516]]) {
      _0x8e22x3[_0xee2b[2772]](_0x8e22x6[_0xee2b[3516]]);
    }
  }, setTimeSpan:function() {
    this[_0xee2b[9]](arguments);
    if (this[_0xee2b[3517]]) {
      this[_0xee2b[3518]](false);
      this[_0xee2b[290]]()[_0xee2b[770]]();
    }
    if (!this[_0xee2b[3380]][_0xee2b[290]]()[_0xee2b[2366]]) {
      this[_0xee2b[290]]()[_0xee2b[770]]();
    }
  }, onBoxReady:function() {
    var _0x8e22x3 = this;
    _0x8e22x3[_0xee2b[9]](arguments);
    if (_0x8e22x3[_0xee2b[2940]]) {
      if (_0x8e22x3[_0xee2b[2940]][_0xee2b[262]]) {
        _0x8e22x3[_0xee2b[3519]](_0x8e22x3[_0xee2b[2940]]);
      } else {
        _0x8e22x3[_0xee2b[2940]][_0xee2b[149]](_0xee2b[2046], _0x8e22x3[_0xee2b[3519]], _0x8e22x3);
      }
    }
    _0x8e22x3[_0xee2b[3380]][_0xee2b[149]]({collapse:_0x8e22x3[_0xee2b[3520]], expand:_0x8e22x3[_0xee2b[3521]], scope:_0x8e22x3});
    _0x8e22x3[_0xee2b[3380]][_0xee2b[1848]][_0xee2b[265]][_0xee2b[149]]({click:_0x8e22x3[_0xee2b[3522]], dblclick:_0x8e22x3[_0xee2b[3522]], contextmenu:_0x8e22x3[_0xee2b[3522]], delegate:_0xee2b[3523], scope:_0x8e22x3});
    _0x8e22x3[_0xee2b[1830]][_0xee2b[149]]({collapse:_0x8e22x3[_0xee2b[3524]], expand:_0x8e22x3[_0xee2b[3525]], scope:_0x8e22x3});
    _0x8e22x3[_0xee2b[1830]][_0xee2b[149]]({itemdblclick:_0x8e22x3[_0xee2b[3526]], scope:_0x8e22x3});
    if (_0x8e22x3[_0xee2b[3527]] && Ext[_0xee2b[1952]][_0xee2b[1951]]) {
      this[_0xee2b[808]]()[_0xee2b[149]]({schedulepinchstart:this[_0xee2b[3528]], schedulepinch:this[_0xee2b[3529]], schedulepinchend:this[_0xee2b[3530]], scope:this});
    }
  }};
}, scrollToDate:function(_0x8e22x4, _0x8e22x6) {
  var _0x8e22x3 = this[_0xee2b[808]]();
  if (_0x8e22x3[_0xee2b[1847]]()) {
    var _0x8e22x5 = _0x8e22x3[_0xee2b[2430]][_0xee2b[3214]](function(_0x8e22x2) {
      return _0x8e22x2[_0xee2b[179]] <= _0x8e22x4 && _0x8e22x2[_0xee2b[771]] > _0x8e22x4;
    })[0];
    if (_0x8e22x5) {
      _0x8e22x3[_0xee2b[2838]](_0x8e22x5[_0xee2b[3390]]());
      _0x8e22x3[_0xee2b[2835]](_0x8e22x3[_0xee2b[1895]](_0x8e22x4, true));
    }
  } else {
    return this[_0xee2b[9]](arguments);
  }
}, bindAutoTimeSpanListeners:function() {
  var _0x8e22x3 = this[_0xee2b[3493]]();
  this[_0xee2b[3517]] = true;
  this[_0xee2b[3412]]();
  this[_0xee2b[252]](_0x8e22x3, _0xee2b[302], this[_0xee2b[3494]], this);
  if (_0x8e22x3[_0xee2b[234]]) {
    this[_0xee2b[252]](_0x8e22x3, _0xee2b[3531], this[_0xee2b[3494]], this);
    this[_0xee2b[252]](_0x8e22x3, _0xee2b[3532], this[_0xee2b[3533]], this);
  } else {
    this[_0xee2b[252]](_0x8e22x3, _0xee2b[255], this[_0xee2b[3494]], this);
  }
}, getTimeSpanDefiningStore:function() {
  throw _0xee2b[3534];
}, unbindAutoTimeSpanListeners:function(_0x8e22x6) {
  this[_0xee2b[3517]] = false;
  var _0x8e22x3 = this[_0xee2b[3493]]();
  this[_0xee2b[3417]](_0x8e22x6);
  _0x8e22x3[_0xee2b[152]](_0xee2b[302], this[_0xee2b[3494]], this);
  if (_0x8e22x3[_0xee2b[234]]) {
    _0x8e22x3[_0xee2b[152]](_0xee2b[3531], this[_0xee2b[3494]], this);
    _0x8e22x3[_0xee2b[152]](_0xee2b[3532], this[_0xee2b[3533]], this);
  } else {
    _0x8e22x3[_0xee2b[152]](_0xee2b[255], this[_0xee2b[3494]], this);
  }
}, applyStartEndDatesAfterTreeAppend:function() {
  var _0x8e22x3 = this[_0xee2b[3493]]();
  if (!_0x8e22x3[_0xee2b[1713]] && !_0x8e22x3[_0xee2b[389]]) {
    this[_0xee2b[3494]]();
  }
}, applyStartEndDatesFromStore:function() {
  var _0x8e22x3 = this[_0xee2b[3493]]();
  var _0x8e22x6 = _0x8e22x3[_0xee2b[3535]]();
  if (_0x8e22x6[_0xee2b[771]] && _0x8e22x6[_0xee2b[179]] && _0x8e22x6[_0xee2b[771]] - _0x8e22x6[_0xee2b[179]] === 0) {
    _0x8e22x6[_0xee2b[179]] = Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[255]](_0x8e22x6[_0xee2b[179]], this[_0xee2b[1795]][_0xee2b[1747]], -1);
    _0x8e22x6[_0xee2b[771]] = Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[255]](_0x8e22x6[_0xee2b[771]], this[_0xee2b[1795]][_0xee2b[1747]], 1);
  }
  this[_0xee2b[1756]](_0x8e22x6[_0xee2b[179]] || new Date(), _0x8e22x6[_0xee2b[771]]);
}, onLockedGridItemDblClick:function(_0x8e22x6, _0x8e22x3, _0x8e22x4, _0x8e22x2, _0x8e22x5) {
  if (this[_0xee2b[2539]]() && _0x8e22x3) {
    this[_0xee2b[180]](_0xee2b[842], this, _0x8e22x3[_0xee2b[55]](_0xee2b[179]), _0x8e22x3[_0xee2b[55]](_0xee2b[771]), _0x8e22x2, _0x8e22x5);
  }
}, onHeaderClick:function(_0x8e22x1, _0x8e22x5) {
  var _0x8e22x6 = _0x8e22x1[_0xee2b[2033]](_0xee2b[495] + Ext[_0xee2b[238]] + _0xee2b[3536]);
  var _0x8e22x4 = [][_0xee2b[147]][_0xee2b[293]](_0x8e22x6[_0xee2b[791]][_0xee2b[925]], _0x8e22x6);
  var _0x8e22x2 = this[_0xee2b[3380]][_0xee2b[1863]]()[_0x8e22x4];
  if (Sch[_0xee2b[2963]][_0xee2b[3537]] && _0x8e22x2 instanceof Sch[_0xee2b[2963]][_0xee2b[3537]]) {
    var _0x8e22x9 = _0x8e22x2[_0xee2b[179]];
    var _0x8e22x3 = _0x8e22x2[_0xee2b[771]];
    this[_0xee2b[180]](_0xee2b[779] + _0x8e22x1[_0xee2b[249]], this, _0x8e22x9, _0x8e22x3, _0x8e22x1);
    if (_0x8e22x1[_0xee2b[249]] === _0xee2b[743] && this[_0xee2b[3538]]) {
      this[_0xee2b[2780]](_0xee2b[524], _0x8e22x9);
    }
  }
}, getSchedulingView:function() {
  return this[_0xee2b[3380]] && this[_0xee2b[3380]][_0xee2b[829]];
}, getHorizontalTimeAxisColumn:function() {
  var _0x8e22x3 = this[_0xee2b[808]]();
  return _0x8e22x3 && _0x8e22x3[_0xee2b[1829]]();
}, configureColumns:function(_0x8e22x3) {
  var _0x8e22x4 = [];
  var _0x8e22x6 = [];
  _0x8e22x3 = _0x8e22x3 || [];
  if (_0x8e22x3[_0xee2b[266]]) {
    this[_0xee2b[3374]] = Ext[_0xee2b[8]]({}, this[_0xee2b[3374]]);
    _0x8e22x3 = this[_0xee2b[3374]][_0xee2b[266]] = _0x8e22x3[_0xee2b[266]][_0xee2b[191]]();
  } else {
    _0x8e22x3 = this[_0xee2b[3374]] = _0x8e22x3[_0xee2b[191]]();
  }
  Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x3, function(_0x8e22x5) {
    if (_0x8e22x5[_0xee2b[1780]] === _0xee2b[867] || _0x8e22x5[_0xee2b[3539]] === false) {
      if (!Ext[_0xee2b[789]](_0x8e22x5[_0xee2b[773]])) {
        Ext[_0xee2b[1182]][_0xee2b[3]](_0xee2b[3540]);
      }
      _0x8e22x5[_0xee2b[3539]] = false;
      _0x8e22x6[_0xee2b[11]](_0x8e22x5);
    } else {
      _0x8e22x5[_0xee2b[3539]] = true;
      _0x8e22x4[_0xee2b[11]](_0x8e22x5);
    }
    _0x8e22x5[_0xee2b[3541]] = false;
  });
  if (_0x8e22x3[_0xee2b[4]] === 0) {
    this[_0xee2b[496]] = false;
  }
  Ext[_0xee2b[26]][_0xee2b[3542]](_0x8e22x3, 0, _0x8e22x3[_0xee2b[4]]);
  Ext[_0xee2b[26]][_0xee2b[69]](_0x8e22x3, 0, _0x8e22x4[_0xee2b[318]](Ext[_0xee2b[8]]({xtype:_0xee2b[3112], timeAxisViewModel:this[_0xee2b[810]], trackHeaderOver:this[_0xee2b[736]], renderer:this[_0xee2b[2551]], variableRowHeight:this[_0xee2b[3543]], scope:this}, this[_0xee2b[3544]] || {}))[_0xee2b[318]](_0x8e22x6));
  this[_0xee2b[3400]] = _0x8e22x3[_0xee2b[191]]();
}, mainRenderer:function(_0x8e22x4, _0x8e22x10, _0x8e22x9, _0x8e22x8, _0x8e22xd) {
  var _0x8e22x5 = this[_0xee2b[2807]], _0x8e22x2 = this[_0xee2b[2539]]() ? this[_0xee2b[1007]]()[_0xee2b[1752]](_0x8e22xd) : _0x8e22x9, _0x8e22x6 = _0xee2b[2303];
  _0x8e22x10[_0xee2b[2678]] = null;
  for (var _0x8e22x1 = 0; _0x8e22x1 < _0x8e22x5[_0xee2b[4]]; _0x8e22x1++) {
    _0x8e22x6 += _0x8e22x5[_0x8e22x1][_0xee2b[1491]][_0xee2b[293]](_0x8e22x5[_0x8e22x1][_0xee2b[689]] || this, _0x8e22x4, _0x8e22x10, _0x8e22x2, _0x8e22x8, _0x8e22xd) || _0xee2b[27];
  }
  if (this[_0xee2b[3543]]) {
    var _0x8e22x7 = this[_0xee2b[808]]();
    var _0x8e22x3 = _0x8e22x10[_0xee2b[2678]] || this[_0xee2b[2864]]();
    if (_0x8e22x7[_0xee2b[1828]]()) {
      _0x8e22x3 += _0x8e22x7[_0xee2b[2584]] + _0x8e22x7[_0xee2b[2848]] - (_0x8e22x7[_0xee2b[2004]] ? 0 : 1);
    } else {
      _0x8e22x3 -= 1;
    }
    _0x8e22x10[_0xee2b[763]] = _0xee2b[871] + _0x8e22x3 + _0xee2b[804];
  }
  return _0x8e22x6;
}, onNormalGridCollapse:function() {
  var _0x8e22x3 = this;
  if (!_0x8e22x3[_0xee2b[3380]][_0xee2b[3545]]) {
    _0x8e22x3[_0xee2b[3380]][_0xee2b[3545]] = _0x8e22x3[_0xee2b[3380]][_0xee2b[3546]];
  }
  if (!_0x8e22x3[_0xee2b[1830]][_0xee2b[262]]) {
    _0x8e22x3[_0xee2b[1830]][_0xee2b[149]](_0xee2b[748], _0x8e22x3[_0xee2b[3520]], _0x8e22x3, {delay:1});
  } else {
    _0x8e22x3[_0xee2b[1830]][_0xee2b[3547]] = _0x8e22x3[_0xee2b[1830]][_0xee2b[793]]();
    if (_0x8e22x3[_0xee2b[1830]][_0xee2b[2469]]) {
      _0x8e22x3[_0xee2b[1830]][_0xee2b[103]]();
    }
    _0x8e22x3[_0xee2b[1830]][_0xee2b[839]](_0x8e22x3[_0xee2b[793]]() - _0x8e22x3[_0xee2b[3380]][_0xee2b[3548]]()[_0xee2b[793]]());
    _0x8e22x3[_0xee2b[264]](_0xee2b[3549]);
  }
}, onNormalGridExpand:function() {
  this[_0xee2b[267]](_0xee2b[3549]);
}, onLockedGridCollapse:function() {
  var _0x8e22x3 = this;
  if (_0x8e22x3[_0xee2b[3380]][_0xee2b[2469]]) {
    _0x8e22x3[_0xee2b[3380]][_0xee2b[103]]();
  }
}, onLockedGridExpand:function() {
  if (this[_0xee2b[1830]][_0xee2b[3547]]) {
    this[_0xee2b[1830]][_0xee2b[839]](this[_0xee2b[1830]][_0xee2b[3547]]);
  }
}, beforeCrudOperationStart:function(_0x8e22x3, _0x8e22x4, _0x8e22x6) {
  if (this[_0xee2b[262]]) {
    this[_0xee2b[3551]]({msg:_0x8e22x6 === _0xee2b[302] ? this.L(_0xee2b[3232]) : this.L(_0xee2b[3550])});
  } else {
    Ext[_0xee2b[218]](this[_0xee2b[3552]]);
    this[_0xee2b[3552]] = this[_0xee2b[149]](_0xee2b[748], Ext[_0xee2b[283]][_0xee2b[282]](this[_0xee2b[3506]], this, Array[_0xee2b[139]][_0xee2b[191]][_0xee2b[8]](arguments)), this, {delay:1, destroyable:true});
  }
}, onCrudBeforeLoad:function() {
  this[_0xee2b[3412]]();
}, onCrudLoad:function() {
  this[_0xee2b[3417]](true);
}, onCrudOperationComplete:function() {
  Ext[_0xee2b[218]](this[_0xee2b[3552]]);
  this[_0xee2b[3551]](false);
}, onSchedulePinchStart:function(_0x8e22x3, _0x8e22x6) {
  this[_0xee2b[3553]] = Math[_0xee2b[1524]](_0x8e22x6[_0xee2b[1972]][0][_0xee2b[3554]] - _0x8e22x6[_0xee2b[1972]][1][_0xee2b[3554]]);
  this[_0xee2b[3555]] = Math[_0xee2b[1524]](_0x8e22x6[_0xee2b[1972]][0][_0xee2b[3556]] - _0x8e22x6[_0xee2b[1972]][1][_0xee2b[3556]]);
}, onSchedulePinch:function(_0x8e22x3, _0x8e22x6) {
  this[_0xee2b[3557]] = Math[_0xee2b[1524]](_0x8e22x6[_0xee2b[1972]][0][_0xee2b[3554]] - _0x8e22x6[_0xee2b[1972]][1][_0xee2b[3554]]);
  this[_0xee2b[3558]] = Math[_0xee2b[1524]](_0x8e22x6[_0xee2b[1972]][0][_0xee2b[3556]] - _0x8e22x6[_0xee2b[1972]][1][_0xee2b[3556]]);
}, onSchedulePinchEnd:function(_0x8e22x3) {
  var _0x8e22x2 = this[_0xee2b[3557]];
  var _0x8e22x5 = this[_0xee2b[3558]];
  var _0x8e22x1 = this[_0xee2b[1828]]();
  if (Math[_0xee2b[1524]](_0x8e22x2 - this[_0xee2b[3553]]) > this[_0xee2b[3559]]) {
    var _0x8e22x4 = Math[_0xee2b[1524]](_0x8e22x2 / this[_0xee2b[3553]]);
    if (_0x8e22x1) {
      _0x8e22x4 > 1 ? this[_0xee2b[2798]]() : this[_0xee2b[2797]]();
    } else {
      this[_0xee2b[810]][_0xee2b[2607]](_0x8e22x4 * this[_0xee2b[810]][_0xee2b[2582]]);
    }
  }
  if (Math[_0xee2b[1524]](_0x8e22x5 - this[_0xee2b[3555]]) > this[_0xee2b[3559]]) {
    var _0x8e22x6 = Math[_0xee2b[1524]](_0x8e22x5 / this[_0xee2b[3555]]);
    _0x8e22x3[_0xee2b[2811]](_0x8e22x3[_0xee2b[2864]]() * _0x8e22x6);
  }
  this[_0xee2b[3553]] = this[_0xee2b[3555]] = this[_0xee2b[3557]] = this[_0xee2b[3558]] = null;
}, patchNavigationModel:function(_0x8e22x4) {
  _0x8e22x4[_0xee2b[290]]()[_0xee2b[2970]]()[_0xee2b[3560]] = function(_0x8e22x5) {
    _0x8e22x5[_0xee2b[264]](this[_0xee2b[3561]]);
    if ((Ext[_0xee2b[960]] || Ext[_0xee2b[1953]]) && !_0x8e22x5[_0xee2b[3562]](_0xee2b[473]) || !(Ext[_0xee2b[960]] || Ext[_0xee2b[1953]]) && _0x8e22x4[_0xee2b[1828]]()) {
      _0x8e22x5[_0xee2b[3210]]();
    }
  };
  var _0x8e22x6 = _0x8e22x4[_0xee2b[1830]][_0xee2b[290]]();
  var _0x8e22x3 = _0x8e22x4[_0xee2b[3380]][_0xee2b[290]]();
  _0x8e22x6[_0xee2b[149]](_0xee2b[3563], function(_0x8e22x2, _0x8e22x5, _0x8e22x1, _0x8e22x9) {
    if (_0x8e22x3[_0xee2b[3205]]) {
      _0x8e22x3[_0xee2b[3205]][_0xee2b[3564]] = _0x8e22x9;
      _0x8e22x3[_0xee2b[3205]][_0xee2b[933]] = _0x8e22x5;
    } else {
      if (Ext[_0xee2b[960]]) {
        _0x8e22x3[_0xee2b[3205]] = this[_0xee2b[3205]];
      }
    }
  });
  _0x8e22x3[_0xee2b[149]](_0xee2b[3563], function(_0x8e22x2, _0x8e22x5, _0x8e22x1, _0x8e22x9) {
    if (_0x8e22x6[_0xee2b[3205]]) {
      _0x8e22x6[_0xee2b[3205]][_0xee2b[3564]] = _0x8e22x9;
      _0x8e22x6[_0xee2b[3205]][_0xee2b[933]] = _0x8e22x5;
    } else {
      if (Ext[_0xee2b[960]]) {
        _0x8e22x6[_0xee2b[3205]] = this[_0xee2b[3205]];
      }
    }
  });
}, patchHeaderScrollSync:function(_0x8e22x6) {
  function _0x8e22x3() {
    var _0x8e22x5 = _0x8e22x6[_0xee2b[3380]] || _0x8e22x6, _0x8e22x2 = _0x8e22x5[_0xee2b[3565]]();
    if (_0x8e22x6[_0xee2b[262]] && _0x8e22x2 && _0x8e22x2[_0xee2b[1941]]()) {
      _0x8e22x2[_0xee2b[1941]]()[_0xee2b[3566]]();
    }
  }
  function _0x8e22x4() {
    _0x8e22x6[_0xee2b[3567]] && Ext[_0xee2b[218]](_0x8e22x6[_0xee2b[3567]]);
    _0x8e22x6[_0xee2b[3567]] = _0x8e22x6[_0xee2b[64]] && _0x8e22x6[_0xee2b[252]](_0x8e22x6[_0xee2b[64]], {nodeexpand:_0x8e22x3, nodecollapse:_0x8e22x3, buffer:1, destroyable:true});
  }
  _0x8e22x4();
  _0x8e22x6[_0xee2b[149]](_0xee2b[3568], _0x8e22x4);
}, configureChildGrids:function() {
  var _0x8e22x3 = this;
  _0x8e22x3[_0xee2b[3569]] = Ext[_0xee2b[8]]({}, _0x8e22x3[_0xee2b[3569]] || {});
  _0x8e22x3[_0xee2b[3570]] = Ext[_0xee2b[8]]({}, _0x8e22x3[_0xee2b[3571]] || _0x8e22x3[_0xee2b[3570]] || {});
  var _0x8e22x4 = _0x8e22x3[_0xee2b[3569]], _0x8e22x6 = _0x8e22x3[_0xee2b[3570]];
  if (_0x8e22x3[_0xee2b[3572]]) {
    _0x8e22x4[_0xee2b[3573]] = _0x8e22x3[_0xee2b[3572]];
  }
  if (_0x8e22x3[_0xee2b[3574]]) {
    _0x8e22x6[_0xee2b[3573]] = _0x8e22x3[_0xee2b[3574]];
  }
  Ext[_0xee2b[330]](_0x8e22x4, {useArrows:true, animCollapse:false, collapseDirection:_0xee2b[1354], trackMouseOver:false});
  Ext[_0xee2b[330]](_0x8e22x6, {viewType:_0x8e22x3[_0xee2b[3575]], enableColumnMove:false, enableColumnResize:false, enableColumnHide:false, trackMouseOver:false, collapseDirection:_0xee2b[867], collapseMode:_0xee2b[3546], animCollapse:false});
  if (_0x8e22x3[_0xee2b[2539]]()) {
    _0x8e22x4[_0xee2b[64]] = _0x8e22x6[_0xee2b[64]] = _0x8e22x3[_0xee2b[1795]];
  }
  if (_0x8e22x4[_0xee2b[773]]) {
    _0x8e22x3[_0xee2b[3576]] = Ext[_0xee2b[688]];
    _0x8e22x4[_0xee2b[1978]] = Ext[_0xee2b[1952]][_0xee2b[1951]] ? _0xee2b[1911] : _0xee2b[1931];
    _0x8e22x4[_0xee2b[3577]] = true;
  }
}, afterInitComponent:function() {
  var _0x8e22x5 = this;
  var _0x8e22x4 = _0x8e22x5[_0xee2b[1830]][_0xee2b[290]]();
  var _0x8e22x6 = _0x8e22x5[_0xee2b[3380]][_0xee2b[290]]();
  var _0x8e22x3 = _0x8e22x5[_0xee2b[64]] && _0x8e22x5[_0xee2b[64]][_0xee2b[234]];
  if (_0x8e22x5[_0xee2b[3380]][_0xee2b[2469]]) {
    _0x8e22x5[_0xee2b[3380]][_0xee2b[2469]] = false;
    _0x8e22x6[_0xee2b[149]](_0xee2b[2046], function() {
      _0x8e22x5[_0xee2b[3380]][_0xee2b[104]]();
    }, _0x8e22x5, {delay:10});
  }
  if (_0x8e22x5[_0xee2b[1830]][_0xee2b[2469]]) {
    _0x8e22x5[_0xee2b[1830]][_0xee2b[2469]] = false;
    _0x8e22x4[_0xee2b[149]](_0xee2b[2046], function() {
      _0x8e22x5[_0xee2b[1830]][_0xee2b[104]]();
    }, _0x8e22x5, {delay:10});
    if (_0x8e22x4[_0xee2b[2478]]) {
      _0x8e22x4[_0xee2b[2478]][_0xee2b[144]] = true;
    }
  }
  if (_0x8e22x3) {
    this[_0xee2b[3578]]();
  }
  var _0x8e22x2 = this[_0xee2b[3418]]();
  if (_0x8e22x2) {
    _0x8e22x2[_0xee2b[264]](_0xee2b[3579]);
    _0x8e22x2[_0xee2b[3419]](this[_0xee2b[1828]]());
  }
  if (Ext[_0xee2b[723]][_0xee2b[965]][_0xee2b[966]](_0xee2b[2836])) {
    this[_0xee2b[3380]][_0xee2b[149]](_0xee2b[3580], this[_0xee2b[3581]], this);
  }
  if (this[_0xee2b[3582]]) {
    this[_0xee2b[149]](_0xee2b[842], function(_0x8e22x7, _0x8e22x9, _0x8e22x1) {
      if (this[_0xee2b[1828]]()) {
        this[_0xee2b[2786]]({start:_0x8e22x9, end:_0x8e22x1});
      }
    });
  }
}, onNormalGridCellClick:function(_0x8e22x3, _0x8e22x4, _0x8e22xa, _0x8e22x5, _0x8e22x7, _0x8e22x8, _0x8e22x1) {
  if (_0x8e22x4[_0xee2b[1868]][_0xee2b[2249]](_0xee2b[473])) {
    var _0x8e22x6 = this[_0xee2b[3583]]();
    var _0x8e22x9 = _0x8e22x1[_0xee2b[2794]] && _0x8e22x6[_0xee2b[2597]](_0x8e22x8);
    if (_0x8e22x9) {
      _0x8e22x6[_0xee2b[3312]](_0x8e22x8);
    } else {
      _0x8e22x6[_0xee2b[760]](_0x8e22x8, _0x8e22x1[_0xee2b[2794]]);
    }
  }
}, getSplitter:function() {
  return this[_0xee2b[3585]](_0xee2b[3584]);
}, setupLockableFilterableTree:function() {
  var _0x8e22x4 = this;
  var _0x8e22x6 = _0x8e22x4[_0xee2b[1830]][_0xee2b[290]]();
  var _0x8e22x3 = Sch[_0xee2b[1637]][_0xee2b[3586]][_0xee2b[139]];
  _0x8e22x6[_0xee2b[1711]] = _0x8e22x3[_0xee2b[1711]];
  _0x8e22x6[_0xee2b[2904]] = _0x8e22x3[_0xee2b[2904]];
  _0x8e22x6[_0xee2b[2905]] = _0x8e22x3[_0xee2b[2905]];
  _0x8e22x6[_0xee2b[2907]] = _0x8e22x3[_0xee2b[2907]];
  _0x8e22x6[_0xee2b[2908]] = _0x8e22x3[_0xee2b[2908]];
  _0x8e22x6[_0xee2b[1711]]();
}, showMenuBy:function(_0x8e22x6, _0x8e22x1) {
  var _0x8e22x2 = this[_0xee2b[2289]](), _0x8e22x4 = _0x8e22x2[_0xee2b[861]](_0xee2b[3587]), _0x8e22x5 = _0x8e22x2[_0xee2b[861]](_0xee2b[3588]), _0x8e22x3 = _0x8e22x4[_0xee2b[3589]]();
  _0x8e22x3[_0xee2b[256]]();
  _0x8e22x4[_0xee2b[256]]();
  _0x8e22x5[_0xee2b[256]]();
}, zoomToFit:function(_0x8e22x3) {
  _0x8e22x3 = Ext[_0xee2b[8]]({adjustStart:1, adjustEnd:1}, _0x8e22x3);
  var _0x8e22x6 = this[_0xee2b[696]]();
  var _0x8e22x4 = this[_0xee2b[696]]()[_0xee2b[3535]]();
  if (this[_0xee2b[2786]](_0x8e22x4, _0x8e22x3) === null) {
    this[_0xee2b[808]]()[_0xee2b[3590]]();
  }
}, refreshViews:function(_0x8e22x6) {
  if (!this[_0xee2b[262]]) {
    return;
  }
  var _0x8e22x2 = false;
  var _0x8e22x4 = function() {
    _0x8e22x2 = true;
  };
  var _0x8e22x1 = this[_0xee2b[3380]][_0xee2b[290]]();
  var _0x8e22x5 = this[_0xee2b[1830]][_0xee2b[290]](), _0x8e22x3 = {left:_0x8e22x5[_0xee2b[1920]](), top:_0x8e22x1[_0xee2b[1922]]()};
  _0x8e22x1[_0xee2b[149]](_0xee2b[770], _0x8e22x4);
  _0x8e22x5[_0xee2b[2668]]();
  _0x8e22x1[_0xee2b[152]](_0xee2b[770], _0x8e22x4);
  if (_0x8e22x6 !== false) {
    !_0x8e22x2 && this[_0xee2b[808]]()[_0xee2b[2669]]();
    _0x8e22x5[_0xee2b[3153]](_0x8e22x3[_0xee2b[1354]]);
    _0x8e22x5[_0xee2b[3591]](_0x8e22x3[_0xee2b[686]]);
  } else {
    if (!_0x8e22x2) {
      this[_0xee2b[808]]()[_0xee2b[2668]]();
    }
  }
}, getCalendar:function() {
  return this[_0xee2b[2006]];
}, disableWeekendHighlighting:function(_0x8e22x3) {
  this[_0xee2b[3486]][_0xee2b[253]](_0x8e22x3);
  if (_0x8e22x3) {
    this[_0xee2b[267]](_0xee2b[3487]);
  } else {
    this[_0xee2b[264]](_0xee2b[3487]);
  }
}, preventRefresh:function() {
  return false;
}, suspendRefresh:function() {
  var _0x8e22x3 = this;
  if (_0x8e22x3[_0xee2b[3592]]++ === 0) {
    _0x8e22x3[_0xee2b[290]]()[_0xee2b[149]](_0xee2b[3593], _0x8e22x3[_0xee2b[3594]], _0x8e22x3);
    _0x8e22x3[_0xee2b[3380]][_0xee2b[829]][_0xee2b[2910]] = true;
    _0x8e22x3[_0xee2b[1830]][_0xee2b[829]][_0xee2b[2910]] = true;
  }
}, resumeRefresh:function(_0x8e22x6) {
  var _0x8e22x3 = this;
  if (_0x8e22x3[_0xee2b[3592]] && !--_0x8e22x3[_0xee2b[3592]]) {
    _0x8e22x3[_0xee2b[290]]()[_0xee2b[152]](_0xee2b[3593], _0x8e22x3[_0xee2b[3594]], _0x8e22x3);
    _0x8e22x3[_0xee2b[3380]][_0xee2b[829]][_0xee2b[2910]] = false;
    _0x8e22x3[_0xee2b[1830]][_0xee2b[829]][_0xee2b[2910]] = false;
    if (_0x8e22x6) {
      _0x8e22x3[_0xee2b[2543]]();
    }
  }
}}, function() {
  var _0x8e22x3 = _0xee2b[975];
  Ext[_0xee2b[8]](Sch, {VERSION:_0xee2b[215]});
  if (Ext[_0xee2b[723]][_0xee2b[965]][_0xee2b[968]](_0x8e22x3)) {
    var _0x8e22x6 = console;
    _0x8e22x6 && _0x8e22x6[_0xee2b[401]](_0xee2b[3595] + _0x8e22x3);
  }
  if (Ext[_0xee2b[2009]]()[_0xee2b[966]](_0xee2b[2962])) {
    Ext[_0xee2b[6]](null, {override:_0xee2b[3460], doRefreshView:function() {
      if (this[_0xee2b[829]][_0xee2b[2467]][_0xee2b[2592]](_0xee2b[805])) {
        var _0x8e22x4 = Ext[_0xee2b[1182]][_0xee2b[3596]];
        Ext[_0xee2b[1182]][_0xee2b[3596]] = true;
        this[_0xee2b[9]](arguments);
        Ext[_0xee2b[1182]][_0xee2b[3596]] = _0x8e22x4;
      } else {
        this[_0xee2b[9]](arguments);
      }
    }});
  }
});
Ext[_0xee2b[6]](_0xee2b[3597], {extend:_0xee2b[3598], mixins:[_0xee2b[665], _0xee2b[3459]], alias:[_0xee2b[3599]], subGridXType:_0xee2b[3600], isTimelineGridPanel:true, initComponent:function() {
  this[_0xee2b[9]](arguments);
  this[_0xee2b[808]]()._initializeTimelineView();
}}, function() {
  this[_0xee2b[507]](Sch[_0xee2b[1637]][_0xee2b[3601]][_0xee2b[139]][_0xee2b[1635]]() || {});
});
Ext[_0xee2b[6]](_0xee2b[3602], {extend:_0xee2b[717], mixins:[_0xee2b[665]], text:_0xee2b[3603] + Ext[_0xee2b[238]] + _0xee2b[3604], constructor:function() {
  var _0x8e22x3 = this;
  _0x8e22x3[_0xee2b[3438]] = _0x8e22x3[_0xee2b[3438]][_0xee2b[675]](/__FROM__/, _0x8e22x3.L(_0xee2b[3606]))[_0xee2b[675]](/__TO__/, _0x8e22x3.L(_0xee2b[3605]));
  _0x8e22x3[_0xee2b[9]]([_0x8e22x3[_0xee2b[3438]]]);
}});
Ext[_0xee2b[6]](_0xee2b[3607], {extend:_0xee2b[1996], requires:[_0xee2b[3602]], cls:_0xee2b[3608], delegate:_0xee2b[3609], showDelay:0, anchor:_0xee2b[754], mouseOffset:[15, 5], trackMouse:true, dependencyView:null, tpl:null, initComponent:function() {
  this[_0xee2b[969]] = this[_0xee2b[3611]][_0xee2b[3610]]()[_0xee2b[787]]();
  this[_0xee2b[3612]] = this[_0xee2b[3612]] || new Sch[_0xee2b[1860]].DependencyInfo();
  this[_0xee2b[9]](arguments);
}, show:function() {
  this[_0xee2b[9]](arguments);
  var _0x8e22x3 = this[_0xee2b[3611]][_0xee2b[3613]](this[_0xee2b[3075]]);
  this[_0xee2b[1903]]({dependency:_0x8e22x3, fromTask:_0x8e22x3[_0xee2b[1344]](), toTask:_0x8e22x3[_0xee2b[1345]]()});
}});
Ext[_0xee2b[6]](_0xee2b[3614], {extend:_0xee2b[3615], mixins:{observable:_0xee2b[108]}, terminalSelector:null, dependencyStore:null, toText:null, startText:null, endText:null, view:null, tipTpl:null, tip:null, constructor:function(_0x8e22x6, _0x8e22x3) {
  this[_0xee2b[295]][_0xee2b[294]][_0xee2b[217]][_0xee2b[293]](this, _0x8e22x3);
  this[_0xee2b[9]](arguments);
}, getTargetFromEvent:function(_0x8e22x3) {
  return _0x8e22x3[_0xee2b[2033]](this[_0xee2b[3616]]);
}, onNodeEnter:function(_0x8e22x4, _0x8e22xa, _0x8e22x5, _0x8e22x6) {
  var _0x8e22x9 = this, _0x8e22x3 = _0x8e22x9[_0xee2b[829]][_0xee2b[2181]](_0x8e22x4), _0x8e22x8 = _0x8e22x4[_0xee2b[1868]][_0xee2b[2249]](/sch-terminal-(\w+)/)[1], _0x8e22x7 = _0x8e22x3[_0xee2b[32]]() || _0x8e22x3[_0xee2b[1049]], _0x8e22x1 = Ext[_0xee2b[8]]({toTask:_0x8e22x3, toSide:_0x8e22x8}, _0x8e22x6[_0xee2b[3617]]);
  if (!_0x8e22x9[_0xee2b[2106]]) {
    _0x8e22x9[_0xee2b[2106]] = _0x8e22x9[_0xee2b[3618]]();
  }
  _0x8e22x6[_0xee2b[2003]] = _0x8e22x1[_0xee2b[2003]] = _0x8e22x9[_0xee2b[3621]](_0x8e22x6[_0xee2b[3619]], _0x8e22x7, _0x8e22xa[_0xee2b[2156]][_0xee2b[3620]], _0x8e22x8);
  _0x8e22x9[_0xee2b[2106]][_0xee2b[1903]](_0x8e22x1);
  _0x8e22x9[_0xee2b[2106]][_0xee2b[3622]](_0x8e22x4);
  Ext[_0xee2b[761]](_0x8e22x4)[_0xee2b[264]](_0xee2b[3623] + (_0x8e22x6[_0xee2b[2003]] ? _0xee2b[2003] : _0xee2b[3624]) + _0xee2b[3625]);
}, createTooltip:function() {
  var _0x8e22x3 = this;
  return new Ext[_0xee2b[2106]].ToolTip({tpl:_0x8e22x3[_0xee2b[3626]], view:_0x8e22x3[_0xee2b[829]], cls:_0xee2b[3627], constrain:true, anchor:_0xee2b[3047], trackMouse:false, hideDelay:0, dismissDelay:0, delegate:_0x8e22x3[_0xee2b[3616]], target:_0x8e22x3[_0xee2b[829]][_0xee2b[787]](), constraintInsets:_0xee2b[3048]});
}, onNodeOut:function(_0x8e22x5, _0x8e22x3, _0x8e22x4, _0x8e22x6) {
  _0x8e22x6[_0xee2b[2003]] = false;
  Ext[_0xee2b[761]](_0x8e22x5)[_0xee2b[267]]([_0xee2b[3628], _0xee2b[3629]]);
}, onNodeOver:function(_0x8e22x5, _0x8e22x3, _0x8e22x4, _0x8e22x6) {
  return _0x8e22x6[_0xee2b[2003]] ? this[_0xee2b[2119]] : this[_0xee2b[2120]];
}, onNodeDrop:function(_0x8e22x1, _0x8e22xd, _0x8e22x9, _0x8e22x4) {
  var _0x8e22x7 = this, _0x8e22x5 = _0x8e22x7[_0xee2b[829]][_0xee2b[2181]](_0x8e22x1), _0x8e22x8 = _0x8e22x1[_0xee2b[1868]][_0xee2b[2249]](/sch-terminal-(\w+)/)[1], _0x8e22xa = _0x8e22x5[_0xee2b[32]]() || _0x8e22x5[_0xee2b[1049]], _0x8e22x3 = _0x8e22x4[_0xee2b[2003]], _0x8e22x6 = _0x8e22x7[_0xee2b[3630]](_0x8e22xd[_0xee2b[2156]][_0xee2b[3619]], _0x8e22xa, _0x8e22x4[_0xee2b[3620]], _0x8e22x8);
  _0x8e22x7[_0xee2b[180]](_0xee2b[3631], _0x8e22x7, _0x8e22x6, _0x8e22x3);
  _0x8e22x7[_0xee2b[180]](_0xee2b[3632], _0x8e22x7);
  return _0x8e22x3;
}, createDependencyModel:function(_0x8e22x2, _0x8e22x6, _0x8e22x1, _0x8e22x5) {
  var _0x8e22x4 = this[_0xee2b[1303]], _0x8e22x3 = new (_0x8e22x4[_0xee2b[137]]())();
  _0x8e22x3[_0xee2b[1338]](_0x8e22x2);
  _0x8e22x3[_0xee2b[1339]](_0x8e22x6);
  _0x8e22x3 instanceof Sch[_0xee2b[327]][_0xee2b[3633]] && _0x8e22x3[_0xee2b[3634]](_0x8e22x1);
  _0x8e22x3 instanceof Sch[_0xee2b[327]][_0xee2b[3633]] && _0x8e22x3[_0xee2b[3635]](_0x8e22x5);
  _0x8e22x3[_0xee2b[1262]](_0x8e22x3[_0xee2b[3636]](_0x8e22x1, _0x8e22x5, this[_0xee2b[829]][_0xee2b[1855]]));
  return _0x8e22x3;
}, isValidLink:function(_0x8e22x5, _0x8e22x6, _0x8e22x2, _0x8e22x4) {
  var _0x8e22x3 = this[_0xee2b[3630]](_0x8e22x5, _0x8e22x6, _0x8e22x2, _0x8e22x4);
  return this[_0xee2b[1303]][_0xee2b[3637]](_0x8e22x3);
}, destroyTip:function() {
  var _0x8e22x3 = this;
  _0x8e22x3[_0xee2b[2106]] && _0x8e22x3[_0xee2b[2106]][_0xee2b[218]]();
  _0x8e22x3[_0xee2b[2106]] = null;
}, destroy:function() {
  var _0x8e22x3 = this;
  _0x8e22x3[_0xee2b[3638]]();
  _0x8e22x3[_0xee2b[9]](arguments);
}});
Ext[_0xee2b[6]](_0xee2b[3639], {extend:_0xee2b[2111], alias:_0xee2b[3640], requires:[_0xee2b[3602], _0xee2b[3614], _0xee2b[1910]], mixins:{factoryable:_0xee2b[3641], observable:_0xee2b[108]}, terminalSelector:null, view:null, fromText:null, toText:null, startText:null, endText:null, rtl:false, useLineProxy:true, dependencyStore:null, tipTpl:null, animationDuration:400, constructor:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  _0x8e22x6[_0xee2b[295]][_0xee2b[294]][_0xee2b[217]][_0xee2b[293]](this, _0x8e22x3);
  _0x8e22x6[_0xee2b[9]]([_0x8e22x3[_0xee2b[829]][_0xee2b[787]](), _0x8e22x3]);
  _0x8e22x6[_0xee2b[3626]] = _0x8e22x6[_0xee2b[3626]] || new Sch[_0xee2b[1860]].DependencyInfo();
  if (!(_0x8e22x6[_0xee2b[3626]] instanceof Ext[_0xee2b[728]])) {
    _0x8e22x6[_0xee2b[3626]] = new Ext.XTemplate(_0x8e22x6[_0xee2b[3626]]);
  }
  _0x8e22x6[_0xee2b[3642]] = _0x8e22x6[_0xee2b[3643]]();
  _0x8e22x6[_0xee2b[846]](_0x8e22x6[_0xee2b[3642]], [_0xee2b[3631], _0xee2b[3632]]);
  _0x8e22x6[_0xee2b[149]]({dragstart:_0x8e22x6[_0xee2b[3644]], afterdrop:_0x8e22x6[_0xee2b[3645]], scope:_0x8e22x6});
}, onDependencyDragStart:function() {
  Sch[_0xee2b[49]][_0xee2b[2074]][_0xee2b[2073]](this[_0xee2b[829]]);
}, onDependencyAfterDrop:function() {
  Sch[_0xee2b[49]][_0xee2b[2074]][_0xee2b[2084]]();
  this[_0xee2b[3642]][_0xee2b[3638]]();
}, createDropZone:function() {
  return new Sch[_0xee2b[829]][_0xee2b[3647]].DropZone(this[_0xee2b[265]], this[_0xee2b[3646]]());
}, getDropZoneConfig:function() {
  return {rtl:this[_0xee2b[1855]], terminalSelector:this[_0xee2b[3616]], ddGroup:this[_0xee2b[3648]], view:this[_0xee2b[829]], dependencyStore:this[_0xee2b[1303]], tipTpl:this[_0xee2b[3626]]};
}, initLineProxy:function(_0x8e22x4) {
  var _0x8e22x2 = this, _0x8e22x3 = _0x8e22x2[_0xee2b[829]][_0xee2b[1966]](), _0x8e22x5 = Ext[_0xee2b[761]](_0x8e22x4)[_0xee2b[2264]](_0x8e22x2[_0xee2b[829]][_0xee2b[265]]), _0x8e22x9 = Ext[_0xee2b[761]](_0x8e22x4)[_0xee2b[793]]() / 2, _0x8e22x7 = _0x8e22x5[0] + _0x8e22x9, _0x8e22x1 = _0x8e22x5[1] + _0x8e22x9, _0x8e22x6 = _0x8e22x2[_0xee2b[1855]] ? _0xee2b[867] : _0xee2b[1354];
  _0x8e22x7 = _0x8e22x7 + _0x8e22x3[_0xee2b[1354]];
  _0x8e22x1 = _0x8e22x1;
  _0x8e22x2[_0xee2b[3649]] = _0x8e22x2[_0xee2b[265]][_0xee2b[825]]({cls:_0xee2b[3650], style:_0xee2b[3651] + _0x8e22x1 + _0xee2b[3403] + _0x8e22x6 + _0xee2b[1129] + _0x8e22x7 + _0xee2b[804]});
  Ext[_0xee2b[8]](_0x8e22x2, {startXY:[_0x8e22x7, _0x8e22x1], startScrollLeft:_0x8e22x3[_0xee2b[1354]], startScrollTop:_0x8e22x3[_0xee2b[686]]});
}, updateLineProxy:function(_0x8e22x2) {
  var _0x8e22x9 = this, _0x8e22x4 = document[_0xee2b[3652]] || document[_0xee2b[936]] || document[_0xee2b[2179]], _0x8e22x8 = _0x8e22x9[_0xee2b[829]][_0xee2b[1966]](), _0x8e22x6 = _0x8e22x9[_0xee2b[829]][_0xee2b[265]][_0xee2b[758]][_0xee2b[3653]](), _0x8e22x5 = _0x8e22x2[0] - _0x8e22x9[_0xee2b[829]][_0xee2b[809]](), _0x8e22xa = (_0x8e22x9[_0xee2b[1855]] ? _0x8e22x9[_0xee2b[1967]][0] - _0x8e22x5 - _0x8e22x8[_0xee2b[1354]] : _0x8e22x5 - _0x8e22x9[_0xee2b[1967]][0] + _0x8e22x8[_0xee2b[1354]]) - _0x8e22x4[_0xee2b[2178]], 
  _0x8e22x7 = _0x8e22x2[1] - _0x8e22x6[_0xee2b[686]] - _0x8e22x9[_0xee2b[1967]][1] - _0x8e22x4[_0xee2b[3654]], _0x8e22x3 = Math[_0xee2b[715]](1, Math[_0xee2b[3656]](Math[_0xee2b[3655]](_0x8e22xa, 2) + Math[_0xee2b[3655]](_0x8e22x7, 2)) - 2), _0x8e22x1 = Math[_0xee2b[3657]](_0x8e22x7, _0x8e22xa) - Math[_0xee2b[3658]] / 2;
  _0x8e22x9[_0xee2b[3649]][_0xee2b[2051]]({height:_0x8e22x3 + _0xee2b[804], transform:_0xee2b[3659] + _0x8e22x1 + _0xee2b[3660]});
}, getDragData:function(_0x8e22x9) {
  var _0x8e22x1 = this, _0x8e22x5 = _0x8e22x9[_0xee2b[2033]](_0x8e22x1[_0xee2b[3616]]);
  if (_0x8e22x9[_0xee2b[2104]] === 0 && _0x8e22x5) {
    var _0x8e22x4 = _0x8e22x1[_0xee2b[829]][_0xee2b[2181]](_0x8e22x5);
    if (_0x8e22x1[_0xee2b[180]](_0xee2b[3661], _0x8e22x1, _0x8e22x4) === false) {
      return null;
    }
    var _0x8e22x6 = _0x8e22x5[_0xee2b[1868]][_0xee2b[2249]](/sch-terminal-(\w+)/)[1], _0x8e22x3 = {fromTask:_0x8e22x4, fromSide:_0x8e22x6}, _0x8e22x7 = document[_0xee2b[3662]](_0xee2b[2258]);
    _0x8e22x5[_0xee2b[763]][_0xee2b[762]] = _0xee2b[2246];
    return {fromId:_0x8e22x4[_0xee2b[32]]() || _0x8e22x4[_0xee2b[1049]], fromSide:_0x8e22x6, tplData:_0x8e22x3, repairXY:Ext[_0xee2b[761]](_0x8e22x5)[_0xee2b[1970]](), ddel:_0x8e22x7, valid:false, sourceTerminal:_0x8e22x5};
  }
  return false;
}, onStartDrag:function(_0x8e22x6, _0x8e22x1) {
  var _0x8e22x5 = this, _0x8e22x3 = _0x8e22x5[_0xee2b[2156]], _0x8e22x4 = _0x8e22x3[_0xee2b[3663]], _0x8e22x2 = _0x8e22x4[_0xee2b[1868]][_0xee2b[2249]](/sch-terminal-(\w+)/)[0];
  _0x8e22x5[_0xee2b[180]](_0xee2b[1958], _0x8e22x5);
  if (_0x8e22x5[_0xee2b[3664]]) {
    _0x8e22x5[_0xee2b[3665]](_0x8e22x4, _0x8e22x3[_0xee2b[2426]]);
    _0x8e22x5[_0xee2b[3649]][_0xee2b[2019]]();
  }
  _0x8e22x5[_0xee2b[379]][_0xee2b[2051]](_0xee2b[762], _0xee2b[764]);
  Ext[_0xee2b[761]](_0x8e22x3[_0xee2b[3663]][_0xee2b[96]])[_0xee2b[760]](_0xee2b[3667] + _0x8e22x2 + _0xee2b[1058])[_0xee2b[264]](_0xee2b[3666]);
}, onDrag:function(_0x8e22x6, _0x8e22x3) {
  this[_0xee2b[3664]] && this[_0xee2b[3668]](_0x8e22x6[_0xee2b[1970]]());
}, afterRepair:function() {
  var _0x8e22x3 = this;
  _0x8e22x3[_0xee2b[2063]] = false;
  if (!_0x8e22x3[_0xee2b[458]]) {
    _0x8e22x3[_0xee2b[180]](_0xee2b[3632], _0x8e22x3[_0xee2b[3642]]);
  }
}, onMouseUp:function() {
  var _0x8e22x6 = this;
  _0x8e22x6[_0xee2b[265]][_0xee2b[267]](_0xee2b[3669]);
  _0x8e22x6[_0xee2b[2156]][_0xee2b[3663]][_0xee2b[763]][_0xee2b[762]] = _0xee2b[27];
  if (_0x8e22x6[_0xee2b[3649]]) {
    var _0x8e22x3 = _0x8e22x6[_0xee2b[3649]];
    _0x8e22x3[_0xee2b[3671]]({to:{height:0}, duration:_0x8e22x6[_0xee2b[3670]], callback:function() {
      Ext[_0xee2b[218]](_0x8e22x3);
    }});
    _0x8e22x6[_0xee2b[3649]] = null;
  }
}, getRepairXY:function() {
  return this[_0xee2b[2156]][_0xee2b[3672]];
}, destroy:function() {
  var _0x8e22x3 = this;
  Ext[_0xee2b[218]]([_0x8e22x3[_0xee2b[3649]], _0x8e22x3[_0xee2b[3642]]]);
  _0x8e22x3[_0xee2b[9]](arguments);
}});
Ext[_0xee2b[6]](_0xee2b[3673], {alias:_0xee2b[3674], mixins:[_0xee2b[3641]], uses:[_0xee2b[34]], config:{startSide:_0xee2b[867], startArrowSize:8, startArrowMargin:6, startShift:0, endSide:_0xee2b[1354], endArrowSize:8, endArrowMargin:6, endShift:0, verticalMargin:2, horizontalMargin:5, otherBoxes:null}, constructor:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  _0x8e22x6[_0xee2b[9]]([_0x8e22x3]);
  _0x8e22x6[_0xee2b[35]](_0x8e22x3);
}, findPath:function(_0x8e22x5, _0x8e22x23) {
  var _0x8e22x1c = this, _0x8e22xb, _0x8e22x1, _0x8e22x12, _0x8e22x15, _0x8e22x19, _0x8e22xd, _0x8e22x20, _0x8e22x1e, _0x8e22x4, _0x8e22x17, _0x8e22x6, _0x8e22xc, _0x8e22x1d, _0x8e22x13, _0x8e22x10, _0x8e22xf, _0x8e22x18, _0x8e22x7, _0x8e22x1a, _0x8e22xa, _0x8e22x14, _0x8e22x1b, _0x8e22x16, _0x8e22x2, _0x8e22x9, _0x8e22xe, _0x8e22x3, _0x8e22x11, _0x8e22x8;
  if (_0x8e22x23 && !Ext[_0xee2b[307]](_0x8e22x23)) {
    _0x8e22x23 = [_0x8e22x23];
  }
  for (_0x8e22x8 = 0; _0x8e22x5 && !_0x8e22x11;) {
    _0x8e22xb = Ext[_0xee2b[330]](_0x8e22x5, _0x8e22x1c[_0xee2b[3675]]());
    _0x8e22x1 = _0x8e22xb[_0xee2b[3676]], _0x8e22x12 = _0x8e22xb[_0xee2b[3677]], _0x8e22x15 = _0x8e22xb[_0xee2b[3678]], _0x8e22x19 = _0x8e22xb[_0xee2b[3679]], _0x8e22xd = _0x8e22xb[_0xee2b[3680]], _0x8e22x20 = _0x8e22xb[_0xee2b[3681]], _0x8e22x1e = _0x8e22xb[_0xee2b[3682]], _0x8e22x4 = _0x8e22xb[_0xee2b[3683]], _0x8e22x17 = _0x8e22xb[_0xee2b[3684]], _0x8e22x6 = _0x8e22xb[_0xee2b[3685]], _0x8e22xc = _0x8e22xb[_0xee2b[3686]], _0x8e22x1d = _0x8e22xb[_0xee2b[3687]], _0x8e22x13 = _0x8e22xb[_0xee2b[53]](_0xee2b[3688]) ? 
    _0x8e22xb[_0xee2b[3688]] : _0x8e22xc, _0x8e22x10 = _0x8e22xb[_0xee2b[53]](_0xee2b[3689]) ? _0x8e22xb[_0xee2b[3689]] : _0x8e22x1d, _0x8e22xf = _0x8e22xb[_0xee2b[53]](_0xee2b[3690]) ? _0x8e22xb[_0xee2b[3690]] : _0x8e22xc, _0x8e22x18 = _0x8e22xb[_0xee2b[53]](_0xee2b[3691]) ? _0x8e22xb[_0xee2b[3691]] : _0x8e22x1d, _0x8e22x7 = _0x8e22xb[_0xee2b[3692]];
    _0x8e22xd = _0x8e22x1c[_0xee2b[3693]](_0x8e22xd);
    _0x8e22x20 = _0x8e22x1c[_0xee2b[3693]](_0x8e22x20);
    _0x8e22x1a = _0x8e22x1c[_0xee2b[3694]](_0x8e22x1, _0x8e22xd, _0x8e22x15);
    _0x8e22xa = _0x8e22x1c[_0xee2b[3694]](_0x8e22x12, _0x8e22x20, _0x8e22x19);
    _0x8e22x9 = _0x8e22x1c[_0xee2b[3695]](_0x8e22x1, _0x8e22xd, _0x8e22x1e, _0x8e22x17, _0x8e22x13, _0x8e22x10);
    _0x8e22xe = _0x8e22x1c[_0xee2b[3695]](_0x8e22x12, _0x8e22x20, _0x8e22x4, _0x8e22x6, _0x8e22xf, _0x8e22x18);
    _0x8e22x7 = _0x8e22x7 && Ext[_0xee2b[26]][_0xee2b[41]](_0x8e22x7, function(_0x8e22x1f) {
      return _0x8e22x1c[_0xee2b[3695]](_0x8e22x1f, false, 0, 0, _0x8e22xc, _0x8e22x1d);
    });
    _0x8e22x14 = _0x8e22x1c[_0xee2b[3694]](_0x8e22x9, _0x8e22xd, _0x8e22x15);
    _0x8e22x1b = _0x8e22x1c[_0xee2b[3694]](_0x8e22xe, _0x8e22x20, _0x8e22x19);
    _0x8e22x3 = _0x8e22x1c[_0xee2b[3696]](_0x8e22x9, _0x8e22xe, _0x8e22x14, _0x8e22x1b, _0x8e22xd, _0x8e22x20, _0x8e22x7);
    _0x8e22x16 = _0x8e22x1c[_0xee2b[3697]](_0x8e22x3, _0x8e22x14);
    _0x8e22x2 = _0x8e22x1c[_0xee2b[3697]](_0x8e22x3, _0x8e22x1b);
    _0x8e22x11 = _0x8e22x1c[_0xee2b[3698]](_0x8e22x3, _0x8e22x16, _0x8e22x2, _0x8e22xd, _0x8e22x20);
    for (_0x8e22x5 = false; !_0x8e22x11 && !_0x8e22x5 && _0x8e22x23 && _0x8e22x8 < _0x8e22x23[_0xee2b[4]]; _0x8e22x8++) {
      _0x8e22x5 = _0x8e22x23[_0x8e22x8](_0x8e22xb);
    }
  }
  if (_0x8e22x11) {
    _0x8e22x11 = _0x8e22x1c[_0xee2b[3699]](_0x8e22x11, _0x8e22x1a, _0x8e22x1e, _0x8e22xd);
    _0x8e22x11 = _0x8e22x1c[_0xee2b[3700]](_0x8e22x11, _0x8e22xa, _0x8e22x4, _0x8e22x20);
    _0x8e22x11 = _0x8e22x1c[_0xee2b[3701]](_0x8e22x11);
  }
  return _0x8e22x11;
}, getConnectionCoordinatesFromBoxSideShift:function(_0x8e22x4, _0x8e22x6, _0x8e22x3) {
  var _0x8e22x5;
  switch(_0x8e22x6) {
    case _0xee2b[1354]:
      _0x8e22x5 = {x:_0x8e22x4[_0xee2b[179]], y:(_0x8e22x4[_0xee2b[686]] + _0x8e22x4[_0xee2b[754]]) / 2 + _0x8e22x3};
      break;
    case _0xee2b[867]:
      _0x8e22x5 = {x:_0x8e22x4[_0xee2b[771]], y:(_0x8e22x4[_0xee2b[686]] + _0x8e22x4[_0xee2b[754]]) / 2 + _0x8e22x3};
      break;
    case _0xee2b[686]:
      _0x8e22x5 = {x:(_0x8e22x4[_0xee2b[179]] + _0x8e22x4[_0xee2b[771]]) / 2 + _0x8e22x3, y:_0x8e22x4[_0xee2b[686]]};
      break;
    case _0xee2b[754]:
      _0x8e22x5 = {x:(_0x8e22x4[_0xee2b[179]] + _0x8e22x4[_0xee2b[771]]) / 2 + _0x8e22x3, y:_0x8e22x4[_0xee2b[754]]};
      break;
  }
  return _0x8e22x5;
}, calcGridBaseBoxFromBoxAndDrawParams:function(_0x8e22x1, _0x8e22x4, _0x8e22x5, _0x8e22x9, _0x8e22x6, _0x8e22x3) {
  var _0x8e22x2;
  switch(_0x8e22x4) {
    case _0xee2b[1354]:
      _0x8e22x2 = {start:_0x8e22x1[_0xee2b[179]] - Math[_0xee2b[715]](_0x8e22x5 + _0x8e22x9, _0x8e22x6), end:_0x8e22x1[_0xee2b[771]] + _0x8e22x6, top:_0x8e22x1[_0xee2b[686]] - _0x8e22x3, bottom:_0x8e22x1[_0xee2b[754]] + _0x8e22x3};
      break;
    case _0xee2b[867]:
      _0x8e22x2 = {start:_0x8e22x1[_0xee2b[179]] - _0x8e22x6, end:_0x8e22x1[_0xee2b[771]] + Math[_0xee2b[715]](_0x8e22x5 + _0x8e22x9, _0x8e22x6), top:_0x8e22x1[_0xee2b[686]] - _0x8e22x3, bottom:_0x8e22x1[_0xee2b[754]] + _0x8e22x3};
      break;
    case _0xee2b[686]:
      _0x8e22x2 = {start:_0x8e22x1[_0xee2b[179]] - _0x8e22x6, end:_0x8e22x1[_0xee2b[771]] + _0x8e22x6, top:_0x8e22x1[_0xee2b[686]] - Math[_0xee2b[715]](_0x8e22x5 + _0x8e22x9, _0x8e22x3), bottom:_0x8e22x1[_0xee2b[754]] + _0x8e22x3};
      break;
    case _0xee2b[754]:
      _0x8e22x2 = {start:_0x8e22x1[_0xee2b[179]] - _0x8e22x6, end:_0x8e22x1[_0xee2b[771]] + _0x8e22x6, top:_0x8e22x1[_0xee2b[686]] - _0x8e22x3, bottom:_0x8e22x1[_0xee2b[754]] + Math[_0xee2b[715]](_0x8e22x5 + _0x8e22x9, _0x8e22x3)};
      break;
    default:
      _0x8e22x2 = {start:_0x8e22x1[_0xee2b[179]] - _0x8e22x6, end:_0x8e22x1[_0xee2b[771]] + _0x8e22x6, top:_0x8e22x1[_0xee2b[686]] - _0x8e22x3, bottom:_0x8e22x1[_0xee2b[754]] + _0x8e22x3};
  }
  return _0x8e22x2;
}, buildPathGrid:function(_0x8e22x3, _0x8e22xd, _0x8e22x18, _0x8e22x15, _0x8e22x5, _0x8e22x14, _0x8e22x1) {
  var _0x8e22x9, _0x8e22xb, _0x8e22x7, _0x8e22x8, _0x8e22x4, _0x8e22x6, _0x8e22x16, _0x8e22x10, _0x8e22xf, _0x8e22x2, _0x8e22xa, _0x8e22x19, _0x8e22xc, _0x8e22x11 = {}, _0x8e22xe = [];
  _0x8e22x9 = [_0x8e22x3[_0xee2b[179]], _0x8e22x5 == _0xee2b[1354] || _0x8e22x5 == _0xee2b[867] ? (_0x8e22x3[_0xee2b[179]] + _0x8e22x3[_0xee2b[771]]) / 2 : _0x8e22x18[_0xee2b[1893]], _0x8e22x3[_0xee2b[771]], _0x8e22xd[_0xee2b[179]], _0x8e22x14 == _0xee2b[1354] || _0x8e22x14 == _0xee2b[867] ? (_0x8e22xd[_0xee2b[179]] + _0x8e22xd[_0xee2b[771]]) / 2 : _0x8e22x15[_0xee2b[1893]], _0x8e22xd[_0xee2b[771]]];
  _0x8e22xb = [_0x8e22x3[_0xee2b[686]], _0x8e22x5 == _0xee2b[686] || _0x8e22x5 == _0xee2b[754] ? (_0x8e22x3[_0xee2b[686]] + _0x8e22x3[_0xee2b[754]]) / 2 : _0x8e22x18[_0xee2b[1894]], _0x8e22x3[_0xee2b[754]], _0x8e22xd[_0xee2b[686]], _0x8e22x14 == _0xee2b[686] || _0x8e22x14 == _0xee2b[754] ? (_0x8e22xd[_0xee2b[686]] + _0x8e22xd[_0xee2b[754]]) / 2 : _0x8e22x15[_0xee2b[1894]], _0x8e22xd[_0xee2b[754]]];
  if (_0x8e22x1) {
    Ext[_0xee2b[26]][_0xee2b[130]](_0x8e22x1, function(_0x8e22x12) {
      _0x8e22x9[_0xee2b[11]](_0x8e22x12[_0xee2b[179]], (_0x8e22x12[_0xee2b[179]] + _0x8e22x12[_0xee2b[771]]) / 2, _0x8e22x12[_0xee2b[771]]);
      _0x8e22xb[_0xee2b[11]](_0x8e22x12[_0xee2b[686]], (_0x8e22x12[_0xee2b[686]] + _0x8e22x12[_0xee2b[754]]) / 2, _0x8e22x12[_0xee2b[754]]);
    });
  }
  _0x8e22x9 = Ext[_0xee2b[26]][_0xee2b[1376]](Ext[_0xee2b[26]][_0xee2b[1120]](_0x8e22x9, Ext[_0xee2b[26]][_0xee2b[3702]]));
  _0x8e22xb = Ext[_0xee2b[26]][_0xee2b[1376]](Ext[_0xee2b[26]][_0xee2b[1120]](_0x8e22xb, Ext[_0xee2b[26]][_0xee2b[3702]]));
  for (_0x8e22x6 = 0, _0x8e22x10 = _0x8e22xb[_0xee2b[4]]; _0x8e22x6 < _0x8e22x10; ++_0x8e22x6) {
    _0x8e22x11[_0x8e22x6] = _0x8e22x11[_0x8e22x6] || {};
    _0x8e22x7 = _0x8e22xb[_0x8e22x6];
    for (_0x8e22x4 = 0, _0x8e22x16 = _0x8e22x9[_0xee2b[4]]; _0x8e22x4 < _0x8e22x16; ++_0x8e22x4) {
      _0x8e22x8 = _0x8e22x9[_0x8e22x4];
      _0x8e22x19 = (_0x8e22x8 <= _0x8e22x3[_0xee2b[179]] || _0x8e22x8 >= _0x8e22x3[_0xee2b[771]] || _0x8e22x7 <= _0x8e22x3[_0xee2b[686]] || _0x8e22x7 >= _0x8e22x3[_0xee2b[754]]) && (_0x8e22x8 <= _0x8e22xd[_0xee2b[179]] || _0x8e22x8 >= _0x8e22xd[_0xee2b[771]] || _0x8e22x7 <= _0x8e22xd[_0xee2b[686]] || _0x8e22x7 >= _0x8e22xd[_0xee2b[754]]);
      if (_0x8e22x1) {
        for (_0x8e22xf = 0, _0x8e22x2 = _0x8e22x1[_0xee2b[4]]; _0x8e22x19 && _0x8e22xf < _0x8e22x2; ++_0x8e22xf) {
          _0x8e22xa = _0x8e22x1[_0x8e22xf];
          _0x8e22x19 = _0x8e22x8 <= _0x8e22xa[_0xee2b[179]] || _0x8e22x8 >= _0x8e22xa[_0xee2b[771]] || _0x8e22x7 <= _0x8e22xa[_0xee2b[686]] || _0x8e22x7 >= _0x8e22xa[_0xee2b[754]];
        }
      }
      _0x8e22xc = {distance:Math[_0xee2b[3655]](2, 53) - 1, permitted:_0x8e22x19, x:_0x8e22x8, y:_0x8e22x7, ix:_0x8e22x4, iy:_0x8e22x6};
      _0x8e22x11[_0x8e22x6][_0x8e22x4] = _0x8e22xc;
      _0x8e22xe[_0xee2b[11]](_0x8e22xc);
    }
  }
  return {width:_0x8e22x9[_0xee2b[4]], height:_0x8e22xb[_0xee2b[4]], xs:_0x8e22x9, ys:_0x8e22xb, points:_0x8e22x11, linearPoints:_0x8e22xe};
}, convertDecartPointToGridPoint:function(_0x8e22x4, _0x8e22x6) {
  var _0x8e22x3 = Ext[_0xee2b[26]][_0xee2b[147]](_0x8e22x4[_0xee2b[3703]], _0x8e22x6[_0xee2b[1893]]), _0x8e22x5 = Ext[_0xee2b[26]][_0xee2b[147]](_0x8e22x4[_0xee2b[3704]], _0x8e22x6[_0xee2b[1894]]);
  return _0x8e22x4[_0xee2b[3705]][_0x8e22x5][_0x8e22x3];
}, findPathOnGrid:function(_0x8e22x4, _0x8e22x9, _0x8e22x6, _0x8e22x3, _0x8e22x1) {
  var _0x8e22x5 = this, _0x8e22x2 = false;
  if (_0x8e22x9[_0xee2b[3706]] && _0x8e22x6[_0xee2b[3706]]) {
    _0x8e22x4 = _0x8e22x5[_0xee2b[3707]](_0x8e22x4, _0x8e22x9, 0);
    _0x8e22x2 = _0x8e22x5[_0xee2b[3708]](_0x8e22x4, _0x8e22x6, _0x8e22x1);
  }
  return _0x8e22x2;
}, getGridPointNeighbors:function(_0x8e22x2, _0x8e22x5, _0x8e22x9) {
  var _0x8e22x4 = _0x8e22x5[_0xee2b[3709]], _0x8e22x6 = _0x8e22x5[_0xee2b[3710]], _0x8e22x3 = [], _0x8e22x1;
  if (_0x8e22x6 < _0x8e22x2[_0xee2b[747]] - 1) {
    _0x8e22x1 = _0x8e22x2[_0xee2b[3705]][_0x8e22x6 + 1][_0x8e22x4];
    (!_0x8e22x9 || _0x8e22x9(_0x8e22x1)) && _0x8e22x3[_0xee2b[11]](_0x8e22x1);
  }
  if (_0x8e22x6 > 0) {
    _0x8e22x1 = _0x8e22x2[_0xee2b[3705]][_0x8e22x6 - 1][_0x8e22x4];
    (!_0x8e22x9 || _0x8e22x9(_0x8e22x1)) && _0x8e22x3[_0xee2b[11]](_0x8e22x1);
  }
  if (_0x8e22x4 < _0x8e22x2[_0xee2b[773]] - 1) {
    _0x8e22x1 = _0x8e22x2[_0xee2b[3705]][_0x8e22x6][_0x8e22x4 + 1];
    (!_0x8e22x9 || _0x8e22x9(_0x8e22x1)) && _0x8e22x3[_0xee2b[11]](_0x8e22x1);
  }
  if (_0x8e22x4 > 0) {
    _0x8e22x1 = _0x8e22x2[_0xee2b[3705]][_0x8e22x6][_0x8e22x4 - 1];
    (!_0x8e22x9 || _0x8e22x9(_0x8e22x1)) && _0x8e22x3[_0xee2b[11]](_0x8e22x1);
  }
  return _0x8e22x3;
}, waveForward:function(_0x8e22x6, _0x8e22x2, _0x8e22x5) {
  var _0x8e22x8 = this, _0x8e22xe, _0x8e22x1, _0x8e22x9, _0x8e22x10, _0x8e22x3, _0x8e22x4, _0x8e22xd, _0x8e22x7;
  _0x8e22x2[_0xee2b[3711]] = _0x8e22x5;
  _0x8e22xe = _0x8e22x8[_0xee2b[3712]](_0x8e22x6, _0x8e22x2, function(_0x8e22xa) {
    return _0x8e22xa[_0xee2b[3706]] && _0x8e22xa[_0xee2b[3711]] > _0x8e22x5 + 1;
  });
  for (_0x8e22x1 = 0, _0x8e22x9 = _0x8e22xe[_0xee2b[4]]; _0x8e22x1 < _0x8e22x9; ++_0x8e22x1) {
    _0x8e22x10 = _0x8e22xe[_0x8e22x1];
    _0x8e22x10[_0xee2b[3711]] = _0x8e22x5 + 1;
  }
  for (_0x8e22x1 = 0, _0x8e22x9 = _0x8e22xe[_0xee2b[4]]; _0x8e22x1 < _0x8e22x9; ++_0x8e22x1) {
    _0x8e22x10 = _0x8e22xe[_0x8e22x1];
    _0x8e22x8[_0xee2b[3707]](_0x8e22x6, _0x8e22x10, _0x8e22x5 + 1);
  }
  return _0x8e22x6;
}, collectPath:function(_0x8e22x3, _0x8e22x6, _0x8e22x9) {
  var _0x8e22x2 = this, _0x8e22x4 = true, _0x8e22xa, _0x8e22x7, _0x8e22x1, _0x8e22x5, _0x8e22x8 = [];
  while (_0x8e22x4 && _0x8e22x6[_0xee2b[3711]]) {
    _0x8e22xa = _0x8e22x2[_0xee2b[3712]](_0x8e22x3, _0x8e22x6, function(_0x8e22xd) {
      return _0x8e22xd[_0xee2b[3706]] && _0x8e22xd[_0xee2b[3711]] == _0x8e22x6[_0xee2b[3711]] - 1;
    });
    _0x8e22x4 = _0x8e22xa[_0xee2b[4]] > 0;
    if (_0x8e22x4) {
      _0x8e22xa = Ext[_0xee2b[26]][_0xee2b[1120]](_0x8e22xa, function(_0x8e22x10, _0x8e22xd) {
        var _0x8e22xb, _0x8e22xc;
        _0x8e22xb = _0x8e22x10[_0xee2b[3709]] - _0x8e22x6[_0xee2b[3709]];
        _0x8e22xc = _0x8e22x10[_0xee2b[3710]] - _0x8e22x6[_0xee2b[3710]];
        var _0x8e22xf = (_0x8e22x9 == _0xee2b[1354] || _0x8e22x9 == _0xee2b[867]) && _0x8e22xc === 0 || (_0x8e22x9 == _0xee2b[686] || _0x8e22x9 == _0xee2b[754]) && _0x8e22xb === 0 ? -1 : 1;
        _0x8e22xb = _0x8e22xd[_0xee2b[3709]] - _0x8e22x6[_0xee2b[3709]];
        _0x8e22xc = _0x8e22xd[_0xee2b[3710]] - _0x8e22x6[_0xee2b[3710]];
        var _0x8e22xe = (_0x8e22x9 == _0xee2b[1354] || _0x8e22x9 == _0xee2b[867]) && _0x8e22xc === 0 || (_0x8e22x9 == _0xee2b[686] || _0x8e22x9 == _0xee2b[754]) && _0x8e22xb === 0 ? -1 : 1;
        if (_0x8e22xf > _0x8e22xe) {
          return 1;
        } else {
          if (_0x8e22xf < _0x8e22xe) {
            return -1;
          } else {
            if (_0x8e22xf == _0x8e22xe) {
              return _0x8e22x10[_0xee2b[1894]] > _0x8e22xd[_0xee2b[1894]] ? -1 : 1;
            }
          }
        }
      });
      _0x8e22x7 = _0x8e22xa[0];
      _0x8e22x8[_0xee2b[11]]({x1:_0x8e22x7[_0xee2b[1893]], y1:_0x8e22x7[_0xee2b[1894]], x2:_0x8e22x6[_0xee2b[1893]], y2:_0x8e22x6[_0xee2b[1894]]});
      _0x8e22x1 = _0x8e22x7[_0xee2b[3709]] - _0x8e22x6[_0xee2b[3709]];
      _0x8e22x5 = _0x8e22x7[_0xee2b[3710]] - _0x8e22x6[_0xee2b[3710]];
      switch(true) {
        case !_0x8e22x5 && _0x8e22x1 > 0:
          _0x8e22x9 = _0xee2b[1354];
          break;
        case !_0x8e22x5 && _0x8e22x1 < 0:
          _0x8e22x9 = _0xee2b[867];
          break;
        case !_0x8e22x1 && _0x8e22x5 > 0:
          _0x8e22x9 = _0xee2b[686];
          break;
        case !_0x8e22x1 && _0x8e22x5 < 0:
          _0x8e22x9 = _0xee2b[754];
          break;
      }
      _0x8e22x6 = _0x8e22x7;
    }
  }
  return _0x8e22x4 && _0x8e22x8[_0xee2b[260]]() || false;
}, prependPathWithArrowStaffSegment:function(_0x8e22x2, _0x8e22x4, _0x8e22x1, _0x8e22x3) {
  var _0x8e22x6, _0x8e22x5;
  if (_0x8e22x2[_0xee2b[4]] > 0) {
    _0x8e22x5 = _0x8e22x2[0];
    _0x8e22x6 = {x2:_0x8e22x5[_0xee2b[3713]], y2:_0x8e22x5[_0xee2b[3714]]};
    switch(_0x8e22x3) {
      case _0xee2b[1354]:
        _0x8e22x6[_0xee2b[3713]] = _0x8e22x4[_0xee2b[1893]] - _0x8e22x1;
        _0x8e22x6[_0xee2b[3714]] = _0x8e22x5[_0xee2b[3714]];
        break;
      case _0xee2b[867]:
        _0x8e22x6[_0xee2b[3713]] = _0x8e22x4[_0xee2b[1893]] + _0x8e22x1;
        _0x8e22x6[_0xee2b[3714]] = _0x8e22x5[_0xee2b[3714]];
        break;
      case _0xee2b[686]:
        _0x8e22x6[_0xee2b[3713]] = _0x8e22x5[_0xee2b[3713]];
        _0x8e22x6[_0xee2b[3714]] = _0x8e22x4[_0xee2b[1894]] - _0x8e22x1;
        break;
      case _0xee2b[754]:
        _0x8e22x6[_0xee2b[3713]] = _0x8e22x5[_0xee2b[3713]];
        _0x8e22x6[_0xee2b[3714]] = _0x8e22x4[_0xee2b[1894]] + _0x8e22x1;
        break;
    }
    _0x8e22x2[_0xee2b[205]](_0x8e22x6);
  }
  return _0x8e22x2;
}, appendPathWithArrowStaffSegment:function(_0x8e22x2, _0x8e22x4, _0x8e22x3, _0x8e22x1) {
  var _0x8e22x5, _0x8e22x6;
  if (_0x8e22x2[_0xee2b[4]] > 0) {
    _0x8e22x6 = _0x8e22x2[_0x8e22x2[_0xee2b[4]] - 1];
    _0x8e22x5 = {x1:_0x8e22x6[_0xee2b[3715]], y1:_0x8e22x6[_0xee2b[3716]]};
    switch(_0x8e22x1) {
      case _0xee2b[1354]:
        _0x8e22x5[_0xee2b[3715]] = _0x8e22x4[_0xee2b[1893]] - _0x8e22x3;
        _0x8e22x5[_0xee2b[3716]] = _0x8e22x6[_0xee2b[3716]];
        break;
      case _0xee2b[867]:
        _0x8e22x5[_0xee2b[3715]] = _0x8e22x4[_0xee2b[1893]] + _0x8e22x3;
        _0x8e22x5[_0xee2b[3716]] = _0x8e22x6[_0xee2b[3716]];
        break;
      case _0xee2b[686]:
        _0x8e22x5[_0xee2b[3715]] = _0x8e22x6[_0xee2b[3715]];
        _0x8e22x5[_0xee2b[3716]] = _0x8e22x4[_0xee2b[1894]] - _0x8e22x3;
        break;
      case _0xee2b[754]:
        _0x8e22x5[_0xee2b[3715]] = _0x8e22x6[_0xee2b[3715]];
        _0x8e22x5[_0xee2b[3716]] = _0x8e22x4[_0xee2b[1894]] + _0x8e22x3;
        break;
    }
    _0x8e22x2[_0xee2b[11]](_0x8e22x5);
  }
  return _0x8e22x2;
}, optimizePath:function(_0x8e22x5) {
  var _0x8e22x3 = [], _0x8e22x6, _0x8e22x4;
  if (_0x8e22x5[_0xee2b[4]] > 0) {
    _0x8e22x6 = _0x8e22x5[_0xee2b[209]]();
    _0x8e22x3[_0xee2b[11]](_0x8e22x6);
    while (_0x8e22x5[_0xee2b[4]] > 0) {
      _0x8e22x4 = _0x8e22x5[_0xee2b[209]]();
      if (_0x8e22x6[_0xee2b[3713]] == _0x8e22x4[_0xee2b[3713]] && _0x8e22x6[_0xee2b[3714]] == _0x8e22x4[_0xee2b[3714]] && _0x8e22x6[_0xee2b[3715]] == _0x8e22x4[_0xee2b[3715]] && _0x8e22x6[_0xee2b[3716]] == _0x8e22x4[_0xee2b[3716]]) {
        _0x8e22x6 = _0x8e22x4;
      } else {
        if (_0x8e22x6[_0xee2b[3714]] - _0x8e22x6[_0xee2b[3716]] === 0 && _0x8e22x4[_0xee2b[3714]] - _0x8e22x4[_0xee2b[3716]] === 0) {
          _0x8e22x6[_0xee2b[3715]] = _0x8e22x4[_0xee2b[3715]];
        } else {
          if (_0x8e22x6[_0xee2b[3713]] - _0x8e22x6[_0xee2b[3715]] === 0 && _0x8e22x4[_0xee2b[3713]] - _0x8e22x4[_0xee2b[3715]] === 0) {
            _0x8e22x6[_0xee2b[3716]] = _0x8e22x4[_0xee2b[3716]];
          } else {
            _0x8e22x3[_0xee2b[11]](_0x8e22x4);
            _0x8e22x6 = _0x8e22x4;
          }
        }
      }
    }
  }
  return _0x8e22x3;
}, normalizeSide:function(_0x8e22x3) {
  return this[_0xee2b[45]][_0xee2b[3717]][_0x8e22x3] || _0x8e22x3;
}, statics:{sideToSide:{l:_0xee2b[1354], r:_0xee2b[867], t:_0xee2b[686], b:_0xee2b[754]}}});
Ext[_0xee2b[6]](_0xee2b[3718], {extend:_0xee2b[717], disableFormats:true, rtl:null, text:_0xee2b[3719], constructor:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  Ext[_0xee2b[8]](_0x8e22x6, _0x8e22x3);
  _0x8e22x6[_0xee2b[3438]] = _0x8e22x6[_0xee2b[3438]][_0xee2b[675]](/__SIDE__/g, _0x8e22x6[_0xee2b[1855]] ? _0xee2b[867] : _0xee2b[1354]);
  _0x8e22x6[_0xee2b[9]]([_0x8e22x6[_0xee2b[3438]]]);
}, getSuffixedCls:function(_0x8e22x6, _0x8e22x4) {
  var _0x8e22x3 = _0xee2b[27];
  if (_0x8e22x6 && _0x8e22x6[_0xee2b[147]](_0xee2b[60]) != -1) {
    _0x8e22x3 = _0x8e22x6[_0xee2b[675]](/^\s*(.*)\s*$/, _0xee2b[3720])[_0xee2b[496]](/\s+/)[_0xee2b[73]](_0x8e22x4 + _0xee2b[60]) + _0x8e22x4;
  } else {
    if (_0x8e22x6) {
      _0x8e22x3 = _0x8e22x6 + _0x8e22x4;
    }
  }
  return _0x8e22x3;
}});
Ext[_0xee2b[6]](_0xee2b[3721], function(_0x8e22x3) {
  function _0x8e22x6(_0x8e22x1) {
    var _0x8e22x9 = false;
    if (_0x8e22x1[_0xee2b[3684]] > 0 || _0x8e22x1[_0xee2b[3685]] > 0) {
      _0x8e22x1[_0xee2b[3684]] = _0x8e22x1[_0xee2b[3685]] = 0;
      _0x8e22x9 = true;
    }
    return _0x8e22x9 ? _0x8e22x1 : _0x8e22x9;
  }
  function _0x8e22x5(_0x8e22x1) {
    var _0x8e22x9 = false;
    if (_0x8e22x1[_0xee2b[53]](_0xee2b[3688]) && _0x8e22x1[_0xee2b[3688]] > 2) {
      _0x8e22x1[_0xee2b[3688]] = Math[_0xee2b[704]](_0x8e22x1[_0xee2b[3688]] / 2);
      _0x8e22x9 = true;
    }
    if (_0x8e22x1[_0xee2b[53]](_0xee2b[3689]) && _0x8e22x1[_0xee2b[3689]] > 2) {
      _0x8e22x1[_0xee2b[3689]] = Math[_0xee2b[704]](_0x8e22x1[_0xee2b[3689]] / 2);
      _0x8e22x9 = true;
    }
    if (_0x8e22x1[_0xee2b[53]](_0xee2b[3690]) && _0x8e22x1[_0xee2b[3690]] > 2) {
      _0x8e22x1[_0xee2b[3690]] = Math[_0xee2b[704]](_0x8e22x1[_0xee2b[3690]] / 2);
      _0x8e22x9 = true;
    }
    if (_0x8e22x1[_0xee2b[53]](_0xee2b[3691]) && _0x8e22x1[_0xee2b[3691]] > 2) {
      _0x8e22x1[_0xee2b[3691]] = Math[_0xee2b[704]](_0x8e22x1[_0xee2b[3691]] / 2);
      _0x8e22x9 = true;
    }
    return _0x8e22x9 ? _0x8e22x1 : _0x8e22x9;
  }
  function _0x8e22x4(_0x8e22x1) {
    var _0x8e22x9 = false;
    if (_0x8e22x1[_0xee2b[3682]] > 0 || _0x8e22x1[_0xee2b[3683]] > 0) {
      _0x8e22x1[_0xee2b[3682]] = _0x8e22x1[_0xee2b[3683]] = 0;
      _0x8e22x9 = true;
    }
    return _0x8e22x9 ? _0x8e22x1 : _0x8e22x9;
  }
  var _0x8e22x2 = [_0x8e22x6, _0x8e22x5, _0x8e22x5, _0x8e22x5, _0x8e22x4];
  return {alias:_0xee2b[3722], mixins:[_0xee2b[3641]], requires:[_0xee2b[3673], _0xee2b[3718]], uses:[_0xee2b[34], _0xee2b[717], _0xee2b[2869], _0xee2b[1140], _0xee2b[3673], _0xee2b[3718]], config:{cls:_0xee2b[27], rtl:false, lineTpl:null, canvasCls:null, pathFinderConfig:null, realLineThickness:null, useDependencyRowIntersectionCache:true}, pathFinder:null, dependencyIdAttr:_0xee2b[3723], constructor:function(_0x8e22x1) {
    var _0x8e22x9 = this;
    _0x8e22x9[_0xee2b[35]](_0x8e22x1);
    _0x8e22x9[_0xee2b[3724]] = _0x8e22x9[_0xee2b[3726]](_0x8e22x9[_0xee2b[3725]]());
    if (!_0x8e22x9[_0xee2b[3727]]()) {
      _0x8e22x9[_0xee2b[3729]](new Sch[_0xee2b[1860]].Dependency({rtl:_0x8e22x9[_0xee2b[3728]]()}));
    }
    _0x8e22x9[_0xee2b[3730]]();
  }, clone:function() {
    var _0x8e22x1 = this;
    return new _0x8e22x1[_0xee2b[45]](_0x8e22x1[_0xee2b[3675]]());
  }, applyLineTpl:function(_0x8e22x1) {
    return _0x8e22x1 instanceof Ext[_0xee2b[3731]] ? _0x8e22x1 : new Ext.XTemplate(_0x8e22x1);
  }, updatePathFinderConfig:function(_0x8e22x1) {
    var _0x8e22x9 = this;
    if (_0x8e22x9[_0xee2b[3724]]) {
      if (_0x8e22x1 && _0xee2b[249] in _0x8e22x1 && _0x8e22x1[_0xee2b[249]] !== _0x8e22x9[_0xee2b[3724]][_0xee2b[249]]) {
        Ext[_0xee2b[218]](_0x8e22x9[_0xee2b[3724]]);
        _0x8e22x9[_0xee2b[3724]] = _0x8e22x9[_0xee2b[3726]](_0x8e22x1);
      } else {
        _0x8e22x9[_0xee2b[3724]][_0xee2b[3121]](_0x8e22x1);
      }
    }
  }, createPathFinder:function(_0x8e22x1) {
    return Sch[_0xee2b[49]][_0xee2b[3732]][_0xee2b[831]](_0x8e22x1);
  }, getCanvasSpecification:function() {
    return {tag:_0xee2b[2258], role:_0xee2b[2920], cls:this[_0xee2b[3733]]()};
  }, paint:function(_0x8e22x10, _0x8e22xa, _0x8e22xd, _0x8e22x9) {
    var _0x8e22x8 = this, _0x8e22xe = _0x8e22x8[_0xee2b[3734]]() ? _0x8e22x8[_0xee2b[3735]](_0x8e22x10, _0x8e22xd) : _0x8e22xd, _0x8e22x1 = _0x8e22x8[_0xee2b[3736]](_0x8e22x10, _0x8e22xe);
    _0x8e22xa = Ext[_0xee2b[761]](_0x8e22xa);
    if (_0x8e22x9) {
      var _0x8e22x7 = document[_0xee2b[3662]](_0xee2b[2258]);
      _0x8e22x7[_0xee2b[3737]] = _0x8e22x1;
      _0x8e22xa[_0xee2b[3738]](_0x8e22x7);
    } else {
      _0x8e22xa[_0xee2b[3740]](_0xee2b[3739], _0x8e22x1);
    }
  }, generatePaintMarkup:function(_0x8e22xa, _0x8e22x7) {
    var _0x8e22x9 = this, _0x8e22x1 = _0x8e22x9[_0xee2b[3741]](_0x8e22xa, _0x8e22x7);
    if (!Ext[_0xee2b[307]](_0x8e22x1)) {
      _0x8e22x1 = [_0x8e22x1];
    }
    return Ext[_0xee2b[26]][_0xee2b[41]](_0x8e22x1, function(_0x8e22xd) {
      var _0x8e22x8;
      _0x8e22xd[_0xee2b[3742]] = _0x8e22x9[_0xee2b[3743]](_0x8e22xd);
      _0x8e22x8 = _0x8e22xd[_0xee2b[3742]] && _0x8e22x9[_0xee2b[3744]](_0x8e22xd);
      return _0x8e22x8 && _0x8e22x9[_0xee2b[3727]]()[_0xee2b[8]](_0x8e22x8) || _0xee2b[27];
    })[_0xee2b[73]](_0xee2b[27]);
  }, isDependencyElement:function(_0x8e22x1) {
    return Ext[_0xee2b[761]](_0x8e22x1)[_0xee2b[2592]](_0xee2b[3609]);
  }, getElementsForDependency:function(_0x8e22x1, _0x8e22x7) {
    var _0x8e22x9 = this;
    if (_0x8e22x7 && !Ext[_0xee2b[307]](_0x8e22x7)) {
      _0x8e22x7 = [_0x8e22x7];
    }
    return new Ext[_0xee2b[758]].CompositeElementLite(Ext[_0xee2b[26]][_0xee2b[48]](_0x8e22x7 || [], function(_0x8e22xa, _0x8e22x8) {
      return _0x8e22xa[_0xee2b[318]](Ext[_0xee2b[758]][_0xee2b[2932]][_0xee2b[760]](_0xee2b[3745] + _0x8e22x9[_0xee2b[3746]] + _0xee2b[3747] + _0x8e22x8[_0xee2b[1049]] + _0xee2b[2930], Ext[_0xee2b[3748]](_0x8e22x1)));
    }, []));
  }, getDependencyElements:function(_0x8e22x9) {
    var _0x8e22x1 = Ext[_0xee2b[3748]](_0x8e22x9);
    return new Ext[_0xee2b[758]].CompositeElementLite(_0x8e22x1 && _0x8e22x1[_0xee2b[925]] || []);
  }, getElementDependencyInternalId:function(_0x8e22x1) {
    return Ext[_0xee2b[761]](_0x8e22x1)[_0xee2b[777]](this[_0xee2b[3746]]);
  }, findPath:function(_0x8e22x1) {
    var _0x8e22x9;
    _0x8e22x9 = this[_0xee2b[3724]][_0xee2b[3743]](_0x8e22x1, _0x8e22x2);
    if (!_0x8e22x9) {
      if (_0x8e22x1[_0xee2b[3676]][_0xee2b[754]] - _0x8e22x1[_0xee2b[3676]][_0xee2b[686]] === 0 || _0x8e22x1[_0xee2b[3677]][_0xee2b[754]] - _0x8e22x1[_0xee2b[3677]][_0xee2b[686]] === 0) {
        throw new Error(_0xee2b[3749]);
      }
    }
    return _0x8e22x9;
  }, getLineTplData:function(_0x8e22x1) {
    var _0x8e22x8 = this, _0x8e22x10, _0x8e22x7, _0x8e22xe, _0x8e22xd, _0x8e22xc;
    _0x8e22xc = _0x8e22x1[_0xee2b[3742]];
    if (!_0x8e22x1[_0xee2b[3676]][_0xee2b[262]] && !_0x8e22x1[_0xee2b[3677]][_0xee2b[262]]) {
      for (var _0x8e22x9 = _0x8e22xc[_0xee2b[4]] - 1; _0x8e22x9 >= 0; _0x8e22x9--) {
        var _0x8e22xf = _0x8e22xc[_0x8e22x9];
        if (_0x8e22xf[_0xee2b[3713]] === _0x8e22xf[_0xee2b[3715]]) {
          _0x8e22xc = [_0x8e22xf];
          _0x8e22x1[_0xee2b[3682]] = _0x8e22x1[_0xee2b[3683]] = 0;
          break;
        }
      }
    }
    _0x8e22x10 = _0x8e22x8[_0xee2b[3728]]();
    _0x8e22x7 = _0x8e22x8[_0xee2b[3750]]();
    _0x8e22xe = _0x8e22xc[_0xee2b[4]] && _0x8e22xc[0];
    _0x8e22xd = _0x8e22xc[_0xee2b[4]] && _0x8e22xc[_0x8e22xc[_0xee2b[4]] - 1];
    _0x8e22xc = {cls:_0x8e22x1[_0xee2b[489]] || _0xee2b[27], lineCls:_0x8e22x1[_0xee2b[3751]] || _0xee2b[27], dependencyId:_0x8e22x1[_0xee2b[3752]] || _0xee2b[27], highlighted:_0x8e22x1[_0xee2b[3753]], segments:Ext[_0xee2b[26]][_0xee2b[41]](_0x8e22xc, function(_0x8e22x11) {
      var _0x8e22xb = _0x8e22x8[_0xee2b[3754]](_0x8e22x11), _0x8e22xa;
      if (_0x8e22xb == _0xee2b[1931]) {
        _0x8e22xa = {width:Math[_0xee2b[1524]](_0x8e22x11[_0xee2b[3713]] - _0x8e22x11[_0xee2b[3715]]) + 1, height:_0x8e22x7, top:Math[_0xee2b[203]](_0x8e22x11[_0xee2b[3714]], _0x8e22x11[_0xee2b[3716]]), side:Math[_0xee2b[203]](_0x8e22x11[_0xee2b[3713]], _0x8e22x11[_0xee2b[3715]]), dir:_0x8e22xb};
      } else {
        _0x8e22xa = {height:Math[_0xee2b[1524]](_0x8e22x11[_0xee2b[3714]] - _0x8e22x11[_0xee2b[3716]]) + 1, width:_0x8e22x7, top:Math[_0xee2b[203]](_0x8e22x11[_0xee2b[3714]], _0x8e22x11[_0xee2b[3716]]), side:Math[_0xee2b[203]](_0x8e22x11[_0xee2b[3713]], _0x8e22x11[_0xee2b[3715]]), dir:_0x8e22xb};
      }
      return _0x8e22xa;
    }), startArrow:_0x8e22x1[_0xee2b[3682]] && {side:_0x8e22xe[_0xee2b[3713]], top:_0x8e22xe[_0xee2b[3714]], dir:_0x8e22x8[_0xee2b[3755]](_0x8e22x1[_0xee2b[3680]], _0x8e22x10)}, endArrow:_0x8e22x1[_0xee2b[3683]] && {side:_0x8e22xd[_0xee2b[3715]], top:_0x8e22xd[_0xee2b[3716]], dir:_0x8e22x8[_0xee2b[3755]](_0x8e22x1[_0xee2b[3681]], _0x8e22x10)}, realLineThickness:_0x8e22x8[_0xee2b[3750]]()};
    return _0x8e22xc;
  }, isDependencyInTimeSpan:function(_0x8e22x9, _0x8e22x1, _0x8e22xa) {
    var _0x8e22x7 = _0x8e22x9[_0xee2b[3756]]();
    return _0x8e22x7 && (!_0x8e22x1 || !_0x8e22xa || Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[714]](_0x8e22x7[_0xee2b[179]], _0x8e22x7[_0xee2b[771]], _0x8e22x1, _0x8e22xa));
  }, addToRowIntersectionCacheIfNotPresent:function(_0x8e22x8, _0x8e22xa) {
    var _0x8e22x9 = this, _0x8e22xd = _0x8e22x8[_0xee2b[3757]](), _0x8e22x7 = _0x8e22x8[_0xee2b[3758]](), _0x8e22x1 = _0x8e22x9[_0xee2b[1303]][_0xee2b[1520]]() === _0x8e22xa[_0xee2b[4]];
    if (_0x8e22x9[_0xee2b[3759]]) {
      return;
    }
    Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22xa, function(_0x8e22xf) {
      if (_0x8e22x1 || !_0x8e22x9[_0xee2b[3760]](_0x8e22xf)) {
        var _0x8e22x11 = _0x8e22xf[_0xee2b[1344]](), _0x8e22x19 = _0x8e22xf[_0xee2b[1345]]();
        if (_0x8e22x9[_0xee2b[3761]](_0x8e22xf, _0x8e22xd, _0x8e22x7)) {
          var _0x8e22x10 = _0x8e22x9[_0xee2b[3762]](_0x8e22x8, _0x8e22x11), _0x8e22xe = _0x8e22x9[_0xee2b[3762]](_0x8e22x8, _0x8e22x19), _0x8e22x18 = Math[_0xee2b[203]](_0x8e22x10, _0x8e22xe), _0x8e22xb = Math[_0xee2b[715]](_0x8e22x10, _0x8e22xe);
          if (_0x8e22x18 > -1 && _0x8e22xb > -1) {
            _0x8e22x18 = Math[_0xee2b[424]](_0x8e22x18 / 10);
            _0x8e22xb = Math[_0xee2b[424]](_0x8e22xb / 10);
            for (var _0x8e22xc = _0x8e22x18; _0x8e22xc <= _0x8e22xb; _0x8e22xc++) {
              if (!_0x8e22x9[_0xee2b[3763]][_0x8e22xc]) {
                _0x8e22x9[_0xee2b[3763]][_0x8e22xc] = [];
              }
              _0x8e22x9[_0xee2b[3763]][_0x8e22xc][_0xee2b[11]](_0x8e22xf);
              _0x8e22x9[_0xee2b[3764]][_0x8e22xf[_0xee2b[1049]]] = true;
            }
          }
        }
      }
    });
    if (!_0x8e22x1) {
      _0x8e22x1 = Object[_0xee2b[3765]](_0x8e22x9[_0xee2b[3764]])[_0xee2b[4]] === _0x8e22x9[_0xee2b[1303]][_0xee2b[1520]]();
    }
    if (_0x8e22x1) {
      _0x8e22x9[_0xee2b[3759]] = true;
    }
  }, getIndexForCache:function(_0x8e22x7, _0x8e22x1) {
    if (_0xee2b[1053] in _0x8e22x1) {
      var _0x8e22x9 = _0x8e22x1[_0xee2b[1053]]();
      if (_0x8e22x9) {
        return _0x8e22x7[_0xee2b[1007]]()[_0xee2b[147]](_0x8e22x9);
      }
      if (!_0x8e22x9 && _0x8e22x1[_0xee2b[1009]] in _0x8e22x1[_0xee2b[22]]) {
        return -1;
      }
      throw new Error(_0xee2b[3766]);
    } else {
      if (_0xee2b[3767] in _0x8e22x1) {
        return _0x8e22x1[_0xee2b[3767]]()[_0xee2b[147]](_0x8e22x1);
      }
    }
  }, resetRowIntersectionCache:function(_0x8e22x1) {
    this[_0xee2b[3759]] = false;
    if (!_0x8e22x1) {
      this[_0xee2b[3763]] = {};
      this[_0xee2b[3764]] = {};
    }
  }, isInRowIntersectionCache:function(_0x8e22x1) {
    return !!this[_0xee2b[3764]][_0x8e22x1[_0xee2b[1049]]];
  }, filterByRowIntersections:function(_0x8e22x8, _0x8e22xd) {
    var _0x8e22xe = this;
    if (!Ext[_0xee2b[307]](_0x8e22xd)) {
      _0x8e22xd = [_0x8e22xd];
    }
    if (!_0x8e22xd[_0xee2b[4]]) {
      return [];
    }
    _0x8e22xe[_0xee2b[3768]](_0x8e22x8, _0x8e22xd);
    var _0x8e22x10 = [], _0x8e22xc = _0x8e22x8[_0xee2b[2520]](), _0x8e22x7 = _0x8e22x8[_0xee2b[147]](_0x8e22xc[0]), _0x8e22xf = _0x8e22x8[_0xee2b[147]](_0x8e22xc[_0x8e22xc[_0xee2b[4]] - 1]), _0x8e22x1;
    _0x8e22x7 = Math[_0xee2b[424]](_0x8e22x7 / 10);
    _0x8e22xf = Math[_0xee2b[424]](_0x8e22xf / 10);
    for (var _0x8e22x9 = _0x8e22x7; _0x8e22x9 <= _0x8e22xf; _0x8e22x9++) {
      _0x8e22x1 = _0x8e22xe[_0xee2b[3763]][_0x8e22x9];
      _0x8e22x1 && _0x8e22x10[_0xee2b[11]][_0xee2b[8]](_0x8e22x10, _0x8e22x1);
    }
    return Ext[_0xee2b[26]][_0xee2b[3059]](_0x8e22xd, Ext[_0xee2b[26]][_0xee2b[1376]](_0x8e22x10));
  }, getLineDefsForDependencies:function(_0x8e22x7, _0x8e22x8) {
    var _0x8e22x9 = Ext[_0xee2b[26]], _0x8e22xd = this, _0x8e22x1 = {}, _0x8e22xe = _0x8e22x7[_0xee2b[3757]](), _0x8e22x10 = _0x8e22x7[_0xee2b[3758]](), _0x8e22xa;
    if (!Ext[_0xee2b[307]](_0x8e22x8)) {
      _0x8e22x8 = [_0x8e22x8];
    }
    if (!_0x8e22x8[_0xee2b[4]]) {
      return [];
    }
    var _0x8e22xf = _0x8e22x9[_0xee2b[48]](_0x8e22x8 || [], function(_0x8e22xc, _0x8e22x19) {
      var _0x8e22x18 = _0x8e22x19[_0xee2b[1344]](), _0x8e22x15 = _0x8e22x19[_0xee2b[1345]](), _0x8e22xb, _0x8e22x11;
      if (_0x8e22xd[_0xee2b[3761]](_0x8e22x19, _0x8e22xe, _0x8e22x10)) {
        _0x8e22xa = _0x8e22x18[_0xee2b[1049]];
        if (!_0x8e22x1[_0x8e22xa]) {
          _0x8e22xb = _0x8e22xd[_0xee2b[2899]](_0x8e22x7, _0x8e22x18) || [];
          if (!Ext[_0xee2b[307]](_0x8e22xb)) {
            _0x8e22xb = [_0x8e22xb];
          }
          _0x8e22x1[_0x8e22xa] = _0x8e22xb;
        } else {
          _0x8e22xb = _0x8e22x1[_0x8e22xa];
        }
        _0x8e22xa = _0x8e22x15[_0xee2b[1049]];
        if (!_0x8e22x1[_0x8e22xa]) {
          _0x8e22x11 = _0x8e22xd[_0xee2b[2899]](_0x8e22x7, _0x8e22x15) || [];
          if (!Ext[_0xee2b[307]](_0x8e22x11)) {
            _0x8e22x11 = [_0x8e22x11];
          }
          _0x8e22x1[_0x8e22xa] = _0x8e22x11;
        } else {
          _0x8e22x11 = _0x8e22x1[_0x8e22xa];
        }
        _0x8e22xc = _0x8e22x9[_0xee2b[48]](_0x8e22xb, function(_0x8e22x16, _0x8e22x12, _0x8e22x14) {
          return _0x8e22x9[_0xee2b[48]](_0x8e22x11, function(_0x8e22x13, _0x8e22x17, _0x8e22x23) {
            if (_0x8e22x12 && _0x8e22x17 && (_0x8e22x12[_0xee2b[262]] || _0x8e22x17[_0xee2b[262]] || _0x8e22x12[_0xee2b[2866]] != _0x8e22x17[_0xee2b[2866]])) {
              _0x8e22x13[_0xee2b[11]](_0x8e22xd[_0xee2b[3769]](_0x8e22x7, _0x8e22x19, _0x8e22x18, _0x8e22x15, _0x8e22x12, _0x8e22x17, null));
            }
            return _0x8e22x13;
          }, _0x8e22x16);
        }, _0x8e22xc);
      }
      return _0x8e22xc;
    }, []);
    return _0x8e22xf;
  }, getItemBox:function(_0x8e22x9, _0x8e22x1) {
    return _0x8e22x9[_0xee2b[2899]](_0x8e22x1);
  }, createLineDef:function(_0x8e22xf, _0x8e22x14, _0x8e22x12, _0x8e22x1d, _0x8e22x1, _0x8e22x11, _0x8e22xc) {
    var _0x8e22x17 = _0x8e22x14[_0xee2b[45]][_0xee2b[1106]], _0x8e22x1b = this, _0x8e22xe = _0x8e22x14[_0xee2b[1247]](), _0x8e22x15 = _0x8e22x1b[_0xee2b[3724]][_0xee2b[3770]](), _0x8e22x1a = _0x8e22x1b[_0xee2b[3724]][_0xee2b[3771]](), _0x8e22xd = _0x8e22x14[_0xee2b[3772]](), _0x8e22x23 = _0x8e22xd ? _0x8e22x1b[_0xee2b[3724]][_0xee2b[3773]]() : 0, _0x8e22x20 = _0x8e22xd ? _0x8e22x1b[_0xee2b[3724]][_0xee2b[3774]]() : 0, _0x8e22x9 = _0x8e22x1b[_0xee2b[3724]][_0xee2b[3775]](), _0x8e22xa = _0x8e22x1b[_0xee2b[3724]][_0xee2b[3776]](), 
    _0x8e22x19 = _0x8e22x14[_0xee2b[3777]](), _0x8e22x1c = _0x8e22x14[_0xee2b[3778]]();
    if (!_0x8e22x19) {
      switch(true) {
        case _0x8e22xe == _0x8e22x17[_0xee2b[1347]]:
          _0x8e22x19 = _0x8e22xf[_0xee2b[2900]](_0x8e22x12);
          break;
        case _0x8e22xe == _0x8e22x17[_0xee2b[1346]]:
          _0x8e22x19 = _0x8e22xf[_0xee2b[2900]](_0x8e22x12);
          break;
        case _0x8e22xe == _0x8e22x17[_0xee2b[1349]]:
          _0x8e22x19 = _0x8e22xf[_0xee2b[2901]](_0x8e22x12);
          break;
        case _0x8e22xe == _0x8e22x17[_0xee2b[1348]]:
          _0x8e22x19 = _0x8e22xf[_0xee2b[2901]](_0x8e22x12);
          break;
        default:
          throw new Error(_0xee2b[3779] + _0x8e22x14[_0xee2b[1247]]());
      }
    }
    if (!_0x8e22x1c) {
      switch(true) {
        case _0x8e22xe == _0x8e22x17[_0xee2b[1347]]:
          _0x8e22x1c = _0x8e22xf[_0xee2b[2901]](_0x8e22x1d);
          break;
        case _0x8e22xe == _0x8e22x17[_0xee2b[1346]]:
          _0x8e22x1c = _0x8e22xf[_0xee2b[2900]](_0x8e22x1d);
          break;
        case _0x8e22xe == _0x8e22x17[_0xee2b[1349]]:
          _0x8e22x1c = _0x8e22xf[_0xee2b[2900]](_0x8e22x1d);
          break;
        case _0x8e22xe == _0x8e22x17[_0xee2b[1348]]:
          _0x8e22x1c = _0x8e22xf[_0xee2b[2901]](_0x8e22x1d);
          break;
        default:
          throw new Error(_0xee2b[3779] + _0x8e22x14[_0xee2b[1247]]());
      }
    }
    switch(true) {
      case (_0x8e22x19 == _0xee2b[1354] || _0x8e22x19 == _0xee2b[867]) && (_0x8e22x1c == _0xee2b[1354] || _0x8e22x1c == _0xee2b[867]):
        _0x8e22x1a = 2;
        _0x8e22x15 = 5;
        break;
      case (_0x8e22x19 == _0xee2b[686] || _0x8e22x19 == _0xee2b[754]) && (_0x8e22x1c == _0xee2b[686] || _0x8e22x1c == _0xee2b[754]):
        _0x8e22x1a = 7;
        _0x8e22x15 = 2;
        break;
    }
    var _0x8e22x10 = Number[_0xee2b[1418]];
    var _0x8e22x18 = {from:(_0x8e22x1[_0xee2b[179]] + _0x8e22x1[_0xee2b[771]]) / 2, to:(_0x8e22x11[_0xee2b[179]] + _0x8e22x11[_0xee2b[771]]) / 2};
    var _0x8e22x8 = {from:(_0x8e22x1[_0xee2b[686]] + _0x8e22x1[_0xee2b[754]]) / 2, to:(_0x8e22x11[_0xee2b[686]] + _0x8e22x11[_0xee2b[754]]) / 2};
    if ((_0x8e22x19 === _0xee2b[686] && _0x8e22x1c === _0xee2b[754] || _0x8e22x19 === _0xee2b[754] && _0x8e22x1c === _0xee2b[686]) && _0x8e22x18[_0xee2b[3780]] === _0x8e22x18[_0xee2b[3781]]) {
      _0x8e22x10 = Math[_0xee2b[1524]](_0x8e22x1[_0x8e22x19] - _0x8e22x11[_0x8e22x1c]);
    } else {
      if ((_0x8e22x19 === _0xee2b[1354] && _0x8e22x1c === _0xee2b[867] || _0x8e22x19 === _0xee2b[867] && _0x8e22x1c === _0xee2b[1354]) && _0x8e22x8[_0xee2b[3780]] === _0x8e22x8[_0xee2b[3781]]) {
        var _0x8e22xb = _0x8e22x19 === _0xee2b[1354] ? _0xee2b[179] : _0xee2b[771];
        var _0x8e22x16 = _0x8e22x1c === _0xee2b[1354] ? _0xee2b[179] : _0xee2b[771];
        if (_0x8e22xf[_0xee2b[1855]]) {
          _0x8e22xb = _0x8e22xb === _0xee2b[179] ? _0xee2b[771] : _0xee2b[179];
          _0x8e22x16 = _0x8e22x16 === _0xee2b[179] ? _0xee2b[771] : _0xee2b[179];
        }
        var _0x8e22x13 = _0x8e22x1[_0x8e22xb];
        var _0x8e22x7 = _0x8e22x11[_0x8e22x16];
        _0x8e22x10 = Math[_0xee2b[1524]](_0x8e22x13 - _0x8e22x7);
      }
    }
    if (_0x8e22x10 < _0x8e22xa * _0x8e22x9 * 2) {
      _0x8e22x23 = _0x8e22x9 = 0;
      if (_0x8e22x10 <= _0x8e22xa * 2) {
        _0x8e22x20 = _0x8e22xa = 0;
      }
    }
    return Ext[_0xee2b[330]]({startBox:_0x8e22x1, startSide:_0x8e22x19, startArrowSize:_0x8e22x20, startArrowMargin:_0x8e22x23, endBox:_0x8e22x11, endSide:_0x8e22x1c, endArrowSize:_0x8e22xa, endArrowMargin:_0x8e22x9, top:Math[_0xee2b[203]](_0x8e22x1[_0xee2b[686]], _0x8e22x11[_0xee2b[686]]), bottom:Math[_0xee2b[715]](_0x8e22x1[_0xee2b[754]], _0x8e22x11[_0xee2b[754]]), verticalMargin:_0x8e22x1a, horizontalMargin:_0x8e22x15, startVerticalMargin:_0x8e22x1a, startHorizontalMargin:_0x8e22x15, endVerticalMargin:_0x8e22x1a, 
    endHorizontalMargin:_0x8e22x15, otherBoxes:_0x8e22xc, dependency:_0x8e22x14, dependencyId:_0x8e22x14[_0xee2b[1049]], lineCls:_0x8e22x1b[_0xee2b[1284]](), cls:_0x8e22x14[_0xee2b[1284]](), highlighted:_0x8e22x14[_0xee2b[1350]]()}, _0x8e22x1b[_0xee2b[3675]]());
  }, convertSideToDir:function(_0x8e22x1, _0x8e22x9) {
    return this[_0xee2b[45]][_0xee2b[3783]][_0x8e22x1 + (_0x8e22x9 && _0xee2b[3782] || _0xee2b[27])];
  }, getSegmentDir:function(_0x8e22x9) {
    var _0x8e22x1 = _0xee2b[1932];
    if (_0x8e22x9[_0xee2b[3714]] === _0x8e22x9[_0xee2b[3716]]) {
      _0x8e22x1 = _0xee2b[1931];
    }
    return _0x8e22x1;
  }, inheritableStatics:{sideToDir:{left:_0xee2b[867], right:_0xee2b[1354], top:_0xee2b[861], bottom:_0xee2b[694], 'left-rtl':_0xee2b[1354], 'right-rtl':_0xee2b[867], 'top-rtl':_0xee2b[861], 'bottom-rtl':_0xee2b[694]}}};
});
Ext[_0xee2b[6]](_0xee2b[3784], function() {
  function _0x8e22x9(_0x8e22xa) {
    return Ext[_0xee2b[26]][_0xee2b[48]](_0x8e22xa, function(_0x8e22x8, _0x8e22xd) {
      _0x8e22x8[_0x8e22xd[_0xee2b[32]]()] = _0x8e22xd;
      return _0x8e22x8;
    }, {});
  }
  function _0x8e22x1(_0x8e22xa) {
    return Ext[_0xee2b[154]][_0xee2b[1556]](_0x8e22x9(_0x8e22xa));
  }
  function _0x8e22x2(_0x8e22xd, _0x8e22x8) {
    var _0x8e22xe, _0x8e22x10, _0x8e22xa = [];
    _0x8e22xe = _0x8e22x9(_0x8e22xd);
    _0x8e22x10 = _0x8e22x9(_0x8e22x8);
    Ext[_0xee2b[154]][_0xee2b[25]](_0x8e22xe, function(_0x8e22xc, _0x8e22xf) {
      _0x8e22x10[_0xee2b[53]](_0x8e22xc) || _0x8e22xa[_0xee2b[11]](_0x8e22xf);
    });
    return _0x8e22xa;
  }
  var _0x8e22x4 = function() {
    Ext[_0xee2b[1182]][_0xee2b[3]](_0xee2b[3785]);
  };
  var _0x8e22x6 = {render:_0x8e22x4, clear:_0x8e22x4, scheduledRender:_0x8e22x4, destroy:_0x8e22x4};
  var _0x8e22x3, _0x8e22x7, _0x8e22x5;
  _0x8e22x3 = Ext[_0xee2b[330]]({render:function(_0x8e22xf, _0x8e22xd, _0x8e22xb, _0x8e22xe) {
    var _0x8e22xc, _0x8e22x8, _0x8e22x10, _0x8e22xa;
    _0x8e22xc = new Ext.Promise(function(_0x8e22x19, _0x8e22x11) {
      _0x8e22x8 = _0x8e22x19;
      _0x8e22x10 = _0x8e22x11;
    });
    if (_0x8e22xd[_0xee2b[3786]]()) {
      _0x8e22xf[_0xee2b[3787]] = _0x8e22xb;
      _0x8e22xf[_0xee2b[3788]] = [];
      Ext[_0xee2b[26]][_0xee2b[48]](_0x8e22xf._depsToRender, function(_0x8e22x11, _0x8e22x19) {
        return _0x8e22x11 && !!_0x8e22x19[_0xee2b[64]];
      }, true) || Ext[_0xee2b[1182]][_0xee2b[3]](_0xee2b[3789]);
      _0x8e22xa = _0x8e22xd[_0xee2b[3610]]()[_0xee2b[694]](_0xee2b[3790]);
      if (_0x8e22xa) {
        _0x8e22xf[_0xee2b[3791]] = _0x8e22xa[_0xee2b[149]](_0xee2b[2019], function() {
          delete _0x8e22xf[_0xee2b[3791]];
          _0x8e22xf[_0xee2b[3793]][_0xee2b[3792]](_0x8e22xf, _0x8e22xd);
        }, null, {single:true, destroyable:true});
      } else {
        _0x8e22xf[_0xee2b[3794]] = Ext[_0xee2b[2600]](function() {
          delete _0x8e22xf[_0xee2b[3794]];
          _0x8e22xf[_0xee2b[3793]][_0xee2b[3792]](_0x8e22xf, _0x8e22xd);
        });
      }
      _0x8e22xf[_0xee2b[3796]][_0xee2b[3795]] && _0x8e22xf[_0xee2b[180]](_0xee2b[3795], _0x8e22xf);
      _0x8e22xf[_0xee2b[3797]] = _0x8e22xc;
      _0x8e22xf[_0xee2b[3798]] = _0x8e22x8;
      _0x8e22xf[_0xee2b[3799]] = _0x8e22x10;
      _0x8e22xf[_0xee2b[3793]] = _0x8e22x7;
    } else {
      _0x8e22x10(_0x8e22xb);
    }
    return _0x8e22xc;
  }, clear:function(_0x8e22xd, _0x8e22xa, _0x8e22xe, _0x8e22x8) {
    var _0x8e22x10;
    if (_0x8e22xa[_0xee2b[3786]]()) {
      if (_0x8e22xa[_0xee2b[3800]]()) {
        if (_0x8e22x8) {
          _0x8e22xa[_0xee2b[3803]]()[_0xee2b[3802]](_0x8e22xa[_0xee2b[3610]](), _0x8e22xa[_0xee2b[3801]](), [], true);
        } else {
          Ext[_0xee2b[218]](_0x8e22xa[_0xee2b[3803]]()[_0xee2b[3804]](_0x8e22xa[_0xee2b[3801]](), _0x8e22xe));
        }
      }
      _0x8e22x10 = Ext[_0xee2b[3806]][_0xee2b[3805]](_0x8e22xe);
    } else {
      _0x8e22x10 = Ext[_0xee2b[3806]][_0xee2b[378]](_0x8e22xe);
    }
    return _0x8e22x10;
  }, destroy:function(_0x8e22xa) {
    _0x8e22xa[_0xee2b[458]] = true;
    _0x8e22xa[_0xee2b[3793]] = _0x8e22x5;
  }}, _0x8e22x6);
  _0x8e22x7 = Ext[_0xee2b[330]]({render:function(_0x8e22xd, _0x8e22xa, _0x8e22x10, _0x8e22x8) {
    _0x8e22xd[_0xee2b[3787]] = _0x8e22x8 ? _0x8e22x10 : _0x8e22x1(_0x8e22xd[_0xee2b[3787]][_0xee2b[318]](_0x8e22x10));
    Ext[_0xee2b[26]][_0xee2b[48]](_0x8e22xd._depsToRender, function(_0x8e22xe, _0x8e22xf) {
      return _0x8e22xe && !!_0x8e22xf[_0xee2b[64]];
    }, true) || Ext[_0xee2b[1182]][_0xee2b[3]](_0xee2b[3807]);
    return _0x8e22xd[_0xee2b[3797]];
  }, clear:function(_0x8e22xd, _0x8e22xa, _0x8e22xe, _0x8e22x8) {
    var _0x8e22x10;
    if (_0x8e22xa[_0xee2b[3786]]()) {
      if (_0x8e22xa[_0xee2b[3800]]()) {
        if (_0x8e22x8) {
          _0x8e22xa[_0xee2b[3803]]()[_0xee2b[3802]](_0x8e22xa[_0xee2b[3610]](), _0x8e22xa[_0xee2b[3801]](), [], true);
        } else {
          Ext[_0xee2b[218]](_0x8e22xa[_0xee2b[3803]]()[_0xee2b[3804]](_0x8e22xa[_0xee2b[3801]](), _0x8e22xe));
        }
      }
      if (_0x8e22x8) {
        _0x8e22xd[_0xee2b[3787]] = [];
      } else {
        _0x8e22xd[_0xee2b[3787]] = _0x8e22x2(_0x8e22xd._depsToRender, _0x8e22xe);
      }
      _0x8e22x10 = Ext[_0xee2b[3806]][_0xee2b[3805]](_0x8e22xe);
    } else {
      _0x8e22x10 = Ext[_0xee2b[3806]][_0xee2b[378]](_0x8e22xe);
    }
    return _0x8e22x10;
  }, scheduledRender:function(_0x8e22x10, _0x8e22xd) {
    var _0x8e22xa, _0x8e22x8;
    if (_0x8e22xd[_0xee2b[3786]]()) {
      _0x8e22xa = _0x8e22xd[_0xee2b[3610]]()[_0xee2b[694]](_0xee2b[3790]);
      if (_0x8e22xa) {
        _0x8e22x10[_0xee2b[3791]] = _0x8e22xa[_0xee2b[149]](_0xee2b[2019], function() {
          delete _0x8e22x10[_0xee2b[3791]];
          _0x8e22x10[_0xee2b[3793]][_0xee2b[3792]](_0x8e22x10, _0x8e22xd);
        }, null, {single:true, destroyable:true});
      } else {
        if (_0x8e22x10[_0xee2b[3787]][_0xee2b[4]] > 0) {
          Ext[_0xee2b[26]][_0xee2b[48]](_0x8e22x10._depsToRender, function(_0x8e22xe, _0x8e22xf) {
            return _0x8e22xe && !!_0x8e22xf[_0xee2b[64]];
          }, true) || Ext[_0xee2b[1182]][_0xee2b[3]](_0xee2b[3789]);
          _0x8e22x8 = _0x8e22x10[_0xee2b[3808]](_0x8e22xd, _0x8e22x10._depsToRender, _0x8e22x10._depsRendered);
          Ext[_0xee2b[133]] && Ext[_0xee2b[133]][_0xee2b[307]](_0x8e22x8, _0xee2b[3809]);
          Ext[_0xee2b[133]] && Ext[_0xee2b[133]][_0xee2b[1373]](_0x8e22x8[_0xee2b[4]] == 2, _0xee2b[3810]);
          _0x8e22x10[_0xee2b[3788]] = _0x8e22x1(_0x8e22x10[_0xee2b[3788]][_0xee2b[318]](_0x8e22x8[0]));
          _0x8e22x10[_0xee2b[3787]] = _0x8e22x8[1];
          _0x8e22x10[_0xee2b[3796]][_0xee2b[3811]] && _0x8e22x10[_0xee2b[180]](_0xee2b[3811], _0x8e22x10, _0x8e22x10._depsToRender, _0x8e22x10._depsRendered);
          if (_0x8e22x10[_0xee2b[3787]][_0xee2b[4]] > 0) {
            _0x8e22x10[_0xee2b[3794]] = Ext[_0xee2b[2600]](function() {
              delete _0x8e22x10[_0xee2b[3794]];
              _0x8e22x10[_0xee2b[3793]][_0xee2b[3792]](_0x8e22x10, _0x8e22xd);
            });
          } else {
            _0x8e22x10[_0xee2b[3796]][_0xee2b[3812]] && _0x8e22x10[_0xee2b[180]](_0xee2b[3812], _0x8e22x10, _0x8e22x10._depsRendered);
            _0x8e22x10._renderPromiseResolve(_0x8e22x10._depsRendered);
            delete _0x8e22x10[_0xee2b[3797]];
            delete _0x8e22x10[_0xee2b[3798]];
            delete _0x8e22x10[_0xee2b[3799]];
            delete _0x8e22x10[_0xee2b[3787]];
            delete _0x8e22x10[_0xee2b[3788]];
            _0x8e22x10[_0xee2b[3793]] = _0x8e22x3;
          }
        } else {
          _0x8e22x10[_0xee2b[3796]][_0xee2b[3812]] && _0x8e22x10[_0xee2b[180]](_0xee2b[3812], _0x8e22x10, _0x8e22x10._depsRendered);
          _0x8e22x10._renderPromiseResolve(_0x8e22x10._depsRendered);
          delete _0x8e22x10[_0xee2b[3797]];
          delete _0x8e22x10[_0xee2b[3798]];
          delete _0x8e22x10[_0xee2b[3799]];
          delete _0x8e22x10[_0xee2b[3787]];
          delete _0x8e22x10[_0xee2b[3788]];
          _0x8e22x10[_0xee2b[3793]] = _0x8e22x3;
        }
      }
    } else {
      _0x8e22x10[_0xee2b[3796]][_0xee2b[3813]] && _0x8e22x10[_0xee2b[180]](_0xee2b[3813], _0x8e22x10, _0x8e22x10._depsRendered, _0x8e22x10._depsToRender);
      _0x8e22x10._renderPromiseReject(_0x8e22x10._depsToRender);
      delete _0x8e22x10[_0xee2b[3797]];
      delete _0x8e22x10[_0xee2b[3798]];
      delete _0x8e22x10[_0xee2b[3799]];
      delete _0x8e22x10[_0xee2b[3787]];
      delete _0x8e22x10[_0xee2b[3788]];
      _0x8e22x10[_0xee2b[3793]] = _0x8e22x3;
    }
  }, destroy:function(_0x8e22xa) {
    if (_0x8e22xa[_0xee2b[3794]]) {
      Ext[_0xee2b[3814]](_0x8e22xa._scheduledRenderCancelId);
      delete _0x8e22xa[_0xee2b[3794]];
    }
    if (_0x8e22xa[_0xee2b[3791]]) {
      Ext[_0xee2b[218]](_0x8e22xa._scheduledRenderDetacher);
      delete _0x8e22xa[_0xee2b[3791]];
    }
    _0x8e22xa[_0xee2b[3796]][_0xee2b[3813]] && _0x8e22xa[_0xee2b[180]](_0xee2b[3813], _0x8e22xa, _0x8e22xa._depsRendered, _0x8e22xa._depsToRender);
    _0x8e22xa._renderPromiseReject(_0x8e22xa._depsToRender);
    delete _0x8e22xa[_0xee2b[3797]];
    delete _0x8e22xa[_0xee2b[3798]];
    delete _0x8e22xa[_0xee2b[3799]];
    delete _0x8e22xa[_0xee2b[3787]];
    delete _0x8e22xa[_0xee2b[3788]];
    _0x8e22xa[_0xee2b[458]] = true;
    _0x8e22xa[_0xee2b[3793]] = _0x8e22x5;
  }}, _0x8e22x6);
  _0x8e22x5 = _0x8e22x6;
  return {alias:_0xee2b[3815], mixins:[_0xee2b[3641], _0xee2b[3816]], _fsaState:_0x8e22x3, constructor:function(_0x8e22xa) {
    var _0x8e22x8 = this;
    _0x8e22x8[_0xee2b[295]][_0xee2b[294]][_0xee2b[217]][_0xee2b[293]](_0x8e22x8, _0x8e22xa);
  }, destroy:function() {
    var _0x8e22xa = this;
    return _0x8e22xa[_0xee2b[3793]][_0xee2b[218]](_0x8e22xa);
  }, renderDependencies:function(_0x8e22xa, _0x8e22x10) {
    var _0x8e22xd = this, _0x8e22x8 = !_0x8e22x10;
    return _0x8e22xd[_0xee2b[3793]][_0xee2b[748]](_0x8e22xd, _0x8e22xa, _0x8e22x10 || _0x8e22xa[_0xee2b[1306]]()[_0xee2b[1005]](), _0x8e22x8);
  }, clearDependencies:function(_0x8e22xa, _0x8e22x10) {
    var _0x8e22xd = this, _0x8e22x8 = !_0x8e22x10;
    return _0x8e22xd[_0xee2b[3793]][_0xee2b[231]](_0x8e22xd, _0x8e22xa, _0x8e22x10 || _0x8e22xa[_0xee2b[1306]]()[_0xee2b[1005]](), _0x8e22x8);
  }, updateDependencies:function(_0x8e22xa, _0x8e22x10) {
    var _0x8e22xd = this, _0x8e22x8 = !_0x8e22x10;
    _0x8e22x10 = _0x8e22x10 || _0x8e22xa[_0xee2b[1306]]()[_0xee2b[1005]]();
    return _0x8e22xd[_0xee2b[3793]][_0xee2b[231]](_0x8e22xd, _0x8e22xa, _0x8e22x10, _0x8e22x8)[_0xee2b[3817]](function() {
      _0x8e22x10 = _0x8e22x8 ? _0x8e22xa[_0xee2b[1306]]()[_0xee2b[1005]]() : Ext[_0xee2b[26]][_0xee2b[48]](_0x8e22x10, function(_0x8e22xf, _0x8e22xe) {
        if (_0x8e22xe[_0xee2b[64]] && Ext[_0xee2b[26]][_0xee2b[147]](_0x8e22xe[_0xee2b[64]][_0xee2b[373]], _0x8e22xe) === -1) {
          _0x8e22xf[_0xee2b[11]](_0x8e22xe);
        }
        return _0x8e22xf;
      }, []);
      return !_0x8e22xd[_0xee2b[458]] ? _0x8e22xd[_0xee2b[3793]][_0xee2b[748]](_0x8e22xd, _0x8e22xa, _0x8e22x10, _0x8e22x8) : _0x8e22x10;
    });
  }, delegateRendering:function(_0x8e22x8, _0x8e22xa, _0x8e22xd) {
    Ext[_0xee2b[1182]][_0xee2b[3]](_0xee2b[29]);
  }, inheritableStatics:{depsToMap:_0x8e22x9, uniqueDeps:_0x8e22x1, diffDeps:_0x8e22x2}};
});
Ext[_0xee2b[6]](_0xee2b[3818], {extend:_0xee2b[3784], alias:_0xee2b[3819], config:{depsPerStep:50, mode:_0xee2b[3820]}, delegateRendering:function(_0x8e22x6, _0x8e22x3, _0x8e22x4) {
  var _0x8e22x5 = this;
  return _0x8e22x5[_0xee2b[2131]]() == _0xee2b[3820] ? _0x8e22x5[_0xee2b[3821]](_0x8e22x6, _0x8e22x3, _0x8e22x4) : _0x8e22x5[_0xee2b[3822]](_0x8e22x6, _0x8e22x3, _0x8e22x4);
}, delegateRenderingBulk:function(_0x8e22x6, _0x8e22x3, _0x8e22x4) {
  _0x8e22x6[_0xee2b[3803]]()[_0xee2b[3802]](_0x8e22x6[_0xee2b[3610]](), _0x8e22x6[_0xee2b[3801]](), _0x8e22x3, false);
  return [_0x8e22x3, []];
}, delegateRenderingAsync:function(_0x8e22x4, _0x8e22x6, _0x8e22x5) {
  var _0x8e22x2 = this, _0x8e22x1 = _0x8e22x2[_0xee2b[3823]](), _0x8e22x3 = _0x8e22x6[_0xee2b[191]](0, _0x8e22x1), _0x8e22x9 = _0x8e22x6[_0xee2b[191]](_0x8e22x1);
  _0x8e22x4[_0xee2b[3803]]()[_0xee2b[3802]](_0x8e22x4[_0xee2b[3610]](), _0x8e22x4[_0xee2b[3801]](), _0x8e22x3, false);
  return [_0x8e22x3, _0x8e22x9];
}});
Ext[_0xee2b[6]](_0xee2b[3824], {alias:_0xee2b[3825], mixins:[_0xee2b[3641], _0xee2b[3816]], requires:[_0xee2b[3607], _0xee2b[3639], _0xee2b[3721], _0xee2b[3818]], uses:[_0xee2b[110], _0xee2b[34], _0xee2b[3826]], config:{primaryView:null, dependencyStore:null, drawDependencies:true, bulkRenderingDependencyLimit:100, asyncRenderingDepsPerStep:50, painterConfig:{canvasCls:_0xee2b[3827]}, canvasLayer:0, enableDependencyDragDrop:true, terminalSides:[_0xee2b[1354], _0xee2b[867], _0xee2b[686], _0xee2b[754]], 
dragTipTpl:null, tipTpl:null, showTooltip:true, dragZoneConfig:null, selectedCls:_0xee2b[3828], overCls:_0xee2b[3829]}, painter:null, renderingStrategy:null, primaryViewDetacher:null, primaryViewLockableDetacher:null, primaryViewElDetacher:null, dependencyStoreDetacher:null, dragZone:null, scrolling:false, tip:null, constructor:function(_0x8e22x4) {
  var _0x8e22x5 = this, _0x8e22x6;
  _0x8e22x5[_0xee2b[9]]([_0x8e22x4]);
  _0x8e22x5[_0xee2b[295]][_0xee2b[294]][_0xee2b[217]][_0xee2b[293]](_0x8e22x5, _0x8e22x4);
  _0x8e22x5[_0xee2b[35]](_0x8e22x4);
  Ext[_0xee2b[133]] && Ext[_0xee2b[133]][_0xee2b[135]](_0x8e22x5[_0xee2b[3610]](), _0xee2b[3830]);
  Ext[_0xee2b[133]] && Ext[_0xee2b[133]][_0xee2b[3832]](_0x8e22x5[_0xee2b[3610]](), _0xee2b[2919], _0xee2b[3831]);
  Ext[_0xee2b[133]] && Ext[_0xee2b[133]][_0xee2b[3832]](_0x8e22x5[_0xee2b[3610]](), _0xee2b[2922], _0xee2b[3831]);
  _0x8e22x5[_0xee2b[3833]] = _0x8e22x5[_0xee2b[3835]](Ext[_0xee2b[8]]({rtl:_0x8e22x5[_0xee2b[3610]]()[_0xee2b[1855]], dependencyStore:_0x8e22x5[_0xee2b[1306]]()}, _0x8e22x5[_0xee2b[3834]]()));
  if (_0x8e22x5[_0xee2b[3833]][_0xee2b[3734]]()) {
    if (_0x8e22x5[_0xee2b[3610]]()[_0xee2b[1302]]) {
      _0x8e22x5[_0xee2b[3610]]()[_0xee2b[252]](_0x8e22x5[_0xee2b[3610]]()[_0xee2b[1302]], {add:_0x8e22x5[_0xee2b[3836]], remove:_0x8e22x5[_0xee2b[3836]], clear:_0x8e22x5[_0xee2b[3836]], refresh:_0x8e22x5[_0xee2b[3836]], scope:_0x8e22x5});
    }
    if (_0x8e22x5[_0xee2b[1306]]()) {
      _0x8e22x5[_0xee2b[252]](_0x8e22x5[_0xee2b[1306]](), {add:_0x8e22x5[_0xee2b[3837]], remove:_0x8e22x5[_0xee2b[3836]], clear:_0x8e22x5[_0xee2b[3836]], refresh:_0x8e22x5[_0xee2b[3836]], scope:_0x8e22x5});
    }
    _0x8e22x5[_0xee2b[252]](_0x8e22x5[_0xee2b[3610]]()[_0xee2b[2467]], {viewchange:_0x8e22x5[_0xee2b[3836]], scope:_0x8e22x5});
  }
  if (_0x8e22x5[_0xee2b[3786]]()) {
    _0x8e22x5[_0xee2b[3838]]();
  }
  if (_0x8e22x5[_0xee2b[3839]]()) {
    _0x8e22x6 = _0x8e22x5[_0xee2b[3610]]();
    _0x8e22x5[_0xee2b[3840]] = _0x8e22x5[_0xee2b[3845]](Ext[_0xee2b[8]]({view:_0x8e22x6, ddGroup:_0x8e22x6[_0xee2b[32]]() + _0xee2b[3841], rtl:_0x8e22x6[_0xee2b[1855]], terminalSelector:_0xee2b[3842], dependencyStore:_0x8e22x5[_0xee2b[1306]](), tipTpl:_0x8e22x5[_0xee2b[3843]]()}, _0x8e22x5[_0xee2b[3844]]() || {}));
    _0x8e22x5[_0xee2b[3840]][_0xee2b[149]]({dragstart:_0x8e22x5[_0xee2b[2095]], drop:_0x8e22x5[_0xee2b[3846]], afterdrop:_0x8e22x5[_0xee2b[3645]], scope:_0x8e22x5});
    _0x8e22x5[_0xee2b[846]](_0x8e22x5[_0xee2b[3840]], [_0xee2b[3661], _0xee2b[1958], _0xee2b[3631], _0xee2b[3632]]);
  }
  var _0x8e22x3 = _0x8e22x5[_0xee2b[3847]]();
  if (_0x8e22x3) {
    _0x8e22x5[_0xee2b[2106]] = new Sch[_0xee2b[829]][_0xee2b[3647]].Tooltip(Ext[_0xee2b[8]]({dependencyView:_0x8e22x5, tpl:_0x8e22x5[_0xee2b[3848]]()}, _0x8e22x3));
  }
}, destroy:function() {
  var _0x8e22x3 = this;
  _0x8e22x3[_0xee2b[3849]]();
  _0x8e22x3[_0xee2b[2106]] && _0x8e22x3[_0xee2b[2106]][_0xee2b[218]]();
  _0x8e22x3[_0xee2b[3840]] && _0x8e22x3[_0xee2b[3840]][_0xee2b[218]]();
}, destroyDetachers:function() {
  var _0x8e22x3 = this;
  Ext[_0xee2b[1004]](this, _0xee2b[3850], _0xee2b[3851], _0xee2b[3852], _0xee2b[1324]);
}, destroyDependencyCanvas:function() {
  var _0x8e22x3 = this;
  if (_0x8e22x3[_0xee2b[3800]]()) {
    Ext[_0xee2b[218]](_0x8e22x3[_0xee2b[3801]]());
  }
}, destroyRenderingStrategy:function() {
  var _0x8e22x3 = this;
  Ext[_0xee2b[218]](_0x8e22x3[_0xee2b[3853]]);
  _0x8e22x3[_0xee2b[3853]] = null;
}, resetPainterCache:function() {
  this[_0xee2b[3833]][_0xee2b[3730]]();
}, updatePainterCache:function() {
  this[_0xee2b[3833]][_0xee2b[3730]](true);
}, canDrawDependencies:function(_0x8e22x6, _0x8e22x3, _0x8e22x5) {
  var _0x8e22x4 = this;
  return !!(_0x8e22x4[_0xee2b[3833]] && _0x8e22x4[_0xee2b[3610]]() && (_0x8e22x6 || _0x8e22x4[_0xee2b[3854]]()) && (_0x8e22x3 || _0x8e22x4[_0xee2b[3855]]()) && (_0x8e22x5 || _0x8e22x4[_0xee2b[1306]]()));
}, startDrawDependencies:function() {
  var _0x8e22x6 = this, _0x8e22x4 = _0x8e22x6[_0xee2b[3610]](), _0x8e22x3 = _0x8e22x6[_0xee2b[1306]](), _0x8e22x5;
  if (!_0x8e22x6[_0xee2b[3853]]) {
    _0x8e22x6[_0xee2b[3853]] = _0x8e22x6[_0xee2b[3856]]();
    _0x8e22x6[_0xee2b[3850]] = _0x8e22x4[_0xee2b[149]](Ext[_0xee2b[330]]({destroyable:true}, _0x8e22x6[_0xee2b[3857]]()));
    _0x8e22x6[_0xee2b[3852]] = _0x8e22x4[_0xee2b[787]]()[_0xee2b[149]](Ext[_0xee2b[330]]({destroyable:true}, _0x8e22x6[_0xee2b[3858]]()));
    if (_0x8e22x4[_0xee2b[840]]) {
      _0x8e22x5 = _0x8e22x4[_0xee2b[840]][_0xee2b[3859]] && _0x8e22x4[_0xee2b[840]][_0xee2b[3859]][_0xee2b[290]]();
      if (_0x8e22x4 != _0x8e22x5) {
        _0x8e22x6[_0xee2b[3851]] = _0x8e22x5[_0xee2b[149]](Ext[_0xee2b[330]]({destroyable:true}, _0x8e22x6[_0xee2b[3860]]()));
      }
    }
    _0x8e22x6[_0xee2b[1324]] = _0x8e22x3[_0xee2b[149]](Ext[_0xee2b[330]]({destroyable:true}, _0x8e22x6[_0xee2b[3861]]()));
  }
  _0x8e22x6[_0xee2b[3862]]()[_0xee2b[3817]](null, Ext[_0xee2b[688]]);
}, stopDrawDependencies:function() {
  var _0x8e22x3 = this;
  _0x8e22x3[_0xee2b[3863]]();
  _0x8e22x3[_0xee2b[3864]]();
  _0x8e22x3[_0xee2b[3865]]();
}, createRenderingStrategy:function() {
  var _0x8e22x3 = this;
  return Sch[_0xee2b[829]][_0xee2b[3647]][_0xee2b[3868]][_0xee2b[3867]][_0xee2b[831]]({depsPerStep:_0x8e22x3[_0xee2b[3866]]()});
}, maybeSwitchRenderingStrategy:function() {
  var _0x8e22x3 = this;
  if (_0x8e22x3[_0xee2b[1306]]()[_0xee2b[1466]]() <= _0x8e22x3[_0xee2b[3869]]()) {
    _0x8e22x3[_0xee2b[3853]][_0xee2b[1720]](_0xee2b[3820]);
  } else {
    _0x8e22x3[_0xee2b[3853]][_0xee2b[1720]](_0xee2b[922]);
  }
}, updatePrimaryView:function(_0x8e22x4, _0x8e22x3) {
  var _0x8e22x6 = this;
  if (_0x8e22x3) {
    _0x8e22x6[_0xee2b[3849]]();
  }
  if (_0x8e22x4) {
    if (!_0x8e22x6[_0xee2b[1306]]() && _0x8e22x4[_0xee2b[696]]()) {
      _0x8e22x6[_0xee2b[1412]](_0x8e22x4[_0xee2b[696]]()[_0xee2b[1306]]());
    }
    if (_0x8e22x6[_0xee2b[3786]]()) {
      _0x8e22x6[_0xee2b[3838]]();
    }
  }
}, applyDependencyStore:function(_0x8e22x3) {
  return _0x8e22x3 && Ext[_0xee2b[1072]][_0xee2b[131]](_0x8e22x3);
}, updateDependencyStore:function(_0x8e22x3, _0x8e22x4) {
  var _0x8e22x6 = this;
  if (_0x8e22x4) {
    _0x8e22x6[_0xee2b[3849]]();
  }
  if (_0x8e22x3 && _0x8e22x6[_0xee2b[3786]]()) {
    _0x8e22x6[_0xee2b[3838]]();
  }
}, updateDrawDependencies:function(_0x8e22x4, _0x8e22x3) {
  var _0x8e22x6 = this;
  if (_0x8e22x4 && _0x8e22x6[_0xee2b[3786]](true)) {
    _0x8e22x6[_0xee2b[3838]]();
  } else {
    if (!_0x8e22x4) {
      _0x8e22x6[_0xee2b[3849]]();
    }
  }
}, applyPainterConfig:function(_0x8e22x3) {
  return Ext[_0xee2b[135]](_0x8e22x3) ? Ext[_0xee2b[8]]({}, _0x8e22x3) : _0x8e22x3;
}, updatePainterConfig:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  if (_0x8e22x6[_0xee2b[3833]]) {
    if (_0x8e22x3) {
      _0x8e22x3 = Ext[_0xee2b[8]]({}, {rtl:_0x8e22x6[_0xee2b[3610]]()[_0xee2b[1855]]}, _0x8e22x3);
    }
    if (_0x8e22x3 && _0xee2b[249] in _0x8e22x3 && _0x8e22x3[_0xee2b[249]] !== _0x8e22x6[_0xee2b[3833]][_0xee2b[249]]) {
      Ext[_0xee2b[218]](_0x8e22x6[_0xee2b[3833]]);
      _0x8e22x6[_0xee2b[3833]] = _0x8e22x6[_0xee2b[3835]](_0x8e22x3);
    } else {
      _0x8e22x6[_0xee2b[3833]][_0xee2b[3121]](_0x8e22x3);
    }
    _0x8e22x6[_0xee2b[3865]]();
    if (_0x8e22x6[_0xee2b[3786]]()) {
      _0x8e22x6[_0xee2b[3862]]()[_0xee2b[3817]](null, Ext[_0xee2b[688]]);
    }
  }
}, updateCanvasLayer:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  _0x8e22x6[_0xee2b[3865]]();
  if (_0x8e22x6[_0xee2b[3786]]()) {
    _0x8e22x6[_0xee2b[3862]]()[_0xee2b[3817]](null, Ext[_0xee2b[688]]);
  }
}, getPrimaryViewListeners:function() {
  var _0x8e22x3 = this;
  return {itemadd:_0x8e22x3[_0xee2b[3870]], itemremove:_0x8e22x3[_0xee2b[3871]], itemupdate:_0x8e22x3[_0xee2b[3872]], refresh:_0x8e22x3[_0xee2b[3873]], bufferedrefresh:_0x8e22x3[_0xee2b[3873]], expandbody:_0x8e22x3[_0xee2b[3874]], collapsebody:_0x8e22x3[_0xee2b[3875]], eventrepaint:_0x8e22x3[_0xee2b[3876]], 'baseline-show':_0x8e22x3[_0xee2b[3873]], 'baseline-hide':_0x8e22x3[_0xee2b[3873]], scope:_0x8e22x3};
}, getPrimaryViewLockableListeners:function() {
  var _0x8e22x3 = this;
  return {expandbody:_0x8e22x3[_0xee2b[3874]], collapsebody:_0x8e22x3[_0xee2b[3875]], scope:_0x8e22x3};
}, getPrimaryViewElListeners:function() {
  var _0x8e22x3 = this;
  return {dblclick:_0x8e22x3[_0xee2b[3877]], click:_0x8e22x3[_0xee2b[3877]], contextmenu:_0x8e22x3[_0xee2b[3877]], mouseover:_0x8e22x3[_0xee2b[3877]], mouseout:_0x8e22x3[_0xee2b[3877]], delegate:_0xee2b[3609], scope:_0x8e22x3};
}, getDependencyStoreListeners:function() {
  var _0x8e22x3 = this;
  return {add:_0x8e22x3[_0xee2b[3878]], remove:_0x8e22x3[_0xee2b[3879]], update:_0x8e22x3[_0xee2b[3880]], refresh:_0x8e22x3[_0xee2b[3881]], clear:_0x8e22x3[_0xee2b[3882]], scope:_0x8e22x3};
}, createPainter:function(_0x8e22x3) {
  return Sch[_0xee2b[829]][_0xee2b[3647]][_0xee2b[3883]][_0xee2b[831]](_0x8e22x3);
}, getPainter:function() {
  return this[_0xee2b[3833]];
}, clonePainter:function() {
  var _0x8e22x3 = this;
  return _0x8e22x3[_0xee2b[3833]] && _0x8e22x3[_0xee2b[3833]][_0xee2b[1161]]() || null;
}, createDragZone:function(_0x8e22x3) {
  return Sch[_0xee2b[829]][_0xee2b[3647]][_0xee2b[3884]][_0xee2b[831]](_0x8e22x3);
}, isDependencyCanvasAvailable:function() {
  var _0x8e22x3 = this[_0xee2b[3610]]();
  return _0x8e22x3 && _0x8e22x3[_0xee2b[2919]]();
}, isDependencyCanvasPresent:function() {
  var _0x8e22x3 = this, _0x8e22x6 = _0x8e22x3[_0xee2b[3610]]();
  return _0x8e22x6 && _0x8e22x6[_0xee2b[3886]](_0x8e22x3[_0xee2b[3885]]());
}, getDependencyCanvas:function() {
  var _0x8e22x3 = this;
  return _0x8e22x3[_0xee2b[3610]]()[_0xee2b[2922]](_0x8e22x3[_0xee2b[3885]](), _0x8e22x3[_0xee2b[3833]][_0xee2b[3887]]());
}, renderAllDependencies:function() {
  var _0x8e22x3 = this, _0x8e22x6;
  if (_0x8e22x3[_0xee2b[3786]]() && (_0x8e22x3[_0xee2b[3320]] || _0x8e22x3[_0xee2b[180]](_0xee2b[3593], _0x8e22x3) !== false)) {
    _0x8e22x3[_0xee2b[3320]] || _0x8e22x3[_0xee2b[3853]][_0xee2b[149]](_0xee2b[3812], function(_0x8e22x4, _0x8e22x5) {
      _0x8e22x3[_0xee2b[3320]] = false;
      _0x8e22x3[_0xee2b[180]](_0xee2b[770], _0x8e22x3);
    }, null, {single:true});
    _0x8e22x3[_0xee2b[3320]] = true;
    _0x8e22x6 = _0x8e22x3[_0xee2b[3853]][_0xee2b[3888]](_0x8e22x3);
  } else {
    _0x8e22x6 = Ext[_0xee2b[3806]][_0xee2b[378]](_0x8e22x3[_0xee2b[1306]]()[_0xee2b[1005]]());
  }
  return _0x8e22x6;
}, renderDependencies:function(_0x8e22x5, _0x8e22x3) {
  var _0x8e22x6 = this, _0x8e22x4;
  if (!Ext[_0xee2b[307]](_0x8e22x5)) {
    _0x8e22x5 = [_0x8e22x5];
  }
  if (_0x8e22x6[_0xee2b[3786]]()) {
    if (_0x8e22x3) {
      _0x8e22x4 = _0x8e22x6[_0xee2b[3853]][_0xee2b[3890]](_0x8e22x6)[_0xee2b[3817]](function() {
        return !_0x8e22x6[_0xee2b[3853]][_0xee2b[458]] ? _0x8e22x6[_0xee2b[3853]][_0xee2b[3889]](_0x8e22x6, _0x8e22x5) : _0x8e22x5;
      });
    } else {
      _0x8e22x4 = _0x8e22x6[_0xee2b[3853]][_0xee2b[3889]](_0x8e22x6, _0x8e22x5);
    }
  } else {
    _0x8e22x4 = Ext[_0xee2b[3806]][_0xee2b[378]](_0x8e22x5);
  }
  return _0x8e22x4;
}, updateDependencies:function(_0x8e22x4) {
  var _0x8e22x3 = this, _0x8e22x6;
  if (!Ext[_0xee2b[307]](_0x8e22x4)) {
    _0x8e22x4 = [_0x8e22x4];
  }
  if (_0x8e22x3[_0xee2b[3786]]()) {
    _0x8e22x6 = _0x8e22x3[_0xee2b[3853]][_0xee2b[3888]](_0x8e22x3, _0x8e22x4);
  } else {
    _0x8e22x6 = Ext[_0xee2b[3806]][_0xee2b[378]](_0x8e22x4);
  }
  return _0x8e22x6;
}, clearDependencies:function(_0x8e22x4) {
  var _0x8e22x3 = this, _0x8e22x6;
  if (!Ext[_0xee2b[307]](_0x8e22x4)) {
    _0x8e22x4 = [_0x8e22x4];
  }
  if (_0x8e22x3[_0xee2b[3786]]()) {
    _0x8e22x6 = _0x8e22x3[_0xee2b[3853]][_0xee2b[3890]](_0x8e22x3, _0x8e22x4);
  } else {
    _0x8e22x6 = Ext[_0xee2b[3806]][_0xee2b[378]](_0x8e22x4);
  }
  return _0x8e22x6;
}, clearAllDependencies:function() {
  var _0x8e22x3 = this, _0x8e22x6;
  if (_0x8e22x3[_0xee2b[3786]]()) {
    _0x8e22x6 = _0x8e22x3[_0xee2b[3853]][_0xee2b[3890]](_0x8e22x3);
  } else {
    _0x8e22x6 = Ext[_0xee2b[3806]][_0xee2b[378]]();
  }
  return _0x8e22x6;
}, getDependencyForElement:function(_0x8e22x4) {
  var _0x8e22x2 = this, _0x8e22x6 = _0x8e22x2[_0xee2b[1306]](), _0x8e22x3 = null, _0x8e22x5;
  if (_0x8e22x6) {
    _0x8e22x5 = _0x8e22x2[_0xee2b[3833]][_0xee2b[3891]](_0x8e22x4);
    _0x8e22x3 = _0x8e22x6[_0xee2b[1015]](_0x8e22x5);
  }
  return _0x8e22x3;
}, highlightDependency:function(_0x8e22x6, _0x8e22x3) {
  var _0x8e22x4 = this;
  if (!(_0x8e22x6 && _0x8e22x6[_0xee2b[988]])) {
    _0x8e22x6 = _0x8e22x4[_0xee2b[1306]]()[_0xee2b[395]](_0x8e22x6);
  }
  _0x8e22x6 && _0x8e22x6[_0xee2b[2128]](_0x8e22x3 || _0x8e22x4[_0xee2b[3892]]());
}, unhighlightDependency:function(_0x8e22x6, _0x8e22x3) {
  var _0x8e22x4 = this;
  if (!(_0x8e22x6 && _0x8e22x6[_0xee2b[988]])) {
    _0x8e22x6 = _0x8e22x4[_0xee2b[1306]]()[_0xee2b[395]](_0x8e22x6);
  }
  _0x8e22x6 && _0x8e22x6[_0xee2b[3893]](_0x8e22x3 || _0x8e22x4[_0xee2b[3892]]());
}, getHighlightedDependencies:function(_0x8e22x3) {
  var _0x8e22x4 = this, _0x8e22x6 = _0x8e22x4[_0xee2b[1306]]();
  return _0x8e22x6 && _0x8e22x6[_0xee2b[3894]](_0x8e22x3 || _0x8e22x4[_0xee2b[3892]]()) || [];
}, onPrimaryViewItemAdd:function(_0x8e22x6, _0x8e22x4, _0x8e22x5, _0x8e22x3) {
  this[_0xee2b[3862]]()[_0xee2b[3817]](null, Ext[_0xee2b[688]]);
}, onPrimaryViewItemUpdate:function(_0x8e22x6, _0x8e22x4, _0x8e22x5, _0x8e22x3) {
  this[_0xee2b[3862]]()[_0xee2b[3817]](null, Ext[_0xee2b[688]]);
}, onPrimaryViewItemRemove:function(_0x8e22x6, _0x8e22x4, _0x8e22x5, _0x8e22x3) {
  this[_0xee2b[3862]]()[_0xee2b[3817]](null, Ext[_0xee2b[688]]);
}, onPrimaryViewRefresh:function(_0x8e22x3) {
  this[_0xee2b[3862]]()[_0xee2b[3817]](null, Ext[_0xee2b[688]]);
}, onPrimaryViewExpandBody:function() {
  this[_0xee2b[3862]]()[_0xee2b[3817]](null, Ext[_0xee2b[688]]);
}, onPrimaryViewCollapseBody:function() {
  this[_0xee2b[3862]]()[_0xee2b[3817]](null, Ext[_0xee2b[688]]);
}, onPrimaryViewEventRepaint:function() {
  this[_0xee2b[3862]]()[_0xee2b[3817]](null, Ext[_0xee2b[688]]);
}, onPrimaryViewDependencyElPointerEvent:function(_0x8e22x9, _0x8e22x6, _0x8e22x5) {
  var _0x8e22x1 = this, _0x8e22x3 = _0x8e22x1[_0xee2b[3833]][_0xee2b[3891]](_0x8e22x6), _0x8e22x4 = _0x8e22x1[_0xee2b[1306]]()[_0xee2b[1015]](_0x8e22x3);
  if (_0x8e22x4) {
    _0x8e22x1[_0xee2b[180]](_0xee2b[3647] + _0x8e22x9[_0xee2b[249]], _0x8e22x1, _0x8e22x4, _0x8e22x9, _0x8e22x6);
    var _0x8e22x7 = this[_0xee2b[3895]](), _0x8e22x2 = _0x8e22x1[_0xee2b[3833]][_0xee2b[3804]](_0x8e22x1[_0xee2b[3801]](), _0x8e22x4);
    if (_0x8e22x7 && _0x8e22x9[_0xee2b[249]] === _0xee2b[3896]) {
      _0x8e22x2[_0xee2b[264]](_0x8e22x7);
    } else {
      if (_0x8e22x7 && _0x8e22x9[_0xee2b[249]] === _0xee2b[3897]) {
        _0x8e22x2[_0xee2b[267]](_0x8e22x7);
      }
    }
  }
}, onDependencyStoreAdd:function(_0x8e22x3, _0x8e22x4) {
  var _0x8e22x6 = this;
  _0x8e22x6[_0xee2b[3898]]();
  _0x8e22x6[_0xee2b[3889]](_0x8e22x4)[_0xee2b[3817]](null, Ext[_0xee2b[688]]);
}, onDependencyStoreRemove:function(_0x8e22x3, _0x8e22x4) {
  var _0x8e22x6 = this;
  _0x8e22x6[_0xee2b[3898]]();
  _0x8e22x6[_0xee2b[3890]](_0x8e22x4)[_0xee2b[3817]](null, Ext[_0xee2b[688]]);
}, onDependencyStoreUpdate:function(_0x8e22x3, _0x8e22x6) {
  this[_0xee2b[3888]](_0x8e22x6)[_0xee2b[3817]](null, Ext[_0xee2b[688]]);
}, onDependencyStoreRefresh:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  _0x8e22x6[_0xee2b[3898]]();
  _0x8e22x6[_0xee2b[3862]]()[_0xee2b[3817]](null, Ext[_0xee2b[688]]);
}, onDependencyStoreClear:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  _0x8e22x6[_0xee2b[3898]]();
  _0x8e22x6[_0xee2b[3862]]()[_0xee2b[3817]](null, Ext[_0xee2b[688]]);
}, onDragStart:function() {
  var _0x8e22x3 = this, _0x8e22x6 = _0x8e22x3[_0xee2b[3610]]();
  _0x8e22x6[_0xee2b[3280]] && _0x8e22x6[_0xee2b[3280]]();
  _0x8e22x3[_0xee2b[2106]] && _0x8e22x3[_0xee2b[2106]][_0xee2b[2061]]();
  _0x8e22x3[_0xee2b[3610]]()[_0xee2b[787]]()[_0xee2b[264]](_0xee2b[3669]);
}, onDependencyDrop:function(_0x8e22x4, _0x8e22x3, _0x8e22x6) {
  _0x8e22x6 && this[_0xee2b[1306]]()[_0xee2b[255]](_0x8e22x3);
}, onDependencyAfterDrop:function() {
  var _0x8e22x3 = this[_0xee2b[3610]]();
  if (!_0x8e22x3[_0xee2b[458]]) {
    _0x8e22x3[_0xee2b[3281]] && _0x8e22x3[_0xee2b[3281]]();
    _0x8e22x3[_0xee2b[787]]()[_0xee2b[267]](_0xee2b[3669]);
    _0x8e22x3[_0xee2b[787]]()[_0xee2b[760]](_0xee2b[3899])[_0xee2b[267]](_0xee2b[3666]);
    this[_0xee2b[2106]] && this[_0xee2b[2106]][_0xee2b[2064]]();
  }
}});
Ext[_0xee2b[6]](_0xee2b[3900], {extend:_0xee2b[17], requires:[_0xee2b[3824]], mixinConfig:{after:{initComponent:_0xee2b[3901], destroy:_0xee2b[218]}}, dependencyViewConfig:null, dependencyView:null, dependencyViewRelayDetacher:null, dependencyDragRelayDetacher:null, initComponent:function() {
  var _0x8e22x3 = this;
  _0x8e22x3[_0xee2b[149]](_0xee2b[1808], function() {
    if (_0x8e22x3[_0xee2b[696]]()) {
      _0x8e22x3[_0xee2b[3902]](_0x8e22x3[_0xee2b[3347]](), _0x8e22x3[_0xee2b[808]]());
    }
  });
}, getDependencyViewConfig:function() {
  return this[_0xee2b[3903]];
}, setDependencyViewConfig:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  if (_0x8e22x6[_0xee2b[3903]] !== _0x8e22x3) {
    _0x8e22x6[_0xee2b[3903]] = _0x8e22x3;
    if (_0x8e22x6[_0xee2b[3611]]) {
      if (_0x8e22x3 && _0xee2b[249] in _0x8e22x3 && _0x8e22x3[_0xee2b[249]] !== _0x8e22x6[_0xee2b[3611]][_0xee2b[249]]) {
        _0x8e22x6[_0xee2b[3902]](_0x8e22x3, _0x8e22x6[_0xee2b[808]]());
      } else {
        _0x8e22x6[_0xee2b[3611]][_0xee2b[3121]](_0x8e22x3);
      }
    }
  }
}, hasDependencyView:function() {
  return !!this[_0xee2b[3611]];
}, getDependencyView:function() {
  return this[_0xee2b[3611]];
}, createDependencyView:function(_0x8e22x3, _0x8e22x6) {
  return Sch[_0xee2b[829]][_0xee2b[3647]][_0xee2b[3904]][_0xee2b[831]](Ext[_0xee2b[330]]({primaryView:_0x8e22x6}, _0x8e22x3));
}, destroy:function() {
  Ext[_0xee2b[1004]](this, _0xee2b[3905], _0xee2b[3906], _0xee2b[3611]);
}, setupDependencyView:function(_0x8e22x3, _0x8e22x4) {
  var _0x8e22x6 = this;
  Ext[_0xee2b[218]](_0x8e22x6[_0xee2b[3611]]);
  _0x8e22x6[_0xee2b[3611]] = _0x8e22x6[_0xee2b[3907]](_0x8e22x3, _0x8e22x4);
  _0x8e22x6[_0xee2b[3908]]();
  _0x8e22x6[_0xee2b[180]](_0xee2b[3909], _0x8e22x6, _0x8e22x6[_0xee2b[3611]]);
  if (_0x8e22x6[_0xee2b[3611]][_0xee2b[3786]]()) {
    _0x8e22x6[_0xee2b[3611]][_0xee2b[3862]]()[_0xee2b[3817]](null, Ext[_0xee2b[688]]);
  }
}, setupDependencyViewRelay:function() {
  var _0x8e22x3 = this;
  Ext[_0xee2b[218]](_0x8e22x3[_0xee2b[3905]], _0x8e22x3[_0xee2b[3906]]);
  _0x8e22x3[_0xee2b[3905]] = _0x8e22x3[_0xee2b[846]](_0x8e22x3[_0xee2b[3910]](), [_0xee2b[3911], _0xee2b[3912], _0xee2b[3913], _0xee2b[3914], _0xee2b[3915]]);
  _0x8e22x3[_0xee2b[3906]] = _0x8e22x3[_0xee2b[846]](_0x8e22x3[_0xee2b[3910]](), [_0xee2b[3661], _0xee2b[1958], _0xee2b[3631], _0xee2b[3632]], _0xee2b[3647]);
}});
Ext[_0xee2b[6]](_0xee2b[3916], {extend:_0xee2b[3597], mixins:[_0xee2b[3335], _0xee2b[3900]], alias:[_0xee2b[3917], _0xee2b[3918]], alternateClassName:_0xee2b[3919], viewType:_0xee2b[3920], isSchedulerGrid:true, initComponent:function() {
  this[_0xee2b[9]](arguments);
  this[_0xee2b[808]]()._initializeSchedulerView();
}}, function() {
  this[_0xee2b[507]](Sch[_0xee2b[1637]][_0xee2b[3921]][_0xee2b[139]][_0xee2b[1635]]() || {});
});
Ext[_0xee2b[6]](_0xee2b[3922], {extend:_0xee2b[2846], getScheduledEventsForResource:function() {
  var _0x8e22x6 = this[_0xee2b[829]], _0x8e22x3 = [];
  _0x8e22x6[_0xee2b[696]]()[_0xee2b[25]](function(_0x8e22x4) {
    if (_0x8e22x4[_0xee2b[1611]]() && _0x8e22x4[_0xee2b[1205]]() && _0x8e22x6[_0xee2b[1795]][_0xee2b[2601]](_0x8e22x4)) {
      _0x8e22x3[_0xee2b[11]](_0x8e22x4);
    }
  });
  return _0x8e22x3;
}, onEventAdd:function() {
  this[_0xee2b[829]][_0xee2b[2668]]();
}, onEventUpdate:function() {
  this[_0xee2b[829]][_0xee2b[2668]]();
}, onEventRemove:function() {
  this[_0xee2b[829]][_0xee2b[2668]]();
}});
Ext[_0xee2b[6]](_0xee2b[3923], {extend:_0xee2b[3295], requires:[_0xee2b[3922]], allDay:true, eventAnimations:false, horizontalViewClass:_0xee2b[3922], additionalEventCls:_0xee2b[27], repaintEventsForResource:function() {
  this[_0xee2b[2668]]();
}, generateTplData:function(_0x8e22x4, _0x8e22x2, _0x8e22x6) {
  var _0x8e22x5, _0x8e22x3;
  _0x8e22x2 = _0x8e22x4[_0xee2b[1053]]() || this[_0xee2b[1302]][_0xee2b[572]]();
  _0x8e22x5 = this[_0xee2b[9]]([_0x8e22x4, _0x8e22x2, _0x8e22x6]);
  _0x8e22x5[_0xee2b[3924]] = true;
  _0x8e22x5[_0xee2b[2640]] += _0xee2b[60] + this[_0xee2b[3925]];
  if (_0x8e22x2) {
    if (Ext[_0xee2b[1]](_0x8e22x2[_0xee2b[1284]]) && _0x8e22x2[_0xee2b[1284]]()) {
      _0x8e22x5[_0xee2b[2640]] += _0xee2b[60] + _0x8e22x2[_0xee2b[1284]]();
    }
    if (Ext[_0xee2b[1]](_0x8e22x2[_0xee2b[3926]]) && _0x8e22x2[_0xee2b[3926]]()) {
      _0x8e22x5[_0xee2b[763]] = (_0x8e22x5[_0xee2b[763]] || _0xee2b[27]) + _0xee2b[3927] + _0x8e22x2[_0xee2b[3926]]() + _0xee2b[1471];
    }
  }
  return _0x8e22x5;
}, setEventStore:function(_0x8e22x6, _0x8e22x3) {
  _0x8e22x6 = _0x8e22x6 && Ext[_0xee2b[132]][_0xee2b[131]](_0x8e22x6);
  var _0x8e22x5 = this, _0x8e22x2 = _0x8e22x5[_0xee2b[696]](), _0x8e22x4 = _0x8e22x6 && _0x8e22x6[_0xee2b[1007]]();
  _0x8e22x5[_0xee2b[453]](false);
  _0x8e22x5[_0xee2b[9]](arguments);
  _0x8e22x5[_0xee2b[455]]();
  if (_0x8e22x5[_0xee2b[1071]]) {
    _0x8e22x5[_0xee2b[1071]][_0xee2b[1408]](_0x8e22x4);
    if (!_0x8e22x3) {
      _0x8e22x5[_0xee2b[180]](_0xee2b[1074], _0x8e22x5, _0x8e22x5[_0xee2b[1071]], _0x8e22x2);
      _0x8e22x5[_0xee2b[2668]]();
    }
  }
}});
Ext[_0xee2b[6]](_0xee2b[3336], {extend:_0xee2b[3916], requires:[_0xee2b[3923]], xtype:_0xee2b[3430], cls:_0xee2b[3928], columns:[], weight:1000, height:24, rowHeight:24, hideHeaders:true, reserveScrollbar:false, barMargin:1, enableDragCreation:false, enablePinchZoom:false, mainScheduler:null, mainSchedulerView:null, mainSchedulerTimeAxis:null, storedColumnWidth:null, lastTimeTdHeight:0, resourceStore:{type:_0xee2b[3929], data:[{Id:1}]}, relayedConfigs:[_0xee2b[2887], _0xee2b[1071], _0xee2b[3354], 
_0xee2b[2644], _0xee2b[2645], _0xee2b[3277], _0xee2b[3082]], normalViewConfig:null, createConfig:{showHoverTip:false, showDragTip:false}, enableEventDragDrop:false, resizeConfig:{showTooltip:false}, viewPreset:{name:_0xee2b[3930], timeColumnWidth:25, timeResolution:{unit:_0xee2b[526], increment:1}, headerConfig:{middle:{unit:_0xee2b[526], align:_0xee2b[472], dateFormat:_0xee2b[3931]}}}, constructor:function(_0x8e22x6) {
  var _0x8e22x4 = this, _0x8e22x3 = _0x8e22x6[_0xee2b[3274]];
  _0x8e22x4[_0xee2b[3932]][_0xee2b[130]](function(_0x8e22x2) {
    _0x8e22x6[_0x8e22x2] = _0x8e22x3[_0x8e22x2];
  });
  _0x8e22x4[_0xee2b[3933]] = _0x8e22x3[_0xee2b[1795]];
  _0x8e22x4[_0xee2b[3934]] = _0x8e22x3[_0xee2b[808]]();
  _0x8e22x4[_0xee2b[1302]][_0xee2b[327]] = _0x8e22x3[_0xee2b[1302]][_0xee2b[327]];
  _0x8e22x4[_0xee2b[3346]] = Ext[_0xee2b[8]]({xclass:_0xee2b[3923], eventPrefix:_0x8e22x4[_0xee2b[3934]][_0xee2b[388]], eventBodyTemplate:_0x8e22x4[_0xee2b[3934]][_0xee2b[2538]], additionalEventCls:_0x8e22x4[_0xee2b[3934]][_0xee2b[3925]] || _0xee2b[27], selectedEventCls:_0x8e22x4[_0xee2b[3934]][_0xee2b[2632]] || _0xee2b[27]}, _0x8e22x6[_0xee2b[3346]]);
  _0x8e22x4[_0xee2b[9]](arguments);
  var _0x8e22x5 = _0x8e22x4[_0xee2b[808]]();
  _0x8e22x4[_0xee2b[252]](_0x8e22x4[_0xee2b[3933]], {reconfigure:_0x8e22x4[_0xee2b[3935]], scope:_0x8e22x4});
  _0x8e22x5[_0xee2b[149]]({refresh:_0x8e22x4[_0xee2b[3936]], itemupdate:_0x8e22x4[_0xee2b[3936]], scope:_0x8e22x4});
  _0x8e22x4[_0xee2b[3937]]();
  _0x8e22x4[_0xee2b[3938]]();
  _0x8e22x4[_0xee2b[3939]]();
  _0x8e22x4[_0xee2b[3934]][_0xee2b[846]](_0x8e22x4[_0xee2b[808]](), _0x8e22x4[_0xee2b[3364]][_0xee2b[318]]([_0xee2b[3498], _0xee2b[3499], _0xee2b[3500], _0xee2b[3501]]));
  _0x8e22x4[_0xee2b[3940]] = _0x8e22x3[_0xee2b[3380]][_0xee2b[1848]][_0xee2b[3942]][_0xee2b[3941]];
  _0x8e22x3[_0xee2b[3380]][_0xee2b[1848]][_0xee2b[3942]][_0xee2b[3941]] = Ext[_0xee2b[283]][_0xee2b[282]](_0x8e22x4[_0xee2b[3941]], _0x8e22x4);
  _0x8e22x3[_0xee2b[3380]][_0xee2b[149]](_0xee2b[833], _0x8e22x4[_0xee2b[3943]], _0x8e22x4);
}, roundFlex:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  if (!_0x8e22x6[_0xee2b[3944]]) {
    _0x8e22x6[_0xee2b[3944]] = Math[_0xee2b[424]](_0x8e22x3);
  }
  return _0x8e22x6[_0xee2b[3944]];
}, resetStoredColumnWidth:function() {
  delete this[_0xee2b[3944]];
}, onContainerGridAfterLayout:function(_0x8e22x3) {
  if (this[_0xee2b[3944]]) {
    if (this[_0xee2b[810]][_0xee2b[755]]() !== this[_0xee2b[3944]]) {
      this[_0xee2b[810]][_0xee2b[2742]] = true;
      this[_0xee2b[810]][_0xee2b[811]](this[_0xee2b[3944]]);
    }
  } else {
    if (this[_0xee2b[810]][_0xee2b[755]]() !== this[_0xee2b[3274]][_0xee2b[810]][_0xee2b[2733]]) {
      this[_0xee2b[810]][_0xee2b[811]](this[_0xee2b[3274]][_0xee2b[810]][_0xee2b[2733]]);
    }
  }
  this[_0xee2b[3945]]();
}, onMainTimeAxisReconfigure:function() {
  this[_0xee2b[3937]]();
}, syncTimeAxisSpan:function() {
  var _0x8e22x3 = this;
  _0x8e22x3[_0xee2b[1756]](_0x8e22x3[_0xee2b[3933]][_0xee2b[697]](), _0x8e22x3[_0xee2b[3933]][_0xee2b[698]]());
}, onResize:function(_0x8e22x3, _0x8e22x6) {
  var _0x8e22x4 = this;
  _0x8e22x4[_0xee2b[9]](arguments);
  _0x8e22x4[_0xee2b[3946]]();
  return _0x8e22x4;
}, syncLockedHeaderComponent:function() {
  this[_0xee2b[3947]][_0xee2b[863]](this[_0xee2b[859]]());
}, getDesiredComponentHeight:function() {
  return this[_0xee2b[265]][_0xee2b[861]](_0xee2b[2871])[_0xee2b[859]]();
}, onSchedulingViewUpdate:function() {
  var _0x8e22x6 = this, _0x8e22x3 = _0x8e22x6[_0xee2b[3948]]();
  if (_0x8e22x3 !== _0x8e22x6[_0xee2b[3949]]) {
    _0x8e22x6[_0xee2b[3949]] = _0x8e22x3;
    Ext[_0xee2b[2600]](function() {
      if (!_0x8e22x6[_0xee2b[458]]) {
        _0x8e22x6[_0xee2b[863]](_0x8e22x3);
      }
    });
  }
}, onDestroy:function() {
  this[_0xee2b[3274]][_0xee2b[3380]][_0xee2b[1848]][_0xee2b[3942]][_0xee2b[3941]] = this[_0xee2b[3940]];
  this[_0xee2b[9]]();
}, syncScroll:function() {
  this[_0xee2b[290]]()[_0xee2b[3950]][_0xee2b[1941]]()[_0xee2b[3951]](this[_0xee2b[3274]][_0xee2b[290]]()[_0xee2b[3950]][_0xee2b[1941]](), _0xee2b[1893]);
}, fixEventSelection:function() {
  var _0x8e22x3 = this, _0x8e22x6 = _0x8e22x3[_0xee2b[3934]];
  _0x8e22x6[_0xee2b[149]]({eventmousedown:_0x8e22x3[_0xee2b[3952]], scope:_0x8e22x3});
  _0x8e22x3[_0xee2b[149]]({scheduleclick:_0x8e22x3[_0xee2b[3953]], schedulecontextmenu:_0x8e22x3[_0xee2b[3953]], schedulelongpress:_0x8e22x3[_0xee2b[3953]], scope:_0x8e22x3});
}, clearPartnerSelection:function(_0x8e22x6, _0x8e22x3, _0x8e22x9) {
  var _0x8e22x4 = this, _0x8e22x5 = _0x8e22x4[_0xee2b[2256]](), _0x8e22x7 = _0x8e22x5[_0xee2b[3954]](), _0x8e22x1 = _0x8e22x7 === _0xee2b[3244] || _0x8e22x7 === _0xee2b[3243] && !_0x8e22x9[_0xee2b[2794]];
  if (_0x8e22x6 === _0x8e22x4[_0xee2b[3934]] && _0x8e22x1) {
    _0x8e22x5[_0xee2b[3307]]();
  }
}, clearSelection:function() {
  this[_0xee2b[3274]][_0xee2b[2256]]()[_0xee2b[3307]]();
}});
Ext[_0xee2b[6]](_0xee2b[3955], {extend:_0xee2b[273], requires:[_0xee2b[3598], _0xee2b[1630], _0xee2b[2903]], mixins:[_0xee2b[665], _0xee2b[3459]], alias:[_0xee2b[3956]], useArrows:true, rootVisible:false, lockedXType:_0xee2b[3957], isTimelineTreePanel:true, initComponent:function() {
  this[_0xee2b[9]](arguments);
  this[_0xee2b[808]]()._initializeTimelineView();
}}, function() {
  this[_0xee2b[507]](Sch[_0xee2b[1637]][_0xee2b[3601]][_0xee2b[139]][_0xee2b[1635]]() || {});
});
Ext[_0xee2b[6]](_0xee2b[3958], {extend:_0xee2b[3955], mixins:[_0xee2b[3335], _0xee2b[3900]], alias:[_0xee2b[3959]], viewType:_0xee2b[3920], isSchedulerTree:true, setMode:function(_0x8e22x3) {
  if (_0x8e22x3 !== _0xee2b[1931]) {
    Ext[_0xee2b[1182]][_0xee2b[3]](_0xee2b[3960]);
  }
}, initComponent:function() {
  this[_0xee2b[9]](arguments);
  this[_0xee2b[808]]()._initializeSchedulerView();
}}, function() {
  this[_0xee2b[507]](Sch[_0xee2b[1637]][_0xee2b[3921]][_0xee2b[139]][_0xee2b[1635]]() || {});
});
Ext[_0xee2b[6]](_0xee2b[3464], {extend:_0xee2b[957], target:_0xee2b[3460], overrides:{refreshView:function() {
  var _0x8e22x3 = this[_0xee2b[829]], _0x8e22x6 = _0x8e22x3[_0xee2b[2468]];
  if (!arguments[_0xee2b[4]] && _0x8e22x6 && _0x8e22x6[_0xee2b[3961]] > _0x8e22x3[_0xee2b[3961]]) {
    this[_0xee2b[9]]([_0x8e22x6[_0xee2b[2862]][_0xee2b[2861]]]);
  } else {
    this[_0xee2b[9]](arguments);
  }
}, setBodyTop:function(_0x8e22x6, _0x8e22x2) {
  var _0x8e22x3 = this[_0xee2b[829]], _0x8e22x5 = _0x8e22x3[_0xee2b[2862]];
  if (!_0x8e22x3[_0xee2b[262]]) {
    return;
  }
  var _0x8e22x1 = this[_0xee2b[840]][_0xee2b[834]] && this[_0xee2b[840]][_0xee2b[834]][_0xee2b[3962]] && this[_0xee2b[840]][_0xee2b[834]][_0xee2b[3962]][_0xee2b[3963]]();
  if (_0x8e22x5[_0xee2b[2863]] === _0x8e22x3[_0xee2b[64]][_0xee2b[1466]]() - 1) {
    _0x8e22x2 = false;
  } else {
    if (_0x8e22x1 && _0x8e22x1[_0xee2b[1894]] <= this[_0xee2b[3964]] - 1) {
      _0x8e22x2 = false;
    }
  }
  var _0x8e22x4 = this[_0xee2b[9]](arguments);
  _0x8e22x3[_0xee2b[180]](_0xee2b[3965], this);
  return _0x8e22x4;
}, getScrollHeight:function() {
  var _0x8e22x4 = this, _0x8e22x2 = _0x8e22x4[_0xee2b[829]], _0x8e22xa = _0x8e22x2[_0xee2b[2862]], _0x8e22x1 = _0x8e22x4[_0xee2b[64]], _0x8e22x8 = _0x8e22x1[_0xee2b[1466]](), _0x8e22x5 = _0x8e22xa[_0xee2b[1466]](), _0x8e22x7, _0x8e22x6, _0x8e22x3, _0x8e22x9;
  if (!_0x8e22x8) {
    return 0;
  }
  if (!_0x8e22x4[_0xee2b[53]](_0xee2b[2678])) {
    if (_0x8e22x5) {
      if (_0x8e22x4[_0xee2b[3543]]) {
        _0x8e22x4[_0xee2b[2678]] = Math[_0xee2b[424]](_0x8e22x4[_0xee2b[3966]] / _0x8e22x5);
      } else {
        _0x8e22x7 = _0x8e22xa[_0xee2b[572]]();
        _0x8e22x6 = _0x8e22x7[_0xee2b[859]]();
        if (Ext[_0xee2b[3967]]) {
          _0x8e22x3 = _0x8e22x7[_0xee2b[3968]](_0xee2b[1997]);
          if (_0x8e22x3 > 0) {
            _0x8e22x6 -= _0x8e22x3;
          }
        }
        _0x8e22x4[_0xee2b[2678]] = _0x8e22x6;
      }
    } else {
      delete _0x8e22x4[_0xee2b[2678]];
    }
  }
  if (_0x8e22x4[_0xee2b[3543]]) {
    if (_0x8e22xa[_0xee2b[2863]] === _0x8e22x8 - 1) {
      _0x8e22x9 = _0x8e22x4[_0xee2b[3969]] + _0x8e22x4[_0xee2b[3966]] - 1;
    } else {
      _0x8e22x9 = Math[_0xee2b[424]]((_0x8e22x8 - _0x8e22x5) * _0x8e22x4[_0xee2b[2678]]) + _0x8e22x4[_0xee2b[3966]];
      _0x8e22x9 += Math[_0xee2b[715]](_0x8e22x4[_0xee2b[3969]] - _0x8e22xa[_0xee2b[2861]] * _0x8e22x4[_0xee2b[2678]], 0);
    }
  } else {
    _0x8e22x9 = Math[_0xee2b[424]](_0x8e22x8 * _0x8e22x4[_0xee2b[2678]]);
  }
  return _0x8e22x4[_0xee2b[3964]] = _0x8e22x9;
}}});
Ext[_0xee2b[6]](_0xee2b[3465], {extend:_0xee2b[957], target:_0xee2b[3460], minVersion:_0xee2b[2008], applyFn:function() {
  if (Ext[_0xee2b[3386]]) {
    Ext[_0xee2b[6]](null, {override:_0xee2b[3460], getFirstVisibleRowIndex:function(_0x8e22xd, _0x8e22x4, _0x8e22x6, _0x8e22x9) {
      var _0x8e22x7 = this, _0x8e22xa = _0x8e22x7[_0xee2b[829]], _0x8e22xe = _0x8e22xa[_0xee2b[2862]], _0x8e22x3 = _0x8e22xe[_0xee2b[3970]], _0x8e22x5 = _0x8e22x7[_0xee2b[3971]], _0x8e22x1, _0x8e22x10, _0x8e22x8 = _0x8e22x7[_0xee2b[3969]];
      if (_0x8e22xe[_0xee2b[1466]]() && _0x8e22x7[_0xee2b[3543]]) {
        if (!arguments[_0xee2b[4]]) {
          _0x8e22xd = _0x8e22xe[_0xee2b[2861]];
          _0x8e22x4 = _0x8e22xe[_0xee2b[2863]];
          _0x8e22x6 = _0x8e22x7[_0xee2b[3654]];
          _0x8e22x9 = _0x8e22x6 + _0x8e22x5;
          if (_0x8e22x8 > _0x8e22x9 || _0x8e22x8 + _0x8e22x7[_0xee2b[3966]] < _0x8e22x6) {
            _0x8e22x7[_0xee2b[3972]] = true;
            return Math[_0xee2b[424]](_0x8e22x7[_0xee2b[3654]] / _0x8e22x7[_0xee2b[2678]]);
          }
          _0x8e22x1 = _0x8e22xd + Math[_0xee2b[203]](_0x8e22x7[_0xee2b[3973]] + (_0x8e22x7[_0xee2b[3974]] === -1 ? _0x8e22x7[_0xee2b[3432]] : _0x8e22x7[_0xee2b[3434]]), Math[_0xee2b[424]]((_0x8e22x4 - _0x8e22xd) / 2));
        } else {
          if (_0x8e22xd === _0x8e22x4) {
            return _0x8e22x4;
          }
          _0x8e22x1 = _0x8e22xd + Math[_0xee2b[424]]((_0x8e22x4 - _0x8e22xd) / 2);
        }
        var _0x8e22x2 = _0x8e22x3[_0x8e22x1];
        _0x8e22x10 = _0x8e22x8 + _0x8e22x2[_0xee2b[3975]];
        if (_0x8e22x10 + _0x8e22x2[_0xee2b[3130]] <= _0x8e22x6 && _0x8e22x2[_0xee2b[3130]]) {
          return _0x8e22x7[_0xee2b[3976]](_0x8e22x1 + 1, _0x8e22x4, _0x8e22x6, _0x8e22x9);
        }
        if (_0x8e22x10 <= _0x8e22x6) {
          return _0x8e22x1;
        } else {
          if (_0x8e22x1 !== _0x8e22xd) {
            return _0x8e22x7[_0xee2b[3976]](_0x8e22xd, _0x8e22x1 - 1, _0x8e22x6, _0x8e22x9);
          }
        }
      }
      return Math[_0xee2b[424]](_0x8e22x7[_0xee2b[3654]] / _0x8e22x7[_0xee2b[2678]]);
    }});
  }
}});
Ext[_0xee2b[6]](_0xee2b[3466], {extend:_0xee2b[957], target:_0xee2b[3977], minVersion:_0xee2b[975], maxVersion:_0xee2b[3011], applyFn:function() {
  var _0x8e22x3 = {setAll:function(_0x8e22x4, _0x8e22x5, _0x8e22x2, _0x8e22x6, _0x8e22x9) {
    var _0x8e22x1 = this;
    if (_0x8e22x9 && _0x8e22x2 == -1 && _0x8e22x4 !== _0x8e22x1[_0xee2b[829]]) {
      _0x8e22x4 = _0x8e22x1[_0xee2b[829]];
      _0x8e22x2 = _0x8e22x4[_0xee2b[3206]]()[_0xee2b[147]](_0x8e22x9);
    }
    return this[_0xee2b[9]](arguments);
  }};
  if (Ext[_0xee2b[2009]]()[_0xee2b[3978]](_0xee2b[3134])) {
    _0x8e22x3[_0xee2b[3168]] = function(_0x8e22x4, _0x8e22x6) {
      _0x8e22x4 = _0x8e22x4 || 0;
      _0x8e22x6 = _0x8e22x6 || 0;
      return this[_0xee2b[9]](arguments);
    };
  }
  Ext[_0xee2b[507]](Ext[_0xee2b[840]].CellContext, _0x8e22x3);
}});
Ext[_0xee2b[6]](_0xee2b[3979], {extend:_0xee2b[957], target:_0xee2b[3980], minVersion:_0xee2b[2962], maxVersion:_0xee2b[3981], overrides:{onSelect:function(_0x8e22x3, _0x8e22x4) {
  var _0x8e22x6 = this;
  _0x8e22x6[_0xee2b[2462]](_0x8e22x4);
  _0x8e22x6[_0xee2b[180]](_0xee2b[760], _0x8e22x6, _0x8e22x6[_0xee2b[3982]]);
  _0x8e22x6[_0xee2b[3983]](_0x8e22x3);
}}});
Ext[_0xee2b[6]](_0xee2b[2113], {extend:_0xee2b[957], target:_0xee2b[2111], minVersion:_0xee2b[2836], overrides:{unreg:function() {
  try {
    this[_0xee2b[9]](arguments);
  } catch (a) {
  }
}}});
Ext[_0xee2b[6]](_0xee2b[3984], {extend:_0xee2b[957], target:_0xee2b[2111], minVersion:_0xee2b[2962], reportUrl:_0xee2b[3985], obsoleteTestName:_0xee2b[3986], description:[_0xee2b[3987], _0xee2b[3988], _0xee2b[3989], _0xee2b[3990]][_0xee2b[73]](_0xee2b[60]), overrides:{onInitDrag:function(_0x8e22x3, _0x8e22x5) {
  var _0x8e22x6 = this, _0x8e22x4 = _0x8e22x6[_0xee2b[2156]][_0xee2b[2196]][_0xee2b[2263]](true);
  _0x8e22x4[_0xee2b[388]] = Ext[_0xee2b[388]]();
  _0x8e22x6[_0xee2b[379]][_0xee2b[724]](_0x8e22x4);
  _0x8e22x6[_0xee2b[3991]](_0x8e22x3, _0x8e22x5);
  return true;
}}});
Ext[_0xee2b[6]](_0xee2b[3992], {extend:_0xee2b[957], target:[_0xee2b[2953]], applyFn:function() {
  Ext[_0xee2b[507]](Ext[_0xee2b[758]].Element, {pxRe:/^-?\d+(?:\.\d*)?px$/i, getLocalX:function() {
    var _0x8e22x4 = this, _0x8e22x6, _0x8e22x3 = _0x8e22x4[_0xee2b[2425]](_0xee2b[1354]);
    if (!_0x8e22x3 || _0x8e22x3 === _0xee2b[1039]) {
      _0x8e22x3 = 0;
    } else {
      if (this[_0xee2b[3993]][_0xee2b[2881]](_0x8e22x3)) {
        _0x8e22x3 = parseFloat(_0x8e22x3);
      } else {
        _0x8e22x3 = _0x8e22x4[_0xee2b[809]]();
        _0x8e22x6 = _0x8e22x4[_0xee2b[758]][_0xee2b[3994]];
        if (_0x8e22x6) {
          _0x8e22x3 -= Ext[_0xee2b[761]](_0x8e22x6)[_0xee2b[809]]();
        }
      }
    }
    return _0x8e22x3;
  }});
}});
Ext[_0xee2b[6]](_0xee2b[3995], {extend:_0xee2b[957], target:[_0xee2b[2953]], minVersion:_0xee2b[2982], applyFn:function() {
  if (Ext[_0xee2b[3996]]) {
    Ext[_0xee2b[507]](Ext[_0xee2b[758]].Element, {selectText:function() {
      try {
        this[_0xee2b[9]](arguments);
      } catch (a) {
      }
    }});
  }
}});
Ext[_0xee2b[6]](_0xee2b[3997], {extend:_0xee2b[957], target:_0xee2b[3998], minVersion:_0xee2b[2836], overrides:{afterRender:function() {
  this[_0xee2b[9]](arguments);
  if (this[_0xee2b[1830]]) {
    this[_0xee2b[1830]][_0xee2b[290]]()[_0xee2b[846]](this[_0xee2b[1941]](), [_0xee2b[2949]]);
    this[_0xee2b[3380]][_0xee2b[290]]()[_0xee2b[846]](this[_0xee2b[1941]](), [_0xee2b[2949]]);
  }
}}});
Ext[_0xee2b[6]](_0xee2b[3462], {extend:_0xee2b[957], target:_0xee2b[3998], minVersion:_0xee2b[2008], overrides:{initComponent:function() {
  var _0x8e22x6 = this, _0x8e22x3;
  _0x8e22x6[_0xee2b[9]](arguments);
  if (_0x8e22x6[_0xee2b[1848]] && (_0x8e22x3 = _0x8e22x6[_0xee2b[1848]][_0xee2b[1941]]())) {
    _0x8e22x3[_0xee2b[2951]]();
    _0x8e22x6[_0xee2b[829]][_0xee2b[149]]({refresh:function() {
      _0x8e22x3[_0xee2b[3999]]();
      _0x8e22x3[_0xee2b[1940]]()[_0xee2b[758]][_0xee2b[2178]] = _0x8e22x6[_0xee2b[829]][_0xee2b[1941]]()[_0xee2b[1940]]()[_0xee2b[758]][_0xee2b[2178]];
    }, single:true, delay:100});
  }
}, privates:{initFocusableElement:function() {
}, doEnsureVisible:function(_0x8e22x1, _0x8e22xb) {
  if (this[_0xee2b[3541]]) {
    return this[_0xee2b[4000]](_0x8e22x1, _0x8e22xb);
  }
  if (typeof _0x8e22x1 !== _0xee2b[1135] && !_0x8e22x1[_0xee2b[4001]]) {
    _0x8e22x1 = this[_0xee2b[64]][_0xee2b[395]](_0x8e22x1);
  }
  var _0x8e22xa = this, _0x8e22x8 = _0x8e22xa[_0xee2b[290]](), _0x8e22x5 = _0x8e22x8[_0xee2b[2515]](_0x8e22x1), _0x8e22x9 = _0x8e22xa[_0xee2b[2467]][_0xee2b[3541]], _0x8e22xe, _0x8e22xf, _0x8e22x3, _0x8e22x6, _0x8e22xd, _0x8e22xc, _0x8e22x7, _0x8e22x2, _0x8e22x4, _0x8e22x10;
  if (_0x8e22xb) {
    _0x8e22xe = _0x8e22xb[_0xee2b[4002]];
    _0x8e22xf = _0x8e22xb[_0xee2b[689]];
    _0x8e22x3 = _0x8e22xb[_0xee2b[3671]];
    _0x8e22x6 = _0x8e22xb[_0xee2b[2128]];
    _0x8e22xd = _0x8e22xb[_0xee2b[760]];
    _0x8e22xc = _0x8e22xb[_0xee2b[3210]];
    _0x8e22x4 = _0x8e22xb[_0xee2b[2963]];
  }
  if (_0x8e22xa[_0xee2b[4003]]) {
    _0x8e22xa[_0xee2b[4003]][_0xee2b[218]]();
  }
  if (!_0x8e22x8[_0xee2b[851]]) {
    _0x8e22xa[_0xee2b[4003]] = _0x8e22x8[_0xee2b[149]]({resize:_0x8e22xa[_0xee2b[4004]], args:Ext[_0xee2b[26]][_0xee2b[191]](arguments), scope:_0x8e22xa, single:true, destroyable:true});
    return;
  }
  if (typeof _0x8e22x4 === _0xee2b[1135]) {
    _0x8e22x4 = _0x8e22xa[_0xee2b[2467]][_0xee2b[3206]]()[_0xee2b[1863]]()[_0x8e22x4];
  }
  if (_0x8e22x5) {
    _0x8e22x7 = _0x8e22x9 ? _0x8e22xa[_0xee2b[2467]][_0xee2b[1941]]() : _0x8e22x8[_0xee2b[1941]]();
    if (_0x8e22x7) {
      if (_0x8e22x4) {
        _0x8e22x10 = Ext[_0xee2b[761]](_0x8e22x5)[_0xee2b[2931]](_0x8e22x4[_0xee2b[4005]]());
      }
      if (_0x8e22x9 && _0x8e22x4) {
        _0x8e22x7[_0xee2b[2965]](_0x8e22x5, false);
        _0x8e22x8[_0xee2b[1941]]()[_0xee2b[2965]](_0x8e22x10 || _0x8e22x5, true, _0x8e22x3, _0x8e22x6);
      } else {
        _0x8e22x7[_0xee2b[2965]](_0x8e22x10 || _0x8e22x5, !!_0x8e22x4, _0x8e22x3, _0x8e22x6);
      }
    }
    if (!_0x8e22x1[_0xee2b[4001]]) {
      _0x8e22x1 = _0x8e22x8[_0xee2b[37]](_0x8e22x5);
    }
    if (_0x8e22xd) {
      _0x8e22x8[_0xee2b[3583]]()[_0xee2b[760]](_0x8e22x1);
    }
    if (_0x8e22xc) {
      _0x8e22x8[_0xee2b[2970]]()[_0xee2b[3168]](_0x8e22x1, 0);
    }
    Ext[_0xee2b[4002]](_0x8e22xe, _0x8e22xf || _0x8e22xa, [true, _0x8e22x1, _0x8e22x5]);
  } else {
    if (_0x8e22x8[_0xee2b[2478]]) {
      _0x8e22x8[_0xee2b[2478]][_0xee2b[289]](_0x8e22x1, {animate:_0x8e22x3, highlight:_0x8e22x6, select:_0x8e22xd, focus:_0x8e22xc, column:_0x8e22x4, callback:function(_0x8e22x18, _0x8e22x11, _0x8e22x19) {
        Ext[_0xee2b[4002]](_0x8e22xe, _0x8e22xf || _0x8e22xa, [true, _0x8e22x11, _0x8e22x19]);
      }});
    } else {
      Ext[_0xee2b[4002]](_0x8e22xe, _0x8e22xf || _0x8e22xa, [false, null]);
    }
  }
}}}});
Ext[_0xee2b[6]](_0xee2b[3463], {extend:_0xee2b[957], target:_0xee2b[4006], overrides:{scrollBy:function(_0x8e22x4, _0x8e22x6, _0x8e22x3) {
  if (this[_0xee2b[2468]]) {
    this[_0xee2b[9]]([_0x8e22x4 || null, null, _0x8e22x3]);
    this[_0xee2b[834]][_0xee2b[834]][_0xee2b[1941]]()[_0xee2b[3127]](null, _0x8e22x6, _0x8e22x3);
  } else {
    this[_0xee2b[9]]([_0x8e22x4, _0x8e22x6, _0x8e22x3]);
  }
}}});
Ext[_0xee2b[6]](_0xee2b[3467], {extend:_0xee2b[957], target:_0xee2b[3131], minVersion:_0xee2b[3134], overrides:{initComponent:function() {
  this[_0xee2b[9]](arguments);
  if (this[_0xee2b[1855]]) {
    this[_0xee2b[1848]][_0xee2b[149]](_0xee2b[833], function(_0x8e22x3) {
      _0x8e22x3[_0xee2b[289]](this[_0xee2b[1920]]());
    }, this);
  }
}}});
Ext[_0xee2b[6]](_0xee2b[3468], {extend:_0xee2b[957], target:_0xee2b[3131], minVersion:_0xee2b[2836], overrides:{scrollVerticallyTo:function(_0x8e22x6, _0x8e22x3) {
  this[_0xee2b[694]](_0xee2b[805])[_0xee2b[1941]]()[_0xee2b[289]](null, _0x8e22x6, _0x8e22x3);
}, getVerticalScroll:function() {
  var _0x8e22x3 = this[_0xee2b[694]](_0xee2b[805])[_0xee2b[1941]]();
  if (_0x8e22x3[_0xee2b[3449]]) {
    if (_0x8e22x3[_0xee2b[3449]]()) {
      return _0x8e22x3[_0xee2b[2950]]()[_0xee2b[1894]];
    } else {
      return 0;
    }
  } else {
    return _0x8e22x3[_0xee2b[2950]]()[_0xee2b[1894]];
  }
}}});
Ext[_0xee2b[6]](_0xee2b[3469], {extend:_0xee2b[957], target:_0xee2b[3459], minVersion:_0xee2b[2836], applyFn:function() {
  Sch[_0xee2b[1818]][_0xee2b[3450]] && Sch[_0xee2b[1818]][_0xee2b[3450]][_0xee2b[507]]({hideHeaders:false});
  Sch[_0xee2b[1818]][_0xee2b[3451]] && Sch[_0xee2b[1818]][_0xee2b[3451]][_0xee2b[507]]({hideHeaders:false});
}});
Ext[_0xee2b[6]](_0xee2b[3470], {extend:_0xee2b[957], requires:[_0xee2b[4007]], target:_0xee2b[4007], applyFn:function() {
  var _0x8e22x3 = Ext[_0xee2b[758]][_0xee2b[4009]][_0xee2b[4008]];
  Ext[_0xee2b[758]][_0xee2b[4009]][_0xee2b[4008]] = function(_0x8e22x6) {
    _0x8e22x6[_0xee2b[1972]] = _0x8e22x6[_0xee2b[1972]] || [];
    return _0x8e22x3[_0xee2b[8]](this, arguments);
  };
}});
Ext[_0xee2b[6]](_0xee2b[4010], {extend:_0xee2b[782], alias:_0xee2b[4011], requires:[_0xee2b[4012], _0xee2b[2440], _0xee2b[1140], _0xee2b[1794]], mixins:{observable:_0xee2b[108]}, frameCls:_0xee2b[4013], editingCls:_0xee2b[4014], activeCls:_0xee2b[4015], frameTemplate:new Ext.Template([_0xee2b[4016], _0xee2b[4017], _0xee2b[4018], _0xee2b[4019], _0xee2b[4020], _0xee2b[1815]]), editor:_0xee2b[2440], singleClickEditing:true, dblClickTimeout:100, editing:false, context:{}, position:{}, selContext:[], 
lockedView:null, schedulingView:null, timeAxisViewModel:null, keyNav:null, constructor:function(_0x8e22x3) {
  this[_0xee2b[295]][_0xee2b[294]][_0xee2b[217]][_0xee2b[293]](this);
  this[_0xee2b[9]](arguments);
  this[_0xee2b[2470]] = {};
  this[_0xee2b[1780]] = {};
}, init:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  _0x8e22x6[_0xee2b[4021]] = _0x8e22x3[_0xee2b[808]]();
  _0x8e22x6[_0xee2b[4022]] = _0x8e22x3[_0xee2b[1830]][_0xee2b[290]]();
  _0x8e22x3[_0xee2b[2970]]()[_0xee2b[2061]]();
  _0x8e22x6[_0xee2b[810]] = _0x8e22x3[_0xee2b[810]];
  _0x8e22x6[_0xee2b[4023]] = new Ext[_0xee2b[49]].KeyNav({target:_0x8e22x6[_0xee2b[4022]], eventName:_0xee2b[4024], processEvent:function(_0x8e22x5, _0x8e22x4, _0x8e22x9, _0x8e22x2, _0x8e22x1) {
    _0x8e22x1[_0xee2b[2217]]();
    return _0x8e22x1;
  }, ignoreInputFields:true, up:_0x8e22x6[_0xee2b[4025]], down:_0x8e22x6[_0xee2b[4026]], right:_0x8e22x6[_0xee2b[4027]], left:_0x8e22x6[_0xee2b[4028]], tab:_0x8e22x6[_0xee2b[4029]], enter:_0x8e22x6[_0xee2b[4030]], esc:_0x8e22x6[_0xee2b[4031]], scope:_0x8e22x6});
  if (_0x8e22x3[_0xee2b[2478]]) {
    _0x8e22x6[_0xee2b[4021]][_0xee2b[149]](_0xee2b[3088], function() {
      _0x8e22x6[_0xee2b[4021]][_0xee2b[1941]]()[_0xee2b[149]](_0xee2b[1978], _0x8e22x6[_0xee2b[2201]], _0x8e22x6);
    });
    _0x8e22x6[_0xee2b[4021]][_0xee2b[149]](_0xee2b[4032], _0x8e22x6[_0xee2b[4033]], _0x8e22x6);
  }
  _0x8e22x6[_0xee2b[4034]] = new Ext[_0xee2b[49]].DelayedTask(_0x8e22x6[_0xee2b[4035]], _0x8e22x6);
  _0x8e22x3[_0xee2b[149]]({headerclick:_0x8e22x6[_0xee2b[4036]], zoomchange:_0x8e22x6[_0xee2b[4037]], scope:_0x8e22x6});
  _0x8e22x6[_0xee2b[4021]][_0xee2b[149]]({containerclick:_0x8e22x6[_0xee2b[4036]], scheduleclick:_0x8e22x6[_0xee2b[4038]], scheduledblclick:_0x8e22x6[_0xee2b[4039]], eventclick:_0x8e22x6[_0xee2b[3303]], eventdblclick:_0x8e22x6[_0xee2b[4040]], containerkeydown:_0x8e22x6[_0xee2b[4041]], groupcollapse:_0x8e22x6[_0xee2b[4042]], groupexpand:_0x8e22x6[_0xee2b[4043]], scope:_0x8e22x6});
  if (Ext[_0xee2b[2009]]()[_0xee2b[966]](_0xee2b[2836])) {
    _0x8e22x6[_0xee2b[4021]][_0xee2b[149]](_0xee2b[770], _0x8e22x6[_0xee2b[4044]], _0x8e22x6);
    _0x8e22x6[_0xee2b[252]](_0x8e22x6[_0xee2b[810]], _0xee2b[724], _0x8e22x6[_0xee2b[4044]], _0x8e22x6);
  }
  _0x8e22x6[_0xee2b[252]](_0x8e22x6[_0xee2b[810]], {update:_0x8e22x6[_0xee2b[4045]], scope:_0x8e22x6});
  _0x8e22x6[_0xee2b[252]](_0x8e22x3[_0xee2b[695]](), {beforereconfigure:_0x8e22x6[_0xee2b[4046]], scope:_0x8e22x6});
  _0x8e22x6[_0xee2b[4047]](_0x8e22x3[_0xee2b[1007]]());
  _0x8e22x6[_0xee2b[2375]](_0x8e22x3[_0xee2b[696]]());
  _0x8e22x6[_0xee2b[4022]][_0xee2b[149]]({cellclick:_0x8e22x6[_0xee2b[4048]], beforeitemkeydown:_0x8e22x6[_0xee2b[4049]], scope:_0x8e22x6});
  _0x8e22x3[_0xee2b[149]](_0xee2b[1074], function(_0x8e22x4, _0x8e22x5, _0x8e22x2) {
    _0x8e22x6[_0xee2b[2375]](_0x8e22x2, true);
    _0x8e22x6[_0xee2b[2375]](_0x8e22x5);
  });
  _0x8e22x3[_0xee2b[149]](_0xee2b[1409], function(_0x8e22x4, _0x8e22x5, _0x8e22x2) {
    _0x8e22x6[_0xee2b[4047]](_0x8e22x2, true);
    _0x8e22x6[_0xee2b[4047]](_0x8e22x5);
  });
}, moveContainerElToSecondaryCanvas:function() {
  if (this[_0xee2b[726]]) {
    this[_0xee2b[4021]][_0xee2b[1839]]()[_0xee2b[83]](this[_0xee2b[726]]);
  }
}, getNbrOfTicks:function() {
  return this[_0xee2b[4021]][_0xee2b[1795]][_0xee2b[1466]]();
}, onEditorKeyDown:function(_0x8e22x3, _0x8e22x6) {
  if (!this[_0xee2b[2950]]()[_0xee2b[53]](_0xee2b[4050])) {
    return;
  }
  switch(_0x8e22x6[_0xee2b[2211]]()) {
    case _0x8e22x6[_0xee2b[4054]]:
      _0x8e22x6[_0xee2b[2217]]();
      if (_0x8e22x6[_0xee2b[4051]]) {
        this[_0xee2b[4052]](_0x8e22x6);
      } else {
        this[_0xee2b[4053]](_0x8e22x6);
      }
      break;
    case _0x8e22x6[_0xee2b[4056]]:
      this[_0xee2b[4055]]();
      break;
    case _0x8e22x6[_0xee2b[2213]]:
      this[_0xee2b[3030]](_0x8e22x6);
      break;
    default:
      break;
  }
}, onEditorKeyEnter:function() {
  if (this[_0xee2b[4057]]()) {
    this[_0xee2b[4058]]();
  } else {
    this[_0xee2b[4060]](this[_0xee2b[4059]](this[_0xee2b[2950]](), true));
  }
}, destroy:function() {
  this[_0xee2b[4023]][_0xee2b[218]]();
  this[_0xee2b[2662]] && this[_0xee2b[2662]][_0xee2b[218]] && this[_0xee2b[2662]][_0xee2b[218]]();
  this[_0xee2b[4037]]();
  this[_0xee2b[9]](arguments);
}, destroyHighlighter:function() {
  var _0x8e22x3 = this;
  _0x8e22x3[_0xee2b[3953]]();
  if (_0x8e22x3[_0xee2b[2662]] && _0x8e22x3[_0xee2b[2662]][_0xee2b[265]] && !_0x8e22x3[_0xee2b[4021]][_0xee2b[458]]) {
    _0x8e22x3[_0xee2b[4021]][_0xee2b[1839]]()[_0xee2b[83]](_0x8e22x3[_0xee2b[2662]][_0xee2b[265]]);
    _0x8e22x3[_0xee2b[2662]][_0xee2b[256]]();
  }
  if (_0x8e22x3[_0xee2b[726]]) {
    _0x8e22x3[_0xee2b[726]][_0xee2b[218]]();
    delete _0x8e22x3[_0xee2b[726]];
  }
  _0x8e22x3[_0xee2b[2470]] = {};
  _0x8e22x3[_0xee2b[1780]] = {};
}, onGroupCollapse:function() {
  var _0x8e22x3 = this;
  if (_0x8e22x3[_0xee2b[4061]]() === -1) {
    _0x8e22x3[_0xee2b[4037]]();
  } else {
    _0x8e22x3[_0xee2b[4062]]();
  }
}, onGroupExpand:function() {
  this[_0xee2b[4062]]();
}, onViewScroll:function() {
  var _0x8e22x6 = this;
  if (_0x8e22x6[_0xee2b[726]]) {
    var _0x8e22x3 = _0x8e22x6[_0xee2b[4021]][_0xee2b[3117]](_0x8e22x6[_0xee2b[2950]]()[_0xee2b[4063]]);
    if (_0x8e22x3) {
      _0x8e22x6[_0xee2b[726]][_0xee2b[2079]](Ext[_0xee2b[761]](_0x8e22x3)[_0xee2b[1936]]() - 1);
    }
  }
}, onItemAdd:function() {
  var _0x8e22x6 = this, _0x8e22x4 = _0x8e22x6[_0xee2b[2950]]()[_0xee2b[4063]];
  if (_0x8e22x4) {
    var _0x8e22x3 = _0x8e22x6[_0xee2b[4021]][_0xee2b[3117]](_0x8e22x4);
    if (_0x8e22x3) {
      _0x8e22x6[_0xee2b[726]][_0xee2b[2019]]();
    } else {
      _0x8e22x6[_0xee2b[726]][_0xee2b[256]]();
    }
  }
}, getResourceIndex:function(_0x8e22x6) {
  var _0x8e22x3 = this;
  _0x8e22x6 = _0x8e22x6 || _0x8e22x3[_0xee2b[2950]]()[_0xee2b[4063]];
  return _0x8e22x3[_0xee2b[4021]][_0xee2b[147]](_0x8e22x6);
}, getResource:function(_0x8e22x3) {
  return this[_0xee2b[4021]][_0xee2b[3408]][_0xee2b[1752]](_0x8e22x3);
}, onResourceAdd:function(_0x8e22x6, _0x8e22x3) {
  this[_0xee2b[4062]]();
}, onResourceRemove:function(_0x8e22x6, _0x8e22x3) {
  var _0x8e22x4 = this;
  if (_0x8e22x6[_0xee2b[1466]]() === 0 || Ext[_0xee2b[26]][_0xee2b[147]](_0x8e22x3, _0x8e22x4[_0xee2b[2950]]()[_0xee2b[4063]]) !== -1) {
    _0x8e22x4[_0xee2b[4037]]();
  } else {
    _0x8e22x4[_0xee2b[4062]]();
  }
}, onBeforeReconfigure:function(_0x8e22x6) {
  var _0x8e22x3 = this[_0xee2b[2950]]();
  if (!this[_0xee2b[1138]] && Ext[_0xee2b[789]](_0x8e22x3[_0xee2b[4050]])) {
    this[_0xee2b[1138]] = _0x8e22x6[_0xee2b[1752]](_0x8e22x3[_0xee2b[4050]])[_0xee2b[712]]();
  }
}, onLockedCellClick:function(_0x8e22x4, _0x8e22x7, _0x8e22x6, _0x8e22x3, _0x8e22x5, _0x8e22x9, _0x8e22x1) {
  this[_0xee2b[4060]]({tickIndex:this[_0xee2b[2950]]()[_0xee2b[4050]] || 0, resourceIndex:_0x8e22x9}, _0x8e22x1);
}, onBeforeItemKeyDown:function(_0x8e22x5, _0x8e22x3, _0x8e22x4, _0x8e22x6, _0x8e22x1) {
  if (!_0x8e22x1[_0xee2b[4064]]()) {
    this[_0xee2b[46]]();
  }
}, onViewModelUpdate:function(_0x8e22x5) {
  var _0x8e22x6 = this, _0x8e22x4 = _0x8e22x5[_0xee2b[1795]];
  if (_0x8e22x6[_0xee2b[1138]]) {
    var _0x8e22x3 = _0x8e22x4[_0xee2b[1764]](_0x8e22x6[_0xee2b[1138]]);
    if (_0x8e22x3 >= 0) {
      delete _0x8e22x6[_0xee2b[1138]];
      _0x8e22x6[_0xee2b[1780]][_0xee2b[4050]] = _0x8e22x3;
      if (!_0x8e22x6[_0xee2b[726]]) {
        _0x8e22x6[_0xee2b[4065]]();
      }
      _0x8e22x6[_0xee2b[4062]]();
    } else {
      _0x8e22x6[_0xee2b[4037]]();
    }
  } else {
    _0x8e22x6[_0xee2b[4062]]();
  }
}, refreshCell:function() {
  var _0x8e22x6 = this;
  var _0x8e22x3 = _0x8e22x6[_0xee2b[810]][_0xee2b[755]]();
  if (_0x8e22x6[_0xee2b[726]]) {
    _0x8e22x6[_0xee2b[726]][_0xee2b[839]](_0x8e22x3);
    _0x8e22x6[_0xee2b[726]][_0xee2b[1857]](_0x8e22x3);
    _0x8e22x6[_0xee2b[4060]]({tickIndex:_0x8e22x6[_0xee2b[2950]]()[_0xee2b[4050]], resourceIndex:_0x8e22x6[_0xee2b[4061]]()});
  }
  if (_0x8e22x6[_0xee2b[2662]] instanceof Ext[_0xee2b[4067]][_0xee2b[927]][_0xee2b[4066]]) {
    _0x8e22x6[_0xee2b[2662]][_0xee2b[4068]](_0x8e22x3);
  }
}, clearSelection:function() {
  var _0x8e22x3 = this;
  if (_0x8e22x3[_0xee2b[4021]][_0xee2b[262]]) {
    _0x8e22x3[_0xee2b[4021]][_0xee2b[1839]]()[_0xee2b[760]](_0xee2b[495] + _0x8e22x3[_0xee2b[4069]] + _0xee2b[4070])[_0xee2b[63]]();
  }
  _0x8e22x3[_0xee2b[4071]] = [];
}, addSelection:function() {
  var _0x8e22x3 = this;
  var _0x8e22x6 = _0x8e22x3[_0xee2b[4073]][_0xee2b[8]]({cls:[_0x8e22x3[_0xee2b[4069]], _0xee2b[4072]][_0xee2b[73]](_0xee2b[60]), width:_0x8e22x3[_0xee2b[726]][_0xee2b[793]](), height:_0x8e22x3[_0xee2b[726]][_0xee2b[859]]()});
  _0x8e22x6 = Ext[_0xee2b[55]](Ext[_0xee2b[758]][_0xee2b[4074]][_0xee2b[384]](_0x8e22x3[_0xee2b[726]][_0xee2b[79]](), _0x8e22x6));
  _0x8e22x6[_0xee2b[2051]](_0xee2b[686], _0x8e22x3[_0xee2b[726]][_0xee2b[2425]](_0xee2b[686]));
  _0x8e22x6[_0xee2b[2051]](_0xee2b[1354], _0x8e22x3[_0xee2b[726]][_0xee2b[2425]](_0xee2b[1354]));
  _0x8e22x3[_0xee2b[4071]][_0xee2b[11]](Ext[_0xee2b[8]]({}, _0x8e22x3[_0xee2b[2470]]));
}, applyVisibilityMode:function(_0x8e22x3) {
  _0x8e22x3[_0xee2b[4076]](Ext[_0xee2b[758]][_0xee2b[4075]].OFFSETS);
}, renderElement:function() {
  var _0x8e22x2 = this;
  var _0x8e22x5 = _0x8e22x2[_0xee2b[810]][_0xee2b[755]]();
  var _0x8e22x3 = _0x8e22x2[_0xee2b[810]][_0xee2b[2832]]();
  var _0x8e22x4 = _0x8e22x2[_0xee2b[4073]][_0xee2b[8]]({cls:[_0x8e22x2[_0xee2b[4069]], _0x8e22x2[_0xee2b[263]]][_0xee2b[73]](_0xee2b[60]), width:_0x8e22x5, height:_0x8e22x3});
  _0x8e22x2[_0xee2b[726]] = Ext[_0xee2b[55]](Ext[_0xee2b[2261]][_0xee2b[384]](_0x8e22x2[_0xee2b[4021]][_0xee2b[1839]](), _0x8e22x4));
  _0x8e22x2[_0xee2b[4077]](_0x8e22x2[_0xee2b[726]]);
  var _0x8e22x6 = {height:_0x8e22x3, maxHeight:_0x8e22x3, width:_0x8e22x5, maxWidth:_0x8e22x5, listeners:{render:function(_0x8e22x1) {
    _0x8e22x2[_0xee2b[4077]](_0x8e22x1[_0xee2b[265]]);
  }}, renderTo:_0x8e22x2[_0xee2b[726]]};
  if (Ext[_0xee2b[135]](_0x8e22x2[_0xee2b[2662]]) && !(_0x8e22x2[_0xee2b[2662]] instanceof Ext[_0xee2b[4066]])) {
    _0x8e22x2[_0xee2b[2662]] = Ext[_0xee2b[831]](Ext[_0xee2b[8]](_0x8e22x6, _0x8e22x2[_0xee2b[2662]], {xclass:_0xee2b[2440]}));
  } else {
    if (typeof _0x8e22x2[_0xee2b[2662]] === _0xee2b[308]) {
      _0x8e22x2[_0xee2b[2662]] = Ext[_0xee2b[831]](_0x8e22x2[_0xee2b[2662]], _0x8e22x6);
    } else {
      _0x8e22x2[_0xee2b[726]][_0xee2b[83]](_0x8e22x2[_0xee2b[2662]][_0xee2b[265]]);
      _0x8e22x2[_0xee2b[4077]](_0x8e22x2[_0xee2b[2662]][_0xee2b[265]]);
    }
  }
  _0x8e22x2[_0xee2b[2662]][_0xee2b[4078]][_0xee2b[2051]]({height:_0x8e22x3 - 3 + _0xee2b[804], minHeight:_0x8e22x3 - 3 + _0xee2b[804]});
}, onContainerClick:function() {
  var _0x8e22x3 = this;
  if (_0x8e22x3[_0xee2b[4022]][_0xee2b[3583]]()[_0xee2b[3314]]()[_0xee2b[4]] > 0) {
    if (_0x8e22x3[_0xee2b[2662]][_0xee2b[854]] && _0x8e22x3[_0xee2b[2662]][_0xee2b[854]]()) {
      _0x8e22x3[_0xee2b[2662]][_0xee2b[3210]]();
    }
  }
}, onCellClick:function() {
  this[_0xee2b[4034]][_0xee2b[4080]](this[_0xee2b[4079]], null, null, arguments);
}, handleCellClick:function(_0x8e22x3, _0x8e22x4, _0x8e22x7, _0x8e22x1, _0x8e22x9) {
  var _0x8e22x5 = this;
  var _0x8e22x6 = Math[_0xee2b[424]](_0x8e22x5[_0xee2b[4021]][_0xee2b[1795]][_0xee2b[1764]](_0x8e22x4));
  if (_0x8e22x5[_0xee2b[180]](_0xee2b[3580], _0x8e22x5, _0x8e22x6, _0x8e22x7) !== false) {
    _0x8e22x5[_0xee2b[4060]]({tickIndex:_0x8e22x6, resourceIndex:_0x8e22x7}, _0x8e22x9);
    if (_0x8e22x5[_0xee2b[4081]]) {
      _0x8e22x5[_0xee2b[46]]();
    }
  }
}, onCellDblClick:function(_0x8e22x3, _0x8e22x6, _0x8e22x1, _0x8e22x4, _0x8e22x5) {
  this[_0xee2b[4034]][_0xee2b[1499]]();
  this[_0xee2b[4082]](_0x8e22x3, _0x8e22x6, _0x8e22x1, _0x8e22x4, _0x8e22x5);
}, handleCellDblClick:function(_0x8e22x3, _0x8e22x4, _0x8e22x7, _0x8e22x1, _0x8e22x9) {
  var _0x8e22x5 = this;
  var _0x8e22x6 = Math[_0xee2b[424]](_0x8e22x5[_0xee2b[4021]][_0xee2b[1795]][_0xee2b[1764]](_0x8e22x4));
  if (_0x8e22x5[_0xee2b[180]](_0xee2b[4083], _0x8e22x5, _0x8e22x6, _0x8e22x7) !== false) {
    _0x8e22x5[_0xee2b[4060]]({tickIndex:_0x8e22x6, resourceIndex:_0x8e22x7}, _0x8e22x9);
    _0x8e22x5[_0xee2b[46]]();
  }
}, onEventClick:function(_0x8e22x6, _0x8e22x3, _0x8e22x9) {
  var _0x8e22x1 = this;
  var _0x8e22x5 = _0x8e22x1[_0xee2b[4021]][_0xee2b[2035]](_0x8e22x9);
  var _0x8e22x4 = Math[_0xee2b[424]](_0x8e22x1[_0xee2b[4021]][_0xee2b[1795]][_0xee2b[1764]](_0x8e22x5));
  var _0x8e22x7 = _0x8e22x1[_0xee2b[4061]](_0x8e22x3[_0xee2b[1053]]());
  _0x8e22x1[_0xee2b[4060]]({tickIndex:_0x8e22x4, resourceIndex:_0x8e22x7, eventRecord:_0x8e22x3}, _0x8e22x9);
}, onEventDblClick:function(_0x8e22x6, _0x8e22x3, _0x8e22x9) {
  var _0x8e22x1 = this;
  var _0x8e22x5 = _0x8e22x1[_0xee2b[4021]][_0xee2b[2035]](_0x8e22x9);
  var _0x8e22x4 = Math[_0xee2b[424]](_0x8e22x1[_0xee2b[4021]][_0xee2b[1795]][_0xee2b[1764]](_0x8e22x5));
  var _0x8e22x7 = _0x8e22x1[_0xee2b[4061]](_0x8e22x3[_0xee2b[1053]]());
  _0x8e22x1[_0xee2b[4060]]({tickIndex:_0x8e22x4, resourceIndex:_0x8e22x7, eventRecord:_0x8e22x3}, _0x8e22x9);
  _0x8e22x1[_0xee2b[46]]();
}, showEditorInCell:function(_0x8e22x6, _0x8e22xa) {
  var _0x8e22x5 = this;
  if (_0x8e22x6[_0xee2b[4050]] === -1 || _0x8e22x6[_0xee2b[4084]] === -1) {
    return;
  }
  if (!_0x8e22x6[_0xee2b[4085]]) {
    _0x8e22x6 = _0x8e22x5[_0xee2b[4059]](_0x8e22x6);
  }
  var _0x8e22x3 = _0x8e22x6[_0xee2b[1138]], _0x8e22x7 = _0x8e22x6[_0xee2b[1139]], _0x8e22x9 = _0x8e22x6[_0xee2b[4084]], _0x8e22x1 = _0x8e22x6[_0xee2b[4063]], _0x8e22x4 = _0x8e22x6[_0xee2b[2329]];
  if (_0x8e22xa && _0x8e22xa[_0xee2b[249]] === _0xee2b[248] && !_0x8e22x4) {
    _0x8e22x6[_0xee2b[2329]] = _0x8e22x4 = _0x8e22x5[_0xee2b[4086]](_0x8e22x6)[_0xee2b[1752]](0);
  }
  if (_0x8e22x5[_0xee2b[180]](_0xee2b[4087], _0x8e22x5, _0x8e22x1, _0x8e22x3, _0x8e22x7, _0x8e22x4) === false) {
    return;
  }
  _0x8e22x5[_0xee2b[4088]](_0x8e22xa);
  if (!_0x8e22x5[_0xee2b[726]]) {
    _0x8e22x5[_0xee2b[4065]]();
  } else {
    if (_0x8e22xa && _0x8e22xa[_0xee2b[2794]]) {
      _0x8e22x5[_0xee2b[4089]]();
    } else {
      _0x8e22x5[_0xee2b[3953]]();
    }
  }
  _0x8e22x5[_0xee2b[3168]](_0x8e22x6);
  _0x8e22x5[_0xee2b[4090]]();
  _0x8e22x5[_0xee2b[4091]](_0x8e22xa);
  _0x8e22x5[_0xee2b[180]](_0xee2b[760], _0x8e22x5, _0x8e22x1, _0x8e22x3, _0x8e22x7);
  _0x8e22x5[_0xee2b[180]](_0xee2b[3384], _0x8e22x5, _0x8e22x5[_0xee2b[3314]]());
}, getContextFromPosition:function(_0x8e22x3) {
  var _0x8e22x6 = {startDate:_0x8e22x3[_0xee2b[1138]], endDate:_0x8e22x3[_0xee2b[1139]], resource:_0x8e22x3[_0xee2b[4063]]};
  if (_0x8e22x3[_0xee2b[2329]]) {
    _0x8e22x6[_0xee2b[2329]] = _0x8e22x3[_0xee2b[2329]];
  }
  return _0x8e22x6;
}, getPosition:function() {
  return Ext[_0xee2b[8]]({}, this[_0xee2b[1780]]);
}, setPosition:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  _0x8e22x6[_0xee2b[2470]] = _0x8e22x6[_0xee2b[4092]](_0x8e22x3);
  Ext[_0xee2b[8]](_0x8e22x6[_0xee2b[1780]], _0x8e22x3);
}, stripPosition:function(_0x8e22x3) {
  return {tickIndex:_0x8e22x3[_0xee2b[4050]], resourceIndex:_0x8e22x3[_0xee2b[4084]]};
}, alignEditor:function() {
  var _0x8e22x3 = this[_0xee2b[2950]](), _0x8e22x6 = _0x8e22x3[_0xee2b[2329]];
  if (_0x8e22x6) {
    this[_0xee2b[4093]](_0x8e22x6, _0x8e22x3[_0xee2b[4063]]);
  } else {
    this[_0xee2b[4094]]();
  }
}, alignEditorWithRecord:function(_0x8e22x3, _0x8e22x2) {
  var _0x8e22x5 = this;
  var _0x8e22x6 = _0x8e22x5[_0xee2b[4021]][_0xee2b[2191]](_0x8e22x3, _0x8e22x2), _0x8e22x4 = _0x8e22x6[0][_0xee2b[2611]]();
  _0x8e22x4[_0xee2b[1894]]--;
  _0x8e22x4[_0xee2b[1893]]--;
  _0x8e22x5[_0xee2b[4095]](_0x8e22x4);
}, alignEditorWithCell:function() {
  var _0x8e22x4 = this, _0x8e22x3 = _0x8e22x4[_0xee2b[2950]]();
  var _0x8e22x6 = Ext[_0xee2b[55]](_0x8e22x4[_0xee2b[4021]][_0xee2b[4096]](_0x8e22x3[_0xee2b[4063]]));
  _0x8e22x6 && _0x8e22x4[_0xee2b[4095]]({left:_0x8e22x4[_0xee2b[810]][_0xee2b[755]]() * _0x8e22x3[_0xee2b[4050]], y:_0x8e22x6[_0xee2b[2421]]() - 1, height:_0x8e22x6[_0xee2b[859]]() + 1, width:_0x8e22x4[_0xee2b[810]][_0xee2b[755]]()});
}, alignEditorToBox:function(_0x8e22x6) {
  var _0x8e22x3 = this;
  _0x8e22x3[_0xee2b[726]][_0xee2b[2079]](_0x8e22x6[_0xee2b[1894]]);
  if (_0xee2b[1893] in _0x8e22x6) {
    _0x8e22x3[_0xee2b[726]][_0xee2b[2171]](_0x8e22x6[_0xee2b[1893]]);
  } else {
    _0x8e22x3[_0xee2b[726]][_0xee2b[1857]](_0x8e22x6[_0xee2b[1354]]);
  }
  _0x8e22x3[_0xee2b[726]][_0xee2b[839]](_0x8e22x6[_0xee2b[773]]);
  _0x8e22x3[_0xee2b[726]][_0xee2b[863]](_0x8e22x6[_0xee2b[747]]);
  _0x8e22x3[_0xee2b[726]][_0xee2b[2019]]();
}, getSelection:function() {
  return this[_0xee2b[4071]][_0xee2b[318]](this[_0xee2b[2470]]);
}, getEventRecord:function(_0x8e22x3) {
  return (_0x8e22x3 || this[_0xee2b[2470]])[_0xee2b[2329]];
}, getResourceRecord:function(_0x8e22x3) {
  return (_0x8e22x3 || this[_0xee2b[2470]])[_0xee2b[4063]];
}, onKeyUp:function(_0x8e22x3) {
  this[_0xee2b[4097]](_0x8e22x3);
}, onKeyDown:function(_0x8e22x3) {
  this[_0xee2b[4098]](_0x8e22x3);
}, onKeyLeft:function(_0x8e22x3) {
  this[_0xee2b[4099]](_0x8e22x3);
}, onKeyRight:function(_0x8e22x3) {
  this[_0xee2b[4100]](_0x8e22x3);
}, onKeyTab:function(_0x8e22x3) {
  if (_0x8e22x3[_0xee2b[4051]]) {
    this[_0xee2b[4099]](_0x8e22x3);
  } else {
    this[_0xee2b[4100]](_0x8e22x3);
  }
}, onKeyEnter:function() {
  this[_0xee2b[46]]();
}, onKeyEsc:function() {
  this[_0xee2b[4037]]();
}, findPreviousIndex:function() {
  var _0x8e22x4 = this, _0x8e22x6 = _0x8e22x4[_0xee2b[2950]]();
  var _0x8e22x3 = _0x8e22x4[_0xee2b[4021]][_0xee2b[4101]](_0x8e22x6[_0xee2b[4063]], -1);
  if (_0x8e22x3 !== _0x8e22x6[_0xee2b[4063]]) {
    return _0x8e22x4[_0xee2b[4061]](_0x8e22x3);
  } else {
    return -1;
  }
}, findNextIndex:function() {
  var _0x8e22x4 = this, _0x8e22x6 = _0x8e22x4[_0xee2b[2950]]();
  var _0x8e22x3 = _0x8e22x4[_0xee2b[4021]][_0xee2b[4101]](_0x8e22x6[_0xee2b[4063]], 1);
  if (_0x8e22x3 !== _0x8e22x6[_0xee2b[4063]]) {
    return _0x8e22x4[_0xee2b[4061]](_0x8e22x3);
  } else {
    return -1;
  }
}, getCellEvents:function(_0x8e22x3) {
  var _0x8e22x5 = this, _0x8e22x6 = _0x8e22x5[_0xee2b[4021]];
  _0x8e22x3 = _0x8e22x3 || _0x8e22x5[_0xee2b[2950]]();
  if (_0x8e22x3[_0xee2b[4084]] === -1 || _0x8e22x3[_0xee2b[4050]] === -1) {
    return new Ext[_0xee2b[49]].MixedCollection();
  }
  var _0x8e22x4 = _0x8e22x6[_0xee2b[696]]()[_0xee2b[1569]](function(_0x8e22x2) {
    return _0x8e22x2[_0xee2b[1008]]() === _0x8e22x3[_0xee2b[4063]][_0xee2b[32]]() && _0x8e22x2[_0xee2b[712]]() >= _0x8e22x3[_0xee2b[1138]] && _0x8e22x2[_0xee2b[712]]() < _0x8e22x3[_0xee2b[1139]];
  });
  _0x8e22x4[_0xee2b[4102]](function(_0x8e22x9, _0x8e22x1) {
    var _0x8e22x7 = _0x8e22x6[_0xee2b[2191]](_0x8e22x9, _0x8e22x3[_0xee2b[4063]])[0], _0x8e22x2 = _0x8e22x6[_0xee2b[2191]](_0x8e22x1, _0x8e22x3[_0xee2b[4063]])[0];
    return _0x8e22x7[_0xee2b[1936]]() < _0x8e22x2[_0xee2b[1936]]() ? -1 : 1;
  });
  return _0x8e22x4;
}, getAbove:function(_0x8e22x3) {
  var _0x8e22x1 = this;
  _0x8e22x3 = _0x8e22x3 || _0x8e22x1[_0xee2b[2950]]();
  if (_0x8e22x3[_0xee2b[2329]]) {
    var _0x8e22x5 = _0x8e22x1[_0xee2b[4086]](_0x8e22x3);
    var _0x8e22x2 = _0x8e22x5[_0xee2b[147]](_0x8e22x3[_0xee2b[2329]]);
    if (_0x8e22x2 > 0) {
      var _0x8e22x6 = _0x8e22x2 - 1;
      return {tickIndex:_0x8e22x3[_0xee2b[4050]], resourceIndex:_0x8e22x3[_0xee2b[4084]], eventIndexInCell:_0x8e22x6, eventRecord:_0x8e22x5[_0xee2b[1752]](_0x8e22x6)};
    }
  }
  var _0x8e22x4 = _0x8e22x1[_0xee2b[4103]]();
  if (_0x8e22x4 === -1) {
    return {resourceIndex:-1};
  }
  return _0x8e22x1[_0xee2b[4059]]({tickIndex:_0x8e22x3[_0xee2b[4050]], resourceIndex:_0x8e22x4}, true);
}, getBelow:function(_0x8e22x3) {
  var _0x8e22x1 = this;
  _0x8e22x3 = _0x8e22x3 || _0x8e22x1[_0xee2b[2950]]();
  if (_0x8e22x3[_0xee2b[2329]]) {
    var _0x8e22x5 = _0x8e22x1[_0xee2b[4086]](_0x8e22x3);
    var _0x8e22x2 = _0x8e22x5[_0xee2b[147]](_0x8e22x3[_0xee2b[2329]]);
    var _0x8e22x6 = _0x8e22x2 + 1;
    if (_0x8e22x2 >= 0 && _0x8e22x5[_0xee2b[1466]]() > _0x8e22x6) {
      return {tickIndex:_0x8e22x3[_0xee2b[4050]], resourceIndex:_0x8e22x3[_0xee2b[4084]], eventIndexInCell:_0x8e22x6, eventRecord:_0x8e22x5[_0xee2b[1752]](_0x8e22x6)};
    }
  }
  var _0x8e22x4 = _0x8e22x1[_0xee2b[4104]]();
  if (_0x8e22x4 === -1) {
    return {resourceIndex:-1};
  }
  return _0x8e22x1[_0xee2b[4059]]({resourceIndex:_0x8e22x4, tickIndex:_0x8e22x3[_0xee2b[4050]]});
}, getEventOrCell:function(_0x8e22x2, _0x8e22x3) {
  var _0x8e22xa = this;
  if (_0x8e22x2[_0xee2b[4050]] === -1 || _0x8e22x2[_0xee2b[4084]] === -1) {
    return _0x8e22x2;
  }
  var _0x8e22x8 = this[_0xee2b[4021]], _0x8e22x5 = _0x8e22x8[_0xee2b[1795]][_0xee2b[1752]](_0x8e22x2[_0xee2b[4050]]), _0x8e22x6 = _0x8e22x5[_0xee2b[712]](), _0x8e22x1 = _0x8e22x5[_0xee2b[713]](), _0x8e22x4 = _0x8e22x8[_0xee2b[3408]][_0xee2b[1752]](_0x8e22x2[_0xee2b[4084]]), _0x8e22x7 = _0x8e22x2[_0xee2b[2329]], _0x8e22x9 = _0x8e22x2[_0xee2b[4105]];
  var _0x8e22xd = _0x8e22xa[_0xee2b[4086]]({resource:_0x8e22x4, startDate:_0x8e22x6, endDate:_0x8e22x1});
  if (_0x8e22xd[_0xee2b[1466]]()) {
    if (_0x8e22x3 === true) {
      _0x8e22x9 = _0x8e22xd[_0xee2b[1466]]() - 1;
      _0x8e22x7 = _0x8e22xd[_0xee2b[1752]](_0x8e22x9);
    } else {
      if (_0x8e22x7) {
        _0x8e22x9 = Ext[_0xee2b[26]][_0xee2b[147]](_0x8e22xd, _0x8e22x7);
      } else {
        _0x8e22x9 = 0;
        _0x8e22x7 = _0x8e22xd[_0xee2b[1752]](0);
      }
    }
  }
  return {tickIndex:_0x8e22x2[_0xee2b[4050]], startDate:_0x8e22x6, endDate:_0x8e22x1, resourceIndex:_0x8e22x2[_0xee2b[4084]], resource:_0x8e22x4, eventRecord:_0x8e22x7, eventIndexInCell:_0x8e22x9, isCellContext:true};
}, getPrevious:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  _0x8e22x3 = _0x8e22x6[_0xee2b[4106]](_0x8e22x3 || _0x8e22x6[_0xee2b[2950]]());
  if (_0x8e22x3[_0xee2b[4050]] > 0) {
    return _0x8e22x6[_0xee2b[4059]]({tickIndex:_0x8e22x3[_0xee2b[4050]] - 1, resourceIndex:_0x8e22x3[_0xee2b[4084]]});
  } else {
    return _0x8e22x6[_0xee2b[4059]]({tickIndex:_0x8e22x6[_0xee2b[4107]]() - 1, resourceIndex:_0x8e22x6[_0xee2b[4103]]()});
  }
}, getNext:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  _0x8e22x3 = _0x8e22x6[_0xee2b[4106]](_0x8e22x3 || _0x8e22x6[_0xee2b[2950]]());
  if (_0x8e22x3[_0xee2b[4050]] < _0x8e22x6[_0xee2b[4107]]() - 1) {
    return _0x8e22x6[_0xee2b[4059]]({tickIndex:_0x8e22x3[_0xee2b[4050]] + 1, resourceIndex:_0x8e22x3[_0xee2b[4084]]});
  } else {
    return _0x8e22x6[_0xee2b[4059]]({tickIndex:0, resourceIndex:_0x8e22x6[_0xee2b[4104]]()});
  }
}, moveUp:function(_0x8e22x6) {
  var _0x8e22x3 = this;
  if (!_0x8e22x3[_0xee2b[726]]) {
    return;
  }
  _0x8e22x3[_0xee2b[4060]](_0x8e22x3[_0xee2b[4108]](), _0x8e22x6);
}, moveDown:function(_0x8e22x6) {
  var _0x8e22x3 = this;
  if (!_0x8e22x3[_0xee2b[726]]) {
    return;
  }
  _0x8e22x3[_0xee2b[4060]](_0x8e22x3[_0xee2b[4109]](), _0x8e22x6);
}, moveLeft:function(_0x8e22x6) {
  var _0x8e22x3 = this;
  if (!_0x8e22x3[_0xee2b[726]]) {
    return;
  }
  _0x8e22x3[_0xee2b[4060]](_0x8e22x3[_0xee2b[4110]](), _0x8e22x6);
}, moveRight:function(_0x8e22x6) {
  var _0x8e22x3 = this;
  if (!_0x8e22x3[_0xee2b[726]]) {
    return;
  }
  _0x8e22x3[_0xee2b[4060]](_0x8e22x3[_0xee2b[1283]](), _0x8e22x6);
}, editNext:function(_0x8e22x5) {
  var _0x8e22x4 = this, _0x8e22x3 = _0x8e22x4[_0xee2b[2950]](), _0x8e22x6 = _0x8e22x4[_0xee2b[1283]](_0x8e22x3);
  while (!_0x8e22x4[_0xee2b[46]](_0x8e22x6) && _0x8e22x6[_0xee2b[4084]] !== -1) {
    _0x8e22x3 = _0x8e22x6;
    _0x8e22x6 = _0x8e22x4[_0xee2b[1283]](_0x8e22x3);
  }
}, editPrevious:function(_0x8e22x5) {
  var _0x8e22x4 = this, _0x8e22x3 = _0x8e22x4[_0xee2b[2950]](), _0x8e22x6 = _0x8e22x4[_0xee2b[4110]](_0x8e22x3);
  while (!_0x8e22x4[_0xee2b[46]](_0x8e22x6) && _0x8e22x6[_0xee2b[4084]] !== -1) {
    _0x8e22x3 = _0x8e22x6;
    _0x8e22x6 = _0x8e22x4[_0xee2b[4110]](_0x8e22x3);
  }
}, expandResourceRow:function(_0x8e22x5, _0x8e22x4, _0x8e22x3) {
  var _0x8e22x6 = this;
  Ext[_0xee2b[761]](_0x8e22x5)[_0xee2b[863]](_0x8e22x4[_0xee2b[747]] + _0x8e22x3);
  Ext[_0xee2b[761]](_0x8e22x6[_0xee2b[4022]][_0xee2b[3117]](_0x8e22x6[_0xee2b[2950]]()[_0xee2b[4063]]))[_0xee2b[863]](_0x8e22x4[_0xee2b[747]] + _0x8e22x3);
  _0x8e22x6[_0xee2b[4111]] = _0x8e22x4[_0xee2b[747]];
}, getNewBottomEditorCoordinate:function(_0x8e22x6) {
  var _0x8e22x9 = this, _0x8e22x5 = _0x8e22x9[_0xee2b[4086]]()[_0xee2b[576]]();
  if (_0x8e22x5) {
    var _0x8e22x3 = _0x8e22x9[_0xee2b[2950]](), _0x8e22x4 = _0x8e22x9[_0xee2b[4021]], _0x8e22x7 = _0x8e22x4[_0xee2b[3117]](_0x8e22x3[_0xee2b[4063]]), _0x8e22x1 = Ext[_0xee2b[761]](_0x8e22x7)[_0xee2b[2611]](), _0x8e22x2 = _0x8e22x4[_0xee2b[2191]](_0x8e22x5, _0x8e22x3[_0xee2b[4063]])[0][_0xee2b[2611]]();
    if (Math[_0xee2b[1524]](_0x8e22x2[_0xee2b[754]] - _0x8e22x1[_0xee2b[754]]) < _0x8e22x6 - 1) {
      _0x8e22x9[_0xee2b[4112]](_0x8e22x7, _0x8e22x1, _0x8e22x6);
      return _0x8e22x1[_0xee2b[754]];
    } else {
      return _0x8e22x2[_0xee2b[754]];
    }
  }
}, collapseResourceRow:function() {
  var _0x8e22x6 = this;
  if (_0x8e22x6[_0xee2b[4111]]) {
    var _0x8e22x3 = _0x8e22x6[_0xee2b[2950]]();
    Ext[_0xee2b[761]](_0x8e22x6[_0xee2b[4021]][_0xee2b[3117]](_0x8e22x3[_0xee2b[4063]]))[_0xee2b[863]](_0x8e22x6.__oldHeight);
    Ext[_0xee2b[761]](_0x8e22x6[_0xee2b[4022]][_0xee2b[3117]](_0x8e22x3[_0xee2b[4063]]))[_0xee2b[863]](_0x8e22x6.__oldHeight);
    delete _0x8e22x6[_0xee2b[4111]];
  }
}, beginEditBelow:function() {
  var _0x8e22x4 = this;
  if (!_0x8e22x4[_0xee2b[726]]) {
    return;
  }
  delete _0x8e22x4[_0xee2b[2470]][_0xee2b[2329]];
  _0x8e22x4[_0xee2b[46]]();
  var _0x8e22x3 = _0x8e22x4[_0xee2b[810]][_0xee2b[2832]]();
  var _0x8e22x6 = _0x8e22x4[_0xee2b[4113]](_0x8e22x3);
  _0x8e22x4[_0xee2b[4095]]({left:_0x8e22x4[_0xee2b[810]][_0xee2b[755]]() * _0x8e22x4[_0xee2b[2950]]()[_0xee2b[4050]], y:_0x8e22x6, width:_0x8e22x4[_0xee2b[810]][_0xee2b[755]](), height:_0x8e22x3});
}, beginEdit:function(_0x8e22x6) {
  var _0x8e22x2 = this;
  if (!_0x8e22x2[_0xee2b[726]] || _0x8e22x6 && _0x8e22x6[_0xee2b[4084]] === -1) {
    return false;
  }
  if (_0x8e22x2[_0xee2b[180]](_0xee2b[4114], _0x8e22x2, _0x8e22x6 ? [_0x8e22x2[_0xee2b[4092]](_0x8e22x6)] : _0x8e22x2[_0xee2b[3314]]()) === false) {
    return false;
  }
  if (_0x8e22x6) {
    _0x8e22x2[_0xee2b[4060]](_0x8e22x6);
  }
  _0x8e22x2[_0xee2b[3029]] = true;
  _0x8e22x2[_0xee2b[2662]][_0xee2b[1138]] = _0x8e22x2[_0xee2b[2950]]()[_0xee2b[1138]];
  _0x8e22x2[_0xee2b[2662]][_0xee2b[2448]] = Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[1190]](_0x8e22x2[_0xee2b[810]][_0xee2b[877]]()[_0xee2b[1734]]);
  _0x8e22x2[_0xee2b[726]][_0xee2b[760]](_0xee2b[4115])[_0xee2b[256]]();
  _0x8e22x2[_0xee2b[726]][_0xee2b[264]](_0x8e22x2[_0xee2b[4116]]);
  var _0x8e22x5 = _0x8e22x2[_0xee2b[2174]](), _0x8e22x1 = _0x8e22x2[_0xee2b[4117]]();
  if (_0x8e22x5) {
    var _0x8e22x4 = Ext[_0xee2b[703]];
    var _0x8e22x7 = Ext[_0xee2b[307]](_0x8e22x2[_0xee2b[2662]][_0xee2b[879]]) ? _0x8e22x2[_0xee2b[2662]][_0xee2b[879]][0] : _0x8e22x2[_0xee2b[2662]][_0xee2b[879]];
    var _0x8e22x3 = _0x8e22x4[_0xee2b[880]](_0x8e22x5[_0xee2b[712]](), _0x8e22x7);
    var _0x8e22x9 = _0x8e22x4[_0xee2b[880]](_0x8e22x5[_0xee2b[713]](), _0x8e22x7);
    _0x8e22x2[_0xee2b[2662]][_0xee2b[933]] = _0x8e22x5;
    _0x8e22x2[_0xee2b[2662]][_0xee2b[2462]]([_0x8e22x3, _0x8e22x9][_0xee2b[73]](_0x8e22x2[_0xee2b[2662]][_0xee2b[2447]]));
    _0x8e22x2[_0xee2b[2662]][_0xee2b[4118]] = _0x8e22x2[_0xee2b[4021]][_0xee2b[2191]](_0x8e22x5, _0x8e22x1)[0];
    Ext[_0xee2b[761]](_0x8e22x2[_0xee2b[2662]][_0xee2b[4118]])[_0xee2b[256]]();
  }
  _0x8e22x2[_0xee2b[2662]][_0xee2b[2019]]();
  _0x8e22x2[_0xee2b[2662]][_0xee2b[839]](_0x8e22x2[_0xee2b[2662]][_0xee2b[4119]]());
  _0x8e22x2[_0xee2b[2662]][_0xee2b[3210]]();
  _0x8e22x2[_0xee2b[180]](_0xee2b[4120], _0x8e22x2, _0x8e22x2[_0xee2b[3314]]());
  return _0x8e22x2[_0xee2b[3029]];
}, cancelEdit:function() {
  var _0x8e22x6 = this;
  if (_0x8e22x6[_0xee2b[2662]] && _0x8e22x6[_0xee2b[2662]][_0xee2b[4121]]) {
    var _0x8e22x4 = _0x8e22x6[_0xee2b[2662]][_0xee2b[4121]]();
    var _0x8e22x3 = _0x8e22x6[_0xee2b[3314]]();
    if (_0x8e22x6[_0xee2b[180]](_0xee2b[4122], _0x8e22x6, _0x8e22x4, _0x8e22x3) === false) {
      return;
    }
    _0x8e22x6[_0xee2b[4123]]();
    _0x8e22x6[_0xee2b[180]](_0xee2b[4124], _0x8e22x6, _0x8e22x4, _0x8e22x3);
  }
}, completeEdit:function() {
  var _0x8e22xa = this, _0x8e22x5 = false;
  if (!_0x8e22xa[_0xee2b[3029]] || !_0x8e22xa[_0xee2b[726]]) {
    return;
  }
  var _0x8e22x9 = _0x8e22xa[_0xee2b[2662]], _0x8e22xd = _0x8e22xa[_0xee2b[2662]][_0xee2b[4121]](), _0x8e22x10 = _0x8e22xa[_0xee2b[3314]]();
  if (_0x8e22xa[_0xee2b[180]](_0xee2b[4125], _0x8e22xa, _0x8e22xd, _0x8e22x10) === false) {
    return;
  }
  if (_0x8e22xd && _0x8e22x9[_0xee2b[348]]()) {
    var _0x8e22x8 = _0x8e22xa[_0xee2b[4021]], _0x8e22x2 = _0x8e22x9[_0xee2b[933]], _0x8e22x3 = _0x8e22x9[_0xee2b[1206]](_0x8e22xd), _0x8e22x6 = _0x8e22x3[0], _0x8e22x1 = _0x8e22x3[1];
    if (_0x8e22x2) {
      _0x8e22x2[_0xee2b[1208]](_0x8e22x6, _0x8e22x1);
      delete _0x8e22x9[_0xee2b[933]];
    } else {
      var _0x8e22x4 = _0x8e22xa[_0xee2b[2470]][_0xee2b[4063]], _0x8e22x7 = Ext[_0xee2b[831]](_0x8e22x8[_0xee2b[696]]()[_0xee2b[137]](), {StartDate:_0x8e22x6, EndDate:_0x8e22x1, ResourceId:_0x8e22x4[_0xee2b[32]]()});
      _0x8e22x8[_0xee2b[3277]](_0x8e22x7, [_0x8e22x4]);
      _0x8e22x8[_0xee2b[696]]()[_0xee2b[255]](_0x8e22x7);
    }
    _0x8e22x5 = true;
  }
  _0x8e22xa[_0xee2b[4123]]();
  _0x8e22xa[_0xee2b[180]](_0xee2b[4126], _0x8e22xa, _0x8e22xd, _0x8e22x10);
  return _0x8e22x5;
}, stopEditing:function() {
  var _0x8e22x4 = this, _0x8e22x3 = _0x8e22x4[_0xee2b[2662]];
  if (_0x8e22x3[_0xee2b[4118]]) {
    Ext[_0xee2b[761]](_0x8e22x3[_0xee2b[4118]])[_0xee2b[2019]]();
    delete _0x8e22x3[_0xee2b[4118]];
  }
  _0x8e22x4[_0xee2b[4127]]();
  _0x8e22x3[_0xee2b[2462]](_0xee2b[27]);
  _0x8e22x4[_0xee2b[3029]] = false;
  _0x8e22x4[_0xee2b[3953]]();
  _0x8e22x4[_0xee2b[726]][_0xee2b[760]](_0xee2b[4115])[_0xee2b[2019]]();
  _0x8e22x4[_0xee2b[726]][_0xee2b[267]](_0x8e22x4[_0xee2b[4116]]);
  _0x8e22x3[_0xee2b[256]]();
  var _0x8e22x6 = _0x8e22x4[_0xee2b[4022]][_0xee2b[4096]](_0x8e22x4[_0xee2b[2950]]()[_0xee2b[4063]]);
  _0x8e22x6 && Ext[_0xee2b[761]](_0x8e22x6)[_0xee2b[861]](_0x8e22x4[_0xee2b[4022]][_0xee2b[4005]]())[_0xee2b[3210]]();
}, onBeforeSelect:function(_0x8e22x6) {
  var _0x8e22x3 = this;
  _0x8e22x6 && _0x8e22x6[_0xee2b[2979]] && _0x8e22x6[_0xee2b[2979]]() && _0x8e22x3[_0xee2b[3953]]();
  _0x8e22x3[_0xee2b[4057]]();
}, onAfterSelect:function(_0x8e22x4) {
  var _0x8e22x3 = this, _0x8e22x6 = _0x8e22x3[_0xee2b[2950]]()[_0xee2b[4063]];
  _0x8e22x3[_0xee2b[4022]][_0xee2b[3583]]()[_0xee2b[760]](_0x8e22x6);
  Ext[_0xee2b[761]](_0x8e22x3[_0xee2b[4022]][_0xee2b[4096]](_0x8e22x6))[_0xee2b[861]](_0x8e22x3[_0xee2b[4022]][_0xee2b[4005]]())[_0xee2b[3210]]();
  _0x8e22x3[_0xee2b[2662]][_0xee2b[2462]](_0xee2b[27]);
  _0x8e22x3[_0xee2b[726]][_0xee2b[2965]](_0x8e22x3[_0xee2b[4021]][_0xee2b[787]]());
}, bindResourceStore:function(_0x8e22x6, _0x8e22x3) {
  if (_0x8e22x6) {
    var _0x8e22x4 = this;
    _0x8e22x4[_0x8e22x3 ? _0xee2b[325] : _0xee2b[252]](_0x8e22x6, {add:_0x8e22x4[_0xee2b[2313]], remove:_0x8e22x4[_0xee2b[1080]], clear:_0x8e22x4[_0xee2b[4037]], scope:_0x8e22x4});
  }
}, bindEventStore:function(_0x8e22x6, _0x8e22x3) {
  if (_0x8e22x6) {
    var _0x8e22x4 = this;
    _0x8e22x4[_0x8e22x3 ? _0xee2b[325] : _0xee2b[252]](_0x8e22x6, {load:_0x8e22x4[_0xee2b[4037]], scope:_0x8e22x4});
  }
}});
Ext[_0xee2b[6]](_0xee2b[4128], {extend:_0xee2b[1948], alias:_0xee2b[4129], mixins:[_0xee2b[782]], requires:[_0xee2b[1910]], lockableScope:_0xee2b[686], schedulerView:null, eventData:null, sm:null, proxy:null, bodyRegion:null, constructor:function(_0x8e22x3) {
  _0x8e22x3 = _0x8e22x3 || {};
  Ext[_0xee2b[330]](_0x8e22x3, {onBeforeStart:this[_0xee2b[4130]], onStart:this[_0xee2b[4131]], onDrag:this[_0xee2b[1982]], onEnd:this[_0xee2b[4132]]});
  this[_0xee2b[9]](arguments);
}, bindListenersOnDragStart:function() {
  if (Ext[_0xee2b[2009]]()[_0xee2b[966]](_0xee2b[2836])) {
    var _0x8e22x3 = this[_0xee2b[800]]()[_0xee2b[1941]]()[_0xee2b[1940]]();
    _0x8e22x3 && _0x8e22x3[_0xee2b[149]](_0xee2b[1978], this[_0xee2b[799]], this);
  }
  this[_0xee2b[9]](arguments);
}, unbindListenersOnDragEnd:function() {
  if (Ext[_0xee2b[2009]]()[_0xee2b[966]](_0xee2b[2836])) {
    var _0x8e22x3 = this[_0xee2b[800]]()[_0xee2b[1941]]()[_0xee2b[1940]]();
    _0x8e22x3 && _0x8e22x3[_0xee2b[152]](_0xee2b[1978], this[_0xee2b[799]], this);
  }
  this[_0xee2b[9]](arguments);
}, init:function(_0x8e22x6) {
  this[_0xee2b[4133]](_0x8e22x6);
  var _0x8e22x3 = this[_0xee2b[1817]] = _0x8e22x6[_0xee2b[808]]();
  _0x8e22x3[_0xee2b[149]]({afterrender:this[_0xee2b[4134]], scope:this});
}, onBeforeStart:function(_0x8e22x3) {
  return !_0x8e22x3[_0xee2b[2033]](_0xee2b[2225]) && _0x8e22x3[_0xee2b[2794]];
}, onStart:function(_0x8e22x4) {
  var _0x8e22x1 = this[_0xee2b[1817]];
  this[_0xee2b[379]][_0xee2b[2019]]();
  this[_0xee2b[4135]] = _0x8e22x1[_0xee2b[2058]]();
  var _0x8e22x6 = _0x8e22x1[_0xee2b[1922]]();
  var _0x8e22x5 = _0x8e22x1[_0xee2b[1920]]();
  var _0x8e22x3 = [];
  _0x8e22x1[_0xee2b[4136]]()[_0xee2b[25]](function(_0x8e22x2) {
    var _0x8e22x9 = _0x8e22x2[_0xee2b[1945]]();
    _0x8e22x9[_0xee2b[2186]](_0x8e22x6, _0x8e22x5, _0x8e22x6, _0x8e22x5);
    _0x8e22x3[_0x8e22x3[_0xee2b[4]]] = {region:_0x8e22x9, node:_0x8e22x2[_0xee2b[758]]};
  });
  this[_0xee2b[4137]] = _0x8e22x3;
  this[_0xee2b[4138]][_0xee2b[3307]]();
  Sch[_0xee2b[49]][_0xee2b[2074]][_0xee2b[2073]](_0x8e22x1);
  this[_0xee2b[252]](_0x8e22x1[_0xee2b[1941]](), _0xee2b[1978], this[_0xee2b[4139]], this);
}, onDrag:function() {
  var _0x8e22x3 = this[_0xee2b[1945]]()[_0xee2b[3068]](this[_0xee2b[4135]]);
  this[_0xee2b[379]][_0xee2b[2068]](_0x8e22x3);
  this[_0xee2b[4139]]();
}, getCurrentScroll:function() {
  return this[_0xee2b[1817]][_0xee2b[1966]]();
}, updateSelection:function() {
  var _0x8e22x3 = this[_0xee2b[4138]], _0x8e22x7 = this[_0xee2b[4137]], _0x8e22x9 = this[_0xee2b[1945]]()[_0xee2b[3068]](this[_0xee2b[4135]]), _0x8e22x6, _0x8e22x1, _0x8e22x5, _0x8e22x2;
  var _0x8e22x8 = this[_0xee2b[1817]][_0xee2b[1922]]();
  var _0x8e22x4 = this[_0xee2b[1817]][_0xee2b[1920]]();
  _0x8e22x9[_0xee2b[2186]](_0x8e22x8, _0x8e22x4, _0x8e22x8, _0x8e22x4);
  for (_0x8e22x6 = 0, _0x8e22x5 = _0x8e22x7[_0xee2b[4]]; _0x8e22x6 < _0x8e22x5; _0x8e22x6++) {
    _0x8e22x1 = _0x8e22x7[_0x8e22x6];
    _0x8e22x2 = _0x8e22x9[_0xee2b[3059]](_0x8e22x1[_0xee2b[4140]]);
    if (_0x8e22x2 && !_0x8e22x1[_0xee2b[3014]]) {
      _0x8e22x1[_0xee2b[3014]] = true;
      _0x8e22x3[_0xee2b[2931]](_0x8e22x1[_0xee2b[2604]], true);
    } else {
      if (!_0x8e22x2 && _0x8e22x1[_0xee2b[3014]]) {
        _0x8e22x1[_0xee2b[3014]] = false;
        _0x8e22x3[_0xee2b[4141]](_0x8e22x1[_0xee2b[2604]]);
      }
    }
  }
}, onEnd:function(_0x8e22x3) {
  if (this[_0xee2b[379]]) {
    this[_0xee2b[379]][_0xee2b[4142]](false);
  }
  this[_0xee2b[325]](this[_0xee2b[1817]][_0xee2b[1941]](), _0xee2b[1978], this[_0xee2b[4139]], this);
  Sch[_0xee2b[49]][_0xee2b[2074]][_0xee2b[2084]]();
}, onSchedulingViewRender:function(_0x8e22x3) {
  this[_0xee2b[4138]] = _0x8e22x3[_0xee2b[2256]]();
  this[_0xee2b[4143]](this[_0xee2b[1817]][_0xee2b[265]]);
  this[_0xee2b[379]] = _0x8e22x3[_0xee2b[265]][_0xee2b[825]]({cls:_0xee2b[4144]});
}, destroy:function() {
  if (this[_0xee2b[379]]) {
    Ext[_0xee2b[218]](this[_0xee2b[379]]);
  }
  this[_0xee2b[9]](arguments);
}});
Ext[_0xee2b[6]](_0xee2b[4145], {extend:_0xee2b[17], mixinConfig:{before:{showRecord:_0xee2b[4146], hide:_0xee2b[4147]}, after:{showRecord:_0xee2b[4148]}}, hideOnBlur:true, saveAndCloseOnEnter:true, triggerEvent:_0xee2b[3342], record:null, dragProxyEl:null, ignoreCls:_0xee2b[4149], ignoreCheckMaxDepth:30, lockableScope:_0xee2b[4150], width:400, initEditor:function() {
  var _0x8e22x5 = this;
  var _0x8e22x4 = _0x8e22x5[_0xee2b[800]]();
  var _0x8e22x6 = _0x8e22x5[_0xee2b[3275]]();
  _0x8e22x6[_0xee2b[4151]] = _0x8e22x5[_0xee2b[4152]];
  _0x8e22x6[_0xee2b[3260]] = _0x8e22x4[_0xee2b[3260]] === undefined ? true : _0x8e22x4[_0xee2b[3260]];
  var _0x8e22x3 = _0x8e22x6[_0xee2b[1565]] && _0x8e22x6[_0xee2b[1565]]();
  _0x8e22x6[_0xee2b[4153]] && _0x8e22x6[_0xee2b[4153]](_0x8e22x3 !== false && _0x8e22x4[_0xee2b[3354]] !== false);
  _0x8e22x5[_0xee2b[1407]](_0x8e22x4[_0xee2b[696]]());
  _0x8e22x5[_0xee2b[1408]](_0x8e22x4[_0xee2b[1007]]());
  if (_0x8e22x4[_0xee2b[262]]) {
    _0x8e22x5[_0xee2b[4154]]();
  } else {
    _0x8e22x5[_0xee2b[252]](_0x8e22x4, _0xee2b[3088], _0x8e22x5[_0xee2b[4154]], _0x8e22x5);
  }
  _0x8e22x5[_0xee2b[252]](_0x8e22x4, {dragcreateend:_0x8e22x5[_0xee2b[3284]], eventstorechange:_0x8e22x5[_0xee2b[4155]], resourcestorechange:_0x8e22x5[_0xee2b[4156]], scope:_0x8e22x5});
  _0x8e22x5[_0xee2b[252]](_0x8e22x6, {aftereventadd:_0x8e22x5[_0xee2b[4157]], aftereventsave:_0x8e22x5[_0xee2b[4158]], aftereventdelete:_0x8e22x5[_0xee2b[4159]], scope:_0x8e22x5});
  _0x8e22x5[_0xee2b[149]](_0xee2b[256], _0x8e22x5[_0xee2b[4160]], _0x8e22x5);
  if (_0x8e22x5[_0xee2b[2219]]) {
    _0x8e22x5[_0xee2b[252]](_0x8e22x4, _0x8e22x5[_0xee2b[2219]], _0x8e22x5[_0xee2b[4161]], _0x8e22x5);
  }
}, beforeShowRecord:function(_0x8e22x3, _0x8e22x6) {
  var _0x8e22x4 = this;
  _0x8e22x4[_0xee2b[4162]]();
  _0x8e22x4[_0xee2b[2019]]();
}, addRepaintListener:function() {
  var _0x8e22x6 = this;
  var _0x8e22x3 = _0x8e22x6[_0xee2b[800]]();
  if (_0x8e22x3[_0xee2b[4163]] || _0x8e22x3[_0xee2b[4164]]) {
    _0x8e22x6[_0xee2b[4165]] = _0x8e22x6[_0xee2b[252]](_0x8e22x3[_0xee2b[808]](), _0xee2b[2605], _0x8e22x6[_0xee2b[4166]], _0x8e22x6, {destroyable:true});
  }
}, afterShowRecord:function(_0x8e22x3, _0x8e22x6) {
  var _0x8e22x2 = this;
  var _0x8e22x5 = _0x8e22x2[_0xee2b[800]]();
  var _0x8e22x1 = _0x8e22x5 && _0x8e22x5[_0xee2b[2184]] && _0x8e22x5[_0xee2b[2184]]();
  var _0x8e22x4 = _0x8e22x2[_0xee2b[3275]]();
  _0x8e22x2[_0xee2b[4167]](_0x8e22x3);
  _0x8e22x2[_0xee2b[4169]](Ext[_0xee2b[135]](_0x8e22x6) && _0x8e22x6[_0xee2b[4168]]);
  _0x8e22x4[_0xee2b[4170]](_0x8e22x3, _0x8e22x1);
}, beforeEditorHide:function(_0x8e22x3, _0x8e22x6) {
  var _0x8e22x4 = this;
  _0x8e22x4[_0xee2b[4165]] && _0x8e22x4[_0xee2b[4165]][_0xee2b[218]]();
}, setEventStore:function(_0x8e22x3) {
  var _0x8e22x4 = this;
  var _0x8e22x6 = _0x8e22x4[_0xee2b[3275]]();
  _0x8e22x6[_0xee2b[1407]](_0x8e22x3);
}, setResourceStore:function(_0x8e22x3) {
  var _0x8e22x4 = this;
  var _0x8e22x6 = _0x8e22x4[_0xee2b[3275]]();
  _0x8e22x6[_0xee2b[1408]](_0x8e22x3);
}, getEventEditor:function() {
  return this[_0xee2b[4171]] ? this : this[_0xee2b[2662]];
}, onAfterEventAdd:function(_0x8e22x6, _0x8e22x3) {
  if (_0x8e22x6[_0xee2b[4172]] && _0x8e22x3[_0xee2b[1427]]()[_0xee2b[4]] < 2) {
    this[_0xee2b[4173]](_0x8e22x3);
  }
}, onAfterEventSave:function(_0x8e22x6, _0x8e22x3) {
  this[_0xee2b[4174]]();
}, scrollEventIntoView:function(_0x8e22x3) {
  this[_0xee2b[800]]()[_0xee2b[808]]()[_0xee2b[4173]](_0x8e22x3);
}, onCmpEventStoreChange:function(_0x8e22x6, _0x8e22x3) {
  this[_0xee2b[1407]](_0x8e22x3);
}, onCmpResourceStoreChange:function(_0x8e22x6, _0x8e22x3) {
  this[_0xee2b[1408]](_0x8e22x3);
}, onAfterEventDelete:function() {
  this[_0xee2b[4174]]();
}, onCmpAfterRender:function() {
  var _0x8e22x3 = this;
  if (!_0x8e22x3[_0xee2b[4175]]) {
    _0x8e22x3[_0xee2b[748]](document[_0xee2b[2179]]);
  }
  if (_0x8e22x3[_0xee2b[4176]]) {
    _0x8e22x3[_0xee2b[252]](Ext[_0xee2b[2222]](), _0xee2b[784], _0x8e22x3[_0xee2b[4177]], _0x8e22x3);
  }
  _0x8e22x3[_0xee2b[4178]]();
}, registerEditorInComponent:function() {
  var _0x8e22x6 = this;
  var _0x8e22x3 = _0x8e22x6[_0xee2b[800]]();
  _0x8e22x3[_0xee2b[808]]()[_0xee2b[2552]](_0x8e22x6);
}, onDragCreateEnd:function(_0x8e22x10, _0x8e22x8, _0x8e22x7, _0x8e22x9, _0x8e22x4) {
  var _0x8e22xa = this;
  var _0x8e22xd = _0x8e22xa[_0xee2b[800]]();
  var _0x8e22x5 = _0x8e22xa[_0xee2b[3275]]();
  var _0x8e22x6 = [];
  if (_0x8e22x7 && _0x8e22x7[_0xee2b[1606]]) {
    _0x8e22x5[_0xee2b[2055]] = _0x8e22x7;
    _0x8e22x6 = [_0x8e22x7];
  }
  if (_0x8e22xd[_0xee2b[3277]]) {
    _0x8e22xd[_0xee2b[3277]](_0x8e22x8, _0x8e22x6);
  }
  var _0x8e22x1 = _0x8e22x4 || _0x8e22x9[_0xee2b[2033]] && _0x8e22x9[_0xee2b[2033]]() || _0x8e22x9[_0xee2b[969]] || null;
  _0x8e22xa[_0xee2b[3278]](_0x8e22x8, {alignToEl:_0x8e22x1});
  if (_0x8e22x4) {
    var _0x8e22x3 = _0x8e22x4[_0xee2b[758]][_0xee2b[2263]](true);
    _0x8e22x3[_0xee2b[388]] = _0xee2b[27];
    _0x8e22x4[_0xee2b[758]][_0xee2b[96]][_0xee2b[83]](_0x8e22x3);
    _0x8e22xa[_0xee2b[4179]] = Ext[_0xee2b[55]](_0x8e22x3);
  }
}, addIgnoreCls:function() {
  var _0x8e22x4 = this, _0x8e22x6 = _0x8e22x4[_0xee2b[3275]](), _0x8e22x3 = _0x8e22x6[_0xee2b[4180]]();
  Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x3, function(_0x8e22x5) {
    _0x8e22x5[_0xee2b[264]](_0x8e22x4[_0xee2b[4181]]);
  });
}, mouseDownAction:function(_0x8e22x3) {
  if (this[_0xee2b[854]]() && !this[_0xee2b[4182]](_0x8e22x3)) {
    this[_0xee2b[4174]]();
  }
}, isEventWithinComponent:function(_0x8e22x3) {
  return _0x8e22x3[_0xee2b[3021]](this[_0xee2b[787]]()) || !!_0x8e22x3[_0xee2b[2033]](_0xee2b[495] + this[_0xee2b[4181]], this[_0xee2b[4183]]) || !!_0x8e22x3[_0xee2b[2033]](_0xee2b[495] + Ext[_0xee2b[238]] + _0xee2b[4184], 1);
}, onActivateEditor:function(_0x8e22x5, _0x8e22x6, _0x8e22x7) {
  var _0x8e22x4 = this;
  var _0x8e22x3 = _0x8e22x4[_0xee2b[4185]]();
  var _0x8e22x1 = _0x8e22x7[_0xee2b[2033]](_0x8e22x3);
  this[_0xee2b[3278]](_0x8e22x6, {alignToEl:_0x8e22x1});
}, getSelectorToAlignEditorBy:function() {
  var _0x8e22x4 = this;
  var _0x8e22x6 = _0x8e22x4[_0xee2b[800]]();
  var _0x8e22x3 = _0x8e22x6[_0xee2b[808]] && _0x8e22x6[_0xee2b[808]]() && _0x8e22x6[_0xee2b[808]]()[_0xee2b[2620]];
  return _0x8e22x3 ? _0xee2b[495] + _0x8e22x3 : null;
}, hideDragProxy:function() {
  var _0x8e22x3 = this[_0xee2b[4179]];
  if (_0x8e22x3 && _0x8e22x3[_0xee2b[758]][_0xee2b[96]]) {
    _0x8e22x3[_0xee2b[758]][_0xee2b[96]][_0xee2b[78]](_0x8e22x3[_0xee2b[758]]);
    delete this[_0xee2b[4179]];
  }
}, hideEditor:function() {
  this[_0xee2b[256]]();
}, setRecord:function(_0x8e22x3) {
  this[_0xee2b[933]] = _0x8e22x3;
}, getRecord:function() {
  return this[_0xee2b[933]];
}});
Ext[_0xee2b[6]](_0xee2b[4186], {extend:_0xee2b[17], isCustomizableRecordForm:true, customizableFieldNames:null, mixinConfig:{id:_0xee2b[4187], before:{loadRecord:_0xee2b[4188], updateRecord:_0xee2b[4189]}, after:{updateRecord:_0xee2b[4190]}}, updateAllFields:false, renameCustomizableFieldNamesOnce:true, customizableFieldNamesRenamed:0, autogeneratedFieldsToRemove:null, setupCustomizableRecordForm:function(_0x8e22x2, _0x8e22x3) {
  var _0x8e22x5 = this;
  _0x8e22x5[_0xee2b[4191]] = {};
  if (_0x8e22x3) {
    var _0x8e22x4 = _0x8e22x3[_0xee2b[139]];
    for (var _0x8e22x6 in _0x8e22x4) {
      if (_0x8e22x6[_0xee2b[2249]](/Field$/) && typeof _0x8e22x4[_0x8e22x6] == _0xee2b[308]) {
        _0x8e22x5[_0xee2b[4191]][_0x8e22x6] = _0x8e22x4[_0x8e22x6];
      }
    }
  }
}, extractCustomizableFieldNames:function(_0x8e22x4) {
  var _0x8e22x3;
  if (_0x8e22x4) {
    _0x8e22x3 = {};
    for (var _0x8e22x6 in this[_0xee2b[4191]]) {
      _0x8e22x3[_0x8e22x6] = _0x8e22x4[_0x8e22x6];
    }
  }
  return _0x8e22x3;
}, beforeCustomizableRecordLoad:function(_0x8e22x3) {
  if (!this[_0xee2b[4192]] || !this[_0xee2b[4193]]) {
    this[_0xee2b[4194]](_0x8e22x3);
  }
}, renameCustomizableFieldNames:function(_0x8e22x5) {
  var _0x8e22x3 = this[_0xee2b[4195]](_0x8e22x5);
  if (_0x8e22x3) {
    this[_0xee2b[4193]]++;
    var _0x8e22x4 = this[_0xee2b[4196]](), _0x8e22x1 = false, _0x8e22x2;
    for (var _0x8e22x6 in this[_0xee2b[4191]]) {
      _0x8e22x2 = _0x8e22x4[_0xee2b[4197]](this[_0xee2b[4191]][_0x8e22x6]);
      if (_0x8e22x2 && _0x8e22x3[_0x8e22x6] && _0x8e22x3[_0x8e22x6] != _0x8e22x2[_0xee2b[683]]) {
        _0x8e22x1 = true;
        _0x8e22x2[_0xee2b[683]] = _0x8e22x3[_0x8e22x6];
      }
    }
    if (_0x8e22x1) {
      this[_0xee2b[4191]] = _0x8e22x3;
    }
  }
}, buildMissingCustomizableRecordField:function(_0x8e22x6, _0x8e22x3) {
  return Ext[_0xee2b[831]](Ext[_0xee2b[8]]({xtype:_0xee2b[4198], name:_0x8e22x6}, _0x8e22x3));
}, addMissingCustomizableRecordFields:function() {
  var _0x8e22x5 = this, _0x8e22x3 = _0x8e22x5[_0xee2b[4196]]()[_0xee2b[4199]](), _0x8e22x2 = Ext[_0xee2b[154]][_0xee2b[1556]](_0x8e22x5[_0xee2b[4191]]), _0x8e22x4 = [];
  for (var _0x8e22x6 = 0; _0x8e22x6 < _0x8e22x2[_0xee2b[4]]; _0x8e22x6++) {
    var _0x8e22x1 = _0x8e22x2[_0x8e22x6];
    if (!_0x8e22x3[_0xee2b[53]](_0x8e22x1)) {
      _0x8e22x4[_0xee2b[11]](_0x8e22x5[_0xee2b[255]](_0x8e22x5[_0xee2b[4200]](_0x8e22x1)));
    }
  }
  return _0x8e22x4;
}, beforeCustomizableRecordUpdate:function() {
  var _0x8e22x3 = this;
  if (_0x8e22x3[_0xee2b[4201]]) {
    _0x8e22x3[_0xee2b[4202]] = _0x8e22x3[_0xee2b[4203]]();
  }
}, afterCustomizableRecordUpdate:function() {
  var _0x8e22x4 = this;
  if (_0x8e22x4[_0xee2b[4202]]) {
    var _0x8e22x6 = _0x8e22x4[_0xee2b[4202]];
    for (var _0x8e22x3 = 0; _0x8e22x3 < _0x8e22x6[_0xee2b[4]]; _0x8e22x3++) {
      _0x8e22x4[_0xee2b[63]](_0x8e22x6[_0x8e22x3]);
    }
  }
}});
Ext[_0xee2b[6]](_0xee2b[4204], {extend:_0xee2b[4205], alias:_0xee2b[4206], mixins:[_0xee2b[665]], tpl:[_0xee2b[4207] + Ext[_0xee2b[238]] + _0xee2b[4208], _0xee2b[1812], _0xee2b[4209] + Ext[_0xee2b[238]] + _0xee2b[4210], _0xee2b[1816], _0xee2b[4211]], listConfig:{htmlEncode:true}, editable:false, queryMode:_0xee2b[4212], displayField:_0xee2b[3438], valueField:_0xee2b[683], initComponent:function() {
  var _0x8e22x3 = this;
  this[_0xee2b[4213]] = _0x8e22x3[_0xee2b[678]](this[_0xee2b[4213]]);
  _0x8e22x3[_0xee2b[64]] = _0x8e22x3[_0xee2b[64]] || {fields:[_0xee2b[683], _0xee2b[3438], _0xee2b[489]], data:_0x8e22x3[_0xee2b[4214]]()};
  _0x8e22x3[_0xee2b[9]](arguments);
}, buildOptions:function() {
  var _0x8e22x3 = this;
  return [[_0xee2b[1429], _0x8e22x3.L(_0xee2b[578])], [_0xee2b[1436], _0x8e22x3.L(_0xee2b[596])], [_0xee2b[1437], _0x8e22x3.L(_0xee2b[597])], [_0xee2b[1438], _0x8e22x3.L(_0xee2b[598])]];
}});
Ext[_0xee2b[6]](_0xee2b[4215], {extend:_0xee2b[4204], alias:_0xee2b[4216], allowBlank:false, emptyText:_0xee2b[4217], customValue:_0xee2b[4218], splitCls:_0xee2b[4219], listConfig:{htmlEncode:true}, buildOptions:function() {
  var _0x8e22x6 = this, _0x8e22x3 = _0x8e22x6[_0xee2b[9]](arguments);
  _0x8e22x3[_0xee2b[205]]([null, _0x8e22x6.L(_0xee2b[599])]);
  _0x8e22x3[_0xee2b[11]]([_0x8e22x6[_0xee2b[4220]], _0x8e22x6.L(_0xee2b[600]), _0x8e22x6[_0xee2b[4221]]]);
  return _0x8e22x3;
}, setRecurrence:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  if (_0x8e22x3) {
    _0x8e22x6[_0xee2b[2462]](_0x8e22x6[_0xee2b[4222]](_0x8e22x3) ? _0x8e22x6[_0xee2b[4220]] : _0x8e22x3[_0xee2b[1445]]());
  } else {
    _0x8e22x6[_0xee2b[2462]]([null]);
  }
}, isCustomRecurrence:function(_0x8e22x6) {
  var _0x8e22x4 = _0x8e22x6[_0xee2b[1461]](), _0x8e22x2 = _0x8e22x6[_0xee2b[1451]](), _0x8e22x5 = _0x8e22x6[_0xee2b[1455]](), _0x8e22x3 = _0x8e22x6[_0xee2b[1456]]();
  return Boolean(_0x8e22x4 != 1 || _0x8e22x2 && _0x8e22x2[_0xee2b[4]] || _0x8e22x5 && _0x8e22x5[_0xee2b[4]] || _0x8e22x3 && _0x8e22x3[_0xee2b[4]]);
}});
Ext[_0xee2b[6]](_0xee2b[4223], {extend:_0xee2b[4224], requires:[_0xee2b[1771]], alias:_0xee2b[4225], recurrence:null, eventStartDate:null, initComponent:function() {
  this[_0xee2b[9]](arguments);
  this[_0xee2b[2353]](this[_0xee2b[1454]]);
}, setRecurrence:function(_0x8e22x3) {
  this[_0xee2b[1454]] = _0x8e22x3;
  this[_0xee2b[4226]]();
}, setEventStartDate:function(_0x8e22x3) {
  this[_0xee2b[1518]] = _0x8e22x3;
  this[_0xee2b[4226]]();
}, refreshLegend:function() {
  var _0x8e22x6 = this, _0x8e22x3 = _0x8e22x6[_0xee2b[1454]];
  _0x8e22x6[_0xee2b[4229]](_0x8e22x3 ? Sch[_0xee2b[22]][_0xee2b[49]][_0xee2b[1454]][_0xee2b[4228]][_0xee2b[4227]](_0x8e22x3, _0x8e22x6[_0xee2b[1518]]) : _0xee2b[27]);
}});
Ext[_0xee2b[6]](_0xee2b[4230], {extend:_0xee2b[4205], requires:[_0xee2b[110], _0xee2b[4231]], mixins:[_0xee2b[665]], alias:_0xee2b[4232], tpl:[_0xee2b[4207] + Ext[_0xee2b[238]] + _0xee2b[4208], _0xee2b[1812], _0xee2b[4209] + Ext[_0xee2b[238]] + _0xee2b[4210], _0xee2b[1816], _0xee2b[4211]], splitCls:_0xee2b[4233], listConfig:{htmlEncode:true}, editable:false, queryMode:_0xee2b[4212], displayField:_0xee2b[3438], valueField:_0xee2b[683], allowBlank:false, maxPosition:5, defaultValue:_0xee2b[4234], initComponent:function() {
  var _0x8e22x3 = this;
  _0x8e22x3[_0xee2b[2302]] = _0x8e22x3[_0xee2b[2302]] || _0x8e22x3[_0xee2b[4235]];
  _0x8e22x3[_0xee2b[64]] = _0x8e22x3[_0xee2b[64]] && Ext[_0xee2b[22]][_0xee2b[132]][_0xee2b[131]](_0x8e22x3[_0xee2b[64]]) || new Ext[_0xee2b[22]].ArrayStore({fields:[_0xee2b[683], _0xee2b[3438], _0xee2b[489]], data:_0x8e22x3[_0xee2b[4238]]()[_0xee2b[318]]([[_0xee2b[4236], _0x8e22x3.L(_0xee2b[4237]), _0x8e22x3[_0xee2b[4221]]]])});
  _0x8e22x3[_0xee2b[9]](arguments);
}, buildDayNumbers:function() {
  var _0x8e22x4 = this, _0x8e22x3 = [], _0x8e22x6;
  for (_0x8e22x6 = 1; _0x8e22x6 <= _0x8e22x4[_0xee2b[1924]]; _0x8e22x6++) {
    _0x8e22x3[_0xee2b[11]]([_0x8e22x6 + _0xee2b[27], _0x8e22x4.L(_0xee2b[1780] + _0x8e22x6)]);
  }
  return _0x8e22x3;
}, setValue:function(_0x8e22x6) {
  var _0x8e22x3 = this;
  if (_0x8e22x6 && Ext[_0xee2b[307]](_0x8e22x6)) {
    _0x8e22x6 = _0x8e22x6[_0xee2b[73]](_0xee2b[72]);
  }
  if (_0x8e22x6 && this[_0xee2b[64]][_0xee2b[4239]](_0xee2b[683], _0x8e22x6) !== -1) {
    this[_0xee2b[9]]([_0x8e22x6]);
  } else {
    this[_0xee2b[9]]([this[_0xee2b[4235]]]);
  }
}, getValue:function() {
  var _0x8e22x3 = this[_0xee2b[9]](arguments);
  return _0x8e22x3 ? Ext[_0xee2b[26]][_0xee2b[41]](_0x8e22x3[_0xee2b[496]](_0xee2b[72]), function(_0x8e22x6) {
    return parseInt(_0x8e22x6, 10);
  }) : [];
}});
Ext[_0xee2b[6]](_0xee2b[4240], {extend:_0xee2b[4205], requires:[_0xee2b[110], _0xee2b[4231], _0xee2b[1141], _0xee2b[1507]], mixins:[_0xee2b[665]], alias:_0xee2b[4241], tpl:[_0xee2b[4207] + Ext[_0xee2b[238]] + _0xee2b[4208], _0xee2b[1812], _0xee2b[4209] + Ext[_0xee2b[238]] + _0xee2b[4210], _0xee2b[1816], _0xee2b[4211]], splitCls:_0xee2b[4242], listConfig:{htmlEncode:true, maxHeight:350}, editable:false, queryMode:_0xee2b[4212], displayField:_0xee2b[3438], valueField:_0xee2b[683], allowBlank:false, 
weekStartDay:1, dayNames:null, defaultValue:null, allDaysValue:_0xee2b[1772], workingDaysValue:_0xee2b[1773], nonWorkingDaysValue:_0xee2b[1774], initComponent:function() {
  var _0x8e22x3 = this;
  _0x8e22x3[_0xee2b[4235]] = _0x8e22x3[_0xee2b[4235]] || _0x8e22x3[_0xee2b[1781]];
  _0x8e22x3[_0xee2b[2302]] = _0x8e22x3[_0xee2b[2302]] || _0x8e22x3[_0xee2b[4235]];
  _0x8e22x3[_0xee2b[1776]] = _0x8e22x3[_0xee2b[1776]] || Ext[_0xee2b[703]][_0xee2b[1776]][_0xee2b[191]](_0x8e22x3[_0xee2b[1755]])[_0xee2b[318]](Ext[_0xee2b[703]][_0xee2b[1776]][_0xee2b[191]](0, _0x8e22x3[_0xee2b[1755]]));
  _0x8e22x3[_0xee2b[64]] = _0x8e22x3[_0xee2b[64]] && Ext[_0xee2b[22]][_0xee2b[132]][_0xee2b[131]](_0x8e22x3[_0xee2b[64]]) || new Ext[_0xee2b[22]].ArrayStore({fields:[_0xee2b[683], _0xee2b[3438], _0xee2b[489]], data:_0x8e22x3[_0xee2b[4214]]()});
  _0x8e22x3[_0xee2b[9]](arguments);
}, buildOptions:function() {
  var _0x8e22x3 = this;
  return _0x8e22x3[_0xee2b[4243]]()[_0xee2b[318]]([[_0x8e22x3[_0xee2b[1781]], _0x8e22x3.L(_0xee2b[524]), _0x8e22x3[_0xee2b[4221]]], [_0x8e22x3[_0xee2b[1782]], _0x8e22x3.L(_0xee2b[570])], [_0x8e22x3[_0xee2b[1783]], _0x8e22x3.L(_0xee2b[571])]]);
}, buildWeekDays:function() {
  var _0x8e22x3 = this;
  return Ext[_0xee2b[26]][_0xee2b[41]](_0x8e22x3[_0xee2b[1776]], function(_0x8e22x5, _0x8e22x6) {
    var _0x8e22x4 = (_0x8e22x6 + _0x8e22x3[_0xee2b[1755]]) % _0x8e22x3[_0xee2b[1776]][_0xee2b[4]];
    return [Sch[_0xee2b[22]][_0xee2b[49]][_0xee2b[1454]][_0xee2b[1453]][_0xee2b[1452]](_0x8e22x4), _0x8e22x5];
  });
}, setValue:function(_0x8e22x6) {
  var _0x8e22x3 = this;
  if (_0x8e22x6 && Ext[_0xee2b[307]](_0x8e22x6)) {
    _0x8e22x6 = _0x8e22x6[_0xee2b[73]](_0xee2b[72]);
  }
  if (_0x8e22x6 && this[_0xee2b[64]][_0xee2b[4239]](_0xee2b[683], _0x8e22x6) !== -1) {
    this[_0xee2b[9]]([_0x8e22x6]);
  } else {
    this[_0xee2b[9]]([this[_0xee2b[4235]]]);
  }
}, getValue:function() {
  var _0x8e22x3 = this[_0xee2b[9]](arguments);
  return _0x8e22x3 ? _0x8e22x3[_0xee2b[496]](_0xee2b[72]) : [];
}});
Ext[_0xee2b[6]](_0xee2b[4244], {extend:_0xee2b[2450], alias:_0xee2b[4245], allowBlank:false, margin:_0xee2b[4246], weekStartDay:0, initComponent:function() {
  var _0x8e22x3 = this;
  _0x8e22x3[_0xee2b[1776]] = Ext[_0xee2b[703]][_0xee2b[1776]][_0xee2b[191]](_0x8e22x3[_0xee2b[1755]])[_0xee2b[318]](Ext[_0xee2b[703]][_0xee2b[1776]][_0xee2b[191]](0, _0x8e22x3[_0xee2b[1755]]));
  _0x8e22x3[_0xee2b[266]] = _0x8e22x3[_0xee2b[4247]]();
  _0x8e22x3[_0xee2b[9]](arguments);
}, buildItems:function() {
  var _0x8e22x3 = this;
  return Ext[_0xee2b[26]][_0xee2b[41]](_0x8e22x3[_0xee2b[1776]], function(_0x8e22x5, _0x8e22x6) {
    var _0x8e22x4 = (_0x8e22x6 + _0x8e22x3[_0xee2b[1755]]) % _0x8e22x3[_0xee2b[1776]][_0xee2b[4]];
    return {text:_0x8e22x5[_0xee2b[2694]](0, 3), value:Sch[_0xee2b[22]][_0xee2b[49]][_0xee2b[1454]][_0xee2b[1453]][_0xee2b[1452]](_0x8e22x4)};
  });
}});
Ext[_0xee2b[6]](_0xee2b[4248], {extend:_0xee2b[2450], alias:_0xee2b[4249], allowBlank:false, margin:_0xee2b[4246], columns:7, initComponent:function() {
  var _0x8e22x3 = this;
  _0x8e22x3[_0xee2b[266]] = _0x8e22x3[_0xee2b[4247]]();
  _0x8e22x3[_0xee2b[9]](arguments);
}, buildItems:function() {
  var _0x8e22x3 = [], _0x8e22x6;
  for (_0x8e22x6 = 1; _0x8e22x6 <= Ext[_0xee2b[703]][_0xee2b[4250]]; _0x8e22x6++) {
    _0x8e22x3[_0xee2b[11]]({text:_0x8e22x6 + _0xee2b[27], value:_0x8e22x6});
  }
  return _0x8e22x3;
}});
Ext[_0xee2b[6]](_0xee2b[4251], {extend:_0xee2b[2450], alias:_0xee2b[4252], allowBlank:false, margin:_0xee2b[4246], columns:4, initComponent:function() {
  var _0x8e22x3 = this;
  _0x8e22x3[_0xee2b[266]] = _0x8e22x3[_0xee2b[4247]]();
  _0x8e22x3[_0xee2b[9]](arguments);
}, buildItems:function() {
  var _0x8e22x3 = this;
  return Ext[_0xee2b[26]][_0xee2b[41]](Ext[_0xee2b[703]][_0xee2b[1779]], function(_0x8e22x4, _0x8e22x6) {
    return {text:_0x8e22x4[_0xee2b[2694]](0, 3), value:_0x8e22x6 + 1};
  });
}});
Ext[_0xee2b[6]](_0xee2b[4253], {extend:_0xee2b[4205], alias:_0xee2b[4254], mixins:[_0xee2b[665]], editable:false, queryMode:_0xee2b[4212], displayField:_0xee2b[3438], valueField:_0xee2b[683], allowBlank:false, listConfig:{htmlEncode:true}, initComponent:function() {
  var _0x8e22x3 = this;
  _0x8e22x3[_0xee2b[64]] = _0x8e22x3[_0xee2b[64]] || {fields:[_0xee2b[683], _0xee2b[3438]], data:_0x8e22x3[_0xee2b[4214]]()};
  _0x8e22x3[_0xee2b[264]](_0xee2b[4255]);
  _0x8e22x3[_0xee2b[9]](arguments);
}, buildOptions:function() {
  var _0x8e22x3 = this;
  return [[null, _0x8e22x3.L(_0xee2b[593])], [_0xee2b[1520], _0x8e22x3.L(_0xee2b[594])], [_0xee2b[1097], _0x8e22x3.L(_0xee2b[595])]];
}, setRecurrence:function(_0x8e22x3) {
  var _0x8e22x6 = null;
  if (_0x8e22x3[_0xee2b[713]]()) {
    _0x8e22x6 = _0xee2b[1097];
  } else {
    if (_0x8e22x3[_0xee2b[1466]]()) {
      _0x8e22x6 = _0xee2b[1520];
    }
  }
  this[_0xee2b[2462]]([_0x8e22x6]);
}});
Ext[_0xee2b[6]](_0xee2b[4256], {extend:_0xee2b[4257], requires:[_0xee2b[4258], _0xee2b[4259], _0xee2b[4260], _0xee2b[4261], _0xee2b[4262], _0xee2b[1428], _0xee2b[4204], _0xee2b[4230], _0xee2b[4240], _0xee2b[4244], _0xee2b[4248], _0xee2b[4251], _0xee2b[4253]], mixins:[_0xee2b[4186], _0xee2b[665]], alias:_0xee2b[4263], layout:{type:_0xee2b[4264], align:_0xee2b[4265]}, trackResetOnLoad:true, updateAllFields:true, weekStartDay:1, dateFormat:_0xee2b[2691], radioFieldName:_0xee2b[4266], checkboxFieldName:_0xee2b[4267], 
recurrenceModel:null, frequencyField:null, intervalField:null, intervalUnit:null, daysButtonField:null, monthdaysButtonField:null, monthDaysRadioField:null, monthsButtonField:null, positionAndDayRadioField:null, positionAndDayCheckboxField:null, stopRecurrenceField:null, countField:null, countUnit:null, endDateField:null, positionsCombo:null, daysCombo:null, intervalContainer:null, positionDayContainer:null, countFieldContainer:null, initComponent:function() {
  var _0x8e22x3 = this;
  _0x8e22x3[_0xee2b[1583]] = _0x8e22x3[_0xee2b[1583]] || Sch[_0xee2b[327]][_0xee2b[4268]];
  _0x8e22x3[_0xee2b[4269]](_0x8e22x3, _0x8e22x3[_0xee2b[1583]]);
  _0x8e22x3[_0xee2b[266]] = _0x8e22x3[_0xee2b[4247]]();
  _0x8e22x3[_0xee2b[9]](arguments);
}, buildItems:function() {
  var _0x8e22x3 = this;
  if (!_0x8e22x3[_0xee2b[4270]] || !_0x8e22x3[_0xee2b[4270]][_0xee2b[3355]]) {
    _0x8e22x3[_0xee2b[4270]] = Ext[_0xee2b[831]](Ext[_0xee2b[8]]({xtype:_0xee2b[4271], name:_0x8e22x3[_0xee2b[4191]][_0xee2b[4270]], fieldLabel:_0x8e22x3.L(_0xee2b[560])}, _0x8e22x3[_0xee2b[4270]]));
    _0x8e22x3[_0xee2b[252]](_0x8e22x3[_0xee2b[4270]], _0xee2b[2459], _0x8e22x3[_0xee2b[4272]], _0x8e22x3);
  }
  if (!_0x8e22x3[_0xee2b[4273]] || !_0x8e22x3[_0xee2b[4273]][_0xee2b[3355]]) {
    _0x8e22x3[_0xee2b[4273]] = Ext[_0xee2b[831]](Ext[_0xee2b[8]]({xtype:_0xee2b[4274], name:_0x8e22x3[_0xee2b[4191]][_0xee2b[4273]], minValue:1, width:85, margin:_0xee2b[4275], allowBlank:false}, _0x8e22x3[_0xee2b[4273]]));
  }
  if (!_0x8e22x3[_0xee2b[4276]] || !_0x8e22x3[_0xee2b[4276]][_0xee2b[3355]]) {
    _0x8e22x3[_0xee2b[4276]] = Ext[_0xee2b[831]](Ext[_0xee2b[8]]({xtype:_0xee2b[4277], submitValue:false}, _0x8e22x3[_0xee2b[4276]]));
  }
  if (!_0x8e22x3[_0xee2b[4278]] || !_0x8e22x3[_0xee2b[4278]][_0xee2b[3355]]) {
    _0x8e22x3[_0xee2b[4278]] = Ext[_0xee2b[831]](Ext[_0xee2b[8]]({xtype:_0xee2b[4279], name:_0x8e22x3[_0xee2b[4191]][_0xee2b[4280]], forFrequency:_0xee2b[1436]}, _0x8e22x3[_0xee2b[4278]]));
  }
  if (!_0x8e22x3[_0xee2b[4281]] || !_0x8e22x3[_0xee2b[4281]][_0xee2b[3355]]) {
    _0x8e22x3[_0xee2b[4281]] = Ext[_0xee2b[831]](Ext[_0xee2b[8]]({xtype:_0xee2b[4282], name:_0x8e22x3[_0xee2b[4283]], submitValue:false, forFrequency:_0xee2b[1437], boxLabel:this.L(_0xee2b[566]), handler:_0x8e22x3[_0xee2b[4284]], scope:_0x8e22x3}, _0x8e22x3[_0xee2b[4281]]));
  }
  if (!_0x8e22x3[_0xee2b[4285]] || !_0x8e22x3[_0xee2b[4285]][_0xee2b[3355]]) {
    _0x8e22x3[_0xee2b[4285]] = Ext[_0xee2b[831]](Ext[_0xee2b[8]]({xtype:_0xee2b[4286], name:_0x8e22x3[_0xee2b[4191]][_0xee2b[4287]], forFrequency:_0xee2b[1437]}, _0x8e22x3[_0xee2b[4285]]));
  }
  if (!_0x8e22x3[_0xee2b[4288]] || !_0x8e22x3[_0xee2b[4288]][_0xee2b[3355]]) {
    _0x8e22x3[_0xee2b[4288]] = Ext[_0xee2b[831]](Ext[_0xee2b[8]]({xtype:_0xee2b[4289], name:_0x8e22x3[_0xee2b[4191]][_0xee2b[4290]], forFrequency:_0xee2b[1438]}, _0x8e22x3[_0xee2b[4288]]));
  }
  if (!_0x8e22x3[_0xee2b[4291]] || !_0x8e22x3[_0xee2b[4291]][_0xee2b[3355]]) {
    _0x8e22x3[_0xee2b[4291]] = Ext[_0xee2b[831]](Ext[_0xee2b[8]]({xtype:_0xee2b[4282], name:_0x8e22x3[_0xee2b[4283]], submitValue:false, forFrequency:_0xee2b[1437], boxLabel:this.L(_0xee2b[567]), handler:_0x8e22x3[_0xee2b[4284]], scope:_0x8e22x3}, _0x8e22x3[_0xee2b[4291]]));
  }
  if (!_0x8e22x3[_0xee2b[4292]] || !_0x8e22x3[_0xee2b[4292]][_0xee2b[3355]]) {
    _0x8e22x3[_0xee2b[4292]] = Ext[_0xee2b[831]](Ext[_0xee2b[8]]({xtype:_0xee2b[4267], name:_0x8e22x3[_0xee2b[4293]], submitValue:false, forFrequency:_0xee2b[1438], boxLabel:this.L(_0xee2b[567]), handler:_0x8e22x3[_0xee2b[4284]], scope:_0x8e22x3}, _0x8e22x3[_0xee2b[4292]]));
  }
  if (!_0x8e22x3[_0xee2b[4294]] || !_0x8e22x3[_0xee2b[4294]][_0xee2b[3355]]) {
    _0x8e22x3[_0xee2b[4294]] = Ext[_0xee2b[831]](Ext[_0xee2b[8]]({xtype:_0xee2b[4295], submitValue:false, fieldLabel:_0x8e22x3.L(_0xee2b[568]), value:[null]}, _0x8e22x3[_0xee2b[4294]]));
    _0x8e22x3[_0xee2b[252]](_0x8e22x3[_0xee2b[4294]], _0xee2b[2459], _0x8e22x3[_0xee2b[4296]], _0x8e22x3);
  }
  if (!_0x8e22x3[_0xee2b[4297]] || !_0x8e22x3[_0xee2b[4297]][_0xee2b[3355]]) {
    _0x8e22x3[_0xee2b[4297]] = Ext[_0xee2b[831]](Ext[_0xee2b[8]]({xtype:_0xee2b[4274], name:_0x8e22x3[_0xee2b[4191]][_0xee2b[4297]], minValue:2, allowBlank:false, flex:1, margin:_0xee2b[4275], disabled:true}, _0x8e22x3[_0xee2b[4297]]));
  }
  if (!_0x8e22x3[_0xee2b[4298]] || !_0x8e22x3[_0xee2b[4298]][_0xee2b[3355]]) {
    _0x8e22x3[_0xee2b[4298]] = Ext[_0xee2b[831]](Ext[_0xee2b[8]]({xtype:_0xee2b[4277], value:_0x8e22x3.L(_0xee2b[569]), submitValue:false, flex:1, disabled:true}, _0x8e22x3[_0xee2b[4298]]));
  }
  if (!_0x8e22x3[_0xee2b[4299]] || !_0x8e22x3[_0xee2b[4299]][_0xee2b[3355]]) {
    _0x8e22x3[_0xee2b[4299]] = Ext[_0xee2b[831]](Ext[_0xee2b[8]]({xtype:_0xee2b[4300], layout:_0xee2b[4301], margin:0, hideEmptyLabel:false, hidden:true, items:[_0x8e22x3[_0xee2b[4297]], _0x8e22x3[_0xee2b[4298]]]}, _0x8e22x3[_0xee2b[4299]]));
  }
  if (!_0x8e22x3[_0xee2b[1203]] || !_0x8e22x3[_0xee2b[1203]][_0xee2b[3355]]) {
    _0x8e22x3[_0xee2b[1203]] = Ext[_0xee2b[831]](Ext[_0xee2b[8]]({xtype:_0xee2b[4302], name:_0x8e22x3[_0xee2b[4191]][_0xee2b[1203]], hidden:true, disabled:true, hideEmptyLabel:false, allowBlank:false, startDay:_0x8e22x3[_0xee2b[1755]], format:_0x8e22x3[_0xee2b[879]], altFormats:_0xee2b[27]}, _0x8e22x3[_0xee2b[1203]]));
  }
  if (!_0x8e22x3[_0xee2b[4303]] || !_0x8e22x3[_0xee2b[4303]][_0xee2b[3355]]) {
    _0x8e22x3[_0xee2b[4303]] = Ext[_0xee2b[831]](Ext[_0xee2b[8]]({xtype:_0xee2b[4300], layout:_0xee2b[4301], fieldLabel:_0x8e22x3.L(_0xee2b[561]), margin:0, items:[_0x8e22x3[_0xee2b[4273]], _0x8e22x3[_0xee2b[4276]]]}, _0x8e22x3[_0xee2b[4303]]));
  }
  if (!_0x8e22x3[_0xee2b[4304]] || !_0x8e22x3[_0xee2b[4304]][_0xee2b[3355]]) {
    _0x8e22x3[_0xee2b[4304]] = Ext[_0xee2b[831]](Ext[_0xee2b[8]]({xtype:_0xee2b[4305], name:_0x8e22x3[_0xee2b[4191]][_0xee2b[4306]], forFrequency:_0xee2b[4307], flex:1, margin:_0xee2b[4275]}, _0x8e22x3[_0xee2b[4304]]));
  }
  if (!_0x8e22x3[_0xee2b[4308]] || !_0x8e22x3[_0xee2b[4308]][_0xee2b[3355]]) {
    _0x8e22x3[_0xee2b[4308]] = Ext[_0xee2b[831]](Ext[_0xee2b[8]]({xtype:_0xee2b[4309], name:_0x8e22x3[_0xee2b[4191]][_0xee2b[4280]], forFrequency:_0xee2b[4307], weekStartDay:_0x8e22x3[_0xee2b[1755]], flex:1}, _0x8e22x3[_0xee2b[4308]]));
  }
  if (!_0x8e22x3[_0xee2b[4310]] || !_0x8e22x3[_0xee2b[4310]][_0xee2b[3355]]) {
    _0x8e22x3[_0xee2b[4310]] = Ext[_0xee2b[831]](Ext[_0xee2b[8]]({xtype:_0xee2b[4300], layout:_0xee2b[4301], items:[_0x8e22x3[_0xee2b[4304]], _0x8e22x3[_0xee2b[4308]]]}, _0x8e22x3[_0xee2b[4310]]));
  }
  return [_0x8e22x3[_0xee2b[4270]], _0x8e22x3[_0xee2b[4303]], _0x8e22x3[_0xee2b[4278]], _0x8e22x3[_0xee2b[4281]], _0x8e22x3[_0xee2b[4285]], _0x8e22x3[_0xee2b[4288]], _0x8e22x3[_0xee2b[4291]], _0x8e22x3[_0xee2b[4292]], _0x8e22x3[_0xee2b[4310]], _0x8e22x3[_0xee2b[4294]], _0x8e22x3[_0xee2b[4299]], _0x8e22x3[_0xee2b[1203]]];
}, loadRecord:function(_0x8e22x4) {
  var _0x8e22x2 = this, _0x8e22x6 = this[_0xee2b[9]](arguments), _0x8e22x5 = _0x8e22x4[_0xee2b[1052]](), _0x8e22x3 = _0x8e22x5 && _0x8e22x5[_0xee2b[712]]();
  _0x8e22x2[_0xee2b[4308]][_0xee2b[2462]](_0x8e22x4[_0xee2b[1451]]());
  if (_0x8e22x3) {
    if (!_0x8e22x4[_0xee2b[1451]]() || !_0x8e22x4[_0xee2b[1451]]()[_0xee2b[4]]) {
      this[_0xee2b[4278]][_0xee2b[2462]]([Sch[_0xee2b[22]][_0xee2b[49]][_0xee2b[1454]][_0xee2b[1453]][_0xee2b[1452]](_0x8e22x3[_0xee2b[484]]())]);
    }
    if (!_0x8e22x4[_0xee2b[1455]]() || !_0x8e22x4[_0xee2b[1455]]()[_0xee2b[4]]) {
      this[_0xee2b[4285]][_0xee2b[2462]](_0x8e22x3[_0xee2b[479]]());
    }
    if (!_0x8e22x4[_0xee2b[1456]]() || !_0x8e22x4[_0xee2b[1456]]()[_0xee2b[4]]) {
      this[_0xee2b[4288]][_0xee2b[2462]](_0x8e22x3[_0xee2b[480]]() + 1);
    }
  }
  var _0x8e22x1 = Boolean(_0x8e22x4[_0xee2b[1451]]() && _0x8e22x4[_0xee2b[1469]]());
  _0x8e22x2[_0xee2b[4281]][_0xee2b[2462]](!_0x8e22x1);
  _0x8e22x2[_0xee2b[4291]][_0xee2b[2462]](_0x8e22x1);
  _0x8e22x2[_0xee2b[4292]][_0xee2b[2462]](_0x8e22x1);
  _0x8e22x2[_0xee2b[4294]][_0xee2b[2353]](_0x8e22x4);
  return _0x8e22x6;
}, toggleStopFields:function() {
  var _0x8e22x3 = this;
  switch(_0x8e22x3[_0xee2b[4294]][_0xee2b[4121]]()) {
    case _0xee2b[1520]:
      _0x8e22x3[_0xee2b[4299]][_0xee2b[2019]]();
      _0x8e22x3[_0xee2b[4297]][_0xee2b[2064]]();
      _0x8e22x3[_0xee2b[4298]][_0xee2b[2064]]();
      _0x8e22x3[_0xee2b[1203]][_0xee2b[256]]();
      _0x8e22x3[_0xee2b[1203]][_0xee2b[2061]]();
      break;
    case _0xee2b[1097]:
      _0x8e22x3[_0xee2b[4299]][_0xee2b[256]]();
      _0x8e22x3[_0xee2b[4297]][_0xee2b[2061]]();
      _0x8e22x3[_0xee2b[4298]][_0xee2b[2061]]();
      _0x8e22x3[_0xee2b[1203]][_0xee2b[2019]]();
      _0x8e22x3[_0xee2b[1203]][_0xee2b[2064]]();
      break;
    default:
      _0x8e22x3[_0xee2b[4299]][_0xee2b[256]]();
      _0x8e22x3[_0xee2b[1203]][_0xee2b[256]]();
      _0x8e22x3[_0xee2b[4297]][_0xee2b[2061]]();
      _0x8e22x3[_0xee2b[4298]][_0xee2b[2061]]();
      _0x8e22x3[_0xee2b[1203]][_0xee2b[2061]]();
  }
}, togglePositionAndDayFields:function() {
  var _0x8e22x3 = this, _0x8e22x6 = _0x8e22x3[_0xee2b[4270]][_0xee2b[4121]](), _0x8e22x4 = _0x8e22x6 == _0xee2b[1437] ? !_0x8e22x3[_0xee2b[4291]][_0xee2b[4121]]() : !_0x8e22x3[_0xee2b[4292]][_0xee2b[4121]]();
  _0x8e22x3[_0xee2b[4308]][_0xee2b[253]](_0x8e22x4);
  _0x8e22x3[_0xee2b[4304]][_0xee2b[253]](_0x8e22x4);
  if (_0x8e22x6 == _0xee2b[1437]) {
    _0x8e22x3[_0xee2b[4285]][_0xee2b[253]](!_0x8e22x3[_0xee2b[4281]][_0xee2b[4121]]());
  }
}, onFrequencyFieldChange:function(_0x8e22x1, _0x8e22x2) {
  var _0x8e22x5 = this, _0x8e22x3 = _0x8e22x5[_0xee2b[2573]](_0xee2b[4311]);
  for (var _0x8e22x6 = 0; _0x8e22x6 < _0x8e22x3[_0xee2b[4]]; _0x8e22x6++) {
    var _0x8e22x4 = _0x8e22x3[_0x8e22x6];
    if (_0x8e22x4[_0xee2b[4312]][_0xee2b[147]](_0x8e22x2) > -1) {
      _0x8e22x4[_0xee2b[2019]]();
      _0x8e22x4[_0xee2b[2064]]();
    } else {
      _0x8e22x4[_0xee2b[256]]();
      _0x8e22x4[_0xee2b[2061]]();
    }
  }
  _0x8e22x5[_0xee2b[4276]][_0xee2b[2462]](_0x8e22x5.L(_0x8e22x2 + _0xee2b[4276]));
  _0x8e22x5[_0xee2b[4284]]();
  _0x8e22x5[_0xee2b[4313]]();
}, onStopRecurrenceFieldChange:function(_0x8e22x6, _0x8e22x3) {
  this[_0xee2b[4313]]();
}});
Ext[_0xee2b[6]](_0xee2b[4314], {extend:_0xee2b[4315], requires:[_0xee2b[4224], _0xee2b[1428], _0xee2b[4256]], alias:_0xee2b[4316], mixins:[_0xee2b[665]], border:false, width:400, resizable:false, modal:true, recurrenceDialogCls:_0xee2b[4317], weekStartDay:1, dateFormat:_0xee2b[2691], form:null, recurrenceModel:null, saveHandler:null, cancelHandler:null, scope:null, title:_0xee2b[4318], initComponent:function() {
  var _0x8e22x3 = this;
  _0x8e22x3[_0xee2b[264]](_0x8e22x3[_0xee2b[4319]]);
  _0x8e22x3[_0xee2b[14]] = _0x8e22x3[_0xee2b[678]](_0x8e22x3[_0xee2b[14]]);
  _0x8e22x3[_0xee2b[1583]] = _0x8e22x3[_0xee2b[1583]] || Sch[_0xee2b[327]][_0xee2b[4268]];
  if (!_0x8e22x3[_0xee2b[4067]] || !_0x8e22x3[_0xee2b[4067]][_0xee2b[3355]]) {
    _0x8e22x3[_0xee2b[4067]] = Ext[_0xee2b[831]](Ext[_0xee2b[8]]({xtype:_0xee2b[4320], padding:_0xee2b[4321], weekStartDay:_0x8e22x3[_0xee2b[1755]], dateFormat:_0x8e22x3[_0xee2b[879]], recurrenceModel:_0x8e22x3[_0xee2b[1583]], border:false}, _0x8e22x3[_0xee2b[4067]]));
  }
  _0x8e22x3[_0xee2b[266]] = [_0x8e22x3[_0xee2b[4067]]];
  _0x8e22x3[_0xee2b[4322]] = _0x8e22x3[_0xee2b[4322]] || [{xtype:_0xee2b[2104], text:_0x8e22x3.L(_0xee2b[559]), scope:_0x8e22x3, handler:_0x8e22x3[_0xee2b[4323]]}, {xtype:_0xee2b[2104], text:_0x8e22x3.L(_0xee2b[557]), scope:_0x8e22x3, handler:_0x8e22x3[_0xee2b[4324]]}];
  _0x8e22x3[_0xee2b[9]](arguments);
}, onSaveClick:function() {
  var _0x8e22x3 = this;
  if (_0x8e22x3[_0xee2b[4325]]) {
    _0x8e22x3[_0xee2b[4325]][_0xee2b[293]](_0x8e22x3[_0xee2b[689]] || _0x8e22x3, _0x8e22x3, _0x8e22x3[_0xee2b[37]]());
  } else {
    _0x8e22x3[_0xee2b[4326]]();
    _0x8e22x3[_0xee2b[4327]]();
  }
}, onCancelClick:function() {
  var _0x8e22x3 = this;
  if (_0x8e22x3[_0xee2b[2347]]) {
    _0x8e22x3[_0xee2b[2347]][_0xee2b[293]](_0x8e22x3[_0xee2b[689]] || _0x8e22x3, _0x8e22x3, _0x8e22x3[_0xee2b[37]]());
  } else {
    _0x8e22x3[_0xee2b[4327]]();
  }
}, loadRecord:function(_0x8e22x3) {
  return this[_0xee2b[4067]][_0xee2b[4170]][_0xee2b[8]](this[_0xee2b[4067]], arguments);
}, updateRecord:function(_0x8e22x3) {
  return this[_0xee2b[4067]][_0xee2b[4326]][_0xee2b[8]](this[_0xee2b[4067]], arguments);
}, getRecord:function(_0x8e22x3) {
  return this[_0xee2b[4067]][_0xee2b[37]][_0xee2b[8]](this[_0xee2b[4067]], arguments);
}, getFloatingComponents:function() {
  var _0x8e22x2 = this, _0x8e22x4 = [], _0x8e22x6 = _0x8e22x2[_0xee2b[2573]](_0xee2b[4328]), _0x8e22x5;
  for (_0x8e22x5 = 0; _0x8e22x5 < _0x8e22x6[_0xee2b[4]]; _0x8e22x5++) {
    var _0x8e22x1 = _0x8e22x6[_0x8e22x5];
    _0x8e22x1[_0xee2b[4329]]();
  }
  var _0x8e22x3 = _0x8e22x2[_0xee2b[2573]](_0xee2b[4330]);
  if (Ext[_0xee2b[307]](_0x8e22x3)) {
    _0x8e22x4 = _0x8e22x4[_0xee2b[318]](_0x8e22x3);
  }
  return _0x8e22x4;
}});
Ext[_0xee2b[6]](_0xee2b[4331], {extend:_0xee2b[17], requires:[_0xee2b[4332], _0xee2b[4215], _0xee2b[4223], _0xee2b[4314], _0xee2b[2355]], isRecurrableEventEditor:true, recurrenceRule:null, recurrenceCombo:null, recurrenceLegendButton:null, recurrenceDialog:null, config:{recurringEvents:true}, onClassMixedIn:function(_0x8e22x3) {
  Ext[_0xee2b[507]](_0x8e22x3, {getDefaultFields:function() {
    var _0x8e22x6 = this[_0xee2b[9]](arguments) || [];
    return _0x8e22x6[_0xee2b[318]](this[_0xee2b[4333]]());
  }, getFloatingComponents:function() {
    var _0x8e22x6 = this[_0xee2b[9]](arguments) || [];
    return _0x8e22x6[_0xee2b[318]](this[_0xee2b[4334]]());
  }});
}, setupRecurrableEventEditorMixin:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  _0x8e22x6[_0xee2b[252]](_0x8e22x3, {loadevent:_0x8e22x6[_0xee2b[4335]], beforeeventdelete:_0x8e22x6[_0xee2b[4336]], beforeeventsave:_0x8e22x6[_0xee2b[4337]], destroy:_0x8e22x6[_0xee2b[4338]], scope:_0x8e22x3, priority:-100});
}, onEditorDestroy:function() {
  this[_0xee2b[4339]] && this[_0xee2b[4339]][_0xee2b[218]]();
}, getRecurrableEventDefaultFields:function() {
  var _0x8e22x6 = this, _0x8e22x3 = [];
  if (_0x8e22x6[_0xee2b[3354]] !== false) {
    if (!_0x8e22x6[_0xee2b[4340]] || !_0x8e22x6[_0xee2b[4340]][_0xee2b[3355]]) {
      _0x8e22x6[_0xee2b[4340]] = Ext[_0xee2b[831]](Ext[_0xee2b[8]]({xtype:_0xee2b[4198], name:_0x8e22x6[_0xee2b[4191]][_0xee2b[1586]]}, _0x8e22x6[_0xee2b[4340]]));
    }
    if (!_0x8e22x6[_0xee2b[4341]] || !_0x8e22x6[_0xee2b[4341]][_0xee2b[3355]]) {
      _0x8e22x6[_0xee2b[4341]] = Ext[_0xee2b[831]](Ext[_0xee2b[8]]({xtype:_0xee2b[4342], fieldLabel:_0x8e22x6.L(_0xee2b[601]), value:[null]}, _0x8e22x6[_0xee2b[4341]]));
      _0x8e22x6[_0xee2b[252]](_0x8e22x6[_0xee2b[4341]], _0xee2b[2459], _0x8e22x6[_0xee2b[4343]], _0x8e22x6);
    }
    if (!_0x8e22x6[_0xee2b[4344]] || !_0x8e22x6[_0xee2b[4344]][_0xee2b[3355]]) {
      _0x8e22x6[_0xee2b[4344]] = Ext[_0xee2b[831]](Ext[_0xee2b[8]]({xtype:_0xee2b[4345], hideEmptyLabel:false, handler:_0x8e22x6[_0xee2b[4346]], scope:_0x8e22x6}, _0x8e22x6[_0xee2b[4344]]));
    }
    _0x8e22x3[_0xee2b[11]](_0x8e22x6[_0xee2b[4340]], _0x8e22x6[_0xee2b[4341]], _0x8e22x6[_0xee2b[4344]]);
    _0x8e22x6[_0xee2b[4339]] = Ext[_0xee2b[831]]({xtype:_0xee2b[4347], weekStartDay:_0x8e22x6[_0xee2b[1755]], dateFormat:_0x8e22x6[_0xee2b[879]], closeAction:_0xee2b[256], saveHandler:_0x8e22x6[_0xee2b[4348]], cancelHandler:_0x8e22x6[_0xee2b[4349]], scope:_0x8e22x6});
    _0x8e22x6[_0xee2b[1201]] && _0x8e22x6[_0xee2b[252]](_0x8e22x6[_0xee2b[1201]], _0xee2b[2459], _0x8e22x6[_0xee2b[4350]], _0x8e22x6);
  }
  return _0x8e22x3;
}, updateRecurringEvents:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  if (_0x8e22x3) {
    if (_0x8e22x6[_0xee2b[4341]]) {
      _0x8e22x6[_0xee2b[4341]][_0xee2b[2019]]();
    }
    if (_0x8e22x6[_0xee2b[4344]]) {
      _0x8e22x6[_0xee2b[4344]][_0xee2b[2019]]();
    }
  } else {
    if (_0x8e22x6[_0xee2b[4341]]) {
      _0x8e22x6[_0xee2b[4341]][_0xee2b[256]]();
    }
    if (_0x8e22x6[_0xee2b[4344]]) {
      _0x8e22x6[_0xee2b[4344]][_0xee2b[256]]();
    }
  }
}, onRecurrableEventLoad:function(_0x8e22x6, _0x8e22x5, _0x8e22x2) {
  var _0x8e22x4 = this;
  _0x8e22x4[_0xee2b[1454]] = null;
  if (_0x8e22x5[_0xee2b[1568]] && _0x8e22x4[_0xee2b[1565]]()) {
    var _0x8e22x3 = _0x8e22x5[_0xee2b[1571]]() ? _0x8e22x5[_0xee2b[1580]]()[_0xee2b[1546]]() : _0x8e22x5[_0xee2b[1546]]();
    if (!_0x8e22x5[_0xee2b[1587]]()) {
      _0x8e22x4[_0xee2b[4340]][_0xee2b[2462]](null);
    }
    if (_0x8e22x4[_0xee2b[4341]]) {
      _0x8e22x4[_0xee2b[4341]][_0xee2b[2019]]();
      _0x8e22x4[_0xee2b[4341]][_0xee2b[2353]](_0x8e22x3);
    }
    if (_0x8e22x4[_0xee2b[4344]]) {
      _0x8e22x4[_0xee2b[4344]][_0xee2b[2353]](_0x8e22x3);
      if (_0x8e22x3) {
        _0x8e22x4[_0xee2b[4344]][_0xee2b[2019]]();
      } else {
        _0x8e22x4[_0xee2b[4344]][_0xee2b[256]]();
      }
    }
  } else {
    _0x8e22x4[_0xee2b[4341]] && _0x8e22x4[_0xee2b[4341]][_0xee2b[256]]();
    _0x8e22x4[_0xee2b[4344]] && _0x8e22x4[_0xee2b[4344]][_0xee2b[256]]();
  }
}, onRecurrableEventBeforeDelete:function(_0x8e22x4, _0x8e22x3, _0x8e22x6) {
  var _0x8e22x5 = this;
  if (_0x8e22x3[_0xee2b[1568]] && _0x8e22x5[_0xee2b[1565]]() && (_0x8e22x3[_0xee2b[1547]]() || _0x8e22x3[_0xee2b[1571]]())) {
    Sch[_0xee2b[2395]][_0xee2b[2394]][_0xee2b[2019]]({actionType:_0xee2b[4351], eventRecord:_0x8e22x3, changerFn:_0x8e22x6});
    return false;
  }
}, onRecurrableEventBeforeSave:function(_0x8e22x5, _0x8e22x3, _0x8e22x4, _0x8e22x6) {
  var _0x8e22x2 = this;
  if (_0x8e22x3[_0xee2b[1568]] && _0x8e22x2[_0xee2b[1565]]() && (_0x8e22x3[_0xee2b[1547]]() || _0x8e22x3[_0xee2b[1571]]())) {
    Sch[_0xee2b[2395]][_0xee2b[2394]][_0xee2b[2019]]({actionType:_0xee2b[724], eventRecord:_0x8e22x3, values:_0x8e22x4, changerFn:_0x8e22x6});
    return false;
  }
}, getRecurrableEventFloatingComponents:function() {
  var _0x8e22x4 = this, _0x8e22x3 = [];
  _0x8e22x3[_0xee2b[11]](Sch[_0xee2b[2395]].RecurrenceConfirmation);
  if (_0x8e22x4[_0xee2b[4339]]) {
    _0x8e22x3[_0xee2b[11]](_0x8e22x4[_0xee2b[4339]]);
    var _0x8e22x6 = _0x8e22x4[_0xee2b[4339]][_0xee2b[4180]] && _0x8e22x4[_0xee2b[4339]][_0xee2b[4180]]();
    if (Ext[_0xee2b[307]](_0x8e22x6)) {
      _0x8e22x3 = _0x8e22x3[_0xee2b[318]](_0x8e22x6);
    }
  }
  return _0x8e22x3;
}, onRecurrenceLegendClick:function() {
  this[_0xee2b[4352]]();
}, makeRecurrence:function(_0x8e22x4) {
  var _0x8e22x6 = this[_0xee2b[2174]](), _0x8e22x3 = _0x8e22x6[_0xee2b[1546]](), _0x8e22x5 = _0x8e22x6[_0xee2b[1054]](null);
  if (!_0x8e22x4 && _0x8e22x3) {
    _0x8e22x3 = _0x8e22x3[_0xee2b[1054]](null);
  } else {
    _0x8e22x3 = new _0x8e22x6[_0xee2b[1583]]({rule:_0x8e22x4});
  }
  _0x8e22x3[_0xee2b[1584]](_0x8e22x5);
  _0x8e22x5[_0xee2b[1204]](this[_0xee2b[4353]]());
  _0x8e22x3[_0xee2b[1442]]();
  return _0x8e22x3;
}, showRecurrenceDialog:function() {
  var _0x8e22x3 = this[_0xee2b[2329]];
  if (this[_0xee2b[4339]] && _0x8e22x3 && _0x8e22x3[_0xee2b[1568]]) {
    this[_0xee2b[4354]]();
    this[_0xee2b[1454]] = this[_0xee2b[1454]] || this[_0xee2b[4355]]();
    this[_0xee2b[1454]][_0xee2b[1052]]()[_0xee2b[1204]](this[_0xee2b[4353]]());
    this[_0xee2b[4339]][_0xee2b[4170]](this[_0xee2b[1454]]);
    this[_0xee2b[4339]][_0xee2b[2019]]();
  }
}, captureRecurrence:function() {
  var _0x8e22x3 = this[_0xee2b[4340]][_0xee2b[4121]]();
  this[_0xee2b[4356]] = _0x8e22x3 ? this[_0xee2b[4355]](_0x8e22x3) : null;
}, getCapturedRecurrence:function() {
  return this[_0xee2b[4356]];
}, onRecurrenceComboChange:function(_0x8e22x6, _0x8e22x3) {
  if (!this[_0xee2b[4357]]) {
    if (_0x8e22x3 == _0x8e22x6[_0xee2b[4220]]) {
      if (!this[_0xee2b[4358]]) {
        this[_0xee2b[4352]]();
      }
    } else {
      this[_0xee2b[4359]](_0x8e22x3 && this[_0xee2b[4355]](_0xee2b[1460] + _0x8e22x3) || null);
    }
  }
}, onRecurrenceUpdate:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  if (!_0x8e22x6[_0xee2b[4358]]) {
    _0x8e22x6[_0xee2b[4358]] = true;
    _0x8e22x6[_0xee2b[1454]] = _0x8e22x3;
    if (!_0x8e22x6[_0xee2b[4357]]) {
      _0x8e22x6[_0xee2b[4340]][_0xee2b[2462]](_0x8e22x3 ? _0x8e22x3[_0xee2b[1585]]() : null);
    }
    if (_0x8e22x6[_0xee2b[4341]]) {
      _0x8e22x6[_0xee2b[4341]][_0xee2b[2353]](_0x8e22x3);
    }
    if (_0x8e22x6[_0xee2b[4344]]) {
      _0x8e22x6[_0xee2b[4344]][_0xee2b[2353]](_0x8e22x3);
      if (_0x8e22x3) {
        _0x8e22x6[_0xee2b[4344]][_0xee2b[2019]]();
      } else {
        _0x8e22x6[_0xee2b[4344]][_0xee2b[256]]();
      }
    }
    _0x8e22x6[_0xee2b[4358]] = false;
  }
}, recurrenceDialogSaveHandler:function(_0x8e22x6, _0x8e22x3) {
  _0x8e22x6[_0xee2b[4326]](_0x8e22x3);
  this[_0xee2b[4359]](_0x8e22x3);
  _0x8e22x6[_0xee2b[4327]]();
}, recurrenceDialogCancelHandler:function(_0x8e22x6) {
  var _0x8e22x3 = this[_0xee2b[4360]]();
  this[_0xee2b[4359]](_0x8e22x3);
  _0x8e22x6[_0xee2b[4327]]();
}, onRecurrableEventStartDateChange:function(_0x8e22x6, _0x8e22x3) {
  if (this[_0xee2b[4344]]) {
    if (Ext[_0xee2b[1579]](_0x8e22x3)) {
      this[_0xee2b[4344]][_0xee2b[4361]](_0x8e22x3);
    }
  }
}});
Ext[_0xee2b[6]](_0xee2b[4362], {extend:_0xee2b[4257], mixins:[_0xee2b[4186], _0xee2b[4331], _0xee2b[665]], alias:[_0xee2b[4363], _0xee2b[4364]], isEventEditor:true, requires:[_0xee2b[1950], _0xee2b[4365], _0xee2b[4205], _0xee2b[3980], _0xee2b[4332], _0xee2b[4366], _0xee2b[4367], _0xee2b[1598], _0xee2b[1140], _0xee2b[3979]], trackResetOnLoad:true, isSavingEvent:0, eventStore:null, saveOnEnter:true, showDeleteButton:true, allDayField:null, startDateField:null, startTimeField:null, endDateField:null, 
endTimeField:null, nameField:null, resourceField:null, startTimeConfig:null, startDateConfig:null, endTimeConfig:null, endDateConfig:null, resourceFieldConfig:null, nameFieldConfig:null, allDayFieldConfig:null, showResourceField:false, scrollNewEventIntoView:true, border:false, bodyPadding:6, fieldsPanelConfig:null, dateFormat:_0xee2b[2691], weekStartDay:1, timeFormat:_0xee2b[1123], eventeditorCls:_0xee2b[4368], dynamicForm:true, eventRecord:null, resourceRecord:null, currentForm:null, allowOverlap:true, 
readOnly:false, typeField:_0xee2b[4369], layout:{type:_0xee2b[4264], align:_0xee2b[4265]}, initComponent:function() {
  var _0x8e22x3 = this;
  _0x8e22x3[_0xee2b[264]](_0x8e22x3[_0xee2b[4370]]);
  _0x8e22x3[_0xee2b[4269]](_0x8e22x3, Sch[_0xee2b[327]].Event);
  _0x8e22x3[_0xee2b[4371]](_0x8e22x3);
  Ext[_0xee2b[8]](_0x8e22x3, {buttons:_0x8e22x3[_0xee2b[4322]] || _0x8e22x3[_0xee2b[4372]](), items:[{xtype:_0xee2b[4373], itemId:_0xee2b[4374], margin:_0xee2b[4375], defaults:{width:_0xee2b[4376]}, border:false, items:_0x8e22x3[_0xee2b[4377]]()}, Ext[_0xee2b[330]](_0x8e22x3[_0xee2b[4378]], {flex:1, activeItem:0})]});
  _0x8e22x3[_0xee2b[9]](arguments);
  _0x8e22x3[_0xee2b[4374]] = _0x8e22x3[_0xee2b[861]](_0xee2b[4379]);
}, afterRender:function() {
  this[_0xee2b[9]](arguments);
  if (this[_0xee2b[4151]]) {
    this[_0xee2b[265]][_0xee2b[149]]({keyup:function(_0x8e22x6, _0x8e22x3) {
      if (_0x8e22x6[_0xee2b[2211]]() === _0x8e22x6[_0xee2b[4056]] && _0x8e22x3[_0xee2b[4380]][_0xee2b[819]]() === _0xee2b[4381]) {
        this[_0xee2b[4382]]();
      }
    }, scope:this});
  }
}, onAllDayChange:function(_0x8e22x2, _0x8e22x4) {
  var _0x8e22x5 = this, _0x8e22x6, _0x8e22x3, _0x8e22x1;
  if (!_0x8e22x5[_0xee2b[4357]]) {
    _0x8e22x6 = this[_0xee2b[1556]]();
    _0x8e22x5[_0xee2b[4383]]();
    if (_0x8e22x4) {
      if (_0x8e22x6[_0xee2b[1138]]) {
        _0x8e22x3 = Sch[_0xee2b[327]][_0xee2b[1423]][_0xee2b[1615]](_0x8e22x6[_0xee2b[1138]]);
        _0x8e22x5[_0xee2b[1201]][_0xee2b[2462]](_0x8e22x3);
        _0x8e22x5[_0xee2b[4384]][_0xee2b[2462]](_0x8e22x3);
      }
      if (_0x8e22x6[_0xee2b[1138]] && _0x8e22x6[_0xee2b[1139]]) {
        _0x8e22x1 = Sch[_0xee2b[327]][_0xee2b[1423]][_0xee2b[2177]](_0x8e22x6[_0xee2b[1138]], _0x8e22x6[_0xee2b[1139]]);
        _0x8e22x5[_0xee2b[1203]][_0xee2b[2462]](_0x8e22x1);
        _0x8e22x5[_0xee2b[4385]][_0xee2b[2462]](_0x8e22x1);
      }
    } else {
      if (_0x8e22x6[_0xee2b[1138]]) {
        _0x8e22x1 = Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[255]](_0x8e22x6[_0xee2b[1138]], Sch[_0xee2b[49]][_0xee2b[703]].HOUR, 1);
        _0x8e22x5[_0xee2b[1203]][_0xee2b[2462]](_0x8e22x1);
        _0x8e22x5[_0xee2b[4385]][_0xee2b[2462]](_0x8e22x1);
      }
    }
    _0x8e22x5[_0xee2b[4386]]();
    _0x8e22x5[_0xee2b[4387]]();
  }
}, onDatesChange:function(_0x8e22x2, _0x8e22x5, _0x8e22x6) {
  var _0x8e22x4 = Sch[_0xee2b[49]][_0xee2b[703]];
  var _0x8e22x3 = this[_0xee2b[1556]]();
  if (!Ext[_0xee2b[1579]](_0x8e22x3[_0xee2b[1138]]) || !Ext[_0xee2b[1579]](_0x8e22x3[_0xee2b[1139]]) || _0x8e22x3[_0xee2b[1138]][_0xee2b[1162]]() < _0x8e22x3[_0xee2b[1139]][_0xee2b[1162]]()) {
    return;
  }
  this[_0xee2b[4383]]();
  if (!_0x8e22x3[_0xee2b[2004]] && _0x8e22x3[_0xee2b[1138]][_0xee2b[1162]]() >= _0x8e22x3[_0xee2b[1139]][_0xee2b[1162]]()) {
    if (_0x8e22x2 === this[_0xee2b[1201]] || _0x8e22x2 === this[_0xee2b[4384]]) {
      this[_0xee2b[1203]][_0xee2b[2462]](_0x8e22x4[_0xee2b[255]](_0x8e22x3[_0xee2b[1138]], _0x8e22x4.DAY, 1));
    } else {
      this[_0xee2b[1201]][_0xee2b[2462]](_0x8e22x4[_0xee2b[255]](_0x8e22x3[_0xee2b[1139]], _0x8e22x4.DAY, -1));
    }
  } else {
    if (_0x8e22x3[_0xee2b[2004]] && _0x8e22x3[_0xee2b[1138]][_0xee2b[1162]]() > _0x8e22x3[_0xee2b[1139]][_0xee2b[1162]]()) {
      if (_0x8e22x2 === this[_0xee2b[1201]] || _0x8e22x2 === this[_0xee2b[4384]]) {
        this[_0xee2b[1203]][_0xee2b[2462]](_0x8e22x3[_0xee2b[1138]]);
      } else {
        this[_0xee2b[1201]][_0xee2b[2462]](_0x8e22x3[_0xee2b[1139]]);
      }
    }
  }
  this[_0xee2b[4386]]();
}, getDefaultFields:function() {
  var _0x8e22x3 = [];
  this[_0xee2b[1228]] = Ext[_0xee2b[831]](Ext[_0xee2b[8]]({fieldId:this[_0xee2b[4370]] + _0xee2b[4388], xtype:_0xee2b[4389], fieldLabel:this.L(_0xee2b[4390]), name:this[_0xee2b[4191]][_0xee2b[1228]], selectOnFocus:true, allowBlank:false}, this[_0xee2b[4391]]));
  _0x8e22x3[_0xee2b[11]](this[_0xee2b[1228]]);
  if (this[_0xee2b[4392]]) {
    this[_0xee2b[4393]] = Ext[_0xee2b[831]](Ext[_0xee2b[154]][_0xee2b[4398]]({fieldId:this[_0xee2b[4370]] + _0xee2b[4394], xtype:_0xee2b[4395], listConfig:{htmlEncode:true}, fieldLabel:this.L(_0xee2b[4396]), queryMode:_0xee2b[4212], valueField:_0xee2b[1032], displayField:_0xee2b[603], allowBlank:false, editable:false}, this[_0xee2b[4397]]));
    _0x8e22x3[_0xee2b[11]](this[_0xee2b[4393]]);
  }
  this[_0xee2b[3276]] = Ext[_0xee2b[831]](Ext[_0xee2b[8]]({fieldId:this[_0xee2b[4370]] + _0xee2b[4399], xtype:_0xee2b[4400], fieldLabel:this.L(_0xee2b[4401]), handler:this[_0xee2b[4402]], scope:this}, this[_0xee2b[4403]]));
  _0x8e22x3[_0xee2b[11]](this[_0xee2b[3276]]);
  this[_0xee2b[1201]] = Ext[_0xee2b[831]](Ext[_0xee2b[8]]({fieldId:this[_0xee2b[4370]] + _0xee2b[4404], xtype:_0xee2b[4302], fieldLabel:this.L(_0xee2b[4405]), allowBlank:false, format:this[_0xee2b[879]], altFormats:_0xee2b[27], startDay:this[_0xee2b[1755]], flex:1, listeners:{change:this[_0xee2b[4406]], scope:this}}, this[_0xee2b[4407]]));
  this[_0xee2b[4384]] = Ext[_0xee2b[831]](Ext[_0xee2b[8]]({fieldId:this[_0xee2b[4370]] + _0xee2b[4408], cls:this[_0xee2b[4370]] + _0xee2b[4409], xtype:_0xee2b[4410], format:this[_0xee2b[4411]], altFormats:_0xee2b[27], increment:30, width:100, margin:_0xee2b[4412], allowBlank:false, listeners:{change:this[_0xee2b[4406]], scope:this}}, this[_0xee2b[4413]]));
  this[_0xee2b[1203]] = Ext[_0xee2b[831]](Ext[_0xee2b[8]]({fieldId:this[_0xee2b[4370]] + _0xee2b[4414], xtype:_0xee2b[4302], fieldLabel:this.L(_0xee2b[4415]), allowBlank:false, format:this[_0xee2b[879]], altFormats:_0xee2b[27], startDay:this[_0xee2b[1755]], flex:1, listeners:{change:this[_0xee2b[4406]], scope:this}}, this[_0xee2b[4416]]));
  this[_0xee2b[4385]] = Ext[_0xee2b[831]](Ext[_0xee2b[8]]({fieldId:this[_0xee2b[4370]] + _0xee2b[4417], cls:this[_0xee2b[4370]] + _0xee2b[4409], xtype:_0xee2b[4410], format:this[_0xee2b[4411]], altFormats:_0xee2b[27], increment:30, width:100, margin:_0xee2b[4412], allowBlank:false, listeners:{change:this[_0xee2b[4406]], scope:this}}, this[_0xee2b[4418]]));
  _0x8e22x3[_0xee2b[11]]({xtype:_0xee2b[4373], layout:_0xee2b[4301], margin:_0xee2b[4246], items:[this[_0xee2b[1201]], this[_0xee2b[4384]]]});
  _0x8e22x3[_0xee2b[11]]({xtype:_0xee2b[4373], layout:_0xee2b[4301], margin:_0xee2b[4246], items:[this[_0xee2b[1203]], this[_0xee2b[4385]]]});
  return _0x8e22x3;
}, setReadOnly:function(_0x8e22x3) {
  if (_0x8e22x3 !== this[_0xee2b[2887]]) {
    Ext[_0xee2b[26]][_0xee2b[25]](this[_0xee2b[2573]](_0xee2b[927]), function(_0x8e22x6) {
      _0x8e22x6[_0xee2b[2821]](_0x8e22x3);
    });
    this[_0xee2b[4419]][_0xee2b[3419]](!_0x8e22x3);
    this[_0xee2b[4420]] && this[_0xee2b[4420]][_0xee2b[3419]](!_0x8e22x3);
    this[_0xee2b[2887]] = _0x8e22x3;
  }
}, getEventRecord:function() {
  return this[_0xee2b[2329]];
}, suspendDateFieldsChange:function() {
  this[_0xee2b[1201]][_0xee2b[4421]]++;
  this[_0xee2b[4384]][_0xee2b[4421]]++;
  this[_0xee2b[1203]][_0xee2b[4421]]++;
  this[_0xee2b[4385]][_0xee2b[4421]]++;
}, resumeDateFieldsChange:function() {
  this[_0xee2b[1201]][_0xee2b[4421]]--;
  this[_0xee2b[4384]][_0xee2b[4421]]--;
  this[_0xee2b[1203]][_0xee2b[4421]]--;
  this[_0xee2b[4385]][_0xee2b[4421]]--;
}, loadRecord:function(_0x8e22x8, _0x8e22xd) {
  var _0x8e22xa = this;
  _0x8e22xa[_0xee2b[4357]] = true;
  _0x8e22xa[_0xee2b[4422]]();
  _0x8e22xa[_0xee2b[4383]]();
  _0x8e22xa[_0xee2b[2821]](_0x8e22xd);
  if (_0x8e22xa[_0xee2b[4420]]) {
    _0x8e22xa[_0xee2b[4420]][_0xee2b[3419]](!_0x8e22xd && !_0x8e22xa[_0xee2b[4423]](_0x8e22x8));
  }
  _0x8e22xa[_0xee2b[2329]] = _0x8e22x8;
  var _0x8e22x2 = _0x8e22x8[_0xee2b[712]]();
  var _0x8e22x1 = _0x8e22x8[_0xee2b[713]]();
  var _0x8e22x9 = _0x8e22x8[_0xee2b[1611]]();
  _0x8e22xa[_0xee2b[4384]][_0xee2b[2462]](_0x8e22x2);
  _0x8e22xa[_0xee2b[4385]][_0xee2b[2462]](_0x8e22x1);
  if (!_0x8e22x9) {
    _0x8e22xa[_0xee2b[1201]][_0xee2b[2462]](_0x8e22x2);
    _0x8e22xa[_0xee2b[1203]][_0xee2b[2462]](_0x8e22x1);
  } else {
    _0x8e22xa[_0xee2b[1201]][_0xee2b[2462]](Sch[_0xee2b[327]][_0xee2b[1423]][_0xee2b[1615]](_0x8e22xa[_0xee2b[2329]]));
    _0x8e22xa[_0xee2b[1203]][_0xee2b[2462]](Sch[_0xee2b[327]][_0xee2b[1423]][_0xee2b[2177]](_0x8e22xa[_0xee2b[2329]]));
  }
  _0x8e22xa[_0xee2b[3276]][_0xee2b[2462]](_0x8e22x9);
  _0x8e22xa[_0xee2b[4387]]();
  var _0x8e22x7 = _0x8e22x8[_0xee2b[1427]](_0x8e22xa[_0xee2b[696]]());
  if (_0x8e22xa[_0xee2b[4423]](_0x8e22x8) && !_0x8e22x7[_0xee2b[4]]) {
    _0x8e22x7 = [_0x8e22xa[_0xee2b[2055]]];
  }
  _0x8e22xa[_0xee2b[4393]] && _0x8e22xa[_0xee2b[4424]](_0x8e22x7);
  _0x8e22xa[_0xee2b[4425]] = _0x8e22xa;
  _0x8e22xa[_0xee2b[9]]([_0x8e22x8]);
  var _0x8e22x5 = _0x8e22x8[_0xee2b[55]](_0x8e22xa[_0xee2b[4426]]);
  if (_0x8e22x5 && _0x8e22xa[_0xee2b[4427]]) {
    var _0x8e22x6 = _0x8e22xa[_0xee2b[266]][_0xee2b[1752]](1), _0x8e22x3 = _0x8e22x6[_0xee2b[2573]](_0xee2b[4428]), _0x8e22x4 = _0x8e22x6[_0xee2b[2573]](_0xee2b[4429] + _0x8e22x5 + _0xee2b[670])[0];
    if (!_0x8e22x4) {
      throw new Error(_0xee2b[4430] + _0x8e22x5);
    }
    if (!_0x8e22x6[_0xee2b[4432]]()[_0xee2b[4431]]) {
      throw new Error(_0xee2b[4433]);
    }
    _0x8e22x6[_0xee2b[4432]]()[_0xee2b[4431]](_0x8e22x4);
    _0x8e22xa[_0xee2b[4425]] = _0x8e22x4;
    _0x8e22x4[_0xee2b[4170]](_0x8e22x8);
  }
  _0x8e22xa[_0xee2b[180]](_0xee2b[4434], _0x8e22xa, _0x8e22x8, _0x8e22xd);
  _0x8e22xa[_0xee2b[1228]][_0xee2b[3210]]();
  _0x8e22xa[_0xee2b[4386]]();
  _0x8e22xa[_0xee2b[4357]] = false;
}, toggleAllDayFields:function() {
  var _0x8e22x6 = this;
  if (_0x8e22x6[_0xee2b[3276]][_0xee2b[854]]()) {
    var _0x8e22x3 = _0x8e22x6[_0xee2b[3276]][_0xee2b[4121]]();
    _0x8e22x6[_0xee2b[4384]][_0xee2b[253]](_0x8e22x3);
    _0x8e22x6[_0xee2b[4384]][_0xee2b[4435]](_0x8e22x3);
    _0x8e22x6[_0xee2b[4385]][_0xee2b[253]](_0x8e22x3);
    _0x8e22x6[_0xee2b[4385]][_0xee2b[4435]](_0x8e22x3);
  }
}, getFloatingComponents:function() {
  var _0x8e22x1 = this, _0x8e22x4 = [], _0x8e22x6 = _0x8e22x1[_0xee2b[2573]](_0xee2b[4328]), _0x8e22x2;
  for (_0x8e22x2 = 0; _0x8e22x2 < _0x8e22x6[_0xee2b[4]]; _0x8e22x2++) {
    var _0x8e22x9 = _0x8e22x6[_0x8e22x2], _0x8e22x5 = _0x8e22x9[_0xee2b[4329]]();
    if (_0x8e22x9[_0xee2b[4436]]) {
      _0x8e22x5[_0xee2b[264]](_0x8e22x9[_0xee2b[4436]] + _0xee2b[4437]);
    }
  }
  var _0x8e22x3 = _0x8e22x1[_0xee2b[2573]](_0xee2b[4330]);
  if (Ext[_0xee2b[307]](_0x8e22x3)) {
    _0x8e22x4 = _0x8e22x4[_0xee2b[318]](_0x8e22x3);
  }
  return _0x8e22x4;
}, setEventStore:function(_0x8e22x3) {
  this[_0xee2b[1071]] = _0x8e22x3;
}, setResourceStore:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  _0x8e22x6[_0xee2b[1302]] = _0x8e22x3;
  if (_0x8e22x6[_0xee2b[4393]]) {
    if (_0x8e22x3) {
      _0x8e22x6[_0xee2b[4393]][_0xee2b[4438]] = _0x8e22x3 && _0x8e22x3[_0xee2b[137]]()[_0xee2b[139]][_0xee2b[328]];
      _0x8e22x6[_0xee2b[4393]][_0xee2b[4439]] = _0x8e22x3 && _0x8e22x3[_0xee2b[137]]()[_0xee2b[139]][_0xee2b[1228]];
      _0x8e22x6[_0xee2b[4393]][_0xee2b[4440]]();
    }
    _0x8e22x6[_0xee2b[4393]][_0xee2b[4441]](_0x8e22x3);
  }
}, getEventStore:function() {
  return this[_0xee2b[1071]];
}, getResourceStore:function() {
  return this[_0xee2b[1302]];
}, isNewRecord:function(_0x8e22x3) {
  var _0x8e22x6 = this[_0xee2b[696]]();
  return !_0x8e22x6 || _0x8e22x6[_0xee2b[147]](_0x8e22x3) === -1;
}, onSaveClick:function() {
  this[_0xee2b[4382]]();
}, save:function(_0x8e22x3) {
  var _0x8e22x2 = this;
  _0x8e22x3 = _0x8e22x3 || _0x8e22x2[_0xee2b[2329]];
  if (!_0x8e22x3 || !_0x8e22x2[_0xee2b[348]]()) {
    return;
  }
  var _0x8e22x5 = _0x8e22x2[_0xee2b[696]](), _0x8e22x4 = _0x8e22x2[_0xee2b[1556]](), _0x8e22x1 = _0x8e22x4[_0xee2b[53]](_0xee2b[1627]);
  if (!_0x8e22x2[_0xee2b[3260]] && _0x8e22x5) {
    var _0x8e22x9 = false;
    Ext[_0xee2b[25]](_0x8e22x1 ? _0x8e22x4[_0xee2b[1627]] : _0x8e22x3[_0xee2b[1427]](_0x8e22x2[_0xee2b[696]]()), function(_0x8e22x7) {
      return _0x8e22x9 = !_0x8e22x5[_0xee2b[2655]](_0x8e22x4[_0xee2b[1138]], _0x8e22x4[_0xee2b[1139]], _0x8e22x3, _0x8e22x7);
    });
    if (_0x8e22x9) {
      return;
    }
  }
  var _0x8e22x6 = function() {
    _0x8e22x2[_0xee2b[4442]](_0x8e22x3, _0x8e22x4);
  };
  if (_0x8e22x2[_0xee2b[180]](_0xee2b[4443], _0x8e22x2, _0x8e22x3, _0x8e22x4, _0x8e22x6) !== false) {
    _0x8e22x6();
  }
  return _0x8e22x3;
}, doSave:function(_0x8e22x3, _0x8e22x6) {
  var _0x8e22x5 = this, _0x8e22x4 = _0x8e22x5[_0xee2b[696]](), _0x8e22x2 = _0x8e22x6[_0xee2b[53]](_0xee2b[1627]);
  _0x8e22x5[_0xee2b[4444]]++;
  _0x8e22x5[_0xee2b[4445]](_0x8e22x3);
  _0x8e22x3[_0xee2b[46]]();
  _0x8e22x5[_0xee2b[4326]](_0x8e22x3);
  if (_0x8e22x5[_0xee2b[4425]] !== _0x8e22x5) {
    _0x8e22x5[_0xee2b[4425]][_0xee2b[4326]](_0x8e22x3);
  }
  if (_0x8e22x6[_0xee2b[2004]]) {
    _0x8e22x3[_0xee2b[1208]](_0x8e22x6[_0xee2b[1138]], Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[1283]](_0x8e22x6[_0xee2b[1139]], Sch[_0xee2b[49]][_0xee2b[703]].DAY, 1));
  } else {
    _0x8e22x3[_0xee2b[1208]](_0x8e22x6[_0xee2b[1138]], _0x8e22x6[_0xee2b[1139]]);
  }
  _0x8e22x3[_0xee2b[2239]](_0x8e22x6[_0xee2b[2004]]);
  _0x8e22x3[_0xee2b[51]]();
  if (_0x8e22x2 && !_0x8e22x5[_0xee2b[4423]](_0x8e22x3)) {
    _0x8e22x5[_0xee2b[4446]](_0x8e22x3, _0x8e22x6[_0xee2b[1627]]);
  }
  if (_0x8e22x4 && _0x8e22x5[_0xee2b[4423]](_0x8e22x3)) {
    if (_0x8e22x5[_0xee2b[180]](_0xee2b[2664], _0x8e22x5, _0x8e22x3, _0x8e22x6[_0xee2b[1627]]) !== false) {
      if (_0x8e22x4[_0xee2b[234]]) {
        _0x8e22x3[_0xee2b[50]](_0xee2b[105], true);
      }
      _0x8e22x4[_0xee2b[384]](_0x8e22x3);
      if (_0x8e22x2) {
        _0x8e22x5[_0xee2b[4446]](_0x8e22x3, _0x8e22x6[_0xee2b[1627]]);
      }
      _0x8e22x5[_0xee2b[180]](_0xee2b[4447], _0x8e22x5, _0x8e22x3);
    }
  }
  _0x8e22x5[_0xee2b[180]](_0xee2b[4448], _0x8e22x5, _0x8e22x3);
  _0x8e22x5[_0xee2b[4449]](_0x8e22x3);
  _0x8e22x5[_0xee2b[4444]]--;
}, setResourcesValue:function(_0x8e22x3) {
  this[_0xee2b[4393]][_0xee2b[2462]](_0x8e22x3);
}, getResourcesValue:function() {
  return [this[_0xee2b[4393]][_0xee2b[3314]]()];
}, assignResourcesToEvent:function(_0x8e22x3, _0x8e22x6) {
  _0x8e22x3[_0xee2b[2244]]();
  _0x8e22x3[_0xee2b[1605]](_0x8e22x6);
}, isValid:function() {
  var _0x8e22x3 = true;
  Ext[_0xee2b[25]](this[_0xee2b[2573]](_0xee2b[4450]), function(_0x8e22x6) {
    return _0x8e22x3 = _0x8e22x6[_0xee2b[4451]]() || _0x8e22x6[_0xee2b[348]]();
  });
  return _0x8e22x3;
}, combineDateAndTime:function(_0x8e22x6, _0x8e22x4) {
  var _0x8e22x3 = null;
  if (Ext[_0xee2b[1579]](_0x8e22x6) && Ext[_0xee2b[1579]](_0x8e22x4)) {
    _0x8e22x3 = Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[1521]](Ext[_0xee2b[703]][_0xee2b[1161]](_0x8e22x6), _0x8e22x4);
  }
  return _0x8e22x3;
}, getStartDateValue:function() {
  return this[_0xee2b[4452]](this[_0xee2b[1201]][_0xee2b[4121]](), this[_0xee2b[4384]][_0xee2b[4121]]());
}, getEndDateValue:function() {
  return this[_0xee2b[4452]](this[_0xee2b[1203]][_0xee2b[4121]](), this[_0xee2b[4385]][_0xee2b[4121]]());
}, getValues:function() {
  var _0x8e22x6 = this, _0x8e22x3 = _0x8e22x6[_0xee2b[9]](arguments);
  if (_0x8e22x6[_0xee2b[4393]]) {
    _0x8e22x3[_0xee2b[1627]] = _0x8e22x6[_0xee2b[4453]]();
  } else {
    if (_0x8e22x6[_0xee2b[2055]]) {
      _0x8e22x3[_0xee2b[1627]] = [_0x8e22x6[_0xee2b[2055]]];
    }
  }
  return Ext[_0xee2b[8]](_0x8e22x3, {startDate:_0x8e22x6[_0xee2b[4353]](), endDate:_0x8e22x6[_0xee2b[4454]](), name:_0x8e22x6[_0xee2b[1228]][_0xee2b[4121]](), allDay:_0x8e22x6[_0xee2b[3276]][_0xee2b[4121]](), resource:_0x8e22x3[_0xee2b[1627]] && _0x8e22x3[_0xee2b[1627]][0]});
}, onBeforeSave:function(_0x8e22x3) {
}, onAfterSave:function(_0x8e22x3) {
}, onDeleteClick:function() {
  this[_0xee2b[4455]]();
}, deleteEvent:function(_0x8e22x3) {
  var _0x8e22x4 = this;
  _0x8e22x3 = _0x8e22x3 || _0x8e22x4[_0xee2b[2329]];
  var _0x8e22x6 = function() {
    _0x8e22x4[_0xee2b[4456]](_0x8e22x3);
  };
  if (_0x8e22x4[_0xee2b[180]](_0xee2b[4457], _0x8e22x4, _0x8e22x3, _0x8e22x6) !== false) {
    _0x8e22x6();
  }
}, doDeleteEvent:function(_0x8e22x3) {
  var _0x8e22x4 = this, _0x8e22x6 = _0x8e22x4[_0xee2b[696]]();
  _0x8e22x6 && _0x8e22x6[_0xee2b[63]](_0x8e22x3);
  _0x8e22x4[_0xee2b[180]](_0xee2b[4458], _0x8e22x4, _0x8e22x3);
}, onCancelClick:Ext[_0xee2b[688]], buildButtons:function() {
  var _0x8e22x3 = [];
  this[_0xee2b[4419]] = new Ext.Button({text:this.L(_0xee2b[4459]), scope:this, handler:this[_0xee2b[4323]]});
  _0x8e22x3[_0xee2b[11]](this[_0xee2b[4419]]);
  if (this[_0xee2b[4460]]) {
    this[_0xee2b[4420]] = new Ext.Button({text:this.L(_0xee2b[4461]), scope:this, handler:this[_0xee2b[4462]]});
    _0x8e22x3[_0xee2b[11]](this[_0xee2b[4420]]);
  }
  this[_0xee2b[4463]] = new Ext.Button({text:this.L(_0xee2b[4464]), scope:this, handler:this[_0xee2b[4324]]});
  _0x8e22x3[_0xee2b[11]](this[_0xee2b[4463]]);
  return _0x8e22x3;
}});
Ext[_0xee2b[6]](_0xee2b[4465], {extend:_0xee2b[4315], mixins:[_0xee2b[782], _0xee2b[4145]], requires:[_0xee2b[4362]], alias:[_0xee2b[4466], _0xee2b[4467]], cls:_0xee2b[4468], layout:_0xee2b[4469], closeAction:_0xee2b[256], constrain:true, editorConfig:null, privates:{alignOnResize:function() {
}}, initComponent:function() {
  var _0x8e22x3 = this;
  if (!_0x8e22x3[_0xee2b[2662]]) {
    _0x8e22x3[_0xee2b[2662]] = Ext[_0xee2b[831]](Ext[_0xee2b[8]]({xtype:_0xee2b[4470], saveOnEnter:_0x8e22x3[_0xee2b[4152]], onCancelClick:function() {
      _0x8e22x3[_0xee2b[256]]();
    }}, _0x8e22x3[_0xee2b[4471]]));
    _0x8e22x3[_0xee2b[266]] = _0x8e22x3[_0xee2b[2662]];
  }
  _0x8e22x3[_0xee2b[9]](arguments);
}, init:function(_0x8e22x3) {
  this[_0xee2b[4472]](_0x8e22x3);
}, afterRender:function() {
  this[_0xee2b[9]](arguments);
  var _0x8e22x3 = this[_0xee2b[800]]()[_0xee2b[694]](_0xee2b[4473]);
  if (_0x8e22x3) {
    this[_0xee2b[252]](_0x8e22x3, {activate:this[_0xee2b[4474]], move:this[_0xee2b[4474]], scope:this});
  }
  this[_0xee2b[4475]]();
}, showRecord:function(_0x8e22x3, _0x8e22x6) {
  this[_0xee2b[4474]]();
  this[_0xee2b[4476]](_0x8e22x3[_0xee2b[497]]());
}, alignEditorToElement:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  if (_0x8e22x3) {
    _0x8e22x6[_0xee2b[2021]](_0x8e22x3, _0xee2b[4477] + (_0x8e22x6[_0xee2b[2076]] ? _0xee2b[4478] : _0xee2b[27]));
  } else {
    _0x8e22x6[_0xee2b[472]]();
  }
}, getEventRecord:function() {
  return this[_0xee2b[2662]][_0xee2b[2174]]();
}, floatAboveFloatingContainer:function() {
  var _0x8e22x3 = this[_0xee2b[800]]()[_0xee2b[694]](_0xee2b[4473]);
  if (this[_0xee2b[854]]() && _0x8e22x3) {
    this[_0xee2b[4479]](_0x8e22x3[_0xee2b[787]]()[_0xee2b[3190]]() + 1);
  }
}, onEventRepaint:function(_0x8e22x6, _0x8e22x3) {
  if (this[_0xee2b[854]]() && _0x8e22x3 === this[_0xee2b[2174]]() && !this[_0xee2b[3275]]()[_0xee2b[4444]]) {
    this[_0xee2b[3278]](_0x8e22x3);
  }
}});
Ext[_0xee2b[6]](_0xee2b[4480], {extend:_0xee2b[4362], mixins:[_0xee2b[782], _0xee2b[4145]], alias:[_0xee2b[4481], _0xee2b[4482]], requires:[_0xee2b[1950]], border:false, shadow:false, hidden:true, collapsed:true, preventHeader:true, floating:true, hideMode:_0xee2b[2227], constrain:false, floatingCls:_0xee2b[4483], constructor:function(_0x8e22x3) {
  this[_0xee2b[9]](arguments);
  this[_0xee2b[264]](this[_0xee2b[4484]]);
}, init:function(_0x8e22x3) {
  this[_0xee2b[834]] = _0x8e22x3;
  this[_0xee2b[4472]](_0x8e22x3);
}, afterRender:function() {
  this[_0xee2b[9]](arguments);
  this[_0xee2b[4475]]();
}, showRecord:function(_0x8e22x3, _0x8e22x6) {
  this[_0xee2b[103]](!this[_0xee2b[2076]]);
}, alignEditorToElement:function(_0x8e22x3) {
  var _0x8e22x4 = this;
  var _0x8e22x6 = _0x8e22x4[_0xee2b[800]]();
  _0x8e22x3 = _0x8e22x3 || _0x8e22x6[_0xee2b[2191]] && _0x8e22x6[_0xee2b[2191]](_0x8e22x4[_0xee2b[37]]())[0] || null;
  if (_0x8e22x3) {
    _0x8e22x4[_0xee2b[2021]](_0x8e22x3, (_0x8e22x6[_0xee2b[1828]] && _0x8e22x6[_0xee2b[1828]]() ? _0xee2b[4485] : _0xee2b[4477]) + (_0x8e22x4[_0xee2b[2076]] ? _0xee2b[4478] : _0xee2b[27]));
  }
}, onDeleteClick:function() {
  this[_0xee2b[9]](arguments);
  this[_0xee2b[4174]]();
}, onCancelClick:function() {
  this[_0xee2b[4174]]();
}, hideEditor:function() {
  this[_0xee2b[104]](null, true);
}, afterCollapse:function() {
  this[_0xee2b[256]]();
  this[_0xee2b[9]](arguments);
}, onEventRepaint:function(_0x8e22x6, _0x8e22x3) {
  if (!this[_0xee2b[2942]]() && _0x8e22x3 === this[_0xee2b[2329]]) {
    this[_0xee2b[3278]](_0x8e22x3);
  }
}});
Ext[_0xee2b[6]](_0xee2b[4486], {extend:_0xee2b[4487], mixins:[_0xee2b[782]], lockableScope:_0xee2b[686], alias:_0xee2b[4488], hideDelay:500, align:_0xee2b[4489], defaults:{xtype:_0xee2b[4490], baseCls:_0xee2b[4491], overCls:_0xee2b[4492], width:24, height:24, visibleFn:Ext[_0xee2b[688]]}, hideTimer:null, cachedSize:null, layout:_0xee2b[4301], autoRender:true, floating:true, shadow:false, hideMode:_0xee2b[2227], hidden:true, eventRecord:null, resourceRecord:null, targetNode:null, getEventRecord:function() {
  return this[_0xee2b[2329]];
}, getResourceRecord:function() {
  return this[_0xee2b[2055]];
}, init:function(_0x8e22x3) {
  if (!this[_0xee2b[266]]) {
    throw _0xee2b[4493];
  }
  this[_0xee2b[264]](_0xee2b[4494]);
  this[_0xee2b[2502]] = _0x8e22x3;
  this[_0xee2b[4495]] = this[_0xee2b[2722]];
  _0x8e22x3[_0xee2b[149]]({eventresizestart:this[_0xee2b[4496]], aftereventresize:this[_0xee2b[4497]], eventdragstart:this[_0xee2b[4496]], eventdrop:this[_0xee2b[4497]], eventmouseenter:this[_0xee2b[4498]], eventmouseleave:this[_0xee2b[4499]], scope:this});
}, onRender:function() {
  this[_0xee2b[9]](arguments);
  this[_0xee2b[265]][_0xee2b[149]]({mouseenter:this[_0xee2b[4500]], mouseover:this[_0xee2b[4500]], mouseleave:this[_0xee2b[4499]], scope:this});
}, onEventMouseEnter:function(_0x8e22x6, _0x8e22x3, _0x8e22x1) {
  window[_0xee2b[4502]](this[_0xee2b[4501]]);
  var _0x8e22x5 = this, _0x8e22x4 = false, _0x8e22x9;
  _0x8e22x5[_0xee2b[4503]] = _0x8e22x1[_0xee2b[2033]](_0x8e22x6[_0xee2b[2034]]);
  _0x8e22x5[_0xee2b[2329]] = _0x8e22x3;
  _0x8e22x5[_0xee2b[2055]] = _0x8e22x6[_0xee2b[2036]](_0x8e22x5[_0xee2b[4503]]);
  _0x8e22x5[_0xee2b[266]][_0xee2b[25]](function(_0x8e22x2) {
    _0x8e22x9 = _0x8e22x2[_0xee2b[4504]](_0x8e22x5[_0xee2b[2329]]) !== false;
    _0x8e22x2[_0xee2b[3419]](_0x8e22x9);
    if (_0x8e22x9) {
      _0x8e22x4 = true;
    }
  });
  if (!_0x8e22x4) {
    return;
  }
  _0x8e22x5[_0xee2b[3622]](_0x8e22x5[_0xee2b[4503]]);
}, onContainerMouseEnter:function() {
  window[_0xee2b[4502]](this[_0xee2b[4501]]);
}, onContainerMouseLeave:function() {
  window[_0xee2b[4502]](this[_0xee2b[4501]]);
  this[_0xee2b[4501]] = Ext[_0xee2b[1854]](this[_0xee2b[256]], this[_0xee2b[4505]], this);
}, onOperationStart:function() {
  this[_0xee2b[2502]][_0xee2b[152]](_0xee2b[3106], this[_0xee2b[4498]], this);
  window[_0xee2b[4502]](this[_0xee2b[4501]]);
  this[_0xee2b[256]]();
}, onOperationEnd:function() {
  this[_0xee2b[2502]][_0xee2b[149]](_0xee2b[3106], this[_0xee2b[4498]], this);
}, destroy:function() {
  clearTimeout(this[_0xee2b[4501]]);
  this[_0xee2b[9]](arguments);
}});
Ext[_0xee2b[6]](_0xee2b[4506], {extend:_0xee2b[108], requires:[_0xee2b[717]], mixins:[_0xee2b[665]], pageHeaderHeight:41, headerHeight:41, pageFooterHeight:41, footerHeight:41, bufferedHeightMargin:25, isExporter:true, paperWidth:0, paperHeight:0, printHeight:0, lockedRowsHeight:0, normalRowsHeight:0, iterateTimeout:10, tableSelector:undefined, currentPage:undefined, headerTplDataFn:null, footerTplDataFn:null, headerTplDataFnScope:null, footerTplDataFnScope:null, config:{exporterId:_0xee2b[4507], 
id:_0xee2b[4507], name:_0xee2b[27], translateURLsToAbsolute:true, expandAllBeforeExport:false, headerTpl:_0xee2b[4508], tpl:_0xee2b[4509] + Ext[_0xee2b[238]] + _0xee2b[4510] + Ext[_0xee2b[238]] + _0xee2b[4511], footerTpl:_0xee2b[4508], rowVisibilityThreshold:0.6}, callbacks:undefined, error:undefined, extractedPages:undefined, numberOfPages:0, firstExportedRowOffset:0, secondaryCanvasOffset:0, eventBoxes:null, dependencyPainter:null, dependenciesHtml:_0xee2b[27], depViewBeforeRefreshDetacher:null, 
depView:null, collectRowsTimer:null, collectRowsTimerTimeout:1, collectRowsStepTimer:null, scrollToTimer:null, timer1:null, timer2:null, stylesheets:null, constructor:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  _0x8e22x3 = _0x8e22x3 || {};
  if (_0x8e22x3[_0xee2b[4512]]) {
    _0x8e22x3[_0xee2b[4513]] = _0x8e22x3[_0xee2b[4512]];
  }
  if (_0x8e22x3[_0xee2b[4514]]) {
    _0x8e22x3[_0xee2b[4515]] = _0x8e22x3[_0xee2b[4514]];
  }
  if (_0x8e22x3[_0xee2b[4516]]) {
    _0x8e22x3[_0xee2b[388]] = _0x8e22x3[_0xee2b[4516]];
  }
  _0x8e22x6[_0xee2b[9]](arguments);
  delete _0x8e22x3[_0xee2b[4517]];
  delete _0x8e22x3[_0xee2b[4518]];
  _0x8e22x6[_0xee2b[35]](_0x8e22x3);
  if (!_0x8e22x3[_0xee2b[4519]]) {
    _0x8e22x6[_0xee2b[4519]] = _0xee2b[495] + Ext[_0xee2b[238]] + _0xee2b[3116];
  }
  if (!_0x8e22x3[_0xee2b[683]]) {
    _0x8e22x6[_0xee2b[1267]](_0x8e22x6.L(_0xee2b[683]));
  }
}, getExporterId:function() {
  return this[_0xee2b[32]]();
}, destroy:function() {
  clearTimeout(this[_0xee2b[4520]]);
  clearTimeout(this[_0xee2b[4521]]);
  clearTimeout(this[_0xee2b[4522]]);
  clearTimeout(this[_0xee2b[4523]]);
  clearTimeout(this[_0xee2b[4524]]);
  this[_0xee2b[9]](arguments);
}, setHeaderTpl:function(_0x8e22x3) {
  this[_0xee2b[4525]] = this[_0xee2b[4526]](_0x8e22x3);
}, getHeaderTpl:function() {
  return this[_0xee2b[4525]];
}, setTpl:function(_0x8e22x3) {
  this[_0xee2b[3612]] = this[_0xee2b[4526]](_0x8e22x3);
}, getTpl:function() {
  return this[_0xee2b[3612]];
}, setFooterTpl:function(_0x8e22x3) {
  this[_0xee2b[4527]] = this[_0xee2b[4526]](_0x8e22x3);
}, getFooterTpl:function() {
  return this[_0xee2b[4527]];
}, getTplInstance:function(_0x8e22x3) {
  return _0x8e22x3 && !_0x8e22x3[_0xee2b[4528]] ? new Ext.XTemplate(_0x8e22x3, {disableFormats:true}) : _0x8e22x3;
}, getBodyClasses:function() {
  var _0x8e22x6 = new RegExp(Ext[_0xee2b[238]] + _0xee2b[4529] + Ext[_0xee2b[238]] + _0xee2b[4530], _0xee2b[4531]), _0x8e22x3 = document[_0xee2b[2179]][_0xee2b[1868]][_0xee2b[675]](_0x8e22x6, _0xee2b[27]);
  if (Ext[_0xee2b[960]]) {
    _0x8e22x3 += _0xee2b[4532];
  }
  return _0x8e22x3;
}, getComponentClasses:function() {
  return this[_0xee2b[4533]]()[_0xee2b[265]][_0xee2b[758]][_0xee2b[1868]];
}, setComponent:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  _0x8e22x6[_0xee2b[2948]] = _0x8e22x3;
  _0x8e22x6[_0xee2b[829]] = _0x8e22x3[_0xee2b[808]]();
  _0x8e22x6[_0xee2b[3380]] = _0x8e22x3[_0xee2b[3380]];
  _0x8e22x6[_0xee2b[1830]] = _0x8e22x3[_0xee2b[1830]];
  _0x8e22x6[_0xee2b[3950]] = _0x8e22x3[_0xee2b[3380]][_0xee2b[290]]();
  _0x8e22x6[_0xee2b[4022]] = _0x8e22x3[_0xee2b[1830]][_0xee2b[290]]();
  _0x8e22x6[_0xee2b[4534]] = _0xee2b[4535] + _0x8e22x6[_0xee2b[4022]][_0xee2b[32]]();
  _0x8e22x6[_0xee2b[4536]] = _0xee2b[4535] + _0x8e22x6[_0xee2b[3950]][_0xee2b[32]]();
  _0x8e22x6[_0xee2b[4537]] = _0x8e22x6[_0xee2b[1830]][_0xee2b[1848]];
  _0x8e22x6[_0xee2b[4538]] = _0x8e22x6[_0xee2b[3380]][_0xee2b[1848]];
  _0x8e22x6[_0xee2b[4513]] = _0x8e22x6[_0xee2b[4538]][_0xee2b[859]]();
  _0x8e22x6[_0xee2b[4539]] = Math[_0xee2b[424]](_0x8e22x6[_0xee2b[4540]]) - _0x8e22x6[_0xee2b[4513]] - (_0x8e22x6[_0xee2b[4542]][_0xee2b[4541]] ? _0x8e22x6[_0xee2b[4513]] : 0) - (_0x8e22x6[_0xee2b[4542]][_0xee2b[4543]] ? _0x8e22x6[_0xee2b[4515]] : 0);
  _0x8e22x6[_0xee2b[4544]](_0x8e22x3);
  _0x8e22x6[_0xee2b[4545]](_0x8e22x3);
}, getComponent:function() {
  return this[_0xee2b[2948]];
}, setPaperSize:function(_0x8e22x3, _0x8e22x6) {
  var _0x8e22x4 = this;
  if (_0x8e22x6 === _0xee2b[4546]) {
    _0x8e22x4[_0xee2b[4547]] = _0x8e22x3[_0xee2b[747]];
    _0x8e22x4[_0xee2b[4540]] = _0x8e22x3[_0xee2b[773]];
  } else {
    _0x8e22x4[_0xee2b[4547]] = _0x8e22x3[_0xee2b[773]];
    _0x8e22x4[_0xee2b[4540]] = _0x8e22x3[_0xee2b[747]];
  }
}, getPaperFormat:function() {
  return this[_0xee2b[4542]][_0xee2b[880]];
}, isBuffered:function() {
  return !!this[_0xee2b[4548]]();
}, getBufferedRenderer:function() {
  return this[_0xee2b[829]][_0xee2b[2478]];
}, setComponentRange:function(_0x8e22x5) {
  var _0x8e22x9 = this, _0x8e22x4 = _0x8e22x9[_0xee2b[4533]]();
  if (_0x8e22x5[_0xee2b[4549]] !== _0xee2b[4550]) {
    var _0x8e22x6 = _0x8e22x9[_0xee2b[829]], _0x8e22x3, _0x8e22x1;
    switch(_0x8e22x5[_0xee2b[4549]]) {
      case _0xee2b[1097]:
        _0x8e22x3 = new Date(_0x8e22x5[_0xee2b[4551]]);
        _0x8e22x1 = new Date(_0x8e22x5[_0xee2b[4552]]);
        if (Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[1170]](_0x8e22x3, _0x8e22x1) < 1) {
          _0x8e22x1 = Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[255]](_0x8e22x1, Sch[_0xee2b[49]][_0xee2b[703]].DAY, 1);
        }
        break;
      case _0xee2b[4553]:
        var _0x8e22x7 = _0x8e22x6[_0xee2b[2894]]();
        _0x8e22x3 = _0x8e22x7[_0xee2b[1138]];
        _0x8e22x1 = _0x8e22x7[_0xee2b[1139]] || _0x8e22x6[_0xee2b[1795]][_0xee2b[698]]();
        break;
      case _0xee2b[4554]:
        var _0x8e22x2 = _0x8e22x4[_0xee2b[696]]()[_0xee2b[3535]]();
        _0x8e22x3 = _0x8e22x2[_0xee2b[179]];
        _0x8e22x1 = _0x8e22x2[_0xee2b[771]];
        break;
    }
    if (_0x8e22x3 && _0x8e22x1) {
      _0x8e22x4[_0xee2b[1756]](_0x8e22x3, _0x8e22x1);
    }
  }
  _0x8e22x9[_0xee2b[4555]] = _0x8e22x4[_0xee2b[1795]][_0xee2b[4556]]();
  if (_0x8e22x5[_0xee2b[4557]] == _0xee2b[1690]) {
    _0x8e22x5[_0xee2b[4557]] = _0x8e22x9[_0xee2b[4558]]();
  } else {
    _0x8e22x5[_0xee2b[4557]] = null;
  }
}, getStylesheets:function() {
  var _0x8e22x5 = this[_0xee2b[4559]](), _0x8e22x3 = Ext[_0xee2b[760]](_0xee2b[4560], true), _0x8e22x4 = _0xee2b[27];
  var _0x8e22x6 = window[_0xee2b[4561]];
  _0x8e22x3[_0xee2b[25]](function(_0x8e22x1) {
    var _0x8e22x2 = _0x8e22x1[_0xee2b[758]][_0xee2b[2263]](true);
    if (_0x8e22x5 && _0x8e22x2[_0xee2b[4562]]) {
      _0x8e22x2[_0xee2b[4563]](_0xee2b[4562], _0x8e22x5 === true ? _0x8e22x2[_0xee2b[4562]] : _0x8e22x2[_0xee2b[4562]][_0xee2b[675]](_0x8e22x6, _0x8e22x5));
    }
    _0x8e22x4 += _0x8e22x2[_0xee2b[4564]];
    if (Ext[_0xee2b[960]] && _0x8e22x2[_0xee2b[4565]] && /style/i[_0xee2b[2881]](_0x8e22x2[_0xee2b[4380]])) {
      _0x8e22x4 += _0xee2b[4566] + _0x8e22x1[_0xee2b[758]][_0xee2b[4565]][_0xee2b[4567]] + _0xee2b[4568];
    }
  });
  return _0x8e22x4;
}, forEachTimeSpanPlugin:function(_0x8e22x4, _0x8e22x1, _0x8e22x2) {
  if (Sch[_0xee2b[822]] && Sch[_0xee2b[822]][_0xee2b[4569]]) {
    var _0x8e22x7 = this;
    var _0x8e22x6 = [][_0xee2b[318]](_0x8e22x4[_0xee2b[3484]], _0x8e22x4[_0xee2b[3380]][_0xee2b[3484]], _0x8e22x4[_0xee2b[3497]]);
    for (var _0x8e22x5 = 0, _0x8e22x3 = _0x8e22x6[_0xee2b[4]]; _0x8e22x5 < _0x8e22x3; _0x8e22x5++) {
      var _0x8e22x9 = _0x8e22x6[_0x8e22x5];
      if (_0x8e22x9 instanceof Sch[_0xee2b[822]][_0xee2b[4569]]) {
        _0x8e22x1[_0xee2b[293]](_0x8e22x2 || _0x8e22x7, _0x8e22x9);
      }
    }
  }
}, setCellSize:function(_0x8e22x6) {
  var _0x8e22x3 = this;
  _0x8e22x3[_0xee2b[2679]] = _0x8e22x6[0];
  if (_0x8e22x3[_0xee2b[2679]]) {
    this[_0xee2b[4533]]()[_0xee2b[4570]](_0x8e22x3[_0xee2b[2679]]);
  }
  if (_0x8e22x6[_0xee2b[4]] > 1) {
    _0x8e22x3[_0xee2b[829]][_0xee2b[2811]](_0x8e22x6[1]);
  }
}, findVisibleRowsRange:function() {
  var _0x8e22x1 = this, _0x8e22x7 = _0x8e22x1[_0xee2b[4022]][_0xee2b[2862]], _0x8e22x8 = _0x8e22x7[_0xee2b[2861]], _0x8e22x2 = _0x8e22x7[_0xee2b[2863]];
  var _0x8e22x9 = false, _0x8e22x4 = -1, _0x8e22x3 = -1;
  for (var _0x8e22x5 = _0x8e22x8; _0x8e22x5 <= _0x8e22x2; _0x8e22x5++) {
    var _0x8e22x6 = _0x8e22x7[_0xee2b[2971]](_0x8e22x5, true);
    if (_0x8e22x1[_0xee2b[2857]](_0x8e22x6, _0x8e22x1[_0xee2b[4571]])) {
      if (!_0x8e22x9) {
        _0x8e22x4 = _0x8e22x5;
        _0x8e22x9 = true;
      }
      _0x8e22x3 = _0x8e22x5;
    } else {
      if (_0x8e22x9) {
        break;
      }
    }
  }
  return [_0x8e22x4, _0x8e22x3];
}, prepareComponent:function(_0x8e22x6, _0x8e22x3) {
  var _0x8e22x4 = this;
  _0x8e22x6 = _0x8e22x6 || _0x8e22x4[_0xee2b[4533]]();
  _0x8e22x4[_0xee2b[4572]](_0x8e22x6);
  _0x8e22x4[_0xee2b[4574]](_0x8e22x6, function(_0x8e22x5) {
    _0x8e22x5[_0xee2b[4573]] = _0x8e22x5[_0xee2b[1853]];
    _0x8e22x5[_0xee2b[1853]] = 0;
  });
  _0x8e22x6[_0xee2b[808]]()[_0xee2b[810]][_0xee2b[2742]] = true;
  _0x8e22x6[_0xee2b[1795]][_0xee2b[1746]] = false;
  _0x8e22x6[_0xee2b[3380]][_0xee2b[103]]();
  _0x8e22x6[_0xee2b[1830]][_0xee2b[103]]();
  if (Ext[_0xee2b[2009]]()[_0xee2b[966]](_0xee2b[2836])) {
    _0x8e22x4[_0xee2b[4571]] = _0x8e22x4[_0xee2b[1830]][_0xee2b[2179]][_0xee2b[2611]]();
    _0x8e22x4[_0xee2b[4575]] = _0x8e22x4[_0xee2b[3380]][_0xee2b[2179]][_0xee2b[2611]]();
  } else {
    _0x8e22x4[_0xee2b[4571]] = _0x8e22x4[_0xee2b[4022]][_0xee2b[2611]]();
    _0x8e22x4[_0xee2b[4575]] = _0x8e22x4[_0xee2b[3950]][_0xee2b[2611]]();
  }
  _0x8e22x4[_0xee2b[4576]](_0x8e22x3);
  _0x8e22x3[_0xee2b[4577]] && _0x8e22x4[_0xee2b[4578]](_0x8e22x3[_0xee2b[4577]]);
  _0x8e22x3[_0xee2b[4579]] && _0x8e22x3[_0xee2b[4579]](_0x8e22x6, _0x8e22x4[_0xee2b[4555]]);
  _0x8e22x4[_0xee2b[4580]](_0x8e22x3[_0xee2b[3374]]);
  if (_0x8e22x4[_0xee2b[4581]] && _0x8e22x6[_0xee2b[4582]]) {
    _0x8e22x6[_0xee2b[4582]]();
  }
  _0x8e22x4[_0xee2b[4583]](_0x8e22x3);
  _0x8e22x4[_0xee2b[829]][_0xee2b[810]][_0xee2b[811]](_0x8e22x4[_0xee2b[829]][_0xee2b[810]][_0xee2b[755]]());
  _0x8e22x4[_0xee2b[4584]] = _0x8e22x4[_0xee2b[4585]]();
}, prepareColumns:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  if (_0x8e22x3 && _0x8e22x3[_0xee2b[4]]) {
    _0x8e22x6[_0xee2b[1830]][_0xee2b[1848]][_0xee2b[266]][_0xee2b[25]](function(_0x8e22x4) {
      if (Ext[_0xee2b[26]][_0xee2b[1087]](_0x8e22x3, _0x8e22x4)) {
        _0x8e22x4[_0xee2b[2019]]();
      } else {
        _0x8e22x4[_0xee2b[256]]();
      }
    });
  }
}, restoreComponent:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  _0x8e22x3 = _0x8e22x3 || _0x8e22x6[_0xee2b[4533]]();
  _0x8e22x6[_0xee2b[4574]](_0x8e22x3, function(_0x8e22x4) {
    _0x8e22x4[_0xee2b[1853]] = _0x8e22x4[_0xee2b[4573]];
    delete _0x8e22x4[_0xee2b[4573]];
  });
  if (_0x8e22x6[_0xee2b[4586]]) {
    _0x8e22x6[_0xee2b[4586]][_0xee2b[218]]();
    _0x8e22x6[_0xee2b[4586]] = null;
    _0x8e22x6[_0xee2b[4588]][_0xee2b[4587]]();
  }
  _0x8e22x6[_0xee2b[4589]](_0x8e22x3);
  _0x8e22x6[_0xee2b[4590]](_0x8e22x3);
  _0x8e22x6[_0xee2b[4542]][_0xee2b[4591]] && _0x8e22x6[_0xee2b[4542]][_0xee2b[4591]](_0x8e22x3);
}, saveComponentState:function(_0x8e22x9) {
  _0x8e22x9 = _0x8e22x9 || this[_0xee2b[4533]]();
  var _0x8e22x2 = this, _0x8e22x1 = _0x8e22x9[_0xee2b[808]](), _0x8e22x5 = _0x8e22x9[_0xee2b[3380]], _0x8e22x3 = _0x8e22x9[_0xee2b[1830]];
  var _0x8e22x6 = [];
  _0x8e22x3[_0xee2b[1848]][_0xee2b[266]][_0xee2b[25]](function(_0x8e22x8) {
    _0x8e22x6[_0xee2b[11]]({column:_0x8e22x8, visible:!_0x8e22x8[_0xee2b[4451]]()});
  });
  var _0x8e22x7 = _0x8e22x1[_0xee2b[810]];
  var _0x8e22xa = _0x8e22x7[_0xee2b[2717]];
  var _0x8e22x4 = _0x8e22x7[_0xee2b[755]]();
  _0x8e22x7[_0xee2b[811]](_0x8e22x4, true);
  _0x8e22x2[_0xee2b[4592]] = {width:_0x8e22x9[_0xee2b[793]](), height:_0x8e22x9[_0xee2b[859]](), rowHeight:_0x8e22x7[_0xee2b[2832]](), originalTickWidth:_0x8e22xa, columnWidth:_0x8e22x4, startDate:_0x8e22x9[_0xee2b[697]](), endDate:_0x8e22x9[_0xee2b[698]](), normalWidth:_0x8e22x5[_0xee2b[793]](), normalLeft:_0x8e22x5[_0xee2b[787]]()[_0xee2b[2425]](_0xee2b[1354]), lockedWidth:_0x8e22x3[_0xee2b[793]](), lockedCollapse:_0x8e22x3[_0xee2b[2469]], normalCollapse:_0x8e22x5[_0xee2b[2469]], columns:_0x8e22x6, 
  autoAdjust:_0x8e22x9[_0xee2b[1795]][_0xee2b[1746]], suppressFit:_0x8e22x7[_0xee2b[2742]], startIndex:_0x8e22x1[_0xee2b[2862]][_0xee2b[2861]], lockedScrollX:_0x8e22x2[_0xee2b[4022]][_0xee2b[1920]](), normalScrollX:_0x8e22x1[_0xee2b[1920]](), scrollY:_0x8e22x1[_0xee2b[1922]]()};
}, restoreComponentState:function(_0x8e22x4) {
  var _0x8e22x5 = this;
  _0x8e22x4 = _0x8e22x4 || _0x8e22x5[_0xee2b[4533]]();
  var _0x8e22x6 = _0x8e22x5[_0xee2b[4592]], _0x8e22x3 = _0x8e22x4[_0xee2b[808]]();
  _0x8e22x4[_0xee2b[1795]][_0xee2b[1746]] = _0x8e22x6[_0xee2b[1746]];
  _0x8e22x4[_0xee2b[3380]][_0xee2b[2019]]();
  _0x8e22x4[_0xee2b[839]](_0x8e22x6[_0xee2b[773]]);
  _0x8e22x4[_0xee2b[863]](_0x8e22x6[_0xee2b[747]]);
  _0x8e22x4[_0xee2b[1756]](_0x8e22x6[_0xee2b[1138]], _0x8e22x6[_0xee2b[1139]]);
  _0x8e22x4[_0xee2b[4570]](_0x8e22x6[_0xee2b[4593]], true);
  _0x8e22x4[_0xee2b[2811]](_0x8e22x6[_0xee2b[2678]]);
  Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x6[_0xee2b[3374]], function(_0x8e22x2) {
    _0x8e22x2[_0xee2b[2963]][_0xee2b[3419]](_0x8e22x2[_0xee2b[1690]]);
  });
  _0x8e22x4[_0xee2b[1830]][_0xee2b[2019]]();
  _0x8e22x4[_0xee2b[3380]][_0xee2b[839]](_0x8e22x6[_0xee2b[4594]]);
  _0x8e22x4[_0xee2b[3380]][_0xee2b[787]]()[_0xee2b[2051]](_0xee2b[1354], _0x8e22x6[_0xee2b[4595]]);
  _0x8e22x4[_0xee2b[1830]][_0xee2b[839]](_0x8e22x6[_0xee2b[4596]]);
  _0x8e22x3[_0xee2b[810]][_0xee2b[2742]] = _0x8e22x6[_0xee2b[2742]];
  _0x8e22x3[_0xee2b[810]][_0xee2b[811]](_0x8e22x6[_0xee2b[4593]]);
  _0x8e22x3[_0xee2b[810]][_0xee2b[2717]] = _0x8e22x6[_0xee2b[2717]];
  if (_0x8e22x6[_0xee2b[4597]]) {
    _0x8e22x4[_0xee2b[1830]][_0xee2b[104]]();
  }
  if (_0x8e22x6[_0xee2b[4598]]) {
    _0x8e22x4[_0xee2b[3380]][_0xee2b[104]]();
  }
  _0x8e22x5[_0xee2b[4599]](_0x8e22x6);
}, restoreComponentScroll:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  _0x8e22x6[_0xee2b[4022]][_0xee2b[3153]](_0x8e22x3[_0xee2b[4600]]);
  _0x8e22x6[_0xee2b[3950]][_0xee2b[289]](_0x8e22x3[_0xee2b[4601]], _0x8e22x3[_0xee2b[4602]]);
}, extractPages:function(_0x8e22x6, _0x8e22x3, _0x8e22x2, _0x8e22x4) {
  var _0x8e22x5 = this;
  if (!_0x8e22x2) {
    throw _0xee2b[4603];
  }
  _0x8e22x5[_0xee2b[4604]] = Ext[_0xee2b[4604]];
  Ext[_0xee2b[4604]] = false;
  Ext[_0xee2b[758]][_0xee2b[4605]][_0xee2b[165]]();
  _0x8e22x5[_0xee2b[4542]] = _0x8e22x3;
  _0x8e22x5[_0xee2b[4606]] = [];
  _0x8e22x5[_0xee2b[4607]] = [];
  _0x8e22x5[_0xee2b[4608]] = [];
  _0x8e22x5[_0xee2b[4609]] = 0;
  _0x8e22x5[_0xee2b[4610]] = 0;
  _0x8e22x5[_0xee2b[4611]] = 0;
  _0x8e22x5[_0xee2b[4612]] = 0;
  _0x8e22x5[_0xee2b[4613]] = 0;
  _0x8e22x5[_0xee2b[4614]] = false;
  _0x8e22x5[_0xee2b[4584]] = null;
  _0x8e22x5[_0xee2b[4615]](_0x8e22x3[_0xee2b[352]], _0x8e22x3[_0xee2b[3378]]);
  _0x8e22x5[_0xee2b[4616]](_0x8e22x6, _0x8e22x3);
  _0x8e22x5[_0xee2b[4617]](_0x8e22x6, _0x8e22x3);
  _0x8e22x5[_0xee2b[4618]] = {success:_0x8e22x2, scope:_0x8e22x4 || _0x8e22x5};
  _0x8e22x5[_0xee2b[4521]] = setTimeout(function() {
    _0x8e22x5[_0xee2b[4619]](_0x8e22x5._onRowsCollected, _0x8e22x5, _0x8e22x3);
  }, _0x8e22x5[_0xee2b[4620]]);
}, onPagesExtracted:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  _0x8e22x3 = _0x8e22x6[_0xee2b[4621]](_0x8e22x3);
  _0x8e22x6[_0xee2b[4622]]();
  _0x8e22x6[_0xee2b[4623]](_0x8e22x3);
}, submitPages:function(_0x8e22x3) {
  var _0x8e22x4 = this, _0x8e22x6 = _0x8e22x4[_0xee2b[4618]];
  _0x8e22x6[_0xee2b[426]][_0xee2b[293]](_0x8e22x6[_0xee2b[689]], _0x8e22x3);
  Ext[_0xee2b[4604]] = _0x8e22x4[_0xee2b[4604]];
  Ext[_0xee2b[758]][_0xee2b[4605]][_0xee2b[166]]();
}, getCurrentPage:function() {
  return this[_0xee2b[356]];
}, setCurrentPage:function(_0x8e22x3) {
  this[_0xee2b[356]] = _0x8e22x3;
}, getExpectedNumberOfPages:function() {
  throw _0xee2b[4624];
}, commitPage:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  _0x8e22x6[_0xee2b[4609]]++;
  var _0x8e22x5 = _0x8e22x6[_0xee2b[4625]](_0x8e22x3);
  _0x8e22x6[_0xee2b[180]](_0xee2b[4626], _0x8e22x6, _0x8e22x5, _0x8e22x6[_0xee2b[4609]], _0x8e22x6[_0xee2b[4627]]());
  var _0x8e22x4 = Ext[_0xee2b[8]]({html:_0x8e22x5[_0xee2b[758]][_0xee2b[4564]], number:_0x8e22x6[_0xee2b[4609]]}, _0x8e22x3);
  _0x8e22x6[_0xee2b[4608]][_0xee2b[11]](_0x8e22x4);
  _0x8e22x6[_0xee2b[180]](_0xee2b[4628], _0x8e22x6, _0x8e22x4, _0x8e22x6[_0xee2b[4609]], _0x8e22x6[_0xee2b[4627]]());
}, collectLockedRow:function(_0x8e22x2, _0x8e22x4, _0x8e22x1) {
  var _0x8e22x5 = Ext[_0xee2b[55]](_0x8e22x2), _0x8e22x6 = _0x8e22x5[_0xee2b[859]]() - (_0x8e22x1 ? _0x8e22x5[_0xee2b[3968]](_0xee2b[1997]) : 0);
  this[_0xee2b[4610]] += _0x8e22x6;
  var _0x8e22x3 = {height:_0x8e22x6, row:_0x8e22x2[_0xee2b[2263]](true), record:this[_0xee2b[4022]][_0xee2b[37]](_0x8e22x4)};
  this[_0xee2b[4607]][_0xee2b[11]](_0x8e22x3);
  return _0x8e22x3;
}, collectNormalRow:function(_0x8e22x2, _0x8e22x4, _0x8e22x1) {
  var _0x8e22x5 = Ext[_0xee2b[55]](_0x8e22x2), _0x8e22x6 = _0x8e22x5[_0xee2b[859]]() - (_0x8e22x1 ? _0x8e22x5[_0xee2b[3968]](_0xee2b[1997]) : 0);
  this[_0xee2b[4611]] += _0x8e22x6;
  var _0x8e22x3 = {height:_0x8e22x6, row:_0x8e22x2[_0xee2b[2263]](true), record:this[_0xee2b[3950]][_0xee2b[37]](_0x8e22x4)};
  this[_0xee2b[4606]][_0xee2b[11]](_0x8e22x3);
  if (this[_0xee2b[4588]] && this[_0xee2b[4588]][_0xee2b[1306]]()) {
    this[_0xee2b[4629]](_0x8e22x3[_0xee2b[933]]);
  }
  return _0x8e22x3;
}, _onRowsCollected:function() {
  var _0x8e22x6 = this, _0x8e22x3 = _0x8e22x6[_0xee2b[4588]];
  if (_0x8e22x3 && _0x8e22x3[_0xee2b[1306]]()) {
    _0x8e22x6[_0xee2b[3889]]();
  }
  _0x8e22x6[_0xee2b[4630]][_0xee2b[8]](_0x8e22x6, arguments);
}, onRowsCollected:function() {
  throw _0xee2b[4631];
}, _abort:false, abort:function() {
  this[_0xee2b[4614]] = function() {
    this[_0xee2b[4622]]();
  };
}, iterateAsync:function(_0x8e22x4, _0x8e22x6) {
  var _0x8e22x5 = this;
  _0x8e22x6 = _0x8e22x6 || _0x8e22x5;
  var _0x8e22x3 = function() {
    var _0x8e22x2 = arguments;
    _0x8e22x5[_0xee2b[4524]] = setTimeout(function() {
      !_0x8e22x5[_0xee2b[4614]] ? _0x8e22x4[_0xee2b[8]](_0x8e22x6, [][_0xee2b[318]][_0xee2b[8]]([_0x8e22x3], _0x8e22x2)) : _0x8e22x5._abort();
    }, _0x8e22x5[_0xee2b[4632]]);
  };
  _0x8e22x3[_0xee2b[8]](_0x8e22x5, Ext[_0xee2b[26]][_0xee2b[191]](arguments, 2));
}, callAsync:function(_0x8e22x6, _0x8e22x3) {
  _0x8e22x3 = _0x8e22x3 || this;
  this[_0xee2b[4523]] = setTimeout(function() {
    _0x8e22x6[_0xee2b[8]](_0x8e22x3, Ext[_0xee2b[26]][_0xee2b[191]](arguments, 2));
  }, this[_0xee2b[4632]]);
}, canStartRowsCollecting:function() {
  var _0x8e22x6 = this[_0xee2b[4533]](), _0x8e22x3 = _0x8e22x6[_0xee2b[3910]]();
  return !_0x8e22x3 || _0x8e22x3[_0xee2b[3801]]();
}, depViewRefreshBlocker:function() {
  return false;
}, collectRows:function(_0x8e22x7, _0x8e22x5, _0x8e22x6) {
  var _0x8e22x1 = this, _0x8e22x9 = 0;
  if (!_0x8e22x1[_0xee2b[4633]]()) {
    var _0x8e22x3 = Ext[_0xee2b[26]][_0xee2b[191]](arguments, 0);
    _0x8e22x1[_0xee2b[4521]] = setTimeout(function() {
      _0x8e22x1[_0xee2b[4619]][_0xee2b[8]](_0x8e22x1, _0x8e22x3);
    }, _0x8e22x1[_0xee2b[4620]]);
    return;
  }
  var _0x8e22x2 = _0x8e22x1[_0xee2b[4533]]()[_0xee2b[3910]]();
  if (_0x8e22x1[_0xee2b[4588]]) {
    _0x8e22x1[_0xee2b[4586]] = _0x8e22x2[_0xee2b[149]]({beforerefresh:_0x8e22x1[_0xee2b[4634]], destroyable:true});
  }
  var _0x8e22x4 = _0x8e22x1[_0xee2b[4635]]();
  if (_0x8e22x6[_0xee2b[4557]]) {
    _0x8e22x9 = _0x8e22x6[_0xee2b[4557]][0];
    _0x8e22x4 = !(_0x8e22x6[_0xee2b[4557]][0] >= _0x8e22x1[_0xee2b[829]][_0xee2b[2862]][_0xee2b[2861]] && _0x8e22x6[_0xee2b[4557]][1] <= _0x8e22x1[_0xee2b[829]][_0xee2b[2862]][_0xee2b[2863]]);
  }
  if (_0x8e22x4) {
    _0x8e22x1[_0xee2b[4522]] = setTimeout(function() {
      _0x8e22x1[_0xee2b[289]](_0x8e22x9, function() {
        _0x8e22x9 && _0x8e22x1[_0xee2b[4636]](_0x8e22x9);
        _0x8e22x1[_0xee2b[4638]](_0x8e22x1[_0xee2b[4637]], _0x8e22x1, _0x8e22x9, _0x8e22x7, _0x8e22x5, _0x8e22x6);
      });
    }, 1);
  } else {
    _0x8e22x9 && _0x8e22x1[_0xee2b[4636]](_0x8e22x9);
    _0x8e22x1[_0xee2b[4520]] = setTimeout(function() {
      _0x8e22x1[_0xee2b[4637]](null, _0x8e22x9, _0x8e22x7, _0x8e22x5, _0x8e22x6);
    }, 1);
  }
}, initFirstExportedRowOffset:function(_0x8e22x3) {
  this[_0xee2b[4612]] = this[_0xee2b[829]][_0xee2b[265]][_0xee2b[4639]]() - this[_0xee2b[829]][_0xee2b[265]][_0xee2b[2421]]() + Ext[_0xee2b[761]](this[_0xee2b[829]][_0xee2b[2515]](_0x8e22x3))[_0xee2b[2421]]();
}, isRowVisible:function(_0x8e22x5, _0x8e22x3) {
  var _0x8e22x6 = Ext[_0xee2b[761]](_0x8e22x5), _0x8e22x1 = _0x8e22x6[_0xee2b[2421]](), _0x8e22x2 = _0x8e22x6[_0xee2b[859]](), _0x8e22x9 = _0x8e22x1 + _0x8e22x2, _0x8e22x4 = (1 - this[_0xee2b[4640]]()) * _0x8e22x2;
  return _0x8e22x1 + _0x8e22x4 > _0x8e22x3[_0xee2b[686]] && _0x8e22x9 - _0x8e22x4 < _0x8e22x3[_0xee2b[754]];
}, collectRowsStep:function(_0x8e22x9, _0x8e22xb, _0x8e22x11, _0x8e22x19, _0x8e22x3) {
  var _0x8e22xc = this, _0x8e22x1 = _0x8e22xc[_0xee2b[3950]][_0xee2b[2862]][_0xee2b[2863]], _0x8e22xd = _0x8e22xc[_0xee2b[2948]][_0xee2b[64]][_0xee2b[1466]](), _0x8e22x5 = _0x8e22x3[_0xee2b[4557]], _0x8e22xe = _0x8e22xc[_0xee2b[3950]][_0xee2b[2862]][_0xee2b[191]](_0x8e22xb), _0x8e22x6 = _0x8e22xc[_0xee2b[4022]][_0xee2b[2862]][_0xee2b[191]](_0x8e22xb), _0x8e22x2 = 0;
  var _0x8e22x7;
  if (_0x8e22x5) {
    _0x8e22x7 = _0x8e22x5[1];
  }
  var _0x8e22xf = false;
  for (var _0x8e22x8 = _0x8e22xb, _0x8e22x4 = _0x8e22xe[_0xee2b[4]]; _0x8e22x2 < _0x8e22x4; _0x8e22x2++) {
    if (_0x8e22x8 > _0x8e22x7) {
      _0x8e22xf = true;
      break;
    }
    _0x8e22x6[_0x8e22x2] && _0x8e22xc[_0xee2b[4641]](_0x8e22x6[_0x8e22x2], _0x8e22x8, _0x8e22x2 + 1 === _0x8e22x4);
    _0x8e22xc[_0xee2b[4642]](_0x8e22xe[_0x8e22x2], _0x8e22x8, _0x8e22x2 + 1 === _0x8e22x4);
    _0x8e22x8++;
  }
  _0x8e22xc[_0xee2b[180]](_0xee2b[4643], _0x8e22xc, _0x8e22xb, _0x8e22x8, _0x8e22xd);
  if (!_0x8e22xf && _0x8e22xc[_0xee2b[4635]]()) {
    if (_0x8e22x1 + 1 < _0x8e22xd) {
      _0x8e22xc[_0xee2b[4644]](function() {
        _0x8e22xc[_0xee2b[289]](_0x8e22x1 + 1, function() {
          _0x8e22x9(_0x8e22x1 + 1, _0x8e22x11, _0x8e22x19, _0x8e22x3);
        });
      });
    } else {
      _0x8e22xc[_0xee2b[4644]](function() {
        _0x8e22xc[_0xee2b[289]](0, function() {
          _0x8e22x11[_0xee2b[293]](_0x8e22x19 || _0x8e22xc, _0x8e22xc[_0xee2b[4607]], _0x8e22xc[_0xee2b[4606]]);
        });
      });
    }
  } else {
    _0x8e22x11[_0xee2b[293]](_0x8e22x19 || _0x8e22xc, _0x8e22xc[_0xee2b[4607]], _0x8e22xc[_0xee2b[4606]]);
  }
}, renderPages:function(_0x8e22x3) {
  var _0x8e22x5 = this;
  _0x8e22x3 = _0x8e22x3 || _0x8e22x5[_0xee2b[4608]];
  for (var _0x8e22x4 = 0, _0x8e22x6 = _0x8e22x3[_0xee2b[4]]; _0x8e22x4 < _0x8e22x6; _0x8e22x4++) {
    var _0x8e22x2 = _0x8e22x3[_0x8e22x4];
    _0x8e22x2[_0xee2b[4645]] = _0x8e22x5[_0xee2b[4646]](_0x8e22x2);
  }
  return _0x8e22x3;
}, applyPageTpl:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  return _0x8e22x6[_0xee2b[4648]]()[_0xee2b[8]](_0x8e22x6[_0xee2b[4647]](_0x8e22x3));
}, applyHeaderTpl:function(_0x8e22x4) {
  var _0x8e22x5 = this, _0x8e22x9 = _0x8e22x5[_0xee2b[4649]]();
  if (_0x8e22x5[_0xee2b[4542]][_0xee2b[4541]] && _0x8e22x9) {
    var _0x8e22x6 = _0x8e22x5[_0xee2b[4650]];
    var _0x8e22x2 = _0x8e22x6 && _0x8e22x6[_0xee2b[293]](_0x8e22x5[_0xee2b[4651]] || _0x8e22x5, _0x8e22x4);
    var _0x8e22x3 = _0x8e22x9[_0xee2b[8]](Ext[_0xee2b[8]](_0x8e22x5[_0xee2b[4652]](_0x8e22x4), _0x8e22x2));
    var _0x8e22x1 = document[_0xee2b[3662]](_0xee2b[2258]);
    _0x8e22x1[_0xee2b[3737]] = _0x8e22x3;
    Ext[_0xee2b[761]](_0x8e22x1)[_0xee2b[760]](_0xee2b[4654])[_0xee2b[25]](function(_0x8e22x7) {
      _0x8e22x7[_0xee2b[758]][_0xee2b[4563]](_0xee2b[4653], _0x8e22x7[_0xee2b[758]][_0xee2b[4653]]);
    });
    return _0x8e22x1[_0xee2b[3737]];
  }
  return _0xee2b[27];
}, applyFooterTpl:function(_0x8e22x6) {
  var _0x8e22x4 = this, _0x8e22x9 = _0x8e22x4[_0xee2b[4655]]();
  if (_0x8e22x4[_0xee2b[4542]][_0xee2b[4543]] && _0x8e22x9) {
    var _0x8e22x3 = _0x8e22x4[_0xee2b[4656]];
    var _0x8e22x5 = _0x8e22x3 && _0x8e22x3[_0xee2b[293]](_0x8e22x4[_0xee2b[4657]] || _0x8e22x4, _0x8e22x6);
    var _0x8e22x1 = _0x8e22x9[_0xee2b[8]](Ext[_0xee2b[8]](_0x8e22x4[_0xee2b[4658]](_0x8e22x6), _0x8e22x5));
    var _0x8e22x2 = document[_0xee2b[3662]](_0xee2b[2258]);
    _0x8e22x2[_0xee2b[3737]] = _0x8e22x1;
    Ext[_0xee2b[761]](_0x8e22x2)[_0xee2b[760]](_0xee2b[4654])[_0xee2b[25]](function(_0x8e22x7) {
      _0x8e22x7[_0xee2b[758]][_0xee2b[4563]](_0xee2b[4653], _0x8e22x7[_0xee2b[758]][_0xee2b[4653]]);
    });
    return _0x8e22x2[_0xee2b[3737]];
  }
  return _0xee2b[27];
}, getHeaderTplData:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  return {width:_0x8e22x6[_0xee2b[4547]], height:_0x8e22x6[_0xee2b[4513]], totalPages:_0x8e22x6[_0xee2b[4609]], pageNo:_0x8e22x3[_0xee2b[1135]]};
}, getFooterTplData:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  return {width:_0x8e22x6[_0xee2b[4547]], height:_0x8e22x6[_0xee2b[4515]], totalPages:_0x8e22x6[_0xee2b[4609]], pageNo:_0x8e22x3[_0xee2b[1135]]};
}, getPageTplData:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  return {id:_0x8e22x6[_0xee2b[4533]]()[_0xee2b[388]], bodyClasses:_0x8e22x6[_0xee2b[4659]](), bodyHeight:_0x8e22x6[_0xee2b[4539]] + _0x8e22x6[_0xee2b[4513]], componentClasses:_0x8e22x6[_0xee2b[4660]](), styles:_0x8e22x6[_0xee2b[4584]], showHeader:_0x8e22x6[_0xee2b[4542]][_0xee2b[4541]], showFooter:_0x8e22x6[_0xee2b[4542]][_0xee2b[4543]], header:_0x8e22x6[_0xee2b[4661]](_0x8e22x3), HTML:_0x8e22x3[_0xee2b[4645]], footer:_0x8e22x6[_0xee2b[4662]](_0x8e22x3), totalWidth:_0x8e22x6[_0xee2b[4547]], pageNo:_0x8e22x3[_0xee2b[1135]], 
  totalPages:_0x8e22x6[_0xee2b[4609]], title:_0x8e22x3[_0xee2b[1135]] + _0xee2b[4663] + _0x8e22x6[_0xee2b[4609]]};
}, fitComponentIntoPage:Ext[_0xee2b[688]], getLockedGridBody:function(_0x8e22x3) {
  _0x8e22x3 = _0x8e22x3 || this[_0xee2b[4664]]();
  return _0x8e22x3[_0xee2b[861]](this[_0xee2b[4534]] + _0xee2b[60] + this[_0xee2b[4519]], true);
}, getNormalGridBody:function(_0x8e22x3) {
  _0x8e22x3 = _0x8e22x3 || this[_0xee2b[4664]]();
  return _0x8e22x3[_0xee2b[861]](this[_0xee2b[4536]] + _0xee2b[60] + this[_0xee2b[4519]], true);
}, emptyLockedGrid:function(_0x8e22x3) {
  Ext[_0xee2b[761]](this[_0xee2b[4666]](_0x8e22x3))[_0xee2b[760]](this[_0xee2b[4022]][_0xee2b[4665]]())[_0xee2b[63]]();
}, fillGrids:function(_0x8e22x4, _0x8e22x6, _0x8e22x2, _0x8e22x3) {
  var _0x8e22x5 = this;
  _0x8e22x5[_0xee2b[4667]](_0x8e22x4, _0x8e22x2, _0x8e22x3);
  _0x8e22x5[_0xee2b[4668]](_0x8e22x6, _0x8e22x2, _0x8e22x3);
}, fillLockedGrid:function(_0x8e22x4, _0x8e22x5, _0x8e22x3) {
  var _0x8e22x6 = this;
  if (!_0x8e22x3) {
    _0x8e22x6[_0xee2b[4669]]();
  }
  _0x8e22x6[_0xee2b[4670]](_0x8e22x6[_0xee2b[4666]](), _0x8e22x4 || _0x8e22x6[_0xee2b[4607]], _0x8e22x5);
}, fillNormalGrid:function(_0x8e22x4, _0x8e22x5, _0x8e22x3) {
  var _0x8e22x6 = this;
  if (!_0x8e22x3) {
    _0x8e22x6[_0xee2b[4671]]();
  }
  _0x8e22x6[_0xee2b[4670]](_0x8e22x6[_0xee2b[4672]](), _0x8e22x4 || _0x8e22x6[_0xee2b[4606]], _0x8e22x5);
}, appendRows:function(_0x8e22x5, _0x8e22x4, _0x8e22x2) {
  for (var _0x8e22x6 = 0, _0x8e22x3 = _0x8e22x4[_0xee2b[4]]; _0x8e22x6 < _0x8e22x3; _0x8e22x6++) {
    _0x8e22x5[_0xee2b[83]](_0x8e22x2 ? _0x8e22x4[_0x8e22x6][_0xee2b[4673]][_0xee2b[2263]](true) : _0x8e22x4[_0x8e22x6][_0xee2b[4673]]);
  }
}, emptyNormalGrid:function(_0x8e22x3) {
  Ext[_0xee2b[761]](this[_0xee2b[4672]](_0x8e22x3))[_0xee2b[760]](this[_0xee2b[3950]][_0xee2b[4665]]())[_0xee2b[63]]();
}, getRowHeight:function() {
  return this[_0xee2b[829]][_0xee2b[810]][_0xee2b[2832]]();
}, getTotalSize:function() {
  return {width:this[_0xee2b[750]](), height:this[_0xee2b[4674]]()};
}, getTotalHeight:function() {
  var _0x8e22x6 = this, _0x8e22x3;
  if (_0x8e22x6[_0xee2b[4635]]()) {
    _0x8e22x3 = _0x8e22x6[_0xee2b[4675]] + _0x8e22x6[_0xee2b[4611]];
  } else {
    _0x8e22x3 = _0x8e22x6[_0xee2b[4022]][_0xee2b[787]]()[_0xee2b[861]](_0x8e22x6[_0xee2b[4519]])[_0xee2b[859]]();
  }
  return _0x8e22x6[_0xee2b[4513]] + _0x8e22x3;
}, getTotalWidth:function() {
  var _0x8e22x3;
  if (Ext[_0xee2b[2009]]()[_0xee2b[966]](_0xee2b[2836])) {
    _0x8e22x3 = this[_0xee2b[2948]][_0xee2b[1830]][_0xee2b[496]] ? this[_0xee2b[2948]][_0xee2b[861]](_0xee2b[3584])[_0xee2b[793]]() : 0;
  } else {
    _0x8e22x3 = this[_0xee2b[2948]][_0xee2b[496]] ? this[_0xee2b[2948]][_0xee2b[861]](_0xee2b[3584])[_0xee2b[793]]() : 0;
  }
  return this[_0xee2b[4676]]() + _0x8e22x3 + this[_0xee2b[3950]][_0xee2b[787]]()[_0xee2b[861]](this[_0xee2b[4519]])[_0xee2b[793]]();
}, getLockedGridWidth:function() {
  var _0x8e22x3 = this[_0xee2b[4542]][_0xee2b[3374]];
  if (_0x8e22x3 && _0x8e22x3[_0xee2b[4]] === 0) {
    return 0;
  }
  return this[_0xee2b[4537]][_0xee2b[787]]()[_0xee2b[861]](_0xee2b[495] + Ext[_0xee2b[238]] + _0xee2b[4677])[_0xee2b[793]]();
}, getNormalGridWidth:function() {
  return this[_0xee2b[4538]][_0xee2b[787]]()[_0xee2b[861]](_0xee2b[495] + Ext[_0xee2b[238]] + _0xee2b[4677])[_0xee2b[793]]();
}, preparePageToCommit:function(_0x8e22x11) {
  var _0x8e22x4 = this[_0xee2b[4664]](), _0x8e22x9 = this[_0xee2b[2948]], _0x8e22xf = _0x8e22x9[_0xee2b[1830]], _0x8e22xa = _0x8e22x9[_0xee2b[3380]], _0x8e22xc = _0x8e22x4[_0xee2b[861]](_0xee2b[4678], true);
  _0x8e22x4[_0xee2b[760]](_0xee2b[4679])[_0xee2b[63]]();
  var _0x8e22xe = function(_0x8e22x15) {
    return _0x8e22x4[_0xee2b[861]](_0xee2b[4535] + _0x8e22x15, true);
  }, _0x8e22x6 = function(_0x8e22x15) {
    if (_0x8e22x15) {
      _0x8e22x15[_0xee2b[763]][_0xee2b[773]] = _0xee2b[4376];
    }
  }, _0x8e22x8 = function(_0x8e22x15) {
    if (_0x8e22x15) {
      _0x8e22x15[_0xee2b[763]][_0xee2b[747]] = _0xee2b[4376];
    }
  };
  var _0x8e22x19 = _0x8e22x4[_0xee2b[861]](this[_0xee2b[4536]], true);
  _0x8e22x19[_0xee2b[763]][_0xee2b[686]] = _0xee2b[4680];
  var _0x8e22x1 = _0x8e22x4[_0xee2b[861]](this[_0xee2b[4534]], true);
  _0x8e22x1[_0xee2b[763]][_0xee2b[686]] = _0xee2b[4680];
  var _0x8e22x10 = this[_0xee2b[4666]](), _0x8e22x7 = this[_0xee2b[4672]]();
  if (_0x8e22x10) {
    _0x8e22x10[_0xee2b[763]][_0xee2b[4681]] = _0xee2b[27];
  }
  if (_0x8e22x7) {
    _0x8e22x7[_0xee2b[763]][_0xee2b[4681]] = _0xee2b[27];
  }
  if (_0x8e22xc) {
    _0x8e22xc[_0xee2b[763]][_0xee2b[686]] = this[_0xee2b[4613]] + _0xee2b[804];
    Ext[_0xee2b[761]](_0x8e22xc)[_0xee2b[760]](_0xee2b[4682])[_0xee2b[863]](this[_0xee2b[4611]]);
  }
  var _0x8e22xb = [_0x8e22xe(_0x8e22x9[_0xee2b[388]] + _0xee2b[4683]), _0x8e22xe(_0x8e22x9[_0xee2b[388]] + _0xee2b[4684]), _0x8e22xe(_0x8e22xf[_0xee2b[388]]), _0x8e22xe(_0x8e22xf[_0xee2b[2179]][_0xee2b[388]]), _0x8e22xe(_0x8e22xf[_0xee2b[829]][_0xee2b[265]][_0xee2b[388]])];
  if (Ext[_0xee2b[2009]]()[_0xee2b[966]](_0xee2b[2836])) {
    var _0x8e22x2 = _0xee2b[495] + Ext[_0xee2b[238]];
    var _0x8e22xd = _0x8e22x4[_0xee2b[861]](_0x8e22x2 + _0xee2b[4685], true);
    _0x8e22xd[_0xee2b[763]][_0xee2b[686]] = this[_0xee2b[4513]] + 1 + _0xee2b[804];
    _0x8e22xd[_0xee2b[763]][_0xee2b[1354]] = 0;
    _0x8e22x8(_0x8e22xd);
    _0x8e22x6(_0x8e22xd);
    var _0x8e22x18 = _0x8e22x4[_0xee2b[861]](_0x8e22x2 + _0xee2b[4686], true);
    _0x8e22x8(_0x8e22x18);
    _0x8e22x18[_0xee2b[763]][_0xee2b[4687]] = _0xee2b[856];
    Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x4[_0xee2b[2573]](_0x8e22x2 + _0xee2b[4688], true), function(_0x8e22x15) {
      _0x8e22x8(_0x8e22x15);
    });
    _0x8e22x1[_0xee2b[763]][_0xee2b[4689]] = _0x8e22x19[_0xee2b[763]][_0xee2b[4689]] = 0;
    Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22x4[_0xee2b[2573]](_0x8e22x2 + _0xee2b[4690] + _0x8e22x2 + _0xee2b[4691], true), function(_0x8e22x15) {
      _0x8e22x15[_0xee2b[96]][_0xee2b[78]](_0x8e22x15);
    });
    var _0x8e22x5 = _0x8e22x4[_0xee2b[861]](_0xee2b[495] + Ext[_0xee2b[238]] + _0xee2b[3584], true);
    if (_0x8e22x5) {
      Ext[_0xee2b[761]](_0x8e22x5)[_0xee2b[4479]](2);
    }
  }
  Ext[_0xee2b[26]][_0xee2b[25]](_0x8e22xb, _0x8e22x8);
  _0x8e22x6(_0x8e22xb[0]);
  _0x8e22x6(_0x8e22xb[1]);
  if (Ext[_0xee2b[960]]) {
    var _0x8e22x3 = _0x8e22xe(_0x8e22xa[_0xee2b[1848]][_0xee2b[388]]);
    if (_0x8e22x3) {
      _0x8e22x3[_0xee2b[763]][_0xee2b[773]] = _0xee2b[27];
    }
  } else {
    _0x8e22x6(_0x8e22xe(_0x8e22xa[_0xee2b[1848]][_0xee2b[388]]));
  }
  Ext[_0xee2b[26]][_0xee2b[25]]([_0x8e22xe(_0x8e22xa[_0xee2b[388]]), _0x8e22xe(_0x8e22xa[_0xee2b[2179]][_0xee2b[388]]), _0x8e22xe(_0x8e22xa[_0xee2b[290]]()[_0xee2b[388]])], function(_0x8e22x15) {
    if (_0x8e22x15) {
      _0x8e22x15[_0xee2b[763]][_0xee2b[747]] = _0x8e22x15[_0xee2b[763]][_0xee2b[773]] = _0xee2b[4376];
    }
  });
  _0x8e22x4[_0xee2b[758]][_0xee2b[763]][_0xee2b[747]] = _0xee2b[4376];
  _0x8e22x4[_0xee2b[758]][_0xee2b[763]][_0xee2b[773]] = _0xee2b[27];
  _0x8e22x4[_0xee2b[758]][_0xee2b[763]][_0xee2b[686]] = _0xee2b[27];
  return _0x8e22x4;
}, startPage:function(_0x8e22x6) {
  var _0x8e22x3 = this;
  var _0x8e22x4 = (_0x8e22x6 || _0x8e22x3[_0xee2b[4533]]()[_0xee2b[2179]])[_0xee2b[758]][_0xee2b[2263]](true);
  _0x8e22x4[_0xee2b[388]] = _0xee2b[27];
  _0x8e22x3[_0xee2b[4692]](Ext[_0xee2b[55]](_0x8e22x4));
}, scrollTo:function(_0x8e22x3, _0x8e22x2, _0x8e22x4) {
  var _0x8e22x5 = this;
  var _0x8e22x6 = _0x8e22x5[_0xee2b[2948]][_0xee2b[64]][_0xee2b[1752]](_0x8e22x3);
  if (_0x8e22x6) {
    _0x8e22x5[_0xee2b[2948]][_0xee2b[2966]](_0x8e22x6, {callback:function() {
      _0x8e22x5[_0xee2b[2948]][_0xee2b[3440]]();
      if (_0x8e22x2) {
        _0x8e22x2[_0xee2b[8]](_0x8e22x4 || _0x8e22x5);
      }
    }, select:false, focus:false, animate:false});
  } else {
    _0x8e22x2[_0xee2b[8]](_0x8e22x4 || _0x8e22x5);
  }
}, removeNode:function(_0x8e22x6) {
  if (_0x8e22x6 && _0x8e22x6[_0xee2b[96]]) {
    _0x8e22x6[_0xee2b[96]][_0xee2b[78]](_0x8e22x6);
  } else {
    if (_0x8e22x6[_0xee2b[3970]]) {
      for (var _0x8e22x3 = 0; _0x8e22x3 < _0x8e22x6[_0xee2b[3970]][_0xee2b[4]]; _0x8e22x3++) {
        var _0x8e22x4 = _0x8e22x6[_0xee2b[3970]][_0x8e22x3];
        _0x8e22x4[_0xee2b[96]][_0xee2b[78]](_0x8e22x4);
      }
    }
  }
}, restoreInfiniteScroll:function(_0x8e22x6) {
  var _0x8e22x3 = _0x8e22x6[_0xee2b[808]]();
  if (_0x8e22x6[_0xee2b[2829]] && _0x8e22x3[_0xee2b[262]]) {
    _0x8e22x6[_0xee2b[1795]][_0xee2b[1756]](this._oldStart, this._oldEnd);
    _0x8e22x3[_0xee2b[3153]](this._oldScrollX);
    _0x8e22x3[_0xee2b[3141]]();
  }
}, suspendInfiniteScroll:function(_0x8e22x6) {
  var _0x8e22x3 = _0x8e22x6[_0xee2b[808]]();
  if (_0x8e22x6[_0xee2b[2829]] && _0x8e22x3[_0xee2b[262]]) {
    _0x8e22x3[_0xee2b[3156]]();
    this[_0xee2b[4693]] = _0x8e22x6[_0xee2b[1795]][_0xee2b[697]]();
    this[_0xee2b[4694]] = _0x8e22x6[_0xee2b[1795]][_0xee2b[698]]();
    this[_0xee2b[4695]] = _0x8e22x3[_0xee2b[1920]]();
    var _0x8e22x4 = _0x8e22x6[_0xee2b[696]]()[_0xee2b[3535]]();
    _0x8e22x6[_0xee2b[1756]](_0x8e22x4[_0xee2b[179]], _0x8e22x4[_0xee2b[771]]);
  }
}, dependencyPainterMembers:{getItemBox:function(_0x8e22x5, _0x8e22x3) {
  var _0x8e22x4 = this, _0x8e22x6 = _0x8e22x4[_0xee2b[4697]][_0xee2b[4696]][_0x8e22x3[_0xee2b[1049]]];
  return _0x8e22x6 || this[_0xee2b[9]](arguments);
}}, initDependencyPainter:function(_0x8e22x3) {
  var _0x8e22x4 = this, _0x8e22x6 = _0x8e22x3[_0xee2b[3910]]();
  if (_0x8e22x6) {
    _0x8e22x4[_0xee2b[4698]] = _0x8e22x6[_0xee2b[4699]]();
    Ext[_0xee2b[507]](_0x8e22x4[_0xee2b[4698]], Ext[_0xee2b[8]]({}, {exporter:_0x8e22x4}, _0x8e22x4[_0xee2b[4700]]));
  }
  _0x8e22x4[_0xee2b[4588]] = _0x8e22x6;
  _0x8e22x4[_0xee2b[4696]] = {};
}, fillRecordRelatedBoxes:function(_0x8e22x1) {
  var _0x8e22x9 = this, _0x8e22x7 = _0x8e22x9[_0xee2b[3950]], _0x8e22xd = _0x8e22x9[_0xee2b[4588]][_0xee2b[3833]], _0x8e22x3 = _0x8e22x9[_0xee2b[4588]][_0xee2b[1306]]();
  var _0x8e22x10 = _0x8e22x1[_0xee2b[1421]]();
  for (var _0x8e22x4 = 0; _0x8e22x4 < _0x8e22x10[_0xee2b[4]]; _0x8e22x4++) {
    var _0x8e22x6 = _0x8e22x10[_0x8e22x4];
    if (_0x8e22x7[_0xee2b[1795]][_0xee2b[2601]](_0x8e22x6) && _0x8e22x3[_0xee2b[1375]](_0x8e22x6)[_0xee2b[4]]) {
      var _0x8e22x2 = _0x8e22xd[_0xee2b[2899]](_0x8e22x7, _0x8e22x6);
      for (var _0x8e22x5 = 0; _0x8e22x5 < _0x8e22x2[_0xee2b[4]]; _0x8e22x5++) {
        if (_0x8e22x7[_0xee2b[2478]]) {
          _0x8e22x2[_0x8e22x5][_0xee2b[686]] += _0x8e22x7[_0xee2b[2478]][_0xee2b[3969]];
          _0x8e22x2[_0x8e22x5][_0xee2b[754]] += _0x8e22x7[_0xee2b[2478]][_0xee2b[3969]];
        }
        _0x8e22x2[_0x8e22x5][_0xee2b[262]] = true;
      }
      _0x8e22x9[_0xee2b[4696]][_0x8e22x6[_0xee2b[1049]]] = _0x8e22x2;
    }
  }
}, renderDependencies:function() {
  var _0x8e22x6 = this, _0x8e22x3 = _0x8e22x6[_0xee2b[4588]];
  if (_0x8e22x3[_0xee2b[3854]]()) {
    _0x8e22x6[_0xee2b[4701]] = _0x8e22x6[_0xee2b[4698]][_0xee2b[3736]](_0x8e22x3[_0xee2b[3610]](), _0x8e22x3[_0xee2b[1306]]()[_0xee2b[1005]]());
  } else {
    _0x8e22x6[_0xee2b[4701]] = _0xee2b[27];
  }
}});
Ext[_0xee2b[6]](_0xee2b[4702], {extend:_0xee2b[4506], config:{id:_0xee2b[4703]}, getExpectedNumberOfPages:function() {
  return 1;
}, getPaperFormat:function() {
  var _0x8e22x5 = this, _0x8e22x6 = _0x8e22x5[_0xee2b[4704]](), _0x8e22x4 = _0x8e22x6[_0xee2b[773]], _0x8e22x3 = _0x8e22x6[_0xee2b[747]] + 110;
  return _0x8e22x4 + _0xee2b[4705] + _0x8e22x3 + _0xee2b[804];
}, onRowsCollected:function() {
  var _0x8e22x3 = this;
  _0x8e22x3[_0xee2b[4706]]();
  _0x8e22x3[_0xee2b[4707]]();
  _0x8e22x3[_0xee2b[4708]]();
  _0x8e22x3[_0xee2b[4709]]();
}, getPageTplData:function() {
  var _0x8e22x6 = this, _0x8e22x3 = _0x8e22x6[_0xee2b[4704]]();
  return Ext[_0xee2b[8]](_0x8e22x6[_0xee2b[9]](arguments), {bodyHeight:_0x8e22x3[_0xee2b[747]], totalWidth:_0x8e22x3[_0xee2b[773]]});
}, getHeaderTplData:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  return Ext[_0xee2b[8]](_0x8e22x6[_0xee2b[9]](arguments), {width:_0x8e22x6[_0xee2b[750]](), height:_0x8e22x6[_0xee2b[4513]]});
}, getFooterTplData:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  return Ext[_0xee2b[8]](_0x8e22x6[_0xee2b[9]](arguments), {width:_0x8e22x6[_0xee2b[750]](), height:_0x8e22x6[_0xee2b[4515]]});
}, fitComponentIntoPage:function(_0x8e22x3) {
  var _0x8e22x6 = this, _0x8e22x4 = _0x8e22x6[_0xee2b[1830]];
  if (_0x8e22x3[_0xee2b[3374]] && !_0x8e22x3[_0xee2b[3374]][_0xee2b[4]]) {
    _0x8e22x4[_0xee2b[839]](0);
  } else {
    _0x8e22x4[_0xee2b[839]](Ext[_0xee2b[761]](_0x8e22x4[_0xee2b[290]]()[_0xee2b[2859]]())[_0xee2b[793]]());
  }
}, preparePageToCommit:function() {
  var _0x8e22x8 = this, _0x8e22x10 = _0x8e22x8[_0xee2b[9]](arguments), _0x8e22xa = _0x8e22x10[_0xee2b[760]](_0xee2b[4678])[_0xee2b[572]](), _0x8e22x5 = _0x8e22xa[_0xee2b[760]](_0xee2b[4710]), _0x8e22xe = _0x8e22xa[_0xee2b[760]](_0xee2b[4682]), _0x8e22xd = _0x8e22x8[_0xee2b[4674]]();
  _0x8e22xa[_0xee2b[1870]](-this[_0xee2b[4612]]);
  _0x8e22x5[_0xee2b[863]](_0x8e22xd);
  _0x8e22xe[_0xee2b[863]](_0x8e22xd);
  var _0x8e22x1 = _0x8e22x10[_0xee2b[2931]](_0xee2b[4711]);
  if (_0x8e22x1) {
    _0x8e22x1[_0xee2b[3737]] = _0x8e22x8[_0xee2b[4701]];
    _0x8e22x1[_0xee2b[763]][_0xee2b[686]] = -this[_0xee2b[4612]] + _0xee2b[804];
    _0x8e22x1[_0xee2b[763]][_0xee2b[1354]] = _0xee2b[4680];
    _0x8e22x1[_0xee2b[763]][_0xee2b[2072]] = _0xee2b[1690];
  }
  var _0x8e22x2 = _0x8e22x8[_0xee2b[3950]], _0x8e22x9 = _0x8e22x2[_0xee2b[787]]()[_0xee2b[861]](_0x8e22x8[_0xee2b[4519]])[_0xee2b[793]](), _0x8e22x6 = _0x8e22x2[_0xee2b[388]], _0x8e22x4 = _0x8e22x10[_0xee2b[760]](_0xee2b[4535] + _0x8e22x6)[_0xee2b[572]]()[_0xee2b[758]];
  _0x8e22x4[_0xee2b[763]][_0xee2b[773]] = _0x8e22x9 + _0xee2b[804];
  var _0x8e22x7 = _0x8e22x10[_0xee2b[2931]](_0xee2b[4535] + _0x8e22x8[_0xee2b[3950]][_0xee2b[388]]);
  _0x8e22x7[_0xee2b[763]][_0xee2b[4712]] = _0xee2b[856];
  var _0x8e22x3 = _0x8e22x10[_0xee2b[2931]](_0xee2b[495] + Ext[_0xee2b[238]] + _0xee2b[3584]);
  if (_0x8e22x3) {
    _0x8e22x3[_0xee2b[763]][_0xee2b[747]] = _0xee2b[4376];
  }
  return _0x8e22x10;
}});
Ext[_0xee2b[6]](_0xee2b[4713], {extend:_0xee2b[4506], config:{id:_0xee2b[4714]}, rowPageIndex:0, columnPageIndex:0, pagesPerColumn:0, depsTopOffset:0, onRowsCollected:function(_0x8e22x6, _0x8e22x3) {
  var _0x8e22x4 = this;
  _0x8e22x4[_0xee2b[4715]] = -_0x8e22x4[_0xee2b[4612]];
  _0x8e22x4[_0xee2b[4716]] = 0;
  _0x8e22x4[_0xee2b[4717]] = 0;
  _0x8e22x4[_0xee2b[4718]] = 0;
  _0x8e22x4[_0xee2b[4720]](function() {
    _0x8e22x4[_0xee2b[4719]](_0x8e22x4[_0xee2b[4709]], _0x8e22x4, _0x8e22x6, _0x8e22x3);
  });
}, buildPages:function(_0x8e22x1, _0x8e22x4, _0x8e22x6, _0x8e22x3) {
  var _0x8e22x5 = this, _0x8e22x2 = _0x8e22x5[_0xee2b[4721]][0];
  _0x8e22x5[_0xee2b[4706]](_0x8e22x2, true);
  this[_0xee2b[4638]](_0x8e22x5[_0xee2b[4722]], _0x8e22x5, {rowIndex:0, pageFrame:_0x8e22x2, rowsHeight:0, leftHeight:this[_0xee2b[4539]], lockeds:[], normals:[], lockedRows:_0x8e22x6, normalRows:_0x8e22x3, callback:_0x8e22x1, scope:_0x8e22x4 || _0x8e22x5});
}, rowIteratorStep:function(_0x8e22x9, _0x8e22x3) {
  var _0x8e22x8 = this, _0x8e22xd = _0x8e22x3[_0xee2b[4723]], _0x8e22x6 = _0x8e22x3[_0xee2b[4607]], _0x8e22x7 = _0x8e22x3[_0xee2b[4606]], _0x8e22xa = _0x8e22x3[_0xee2b[4724]], _0x8e22x5 = _0x8e22x3[_0xee2b[4725]], _0x8e22x10 = _0x8e22x3[_0xee2b[4726]], _0x8e22x4 = true;
  if (_0x8e22xd < _0x8e22x7[_0xee2b[4]]) {
    var _0x8e22x1 = _0x8e22x6[_0x8e22xd], _0x8e22x2 = _0x8e22x7[_0x8e22xd];
    if (_0x8e22x2[_0xee2b[747]] <= _0x8e22xa) {
      _0x8e22x5[_0xee2b[11]](_0x8e22x1);
      _0x8e22x10[_0xee2b[11]](_0x8e22x2);
      _0x8e22x3[_0xee2b[4724]] -= _0x8e22x2[_0xee2b[747]];
      _0x8e22x3[_0xee2b[4727]] += _0x8e22x2[_0xee2b[747]];
      _0x8e22x4 = false;
    } else {
      _0x8e22x8[_0xee2b[4707]](_0x8e22x5, _0x8e22x10, _0x8e22x3[_0xee2b[4728]]);
      _0x8e22x8[_0xee2b[4708]]({rowsHeight:_0x8e22x3[_0xee2b[4727]]});
      _0x8e22x8[_0xee2b[4706]](_0x8e22x3[_0xee2b[4728]]);
      _0x8e22x3[_0xee2b[4725]] = [_0x8e22x1];
      _0x8e22x3[_0xee2b[4726]] = [_0x8e22x2];
      _0x8e22x3[_0xee2b[4724]] = _0x8e22x8[_0xee2b[4539]] - _0x8e22x2[_0xee2b[747]];
      _0x8e22x3[_0xee2b[4727]] = _0x8e22x2[_0xee2b[747]];
    }
    _0x8e22x3[_0xee2b[4723]]++;
  } else {
    if (_0x8e22x8[_0xee2b[4717]] < _0x8e22x8[_0xee2b[4721]][_0xee2b[4]]) {
      _0x8e22x8[_0xee2b[4707]](_0x8e22x5, _0x8e22x10, _0x8e22x3[_0xee2b[4728]]);
      _0x8e22x8[_0xee2b[4708]]({rowsHeight:_0x8e22x3[_0xee2b[4727]]});
      _0x8e22x3[_0xee2b[4728]] = _0x8e22x8[_0xee2b[4721]][_0x8e22x8[_0xee2b[4717]]];
      _0x8e22x8[_0xee2b[4706]](_0x8e22x3[_0xee2b[4728]], true);
      _0x8e22x3[_0xee2b[4724]] = _0x8e22x8[_0xee2b[4539]];
      _0x8e22x3[_0xee2b[4727]] = 0;
      _0x8e22x3[_0xee2b[4725]] = [];
      _0x8e22x3[_0xee2b[4726]] = [];
      _0x8e22x3[_0xee2b[4723]] = 0;
    } else {
      _0x8e22x8[_0xee2b[4707]](_0x8e22x5, _0x8e22x10, _0x8e22x3[_0xee2b[4728]]);
      _0x8e22x8[_0xee2b[4708]]({rowsHeight:_0x8e22x3[_0xee2b[4727]]});
      _0x8e22x3[_0xee2b[4002]][_0xee2b[293]](_0x8e22x3[_0xee2b[689]]);
      return;
    }
  }
  if (_0x8e22x4) {
    _0x8e22x9(_0x8e22x3);
  } else {
    _0x8e22x8[_0xee2b[4722]](_0x8e22x9, _0x8e22x3);
  }
}, fillGrids:function(_0x8e22x2, _0x8e22x5, _0x8e22x1) {
  var _0x8e22x4 = this, _0x8e22x6 = _0x8e22x4[_0xee2b[4729]][_0x8e22x4[_0xee2b[4717]] - 1], _0x8e22x3 = !_0x8e22x6 || _0x8e22x6 && _0x8e22x6[_0xee2b[4730]];
  if (_0x8e22x6) {
    _0x8e22x4[_0xee2b[4667]](_0x8e22x2, true);
    _0x8e22x4[_0xee2b[4731]](_0x8e22x6);
  }
  if (_0x8e22x3) {
    _0x8e22x4[_0xee2b[4668]](_0x8e22x5, true);
    _0x8e22x4[_0xee2b[4734]](-_0x8e22x1[_0xee2b[4732]], -_0x8e22x1[_0xee2b[4732]] + _0x8e22x1[_0xee2b[4733]]);
  }
}, buildPageFrame:function(_0x8e22xa, _0x8e22x6) {
  var _0x8e22x9 = this, _0x8e22xd = _0x8e22x9[_0xee2b[4729]][_0x8e22xa];
  if (_0x8e22xd) {
    _0x8e22x9[_0xee2b[1830]][_0xee2b[839]](_0x8e22x9[_0xee2b[4735]](_0x8e22xd[_0xee2b[179]], _0x8e22xd[_0xee2b[771]]) + (_0x8e22xd[_0xee2b[4736]] || 0));
    if (_0x8e22xd[_0xee2b[4730]]) {
      _0x8e22x9[_0xee2b[3380]][_0xee2b[2019]]();
    } else {
      var _0x8e22x4 = _0x8e22x9[_0xee2b[1830]][_0xee2b[1848]][_0xee2b[859]]();
      _0x8e22x9[_0xee2b[1830]][_0xee2b[4737]]()[0][_0xee2b[863]](_0x8e22x4);
      _0x8e22x9[_0xee2b[3380]][_0xee2b[256]]();
    }
  } else {
    _0x8e22x9[_0xee2b[1830]][_0xee2b[839]](0);
    _0x8e22x9[_0xee2b[1830]][_0xee2b[256]]();
    _0x8e22x9[_0xee2b[3380]][_0xee2b[2019]]();
  }
  var _0x8e22x3 = _0x8e22x9[_0xee2b[4533]]()[_0xee2b[2179]][_0xee2b[758]][_0xee2b[2263]](true);
  _0x8e22x3[_0xee2b[388]] = _0xee2b[27];
  _0x8e22x3 = Ext[_0xee2b[55]](_0x8e22x3);
  _0x8e22x3[_0xee2b[4732]] = _0x8e22x6;
  _0x8e22x3[_0xee2b[4738]] = _0x8e22xd && _0x8e22xd[_0xee2b[4736]] || 0;
  _0x8e22x3[_0xee2b[4733]] = _0x8e22x9[_0xee2b[3380]][_0xee2b[793]]();
  _0x8e22x3[_0xee2b[4739]] = _0x8e22x9[_0xee2b[1830]][_0xee2b[793]]();
  _0x8e22x3[_0xee2b[861]](_0x8e22x9[_0xee2b[4534]], true)[_0xee2b[763]][_0xee2b[1780]] = _0xee2b[27];
  _0x8e22x3[_0xee2b[861]](_0xee2b[4535] + _0x8e22x9[_0xee2b[4022]][_0xee2b[388]], true)[_0xee2b[763]][_0xee2b[4712]] = _0xee2b[1690];
  if (!_0x8e22x9[_0xee2b[3380]][_0xee2b[856]]) {
    var _0x8e22x8 = _0x8e22x3[_0xee2b[760]](_0x8e22x9[_0xee2b[4536]])[_0xee2b[572]]();
    _0x8e22x8[_0xee2b[758]][_0xee2b[763]][_0xee2b[1780]] = _0xee2b[27];
    _0x8e22x8[_0xee2b[758]][_0xee2b[763]][_0xee2b[686]] = _0xee2b[4680];
    var _0x8e22x2 = _0x8e22x9[_0xee2b[4672]](_0x8e22x3);
    var _0x8e22x5 = _0x8e22x3[_0xee2b[861]](_0xee2b[4535] + _0x8e22x9[_0xee2b[3950]][_0xee2b[1848]][_0xee2b[388]], true);
    var _0x8e22x1 = _0x8e22x3[_0xee2b[861]](_0xee2b[4678], true);
    var _0x8e22x7 = _0x8e22x3[_0xee2b[861]](_0xee2b[4535] + _0x8e22x9[_0xee2b[3950]][_0xee2b[388]], true);
    _0x8e22x2[_0xee2b[763]][_0xee2b[1354]] = _0x8e22x6 + _0xee2b[804];
    if (!_0x8e22xd) {
      _0x8e22x3[_0xee2b[861]](_0xee2b[4535] + _0x8e22x9[_0xee2b[3380]][_0xee2b[388]], true)[_0xee2b[763]][_0xee2b[4740]] = _0xee2b[764];
    }
    _0x8e22x5[_0xee2b[763]][_0xee2b[1354]] = _0x8e22x6 + _0xee2b[804];
    _0x8e22x5[_0xee2b[763]][_0xee2b[4712]] = _0xee2b[1690];
    _0x8e22x1[_0xee2b[763]][_0xee2b[1354]] = _0x8e22x6 + _0xee2b[804];
    _0x8e22x7[_0xee2b[763]][_0xee2b[4712]] = _0xee2b[1690];
  }
  return _0x8e22x3;
}, buildPageFrames:function(_0x8e22x2, _0x8e22x4) {
  var _0x8e22x5 = this;
  _0x8e22x4 = _0x8e22x4 || _0x8e22x5;
  _0x8e22x5[_0xee2b[4729]] = _0x8e22x5[_0xee2b[4741]]();
  var _0x8e22x3 = Math[_0xee2b[1194]](_0x8e22x5[_0xee2b[750]]() / _0x8e22x5[_0xee2b[4547]]), _0x8e22x6 = _0x8e22x5[_0xee2b[4721]] = [];
  _0x8e22x5[_0xee2b[4638]](function(_0x8e22x7, _0x8e22x9, _0x8e22xa) {
    if (_0x8e22x9 >= _0x8e22x3) {
      _0x8e22x2[_0xee2b[293]](_0x8e22x4, _0x8e22x6);
      return;
    }
    _0x8e22x6[_0xee2b[11]](_0x8e22x5[_0xee2b[4742]](_0x8e22x9, _0x8e22xa));
    var _0x8e22x1 = _0x8e22x5[_0xee2b[4729]][_0x8e22x9];
    if (_0x8e22x1) {
      _0x8e22xa -= _0x8e22x1[_0xee2b[4730]] || 0;
    } else {
      _0x8e22xa -= _0x8e22x5[_0xee2b[4547]];
    }
    _0x8e22x7(_0x8e22x9 + 1, _0x8e22xa);
  }, _0x8e22x5, 0, 0);
}, startPage:function(_0x8e22x4, _0x8e22x3) {
  var _0x8e22x6 = this;
  if (_0x8e22x3) {
    _0x8e22x6[_0xee2b[4715]] = -_0x8e22x6[_0xee2b[4612]];
    if (_0x8e22x6[_0xee2b[4717]] == 1) {
      _0x8e22x6[_0xee2b[4718]] = _0x8e22x6[_0xee2b[4608]][_0xee2b[4]];
    }
    _0x8e22x6[_0xee2b[4716]] = 0;
    _0x8e22x6[_0xee2b[4717]]++;
    _0x8e22x6[_0xee2b[4613]] = _0x8e22x6[_0xee2b[4612]];
  }
  _0x8e22x6[_0xee2b[4716]]++;
  _0x8e22x6[_0xee2b[9]](arguments);
  _0x8e22x6[_0xee2b[4671]]();
  _0x8e22x6[_0xee2b[4669]]();
}, commitPage:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  _0x8e22x6[_0xee2b[9]]([Ext[_0xee2b[8]]({row:_0x8e22x6[_0xee2b[4716]], column:_0x8e22x6[_0xee2b[4717]]}, _0x8e22x3)]);
  _0x8e22x6[_0xee2b[4613]] -= _0x8e22x3[_0xee2b[4727]];
  _0x8e22x6[_0xee2b[4715]] -= _0x8e22x3[_0xee2b[4727]];
}, getExpectedPagesPerColumn:function() {
  return this[_0xee2b[4718]] || Math[_0xee2b[1194]]((this[_0xee2b[4611]] || this[_0xee2b[2948]][_0xee2b[64]][_0xee2b[1520]]() * this[_0xee2b[2948]][_0xee2b[2864]]()) / this[_0xee2b[4539]]);
}, getExpectedColumnsNumber:function() {
  return this[_0xee2b[4721]] ? this[_0xee2b[4721]][_0xee2b[4]] : Math[_0xee2b[1194]]((this[_0xee2b[1830]][_0xee2b[793]]() + this[_0xee2b[4555]][_0xee2b[4]] * this[_0xee2b[829]][_0xee2b[810]][_0xee2b[755]]()) / this[_0xee2b[4547]]);
}, getExpectedNumberOfPages:function() {
  return this[_0xee2b[4743]]() * this[_0xee2b[4744]]();
}, calculateLockedColumnPages:function() {
  var _0x8e22x7 = this, _0x8e22x8 = [], _0x8e22x4 = _0x8e22x7[_0xee2b[4745]], _0x8e22x2 = _0x8e22x7[_0xee2b[4547]], _0x8e22x9;
  for (var _0x8e22x1 = 0, _0x8e22x5 = _0x8e22x4[_0xee2b[4]]; _0x8e22x1 < _0x8e22x5; _0x8e22x1++) {
    var _0x8e22x6 = _0x8e22x4[_0x8e22x1], _0x8e22x3 = _0x8e22x6[_0xee2b[773]];
    _0x8e22x9 = _0x8e22x9 || {start:_0x8e22x1, end:_0x8e22x1};
    _0x8e22x2 -= _0x8e22x3;
    if (_0x8e22x2 < 0) {
      _0x8e22x8[_0xee2b[11]](_0x8e22x9);
      if (_0x8e22x2) {
        _0x8e22x9 = {start:_0x8e22x1, end:_0x8e22x1};
      }
      _0x8e22x2 = _0x8e22x7[_0xee2b[4547]] - _0x8e22x3 + _0x8e22x2;
    } else {
      _0x8e22x9[_0xee2b[771]] = _0x8e22x1;
    }
  }
  if (_0x8e22x9) {
    _0x8e22x9[_0xee2b[4730]] = _0x8e22x2;
    _0x8e22x8[_0xee2b[11]](_0x8e22x9);
  }
  return _0x8e22x8;
}, getPageTplData:function(_0x8e22x3) {
  return Ext[_0xee2b[8]](this[_0xee2b[9]](arguments), {title:_0x8e22x3[_0xee2b[1135]] + _0xee2b[4663] + this[_0xee2b[4609]] + _0xee2b[4746] + _0x8e22x3[_0xee2b[2963]] + _0xee2b[4747] + _0x8e22x3[_0xee2b[4673]] + _0xee2b[1058]});
}, showLockedColumns:function(_0x8e22x2, _0x8e22x9) {
  var _0x8e22x1 = this, _0x8e22x6 = _0x8e22x1[_0xee2b[4745]], _0x8e22x5 = 0;
  _0x8e22x2 = _0x8e22x2 || 0;
  _0x8e22x9 = _0x8e22x9 || _0x8e22x6[_0xee2b[4]] - 1;
  for (var _0x8e22x3 = 0; _0x8e22x3 < _0x8e22x6[_0xee2b[4]]; _0x8e22x3++) {
    var _0x8e22x4 = _0x8e22x6[_0x8e22x3];
    if (_0x8e22x3 >= _0x8e22x2 && _0x8e22x3 <= _0x8e22x9) {
      _0x8e22x4[_0xee2b[2963]][_0xee2b[2019]]();
      _0x8e22x5 += _0x8e22x4[_0xee2b[773]];
    } else {
      _0x8e22x4[_0xee2b[2963]][_0xee2b[256]]();
    }
  }
  return _0x8e22x5;
}, removeInvisibleEvents:function(_0x8e22x3, _0x8e22x6) {
  var _0x8e22x2 = this, _0x8e22x4 = _0x8e22x2[_0xee2b[4672]](), _0x8e22x5 = _0x8e22x2[_0xee2b[3950]][_0xee2b[2034]];
  Ext[_0xee2b[26]][_0xee2b[25]](Ext[_0xee2b[761]](_0x8e22x4)[_0xee2b[760]](_0x8e22x5)[_0xee2b[3970]], function(_0x8e22x9) {
    var _0x8e22x7 = parseInt(_0x8e22x9[_0xee2b[763]][_0xee2b[1354]], 10), _0x8e22x1 = _0x8e22x7 + parseInt(_0x8e22x9[_0xee2b[763]][_0xee2b[773]], 10);
    if (_0x8e22x1 < _0x8e22x3 || _0x8e22x7 > _0x8e22x6) {
      _0x8e22x2[_0xee2b[4748]](_0x8e22x9);
    }
  });
}, removeHiddenLockedColumns:function(_0x8e22x6) {
  var _0x8e22x8 = this, _0x8e22x7 = _0x8e22x8[_0xee2b[4664]](), _0x8e22x3 = _0x8e22x8[_0xee2b[4666]]();
  for (var _0x8e22x1 = 0; _0x8e22x1 < _0x8e22x8[_0xee2b[4745]][_0xee2b[4]]; _0x8e22x1++) {
    var _0x8e22x4 = _0x8e22x8[_0xee2b[4745]][_0x8e22x1][_0xee2b[2963]];
    if (_0x8e22x1 < _0x8e22x6[_0xee2b[179]] || _0x8e22x1 > _0x8e22x6[_0xee2b[771]]) {
      var _0x8e22x5 = _0xee2b[4535] + _0x8e22x4[_0xee2b[32]]();
      var _0x8e22x9 = _0x8e22x7[_0xee2b[760]](_0x8e22x5);
      _0x8e22x8[_0xee2b[4748]](_0x8e22x9);
      var _0x8e22x2 = _0x8e22x4[_0xee2b[4005]]();
      var _0x8e22xd = Ext[_0xee2b[761]](_0x8e22x3)[_0xee2b[760]](_0x8e22x2);
      _0x8e22x8[_0xee2b[4748]](_0x8e22xd);
    }
  }
}, fitComponentIntoPage:function() {
  var _0x8e22x6 = this, _0x8e22x3 = _0x8e22x6[_0xee2b[4533]]();
  _0x8e22x3[_0xee2b[839]](_0x8e22x6[_0xee2b[4547]]);
}, prepareComponent:function(_0x8e22x6, _0x8e22x3) {
  var _0x8e22x5 = this, _0x8e22x4 = _0x8e22x5[_0xee2b[4745]] = [];
  _0x8e22x5[_0xee2b[9]](arguments);
  if (!(_0x8e22x3[_0xee2b[3374]] && _0x8e22x3[_0xee2b[3374]][_0xee2b[4]] === 0)) {
    _0x8e22x5[_0xee2b[1830]][_0xee2b[1848]][_0xee2b[266]][_0xee2b[25]](function(_0x8e22x2) {
      if (!_0x8e22x2[_0xee2b[856]]) {
        _0x8e22x4[_0xee2b[11]]({column:_0x8e22x2, width:_0x8e22x2[_0xee2b[793]]()});
      }
    });
  }
}, restoreComponentState:function() {
  this[_0xee2b[9]](arguments);
  this[_0xee2b[4735]]();
}, preparePageToCommit:function(_0x8e22x6) {
  var _0x8e22x1 = this, _0x8e22x7 = _0x8e22x1[_0xee2b[9]](arguments), _0x8e22x3 = _0x8e22x7[_0xee2b[861]](_0xee2b[495] + Ext[_0xee2b[238]] + _0xee2b[3584], true), _0x8e22x5 = _0x8e22x7[_0xee2b[2931]](_0xee2b[4711]), _0x8e22x9 = _0x8e22x1[_0xee2b[4721]][_0x8e22x1[_0xee2b[4717]] - 1];
  if (_0x8e22x3) {
    if (_0x8e22x9[_0xee2b[4749]]) {
      _0x8e22x3[_0xee2b[763]][_0xee2b[762]] = _0xee2b[764];
      _0x8e22x7[_0xee2b[861]](_0xee2b[495] + Ext[_0xee2b[238]] + _0xee2b[4750], true)[_0xee2b[763]][_0xee2b[1354]] = 0;
    } else {
      Ext[_0xee2b[761]](_0x8e22x3)[_0xee2b[863]](_0xee2b[4376]);
    }
  }
  if (!_0x8e22x9[_0xee2b[4751]]) {
    if (_0x8e22x5) {
      _0x8e22x5[_0xee2b[3737]] = _0x8e22x1[_0xee2b[4701]];
      _0x8e22x5[_0xee2b[763]][_0xee2b[686]] = _0x8e22x1[_0xee2b[4715]] + _0xee2b[804];
      _0x8e22x5[_0xee2b[763]][_0xee2b[2072]] = _0xee2b[1690];
    }
    var _0x8e22x4 = _0x8e22x7[_0xee2b[2931]](_0xee2b[4535] + _0x8e22x1[_0xee2b[3950]][_0xee2b[388]]);
    if (_0x8e22x4) {
      var _0x8e22x2 = _0x8e22x1[_0xee2b[3950]][_0xee2b[787]]()[_0xee2b[861]](_0x8e22x1[_0xee2b[4519]])[_0xee2b[793]]();
      _0x8e22x4[_0xee2b[763]][_0xee2b[773]] = _0x8e22x2 + _0xee2b[804];
      _0x8e22x4[_0xee2b[763]][_0xee2b[4712]] = _0xee2b[856];
    }
  }
  if (!_0x8e22x9[_0xee2b[4749]]) {
    var _0x8e22xa = _0x8e22x7[_0xee2b[2931]](_0xee2b[4535] + _0x8e22x1[_0xee2b[4022]][_0xee2b[388]]);
    if (_0x8e22xa) {
      _0x8e22xa[_0xee2b[763]][_0xee2b[4712]] = _0xee2b[856];
    }
  }
  return _0x8e22x7;
}});
Ext[_0xee2b[6]](_0xee2b[4752], {extend:_0xee2b[4506], config:{id:_0xee2b[4753]}, minRowHeight:20, minAverageColumnWidth:100, visibleColumns:null, visibleColumnsWidth:0, depsTopOffset:0, onRowsCollected:function(_0x8e22x6, _0x8e22x3) {
  var _0x8e22x4 = this;
  _0x8e22x4[_0xee2b[4715]] = -_0x8e22x4[_0xee2b[4612]];
  _0x8e22x4[_0xee2b[4638]](function(_0x8e22x7, _0x8e22xd) {
    if (_0x8e22xd === _0x8e22x3[_0xee2b[4]]) {
      _0x8e22x4[_0xee2b[4709]]();
      return;
    }
    var _0x8e22xa = _0x8e22xd, _0x8e22x9 = _0x8e22x4[_0xee2b[4539]], _0x8e22xe = 0, _0x8e22x2 = [], _0x8e22x10 = [], _0x8e22x5 = false, _0x8e22x8, _0x8e22x1;
    _0x8e22x4[_0xee2b[4706]]();
    while (!_0x8e22x5 && _0x8e22xa < _0x8e22x3[_0xee2b[4]]) {
      _0x8e22x8 = _0x8e22x3[_0x8e22xa];
      _0x8e22x1 = _0x8e22x6[_0x8e22xa];
      _0x8e22x9 -= _0x8e22x8[_0xee2b[747]];
      if (_0x8e22x9 > 0) {
        _0x8e22xe += _0x8e22x8[_0xee2b[747]];
        _0x8e22x1 && _0x8e22x2[_0xee2b[11]](_0x8e22x1);
        _0x8e22x10[_0xee2b[11]](_0x8e22x8);
        _0x8e22xa++;
      } else {
        _0x8e22x5 = true;
      }
    }
    _0x8e22x4[_0xee2b[4707]](_0x8e22x2, _0x8e22x10);
    _0x8e22x4[_0xee2b[4708]]({rowIndex:_0x8e22xa, rowsHeight:_0x8e22xe});
    _0x8e22x4[_0xee2b[4613]] -= _0x8e22xe;
    _0x8e22x7(_0x8e22xa);
  }, _0x8e22x4, 0);
}, startPage:function() {
  var _0x8e22x6 = this;
  _0x8e22x6[_0xee2b[9]](arguments);
  var _0x8e22x3 = _0x8e22x6[_0xee2b[4664]]()[_0xee2b[760]](_0xee2b[4535] + _0x8e22x6[_0xee2b[4022]][_0xee2b[388]])[_0xee2b[572]]();
  _0x8e22x3[_0xee2b[758]][_0xee2b[763]][_0xee2b[4712]] = _0xee2b[1690];
}, commitPage:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  _0x8e22x6[_0xee2b[9]](arguments);
  if (_0x8e22x6[_0xee2b[4588]] && _0x8e22x6[_0xee2b[4588]][_0xee2b[1306]]()) {
    _0x8e22x6[_0xee2b[4715]] -= _0x8e22x3[_0xee2b[4727]];
  }
}, getExpectedNumberOfPages:function() {
  return Math[_0xee2b[1194]](this[_0xee2b[4611]] / this[_0xee2b[4539]]);
}, prepareColumns:function(_0x8e22x6) {
  this[_0xee2b[9]](arguments);
  var _0x8e22x4 = this, _0x8e22x3 = _0x8e22x4[_0xee2b[4754]] = [];
  _0x8e22x4[_0xee2b[4755]] = 0;
  if (_0x8e22x6 && _0x8e22x6[_0xee2b[4]] === 0) {
    return;
  }
  _0x8e22x4[_0xee2b[1830]][_0xee2b[1848]][_0xee2b[266]][_0xee2b[25]](function(_0x8e22x5) {
    if (!_0x8e22x5[_0xee2b[856]]) {
      _0x8e22x3[_0xee2b[11]]({column:_0x8e22x5, width:_0x8e22x5[_0xee2b[793]]()});
      _0x8e22x4[_0xee2b[4755]] += _0x8e22x5[_0xee2b[793]]();
    }
  });
}, fitComponentIntoPage:function() {
  var _0x8e22x8 = this, _0x8e22xd = _0x8e22x8[_0xee2b[4533]](), _0x8e22x10 = _0x8e22xd[_0xee2b[808]](), _0x8e22xa = _0x8e22xd[_0xee2b[3380]], _0x8e22x5 = _0x8e22xd[_0xee2b[1830]], _0x8e22x9 = _0x8e22x8[_0xee2b[750]](), _0x8e22xe = _0x8e22x8[_0xee2b[4555]], _0x8e22x1 = _0x8e22x8[_0xee2b[2679]] || _0x8e22x10[_0xee2b[810]][_0xee2b[755]]();
  var _0x8e22x2 = Math[_0xee2b[424]](_0x8e22x8[_0xee2b[4755]] / _0x8e22x9 * _0x8e22x8[_0xee2b[4547]]);
  var _0x8e22x4 = _0x8e22x8[_0xee2b[4754]][_0xee2b[4]], _0x8e22x6 = _0x8e22x4 * _0x8e22x8[_0xee2b[4756]];
  _0x8e22x6 = _0x8e22x6 > _0x8e22x8[_0xee2b[4547]] / 2 ? Math[_0xee2b[424]](_0x8e22x8[_0xee2b[4547]] / 2) : _0x8e22x6;
  _0x8e22x2 = _0x8e22x6 > _0x8e22x2 ? _0x8e22x6 : _0x8e22x2;
  var _0x8e22x3 = _0x8e22x8[_0xee2b[4547]] - _0x8e22x2;
  var _0x8e22x7 = _0x8e22x3 / _0x8e22xe[_0xee2b[4]];
  _0x8e22x8[_0xee2b[2811]](_0x8e22x7 / _0x8e22x1 * _0x8e22x8[_0xee2b[2864]]());
  _0x8e22xd[_0xee2b[839]](_0x8e22x8[_0xee2b[4547]]);
  _0x8e22xa[_0xee2b[839]](_0x8e22x3);
  _0x8e22x5[_0xee2b[839]](_0x8e22x2);
  _0x8e22x8[_0xee2b[4757]](_0x8e22x2);
  _0x8e22xd[_0xee2b[4570]](_0x8e22x7);
}, setRowHeight:function(_0x8e22x6) {
  var _0x8e22x3 = this;
  _0x8e22x3[_0xee2b[2948]][_0xee2b[2811]](_0x8e22x6 < _0x8e22x3[_0xee2b[4758]] ? _0x8e22x3[_0xee2b[4758]] : _0x8e22x6);
}, fitLockedColumnWidth:function(_0x8e22x3) {
  var _0x8e22x7 = this, _0x8e22x4 = this[_0xee2b[4754]];
  var _0x8e22x9 = _0x8e22x3 / _0x8e22x7[_0xee2b[4755]];
  if (_0x8e22x4[_0xee2b[4]]) {
    for (var _0x8e22x5 = 0; _0x8e22x5 < _0x8e22x4[_0xee2b[4]]; _0x8e22x5++) {
      var _0x8e22x1 = _0x8e22x4[_0x8e22x5], _0x8e22x6 = _0x8e22x1[_0xee2b[773]], _0x8e22x2 = Math[_0xee2b[424]](_0x8e22x6 * _0x8e22x9);
      _0x8e22x1[_0xee2b[2963]][_0xee2b[839]](_0x8e22x2);
    }
    this[_0xee2b[4759]] = true;
  }
}, restoreComponentState:function(_0x8e22x4) {
  var _0x8e22x2 = this;
  _0x8e22x4 = _0x8e22x4 || _0x8e22x2[_0xee2b[4533]]();
  if (this[_0xee2b[4759]]) {
    var _0x8e22x6 = this[_0xee2b[4754]];
    for (var _0x8e22x5 = 0; _0x8e22x5 < _0x8e22x6[_0xee2b[4]]; _0x8e22x5++) {
      var _0x8e22x3 = _0x8e22x6[_0x8e22x5];
      _0x8e22x3[_0xee2b[2963]][_0xee2b[839]](_0x8e22x3[_0xee2b[773]]);
    }
  }
  this[_0xee2b[9]](arguments);
}, preparePageToCommit:function() {
  var _0x8e22x2 = this, _0x8e22x9 = _0x8e22x2[_0xee2b[9]](arguments), _0x8e22x6 = _0x8e22x9[_0xee2b[2931]](_0xee2b[4711]);
  if (_0x8e22x6) {
    _0x8e22x6[_0xee2b[3737]] = _0x8e22x2[_0xee2b[4701]];
    _0x8e22x6[_0xee2b[763]][_0xee2b[686]] = _0x8e22x2[_0xee2b[4715]] + _0xee2b[804];
    _0x8e22x6[_0xee2b[763]][_0xee2b[1354]] = _0xee2b[4680];
    _0x8e22x6[_0xee2b[763]][_0xee2b[2072]] = _0xee2b[1690];
  }
  var _0x8e22x3 = _0x8e22x2[_0xee2b[3950]][_0xee2b[787]]()[_0xee2b[861]](_0x8e22x2[_0xee2b[4519]])[_0xee2b[793]]();
  var _0x8e22x4 = _0x8e22x9[_0xee2b[2931]](_0xee2b[4535] + _0x8e22x2[_0xee2b[3950]][_0xee2b[388]]);
  _0x8e22x4[_0xee2b[763]][_0xee2b[773]] = _0x8e22x3 + _0xee2b[804];
  _0x8e22x4[_0xee2b[763]][_0xee2b[4712]] = _0xee2b[856];
  var _0x8e22x5 = _0x8e22x9[_0xee2b[2931]](_0xee2b[4535] + _0x8e22x2[_0xee2b[4022]][_0xee2b[388]]);
  _0x8e22x5[_0xee2b[763]][_0xee2b[4712]] = _0xee2b[856];
  var _0x8e22x1 = _0x8e22x9[_0xee2b[2931]](_0xee2b[495] + Ext[_0xee2b[238]] + _0xee2b[3584]);
  if (_0x8e22x1) {
    _0x8e22x1[_0xee2b[763]][_0xee2b[747]] = _0xee2b[4376];
  }
  return _0x8e22x9;
}});
Ext[_0xee2b[6]](_0xee2b[4760], {extend:_0xee2b[4761], alias:_0xee2b[4762], width:200, height:200, border:true, collapsible:false, bodyStyle:_0xee2b[4763], verticalCfg:{height:120, value:24, increment:2, minValue:20, maxValue:80, reverse:true, disabled:true}, horizontalCfg:{width:120, value:100, minValue:25, increment:5, maxValue:200, disable:true}, initComponent:function() {
  var _0x8e22x3 = this;
  _0x8e22x3[_0xee2b[4764]][_0xee2b[2302]] = _0x8e22x3[_0xee2b[4765]][_0xee2b[4593]];
  _0x8e22x3[_0xee2b[4766]][_0xee2b[2302]] = _0x8e22x3[_0xee2b[4765]][_0xee2b[2678]];
  _0x8e22x3[_0xee2b[4766]][_0xee2b[144]] = _0x8e22x3[_0xee2b[4765]][_0xee2b[4767]] || false;
  _0x8e22x3[_0xee2b[4768]] = [_0x8e22x3[_0xee2b[1932]] = new Ext[_0xee2b[4774]].Single(Ext[_0xee2b[8]]({dock:_0xee2b[1354], style:_0xee2b[4769], vertical:true, stateful:_0x8e22x3[_0xee2b[4765]][_0xee2b[4770]], stateId:_0xee2b[4771], stateEvents:[_0xee2b[2459]], listeners:{change:_0x8e22x3[_0xee2b[4772]], changecomplete:_0x8e22x3[_0xee2b[4773]], scope:_0x8e22x3}}, _0x8e22x3[_0xee2b[4766]])), _0x8e22x3[_0xee2b[1931]] = new Ext[_0xee2b[4774]].Single(Ext[_0xee2b[8]]({dock:_0xee2b[686], style:_0xee2b[4775], 
  stateful:_0x8e22x3[_0xee2b[4765]][_0xee2b[4770]], stateId:_0xee2b[4776], stateEvents:[_0xee2b[2459]], listeners:{change:_0x8e22x3[_0xee2b[4772]], changecomplete:_0x8e22x3[_0xee2b[4773]], scope:_0x8e22x3}}, _0x8e22x3[_0xee2b[4764]]))];
  _0x8e22x3[_0xee2b[9]](arguments);
}, afterRender:function() {
  var _0x8e22x6 = this;
  _0x8e22x6[_0xee2b[264]](_0xee2b[4777]);
  _0x8e22x6[_0xee2b[4778]] = _0x8e22x6[_0xee2b[2179]][_0xee2b[825]]({cls:_0xee2b[4779], cn:{tag:_0xee2b[4780]}});
  _0x8e22x6[_0xee2b[4781]] = _0x8e22x6[_0xee2b[4778]][_0xee2b[861]](_0xee2b[4780]);
  var _0x8e22x3 = new Ext[_0xee2b[2121]].DD(_0x8e22x6[_0xee2b[4778]]);
  Ext[_0xee2b[8]](_0x8e22x3, {startDrag:function() {
    _0x8e22x6[_0xee2b[2063]] = true;
    this[_0xee2b[3068]](_0x8e22x6[_0xee2b[2179]]);
  }, onDrag:function() {
    _0x8e22x6[_0xee2b[4782]]();
  }, endDrag:function() {
    _0x8e22x6[_0xee2b[4782]]();
    _0x8e22x6[_0xee2b[2063]] = false;
  }});
  _0x8e22x6[_0xee2b[4783]](_0x8e22x6[_0xee2b[1556]]());
  _0x8e22x6[_0xee2b[9]](arguments);
  _0x8e22x6[_0xee2b[2179]][_0xee2b[149]](_0xee2b[248], _0x8e22x6[_0xee2b[4784]], _0x8e22x6);
}, onBodyClick:function(_0x8e22x4, _0x8e22x3) {
  var _0x8e22x6 = [_0x8e22x4[_0xee2b[1970]]()[0] - 8 - this[_0xee2b[2179]][_0xee2b[809]](), _0x8e22x4[_0xee2b[1970]]()[1] - 8 - this[_0xee2b[2179]][_0xee2b[1936]]()];
  this[_0xee2b[4778]][_0xee2b[1857]](Ext[_0xee2b[2770]][_0xee2b[2076]](_0x8e22x6[0], 0, this[_0xee2b[838]]()));
  this[_0xee2b[4778]][_0xee2b[1870]](Ext[_0xee2b[2770]][_0xee2b[2076]](_0x8e22x6[1], 0, this[_0xee2b[4785]]()));
  this[_0xee2b[4782]]();
  this[_0xee2b[4773]]();
}, updateValuesFromHandles:function() {
  this[_0xee2b[4783]](this[_0xee2b[4786]]());
}, getAvailableWidth:function() {
  return this[_0xee2b[2179]][_0xee2b[793]]() - 18;
}, getAvailableHeight:function() {
  return this[_0xee2b[2179]][_0xee2b[859]]() - 18;
}, getValuesFromXY:function(_0x8e22x5) {
  _0x8e22x5 = _0x8e22x5 || [this[_0xee2b[4778]][_0xee2b[806]](true), this[_0xee2b[4778]][_0xee2b[2421]](true)];
  var _0x8e22x4 = _0x8e22x5[0] / this[_0xee2b[838]]();
  var _0x8e22x3 = _0x8e22x5[1] / this[_0xee2b[4785]]();
  var _0x8e22x2 = Math[_0xee2b[704]]((this[_0xee2b[4764]][_0xee2b[4787]] - this[_0xee2b[4764]][_0xee2b[4788]]) * _0x8e22x4);
  var _0x8e22x6 = Math[_0xee2b[704]]((this[_0xee2b[4766]][_0xee2b[4787]] - this[_0xee2b[4766]][_0xee2b[4788]]) * _0x8e22x3) + this[_0xee2b[4766]][_0xee2b[4788]];
  return [_0x8e22x2 + this[_0xee2b[4764]][_0xee2b[4788]], _0x8e22x6];
}, getXYFromValues:function(_0x8e22x5) {
  var _0x8e22x6 = this[_0xee2b[4764]][_0xee2b[4787]] - this[_0xee2b[4764]][_0xee2b[4788]];
  var _0x8e22x1 = this[_0xee2b[4766]][_0xee2b[4787]] - this[_0xee2b[4766]][_0xee2b[4788]];
  var _0x8e22x3 = Math[_0xee2b[704]]((_0x8e22x5[0] - this[_0xee2b[4764]][_0xee2b[4788]]) * this[_0xee2b[838]]() / _0x8e22x6);
  var _0x8e22x4 = _0x8e22x5[1] - this[_0xee2b[4766]][_0xee2b[4788]];
  var _0x8e22x2 = Math[_0xee2b[704]](_0x8e22x4 * this[_0xee2b[4785]]() / _0x8e22x1);
  return [_0x8e22x3, _0x8e22x2];
}, updatePosition:function() {
  var _0x8e22x3 = this[_0xee2b[1556]]();
  var _0x8e22x6 = this[_0xee2b[4789]](_0x8e22x3);
  this[_0xee2b[4778]][_0xee2b[1857]](Ext[_0xee2b[2770]][_0xee2b[2076]](_0x8e22x6[0], 0, this[_0xee2b[838]]()));
  if (this[_0xee2b[4766]][_0xee2b[144]]) {
    this[_0xee2b[4778]][_0xee2b[1870]](this[_0xee2b[4765]][_0xee2b[2678]]);
  } else {
    this[_0xee2b[4778]][_0xee2b[1870]](Ext[_0xee2b[2770]][_0xee2b[2076]](_0x8e22x6[1], 0, this[_0xee2b[4785]]()));
  }
  this[_0xee2b[4790]]();
  this[_0xee2b[4791]](_0x8e22x3);
}, positionValueText:function() {
  var _0x8e22x3 = this[_0xee2b[4778]][_0xee2b[2421]](true);
  var _0x8e22x6 = this[_0xee2b[4778]][_0xee2b[806]](true);
  this[_0xee2b[4781]][_0xee2b[1857]](_0x8e22x6 > 30 ? -30 : 10);
  this[_0xee2b[4781]][_0xee2b[1870]](_0x8e22x3 > 10 ? -20 : 20);
}, setValueText:function(_0x8e22x3) {
  if (this[_0xee2b[4766]][_0xee2b[144]]) {
    _0x8e22x3[1] = this[_0xee2b[4765]][_0xee2b[2678]];
  }
  this[_0xee2b[4781]][_0xee2b[724]](_0xee2b[3745] + _0x8e22x3.toString() + _0xee2b[670]);
}, setValues:function(_0x8e22x3) {
  this[_0xee2b[1931]][_0xee2b[2462]](_0x8e22x3[0]);
  if (this[_0xee2b[4766]][_0xee2b[260]]) {
    if (!this[_0xee2b[4766]][_0xee2b[144]]) {
      this[_0xee2b[1932]][_0xee2b[2462]](this[_0xee2b[4766]][_0xee2b[4787]] + this[_0xee2b[4766]][_0xee2b[4788]] - _0x8e22x3[1]);
    }
  } else {
    if (!this[_0xee2b[4766]][_0xee2b[144]]) {
      this[_0xee2b[1932]][_0xee2b[2462]](_0x8e22x3[1]);
    }
  }
  if (!this[_0xee2b[2063]]) {
    this[_0xee2b[4792]]();
  }
  this[_0xee2b[4790]]();
  this[_0xee2b[4791]](_0x8e22x3);
}, getValues:function() {
  if (!this[_0xee2b[4766]][_0xee2b[144]]) {
    var _0x8e22x3 = this[_0xee2b[1932]][_0xee2b[4121]]();
    if (this[_0xee2b[4766]][_0xee2b[260]]) {
      _0x8e22x3 = this[_0xee2b[4766]][_0xee2b[4787]] - _0x8e22x3 + this[_0xee2b[4766]][_0xee2b[4788]];
    }
    return [this[_0xee2b[1931]][_0xee2b[4121]](), _0x8e22x3];
  }
  return [this[_0xee2b[1931]][_0xee2b[4121]]()];
}, onSliderChange:function() {
  if (!this[_0xee2b[262]]) {
    return;
  }
  this[_0xee2b[180]](_0xee2b[2459], this, this[_0xee2b[1556]]());
  if (!this[_0xee2b[2063]]) {
    this[_0xee2b[4792]]();
  }
}, onSliderChangeComplete:function() {
  this[_0xee2b[180]](_0xee2b[4793], this, this[_0xee2b[1556]]());
}, afterLayout:function() {
  this[_0xee2b[9]](arguments);
  this[_0xee2b[4792]]();
}});
Ext[_0xee2b[6]](_0xee2b[4794], {extend:_0xee2b[4205], requires:[_0xee2b[109]], multiSelect:true, valueField:_0xee2b[388], displayField:_0xee2b[683], forceSelection:true, editable:false, listConfig:{htmlEncode:true, cls:_0xee2b[4795], selectedItemCls:Ext[_0xee2b[238]] + _0xee2b[4796]}, columns:null, columnEmptyText:null, columnEmptyRegExp:/^(\s*|&(nbsp|#160);)$/, initComponent:function() {
  this[_0xee2b[64]] = new Ext[_0xee2b[22]].Store({proxy:_0xee2b[313], fields:[_0xee2b[388], _0xee2b[683], _0xee2b[2963]], data:this[_0xee2b[4797]](this[_0xee2b[3374]])});
  this[_0xee2b[9]](arguments);
}, processColumns:function(_0x8e22x3) {
  var _0x8e22x6 = this, _0x8e22x5 = [], _0x8e22x4 = Ext[_0xee2b[26]][_0xee2b[41]](_0x8e22x3 || [], function(_0x8e22x2) {
    if (!_0x8e22x2[_0xee2b[4451]]()) {
      _0x8e22x5[_0xee2b[11]](_0x8e22x2[_0xee2b[388]]);
    }
    return {id:_0x8e22x2[_0xee2b[388]], name:_0x8e22x6[_0xee2b[4798]](_0x8e22x2), column:_0x8e22x2};
  });
  this[_0xee2b[2302]] = this[_0xee2b[2302]] || _0x8e22x5;
  return _0x8e22x4;
}, getColumnTitle:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  return !Ext[_0xee2b[1041]][_0xee2b[2723]](_0x8e22x3[_0xee2b[3438]]) || _0x8e22x3[_0xee2b[3438]][_0xee2b[2249]](_0x8e22x6[_0xee2b[4799]]) ? _0x8e22x6[_0xee2b[4800]] : _0x8e22x3[_0xee2b[3438]];
}, getPicker:function() {
  var _0x8e22x3 = this[_0xee2b[9]](arguments);
  _0x8e22x3[_0xee2b[4801]] += _0xee2b[60] + Ext[_0xee2b[238]] + _0xee2b[4796];
  return _0x8e22x3;
}, getSelectedColumns:function() {
  var _0x8e22x3 = this, _0x8e22x6 = _0x8e22x3[_0xee2b[4121]]();
  if (!Ext[_0xee2b[307]](_0x8e22x6)) {
    _0x8e22x6 = [_0x8e22x6];
  }
  return Ext[_0xee2b[26]][_0xee2b[41]](_0x8e22x6, function(_0x8e22x4) {
    return _0x8e22x3[_0xee2b[64]][_0xee2b[395]](_0x8e22x4)[_0xee2b[55]](_0xee2b[2963]);
  });
}});
Ext[_0xee2b[6]](_0xee2b[4802], {extend:_0xee2b[4257], requires:[_0xee2b[109], _0xee2b[717], _0xee2b[4261], _0xee2b[4205], _0xee2b[3980], _0xee2b[4803], _0xee2b[4804], _0xee2b[4760], _0xee2b[4794]], mixins:[_0xee2b[665]], alias:_0xee2b[4805], border:false, bodyPadding:_0xee2b[4321], autoHeight:true, stateful:true, rangeField:null, resizerHolder:null, resizePicker:null, dateFromField:null, dateToField:null, datesHolder:null, columnPicker:null, rowsRangeField:null, exportersField:null, formatField:null, 
orientationField:null, dpiField:null, showHeaderField:null, showFooterField:null, dateRangeFormat:_0xee2b[27], columnPickerConfig:null, dpiFieldConfig:null, dateRangeRestriction:true, rangeFieldConfig:null, rowsRangeFieldConfig:null, formatFieldConfig:null, orientationFieldConfig:null, exportersFieldConfig:null, showHeaderFieldConfig:null, showFooterFieldConfig:null, dateFromFieldConfig:null, dateToFieldConfig:null, showResizePicker:false, showColumnPicker:true, showDPIField:true, showShowHeaderField:true, 
showShowFooterField:false, showRowsRangeField:true, initComponent:function() {
  var _0x8e22x3 = this;
  _0x8e22x3[_0xee2b[4806]] = Ext[_0xee2b[8]]({labelAlign:_0xee2b[1354], labelWidth:120, anchor:_0xee2b[4807]}, _0x8e22x3[_0xee2b[4806]]);
  _0x8e22x3[_0xee2b[266]] = _0x8e22x3[_0xee2b[4808]]();
  _0x8e22x3[_0xee2b[9]](arguments);
  _0x8e22x3[_0xee2b[4810]](_0x8e22x3[_0xee2b[4809]], _0x8e22x3[_0xee2b[4809]][_0xee2b[4121]]());
  _0x8e22x3[_0xee2b[4812]](_0x8e22x3[_0xee2b[4811]], _0x8e22x3[_0xee2b[4811]][_0xee2b[4121]]());
}, isValid:function() {
  var _0x8e22x3 = this;
  if (_0x8e22x3[_0xee2b[4809]][_0xee2b[4121]]() == _0xee2b[1097]) {
    return _0x8e22x3[_0xee2b[4813]][_0xee2b[348]]() && _0x8e22x3[_0xee2b[4814]][_0xee2b[348]]();
  }
  return true;
}, getValues:function(_0x8e22x2, _0x8e22x4, _0x8e22x5, _0x8e22x6) {
  var _0x8e22x3 = this[_0xee2b[9]](arguments);
  if (this[_0xee2b[4815]]) {
    _0x8e22x3[_0xee2b[4541]] = !!_0x8e22x3[_0xee2b[4541]];
  }
  if (this[_0xee2b[4816]]) {
    _0x8e22x3[_0xee2b[4543]] = !!_0x8e22x3[_0xee2b[4543]];
  }
  _0x8e22x3[_0xee2b[4817]] = !!_0x8e22x3[_0xee2b[4817]];
  if (this[_0xee2b[4818]] && this[_0xee2b[4809]][_0xee2b[4121]]() == _0xee2b[4553]) {
    var _0x8e22x1 = this[_0xee2b[4818]][_0xee2b[1556]]();
    if (_0x8e22x2) {
      _0x8e22x3 += _0xee2b[4819] + _0x8e22x1[0] + _0xee2b[4820] + _0x8e22x1[1];
    } else {
      _0x8e22x3[_0xee2b[4577]] = _0x8e22x1;
    }
  }
  if (this[_0xee2b[4821]]) {
    _0x8e22x3[_0xee2b[3374]] = this[_0xee2b[4821]][_0xee2b[4822]]();
  }
  return _0x8e22x3;
}, createFields:function() {
  var _0x8e22x6 = this, _0x8e22x5 = _0xee2b[4823], _0x8e22x4 = _0xee2b[4824];
  if (_0x8e22x6[_0xee2b[4825]]) {
    _0x8e22x6[_0xee2b[4818]] = new Sch[_0xee2b[2395]].ResizePicker({dialogConfig:_0x8e22x6, margin:_0xee2b[4826]});
    _0x8e22x6[_0xee2b[4827]] = new Ext[_0xee2b[4067]].FieldContainer({fieldLabel:_0x8e22x6[_0xee2b[4767]] ? _0x8e22x6.L(_0xee2b[4828]) : _0x8e22x6.L(_0xee2b[4829]), labelAlign:_0xee2b[686], hidden:true, labelSeparator:_0xee2b[27], beforeLabelTextTpl:_0x8e22x5, afterLabelTextTpl:_0x8e22x4, layout:_0xee2b[4264], defaults:{flex:1, allowBlank:false}, items:[_0x8e22x6[_0xee2b[4818]]]});
  }
  _0x8e22x6[_0xee2b[4813]] = Ext[_0xee2b[2109]][_0xee2b[831]](Ext[_0xee2b[8]](_0x8e22x6[_0xee2b[4835]]({xtype:_0xee2b[4302], fieldLabel:_0x8e22x6.L(_0xee2b[4830]), baseBodyCls:_0xee2b[4831], name:_0xee2b[4551], format:_0x8e22x6[_0xee2b[4832]] || Ext[_0xee2b[703]][_0xee2b[4833]], allowBlank:false, maxValue:_0x8e22x6[_0xee2b[4834]] && _0x8e22x6[_0xee2b[1139]] || null, minValue:_0x8e22x6[_0xee2b[4834]] && _0x8e22x6[_0xee2b[1138]] || null, value:_0x8e22x6[_0xee2b[1138]]}), _0x8e22x6[_0xee2b[4836]]));
  _0x8e22x6[_0xee2b[4814]] = Ext[_0xee2b[2109]][_0xee2b[831]](Ext[_0xee2b[8]](_0x8e22x6[_0xee2b[4835]]({xtype:_0xee2b[4302], fieldLabel:_0x8e22x6.L(_0xee2b[4837]), name:_0xee2b[4552], format:_0x8e22x6[_0xee2b[4832]] || Ext[_0xee2b[703]][_0xee2b[4833]], baseBodyCls:_0xee2b[4831], allowBlank:false, maxValue:_0x8e22x6[_0xee2b[4834]] && _0x8e22x6[_0xee2b[1139]] || null, minValue:_0x8e22x6[_0xee2b[4834]] && _0x8e22x6[_0xee2b[1138]] || null, value:_0x8e22x6[_0xee2b[1139]]}), _0x8e22x6[_0xee2b[4838]]));
  _0x8e22x6[_0xee2b[4839]] = new Ext[_0xee2b[4067]].FieldContainer({fieldLabel:_0x8e22x6.L(_0xee2b[4840]), labelAlign:_0xee2b[686], hidden:true, labelSeparator:_0xee2b[27], beforeLabelTextTpl:_0x8e22x5, afterLabelTextTpl:_0x8e22x4, layout:_0xee2b[4264], defaults:{flex:1, allowBlank:false}, items:[_0x8e22x6[_0xee2b[4813]], _0x8e22x6[_0xee2b[4814]]]});
  if (_0x8e22x6[_0xee2b[4841]]) {
    _0x8e22x6[_0xee2b[4821]] = new Sch[_0xee2b[2395]].ColumnPicker(_0x8e22x6[_0xee2b[4835]](Ext[_0xee2b[8]]({fieldLabel:_0x8e22x6.L(_0xee2b[4842]), columnEmptyText:_0x8e22x6.L(_0xee2b[4800]), cls:_0xee2b[4843]}, _0x8e22x6[_0xee2b[4844]])));
  }
  if (_0x8e22x6[_0xee2b[4845]]) {
    _0x8e22x6[_0xee2b[4846]] = Ext[_0xee2b[2109]][_0xee2b[831]](Ext[_0xee2b[8]](_0x8e22x6[_0xee2b[4835]]({xtype:_0xee2b[4274], fieldLabel:_0x8e22x6.L(_0xee2b[4847]), cls:_0xee2b[4848], minValue:65, name:_0xee2b[4849], value:_0x8e22x6[_0xee2b[4542]][_0xee2b[4849]], maxValue:200}), _0x8e22x6[_0xee2b[4850]]));
  }
  if (_0x8e22x6[_0xee2b[4815]]) {
    _0x8e22x6[_0xee2b[4851]] = Ext[_0xee2b[2109]][_0xee2b[831]](Ext[_0xee2b[8]](_0x8e22x6[_0xee2b[4854]]({xtype:_0xee2b[4267], fieldLabel:_0x8e22x6.L(_0xee2b[4852]), cls:_0xee2b[4853], name:_0xee2b[4541], checked:!!_0x8e22x6[_0xee2b[4542]][_0xee2b[4541]], checkedValue:true, uncheckedValue:false}), _0x8e22x6[_0xee2b[4855]]));
  }
  if (_0x8e22x6[_0xee2b[4816]]) {
    _0x8e22x6[_0xee2b[4856]] = Ext[_0xee2b[2109]][_0xee2b[831]](Ext[_0xee2b[8]](_0x8e22x6[_0xee2b[4854]]({xtype:_0xee2b[4267], fieldLabel:_0x8e22x6.L(_0xee2b[4857]), cls:_0xee2b[4858], name:_0xee2b[4543], checked:!!_0x8e22x6[_0xee2b[4542]][_0xee2b[4543]], checkedValue:true, uncheckedValue:false}), _0x8e22x6[_0xee2b[4859]]));
  }
  _0x8e22x6[_0xee2b[4860]] = Ext[_0xee2b[2109]][_0xee2b[831]](Ext[_0xee2b[154]][_0xee2b[4398]](_0x8e22x6[_0xee2b[4835]]({xtype:_0xee2b[4861], listConfig:{htmlEncode:true}, fieldLabel:_0x8e22x6.L(_0xee2b[4862]), value:_0x8e22x6[_0xee2b[4542]][_0xee2b[880]], triggerAction:_0xee2b[2862], forceSelection:true, editable:false, name:_0xee2b[880], queryMode:_0xee2b[4212], store:_0x8e22x6[_0xee2b[4863]] || [_0xee2b[4864], _0xee2b[4865], _0xee2b[4866], _0xee2b[4867], _0xee2b[4868]]}), _0x8e22x6[_0xee2b[4869]]));
  _0x8e22x6[_0xee2b[4870]] = Ext[_0xee2b[2109]][_0xee2b[831]](Ext[_0xee2b[154]][_0xee2b[4398]](_0x8e22x6[_0xee2b[4835]]({xtype:_0xee2b[4861], listConfig:{htmlEncode:true}, fieldLabel:_0x8e22x6.L(_0xee2b[4871]), value:_0x8e22x6[_0xee2b[4542]][_0xee2b[3378]], triggerAction:_0xee2b[2862], forceSelection:true, editable:false, name:_0xee2b[3378], displayField:_0xee2b[683], valueField:_0xee2b[2302], queryMode:_0xee2b[4212], store:{fields:[_0xee2b[683], _0xee2b[2302]], data:[{name:_0x8e22x6.L(_0xee2b[4872]), 
  value:_0xee2b[4873]}, {name:_0x8e22x6.L(_0xee2b[4874]), value:_0xee2b[4546]}]}}), _0x8e22x6[_0xee2b[4875]]));
  _0x8e22x6[_0xee2b[4809]] = Ext[_0xee2b[2109]][_0xee2b[831]](Ext[_0xee2b[154]][_0xee2b[4398]](_0x8e22x6[_0xee2b[4835]]({xtype:_0xee2b[4861], listConfig:{htmlEncode:true}, fieldLabel:_0x8e22x6.L(_0xee2b[4876]), value:_0x8e22x6[_0xee2b[4542]][_0xee2b[4549]], triggerAction:_0xee2b[2862], cls:_0xee2b[4877], forceSelection:true, editable:false, name:_0xee2b[4549], queryMode:_0xee2b[4212], displayField:_0xee2b[683], valueField:_0xee2b[2302], store:{fields:[_0xee2b[683], _0xee2b[2302]], data:[{name:_0x8e22x6.L(_0xee2b[4878]), 
  value:_0xee2b[4550]}, {name:_0x8e22x6.L(_0xee2b[4879]), value:_0xee2b[4554]}, {name:_0x8e22x6.L(_0xee2b[4880]), value:_0xee2b[1097]}, {name:_0x8e22x6.L(_0xee2b[4881]), value:_0xee2b[4553]}]}}), _0x8e22x6[_0xee2b[4882]]));
  _0x8e22x6[_0xee2b[252]](_0x8e22x6[_0xee2b[4809]], _0xee2b[2459], _0x8e22x6[_0xee2b[4810]], _0x8e22x6);
  _0x8e22x6[_0xee2b[4811]] = Ext[_0xee2b[2109]][_0xee2b[831]](Ext[_0xee2b[154]][_0xee2b[4398]](_0x8e22x6[_0xee2b[4835]]({xtype:_0xee2b[4861], listConfig:{htmlEncode:true}, fieldLabel:_0x8e22x6.L(_0xee2b[4883]), value:_0x8e22x6[_0xee2b[4884]], triggerAction:_0xee2b[2862], cls:_0xee2b[4885], forceSelection:true, editable:false, name:_0xee2b[388], queryMode:_0xee2b[4212], displayField:_0xee2b[683], valueField:_0xee2b[2302], store:{fields:[_0xee2b[683], _0xee2b[2302]], data:Ext[_0xee2b[26]][_0xee2b[41]](_0x8e22x6[_0xee2b[4886]], 
  function(_0x8e22x2) {
    return {name:_0x8e22x2[_0xee2b[497]](), value:_0x8e22x2[_0xee2b[32]]()};
  })}}), _0x8e22x6[_0xee2b[4887]]));
  _0x8e22x6[_0xee2b[252]](_0x8e22x6[_0xee2b[4811]], _0xee2b[2459], _0x8e22x6[_0xee2b[4812]], _0x8e22x6);
  if (_0x8e22x6[_0xee2b[4888]]) {
    _0x8e22x6[_0xee2b[4889]] = Ext[_0xee2b[2109]][_0xee2b[831]](Ext[_0xee2b[154]][_0xee2b[4398]](_0x8e22x6[_0xee2b[4835]]({xtype:_0xee2b[4861], listConfig:{htmlEncode:true}, fieldLabel:_0x8e22x6.L(_0xee2b[4890]), value:_0x8e22x6[_0xee2b[4542]][_0xee2b[4557]], triggerAction:_0xee2b[2862], cls:_0xee2b[4891], forceSelection:true, editable:false, name:_0xee2b[4557], queryMode:_0xee2b[4212], displayField:_0xee2b[683], valueField:_0xee2b[2302], store:{fields:[_0xee2b[683], _0xee2b[2302]], data:[{name:_0x8e22x6.L(_0xee2b[4892]), 
    value:_0xee2b[2862]}, {name:_0x8e22x6.L(_0xee2b[4893]), value:_0xee2b[1690]}]}}), _0x8e22x6[_0xee2b[4894]]));
  }
  var _0x8e22x3 = [];
  _0x8e22x3[_0xee2b[11]](_0x8e22x6[_0xee2b[4809]]);
  if (_0x8e22x6[_0xee2b[4827]]) {
    _0x8e22x3[_0xee2b[11]](_0x8e22x6[_0xee2b[4827]]);
  }
  _0x8e22x3[_0xee2b[11]](_0x8e22x6[_0xee2b[4839]]);
  if (_0x8e22x6[_0xee2b[4821]]) {
    _0x8e22x3[_0xee2b[11]](_0x8e22x6[_0xee2b[4821]]);
  }
  if (_0x8e22x6[_0xee2b[4889]]) {
    _0x8e22x3[_0xee2b[11]](_0x8e22x6[_0xee2b[4889]]);
  }
  _0x8e22x3[_0xee2b[11]](_0x8e22x6[_0xee2b[4811]], _0x8e22x6[_0xee2b[4860]], _0x8e22x6[_0xee2b[4870]]);
  if (_0x8e22x6[_0xee2b[4846]]) {
    _0x8e22x3[_0xee2b[11]](_0x8e22x6[_0xee2b[4846]]);
  }
  if (_0x8e22x6[_0xee2b[4851]]) {
    _0x8e22x3[_0xee2b[11]](_0x8e22x6[_0xee2b[4851]]);
  }
  if (_0x8e22x6[_0xee2b[4856]]) {
    _0x8e22x3[_0xee2b[11]](_0x8e22x6[_0xee2b[4856]]);
  }
  return _0x8e22x3;
}, applyStateful:function(_0x8e22x3) {
  if (!this[_0xee2b[4770]]) {
    return _0x8e22x3;
  }
  var _0x8e22x6 = this, _0x8e22x4 = _0x8e22x6[_0xee2b[4895]] || _0xee2b[4697];
  return Ext[_0xee2b[330]](_0x8e22x3, {stateful:true, stateId:_0x8e22x4 + _0xee2b[4896] + _0x8e22x3[_0xee2b[683]]});
}, applyStatefulFull:function(_0x8e22x3) {
  if (!this[_0xee2b[4770]]) {
    return _0x8e22x3;
  }
  var _0x8e22x6 = this;
  return Ext[_0xee2b[8]](_0x8e22x6[_0xee2b[4835]](_0x8e22x3), {stateEvents:[_0xee2b[2459]], applyState:_0x8e22x6[_0xee2b[4897]], getState:_0x8e22x6[_0xee2b[4898]]});
}, getFieldState:function() {
  return {value:this[_0xee2b[4121]]()};
}, applyFieldState:function(_0x8e22x3) {
  if (_0xee2b[2302] in _0x8e22x3) {
    this[_0xee2b[2462]](_0x8e22x3[_0xee2b[2302]]);
  }
}, onRangeChange:function(_0x8e22x6, _0x8e22x3) {
  switch(_0x8e22x3) {
    case _0xee2b[4550]:
    case _0xee2b[4554]:
      this[_0xee2b[4839]][_0xee2b[256]]();
      this[_0xee2b[4827]] && this[_0xee2b[4827]][_0xee2b[256]]();
      break;
    case _0xee2b[1097]:
      this[_0xee2b[4839]][_0xee2b[2019]]();
      this[_0xee2b[4827]] && this[_0xee2b[4827]][_0xee2b[256]]();
      break;
    case _0xee2b[4553]:
      this[_0xee2b[4839]][_0xee2b[256]]();
      if (this[_0xee2b[4827]]) {
        this[_0xee2b[4827]][_0xee2b[2019]]();
        this[_0xee2b[4818]][_0xee2b[103]](true);
      }
      break;
  }
}, onExporterChange:function(_0x8e22x3, _0x8e22x6) {
  switch(_0x8e22x6) {
    case _0xee2b[4703]:
      this[_0xee2b[4899]](true);
      break;
    default:
      this[_0xee2b[4899]](false);
  }
}, disableFields:function(_0x8e22x6) {
  var _0x8e22x3 = this;
  _0x8e22x3[_0xee2b[4860]][_0xee2b[253]](_0x8e22x6);
  _0x8e22x3[_0xee2b[4870]][_0xee2b[253]](_0x8e22x6);
}});
Ext[_0xee2b[6]](_0xee2b[4900], {alternateClassName:_0xee2b[4901], extend:_0xee2b[4315], requires:[_0xee2b[4902], _0xee2b[4802]], mixins:[_0xee2b[665]], alias:_0xee2b[4903], width:450, cls:_0xee2b[4904], frame:false, layout:_0xee2b[4469], draggable:true, constrain:true, progressBar:null, buttonsPanel:null, buttonsPanelScope:null, doExportFnScope:null, doExportFn:function(_0x8e22x4, _0x8e22x3, _0x8e22x6) {
  throw _0xee2b[4905];
}, form:null, defaultFormXType:_0xee2b[4906], exportButtonConfig:null, cancelButtonConfig:null, formConfigs:_0xee2b[4907], constructor:function(_0x8e22x3) {
  Ext[_0xee2b[8]](this, _0x8e22x3);
  this[_0xee2b[14]] = this[_0xee2b[14]] || this.L(_0xee2b[14]);
  this[_0xee2b[9]](arguments);
}, mapFormConfigs:function() {
  this[_0xee2b[4067]] = this[_0xee2b[4067]] || {};
  var _0x8e22x4 = this[_0xee2b[4067]];
  var _0x8e22x5 = this[_0xee2b[4908]][_0xee2b[496]](_0xee2b[72]);
  for (var _0x8e22x6 = 0, _0x8e22x2 = _0x8e22x5[_0xee2b[4]]; _0x8e22x6 < _0x8e22x2; _0x8e22x6++) {
    var _0x8e22x3 = _0x8e22x5[_0x8e22x6];
    if (this[_0xee2b[53]](_0x8e22x3) && !_0x8e22x4[_0xee2b[53]](_0x8e22x3)) {
      _0x8e22x4[_0x8e22x3] = this[_0x8e22x3];
    }
  }
  if (this[_0xee2b[53]](_0xee2b[4856]) && !_0x8e22x4[_0xee2b[53]](_0xee2b[4816])) {
    _0x8e22x4[_0xee2b[4816]] = this[_0xee2b[4856]];
  }
  if (this[_0xee2b[53]](_0xee2b[4851]) && !_0x8e22x4[_0xee2b[53]](_0xee2b[4815])) {
    _0x8e22x4[_0xee2b[4815]] = this[_0xee2b[4851]];
  }
  if (_0x8e22x4[_0xee2b[4895]]) {
    _0x8e22x4[_0xee2b[4895]] = _0xee2b[4909] + _0x8e22x4[_0xee2b[4895]];
  }
}, initComponent:function() {
  var _0x8e22x3 = this;
  if (!_0x8e22x3[_0xee2b[4067]] || !_0x8e22x3[_0xee2b[4067]][_0xee2b[4910]]) {
    _0x8e22x3[_0xee2b[4911]]();
    _0x8e22x3[_0xee2b[4067]] = _0x8e22x3[_0xee2b[4912]]();
  }
  _0x8e22x3[_0xee2b[4913]] = _0x8e22x3[_0xee2b[4913]] || _0x8e22x3[_0xee2b[4372]](_0x8e22x3[_0xee2b[4914]] || _0x8e22x3);
  Ext[_0xee2b[8]](_0x8e22x3, {items:{items:[_0x8e22x3[_0xee2b[4067]], _0x8e22x3[_0xee2b[4915]] || _0x8e22x3[_0xee2b[4916]]()]}, fbar:_0x8e22x3[_0xee2b[4913]]});
  _0x8e22x3[_0xee2b[9]](arguments);
}, afterRender:function() {
  var _0x8e22x3 = this;
  if (_0x8e22x3[_0xee2b[4067]][_0xee2b[4818]]) {
    _0x8e22x3[_0xee2b[846]](_0x8e22x3[_0xee2b[4067]][_0xee2b[4818]], [_0xee2b[2459], _0xee2b[4793], _0xee2b[760]]);
  }
  _0x8e22x3[_0xee2b[9]](arguments);
}, buildButtons:function(_0x8e22x6) {
  var _0x8e22x3 = this;
  return [Ext[_0xee2b[8]]({xtype:_0xee2b[2104], scale:_0xee2b[4917], itemId:_0xee2b[4918], text:_0x8e22x3.L(_0xee2b[4919]), handler:_0x8e22x3[_0xee2b[4920]], scope:_0x8e22x6 || _0x8e22x3}, _0x8e22x3[_0xee2b[4921]]), Ext[_0xee2b[8]]({xtype:_0xee2b[2104], scale:_0xee2b[4917], itemId:_0xee2b[1499], text:_0x8e22x3.L(_0xee2b[4922]), handler:_0x8e22x3[_0xee2b[4923]], scope:_0x8e22x6 || _0x8e22x3}, _0x8e22x3[_0xee2b[4924]])];
}, onExportButtonPress:function() {
  if (this[_0xee2b[4067]][_0xee2b[348]]()) {
    var _0x8e22x6 = this[_0xee2b[4067]][_0xee2b[1556]]();
    this[_0xee2b[4579]]();
    var _0x8e22x3 = this[_0xee2b[4832]] || Ext[_0xee2b[703]][_0xee2b[4833]];
    if (_0x8e22x6[_0xee2b[4551]] && !Ext[_0xee2b[1579]](_0x8e22x6[_0xee2b[4551]])) {
      _0x8e22x6[_0xee2b[4551]] = Ext[_0xee2b[703]][_0xee2b[1253]](_0x8e22x6[_0xee2b[4551]], _0x8e22x3);
    }
    if (_0x8e22x6[_0xee2b[4552]] && !Ext[_0xee2b[1579]](_0x8e22x6[_0xee2b[4552]])) {
      _0x8e22x6[_0xee2b[4552]] = Ext[_0xee2b[703]][_0xee2b[1253]](_0x8e22x6[_0xee2b[4552]], _0x8e22x3);
    }
    this[_0xee2b[4928]][_0xee2b[293]](this[_0xee2b[4925]] || this, _0x8e22x6, this[_0xee2b[4926]], this[_0xee2b[4927]]);
  }
}, afterExport:function() {
  var _0x8e22x3 = this[_0xee2b[861]](_0xee2b[4929]);
  _0x8e22x3 && _0x8e22x3[_0xee2b[2064]]();
  this[_0xee2b[4915]] && this[_0xee2b[4915]][_0xee2b[256]]();
}, beforeExport:function() {
  var _0x8e22x3 = this[_0xee2b[861]](_0xee2b[4929]);
  _0x8e22x3 && _0x8e22x3[_0xee2b[2061]]();
  this[_0xee2b[4915]] && this[_0xee2b[4915]][_0xee2b[2019]]();
}, onExportSuccess:function() {
  this[_0xee2b[4591]]();
}, onExportFailure:function() {
  this[_0xee2b[4591]]();
}, onCancelButtonPress:function() {
  this[_0xee2b[218]]();
}, buildForm:function(_0x8e22x3) {
  this[_0xee2b[4067]] = Ext[_0xee2b[8]](this[_0xee2b[4067]] || {}, _0x8e22x3);
  return Ext[_0xee2b[2109]][_0xee2b[831]](this[_0xee2b[4067]], this[_0xee2b[4930]]);
}, buildProgressBar:function() {
  return this[_0xee2b[4915]] = new Ext.ProgressBar({text:this.L(_0xee2b[4931]), animate:true, hidden:true, margin:_0xee2b[4932]});
}});
Ext[_0xee2b[6]](_0xee2b[4933], {extend:_0xee2b[108], alternateClassName:_0xee2b[4934], alias:_0xee2b[4935], mixins:[_0xee2b[782], _0xee2b[665]], requires:[_0xee2b[717], _0xee2b[4702], _0xee2b[4713], _0xee2b[4752], _0xee2b[4900]], lockableScope:_0xee2b[686], pageSizes:{A5:{width:5.8, height:8.3}, A4:{width:8.3, height:11.7}, A3:{width:11.7, height:16.5}, Letter:{width:8.5, height:11}, Legal:{width:8.5, height:14}}, enableWebSocket:false, DPI:95, printServer:undefined, timeout:60000, headerTpl:null, 
headerTplDataFn:null, headerTplDataFnScope:null, tpl:null, footerTpl:null, footerTplDataFn:null, footerTplDataFnScope:null, exportDialogClassName:_0xee2b[4900], exportDialogConfig:{}, exporterConfig:null, exportConfig:{format:_0xee2b[4865], orientation:_0xee2b[4873], range:_0xee2b[4550], rowsRange:_0xee2b[2862], showHeader:true, showFooter:false}, expandAllBeforeExport:false, translateURLsToAbsolute:true, openAfterExport:true, openInNewTab:false, beforeExport:Ext[_0xee2b[688]], afterExport:Ext[_0xee2b[688]], 
fileFormat:_0xee2b[4936], defaultExporter:_0xee2b[4714], exporters:undefined, callbacks:undefined, currentAjaxRequest:undefined, currentWebSocketRequest:undefined, hideExportDialogTimeout:1000, constructor:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  _0x8e22x3 = _0x8e22x3 || {};
  _0x8e22x6[_0xee2b[4937]] = {};
  if (_0x8e22x3[_0xee2b[4938]]) {
    Ext[_0xee2b[154]][_0xee2b[25]](this[_0xee2b[4542]], function(_0x8e22x5, _0x8e22x4, _0x8e22x1) {
      var _0x8e22x2 = _0x8e22x3[_0xee2b[4938]][_0x8e22x5];
      if (_0x8e22x2) {
        _0x8e22x1[_0x8e22x5] = _0x8e22x2;
      }
    });
  }
  if (!(_0xee2b[4939] in window)) {
    _0x8e22x3[_0xee2b[4940]] = false;
  }
  _0x8e22x6[_0xee2b[9]]([_0x8e22x3]);
  _0x8e22x6[_0xee2b[4942]](_0x8e22x6[_0xee2b[4941]]);
  if (!_0x8e22x6[_0xee2b[4886]]) {
    _0x8e22x6[_0xee2b[4886]] = _0x8e22x6[_0xee2b[4943]]();
  }
  _0x8e22x6[_0xee2b[4944]]();
  _0x8e22x6[_0xee2b[4945]]();
}, init:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  _0x8e22x3[_0xee2b[4946]] = Ext[_0xee2b[283]][_0xee2b[282]](_0x8e22x6[_0xee2b[4946]], _0x8e22x6);
  _0x8e22x3[_0xee2b[4947]] = Ext[_0xee2b[283]][_0xee2b[282]](_0x8e22x6[_0xee2b[4947]], _0x8e22x6);
  _0x8e22x6[_0xee2b[2502]] = _0x8e22x3;
}, initExporters:function() {
  var _0x8e22x4 = this, _0x8e22x6 = _0x8e22x4[_0xee2b[4886]];
  for (var _0x8e22x3 = 0; _0x8e22x3 < _0x8e22x6[_0xee2b[4]]; _0x8e22x3++) {
    if (!_0x8e22x6[_0x8e22x3][_0xee2b[4948]]) {
      _0x8e22x6[_0x8e22x3] = _0x8e22x4[_0xee2b[4949]](_0x8e22x6[_0x8e22x3]);
    }
  }
}, bindExporters:function() {
  var _0x8e22x6 = this[_0xee2b[4886]];
  for (var _0x8e22x3 = 0; _0x8e22x3 < _0x8e22x6[_0xee2b[4]]; _0x8e22x3++) {
    this[_0xee2b[4950]](_0x8e22x6[_0x8e22x3]);
  }
}, bindExporter:function(_0x8e22x6) {
  var _0x8e22x3 = this;
  _0x8e22x3[_0xee2b[252]](_0x8e22x6, {commitpage:_0x8e22x3[_0xee2b[4951]], collectrows:_0x8e22x3[_0xee2b[4952]], scope:_0x8e22x3});
}, unbindExporter:function(_0x8e22x6) {
  var _0x8e22x3 = this;
  _0x8e22x3[_0xee2b[325]](_0x8e22x6, {commitpage:_0x8e22x3[_0xee2b[4951]], collectrows:_0x8e22x3[_0xee2b[4952]], scope:_0x8e22x3});
}, buildExporters:function() {
  return [_0xee2b[4702], _0xee2b[4713], _0xee2b[4752]];
}, getExporterConfig:function(_0x8e22x4, _0x8e22x6) {
  var _0x8e22x5 = this;
  var _0x8e22x3 = Ext[_0xee2b[8]]({translateURLsToAbsolute:_0x8e22x5[_0xee2b[4953]], expandAllBeforeExport:_0x8e22x5[_0xee2b[4581]], DPI:_0x8e22x5[_0xee2b[4849]]}, _0x8e22x5[_0xee2b[4954]]);
  if (_0x8e22x5[_0xee2b[4525]]) {
    _0x8e22x3[_0xee2b[4525]] = _0x8e22x5[_0xee2b[4525]];
  }
  if (_0x8e22x5[_0xee2b[4650]]) {
    _0x8e22x3[_0xee2b[4650]] = _0x8e22x5[_0xee2b[4650]];
    _0x8e22x3[_0xee2b[4651]] = _0x8e22x5[_0xee2b[4651]];
  }
  if (_0x8e22x5[_0xee2b[3612]]) {
    _0x8e22x3[_0xee2b[3612]] = _0x8e22x5[_0xee2b[3612]];
  }
  if (_0x8e22x5[_0xee2b[4527]]) {
    _0x8e22x3[_0xee2b[4527]] = _0x8e22x5[_0xee2b[4527]];
  }
  if (_0x8e22x5[_0xee2b[4656]]) {
    _0x8e22x3[_0xee2b[4656]] = _0x8e22x5[_0xee2b[4656]];
    _0x8e22x3[_0xee2b[4657]] = _0x8e22x5[_0xee2b[4657]];
  }
  return _0x8e22x3;
}, createExporter:function(_0x8e22x6, _0x8e22x3) {
  var _0x8e22x4 = this, _0x8e22x5 = _0x8e22x4[_0xee2b[4955]](_0x8e22x6, _0x8e22x3);
  if (Ext[_0xee2b[135]](_0x8e22x6)) {
    return Ext[_0xee2b[831]](Ext[_0xee2b[8]](_0x8e22x5, _0x8e22x6));
  } else {
    return Ext[_0xee2b[831]](_0x8e22x6, Ext[_0xee2b[8]](_0x8e22x5, _0x8e22x3));
  }
}, registerExporter:function(_0x8e22x6, _0x8e22x3) {
  if (!(_0x8e22x6 instanceof Sch[_0xee2b[3362]][_0xee2b[4697]][_0xee2b[4956]])) {
    _0x8e22x6 = this[_0xee2b[4949]][_0xee2b[8]](this, arguments);
  }
  this[_0xee2b[4886]][_0xee2b[11]](_0x8e22x6);
  this[_0xee2b[4950]](_0x8e22x6);
}, getExporter:function(_0x8e22x6) {
  if (!_0x8e22x6) {
    return;
  }
  var _0x8e22x3 = this[_0xee2b[4937]][_0x8e22x6];
  if (_0x8e22x3) {
    return _0x8e22x3;
  }
  _0x8e22x3 = this[_0xee2b[4937]][_0x8e22x6] = Ext[_0xee2b[26]][_0xee2b[1761]](this[_0xee2b[4886]], function(_0x8e22x4) {
    return _0x8e22x4[_0xee2b[32]]() == _0x8e22x6;
  });
  return _0x8e22x3;
}, getExporters:function() {
  return this[_0xee2b[4886]];
}, setFileFormat:function(_0x8e22x3) {
  this[_0xee2b[4941]] = _0x8e22x3;
}, showExportDialog:function() {
  var _0x8e22x6 = this, _0x8e22x3 = _0x8e22x6[_0xee2b[4957]]();
  if (_0x8e22x3) {
    _0x8e22x3[_0xee2b[218]]();
  }
  _0x8e22x6[_0xee2b[4959]](_0x8e22x6[_0xee2b[4958]]());
  _0x8e22x3 = _0x8e22x6[_0xee2b[4957]]();
  _0x8e22x3[_0xee2b[149]](_0xee2b[218], _0x8e22x6[_0xee2b[4960]], _0x8e22x6);
  if (_0x8e22x3[_0xee2b[4915]]) {
    _0x8e22x3[_0xee2b[252]](_0x8e22x6, {progressupdate:_0x8e22x6[_0xee2b[4961]], scope:_0x8e22x6});
  }
  _0x8e22x3[_0xee2b[2019]]();
}, buildExportDialog:function() {
  return Ext[_0xee2b[831]](this[_0xee2b[4962]], this[_0xee2b[4963]]());
}, buildExportDialogConfig:function() {
  var _0x8e22x6 = this, _0x8e22x3 = _0x8e22x6[_0xee2b[2502]][_0xee2b[808]]();
  return Ext[_0xee2b[154]][_0xee2b[4398]]({doExportFn:_0x8e22x6[_0xee2b[4947]], doExportFnScope:_0x8e22x6, startDate:_0x8e22x6[_0xee2b[2502]][_0xee2b[697]](), endDate:_0x8e22x6[_0xee2b[2502]][_0xee2b[698]](), rowHeight:_0x8e22x3[_0xee2b[810]][_0xee2b[2832]](), columnWidth:_0x8e22x3[_0xee2b[810]][_0xee2b[755]](), defaultExporter:_0x8e22x6[_0xee2b[4884]], exportConfig:Ext[_0xee2b[8]](_0x8e22x6[_0xee2b[4542]], {DPI:_0x8e22x6[_0xee2b[4849]]}), exporters:_0x8e22x6[_0xee2b[4886]], pageFormats:_0x8e22x6[_0xee2b[4964]](), 
  columnPickerConfig:{columns:_0x8e22x6[_0xee2b[2502]][_0xee2b[1830]][_0xee2b[2573]](_0xee2b[4965])}}, _0x8e22x6[_0xee2b[4938]]);
}, onExportDialogDestroy:function() {
  this[_0xee2b[4966]]();
  this[_0xee2b[4959]](null);
}, onExportProgress:function(_0x8e22x4, _0x8e22x6) {
  var _0x8e22x3 = this[_0xee2b[4957]](), _0x8e22x5 = _0x8e22x3 && _0x8e22x3[_0xee2b[4915]];
  if (_0x8e22x5) {
    _0x8e22x5[_0xee2b[4967]](_0x8e22x4);
    if (typeof _0x8e22x6 == _0xee2b[308]) {
      _0x8e22x5[_0xee2b[4968]](_0x8e22x6);
    }
  }
}, showError:function(_0x8e22x3) {
  Ext[_0xee2b[4971]][_0xee2b[4970]](_0xee2b[27], _0x8e22x3 || this.L(_0xee2b[4969]));
}, getPageFormats:function() {
  var _0x8e22x3 = this[_0xee2b[4972]], _0x8e22x6 = [];
  Ext[_0xee2b[154]][_0xee2b[25]](_0x8e22x3, function(_0x8e22x4, _0x8e22x5) {
    _0x8e22x6[_0xee2b[11]]({width:_0x8e22x5[_0xee2b[773]], height:_0x8e22x5[_0xee2b[747]], name:_0x8e22x4});
  });
  return Ext[_0xee2b[26]][_0xee2b[41]](_0x8e22x6[_0xee2b[1120]](function(_0x8e22x5, _0x8e22x4) {
    return _0x8e22x5[_0xee2b[773]] - _0x8e22x4[_0xee2b[773]];
  }), function(_0x8e22x4) {
    return _0x8e22x4[_0xee2b[683]];
  });
}, getExportConfig:function(_0x8e22x6) {
  var _0x8e22x4 = this;
  var _0x8e22x3 = Ext[_0xee2b[8]]({fileFormat:_0x8e22x4[_0xee2b[4941]], id:_0x8e22x4[_0xee2b[4884]], beforeExport:Ext[_0xee2b[283]][_0xee2b[282]](_0x8e22x4[_0xee2b[4579]], _0x8e22x4), afterExport:Ext[_0xee2b[283]][_0xee2b[282]](_0x8e22x4[_0xee2b[4591]], _0x8e22x4)}, _0x8e22x6, _0x8e22x4[_0xee2b[4542]]);
  _0x8e22x3[_0xee2b[4849]] = _0x8e22x3[_0xee2b[4849]] || _0x8e22x4[_0xee2b[4849]];
  _0x8e22x3[_0xee2b[352]] = Ext[_0xee2b[8]]({}, _0x8e22x4[_0xee2b[4972]][_0x8e22x3[_0xee2b[880]]]);
  _0x8e22x3[_0xee2b[352]][_0xee2b[773]] *= _0x8e22x3[_0xee2b[4849]];
  _0x8e22x3[_0xee2b[352]][_0xee2b[747]] *= _0x8e22x3[_0xee2b[4849]];
  return _0x8e22x3;
}, doExport:function(_0x8e22x5, _0x8e22x7, _0x8e22x3, _0x8e22x2) {
  var _0x8e22x1 = this, _0x8e22x4 = _0x8e22x1[_0xee2b[2502]], _0x8e22x6 = _0x8e22x1[_0xee2b[4973]](_0x8e22x5);
  _0x8e22x1[_0xee2b[4618]] = {success:_0x8e22x7, failure:_0x8e22x3, scope:_0x8e22x2 || _0x8e22x1};
  var _0x8e22x9 = _0x8e22x1[_0xee2b[4697]] = _0x8e22x1[_0xee2b[4974]](_0x8e22x6[_0xee2b[388]]);
  if (_0x8e22x1[_0xee2b[180]](_0xee2b[4975], _0x8e22x4, _0x8e22x9, _0x8e22x6) !== false) {
    _0x8e22x1[_0xee2b[4976]]();
    _0x8e22x1[_0xee2b[4697]][_0xee2b[4977]](_0x8e22x4, _0x8e22x6, function(_0x8e22xa) {
      _0x8e22x1[_0xee2b[4709]](_0x8e22xa, _0x8e22x4, _0x8e22x9, _0x8e22x6);
    }, _0x8e22x1);
  }
}, cancelExport:function() {
  if (this[_0xee2b[4978]]) {
    Ext[_0xee2b[945]][_0xee2b[944]](this[_0xee2b[4978]]);
    this[_0xee2b[4978]] = null;
  } else {
    if (this[_0xee2b[4979]]) {
      this[_0xee2b[4979]][_0xee2b[4327]]();
      this[_0xee2b[4979]] = null;
    } else {
      if (this[_0xee2b[4697]]) {
        this[_0xee2b[4697]][_0xee2b[944]]();
      }
    }
  }
  this[_0xee2b[2502]][_0xee2b[787]]()[_0xee2b[4980]]();
}, onPagesExtracted:function(_0x8e22x3, _0x8e22x4, _0x8e22x5, _0x8e22x6) {
  this[_0xee2b[180]](_0xee2b[4981], 0.8, this.L(_0xee2b[4982]));
  if (this[_0xee2b[4940]]) {
    this[_0xee2b[4983]](_0x8e22x3, _0x8e22x6);
  } else {
    this[_0xee2b[4984]](_0x8e22x3, _0x8e22x6);
  }
}, onRowCollected:function(_0x8e22x4, _0x8e22x5, _0x8e22x6, _0x8e22x3) {
  this[_0xee2b[180]](_0xee2b[4981], 0.2 * (_0x8e22x6 + 1) / _0x8e22x3, Ext[_0xee2b[1041]][_0xee2b[880]](this.L(_0xee2b[4985]), _0x8e22x6, _0x8e22x3));
}, onPageCommit:function(_0x8e22x5, _0x8e22x4, _0x8e22x6, _0x8e22x3) {
  _0x8e22x3 = Math[_0xee2b[715]](_0x8e22x6, _0x8e22x3);
  this[_0xee2b[180]](_0xee2b[4981], 0.2 + 0.6 * _0x8e22x6 / _0x8e22x3, Ext[_0xee2b[1041]][_0xee2b[880]](this.L(_0xee2b[4986]), _0x8e22x6, _0x8e22x3));
}, onExportSuccess:function(_0x8e22x3) {
  var _0x8e22x9 = this, _0x8e22x5 = _0x8e22x9[_0xee2b[4957]](), _0x8e22x1 = _0x8e22x9[_0xee2b[4618]], _0x8e22x4 = _0x8e22x1 && _0x8e22x1[_0xee2b[426]], _0x8e22x6 = _0x8e22x1 && _0x8e22x1[_0xee2b[689]] || _0x8e22x9;
  _0x8e22x9[_0xee2b[180]](_0xee2b[4981], 1);
  _0x8e22x9[_0xee2b[4987]](true, _0x8e22x3[_0xee2b[950]]);
  _0x8e22x4 && _0x8e22x4[_0xee2b[8]](_0x8e22x6, arguments);
  _0x8e22x9[_0xee2b[4988]] = setTimeout(function() {
    _0x8e22x5 && _0x8e22x5[_0xee2b[218]]();
  }, _0x8e22x9[_0xee2b[4989]]);
  if (_0x8e22x9[_0xee2b[4990]]) {
    if (Ext[_0xee2b[960]]) {
      window[_0xee2b[4992]](_0x8e22x3[_0xee2b[950]], _0xee2b[4991]);
    } else {
      var _0x8e22x2 = document[_0xee2b[3662]](_0xee2b[4993]);
      _0x8e22x2[_0xee2b[4994]] = _0xee2b[4918];
      _0x8e22x2[_0xee2b[4562]] = _0x8e22x3[_0xee2b[950]];
      if (_0x8e22x9[_0xee2b[4995]]) {
        _0x8e22x2[_0xee2b[969]] = _0xee2b[4996];
      }
      document[_0xee2b[2179]][_0xee2b[83]](_0x8e22x2);
      _0x8e22x2[_0xee2b[248]]();
      document[_0xee2b[2179]][_0xee2b[78]](_0x8e22x2);
    }
  }
}, onExportFailure:function(_0x8e22x9, _0x8e22x3) {
  var _0x8e22x1 = this, _0x8e22x6 = this[_0xee2b[4957]](), _0x8e22x2 = _0x8e22x1[_0xee2b[4618]], _0x8e22x5 = _0x8e22x2 && _0x8e22x2[_0xee2b[951]], _0x8e22x4 = _0x8e22x2 && _0x8e22x2[_0xee2b[689]] || _0x8e22x1;
  _0x8e22x5 && _0x8e22x5[_0xee2b[293]](_0x8e22x4, _0x8e22x9);
  _0x8e22x1[_0xee2b[180]](_0xee2b[4997], _0x8e22x6, _0x8e22x9, _0x8e22x3);
  _0x8e22x1[_0xee2b[4998]](_0x8e22x9);
  _0x8e22x1[_0xee2b[4987]](false, null);
}, doSocketRequest:function(_0x8e22x2, _0x8e22x5) {
  var _0x8e22x9 = this, _0x8e22x4 = _0x8e22x9[_0xee2b[2502]];
  if (_0x8e22x9[_0xee2b[4999]]) {
    var _0x8e22x6 = this[_0xee2b[4999]][_0xee2b[675]](/^http(s)?/i, _0xee2b[5000]);
    var _0x8e22x1 = Ext[_0xee2b[444]](Ext[_0xee2b[8]]({html:_0x8e22x2, startDate:_0x8e22x4[_0xee2b[712]](), endDate:_0x8e22x4[_0xee2b[713]](), format:_0x8e22x9[_0xee2b[4697]][_0xee2b[5001]](), orientation:_0x8e22x5[_0xee2b[3378]], range:_0x8e22x5[_0xee2b[4549]], fileFormat:_0x8e22x9[_0xee2b[4941]]}, this[_0xee2b[5002]]()));
    var _0x8e22x3 = new WebSocket(_0x8e22x6);
    _0x8e22x9[_0xee2b[4979]] = _0x8e22x3;
    _0x8e22x3[_0xee2b[5003]] = function() {
      _0x8e22x3[_0xee2b[5004]](_0x8e22x1);
    };
    _0x8e22x3[_0xee2b[5005]] = function(_0x8e22xa) {
      var _0x8e22x7 = Ext[_0xee2b[425]](_0x8e22xa[_0xee2b[22]]);
      _0x8e22x3[_0xee2b[4327]]();
      _0x8e22x9[_0xee2b[4979]] = null;
      if (_0x8e22x7[_0xee2b[426]]) {
        _0x8e22x7[_0xee2b[950]] = _0x8e22x9[_0xee2b[4999]] + _0xee2b[5006] + _0x8e22x7[_0xee2b[5007]];
        _0x8e22x9[_0xee2b[4926]](_0x8e22x7);
      } else {
        _0x8e22x9[_0xee2b[4927]](_0x8e22x7[_0xee2b[5008]], _0x8e22x7);
      }
    };
  }
}, doRequest:function(_0x8e22x3, _0x8e22x6) {
  var _0x8e22x1 = this, _0x8e22x9 = _0x8e22x1[_0xee2b[2502]];
  if (!_0x8e22x1[_0xee2b[2881]] && !_0x8e22x1[_0xee2b[5009]]) {
    if (_0x8e22x1[_0xee2b[4999]]) {
      var _0x8e22x8 = {method:_0xee2b[943], url:_0x8e22x1[_0xee2b[4999]], timeout:_0x8e22x1[_0xee2b[112]], params:Ext[_0xee2b[8]]({html:{array:Ext[_0xee2b[883]][_0xee2b[444]](_0x8e22x3)}, startDate:_0x8e22x9[_0xee2b[712]](), endDate:_0x8e22x9[_0xee2b[713]](), format:_0x8e22x1[_0xee2b[4697]][_0xee2b[5001]](), orientation:_0x8e22x6[_0xee2b[3378]], range:_0x8e22x6[_0xee2b[4549]], fileFormat:_0x8e22x1[_0xee2b[4941]]}, this[_0xee2b[5002]]()), success:_0x8e22x1[_0xee2b[5010]], failure:_0x8e22x1[_0xee2b[5011]], 
      scope:_0x8e22x1};
      Ext[_0xee2b[8]](_0x8e22x8, this[_0xee2b[5012]](_0x8e22x8));
      this[_0xee2b[4978]] = Ext[_0xee2b[945]][_0xee2b[956]](_0x8e22x8);
    } else {
      _0x8e22x1[_0xee2b[4927]](_0xee2b[5013]);
    }
  } else {
    if (_0x8e22x1[_0xee2b[5009]]) {
      var _0x8e22x4 = _0x8e22x3 || [];
      for (var _0x8e22x2 = 0, _0x8e22x5 = _0x8e22x4[_0xee2b[4]]; _0x8e22x2 < _0x8e22x5; _0x8e22x2++) {
        var _0x8e22x7 = window[_0xee2b[4992]]();
        _0x8e22x7[_0xee2b[5015]][_0xee2b[5014]](_0x8e22x4[_0x8e22x2][_0xee2b[4645]]);
        _0x8e22x7[_0xee2b[5015]][_0xee2b[4327]]();
      }
    }
    _0x8e22x1[_0xee2b[4926]](_0x8e22x1[_0xee2b[5016]] || {success:true, url:_0xee2b[5017], htmlArray:_0x8e22x3});
  }
}, onRequestSuccess:function(_0x8e22x6) {
  this[_0xee2b[4978]] = null;
  var _0x8e22x4 = this, _0x8e22x3;
  try {
    _0x8e22x3 = Ext[_0xee2b[883]][_0xee2b[425]](_0x8e22x6[_0xee2b[953]]);
  } catch (d) {
    _0x8e22x4[_0xee2b[4927]](_0xee2b[5018]);
    return;
  }
  if (_0x8e22x3[_0xee2b[426]]) {
    _0x8e22x4[_0xee2b[4926]](_0x8e22x3);
  } else {
    _0x8e22x4[_0xee2b[4927]](_0x8e22x3[_0xee2b[5008]], _0x8e22x3);
  }
}, onRequestFailure:function(_0x8e22x3) {
  this[_0xee2b[4978]] = null;
  var _0x8e22x6 = this, _0x8e22x4 = _0x8e22x3[_0xee2b[5019]] === 200 ? _0x8e22x3[_0xee2b[953]] : _0x8e22x3[_0xee2b[5020]];
  _0x8e22x6[_0xee2b[4927]](_0x8e22x4, _0x8e22x3);
}, getParameters:function() {
  return {};
}, getAjaxConfig:function(_0x8e22x3) {
  return {};
}, getActiveExportDialog:function() {
  return this[_0xee2b[5021]];
}, setActiveExportDialog:function(_0x8e22x3) {
  this[_0xee2b[5021]] = _0x8e22x3;
}, myBeforeExport:function() {
  this[_0xee2b[180]](_0xee2b[5022], this);
  var _0x8e22x3 = this[_0xee2b[2502]][_0xee2b[787]]()[_0xee2b[4184]]();
  _0x8e22x3[_0xee2b[264]](_0xee2b[5023]);
  var _0x8e22x6 = this[_0xee2b[4957]](), _0x8e22x4 = _0x8e22x6 && _0x8e22x6[_0xee2b[4915]];
  if (_0x8e22x4) {
    _0x8e22x4[_0xee2b[2019]]();
  }
}, myAfterExport:function(_0x8e22x6, _0x8e22x3) {
  this[_0xee2b[180]](_0xee2b[5024], this, _0x8e22x6, _0x8e22x3);
  this[_0xee2b[2502]][_0xee2b[787]]()[_0xee2b[4980]]();
}, destroy:function() {
  var _0x8e22x3 = this[_0xee2b[4957]]();
  _0x8e22x3 && _0x8e22x3[_0xee2b[218]]();
  this[_0xee2b[9]](arguments);
  clearTimeout(this[_0xee2b[5025]]);
  clearTimeout(this[_0xee2b[4988]]);
  if (this[_0xee2b[4957]]()) {
    this[_0xee2b[4957]]()[_0xee2b[218]]();
  }
}});
Ext[_0xee2b[6]](_0xee2b[5026], {extend:_0xee2b[782], requires:[_0xee2b[1996], _0xee2b[1141], _0xee2b[716]], alias:_0xee2b[5027], dateFormat:_0xee2b[5028], tipCfg:null, tip:null, tipCls:_0xee2b[5029], delegateCls:_0xee2b[719], init:function(_0x8e22x3) {
  _0x8e22x3[_0xee2b[808]]()[_0xee2b[149]](_0xee2b[3088], this[_0xee2b[3097]], this);
}, setupTooltip:function() {
  var _0x8e22x3 = this, _0x8e22x6 = _0x8e22x3[_0xee2b[800]]()[_0xee2b[3380]][_0xee2b[3565]]();
  _0x8e22x3[_0xee2b[2106]] = Ext[_0xee2b[831]](Ext[_0xee2b[8]]({xtype:_0xee2b[2000], cls:_0x8e22x3[_0xee2b[5030]], showDelay:0, trackMouse:true, target:_0x8e22x6[_0xee2b[787]](), delegate:_0xee2b[495] + _0x8e22x3[_0xee2b[5031]]}, _0x8e22x3[_0xee2b[3110]]));
  _0x8e22x3[_0xee2b[2106]][_0xee2b[149]](_0xee2b[2028], _0x8e22x3[_0xee2b[5032]], _0x8e22x3);
}, beforeTipShow:function() {
  var _0x8e22x6 = this, _0x8e22x3 = Ext[_0xee2b[703]][_0xee2b[1253]](_0x8e22x6[_0xee2b[2106]][_0xee2b[3075]][_0xee2b[5033]][_0xee2b[1097]], Sch[_0xee2b[829]][_0xee2b[828]][_0xee2b[5034]]);
  _0x8e22x6[_0xee2b[2106]][_0xee2b[724]](_0x8e22x6[_0xee2b[5035]](_0x8e22x3));
}, getTipContent:function(_0x8e22x3) {
  return Ext[_0xee2b[703]][_0xee2b[880]](_0x8e22x3, this[_0xee2b[879]]);
}, destroy:function() {
  if (this[_0xee2b[2106]]) {
    this[_0xee2b[2106]][_0xee2b[218]]();
  }
  this[_0xee2b[9]](arguments);
}});
Ext[_0xee2b[6]](_0xee2b[5036], {extend:_0xee2b[1948], mixins:[_0xee2b[782]], alias:_0xee2b[5037], lockableScope:_0xee2b[686], scheduler:null, proxy:null, headerRegion:null, init:function(_0x8e22x3) {
  this[_0xee2b[2502]] = _0x8e22x3;
  this[_0xee2b[5038]]();
  _0x8e22x3[_0xee2b[149]](_0xee2b[3420], this[_0xee2b[5038]], this);
}, onOrientationChange:function() {
  return this[_0xee2b[5038]][_0xee2b[8]](this, arguments);
}, onModeChange:function() {
  var _0x8e22x3 = this[_0xee2b[2502]][_0xee2b[861]](_0xee2b[3112]);
  if (_0x8e22x3) {
    if (_0x8e22x3[_0xee2b[262]]) {
      this[_0xee2b[5039]](_0x8e22x3);
    } else {
      _0x8e22x3[_0xee2b[149]]({afterrender:this[_0xee2b[5039]], scope:this});
    }
  }
}, onTimeAxisColumnRender:function(_0x8e22x3) {
  this[_0xee2b[379]] = _0x8e22x3[_0xee2b[265]][_0xee2b[825]]({cls:_0xee2b[4144]});
  this[_0xee2b[4143]](_0x8e22x3[_0xee2b[265]]);
}, onStart:function(_0x8e22x3) {
  this[_0xee2b[379]][_0xee2b[2019]]();
  this[_0xee2b[5040]] = this[_0xee2b[2502]][_0xee2b[3380]][_0xee2b[1848]][_0xee2b[1945]]();
}, onDrag:function(_0x8e22x6) {
  var _0x8e22x4 = this[_0xee2b[5040]];
  var _0x8e22x3 = this[_0xee2b[1945]]()[_0xee2b[3068]](_0x8e22x4);
  _0x8e22x3[_0xee2b[686]] = _0x8e22x4[_0xee2b[686]];
  _0x8e22x3[_0xee2b[754]] = _0x8e22x4[_0xee2b[754]];
  this[_0xee2b[379]][_0xee2b[2068]](_0x8e22x3);
}, onEnd:function(_0x8e22x7) {
  if (this[_0xee2b[379]]) {
    this[_0xee2b[379]][_0xee2b[4142]](false);
    var _0x8e22x4 = this[_0xee2b[2502]];
    var _0x8e22x9 = this[_0xee2b[1945]]();
    var _0x8e22x6 = _0x8e22x4[_0xee2b[808]]()[_0xee2b[2075]](_0x8e22x9);
    if (_0x8e22x6) {
      var _0x8e22x1 = _0x8e22x4[_0xee2b[1795]];
      var _0x8e22x5 = _0x8e22x4[_0xee2b[808]]()[_0xee2b[810]][_0xee2b[877]]()[_0xee2b[1734]];
      var _0x8e22xa = _0x8e22x1[_0xee2b[1751]](_0x8e22x6[_0xee2b[179]], false, _0x8e22x5, 1);
      var _0x8e22x3 = _0x8e22x1[_0xee2b[1750]](_0x8e22x6[_0xee2b[771]], false, _0x8e22x5, 1);
      if (this[_0xee2b[180]](_0xee2b[5041], this, _0x8e22x4, _0x8e22xa, _0x8e22x3) !== false) {
        _0x8e22x4[_0xee2b[2786]]({start:_0x8e22xa, end:_0x8e22x3});
      }
    }
  }
}, destroy:function() {
  if (this[_0xee2b[379]]) {
    Ext[_0xee2b[218]](this[_0xee2b[379]]);
    this[_0xee2b[379]] = null;
  }
  this[_0xee2b[9]](arguments);
}});
Ext[_0xee2b[6]](_0xee2b[5042], {extend:_0xee2b[782], alias:_0xee2b[5043], lockableScope:_0xee2b[686], enableVerticalPan:true, statics:{KEY_SHIFT:1, KEY_CTRL:2, KEY_ALT:4, KEY_ALL:7}, disableOnKey:0, constructor:function(_0x8e22x3) {
  Ext[_0xee2b[8]](this, _0x8e22x3);
}, init:function(_0x8e22x3) {
  this[_0xee2b[829]] = _0x8e22x3[_0xee2b[808]]();
  this[_0xee2b[829]][_0xee2b[149]](_0xee2b[3088], this[_0xee2b[5044]], this);
}, onRender:function() {
  this[_0xee2b[829]][_0xee2b[265]][_0xee2b[149]](_0xee2b[784], this[_0xee2b[785]], this);
}, onMouseDown:function(_0x8e22x4) {
  if (_0x8e22x4[_0xee2b[1440]][_0xee2b[1972]] && _0x8e22x4[_0xee2b[1440]][_0xee2b[1972]][_0xee2b[4]] > 0 || !_0x8e22x4[_0xee2b[1440]][_0xee2b[1972]] && _0x8e22x4[_0xee2b[2104]] !== 0) {
    return;
  }
  var _0x8e22x6 = this[_0xee2b[45]], _0x8e22x3 = this[_0xee2b[5045]];
  if (_0x8e22x4[_0xee2b[4051]] && _0x8e22x3 & _0x8e22x6[_0xee2b[5046]] || _0x8e22x4[_0xee2b[2794]] && _0x8e22x3 & _0x8e22x6[_0xee2b[5047]] || _0x8e22x4[_0xee2b[5048]] && _0x8e22x3 & _0x8e22x6[_0xee2b[5049]]) {
    return;
  }
  if (_0x8e22x4[_0xee2b[2033]](this[_0xee2b[829]][_0xee2b[2594]], 10) && !_0x8e22x4[_0xee2b[2033]](this[_0xee2b[829]][_0xee2b[2594]] + _0xee2b[5050])) {
    this[_0xee2b[5051]] = _0x8e22x4[_0xee2b[809]]();
    this[_0xee2b[5052]] = _0x8e22x4[_0xee2b[1936]]();
    Ext[_0xee2b[797]]()[_0xee2b[149]](_0xee2b[798], this[_0xee2b[799]], this);
    Ext[_0xee2b[2222]]()[_0xee2b[149]](_0xee2b[801], this[_0xee2b[802]], this);
    if (Ext[_0xee2b[960]] || Ext[_0xee2b[5053]]) {
      Ext[_0xee2b[797]]()[_0xee2b[149]](_0xee2b[2022], this[_0xee2b[802]], this);
    }
    _0x8e22x4[_0xee2b[2217]]();
  }
}, onMouseMove:function(_0x8e22x1) {
  if (this[_0xee2b[144]]) {
    return;
  }
  _0x8e22x1[_0xee2b[2217]]();
  var _0x8e22x3 = _0x8e22x1[_0xee2b[809]](), _0x8e22x7 = _0x8e22x1[_0xee2b[1936]](), _0x8e22x4 = 0, _0x8e22x5 = this[_0xee2b[5051]] - _0x8e22x3;
  if (this[_0xee2b[5054]]) {
    _0x8e22x4 = this[_0xee2b[5052]] - _0x8e22x7;
  }
  this[_0xee2b[5051]] = _0x8e22x3;
  this[_0xee2b[5052]] = _0x8e22x7;
  var _0x8e22x9 = this[_0xee2b[829]][_0xee2b[1966]]();
  _0x8e22x4 && this[_0xee2b[829]][_0xee2b[2835]](Math[_0xee2b[715]](0, _0x8e22x4 + _0x8e22x9[_0xee2b[686]]), false);
  _0x8e22x5 && this[_0xee2b[829]][_0xee2b[2838]](Math[_0xee2b[715]](0, _0x8e22x5 + _0x8e22x9[_0xee2b[1354]]), false);
  var _0x8e22x6 = this[_0xee2b[829]][_0xee2b[1848]][_0xee2b[1941]]();
  _0x8e22x6 && _0x8e22x6[_0xee2b[3127]](_0x8e22x5, 0, false);
}, onMouseUp:function() {
  Ext[_0xee2b[797]]()[_0xee2b[152]](_0xee2b[798], this[_0xee2b[799]], this);
  Ext[_0xee2b[2222]]()[_0xee2b[152]](_0xee2b[801], this[_0xee2b[802]], this);
  if (Ext[_0xee2b[960]] || Ext[_0xee2b[5053]]) {
    Ext[_0xee2b[797]]()[_0xee2b[152]](_0xee2b[2022], this[_0xee2b[802]], this);
  }
}});
Ext[_0xee2b[6]](_0xee2b[5055], {extend:_0xee2b[4933], requires:[_0xee2b[717], _0xee2b[5056]], alternateClassName:[_0xee2b[5057]], alias:[_0xee2b[5058], _0xee2b[5059]], docType:_0xee2b[5060], beforePrint:function() {
}, afterPrint:function() {
}, exportDialogConfig:{showDPIField:true}, removeSecondaryCanvas:false, wrapHeaders:false, autoPrintAndClose:true, mainTpl:_0xee2b[5061] + Ext[_0xee2b[238]] + _0xee2b[5062], pageTpl:_0xee2b[5063], setupScriptTpl:_0xee2b[5064], openAfterExport:false, DPI:72, fakeBackgroundColor:false, doRequest:function() {
}, constructor:function(_0x8e22x3) {
  Ext[_0xee2b[8]](this, _0x8e22x3);
  if (!this[_0xee2b[5065]][_0xee2b[4528]]) {
    this[_0xee2b[5065]] = new Ext.XTemplate(this[_0xee2b[5065]]);
  }
  this[_0xee2b[9]](arguments);
  this[_0xee2b[4938]] = Ext[_0xee2b[330]]({l10n:{title:this.L(_0xee2b[5066]), exportButtonText:this.L(_0xee2b[4919])}}, this[_0xee2b[4938]]);
}, init:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  _0x8e22x3[_0xee2b[5067]] = Ext[_0xee2b[283]][_0xee2b[282]](_0x8e22x6[_0xee2b[5067]], _0x8e22x6);
  _0x8e22x6[_0xee2b[2502]] = _0x8e22x3;
}, showPopupBlockedMessage:function() {
  Ext[_0xee2b[5069]](this[_0xee2b[5068]]());
}, getPopupBlockedMessageConfig:function() {
  return {html:this.L(_0xee2b[5070]), title:this.L(_0xee2b[5071]), autoCloseDelay:5000};
}, getExporterConfig:function(_0x8e22x4, _0x8e22x6) {
  var _0x8e22x5 = this, _0x8e22x3 = _0x8e22x5[_0xee2b[9]](arguments);
  return Ext[_0xee2b[8]](_0x8e22x3, {tpl:_0x8e22x5[_0xee2b[5072]]});
}, getExportConfig:function(_0x8e22x6) {
  var _0x8e22x4 = this, _0x8e22x3 = _0x8e22x4[_0xee2b[9]](arguments);
  return Ext[_0xee2b[8]](_0x8e22x3, {beforeExport:Ext[_0xee2b[283]][_0xee2b[282]](_0x8e22x4[_0xee2b[5073]], _0x8e22x4), afterExport:Ext[_0xee2b[283]][_0xee2b[282]](_0x8e22x4[_0xee2b[5074]], _0x8e22x4)});
}, onPagesExtracted:function(_0x8e22x3, _0x8e22x4, _0x8e22x5, _0x8e22x6) {
  this[_0xee2b[180]](_0xee2b[4981], 0.8, this.L(_0xee2b[4982]));
  this[_0xee2b[5075]](_0x8e22x3, _0x8e22x4, _0x8e22x5, _0x8e22x6);
}, print:function() {
  this[_0xee2b[4946]]();
}, onBeforePageCommit:function(_0x8e22x4, _0x8e22x5, _0x8e22x8, _0x8e22xd) {
  var _0x8e22x7 = this[_0xee2b[2502]], _0x8e22x1 = _0x8e22x7[_0xee2b[1830]], _0x8e22x9 = _0x8e22x7[_0xee2b[3380]], _0x8e22x2 = function(_0x8e22xc) {
    return _0x8e22x5[_0xee2b[760]](_0xee2b[4535] + _0x8e22xc)[_0xee2b[572]]();
  };
  var _0x8e22x3 = _0x8e22x5[_0xee2b[760]](_0x8e22x4[_0xee2b[4536]])[_0xee2b[572]](), _0x8e22xf = _0x8e22x2(_0x8e22x9[_0xee2b[1848]][_0xee2b[388]]), _0x8e22xa = _0x8e22x5[_0xee2b[760]](_0x8e22x4[_0xee2b[4534]])[_0xee2b[572]](), _0x8e22x6 = _0x8e22x2(_0x8e22x1[_0xee2b[1848]][_0xee2b[388]]);
  _0x8e22x3[_0xee2b[264]]([_0xee2b[5076], this[_0xee2b[5077]] ? _0xee2b[5078] : _0xee2b[27]]);
  _0x8e22xa[_0xee2b[264]](_0xee2b[5079]);
  if (this[_0xee2b[5080]]) {
    _0x8e22x5[_0xee2b[760]](_0xee2b[4678])[_0xee2b[63]]();
  }
  if (this[_0xee2b[5077]]) {
    var _0x8e22xe = _0x8e22x3[_0xee2b[760]](_0x8e22x9[_0xee2b[829]][_0xee2b[2034]]);
    _0x8e22xe[_0xee2b[25]](function(_0x8e22xc) {
      _0x8e22xc[_0xee2b[2051]](_0xee2b[5081], _0x8e22xc[_0xee2b[758]][_0xee2b[763]][_0xee2b[773]]);
    });
  }
  _0x8e22xf[_0xee2b[264]](_0xee2b[5082]);
  _0x8e22x6[_0xee2b[264]](_0xee2b[5083]);
  if (this[_0xee2b[5084]]) {
    _0x8e22xf[_0xee2b[5086]](_0xee2b[5085]);
    _0x8e22x6[_0xee2b[5086]](_0xee2b[5085]);
  }
  if (Ext[_0xee2b[960]] && _0x8e22x9[_0xee2b[5087]]) {
    var _0x8e22x10 = _0x8e22x9[_0xee2b[5087]][_0xee2b[859]]();
    Ext[_0xee2b[761]](_0x8e22x6[_0xee2b[265]][_0xee2b[758]][_0xee2b[96]])[_0xee2b[2051]]({position:_0xee2b[5088], height:_0x8e22x10 + _0xee2b[804]});
    Ext[_0xee2b[761]](_0x8e22xf[_0xee2b[265]][_0xee2b[758]][_0xee2b[96]])[_0xee2b[2051]]({position:_0xee2b[5088], height:_0x8e22x10 + _0xee2b[804]});
  }
}, prepareMainTplData:function(_0x8e22x3) {
  return _0x8e22x3;
}, printPages:function(_0x8e22x6, _0x8e22x5, _0x8e22x9, _0x8e22x4) {
  if (!this[_0xee2b[5065]] || !this[_0xee2b[5065]][_0xee2b[4528]]) {
    this[_0xee2b[5065]] = new Ext.XTemplate(this[_0xee2b[5065]], {compiled:true, disableFormats:true});
  }
  var _0x8e22x1 = _0x8e22x9[_0xee2b[4584]], _0x8e22x3 = document[_0xee2b[2179]];
  var _0x8e22x2 = this[_0xee2b[5065]][_0xee2b[8]](this[_0xee2b[5095]]({docType:this[_0xee2b[5089]], htmlClasses:_0x8e22x3[_0xee2b[96]][_0xee2b[1868]], bodyClasses:_0x8e22x3[_0xee2b[1868]], title:_0x8e22x5[_0xee2b[14]] || _0xee2b[27], styles:_0x8e22x1, totalWidth:_0x8e22x9[_0xee2b[4547]], setupScript:this[_0xee2b[5094]][_0xee2b[675]](_0xee2b[5092], this[_0xee2b[5093]])[_0xee2b[675]](_0xee2b[5090], Ext[_0xee2b[5091]]), pages:_0x8e22x6}));
  var _0x8e22x7 = window[_0xee2b[4992]](_0xee2b[27], _0xee2b[5096]);
  if (!_0x8e22x7 || !_0x8e22x7[_0xee2b[5015]] || _0x8e22x7[_0xee2b[5097]] || typeof _0x8e22x7[_0xee2b[5097]] === _0xee2b[317]) {
    this[_0xee2b[5098]]();
    return false;
  }
  this[_0xee2b[5099]] = _0x8e22x7;
  _0x8e22x7[_0xee2b[5015]][_0xee2b[5014]](_0x8e22x2);
  _0x8e22x7[_0xee2b[5015]][_0xee2b[4327]]();
  this[_0xee2b[4926]]({success:true, url:_0xee2b[5017], htmlArray:[_0x8e22x2]});
}, bindExporter:function(_0x8e22x6) {
  var _0x8e22x3 = this;
  _0x8e22x3[_0xee2b[9]](arguments);
  _0x8e22x3[_0xee2b[252]](_0x8e22x6, {beforecommitpage:_0x8e22x3[_0xee2b[5100]], scope:_0x8e22x3});
}, unbindExporter:function(_0x8e22x6) {
  var _0x8e22x3 = this;
  _0x8e22x3[_0xee2b[9]](arguments);
  _0x8e22x3[_0xee2b[325]](_0x8e22x6, {beforecommitpage:_0x8e22x3[_0xee2b[5100]], scope:_0x8e22x3});
}});
Ext[_0xee2b[6]](_0xee2b[5101], {extend:_0xee2b[5102], alias:_0xee2b[5103], requires:[_0xee2b[5104]], mixins:[_0xee2b[782], _0xee2b[665]], lockableScope:_0xee2b[686], cls:_0xee2b[5105], allowBlur:false, shadow:false, delegate:_0xee2b[5106], dataIndex:null, completeOnEnter:true, cancelOnEsc:true, dragProxyEl:null, eventRecord:null, resourceRecord:null, triggerEvent:_0xee2b[3342], newEventText:null, autoSize:{width:_0xee2b[5107]}, initComponent:function() {
  this[_0xee2b[927]] = this[_0xee2b[927]] || {xtype:_0xee2b[4389], selectOnFocus:true};
  this[_0xee2b[9]](arguments);
}, init:function(_0x8e22x3) {
  this[_0xee2b[2502]] = _0x8e22x3[_0xee2b[808]]();
  _0x8e22x3[_0xee2b[149]](_0xee2b[3088], this[_0xee2b[5108]], this);
  this[_0xee2b[2502]][_0xee2b[2552]](this);
  this[_0xee2b[2292]] = this[_0xee2b[2292]] || this[_0xee2b[2502]][_0xee2b[696]]()[_0xee2b[327]][_0xee2b[139]][_0xee2b[1228]];
}, edit:function(_0x8e22x3, _0x8e22x4, _0x8e22x6) {
  if (!this[_0xee2b[262]]) {
    this[_0xee2b[5109]] = this[_0xee2b[2502]][_0xee2b[787]]();
  }
  this[_0xee2b[5110]] = _0x8e22x6 || this[_0xee2b[2502]][_0xee2b[2191]](_0x8e22x3, _0x8e22x4)[0];
  this[_0xee2b[2329]] = _0x8e22x3;
  this[_0xee2b[2055]] = _0x8e22x4;
  this[_0xee2b[5112]](_0x8e22x6[_0xee2b[758]][_0xee2b[2517]](this[_0xee2b[5111]]), this[_0xee2b[2329]][_0xee2b[55]](this[_0xee2b[2292]]));
  this[_0xee2b[2011]]();
}, onSchedulerRender:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  _0x8e22x6[_0xee2b[149]]({startedit:_0x8e22x6[_0xee2b[5113]], complete:function(_0x8e22x1, _0x8e22x9, _0x8e22x2) {
    var _0x8e22x4 = _0x8e22x6[_0xee2b[2329]];
    var _0x8e22x5 = _0x8e22x6[_0xee2b[2502]][_0xee2b[696]]();
    _0x8e22x4[_0xee2b[50]](_0x8e22x6[_0xee2b[2292]], _0x8e22x9);
    if (_0x8e22x5[_0xee2b[147]](_0x8e22x4) < 0) {
      if (_0x8e22x6[_0xee2b[2502]][_0xee2b[180]](_0xee2b[2664], _0x8e22x6[_0xee2b[2502]], _0x8e22x4, [_0x8e22x6[_0xee2b[2055]]]) !== false) {
        _0x8e22x6[_0xee2b[2502]][_0xee2b[3277]](_0x8e22x4, [_0x8e22x6[_0xee2b[2055]]]);
        _0x8e22x5[_0xee2b[384]](_0x8e22x4);
        _0x8e22x4[_0xee2b[1605]](_0x8e22x6[_0xee2b[2055]]);
      }
    }
    _0x8e22x6[_0xee2b[5114]]();
  }, canceledit:_0x8e22x6[_0xee2b[5114]], hide:function() {
    var _0x8e22x4 = _0x8e22x6[_0xee2b[4179]];
    if (_0x8e22x4 && _0x8e22x4[_0xee2b[758]] && _0x8e22x4[_0xee2b[758]][_0xee2b[96]]) {
      _0x8e22x4[_0xee2b[218]]();
    }
  }, scope:_0x8e22x6});
  _0x8e22x3[_0xee2b[149]](_0xee2b[2088], _0x8e22x6[_0xee2b[3284]], _0x8e22x6);
  _0x8e22x3[_0xee2b[149]](_0x8e22x6[_0xee2b[2219]], _0x8e22x6[_0xee2b[5115]], _0x8e22x6);
}, onStartEdit:function() {
  if (!this[_0xee2b[5116]]) {
    Ext[_0xee2b[797]]()[_0xee2b[149]](_0xee2b[784], this[_0xee2b[785]], this, {capture:true});
  }
}, onTriggerEvent:function(_0x8e22x6, _0x8e22x3, _0x8e22x1) {
  if (!this[_0xee2b[2502]][_0xee2b[2184]]()) {
    var _0x8e22x5 = _0x8e22x1[_0xee2b[2033]](_0x8e22x6[_0xee2b[2034]]);
    var _0x8e22x4 = _0x8e22x6[_0xee2b[2036]](_0x8e22x5);
    this[_0xee2b[171]](_0x8e22x3, _0x8e22x4, Ext[_0xee2b[55]](_0x8e22x5));
    this[_0xee2b[787]]()[_0xee2b[2068]](this[_0xee2b[787]]()[_0xee2b[1945]]()[_0xee2b[3068]](this[_0xee2b[2502]][_0xee2b[1945]]()));
  }
}, onAfterEdit:function() {
  this[_0xee2b[2329]] = null;
  this[_0xee2b[2055]] = null;
  if (!this[_0xee2b[5116]]) {
    Ext[_0xee2b[797]]()[_0xee2b[152]](_0xee2b[784], this[_0xee2b[785]], this, {capture:true});
  }
}, onMouseDown:function(_0x8e22x6, _0x8e22x3) {
  if (this[_0xee2b[3029]] && this[_0xee2b[265]] && !_0x8e22x6[_0xee2b[3021]](this[_0xee2b[265]])) {
    this[_0xee2b[4057]]();
  }
}, onDragCreateEnd:function(_0x8e22x5, _0x8e22x4, _0x8e22x1, _0x8e22x9, _0x8e22x6) {
  var _0x8e22x3 = _0x8e22x6[_0xee2b[758]][_0xee2b[2263]](true);
  _0x8e22x3[_0xee2b[388]] = _0xee2b[27];
  _0x8e22x6[_0xee2b[758]][_0xee2b[96]][_0xee2b[83]](_0x8e22x3);
  this[_0xee2b[4179]] = Ext[_0xee2b[55]](_0x8e22x3);
  if (_0x8e22x4[_0xee2b[55]](this[_0xee2b[2292]]) === _0xee2b[27]) {
    _0x8e22x4[_0xee2b[50]](this[_0xee2b[2292]], this[_0xee2b[5117]] || this.L(_0xee2b[5117]));
  }
  this[_0xee2b[171]](_0x8e22x4, _0x8e22x1, this[_0xee2b[4179]]);
}, destroy:function() {
  this[_0xee2b[3030]]();
  this[_0xee2b[2329]] = null;
  this[_0xee2b[2055]] = null;
  this[_0xee2b[9]](arguments);
}, realign:function(_0x8e22x6) {
  var _0x8e22x5 = this, _0x8e22x3 = _0x8e22x5[_0xee2b[9]]([_0x8e22x6]), _0x8e22x4 = _0x8e22x5[_0xee2b[5110]] && _0x8e22x5[_0xee2b[5110]][_0xee2b[2611]]();
  if (_0x8e22x4) {
    _0x8e22x5[_0xee2b[787]]()[_0xee2b[2068]](_0x8e22x4);
    _0x8e22x5[_0xee2b[787]]()[_0xee2b[861]](_0xee2b[4381])[_0xee2b[2068]](_0x8e22x4);
  }
  return _0x8e22x3;
}});
Ext[_0xee2b[6]](_0xee2b[5118], {extend:_0xee2b[782], mixins:[_0xee2b[665]], requires:[_0xee2b[5119]], alias:_0xee2b[5120], splitGrid:false, triggerEvent:_0xee2b[744], menuConfig:null, menu:null, grid:null, gridClone:null, splitMergeMenuItem:null, splitMergeMenuItemId:_0xee2b[5121], splitCls:_0xee2b[5122], resizeHandleCls:_0xee2b[5123], gridCloneCls:_0xee2b[5124], staticCloneConfig:{__cloned:true, splitGrid:false, eventPrefix:null, dock:_0xee2b[754], id:null, itemId:null, hideHeaders:true, header:false, 
tbar:null, tools:null, bbar:null, buttons:null, margin:0, padding:0, resizable:{pinned:true, handles:_0xee2b[2418], dynamic:true}}, init:function(_0x8e22x3) {
  if (!_0x8e22x3[_0xee2b[5125]]) {
    _0x8e22x3[_0xee2b[149]](_0xee2b[833], function() {
      this[_0xee2b[5126]](_0x8e22x3);
    }, this, {single:true});
  }
}, setupGrid:function(_0x8e22x3) {
  this[_0xee2b[840]] = _0x8e22x3;
  if (this[_0xee2b[2219]]) {
    this[_0xee2b[5127]]();
    this[_0xee2b[5128]]();
  }
  _0x8e22x3[_0xee2b[496]] = Ext[_0xee2b[283]][_0xee2b[282]](this[_0xee2b[496]], this);
  _0x8e22x3[_0xee2b[4398]] = Ext[_0xee2b[283]][_0xee2b[282]](this[_0xee2b[4398]], this);
  _0x8e22x3[_0xee2b[5129]] = Ext[_0xee2b[283]][_0xee2b[282]](this[_0xee2b[5129]], this);
  this[_0xee2b[5130]] = !Ext[_0xee2b[1353]](_0x8e22x3[_0xee2b[5130]]) ? _0x8e22x3[_0xee2b[5130]] : this[_0xee2b[5130]];
  if (this[_0xee2b[5130]]) {
    this[_0xee2b[496]]();
  }
}, split:function(_0x8e22x3) {
  if (this[_0xee2b[5129]]() || !this[_0xee2b[840]][_0xee2b[1828]]()) {
    return;
  }
  this[_0xee2b[5131]] = this[_0xee2b[5132]](_0x8e22x3);
  this[_0xee2b[840]][_0xee2b[264]](this[_0xee2b[4221]]);
  this[_0xee2b[5131]][_0xee2b[264]](this[_0xee2b[5133]]);
  var _0x8e22x6 = this[_0xee2b[840]][_0xee2b[787]]()[_0xee2b[861]](_0xee2b[495] + Ext[_0xee2b[238]] + _0xee2b[5134] + Ext[_0xee2b[238]] + _0xee2b[5135]);
  _0x8e22x6[_0xee2b[264]](this[_0xee2b[5136]]);
  this[_0xee2b[5131]][_0xee2b[252]](_0x8e22x6, _0xee2b[743], this[_0xee2b[4398]], this);
  this[_0xee2b[5131]][_0xee2b[252]](this[_0xee2b[840]], _0xee2b[835], this[_0xee2b[5137]], this);
  this[_0xee2b[5138]]();
  this[_0xee2b[840]][_0xee2b[180]](_0xee2b[496], this);
}, merge:function() {
  if (!this[_0xee2b[5129]]() || !this[_0xee2b[840]][_0xee2b[1828]]()) {
    return;
  }
  this[_0xee2b[5131]][_0xee2b[218]]();
  this[_0xee2b[5131]] = null;
  this[_0xee2b[840]][_0xee2b[267]](this[_0xee2b[4221]]);
  this[_0xee2b[840]][_0xee2b[180]](_0xee2b[4398], this);
}, isSplit:function() {
  return !!this[_0xee2b[5131]];
}, getCloneConfig:function(_0x8e22x3, _0x8e22x6) {
  return {};
}, onMenuTriggerEvent:function(_0x8e22x4) {
  if (!this[_0xee2b[840]][_0xee2b[1828]]()) {
    return;
  }
  this[_0xee2b[247]][_0xee2b[5139]](_0x8e22x4[_0xee2b[1970]]());
  if (this[_0xee2b[5140]]) {
    this[_0xee2b[5140]][_0xee2b[4229]](this[_0xee2b[5129]]() ? this.L(_0xee2b[5141]) : this.L(_0xee2b[5142]));
    var _0x8e22x3 = _0x8e22x4[_0xee2b[2033]](_0xee2b[495] + Ext[_0xee2b[238]] + _0xee2b[5143]);
    if (_0x8e22x3) {
      var _0x8e22x6 = (this[_0xee2b[840]][_0xee2b[3380]] || this[_0xee2b[840]])[_0xee2b[290]]()[_0xee2b[787]]()[_0xee2b[1936]]();
      this[_0xee2b[5140]][_0xee2b[5144]] = Ext[_0xee2b[761]](_0x8e22x3)[_0xee2b[2420]]() - _0x8e22x6;
    }
  }
  _0x8e22x4[_0xee2b[2217]]();
}, createMenu:function() {
  this[_0xee2b[247]] = Ext[_0xee2b[831]](Ext[_0xee2b[8]]({xclass:_0xee2b[5119], plain:true, defaults:{scope:this}, items:[{itemId:this[_0xee2b[5145]], handler:_0xee2b[5146]}]}, this[_0xee2b[5147]]));
  this[_0xee2b[5140]] = this[_0xee2b[247]][_0xee2b[861]](_0xee2b[4535] + this[_0xee2b[5145]]);
}, addGridListeners:function() {
  this[_0xee2b[840]][_0xee2b[149]](_0xee2b[2971] + this[_0xee2b[2219]], function(_0x8e22x6, _0x8e22x5, _0x8e22x4, _0x8e22x3, _0x8e22x1) {
    this[_0xee2b[5148]](_0x8e22x1);
  }, this);
  this[_0xee2b[840]][_0xee2b[787]]()[_0xee2b[149]](this[_0xee2b[2219]], this[_0xee2b[5148]], this, {delegate:_0xee2b[495] + this[_0xee2b[5136]]});
  this[_0xee2b[840]][_0xee2b[149]](_0xee2b[3411], this[_0xee2b[5149]], this);
}, onBeforeGridModeChange:function(_0x8e22x3, _0x8e22x6) {
  var _0x8e22x4 = Ext[_0xee2b[363]](_0x8e22x6) ? _0x8e22x6 : _0x8e22x6[_0xee2b[1719]];
  if (_0x8e22x4 !== _0xee2b[1931] && this[_0xee2b[5129]]()) {
    this[_0xee2b[4398]]();
  }
}, onSplitMergeMenuItemClick:function(_0x8e22x3, _0x8e22x6) {
  if (this[_0xee2b[5129]]()) {
    this[_0xee2b[4398]]();
  } else {
    this[_0xee2b[496]](_0x8e22x3[_0xee2b[5144]]);
  }
}, cloneGrid:function(_0x8e22x3) {
  var _0x8e22x5 = this[_0xee2b[840]], _0x8e22x4 = Ext[_0xee2b[26]][_0xee2b[41]](_0x8e22x5[_0xee2b[1848]][_0xee2b[3213]](), this[_0xee2b[5150]], this);
  _0x8e22x4 = Ext[_0xee2b[26]][_0xee2b[173]](_0x8e22x4, function(_0x8e22x2) {
    return _0x8e22x2[_0xee2b[3573]] !== _0xee2b[3112];
  });
  var _0x8e22x6 = Ext[_0xee2b[8]]({partnerTimelinePanel:_0x8e22x5, xtype:_0x8e22x5[_0xee2b[3573]], crudManager:_0x8e22x5[_0xee2b[312]], eventStore:_0x8e22x5[_0xee2b[1071]], resourceStore:_0x8e22x5[_0xee2b[1302]], dependencyStore:_0x8e22x5[_0xee2b[1303]], assignmentStore:_0x8e22x5[_0xee2b[1003]], height:_0x8e22x3 ? this[_0xee2b[5151]]() - _0x8e22x3 : this[_0xee2b[5151]]() / 2, maxHeight:this[_0xee2b[5152]](), columns:_0x8e22x4}, this[_0xee2b[5153]]);
  _0x8e22x6 = Ext[_0xee2b[330]](_0x8e22x6, _0x8e22x5[_0xee2b[1702]]);
  _0x8e22x6 = Ext[_0xee2b[8]](_0x8e22x6, this[_0xee2b[5154]](_0x8e22x5, _0x8e22x6));
  return _0x8e22x5[_0xee2b[3429]](_0x8e22x6)[0];
}, cloneColumn:function(_0x8e22x3) {
  return Ext[_0xee2b[330]]({width:_0x8e22x3[_0xee2b[793]](), locked:_0x8e22x3[_0xee2b[3539]], flex:_0x8e22x3[_0xee2b[5155]]}, _0x8e22x3[_0xee2b[1702]]);
}, getGridViewHeight:function() {
  var _0x8e22x3 = this[_0xee2b[840]][_0xee2b[1830]] ? this[_0xee2b[840]][_0xee2b[1830]][_0xee2b[290]]() : this[_0xee2b[840]][_0xee2b[290]]();
  return _0x8e22x3[_0xee2b[859]]();
}, setupSynchronization:function() {
  var _0x8e22x3 = this[_0xee2b[840]][_0xee2b[3380]] || this[_0xee2b[840]];
  var _0x8e22x6 = this[_0xee2b[5131]][_0xee2b[3380]] || this[_0xee2b[5131]];
  this[_0xee2b[5156]](_0x8e22x3[_0xee2b[3565]](), _0x8e22x6[_0xee2b[3565]]());
  if (this[_0xee2b[840]][_0xee2b[1830]]) {
    this[_0xee2b[5156]](this[_0xee2b[840]][_0xee2b[1830]][_0xee2b[3565]](), this[_0xee2b[5131]][_0xee2b[1830]][_0xee2b[3565]]());
  }
}, setupColumnSync:function(_0x8e22x3, _0x8e22x6) {
  _0x8e22x6[_0xee2b[252]](_0x8e22x3, {columnresize:this[_0xee2b[5157]], scope:_0x8e22x6});
  _0x8e22x6[_0xee2b[252]](_0x8e22x3, {columnschanged:this[_0xee2b[5158]], scope:this});
}, onColumnResize:function(_0x8e22x3, _0x8e22x6, _0x8e22x5) {
  var _0x8e22x4 = this;
  var _0x8e22x2 = _0x8e22x4[_0xee2b[3213]]();
  _0x8e22x2[_0x8e22x3[_0xee2b[266]][_0xee2b[147]](_0x8e22x6)][_0xee2b[839]](_0x8e22x5);
}, onColumnsChanged:function(_0x8e22x3, _0x8e22x6, _0x8e22x5, _0x8e22x2) {
  var _0x8e22x4 = this[_0xee2b[840]][_0xee2b[3380]] || this[_0xee2b[840]];
  var _0x8e22x1 = this[_0xee2b[5131]][_0xee2b[3380]] || this[_0xee2b[5131]];
  _0x8e22x1[_0xee2b[3565]]()[_0xee2b[254]]();
  _0x8e22x1[_0xee2b[3565]]()[_0xee2b[255]](Ext[_0xee2b[26]][_0xee2b[41]](_0x8e22x4[_0xee2b[3565]]()[_0xee2b[3213]](), this[_0xee2b[5150]], this));
  if (this[_0xee2b[840]][_0xee2b[1830]]) {
    _0x8e22x4 = this[_0xee2b[840]][_0xee2b[1830]];
    _0x8e22x1 = this[_0xee2b[5131]][_0xee2b[1830]];
    _0x8e22x1[_0xee2b[3565]]()[_0xee2b[254]]();
    _0x8e22x1[_0xee2b[3565]]()[_0xee2b[255]](Ext[_0xee2b[26]][_0xee2b[41]](_0x8e22x4[_0xee2b[3565]]()[_0xee2b[3213]](), this[_0xee2b[5150]], this));
  }
}, onMainGridResize:function() {
  var _0x8e22x3 = this[_0xee2b[5152]]();
  this[_0xee2b[5131]][_0xee2b[2399]][_0xee2b[2434]] = this[_0xee2b[5131]][_0xee2b[2399]][_0xee2b[2411]][_0xee2b[2434]] = _0x8e22x3;
  if (this[_0xee2b[5131]][_0xee2b[859]]() > _0x8e22x3) {
    this[_0xee2b[5131]][_0xee2b[863]](_0x8e22x3);
  }
  this[_0xee2b[5131]][_0xee2b[5159]](_0x8e22x3);
}, getCloneMaxHeight:function() {
  var _0x8e22x3 = this[_0xee2b[840]][_0xee2b[861]](_0xee2b[5160])[_0xee2b[265]][_0xee2b[2420]]() - this[_0xee2b[840]][_0xee2b[265]][_0xee2b[2421]]();
  return this[_0xee2b[840]][_0xee2b[859]]() - _0x8e22x3;
}, destroy:function() {
  if (this[_0xee2b[247]]) {
    this[_0xee2b[247]][_0xee2b[218]]();
  }
  this[_0xee2b[9]](arguments);
}});
Ext[_0xee2b[6]](_0xee2b[5161], {extend:_0xee2b[782], mixins:[_0xee2b[665]], requires:[_0xee2b[717]], alias:_0xee2b[5162], renderer:false, scope:null, height:20, titleContainer:null, barContainer:null, titleContainerCls:_0xee2b[5163], barContainerCls:_0xee2b[5164], grid:null, view:null, resourceStore:null, eventStore:null, tpl:_0xee2b[5165], init:function(_0x8e22x3) {
  var _0x8e22x6 = this;
  _0x8e22x6[_0xee2b[840]] = _0x8e22x3;
  _0x8e22x6[_0xee2b[829]] = _0x8e22x3[_0xee2b[808]]();
  _0x8e22x6[_0xee2b[1071]] = _0x8e22x3[_0xee2b[696]]();
  _0x8e22x6[_0xee2b[1302]] = _0x8e22x3[_0xee2b[1007]]();
  _0x8e22x6[_0xee2b[3612]] = new Ext.XTemplate(_0x8e22x6[_0xee2b[3612]]);
  if (_0x8e22x3[_0xee2b[1828]]()) {
    _0x8e22x6[_0xee2b[5166]]();
  }
  _0x8e22x6[_0xee2b[5167]]();
  _0x8e22x6[_0xee2b[9]](arguments);
}, initBars:function() {
  var _0x8e22x3 = this;
  _0x8e22x3[_0xee2b[5168]] = _0x8e22x3[_0xee2b[840]][_0xee2b[1830]][_0xee2b[3429]]({xtype:_0xee2b[2948], dock:_0xee2b[754], height:_0x8e22x3[_0xee2b[747]], cls:_0x8e22x3[_0xee2b[5169]], html:_0xee2b[5170] + _0x8e22x3[_0xee2b[747]] + _0xee2b[5171] + _0x8e22x3.L(_0xee2b[5172]) + _0xee2b[5173]})[0];
  _0x8e22x3[_0xee2b[5174]] = _0x8e22x3[_0xee2b[840]][_0xee2b[3380]][_0xee2b[3429]]({xtype:_0xee2b[2948], dock:_0xee2b[754], height:_0x8e22x3[_0xee2b[747]], cls:_0x8e22x3[_0xee2b[5175]], scrollable:{x:false, y:false}})[0];
  _0x8e22x3[_0xee2b[5174]][_0xee2b[1941]]()[_0xee2b[3951]](_0x8e22x3[_0xee2b[829]][_0xee2b[1941]](), _0xee2b[1893]);
}, destroyBars:function() {
  var _0x8e22x3 = this;
  if (_0x8e22x3[_0xee2b[5174]]) {
    _0x8e22x3[_0xee2b[5174]][_0xee2b[218]]();
    _0x8e22x3[_0xee2b[5174]] = null;
  }
  if (_0x8e22x3[_0xee2b[5168]]) {
    _0x8e22x3[_0xee2b[5168]][_0xee2b[218]]();
    _0x8e22x3[_0xee2b[5168]] = null;
  }
}, setupListeners:function() {
  var _0x8e22x6 = this, _0x8e22x3 = _0x8e22x6[_0xee2b[840]];
  _0x8e22x6[_0xee2b[829]][_0xee2b[149]](_0xee2b[770], _0x8e22x6[_0xee2b[5176]], _0x8e22x6);
  var _0x8e22x4 = {add:_0x8e22x6[_0xee2b[5176]], remove:_0x8e22x6[_0xee2b[5176]], update:_0x8e22x6[_0xee2b[5176]], scope:_0x8e22x6};
  _0x8e22x3[_0xee2b[252]](_0x8e22x6[_0xee2b[1071]], _0x8e22x4);
  _0x8e22x3[_0xee2b[252]](_0x8e22x6[_0xee2b[1302]], _0x8e22x4);
  if (_0x8e22x3[_0xee2b[1051]]()) {
    _0x8e22x3[_0xee2b[252]](_0x8e22x3[_0xee2b[1051]](), _0x8e22x4);
  }
  _0x8e22x6[_0xee2b[840]][_0xee2b[149]](_0xee2b[3420], _0x8e22x6[_0xee2b[5177]], _0x8e22x6);
}, onGridModeChange:function() {
  var _0x8e22x3 = this;
  if (_0x8e22x3[_0xee2b[840]][_0xee2b[1828]]()) {
    _0x8e22x3[_0xee2b[5166]]();
    _0x8e22x3[_0xee2b[5176]]();
  } else {
    _0x8e22x3[_0xee2b[5178]]();
  }
}, renderSummaryRow:function() {
  var _0x8e22x3 = this;
  if (!_0x8e22x3[_0xee2b[5174]]) {
    return;
  }
  var _0x8e22x6 = document[_0xee2b[3662]](_0xee2b[2258]);
  _0x8e22x6[_0xee2b[3737]] = _0x8e22x3[_0xee2b[3612]][_0xee2b[8]](_0x8e22x3[_0xee2b[5179]]());
  _0x8e22x3[_0xee2b[5174]][_0xee2b[265]][_0xee2b[3738]](_0x8e22x6);
}, buildRenderData:function() {
  var _0x8e22x5 = this, _0x8e22x4 = _0x8e22x5[_0xee2b[829]][_0xee2b[1795]][_0xee2b[4556]](), _0x8e22x6 = _0x8e22x5[_0xee2b[829]][_0xee2b[810]][_0xee2b[755]](), _0x8e22x3 = _0x8e22x6 * _0x8e22x4[_0xee2b[4]];
  return {totalWidth:_0x8e22x3, bars:Ext[_0xee2b[26]][_0xee2b[41]](_0x8e22x4, function(_0x8e22x1) {
    var _0x8e22x2 = _0x8e22x5[_0xee2b[1302]][_0xee2b[5180]](_0x8e22x1[_0xee2b[179]], _0x8e22x1[_0xee2b[771]], _0x8e22x5[_0xee2b[1071]]), _0x8e22x9 = {width:_0x8e22x6, cls:_0xee2b[27], style:_0xee2b[27], attr:_0xee2b[27]};
    _0x8e22x9[_0xee2b[2302]] = _0x8e22x5[_0xee2b[878]] ? _0x8e22x5[_0xee2b[878]][_0xee2b[293]](_0x8e22x5[_0xee2b[689]] || _0x8e22x5, _0x8e22x2, _0x8e22x9) : _0xee2b[2303];
    return _0x8e22x9;
  })};
}});
Ext[_0xee2b[6]](_0xee2b[5181], {extend:_0xee2b[2488], alias:_0xee2b[5182], requires:[_0xee2b[1716], _0xee2b[1198]], getZoneCls:Ext[_0xee2b[688]], eventStoreListeners:null, init:function(_0x8e22x3) {
  this[_0xee2b[64]] = new Ext[_0xee2b[22]].JsonStore({autoDestroy:true, model:_0xee2b[1198]});
  this[_0xee2b[2502]] = _0x8e22x3;
  this[_0xee2b[1407]](_0x8e22x3[_0xee2b[696]]());
  _0x8e22x3[_0xee2b[149]]({afterrender:this[_0xee2b[5183]], eventstorechange:function(_0x8e22x6, _0x8e22x4) {
    this[_0xee2b[1407]](_0x8e22x4);
    this[_0xee2b[5183]]();
  }, scope:this});
  this[_0xee2b[1817]] = _0x8e22x3[_0xee2b[808]]();
  this[_0xee2b[9]](arguments);
}, setEventStore:function(_0x8e22x3) {
  this[_0xee2b[5184]] && this[_0xee2b[5184]][_0xee2b[218]]();
  this[_0xee2b[5184]] = this[_0xee2b[252]](_0x8e22x3, {load:this[_0xee2b[5183]], update:this[_0xee2b[5183]], remove:this[_0xee2b[5183]], add:this[_0xee2b[5183]], datachanged:this[_0xee2b[5183]], destroyable:true, scope:this});
}, populateStore:function(_0x8e22x4) {
  var _0x8e22x6 = this[_0xee2b[1817]][_0xee2b[2658]](), _0x8e22x1 = [], _0x8e22x2 = this[_0xee2b[2502]][_0xee2b[697]](), _0x8e22xa = this[_0xee2b[2502]][_0xee2b[698]](), _0x8e22x5 = _0x8e22x6[_0xee2b[1466]](), _0x8e22x8 = _0x8e22x2, _0x8e22x9 = 0, _0x8e22x7, _0x8e22x3;
  _0x8e22x6[_0xee2b[4102]](function(_0x8e22x10, _0x8e22xd) {
    return _0x8e22x10[_0xee2b[712]]() - _0x8e22xd[_0xee2b[712]]();
  });
  _0x8e22x3 = _0x8e22x6[_0xee2b[1752]](0);
  while (_0x8e22x8 < _0x8e22xa && _0x8e22x9 < _0x8e22x5) {
    _0x8e22x7 = _0x8e22x3[_0xee2b[712]]();
    if (!Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[1175]](_0x8e22x8, _0x8e22x7, _0x8e22x3[_0xee2b[713]]()) && _0x8e22x8 < _0x8e22x7) {
      _0x8e22x1[_0xee2b[11]](new this[_0xee2b[64]][_0xee2b[327]]({StartDate:_0x8e22x8, EndDate:_0x8e22x7, Cls:this[_0xee2b[5185]](_0x8e22x8, _0x8e22x7) || _0xee2b[27]}));
    }
    _0x8e22x8 = Sch[_0xee2b[49]][_0xee2b[703]][_0xee2b[715]](_0x8e22x3[_0xee2b[713]](), _0x8e22x8);
    _0x8e22x9++;
    _0x8e22x3 = _0x8e22x6[_0xee2b[1752]](_0x8e22x9);
  }
  if (_0x8e22x8 < _0x8e22xa) {
    _0x8e22x1[_0xee2b[11]]({StartDate:_0x8e22x8, EndDate:_0x8e22xa, Cls:this[_0xee2b[5185]](_0x8e22x8, _0x8e22xa) || _0xee2b[27]});
  }
  this[_0xee2b[64]][_0xee2b[254]](_0x8e22x1[_0xee2b[4]] > 0);
  this[_0xee2b[64]][_0xee2b[255]](_0x8e22x1);
}});
Ext[_0xee2b[6]](_0xee2b[5186], {extend:_0xee2b[3024], alias:_0xee2b[5187], requires:[_0xee2b[3995]], lockableScope:_0xee2b[3539], editorsStarted:0, init:function() {
  this[_0xee2b[149]](_0xee2b[5188], this[_0xee2b[5189]], this);
  this[_0xee2b[9]](arguments);
}, getEditor:function() {
  var _0x8e22x6 = this[_0xee2b[9]](arguments);
  if (_0x8e22x6 && !_0x8e22x6[_0xee2b[5190]]) {
    var _0x8e22x3 = _0x8e22x6[_0xee2b[5190]] = _0x8e22x6[_0xee2b[5112]];
    _0x8e22x6[_0xee2b[5112]] = function() {
      var _0x8e22x5 = this[_0xee2b[927]], _0x8e22x4;
      if (_0x8e22x5 && _0x8e22x5[_0xee2b[5191]]) {
        _0x8e22x5[_0xee2b[5192]](true);
      }
      _0x8e22x4 = _0x8e22x3[_0xee2b[8]](this, arguments);
      if (_0x8e22x5 && _0x8e22x5[_0xee2b[5191]]) {
        _0x8e22x5[_0xee2b[5192]](false);
      }
      return _0x8e22x4;
    };
  }
  return _0x8e22x6;
}, activateCell:function(_0x8e22x3) {
  var _0x8e22x6 = this[_0xee2b[9]](arguments);
  if (_0x8e22x6) {
    var _0x8e22x4 = this[_0xee2b[5193]](_0x8e22x3[_0xee2b[933]], _0x8e22x3[_0xee2b[2963]]);
    if (!_0x8e22x4[_0xee2b[5194]]) {
      _0x8e22x4[_0xee2b[5194]] = _0x8e22x4[_0xee2b[3030]];
      _0x8e22x4[_0xee2b[3030]] = this[_0xee2b[5195]];
    }
    this[_0xee2b[180]](_0xee2b[5196], this, _0x8e22x4);
  }
  return _0x8e22x6;
}, checkReadOnly:function() {
  var _0x8e22x3 = this[_0xee2b[800]]();
  if (_0x8e22x3) {
    if (!_0x8e22x3[_0xee2b[5197]] && !_0x8e22x3[_0xee2b[5198]]) {
      _0x8e22x3 = _0x8e22x3[_0xee2b[694]](_0xee2b[2937]);
    }
    return !_0x8e22x3[_0xee2b[2184]]();
  }
}, onEditComplete:function(_0x8e22x6, _0x8e22x5, _0x8e22x3) {
  var _0x8e22x4 = this;
  if (_0x8e22x6[_0xee2b[927]][_0xee2b[5199]]) {
    if (_0x8e22x5 instanceof Date && _0x8e22x5 - _0x8e22x3 || !(_0x8e22x5 instanceof Date) && _0x8e22x5 !== _0x8e22x3) {
      _0x8e22x6[_0xee2b[927]][_0xee2b[5199]](_0x8e22x6[_0xee2b[927]][_0xee2b[5200]] || _0x8e22x4[_0xee2b[2470]][_0xee2b[933]]);
    }
    return _0x8e22x4[_0xee2b[9]]([_0x8e22x6, _0x8e22x5, _0x8e22x5]);
  } else {
    return _0x8e22x4[_0xee2b[9]]([_0x8e22x6, _0x8e22x5, _0x8e22x3]);
  }
}, myCancelEdit:function() {
  var _0x8e22x6 = this, _0x8e22x5 = _0x8e22x6[_0xee2b[927]];
  if (_0x8e22x5 && _0x8e22x5[_0xee2b[5199]]) {
    var _0x8e22x4 = _0x8e22x5[_0xee2b[5201]];
    _0x8e22x5[_0xee2b[5201]] = true;
    var _0x8e22x3 = _0x8e22x6[_0xee2b[5194]][_0xee2b[8]](this, arguments);
    _0x8e22x5[_0xee2b[5201]] = _0x8e22x4;
    return _0x8e22x3;
  } else {
    return _0x8e22x6[_0xee2b[5194]][_0xee2b[8]](this, arguments);
  }
}, onMyBeforeEdit:function(_0x8e22x6, _0x8e22x3) {
  var _0x8e22x4 = _0x8e22x3[_0xee2b[2963]][_0xee2b[5193]]();
  if (_0x8e22x4 && _0x8e22x4[_0xee2b[5202]]) {
    _0x8e22x4[_0xee2b[5202]](_0x8e22x3[_0xee2b[933]]);
    _0x8e22x3[_0xee2b[5203]] = _0x8e22x4[_0xee2b[4121]]();
  }
  return this[_0xee2b[5204]]();
}, setEditingContext:function(_0x8e22x3) {
  if (_0x8e22x3[_0xee2b[53]](_0xee2b[5203])) {
    _0x8e22x3[_0xee2b[2302]] = _0x8e22x3[_0xee2b[5205]] = _0x8e22x3[_0xee2b[5203]];
    delete _0x8e22x3[_0xee2b[5203]];
  }
  this[_0xee2b[9]](arguments);
}});
Ext[_0xee2b[6]](_0xee2b[5206], {});
Ext[_0xee2b[6]](_0xee2b[5207], {singleton:true, runDiagnostics:function() {
  var _0x8e22x5;
  var _0x8e22xd = this;
  var _0x8e22x6 = window[_0xee2b[457]];
  if (_0x8e22x6 && _0x8e22x6[_0xee2b[401]]) {
    _0x8e22x5 = function() {
      _0x8e22x6[_0xee2b[401]][_0xee2b[8]](_0x8e22x6, arguments);
    };
  } else {
    if (!_0x8e22xd[_0xee2b[5208]]) {
      _0x8e22xd[_0xee2b[5208]] = new Ext.Window({height:400, width:500, bodyStyle:_0xee2b[5209], closeAction:_0xee2b[256], autoScroll:true});
    }
    _0x8e22xd[_0xee2b[5208]][_0xee2b[2019]]();
    _0x8e22xd[_0xee2b[5208]][_0xee2b[724]](_0xee2b[27]);
    _0x8e22x5 = function(_0x8e22xa) {
      _0x8e22xd[_0xee2b[5208]][_0xee2b[724]]((_0x8e22xd[_0xee2b[5208]][_0xee2b[2179]][_0xee2b[758]][_0xee2b[3737]] || _0xee2b[27]) + _0x8e22xa + _0xee2b[5210]);
    };
  }
  var _0x8e22x2 = Ext[_0xee2b[760]](_0xee2b[5211]);
  if (_0x8e22x2[_0xee2b[1466]]() === 0) {
    _0x8e22x5(_0xee2b[5212]);
  }
  var _0x8e22xb = Ext[_0xee2b[800]](_0x8e22x2[_0xee2b[3970]][0][_0xee2b[388]]), _0x8e22xf = _0x8e22xb[_0xee2b[1007]](), _0x8e22x4 = _0x8e22xb[_0xee2b[696]]();
  if (!_0x8e22x4[_0xee2b[1603]]) {
    _0x8e22x5(_0xee2b[5213]);
  }
  _0x8e22x5(_0xee2b[5214] + _0x8e22xb[_0xee2b[697]]() + _0xee2b[5215] + _0x8e22xb[_0xee2b[698]]());
  if (!_0x8e22xf) {
    _0x8e22x5(_0xee2b[5216]);
    return;
  }
  if (!_0x8e22x4) {
    _0x8e22x5(_0xee2b[5217]);
    return;
  }
  var _0x8e22x9 = new Ext[_0xee2b[49]].MixedCollection(), _0x8e22x8 = new Ext[_0xee2b[49]].MixedCollection();
  for (var _0x8e22x1 = 0; _0x8e22x1 < _0x8e22x4[_0xee2b[327]][_0xee2b[139]][_0xee2b[1027]][_0xee2b[4]]; _0x8e22x1++) {
    _0x8e22x9[_0xee2b[255]](_0x8e22x4[_0xee2b[327]][_0xee2b[139]][_0xee2b[1027]][_0x8e22x1][_0xee2b[683]], _0x8e22x4[_0xee2b[327]][_0xee2b[139]][_0xee2b[1027]][_0x8e22x1]);
  }
  for (_0x8e22x1 = 0; _0x8e22x1 < _0x8e22xf[_0xee2b[327]][_0xee2b[139]][_0xee2b[1027]][_0xee2b[4]]; _0x8e22x1++) {
    _0x8e22x8[_0xee2b[255]](_0x8e22xf[_0xee2b[327]][_0xee2b[139]][_0xee2b[1027]][_0x8e22x1][_0xee2b[683]], _0x8e22xf[_0xee2b[327]][_0xee2b[139]][_0xee2b[1027]][_0x8e22x1]);
  }
  _0x8e22x5(_0x8e22xf[_0xee2b[1466]]() + _0xee2b[5218]);
  _0x8e22x5(_0x8e22x4[_0xee2b[1466]]() + _0xee2b[5219]);
  var _0x8e22xc = _0x8e22x4[_0xee2b[327]][_0xee2b[139]][_0xee2b[328]];
  var _0x8e22x3 = _0x8e22xf[_0xee2b[327]][_0xee2b[139]][_0xee2b[328]];
  var _0x8e22xe = _0x8e22x9[_0xee2b[410]](_0x8e22xc);
  var _0x8e22x7 = _0x8e22x8[_0xee2b[410]](_0x8e22x3);
  if (!(new _0x8e22x4[_0xee2b[327]]() instanceof Sch[_0xee2b[327]][_0xee2b[1423]])) {
    _0x8e22x5(_0xee2b[5220]);
  }
  if (!(new _0x8e22xf[_0xee2b[327]]() instanceof Sch[_0xee2b[327]][_0xee2b[606]])) {
    _0x8e22x5(_0xee2b[5221]);
  }
  if (!_0x8e22xe) {
    _0x8e22x5(_0xee2b[5222] + _0x8e22xc);
  }
  if (!_0x8e22x7) {
    _0x8e22x5(_0xee2b[5223] + _0x8e22x3);
  }
  var _0x8e22x10 = _0x8e22xb[_0xee2b[808]]();
  _0x8e22x5(_0x8e22x10[_0xee2b[265]][_0xee2b[760]](_0x8e22x10[_0xee2b[2034]])[_0xee2b[1466]]() + _0xee2b[5224]);
  if (_0x8e22x4[_0xee2b[1466]]() > 0) {
    if (!_0x8e22x4[_0xee2b[572]]()[_0xee2b[712]]() || !(_0x8e22x4[_0xee2b[572]]()[_0xee2b[712]]() instanceof Date)) {
      _0x8e22x5(_0xee2b[5225]);
      _0x8e22x5(_0xee2b[5226] + _0x8e22x9[_0xee2b[410]](_0x8e22x4[_0xee2b[327]][_0xee2b[139]][_0xee2b[1201]])[_0xee2b[879]]);
      _0x8e22x5(_0xee2b[5227]);
    }
    if (!_0x8e22x4[_0xee2b[572]]()[_0xee2b[713]]() || !(_0x8e22x4[_0xee2b[572]]()[_0xee2b[713]]() instanceof Date)) {
      _0x8e22x5(_0xee2b[5228]);
      _0x8e22x5(_0xee2b[5229] + _0x8e22x9[_0xee2b[410]](_0x8e22x4[_0xee2b[327]][_0xee2b[139]][_0xee2b[1203]])[_0xee2b[879]]);
      _0x8e22x5(_0xee2b[5227]);
    }
    if (_0x8e22x4[_0xee2b[379]] && _0x8e22x4[_0xee2b[379]][_0xee2b[5230]] && _0x8e22x4[_0xee2b[379]][_0xee2b[5230]][_0xee2b[5231]]) {
      _0x8e22x5(_0xee2b[5232]);
      console && console[_0xee2b[1919]] && console[_0xee2b[1919]](_0x8e22x4[_0xee2b[379]][_0xee2b[5230]][_0xee2b[5233]]);
    }
    _0x8e22x5(_0xee2b[5234]);
    _0x8e22x4[_0xee2b[25]](function(_0x8e22x18, _0x8e22x11) {
      _0x8e22x5(_0x8e22x11 + 1 + _0xee2b[5235] + _0x8e22x18[_0xee2b[1201]] + _0xee2b[1129] + _0x8e22x18[_0xee2b[712]]() + _0xee2b[287] + _0x8e22x18[_0xee2b[1203]] + _0xee2b[1129] + _0x8e22x18[_0xee2b[713]]() + _0xee2b[287] + _0x8e22x18[_0xee2b[1009]] + _0xee2b[1129] + _0x8e22x18[_0xee2b[1008]]());
      if (!_0x8e22x18[_0xee2b[712]]()) {
        _0x8e22x5(_0x8e22x18[_0xee2b[712]]());
      }
    });
  } else {
    _0x8e22x5(_0xee2b[5236]);
  }
  if (_0x8e22xf[_0xee2b[234]]) {
    _0x8e22xf = _0x8e22xf[_0xee2b[5237]];
  }
  if (_0x8e22xf[_0xee2b[1466]]() > 0) {
    _0x8e22x5(_0xee2b[5238]);
    _0x8e22xf[_0xee2b[25]](function(_0x8e22x18, _0x8e22x11) {
      _0x8e22x5(_0x8e22x11 + 1 + _0xee2b[5235] + _0x8e22x18[_0xee2b[328]] + _0xee2b[1129] + _0x8e22x18[_0xee2b[32]]());
      return;
    });
  } else {
    _0x8e22x5(_0xee2b[5239]);
    return;
  }
  _0x8e22x5(_0xee2b[5240]);
}});
Ext[_0xee2b[6]](_0xee2b[5241], {extend:_0xee2b[3784], alias:_0xee2b[5242], config:{depsPerStep:50}, delegateRendering:function(_0x8e22x4, _0x8e22x6, _0x8e22x5) {
  var _0x8e22x2 = this, _0x8e22x1 = _0x8e22x2[_0xee2b[3823]](), _0x8e22x3 = _0x8e22x6[_0xee2b[191]](0, _0x8e22x1), _0x8e22x9 = _0x8e22x6[_0xee2b[191]](_0x8e22x1);
  _0x8e22x4[_0xee2b[3803]]()[_0xee2b[3802]](_0x8e22x4[_0xee2b[3610]](), _0x8e22x4[_0xee2b[3801]](), _0x8e22x3, false);
  return [_0x8e22x3, _0x8e22x9];
}});
Ext[_0xee2b[6]](_0xee2b[5243], {extend:_0xee2b[3784], alias:_0xee2b[5244], delegateRendering:function(_0x8e22x6, _0x8e22x3, _0x8e22x4) {
  _0x8e22x6[_0xee2b[3803]]()[_0xee2b[3802]](_0x8e22x6[_0xee2b[3610]](), _0x8e22x6[_0xee2b[3801]](), _0x8e22x3, false);
  return [_0x8e22x3, []];
}});
Ext[_0xee2b[6]](_0xee2b[5245], {extend:_0xee2b[5246], alias:_0xee2b[5247], getStoreId:function() {
  if (this[_0xee2b[146]]) {
    return this[_0xee2b[146]];
  }
  var _0x8e22x3 = this[_0xee2b[64]][_0xee2b[146]];
  if (!_0x8e22x3) {
    var _0x8e22x4 = this[_0xee2b[64]][_0xee2b[312]];
    var _0x8e22x6 = _0x8e22x4 && _0x8e22x4[_0xee2b[341]](this[_0xee2b[64]]);
    _0x8e22x3 = _0x8e22x6 && _0x8e22x6[_0xee2b[146]];
  }
  this[_0xee2b[146]] = _0x8e22x3;
  return _0x8e22x3;
}, loadPage:function(_0x8e22x4) {
  var _0x8e22x6 = this;
  if (_0x8e22x6[_0xee2b[64]][_0xee2b[312]]) {
    var _0x8e22x3 = _0x8e22x6[_0xee2b[5248]]();
    if (_0x8e22x3) {
      var _0x8e22x5 = {};
      _0x8e22x5[_0x8e22x3] = {pageSize:_0x8e22x6[_0xee2b[64]][_0xee2b[352]], page:_0x8e22x4};
      _0x8e22x6[_0xee2b[64]][_0xee2b[312]][_0xee2b[302]](_0x8e22x5);
    }
  } else {
    _0x8e22x6[_0xee2b[64]][_0xee2b[5249]](_0x8e22x4);
  }
}, onPagingKeyDown:function(_0x8e22x7, _0x8e22x9) {
  var _0x8e22x5 = this, _0x8e22x6 = _0x8e22x9[_0xee2b[2211]](), _0x8e22x4 = _0x8e22x5[_0xee2b[5250]](), _0x8e22x3 = _0x8e22x9[_0xee2b[4051]] ? 10 : 1, _0x8e22x1;
  if (_0x8e22x6 == _0x8e22x9[_0xee2b[5251]]) {
    _0x8e22x9[_0xee2b[2217]]();
    _0x8e22x1 = _0x8e22x5[_0xee2b[5252]](_0x8e22x4);
    if (_0x8e22x1 !== false) {
      _0x8e22x1 = Math[_0xee2b[203]](Math[_0xee2b[715]](1, _0x8e22x1), _0x8e22x4[_0xee2b[5253]]);
      if (_0x8e22x5[_0xee2b[180]](_0xee2b[5254], _0x8e22x5, _0x8e22x1) !== false) {
        _0x8e22x5[_0xee2b[5249]](_0x8e22x1);
      }
    }
  } else {
    if (_0x8e22x6 == _0x8e22x9[_0xee2b[5255]] || _0x8e22x6 == _0x8e22x9[_0xee2b[5256]]) {
      _0x8e22x9[_0xee2b[2217]]();
      _0x8e22x1 = _0x8e22x6 == _0x8e22x9[_0xee2b[5255]] ? 1 : _0x8e22x4[_0xee2b[5253]];
      _0x8e22x7[_0xee2b[2462]](_0x8e22x1);
    } else {
      if (_0x8e22x6 == _0x8e22x9[_0xee2b[5257]] || _0x8e22x6 == _0x8e22x9[_0xee2b[3204]] || _0x8e22x6 == _0x8e22x9[_0xee2b[5258]] || _0x8e22x6 == _0x8e22x9[_0xee2b[3203]]) {
        _0x8e22x9[_0xee2b[2217]]();
        _0x8e22x1 = _0x8e22x5[_0xee2b[5252]](_0x8e22x4);
        if (_0x8e22x1) {
          if (_0x8e22x6 == _0x8e22x9[_0xee2b[5258]] || _0x8e22x6 == _0x8e22x9[_0xee2b[3203]]) {
            _0x8e22x3 *= -1;
          }
          _0x8e22x1 += _0x8e22x3;
          if (_0x8e22x1 >= 1 && _0x8e22x1 <= _0x8e22x4[_0xee2b[5253]]) {
            _0x8e22x7[_0xee2b[2462]](_0x8e22x1);
          }
        }
      }
    }
  }
}, moveFirst:function() {
  if (this[_0xee2b[180]](_0xee2b[5254], this, 1) !== false) {
    this[_0xee2b[5249]](1);
  }
}, movePrevious:function() {
  var _0x8e22x6 = this, _0x8e22x3 = _0x8e22x6[_0xee2b[64]][_0xee2b[356]] - 1;
  if (_0x8e22x3 > 0) {
    if (_0x8e22x6[_0xee2b[180]](_0xee2b[5254], _0x8e22x6, _0x8e22x3) !== false) {
      _0x8e22x6[_0xee2b[5249]](_0x8e22x3);
    }
  }
}, moveNext:function() {
  var _0x8e22x4 = this, _0x8e22x6 = _0x8e22x4[_0xee2b[5250]]()[_0xee2b[5253]], _0x8e22x3 = _0x8e22x4[_0xee2b[64]][_0xee2b[356]] + 1;
  if (_0x8e22x3 <= _0x8e22x6) {
    if (_0x8e22x4[_0xee2b[180]](_0xee2b[5254], _0x8e22x4, _0x8e22x3) !== false) {
      _0x8e22x4[_0xee2b[5249]](_0x8e22x3);
    }
  }
}, moveLast:function() {
  var _0x8e22x6 = this, _0x8e22x3 = _0x8e22x6[_0xee2b[5250]]()[_0xee2b[5253]];
  if (_0x8e22x6[_0xee2b[180]](_0xee2b[5254], _0x8e22x6, _0x8e22x3) !== false) {
    _0x8e22x6[_0xee2b[5249]](_0x8e22x3);
  }
}, doRefresh:function() {
  var _0x8e22x3 = this, _0x8e22x6 = _0x8e22x3[_0xee2b[64]][_0xee2b[356]];
  if (_0x8e22x3[_0xee2b[180]](_0xee2b[5254], _0x8e22x3, _0x8e22x6) !== false) {
    _0x8e22x3[_0xee2b[5249]](_0x8e22x6);
  }
}});
(function() {
  window[_0xee2b[5259]] = false;
  if (!1 && !window[_0xee2b[5261]][_0xee2b[4562]][_0xee2b[2249]](_0xee2b[5260])) {
    var _0x8e22x4, _0x8e22x6;
    var _0x8e22x5 = function(_0x8e22x2) {
      if (window[_0xee2b[457]]) {
        console[_0xee2b[401]](_0x8e22x2);
      }
    };
    if (!Ext[_0xee2b[49]][_0xee2b[5263]][_0xee2b[55]](_0xee2b[5262])) {
      Ext[_0xee2b[49]][_0xee2b[5263]][_0xee2b[50]](_0xee2b[5262], (new Date())[_0xee2b[1162]](), Ext[_0xee2b[703]][_0xee2b[255]](new Date(), Ext[_0xee2b[703]].YEAR, 2));
    }
    var _0x8e22x3 = function() {
      this[_0xee2b[5264]](arguments);
      if (!this[_0xee2b[262]]) {
        return;
      }
      if (_0x8e22x4) {
        _0x8e22x4[_0xee2b[218]]();
      }
      _0x8e22x4 = this[_0xee2b[265]][_0xee2b[79]]()[_0xee2b[825]]({tag:_0xee2b[4993], cls:_0xee2b[5265], href:_0xee2b[5266], title:_0xee2b[5267], html:_0xee2b[5268], style:_0xee2b[5269]});
      try {
        if (Ext[_0xee2b[49]][_0xee2b[5263]][_0xee2b[55]](_0xee2b[5262])) {
          var _0x8e22x7 = Ext[_0xee2b[49]][_0xee2b[5263]][_0xee2b[55]](_0xee2b[5262]), _0x8e22x1 = new Date(parseInt(_0x8e22x7, 10));
          if (Ext[_0xee2b[703]][_0xee2b[255]](_0x8e22x1, Ext[_0xee2b[703]].DAY, 45) < new Date()) {
            if (_0x8e22x6) {
              _0x8e22x6[_0xee2b[218]]();
            }
            this[_0xee2b[265]][_0xee2b[4184]](_0xee2b[5270], _0xee2b[5271])[_0xee2b[2051]](_0xee2b[2424], 10000);
            _0x8e22x6 = this[_0xee2b[265]][_0xee2b[861]](_0xee2b[5272]);
            _0x8e22x6[_0xee2b[724]](_0xee2b[5273]);
            _0x8e22x6[_0xee2b[694]]()[_0xee2b[2051]](_0xee2b[5274], _0xee2b[5275]);
            _0x8e22x6[_0xee2b[2051]](_0xee2b[5276], _0xee2b[5277]);
            _0x8e22x6[_0xee2b[2051]](_0xee2b[5278], _0xee2b[5279]);
          }
        }
      } catch (g) {
      }
    };
    _0x8e22x5(_0xee2b[5280]);
    Ext[_0xee2b[5283]](function() {
      if (window[_0xee2b[5281]] && Sch[_0xee2b[829]] && Sch[_0xee2b[829]][_0xee2b[5282]]) {
        Sch[_0xee2b[829]][_0xee2b[5282]][_0xee2b[507]]({refresh:_0x8e22x3});
      }
    });
  }
  Ext[_0xee2b[22]][_0xee2b[5284]][_0xee2b[507]]({parseStatus:function(_0x8e22x1) {
    var _0x8e22x2 = this[_0xee2b[5264]](arguments);
    if (_0x8e22x1 === 0) {
      _0x8e22x2[_0xee2b[426]] = true;
    }
    return _0x8e22x2;
  }});
})();
